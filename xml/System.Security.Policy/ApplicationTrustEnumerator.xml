<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ApplicationTrustEnumerator.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac559ab8cb6df681b340ec518887a2d4220c23c34b8.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59ab8cb6df681b340ec518887a2d4220c23c34b8</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>Represents the enumerator for <ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> objects in the <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph> 컬렉션의 <ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> 개체에 대한 열거자를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>Enumerators only allow reading the data in the collection.</source>
          <target state="translated">열거자는 컬렉션의 데이터 읽기를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>Enumerators cannot be used to modify the underlying collection.</source>
          <target state="translated">내부 컬렉션을 수정 하 여 열거자를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">처음에 열거자는 컬렉션의 첫 번째 요소 앞에 배치됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;</ph> method also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;</ph> 메서드도 실행 하면 열거자가이 위치로 복원 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>At this position, calling the <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> property throws an exception.</source>
          <target state="translated">이 위치에서, 호출 된 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> 속성 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of the <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> property.</source>
          <target state="translated">따라서 호출 해야 합니다는 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> 하는 열거자의 값을 읽기 전에 컬렉션의 첫 번째 요소를 이동 하는 메서드는 <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source><ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph>에서는 <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;</ph>이 호출될 때까지 동일한 개체를 반환합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source><ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph>는 <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph>를 다음 요소로 설정합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>After the end of the collection is passed, the enumerator is positioned after the last element in the collection, and calling <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">컬렉션의 끝이 전달된 후 열거자는 컬렉션의 마지막 요소 뒤에 배치되고 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph>를 호출하면 <ph id="ph2">`false`</ph>가 반환됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, calling <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> throws an exception.</source>
          <target state="translated">마지막으로 호출 하는 경우 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph>호출, <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>To reset <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> to the first element of the collection, call <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;</ph> followed by a call to <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">다시 설정 하려면 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> 컬렉션의 첫 번째 요소로 호출 <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;</ph> 를 호출 하 여 다음 <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">열거자는 컬렉션이 변경되지 않은 상태로 유지되는 한 유효한 상태를 유지합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> exception.</source>
          <target state="translated">변경, 추가 하는 등 컬렉션을 수정 하거나 요소를 삭제 하면 열거자가 더 유효 하지 않으며을 다음에 호출할 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;</ph> throw 한 <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>If the collection is modified between calling <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> returns the element to which it is currently set, even if the enumerator is already invalidated.</source>
          <target state="translated">사이 컬렉션이 수정 되는 경우 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> 열거자가 이미 무효로 되 었 하는 경우에 있는 현재 설정 되어, 요소를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">열거자는 컬렉션에 배타적으로 액세스하지 못하므로 컬렉션을 열거하는 것은 본질적으로 스레드로부터 안전한 프로시저가 아닙니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">컬렉션이 동기화되어 있을 때 다른 스레드에서 해당 컬렉션을 수정할 수 있으므로 이렇게 되면 열거자에서 예외가 throw됩니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.Policy.ApplicationTrustEnumerator">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">열거하는 동안 스레드로부터 안전을 보장하려면 전체 열거를 수행하는 동안 컬렉션을 잠그거나 다른 스레드에서 변경된 내용으로 인해 발생한 예외를 catch하면 됩니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Security.Policy.ApplicationTrustEnumerator.Current">
          <source>Gets the current <ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> object in the <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> 컬렉션에서 현재 <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Policy.ApplicationTrustEnumerator.Current">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> in the <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph>의 현재 <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Policy.ApplicationTrustEnumerator.Current">
          <source>When the enumerator is created, it does not point to an object, so the <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> property is not valid and will throw an exception if it is accessed.</source>
          <target state="translated">열거자가 만들어진 개체에는 가리키지 않습니다 하므로 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> 속성을 올바르지 않으며 액세스 하는 경우 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Policy.ApplicationTrustEnumerator.Current">
          <source>You must first call the <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> method to position the cursor at the first object in the collection.</source>
          <target state="translated">먼저 호출 해야 합니다는 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> 메서드를 컬렉션의 첫 번째 개체에 커서를 놓습니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Policy.ApplicationTrustEnumerator.Current">
          <source>Multiple calls to <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> with no intervening calls to <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> will return the same <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> object.</source>
          <target state="translated">여러 번 호출 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> 에 대 한 중간 호출 된 <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> 동일한 돌아갑니다 <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Security.Policy.ApplicationTrustEnumerator.MoveNext">
          <source>Moves to the next element in the <ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph> 컬렉션의 다음 요소로 이동합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Security.Policy.ApplicationTrustEnumerator.MoveNext">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the enumerator was successfully advanced to the next element; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the enumerator has passed the end of the collection.</source>
          <target state="translated">열거자가 다음 요소로 이동한 경우 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이(가) 반환되고, 컬렉션의 끝을 지난 경우 <ph id="ph2">&lt;see langword="false" /&gt;</ph>이(가) 반환됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Policy.ApplicationTrustEnumerator.MoveNext">
          <source>The <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> method immediately returns <ph id="ph2">`false`</ph> if there are no objects in the collection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> 메서드가 즉시 반환 <ph id="ph2">`false`</ph> 컬렉션에 개체가 없는 경우.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Policy.ApplicationTrustEnumerator.MoveNext">
          <source><ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> will return <ph id="ph2">`true`</ph> until it has reached the end of the collection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> 반환 <ph id="ph2">`true`</ph> 컬렉션의 끝에 도달 하면 될 때까지 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Policy.ApplicationTrustEnumerator.MoveNext">
          <source>It will then return <ph id="ph1">`false`</ph> for each successive call.</source>
          <target state="translated">그런 다음 반환 합니다 <ph id="ph1">`false`</ph> 각 연속 호출에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Policy.ApplicationTrustEnumerator.MoveNext">
          <source>However, after <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> has returned <ph id="ph2">`false`</ph>, accessing the <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> property will throw an exception.</source>
          <target state="translated">그러나 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> 를 반환 했습니다. <ph id="ph2">`false`</ph>, 액세스 하는 <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> 속성 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Policy.ApplicationTrustEnumerator.MoveNext">
          <source>Upon creation, an enumerator is positioned before the first <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> object in the collection, and the first call to <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> positions the enumerator at the first object in the collection.</source>
          <target state="translated">만들어지면는 열거자가 첫 번째 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> 개체 컬렉션을 첫 번째 호출에서 <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> 컬렉션의 첫 번째 개체에 배치 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Security.Policy.ApplicationTrustEnumerator.Reset">
          <source>Resets the enumerator to the beginning of the <ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph> collection.</source>
          <target state="translated">열거자를 <ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph> 컬렉션의 시작 부분을 가리키도록 다시 설정합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Policy.ApplicationTrustEnumerator.Reset">
          <source>An enumerator moves in a forward-only direction.</source>
          <target state="translated">열거자 앞 으로만 이동 가능한 방향으로 이동합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Policy.ApplicationTrustEnumerator.Reset">
          <source>Use this method to return the enumerator to the beginning of the collection of <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> objects.</source>
          <target state="translated">이 메서드를 사용 하 여 컬렉션의 시작 부분에 열거자를 반환 하려면 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Policy.ApplicationTrustEnumerator.Reset">
          <source>The <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;</ph> method positions the cursor at the first object in the collection.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;</ph> 메서드는 컬렉션의 첫 번째 개체에 커서를 배치 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.Policy.ApplicationTrustEnumerator.Reset">
          <source>After calling <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;</ph>, you do not need to call the <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> method to move the cursor forward to the first object.</source>
          <target state="translated">호출한 후 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A&gt;</ph>를 호출할 필요가 없습니다는 <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A&gt;</ph> 메서드를 첫 번째 개체도 커서를 앞으로 이동 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current">
          <source>Gets the current <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> in the <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph> collection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 컬렉션의 현재 <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph>를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> in the <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph>의 현재 <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrustCollection" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current">
          <source>Do not call this method; use the <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> property instead.</source>
          <target state="translated">이 메서드를 호출 하지 마십시오 사용 하 여 <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A&gt;</ph> 속성 대신 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>