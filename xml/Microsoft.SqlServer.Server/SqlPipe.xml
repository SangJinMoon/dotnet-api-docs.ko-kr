<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c591e65fa92805a7a1e5c96fa03d5a45d1f410bb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30339757" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>SQL Server 데이터베이스에서 in-process 실행 중인 관리되는 저장 프로시저가 호출자에 결과를 다시 반환할 수 있도록 합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 클래스의 인스턴스를 통해 관리 되는 저장된 프로시저를 사용할 수는 <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> 의 속성은 <xref:Microsoft.SqlServer.Server.SqlContext> 클래스입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Data.SqlClient.SqlConnection> 및 <xref:System.Data.SqlClient.SqlCommand> 저장된 프로시저에서 데이터 원본에서 행을 선택 합니다. 이 예제에서는 다음 사용 하 여 한 <xref:Microsoft.SqlServer.Server.SqlPipe> 하 명령을 실행 하 고 결과 클라이언트로 다시 전송할 합니다.  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">실행할 <see cref="T:System.Data.SqlClient.SqlCommand" /> 개체입니다.</param>
        <summary>매개 변수로 전달된 명령을 실행하고 결과를 클라이언트로 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 실제 결과 외에도 다른 메시지와 오류도 클라이언트에 직접 전송 됩니다.  
  
 출력 매개 변수 및 반환 값 클라이언트로 전송 되지 않습니다. 이들은 명령 개체의 매개 변수 컬렉션을 통해 호출자에 게 사용할 수 있습니다.  
  
 이 명령은 프로세스에서 연결에 바인딩되지 않은 경우는 <xref:System.InvalidOperationException> throw 됩니다. 이 메서드는 out-of-process 연결에 바인딩된 명령에 대해 지원되지 않습니다.  
  
 에 오류가 있는 경우는 <xref:System.Data.SqlClient.SqlCommand> 개체 전송 된 예외는 파이프로 보내지만 호출 관리 코드에도 복사본을 보냅니다. 호출 코드에서 예외를 catch 하지 않습니다 Transact SQL 코드를 스택으로 전파 되며 출력에 두 번 표시 합니다. 호출 코드에서 예외를 catch 하는 경우 파이프 소비자는 오류를 표시 되지만 중복 오류 수 없습니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Data.SqlClient.SqlConnection> 및 <xref:System.Data.SqlClient.SqlCommand> 저장된 프로시저에서 데이터 원본에서 행을 선택 합니다. 이 예제에서는 다음 사용 하 여 한 <xref:Microsoft.SqlServer.Server.SqlPipe> 하 명령을 실행 하 고 결과 클라이언트로 다시 전송할 합니다.  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="command" />이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException">이 메서드는 out-of-process 연결에 바인딩된 명령에 대해 지원되지 않습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />가 단일 결과 집합을 클라이언트로 다시 보내는 모드에 있는지 여부를 나타내는 값을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
        <value>
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 메서드가 호출되었고 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />가 단일 결과 집합을 클라이언트로 다시 보내는 모드에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>클라이언트 또는 현재 출력 소비자에게 직접 결과를 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **보낼** 메서드는 클라이언트 또는 호출자에 게 직접 데이터를 보냅니다. 출력을 사용 하는 클라이언트는 일반적으로 **파이프** 메서드, 중첩 된 CLR의 경우 하지만 저장 프로시저 출력 소비자 수도 있습니다 저장된 프로시저일 수 있습니다. 예를 들어 Procedure1 호출 <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> 명령 텍스트 "EXEC Procedure2"를 포함 합니다. 관리 되는 저장된 프로시저 Procedure2 이기도합니다. Procedure2 이제 호출 하는 경우 <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, 행 클라이언트에 하지 1의 판독기로 보내집니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">클라이언트로 보낼 단일 행 결과 집합인 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 개체입니다.</param>
        <summary>클라이언트나 현재 출력 소비자에게 직접 단일 행 결과 집합을 보냅니다.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" />이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">클라이언트로 보낼 다중 행 결과 집합인 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 개체입니다.</param>
        <summary>클라이언트나 현재 출력 소비자에게 직접 다중 행 결과 집합을 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Data.SqlClient.SqlDataReader> 매개 변수 열을 숨겨진에 전달 된 개체, 열 클라이언트에 전송 하는 결과 집합에 전파 되지 않습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" />이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">클라이언트로 보낼 메시지 문자열입니다.</param>
        <summary>클라이언트 또는 현재 출력 소비자에게 직접 문자열 메시지를 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 메시지 문자열은 클라이언트에 대 한 정보 메시지로 전송 됩니다. 클라이언트 응용 프로그램의 데이터 액세스 응용 프로그래밍 인터페이스 (API)를 사용 하는 따라 서로 다른 메커니즘을 통해 메시지를 수신할 수 있습니다. 예를 들어 클라이언트가 ADO.NET을 사용 하는 경우 메시지를 전송 통해는 <xref:System.Data.SqlClient.SqlConnection.InfoMessage> 이벤트입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> 메서드를 클라이언트에 직접 메시지 문자열을 보냅니다.  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="message" />가 4,000자를 넘습니다.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" />이 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>결과 집합의 끝 부분을 표시하고 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 인스턴스를 초기 상태로 되돌립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 관리 되는 저장된 프로시저 구현 하지 않는 클라이언트에 결과 집합을 보낼 수 있습니다는 <xref:System.Data.SqlClient.SqlDataReader>합니다. 이 메서드를 함께 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> 및 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, 저장된 프로시저를 사용자 지정 결과 집합을 클라이언트로 보낼 수 있도록 합니다.  
  
   
  
## Examples  
 다음 예제에서는 새 <xref:Microsoft.SqlServer.Server.SqlDataRecord> 및 해당 <xref:Microsoft.SqlServer.Server.SqlMetaData>합니다. 이 예제에서는 결과 사용 하 여 집합의 시작을 표시 한 다음는 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> 메서드를 사용 하 여 클라이언트에 다시 예제 데이터로 레코드를 보냅니다는 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> 메서드를 사용 하 여 결과의 끝 설정 표시는 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 메서드.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 메서드가 이전에 호출되지 않은 경우</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">클라이언트로 보낼 행에 대한 열 값이 있는 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 개체입니다. 이 레코드의 스키마는 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 메서드에 전달된 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />의 메타데이터가 설명하는 스키마와 일치해야 합니다.</param>
        <summary>데이터의 단일 행을 클라이언트로 다시 보냅니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 관리 되는 저장된 프로시저 구현 하지 않는 클라이언트에 결과 집합을 보낼 수 있습니다는 <xref:System.Data.SqlClient.SqlDataReader>합니다. 이 메서드를 함께 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> 및 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, 저장된 프로시저를 사용자 지정 결과 집합을 클라이언트로 보낼 수 있습니다.  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> 메서드는 데이터의 단일 행을 클라이언트로 다시 보냅니다. 행 수를 호출 하 여 이후에 호출자에 게 반환 하는 수 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, 전송 되는 각 행에 대해 한 번입니다. 모든 행을 보낸 후에 대 한 호출에서 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 메서드는 결과 집합의 끝을 표시 하는 데 필요 합니다.  
  
   
  
## Examples  
 다음 예제에서는 새 <xref:Microsoft.SqlServer.Server.SqlDataRecord> 및 해당 <xref:Microsoft.SqlServer.Server.SqlMetaData>합니다. 이 예제에서는 결과 사용 하 여 집합의 시작을 표시 한 다음는 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> 메서드를 사용 하 여 클라이언트에 다시 예제 데이터로 레코드를 보냅니다는 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> 메서드를 사용 하 여 결과의 끝 설정 표시는 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 메서드.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" />이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 메서드가 이전에 호출되지 않은 경우</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">메타데이터가 추출되고 결과 집합을 설명하는 데 사용되는 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 개체입니다.</param>
        <summary>클라이언트로 다시 보낼 결과 집합의 시작 부분을 표시하고 레코드 매개 변수를 사용하여 결과 집합을 설명하는 메타데이터를 만듭니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 관리 되는 저장된 프로시저 구현 하지 않는 클라이언트에 결과 집합을 보낼 수 있습니다는 <xref:System.Data.SqlClient.SqlDataReader>합니다. 이 메서드를 함께 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> 및 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, 저장된 프로시저를 사용자 지정 결과 집합을 클라이언트로 보낼 수 있도록 합니다.  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> 메서드는 결과 집합의 시작을 표시 하 고 레코드 매개 변수를 사용 하 여 결과 집합을 설명 하는 메타 데이터를 만듭니다. 사용 하 여 보낸 모든 후속 행을는 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> 메서드, 메타 데이터 정의와 일치 해야 합니다.  
  
 이후 호출 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>만 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> 및 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 호출할 수 있습니다. 동일한 인스턴스에 있는 다른 모든 메서드 <xref:Microsoft.SqlServer.Server.SqlPipe> throw는 <xref:System.InvalidOperationException>합니다. <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 설정 <xref:Microsoft.SqlServer.Server.SqlPipe> 를 초기 상태로 다른 메서드를 호출할 수 있습니다.  
  
 CLR 실행에서 TRANSACT-SQL로 컨트롤이 반환 된 후 CLR 메모리에 초기화 된 정적 또는 지역 변수를 사용 하지 마십시오. 예를 들어, 진행 중인 인스턴스의 클래스를 저장 하지 `SQLDataRecord`, CLR에서 컨트롤이 반환 후 사용 될입니다. 한 가지 예외는는 `SQLMetaData` 프로세스 클래스에 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 새 <xref:Microsoft.SqlServer.Server.SqlDataRecord> 및 해당 <xref:Microsoft.SqlServer.Server.SqlMetaData>합니다. 이 예제에서는 결과 사용 하 여 집합의 시작을 표시 한 다음는 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> 메서드를 사용 하 여 클라이언트에 다시 예제 데이터로 레코드를 보냅니다는 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> 메서드를 사용 하 여 결과의 끝 설정 표시는 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 메서드.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" />이 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="record" />에 열이 없거나 이 레코드가 초기화되지 않은 경우</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> 메서드 다음에 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> 또는 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 이외의 메서드가 호출된 경우</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>