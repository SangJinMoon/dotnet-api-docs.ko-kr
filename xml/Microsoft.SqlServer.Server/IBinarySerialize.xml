<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aa6d2af7371832ccbdde5ed90bb40f43e554dba4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="a69c9-101">UDT(사용자 정의 형식)와 사용자 정의 집계의 serialization 및 deserialization에 대한 사용자 지정 구현을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a69c9-101">Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a69c9-102">사용자 정의 형식 (Udt) 및 사용자 정의 집계 일 수 있는 저장소 형식으로 정의 하는 데는 <xref:Microsoft.SqlServer.Server.Format>합니다.`Native`</span><span class="sxs-lookup"><span data-stu-id="a69c9-102">User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="a69c9-103">또는 <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`합니다.</span><span class="sxs-lookup"><span data-stu-id="a69c9-103">or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span></span>  
  
 <span data-ttu-id="a69c9-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="a69c9-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="a69c9-105">하면 SQL Server에서 처리 serialization과 deserialization 시 자동으로 했으나 형식을 처리할 수 있는 형식의 종류에 제한이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a69c9-105">allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle.</span></span> <span data-ttu-id="a69c9-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="a69c9-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="a69c9-107">사용자 정의 형식 및 집계의 자체 직렬화를 처리 하도록 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="a69c9-107">allows user-defined types and aggregates to handle their own serialization.</span></span> <span data-ttu-id="a69c9-108">사용자 정의 형식 및 집계로 표시 되어야 <xref:Microsoft.SqlServer.Server.Format>합니다.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="a69c9-108">User-defined types and aggregates must be marked with <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="a69c9-109">에 `SqlUserDefinedType` 또는 `SqlUserDefinedAggregate` 특성을 구현 해야 합니다는 <xref:Microsoft.SqlServer.Server.IBinarySerialize> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="a69c9-109">in the `SqlUserDefinedType` or `SqlUserDefinedAggregate` attribute, and must implement the <xref:Microsoft.SqlServer.Server.IBinarySerialize> interface.</span></span>  
  
 <span data-ttu-id="a69c9-110">Note 사용자 지정 직렬화 된 경우에 한도 넘지 허용 되는 최대 각 인스턴스의 총 크기는 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="a69c9-110">Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">
          <span data-ttu-id="a69c9-111">개체가 deserialize되는 <see cref="T:System.IO.BinaryReader" /> 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a69c9-111">The <see cref="T:System.IO.BinaryReader" /> stream from which the object is deserialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a69c9-112">해당 이진 형식에서 UDT(사용자 정의 형식) 또는 사용자 정의 집계를 생성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a69c9-112">Generates a user-defined type (UDT) or user-defined aggregate from its binary form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a69c9-113"><xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> 메서드가 기록한 정보를 사용 하 여 개체를 다시 구성 해야 합니다는 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="a69c9-113">The <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method must reconstitute your object using the information written by the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a69c9-114">다음 예제에서는 구현의 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> 사용 하 여 UDT의 메서드는 <xref:System.IO.BinaryReader> 이전에 유지 된 UDT를 역직렬화 할 합니다.</span><span class="sxs-lookup"><span data-stu-id="a69c9-114">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT.</span></span> <span data-ttu-id="a69c9-115">이 예제는 UDT 두 개의 데이터 속성에 있다고 가정: `StringValue` 및 `DoubleValue`합니다.</span><span class="sxs-lookup"><span data-stu-id="a69c9-115">This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">
          <span data-ttu-id="a69c9-116">UDT 또는 사용자 정의 집계가 serialize되는 <see cref="T:System.IO.BinaryWriter" /> 스트림입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a69c9-116">The <see cref="T:System.IO.BinaryWriter" /> stream to which the UDT or user-defined aggregate is serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a69c9-117">UDT(사용자 정의 형식) 또는 사용자 정의 집계를 해당 이진 형식으로 변환하여 보관될 수 있도록 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a69c9-117">Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a69c9-118">이진 스트림으로 수 있도록 충분 한 정보를 기록는 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> 메서드를 UDT 또는 사용자 정의 집계를 다시 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="a69c9-118">Write sufficient information to the binary stream to allow the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method to reconstitute your UDT or user-defined aggregate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a69c9-119">다음 예제에서는의 구현을 보여 줍니다.는 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> 사용 하 여 UDT의 메서드는 <xref:System.IO.BinaryWriter> 사용자 정의 이진 형식에서 UDT를 serialize 하는 데 있습니다.</span><span class="sxs-lookup"><span data-stu-id="a69c9-119">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format.</span></span> <span data-ttu-id="a69c9-120">Null 문자 패딩의 목적은 UDT Transact SQL 코드에서 다른 비교, 문자열 바이트 문자열 바이트 비교 되 고 double로 더블 바이트로 비교 됩니다 되도록 문자열 값에서 double 값 구분 완전히 됩니다 되도록 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="a69c9-120">The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>