<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Double.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f0f1768444f65edb3defd809f1ec13aa2d18dc87.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f0f1768444f65edb3defd809f1ec13aa2d18dc87</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Double">
          <source>Represents a double-precision floating-point number.</source>
          <target state="translated">배정밀도 부동 소수점 숫자를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The <ph id="ph1">&lt;xref:System.Double&gt;</ph> value type represents a double-precision 64-bit number with values ranging from negative 1.79769313486232e308 to positive 1.79769313486232e308, as well as positive or negative zero, <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>, <ph id="ph3">&lt;xref:System.Double.NegativeInfinity&gt;</ph>, and not a number (<ph id="ph4">&lt;xref:System.Double.NaN&gt;</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 값 형식은 음수 1.79769313486232 e 308에서 양수 또는 음수 0, 뿐만 아니라 양수 1.79769313486232 e 308 까지의 값을 가진 배정도 64 비트 숫자를 나타냅니다 <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>, <ph id="ph3">&lt;xref:System.Double.NegativeInfinity&gt;</ph>, 및 not-a-number (<ph id="ph4">&lt;xref:System.Double.NaN&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>It is intended to represent values that are extremely large (such as distances between planets or galaxies) or extremely small (the molecular mass of a substance in kilograms) and that often are imprecise (such as the distance from earth to another solar system), The <ph id="ph1">&lt;xref:System.Double&gt;</ph> type complies with the IEC 60559:1989 (IEEE 754) standard for binary floating-point arithmetic.</source>
          <target state="translated">(예: 행 또는 은하계 사이의 거리) 매우 큰 수 또는 매우 작은 (으로 물질의 분자 질량)과 종종 없는지 (예: 까지의 거리 지구 다른 태양계)을 정확 하 게 하는 값을 나타내는 것이 고 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 종류는 IEC 60559: 1989 (IEEE 754) 이진 부동 소수점 연산에 대 한 표준 준수 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>This topic consists of the following sections:</source>
          <target state="translated">이 항목은 다음 섹션으로 구성되어 있습니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><bpt id="p1">[</bpt>Floating-point representation and precision<ept id="p1">](#Precision)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>부동 소수점 표현 및 정밀도<ept id="p1">](#Precision)</ept></target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><bpt id="p1">[</bpt>Testing for equality<ept id="p1">](#Equality)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>같음에 대 한 테스트<ept id="p1">](#Equality)</ept></target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><bpt id="p1">[</bpt>Floating-point values and exceptions<ept id="p1">](#Exceptions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>부동 소수점 값 및 예외<ept id="p1">](#Exceptions)</ept></target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><bpt id="p1">[</bpt>Type conversions and the Double structure<ept id="p1">](#Conversions)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>형식 변환 및 Double 구조체<ept id="p1">](#Conversions)</ept></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><bpt id="p1">[</bpt>Floating-point functionality<ept id="p1">](#Functionality)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>부동 소수점 기능<ept id="p1">](#Functionality)</ept></target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Floating-Point Representation and Precision</source>
          <target state="translated">부동 소수점 표현 및 정밀도</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The <ph id="ph1">&lt;xref:System.Double&gt;</ph> data type stores double-precision floating-point values in a 64-bit binary format, as shown in the following table:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 데이터 형식은 다음 표에 나와 있는 것 처럼 64 비트 이진 형식에서에서 배정밀도 부동 소수점 값을 저장 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Part</source>
          <target state="translated">파트</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Bits</source>
          <target state="translated">비트</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Significand or mantissa</source>
          <target state="translated">Significand 또는 수</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>0-51</source>
          <target state="translated">0-51</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Exponent</source>
          <target state="translated">지 수</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>52-62</source>
          <target state="translated">52-62</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Sign (0 = Positive, 1 = Negative)</source>
          <target state="translated">기호 (0 = 1 양수, 음수 =)</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>63</source>
          <target state="translated">63</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Just as decimal fractions are unable to precisely represent some fractional values (such as 1/3 or <ph id="ph1">&lt;xref:System.Math.PI?displayProperty=nameWithType&gt;</ph>), binary fractions are unable to represent some fractional values.</source>
          <target state="translated">소수 일부 소수 값을 정확 하 게 표현할 수 없는 경우와 마찬가지로 (1/3 등 또는 <ph id="ph1">&lt;xref:System.Math.PI?displayProperty=nameWithType&gt;</ph>), 이진 분수가 일부 소수 자릿수 값을 나타낼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For example, 1/10, which is represented precisely by .1 as a decimal fraction, is represented by .001100110011 as a binary fraction, with the pattern "0011" repeating to infinity.</source>
          <target state="translated">예를 들어 1/10, 소수 부분으로 순서 대로.1 요소로 정확 하 게 표시 되는 패턴 "0011" 반복으로 무한대로와 이진 소수로.001100110011으로 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>In this case, the floating-point value provides an imprecise representation of the number that it represents.</source>
          <target state="translated">이 경우 부동 소수점 값 표시 되는 숫자의 정확 하지 않은 표현을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Performing additional mathematical operations on the original floating-point value often tends to increase its lack of precision.</source>
          <target state="translated">원래 부동 소수점 값에 추가적인 수치 연산을 실행 빈도가 정밀도 부족 증가 경향이 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For example, if we compare the result of multiplying .1 by 10 and adding .1 to .1 nine times, we see that addition, because it has involved eight more operations, has produced the less precise result.</source>
          <target state="translated">예를 들어.1으로 10을 곱한 결과를 비교 하는 경우.1 순서 대로.1 9 번 추가, 보면 해당 더하기 8 개는 다양 한 작업 관련가 있기 때문에 보다 덜 정확한 결과 생성 했습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Note that this disparity is apparent only if we display the two <ph id="ph1">&lt;xref:System.Double&gt;</ph> values by using the "R" <bpt id="p1">[</bpt>standard numeric format string<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>, which if necessary displays all 17 digits of precision supported by the <ph id="ph2">&lt;xref:System.Double&gt;</ph> type.</source>
          <target state="translated">이 불일치가 두 표시 하는 경우에 그렇습니다는 <ph id="ph1">&lt;xref:System.Double&gt;</ph> "R"을 사용 하 여 값 <bpt id="p1">[</bpt>표준 숫자 형식 문자열<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>이며 필요한에서 지 원하는 전체 자릿수가 17 자리를 모두 표시 하는 경우는 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 유형입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Because some numbers cannot be represented exactly as fractional binary values, floating-point numbers can only approximate real numbers.</source>
          <target state="translated">일부 숫자는 소수 이진 값과 동일 하 게 표현할 수 없는 때문에 대략적인 실수 부동 소수점 숫자에 수 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>All floating-point numbers also have a limited number of significant digits, which also determines how accurately a floating-point value approximates a real number.</source>
          <target state="translated">모든 부동 소수점 숫자에 레이블에도 제한 된 수의 유효 자릿수 부동 소수점 값을 근사치 숫자는 실수를 계산 하는 방식을 정확 하 게 결정 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>A <ph id="ph1">&lt;xref:System.Double&gt;</ph> value has up to 15 decimal digits of precision, although a maximum of 17 digits is maintained internally.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값에 최대 15 자리의 정밀도, 내부적으로 최대 17 자리가 유지 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>This means that some floating-point operations may lack the precision to change a floating point value.</source>
          <target state="translated">즉, 부동 소수점 연산 부동 변경 하려면 정밀도 없는 경우도 소수점 값입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The following example provides an illustration.</source>
          <target state="translated">다음 예제에서 이에 대해 설명합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>It defines a very large floating-point value, and then adds the product of <ph id="ph1">&lt;xref:System.Double.Epsilon?displayProperty=nameWithType&gt;</ph> and one quadrillion to it.</source>
          <target state="translated">매우 큰 부동 소수점 값을 정의 하 고 다음의 제품에 추가 <ph id="ph1">&lt;xref:System.Double.Epsilon?displayProperty=nameWithType&gt;</ph> 및를 하나 quadrillion 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The product, however, is too small to modify the original floating-point value.</source>
          <target state="translated">그러나 제품을 용량이 부족 원래 부동 소수점 값을 수정 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Its least significant digit is thousandths, whereas the most significant digit in the product is 1<bpt id="p1">&lt;sup&gt;</bpt>-312<ept id="p1">&lt;/sup&gt;</ept>.</source>
          <target state="translated">가장 덜 중요 한 자리는 1/1000, 제품의 최대 유효 자릿수는 1 하는 반면<bpt id="p1">&lt;sup&gt;</bpt>-312<ept id="p1">&lt;/sup&gt;</ept>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The limited precision of a floating-point number has several consequences:</source>
          <target state="translated">제한 된 정밀도 부동 소수점 숫자의 몇 가지 결과가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Two floating-point numbers that appear equal for a particular precision might not compare equal because their least significant digits are different.</source>
          <target state="translated">최소 유효 자릿수가 다르기 때문에 특정 전체 자릿수에 대 한 동일 하 게 나타나는 두 부동 소수점 숫자가 같은지 비교 하지 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>In the following example, a series of numbers are added together, and their total is compared with their expected total.</source>
          <target state="translated">다음 예제에서는 일련의 숫자를 더한 및 고 합계가 예상 되는 전체와 비교 됩니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Although the two values appear to be the same, a call to the <ph id="ph1">`Equals`</ph> method indicates that they are not.</source>
          <target state="translated">두 값이 동일한 경우에 대 한 호출을 표시 하지만 <ph id="ph1">`Equals`</ph> 메서드는 없다는 것을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>If you change the format items in the <ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> statement from <ph id="ph2">`{0}`</ph> and <ph id="ph3">`{1}`</ph> to <ph id="ph4">`{0:R}`</ph> and <ph id="ph5">`{1:R}`</ph> to display all significant digits of the two <ph id="ph6">&lt;xref:System.Double&gt;</ph> values, it is clear that the two values are unequal because of a loss of precision during the addition operations.</source>
          <target state="translated">형식 항목을 변경 하는 경우는 <ph id="ph1">&lt;xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> 에서 문을 <ph id="ph2">`{0}`</ph> 및 <ph id="ph3">`{1}`</ph> 를 <ph id="ph4">`{0:R}`</ph> 및 <ph id="ph5">`{1:R}`</ph> 두 유효 자릿수가 모두 표시 하려면 <ph id="ph6">&lt;xref:System.Double&gt;</ph> 값이 명확한 경우 두 값이 서로 같지 않은지 때문에 추가 작업 중 전체 자릿수의 손실입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>In this case, the issue can be resolved by calling the <ph id="ph1">&lt;xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method to round the <ph id="ph2">&lt;xref:System.Double&gt;</ph> values to the desired precision before performing the comparison.</source>
          <target state="translated">이 경우 호출 하 여 문제를 해결할 수 있습니다는 <ph id="ph1">&lt;xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> 반올림 하는 메서드는 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 비교를 수행 하기 전에 원하는 정밀도 값입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>A mathematical or comparison operation that uses a floating-point number might not yield the same result if a decimal number is used, because the binary floating-point number might not equal the decimal number.</source>
          <target state="translated">부동 소수점 숫자를 사용 하는 수치 또는 비교 연산을 하지 산출할 수 동일한 결과 10 진수를 사용 하는 경우 이진 부동 소수점 숫자는 10 진수과 같지 않을 때문에입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>A previous example illustrated this by displaying the result of multiplying .1 by 10 and adding .1 times.</source>
          <target state="translated">이전 예제.1으로 10을 곱한 및.1 번 추가의 결과 표시 하 여이 나와 있습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>When accuracy in numeric operations with fractional values is important, you can use the <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> rather than the <ph id="ph2">&lt;xref:System.Double&gt;</ph> type.</source>
          <target state="translated">사용할 수 있습니다 소수 값이 포함 된 숫자 연산에는 정확도 중요 한 경우는 <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> 보다는 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 유형입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>When accuracy in numeric operations with integral values beyond the range of the <ph id="ph1">&lt;xref:System.Int64&gt;</ph> or <ph id="ph2">&lt;xref:System.UInt64&gt;</ph> types is important, use the <ph id="ph3">&lt;xref:System.Numerics.BigInteger&gt;</ph> type.</source>
          <target state="translated">때의 범위를 벗어난 정수 값으로 숫자 연산에는 정확도 <ph id="ph1">&lt;xref:System.Int64&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.UInt64&gt;</ph> 사용 하 여 형식을 반드시는 <ph id="ph3">&lt;xref:System.Numerics.BigInteger&gt;</ph> 형식입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>A value might not round-trip if a floating-point number is involved.</source>
          <target state="translated">부동 소수점 숫자가 포함 된 경우 왕복 하지 않는 값 않을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>A value is said to round-trip if an operation converts an original floating-point number to another form, an inverse operation transforms the converted form back to a floating-point number, and the final floating-point number is not equal to the original floating-point number.</source>
          <target state="translated">값 이라고 라운드트립 작업은 원래 부동 소수점 숫자를 다른 형식으로 변환 하 고 역 작업이 변환에서 변환 된 형식을 부동 소수점 숫자에 다시 최종 부동 소수점 숫자가 원래 같지 않습니다. 부동 소수점 수입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The round trip might fail because one or more least significant digits are lost or changed in a conversion.</source>
          <target state="translated">하나 이상의 최하위 유효 자릿수가 손실 되거나 변환에서 변경 때문에 대 한 왕복은 실패할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>In the following example, three <ph id="ph1">&lt;xref:System.Double&gt;</ph> values are converted to strings and saved in a file.</source>
          <target state="translated">다음 예제에서는 세 가지 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값을 문자열로 변환 되 고 파일에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>As the output shows, however, even though the values appear to be identical, the restored values are not equal to the original values.</source>
          <target state="translated">하지만 결과 같이, 값을 동일한 것으로 나타날 경우에 복원 된 값의 원래 값과 같지 않습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>In this case, the values can be successfully round-tripped by using the "G17" <bpt id="p1">[</bpt>standard numeric format string<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> to preserve the full precision of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, as the following example shows.</source>
          <target state="translated">이 경우 값 수 성공적으로 라운드트립 되 고 "G17"를 사용 하 여 <bpt id="p1">[</bpt>표준 숫자 형식 문자열<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> 의 전체 자릿수를 유지 하기 위해 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 다음 예제와 같이 값입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>When used with a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value, the "R" format specifier in some cases fails to successfully round-trip the original value.</source>
          <target state="translated">와 함께 사용할 경우는 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값, 일부 경우에는 "R" 형식 지정자의 원래 값을 성공적으로 라운드트립 실패 합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>To ensure that <ph id="ph1">&lt;xref:System.Double&gt;</ph> values successfully round-trip, use the "G17" format specifier.</source>
          <target state="translated">되도록 <ph id="ph1">&lt;xref:System.Double&gt;</ph> "G17" 형식 지정자를 사용 하는 값을 성공적으로 라운드트립 합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><ph id="ph1">&lt;xref:System.Single&gt;</ph> values have less precision than <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Single&gt;</ph> 값 보다 적은 정밀도 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>A <ph id="ph1">&lt;xref:System.Single&gt;</ph> value that is converted to a seemingly equivalent <ph id="ph2">&lt;xref:System.Double&gt;</ph> often does not equal the <ph id="ph3">&lt;xref:System.Double&gt;</ph> value because of differences in precision.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Single&gt;</ph> 겉보기 해당 하는 변환 된 값 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 종종과 같지 않습니다는 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 정밀도의 차이 때문에 값입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>In the following example, the result of identical division operations is assigned to a <ph id="ph1">&lt;xref:System.Double&gt;</ph> and a <ph id="ph2">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated">다음 예제에서는 동일한 나누기 작업의 결과에 할당 됩니다는 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Single&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>After the <ph id="ph1">&lt;xref:System.Single&gt;</ph> value is cast to a <ph id="ph2">&lt;xref:System.Double&gt;</ph>, a comparison of the two values shows that they are unequal.</source>
          <target state="translated">이후에 <ph id="ph1">&lt;xref:System.Single&gt;</ph> 값으로 캐스팅 되는 <ph id="ph2">&lt;xref:System.Double&gt;</ph>, 두 값의 비교는 같지 않은 것을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>To avoid this problem, use either the <ph id="ph1">&lt;xref:System.Double&gt;</ph> in place of the <ph id="ph2">&lt;xref:System.Single&gt;</ph> data type, or use the <ph id="ph3">&lt;xref:System.Math.Round%2A&gt;</ph> method so that both values have the same precision.</source>
          <target state="translated">이 문제를 방지 하려면 하나를 사용는 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 대신는 <ph id="ph2">&lt;xref:System.Single&gt;</ph> 데이터 형식이 나 사용 하 여는 <ph id="ph3">&lt;xref:System.Math.Round%2A&gt;</ph> 메서드 두 값이 같은 정밀도 갖도록 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>In addition, the result of arithmetic and assignment operations with <ph id="ph1">&lt;xref:System.Double&gt;</ph> values may differ slightly by platform because of the loss of precision of the <ph id="ph2">&lt;xref:System.Double&gt;</ph> type.</source>
          <target state="translated">또한 산술 및 할당 작업의 결과 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값이 다른 약간 플랫폼에서의 전체 자릿수 손실이 발생 하므로 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 유형입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For example, the result of assigning a literal <ph id="ph1">&lt;xref:System.Double&gt;</ph> value may differ in the 32-bit and 64-bit versions of the .NET Framework.</source>
          <target state="translated">예를 들어 리터럴을 할당 하도록 결과 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값 32 비트 및 64 비트 버전의.NET Framework에서 달라질 수 있습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The following example illustrates this difference when the literal value -4.42330604244772E-305 and a variable whose value is -4.42330604244772E-305 are assigned to a <ph id="ph1">&lt;xref:System.Double&gt;</ph> variable.</source>
          <target state="translated">다음 예제에서는이 때 그 차이 리터럴 값-4.42330604244772 e-305와 해당 값이-4.42330604244772 e 변수-305에 할당 되는 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 변수입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Note that the result of the <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%29&gt;</ph> method in this case does not suffer from a loss of precision.</source>
          <target state="translated">결과 <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%29&gt;</ph> 메서드가 경우 문제가 발생 하지 않는 전체 자릿수 손실이 발생 하지 않도록에서 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Testing for Equality</source>
          <target state="translated">같음에 대 한 테스트</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>To be considered equal, two <ph id="ph1">&lt;xref:System.Double&gt;</ph> values must represent identical values.</source>
          <target state="translated">같은, 두 개의 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값 동일한 값을 나타내야 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>However, because of differences in precision between values, or because of a loss of precision by one or both values, floating-point values that are expected to be identical often turn out to be unequal because of differences in their least significant digits.</source>
          <target state="translated">그러나 값을 정밀도에서 차이점이 있기 때문에 또는 하나 또는 두 값에 따라 정밀도 손실 때문에 종종 동일한 것으로 예상 되는 부동 소수점 값으로 판명 최소 유효 자릿수가에 차이가 있으므로 동일 하지 않은 것입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>As a result, calls to the <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> method to determine whether two values are equal, or calls to the <ph id="ph2">&lt;xref:System.Double.CompareTo%2A&gt;</ph> method to determine the relationship between two <ph id="ph3">&lt;xref:System.Double&gt;</ph> values, often yield unexpected results.</source>
          <target state="translated">결과적으로,에 대 한 호출이 <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> 대 한 호출이 나 두 값이 같은지를 확인 하는 <ph id="ph2">&lt;xref:System.Double.CompareTo%2A&gt;</ph> 메서드 두 관계를 확인 하려면 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 값, 종종 하면 예기치 않은 결과가 합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>This is evident in the following example, where two apparently equal <ph id="ph1">&lt;xref:System.Double&gt;</ph> values turn out to be unequal because the first has 15 digits of precision, while the second has 17.</source>
          <target state="translated">이 다음 예제에서 분명 하 게 한 두 개의 분명히과 같아야 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 두 번째 17에 있을 때 첫 번째는 15 자리의 전체 자릿수, 때문에 같지 않은 것으로 판명 된 값입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Calculated values that follow different code paths and that are manipulated in different ways often prove to be unequal.</source>
          <target state="translated">계산 된 값을 서로 다른 코드 경로 따르는 및 다양 한 방법에서 종종 조작 되는 같지 않은 것으로 증명 합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>In the following example, one <ph id="ph1">&lt;xref:System.Double&gt;</ph> value is squared, and then the square root is calculated to restore the original value.</source>
          <target state="translated">다음 예제에서는 하나의 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값을 제곱 하 고 원래 값을 복원 하기 위해 제곱근 계산 되는 다음 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>A second <ph id="ph1">&lt;xref:System.Double&gt;</ph> is multiplied by 3.51 and squared before the square root of the result is divided by 3.51 to restore the original value.</source>
          <target state="translated">두 번째 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 3.51으로 곱하고 원래 값으로 복원 3.51 나눈 결과의 제곱근 전에 제곱 됩니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Although the two values appear to be identical, a call to the <ph id="ph1">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph> method indicates that they are not equal.</source>
          <target state="translated">가 두 값을 동일한 것으로 표시 되지만에 대 한 호출에서 <ph id="ph1">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph> 메서드는 같지 않은 것을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Using the "R" standard format string to return a result string that displays all the significant digits of each Double value shows that the second value is .0000000000001 less than the first.</source>
          <target state="translated">두 번째 값.0000000000001 임을 보여주고 "R" 표준 형식 문자열을 사용 하 여 각 Double 값의 모든 유효 자릿수가 표시 하는 결과 문자열을 반환할 첫 번째 보다 작아야 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>In cases where a loss of precision is likely to affect the result of a comparison, you can adopt any of the following alternatives to calling the <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Double.CompareTo%2A&gt;</ph> method:</source>
          <target state="translated">정밀도의 손실 비교의 결과 영향을 줄 가능성이 높은 경우에 호출 하 고 다음 대체 방법 중 하나 채택할 수 있습니다.는 <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Double.CompareTo%2A&gt;</ph> 메서드:</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Call the <ph id="ph1">&lt;xref:System.Math.Round%2A?displayProperty=nameWithType&gt;</ph> method to ensure that both values have the same precision.</source>
          <target state="translated">호출의 <ph id="ph1">&lt;xref:System.Math.Round%2A?displayProperty=nameWithType&gt;</ph> 값이 모두 같은 정밀도 갖도록 하는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The following example modifies a previous example to use this approach so that two fractional values are equivalent.</source>
          <target state="translated">다음 예제에서는 두 개의 소수 값이 같으면 되도록이 방법을 사용 하도록 이전 예제를 수정 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Note, though, that the problem of precision still applies to rounding of midpoint values.</source>
          <target state="translated">Note, 하지만 정밀도 문제 중간점 값의 반올림에 계속 적용 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType&gt;</ph> 메서드를 참조하세요.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Test for approximate equality rather than equality.</source>
          <target state="translated">대략적인 같음 테스트를 일치 하는 대신 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>This requires that you define either an absolute amount by which the two values can differ but still be equal, or that you define a relative amount by which the smaller value can diverge from the larger value.</source>
          <target state="translated">절대 중 하나를 정의 하는이 위해서는 두 값 다를 수 있지만 여전히는 양 같아야 또는 더 작은 값 보다 큰 값에서 벗어날 수 있는 상대 크기를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><ph id="ph1">&lt;xref:System.Double.Epsilon?displayProperty=nameWithType&gt;</ph> is sometimes used as an absolute measure of the distance between two <ph id="ph2">&lt;xref:System.Double&gt;</ph> values when testing for equality.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.Epsilon?displayProperty=nameWithType&gt;</ph> 두 개의 사이의 거리를 측정 하는 절대로 사용 되기도 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 같은지 테스트할 때 값입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>However, <ph id="ph1">&lt;xref:System.Double.Epsilon?displayProperty=nameWithType&gt;</ph> measures the smallest possible value that can be added to, or subtracted from, a <ph id="ph2">&lt;xref:System.Double&gt;</ph> whose value is zero.</source>
          <target state="translated">그러나 <ph id="ph1">&lt;xref:System.Double.Epsilon?displayProperty=nameWithType&gt;</ph> , 추가 하거나에서 뺀 수 있는 가능한 가장 작은 값을 측정 한 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값이 0 인 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For most positive and negative <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, the value of <ph id="ph2">&lt;xref:System.Double.Epsilon?displayProperty=nameWithType&gt;</ph> is too small to be detected.</source>
          <target state="translated">대부분 양수 및 음수 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값, 값 <ph id="ph2">&lt;xref:System.Double.Epsilon?displayProperty=nameWithType&gt;</ph> 감지 너무 작습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Therefore, except for values that are zero, we do not recommend its use in tests for equality.</source>
          <target state="translated">따라서 값 0을 제외 하 고 권장 하지는 않습니다 같음에 대 한 테스트에 사용 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The following example uses the latter approach to define an <ph id="ph1">`IsApproximatelyEqual`</ph> method that tests the relative difference between two values.</source>
          <target state="translated">다음 예제에서는 후자의 방법을 사용할 경우 사용 하 여 정의 <ph id="ph1">`IsApproximatelyEqual`</ph> 두 값 간의 상대적 차이 테스트 하는 메서드.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>It also contrasts the result of calls to the <ph id="ph1">`IsApproximatelyEqual`</ph> method and the <ph id="ph2">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph> method.</source>
          <target state="translated">결과에 대 한 호출 또한 대조는 <ph id="ph1">`IsApproximatelyEqual`</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Floating-Point Values and Exceptions</source>
          <target state="translated">부동 소수점 값 및 예외</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Unlike operations with integral types, which throw exceptions in cases of overflow or illegal operations such as division by zero, operations with floating-point values do not throw exceptions.</source>
          <target state="translated">정수 계열 형식의 경우 0으로 오버플로 또는 나누기와 같은 잘못 된 작업의 경우에 예외를 throw, 작업과 달리 부동 소수점 값을 사용 하 여 작업 예외를 throw 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Instead, in exceptional situations, the result of a floating-point operation is zero, positive infinity, negative infinity, or not a number (NaN):</source>
          <target state="translated">대신 예외 상황 부동 소수점 연산의 결과 0, 양의 무한대, 음의 무한대 또는 (nan 숫자가) not-a-number:</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>If the result of a floating-point operation is too small for the destination format, the result is zero.</source>
          <target state="translated">부동 소수점 연산의 결과 대상 형식에 너무 작은 경우의 결과 0입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>This can occur when two very small numbers are multiplied, as the following example shows.</source>
          <target state="translated">다음 예제와 같이 두 매우 작은 숫자 곱할 경우 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>If the magnitude of the result of a floating-point operation exceeds the range of the destination format, the result of the operation is <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> or <ph id="ph2">&lt;xref:System.Double.NegativeInfinity&gt;</ph>, as appropriate for the sign of the result.</source>
          <target state="translated">부동 소수점 연산의 결과의 크기가 대상 형식의 범위를 초과한 경우 작업의 결과 <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Double.NegativeInfinity&gt;</ph>결과의 부호에 따라 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The result of an operation that overflows <ph id="ph1">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph> is <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>, and the result of an operation that overflows <ph id="ph3">&lt;xref:System.Double.MinValue?displayProperty=nameWithType&gt;</ph> is <ph id="ph4">&lt;xref:System.Double.NegativeInfinity&gt;</ph>, as the following example shows.</source>
          <target state="translated">오버플로 하는 작업의 결과 <ph id="ph1">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph> 은 <ph id="ph2">&lt;xref:System.Double.PositiveInfinity&gt;</ph>, 및를 오버플로 하는 작업의 결과 <ph id="ph3">&lt;xref:System.Double.MinValue?displayProperty=nameWithType&gt;</ph> 은 <ph id="ph4">&lt;xref:System.Double.NegativeInfinity&gt;</ph>다음 예제와 같이 합니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> also results from a division by zero with a positive dividend, and <ph id="ph2">&lt;xref:System.Double.NegativeInfinity&gt;</ph> results from a division by zero with a negative dividend.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> 또한 양의 피제수와 0으로 나누기에서 발생 하 고 <ph id="ph2">&lt;xref:System.Double.NegativeInfinity&gt;</ph> 음수 피제수와 0으로 나누기에서 결과입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>If a floating-point operation is invalid, the result of the operation is <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph>.</source>
          <target state="translated">부동 소수점 연산이 유효 하지 않을 경우 작업의 결과 <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For example, <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> results from the following operations:</source>
          <target state="translated">예를 들어 <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> 다음과 같은 작업에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Division by zero with a dividend of zero.</source>
          <target state="translated">0 피제수와 0으로 나누었습니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Note that other cases of division by zero result in either <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> or <ph id="ph2">&lt;xref:System.Double.NegativeInfinity&gt;</ph>.</source>
          <target state="translated">참고에서 결과가 0으로 나누기의 경우 다른 <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Double.NegativeInfinity&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Any floating-point operation with an invalid input.</source>
          <target state="translated">부동 소수점 작업을 입력이 잘못 되었습니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For example, calling the <ph id="ph1">&lt;xref:System.Math.Sqrt%2A?displayProperty=nameWithType&gt;</ph> method with a negative value returns <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>, as does calling the <ph id="ph3">&lt;xref:System.Math.Acos%2A?displayProperty=nameWithType&gt;</ph> method with a value that is greater than one or less than negative one.</source>
          <target state="translated">예를 들어 호출는 <ph id="ph1">&lt;xref:System.Math.Sqrt%2A?displayProperty=nameWithType&gt;</ph> 음수 값을 가진 메서드가 반환 <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph>호출 마찬가지로는 <ph id="ph3">&lt;xref:System.Math.Acos%2A?displayProperty=nameWithType&gt;</ph> 값 보다 하나 이하의 보다 큰 음수 1을 사용 하 여 메서드.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Any operation with an argument whose value is <ph id="ph1">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">값이 인수가 지정 된 모든 작업 <ph id="ph1">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Type conversions and the Double structure</source>
          <target state="translated">형식 변환 및 Double 구조체</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The <ph id="ph1">&lt;xref:System.Double&gt;</ph> structure does not define any explicit or implicit conversion operators; instead, conversions are implemented by the compiler.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 컴파일러에 의해 변환이 구현 하는 대신; 구조 모든 명시적 또는 암시적 변환 연산자를 정의 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The conversion of the value of any primitive numeric type to a <ph id="ph1">&lt;xref:System.Double&gt;</ph> is a widening conversion and therefore does not require an explicit cast operator or call to a conversion method unless a compiler explicitly requires it.</source>
          <target state="translated">기본 숫자 형식의 값 변환은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 확대 변환 하 고 따라서 있고이 명시적 캐스트 연산자는 컴파일러에서 명시적으로 요청 하지 않는 변환 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For example, the C# compiler requires a casting operator for conversions from <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> to <ph id="ph2">&lt;xref:System.Double&gt;</ph>, while the Visual Basic compiler does not.</source>
          <target state="translated">C# 컴파일러에서 변환에 대 한 캐스팅 연산자를 필요로 하는 예를 들어 <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> 를 <ph id="ph2">&lt;xref:System.Double&gt;</ph>, Visual Basic 컴파일러는 손실 됩니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The following example converts the minimum or maximum value of other primitive numeric types to a <ph id="ph1">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 다른 기본 숫자 형식의 최소값 또는 최대값 값 변환는 <ph id="ph1">&lt;xref:System.Double&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>In addition, the <ph id="ph1">&lt;xref:System.Single&gt;</ph> values <ph id="ph2">&lt;xref:System.Single.NaN?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Single.PositiveInfinity?displayProperty=nameWithType&gt;</ph>, and <ph id="ph4">&lt;xref:System.Single.NegativeInfinity?displayProperty=nameWithType&gt;</ph> covert to <ph id="ph5">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>, <ph id="ph6">&lt;xref:System.Double.PositiveInfinity?displayProperty=nameWithType&gt;</ph>, and <ph id="ph7">&lt;xref:System.Double.NegativeInfinity?displayProperty=nameWithType&gt;</ph>, respectively.</source>
          <target state="translated">또한는 <ph id="ph1">&lt;xref:System.Single&gt;</ph> 값 <ph id="ph2">&lt;xref:System.Single.NaN?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Single.PositiveInfinity?displayProperty=nameWithType&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Single.NegativeInfinity?displayProperty=nameWithType&gt;</ph> 를 변환할 <ph id="ph5">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>, <ph id="ph6">&lt;xref:System.Double.PositiveInfinity?displayProperty=nameWithType&gt;</ph>, 및 <ph id="ph7">&lt;xref:System.Double.NegativeInfinity?displayProperty=nameWithType&gt;</ph>각각.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Note that the conversion of the value of some numeric types to a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value can involve a loss of precision.</source>
          <target state="translated">일부 숫자 형식의 값 변환은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값 정밀도 손실 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>As the example illustrates, a loss of precision is possible when converting <ph id="ph1">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph2">&lt;xref:System.Int64&gt;</ph>, <ph id="ph3">&lt;xref:System.Single&gt;</ph>, and <ph id="ph4">&lt;xref:System.UInt64&gt;</ph> values to <ph id="ph5">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">변환할 때 정밀도의 손실 될 수 예제와 같이 <ph id="ph1">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph2">&lt;xref:System.Int64&gt;</ph>, <ph id="ph3">&lt;xref:System.Single&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.UInt64&gt;</ph> 값을 <ph id="ph5">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The conversion of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value to a value of any other primitive numeric data type is a narrowing conversion and requires a cast operator (in C#), a conversion method (in Visual Basic), or a call to a <ph id="ph2">&lt;xref:System.Convert&gt;</ph> method.</source>
          <target state="translated">변환 된 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값을 다른 기본 숫자 데이터 형식의 값은 축소 변환 하 고 캐스트 연산자 (C#에서), (Visual Basic의 경우)의 변환 메서드 또는에 대 한 호출 필요는 <ph id="ph2">&lt;xref:System.Convert&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Values that are outside the range of the target data type, which are defined by the target type's <ph id="ph1">`MinValue`</ph> and <ph id="ph2">`MaxValue`</ph> properties, behave as shown in the following table.</source>
          <target state="translated">대상 유형으로 정의 된 대상 데이터 형식의 범위 밖에 있는 값 <ph id="ph1">`MinValue`</ph> 및 <ph id="ph2">`MaxValue`</ph> 속성을 다음 표에 나와 있는 것 처럼 동작 합니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Target type</source>
          <target state="translated">대상 형식</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Result</source>
          <target state="translated">결과</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Any integral type</source>
          <target state="translated">다른 정수 계열 형식</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>An <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph> exception if the conversion occurs in a checked context.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.OverflowException&gt;</ph> checked 컨텍스트에서 변환이 발생 하는 경우는 예외입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>If the conversion occurs in an unchecked context (the default in C#), the conversion operation succeeds but the value overflows.</source>
          <target state="translated">Unchecked 컨텍스트에서 (C#에서 기본값) 변환을 수행 하는 경우 변환 작업은 성공 하지만 값 오버플로가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>An <ph id="ph1">&lt;xref:System.OverflowException&gt;</ph> exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.OverflowException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><ph id="ph1">&lt;xref:System.Single.NegativeInfinity?displayProperty=nameWithType&gt;</ph> for negative values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Single.NegativeInfinity?displayProperty=nameWithType&gt;</ph> 음수 값입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><ph id="ph1">&lt;xref:System.Single.PositiveInfinity?displayProperty=nameWithType&gt;</ph> for positive values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Single.PositiveInfinity?displayProperty=nameWithType&gt;</ph> 양수 값입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>In addition, <ph id="ph1">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Double.PositiveInfinity?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Double.NegativeInfinity?displayProperty=nameWithType&gt;</ph> throw an <ph id="ph4">&lt;xref:System.OverflowException&gt;</ph> for conversions to integers in a checked context, but these values overflow when converted to integers in an unchecked context.</source>
          <target state="translated">또한 <ph id="ph1">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Double.PositiveInfinity?displayProperty=nameWithType&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Double.NegativeInfinity?displayProperty=nameWithType&gt;</ph> throw는 <ph id="ph4">&lt;xref:System.OverflowException&gt;</ph> 컨텍스트 있지만 unchecked 컨텍스트에서 정수로 변환 하는 경우 이러한 값 오버플로 정수로 변환 합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For conversions to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph>, they always throw an <ph id="ph2">&lt;xref:System.OverflowException&gt;</ph>.</source>
          <target state="translated">변환에 대 한 <ph id="ph1">&lt;xref:System.Decimal&gt;</ph>, 항상 throw 한 <ph id="ph2">&lt;xref:System.OverflowException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For conversions to <ph id="ph1">&lt;xref:System.Single&gt;</ph>, they convert to <ph id="ph2">&lt;xref:System.Single.NaN?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Single.PositiveInfinity?displayProperty=nameWithType&gt;</ph>, and <ph id="ph4">&lt;xref:System.Single.NegativeInfinity?displayProperty=nameWithType&gt;</ph>, respectively.</source>
          <target state="translated">변환에 대 한 <ph id="ph1">&lt;xref:System.Single&gt;</ph>를 변환 <ph id="ph2">&lt;xref:System.Single.NaN?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Single.PositiveInfinity?displayProperty=nameWithType&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Single.NegativeInfinity?displayProperty=nameWithType&gt;</ph>각각.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Note that a loss of precision may result from converting a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value to another numeric type.</source>
          <target state="translated">정밀도의 손실을 변환 하 여 발생할 수는 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값을 다른 숫자 형식입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>In the case of converting non-integral <ph id="ph1">&lt;xref:System.Double&gt;</ph> values, as the output from the example shows, the fractional component is lost when the <ph id="ph2">&lt;xref:System.Double&gt;</ph> value is either rounded (as in Visual Basic) or truncated (as in C#).</source>
          <target state="translated">정수 계열이 아닌 변환의 경우 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값을 예제의 출력에서 볼 수 있듯이 소수 부분이 손실 되는 경우는 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값 반올림 됩니다 (예: Visual Basic) 또는 (예: C#) 잘립니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For conversions to <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> and <ph id="ph2">&lt;xref:System.Single&gt;</ph> values, the <ph id="ph3">&lt;xref:System.Double&gt;</ph> value may not have a precise representation in the target data type.</source>
          <target state="translated">변환에 대 한 <ph id="ph1">&lt;xref:System.Decimal&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Single&gt;</ph> 값의 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 값이 정확한 표시 대상 데이터 형식에 없을 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The following example converts a number of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to several other numeric types.</source>
          <target state="translated">다음 예제에서는 다양 한 변환 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값을 다른 여러 가지 숫자 형식입니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The conversions occur in a checked context in Visual Basic (the default) and in C# (because of the <bpt id="p1">[</bpt>checked<ept id="p1">](~/docs/csharp/language-reference/keywords/checked.md)</ept> keyword).</source>
          <target state="translated">(기본값) Visual basic에서 및 C#에서 확인 된 컨텍스트에서 발생 하는 변환을 (때문에 <bpt id="p1">[</bpt>체크<ept id="p1">](~/docs/csharp/language-reference/keywords/checked.md)</ept> 키워드)입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The output from the example shows the result for conversions in both a checked an unchecked context.</source>
          <target state="translated">예제의 출력에서 선택 된 변환에 대 한 결과 보여 줍니다. unchecked 컨텍스트.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>You can perform conversions in an unchecked context in Visual Basic by compiling with the <ph id="ph1">`/removeintchecks+`</ph> compiler switch and in C# by commenting out the <ph id="ph2">`checked`</ph> statement.</source>
          <target state="translated">사용 하 여 컴파일하면 Visual Basic에서는 unchecked 컨텍스트에서 변환을 수행할 수 있습니다는 <ph id="ph1">`/removeintchecks+`</ph> 컴파일러 스위치와 C# 주석으로 처리 하 여는 <ph id="ph2">`checked`</ph> 문.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For more information on the conversion of numeric types, see <bpt id="p1">[</bpt>Type Conversion in the .NET Framework<ept id="p1">](~/docs/standard/base-types/type-conversion.md)</ept> and <bpt id="p2">[</bpt>Type Conversion Tables<ept id="p2">](~/docs/standard/base-types/conversion-tables.md)</ept>.</source>
          <target state="translated">숫자 형식의 변환 작업에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>.NET Framework의 형식 변환<ept id="p1">](~/docs/standard/base-types/type-conversion.md)</ept> 및 <bpt id="p2">[</bpt>형식 변환 표<ept id="p2">](~/docs/standard/base-types/conversion-tables.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Floating-Point Functionality</source>
          <target state="translated">부동 소수점 기능</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The <ph id="ph1">&lt;xref:System.Double&gt;</ph> structure and related types provide methods to perform operations in the following areas:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 구조와 관련 된 형식을 다음 영역에서 작업을 수행 하는 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><bpt id="p1">**</bpt>Comparison of values<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>값의 비교<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>You can call the <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> method to determine whether two <ph id="ph2">&lt;xref:System.Double&gt;</ph> values are equal, or the <ph id="ph3">&lt;xref:System.Double.CompareTo%2A&gt;</ph> method to determine the relationship between two values.</source>
          <target state="translated">호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> 두 지 여부를 결정 하는 메서드 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값이 같으면 또는 <ph id="ph3">&lt;xref:System.Double.CompareTo%2A&gt;</ph> 메서드를 두 값 간에 관계를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The <ph id="ph1">&lt;xref:System.Double&gt;</ph> structure also supports a complete set of comparison operators.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 구조는 또한 비교 연산자의 전체 집합을 지원 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For example, you can test for equality or inequality, or determine whether one value is greater than or equal to another.</source>
          <target state="translated">예를 들어 같음 또는 같지 않음, 테스트 또는 하나의 값 보다 크거나 같은 다른 적용 되는지 확인 수 있습니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>If one of the operands is a numeric type other than a <ph id="ph1">&lt;xref:System.Double&gt;</ph>, it is converted to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> before performing the comparison.</source>
          <target state="translated">피연산자 중 하나는 숫자 이외의 형식인 경우는 <ph id="ph1">&lt;xref:System.Double&gt;</ph>, 변환할는 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 비교를 수행 하기 전에.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Because of differences in precision, two <ph id="ph1">&lt;xref:System.Double&gt;</ph> values that you expect to be equal may turn out to be unequal, which affects the result of the comparison.</source>
          <target state="translated">전체 자릿수의 차이 때문에 두 개의 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 동일한 것으로 예상 하는 값 수 판명 같지 않은 것을 비교 결과 영향을 주는 합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>See the <bpt id="p1">[</bpt>Testing for Equality<ept id="p1">](#Equality)</ept> section for more information about comparing two <ph id="ph1">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">참조는 <bpt id="p1">[</bpt>같음 테스트<ept id="p1">](#Equality)</ept> 두 개를 비교 하는 방법에 대 한 자세한 내용은 섹션 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>You can also call the <ph id="ph1">&lt;xref:System.Double.IsNaN%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Double.IsInfinity%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Double.IsPositiveInfinity%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Double.IsNegativeInfinity%2A&gt;</ph> methods to test for these special values.</source>
          <target state="translated">호출할 수도 있습니다는 <ph id="ph1">&lt;xref:System.Double.IsNaN%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Double.IsInfinity%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Double.IsPositiveInfinity%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Double.IsNegativeInfinity%2A&gt;</ph> 를 이러한 특수 값에 대 한 테스트 합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><bpt id="p1">**</bpt>Mathematical operations<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>수학 연산을<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Common arithmetic operations, such as addition, subtraction, multiplication, and division, are implemented by language compilers and Common Intermediate Language (CIL) instructions, rather than by <ph id="ph1">&lt;xref:System.Double&gt;</ph> methods.</source>
          <target state="translated">가 아닌 언어 컴파일러 및 공용 중간 언어 (CIL) 지침을 보려면 여 더하기, 빼기, 곱하기 및 나누기, 같은 일반적인 산술 연산을 구현 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>If one of the operands in a mathematical operation is a numeric type other than a <ph id="ph1">&lt;xref:System.Double&gt;</ph>, it is converted to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> before performing the operation.</source>
          <target state="translated">수치 연산에서 피연산자 중 하나는 숫자 이외의 형식인 경우는 <ph id="ph1">&lt;xref:System.Double&gt;</ph>로 변환 됩니다는 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 작업을 수행 하기 전에.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The result of the operation is also a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">작업의 결과 이기도 한 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Other mathematical operations can be performed by calling <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) methods in the <ph id="ph3">&lt;xref:System.Math?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">호출 하 여 다른 수학 작업을 수행할 수 <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> Visual basic에서)의 메서드는 <ph id="ph3">&lt;xref:System.Math?displayProperty=nameWithType&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>It includes additional methods commonly used for arithmetic (such as <ph id="ph1">&lt;xref:System.Math.Abs%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Math.Sign%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Math.Sqrt%2A?displayProperty=nameWithType&gt;</ph>), geometry (such as <ph id="ph4">&lt;xref:System.Math.Cos%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph5">&lt;xref:System.Math.Sin%2A?displayProperty=nameWithType&gt;</ph>), and calculus (such as <ph id="ph6">&lt;xref:System.Math.Log%2A?displayProperty=nameWithType&gt;</ph>).</source>
          <target state="translated">연산에 대해 일반적으로 사용 되는 추가 메서드를 포함 (같은 <ph id="ph1">&lt;xref:System.Math.Abs%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Math.Sign%2A?displayProperty=nameWithType&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Math.Sqrt%2A?displayProperty=nameWithType&gt;</ph>), 기 하 도형 (와 같은 <ph id="ph4">&lt;xref:System.Math.Cos%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph5">&lt;xref:System.Math.Sin%2A?displayProperty=nameWithType&gt;</ph>), 및 미적분 법 (같은 <ph id="ph6">&lt;xref:System.Math.Log%2A?displayProperty=nameWithType&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>You can also manipulate the individual bits in a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">개별 비트를 조작할 수도 있습니다는 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType&gt;</ph> method preserves a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value's bit pattern in a 64-bit integer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType&gt;</ph> 메서드 전처리는 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값 비트 패턴의 64 비트 정수에에서의 합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Double%29?displayProperty=nameWithType&gt;</ph> method returns its bit pattern in a byte array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Double%29?displayProperty=nameWithType&gt;</ph> 메서드는 바이트 배열에 해당 비트 패턴을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><bpt id="p1">**</bpt>Rounding<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>반올림<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Rounding is often used as a technique for reducing the impact of differences between values caused by problems of floating-point representation and precision.</source>
          <target state="translated">반올림는 대개 기술로 부동 소수점 표현 및 정밀도 문제로 인해 발생 하는 값 사이의 차이의 영향을 줄이기 위한 합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>You can round a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value by calling the <ph id="ph2">&lt;xref:System.Math.Round%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">반올림할 수는 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 호출 하 여 값의 <ph id="ph2">&lt;xref:System.Math.Round%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><bpt id="p1">**</bpt>Formatting<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>서식 지정<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>You can convert a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value to its string representation by calling the <ph id="ph2">&lt;xref:System.Double.ToString%2A&gt;</ph> method or by using the composite formatting feature.</source>
          <target state="translated">변환할 수는 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값을 호출 하 여 해당 문자열 표현에서 <ph id="ph2">&lt;xref:System.Double.ToString%2A&gt;</ph> 메서드 또는 합성 서식 지정 기능을 사용 하 여 합니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>For information about how format strings control the string representation of floating-point values, see the <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept> topics.</source>
          <target state="translated">형식 문자열에서 부동 소수점 값의 문자열 표현을 제어 하는 방법에 대 한 정보에 대 한 참조는 <bpt id="p1">[</bpt>표준 숫자 형식 문자열<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> 및 <bpt id="p2">[</bpt>사용자 지정 숫자 형식 문자열<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><bpt id="p1">**</bpt>Parsing strings<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>문자열 구문 분석<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>You can convert the string representation of a floating-point value to a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value by calling either the <ph id="ph2">&lt;xref:System.Double.Parse%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Double.TryParse%2A&gt;</ph> method.</source>
          <target state="translated">부동 소수점 값으로의 문자열 표현을 변환할 수 있습니다는 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 호출 하 여 값의 <ph id="ph2">&lt;xref:System.Double.Parse%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Double.TryParse%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>If the parse operation fails, the <ph id="ph1">&lt;xref:System.Double.Parse%2A&gt;</ph> method throws an exception, whereas the <ph id="ph2">&lt;xref:System.Double.TryParse%2A&gt;</ph> method returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">구문 분석이 실패 하는 경우는 <ph id="ph1">&lt;xref:System.Double.Parse%2A&gt;</ph> 메서드 예외를 throw 하는 반면는 <ph id="ph2">&lt;xref:System.Double.TryParse%2A&gt;</ph> 메서드 반환 <ph id="ph3">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source><bpt id="p1">**</bpt>Type conversion<ept id="p1">**</ept>.</source>
          <target state="translated"><bpt id="p1">**</bpt>형식 변환<ept id="p1">**</ept>합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The <ph id="ph1">&lt;xref:System.Double&gt;</ph> structure provides an explicit interface implementation for the <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface, which supports conversion between any two standard .NET Framework data types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 구조에 대 한 명시적 인터페이스 구현을 제공는 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스에는 두 개의 표준.NET Framework 데이터 형식 간의 변환만 지원 합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Language compilers also support the implicit conversion of values of all other standard numeric types to <ph id="ph1">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">언어 컴파일러에 다른 모든 표준 숫자 형식에 값의 암시적 변환도 지원 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Conversion of a value of any standard numeric type to a <ph id="ph1">&lt;xref:System.Double&gt;</ph> is a widening conversion and does not require the user of a casting operator or conversion method,</source>
          <target state="translated">표준 숫자 형식의 값 변환 하는 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 확대 변환이 캐스팅 연산자나 변환 메서드가 사용자 필요 하지 않습니다</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>However, conversion of <ph id="ph1">&lt;xref:System.Int64&gt;</ph> and <ph id="ph2">&lt;xref:System.Single&gt;</ph> values can involve a loss of precision.</source>
          <target state="translated">그러나 변환 <ph id="ph1">&lt;xref:System.Int64&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Single&gt;</ph> 값 정밀도 손실 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The following table lists the differences in precision for each of these types:</source>
          <target state="translated">다음 표에 이러한 각 형식에 대 한 전체 자릿수의 차이가 있습니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Type</source>
          <target state="translated">형식</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Maximum precision</source>
          <target state="translated">최대 전체 자릿수</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Internal precision</source>
          <target state="translated">내부 정밀도</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>15</source>
          <target state="translated">15</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>17</source>
          <target state="translated">17</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>19 decimal digits</source>
          <target state="translated">19 10 진수</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>19 decimal digits</source>
          <target state="translated">19 10 진수</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>7 decimal digits</source>
          <target state="translated">10 진수 7 자리</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>9 decimal digits</source>
          <target state="translated">9 10 진수</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The problem of precision most frequently affects <ph id="ph1">&lt;xref:System.Single&gt;</ph> values that are converted to <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">정밀도의 문제에 영향을 가장 많이 <ph id="ph1">&lt;xref:System.Single&gt;</ph> 변환 된 값 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>In the following example, two values produced by identical division operations are unequal because one of the values is a single-precision floating point value converted to a <ph id="ph1">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 동일한 나누기 연산에 의해 발생 하는 두 개의 값 다르면 변환할 단 정밀도 부동 소수점 값 이므로 값 중 하나는 <ph id="ph1">&lt;xref:System.Double&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>The following code example illustrates the use of <ph id="ph1">&lt;xref:System.Double&gt;</ph>:</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Double&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>All members of this type are thread safe.</source>
          <target state="translated">이 유형의 모든 멤버는 스레드로부터 안전 합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>Members that appear to modify instance state actually return a new instance initialized with the new value.</source>
          <target state="translated">멤버 인스턴스 상태를 수정 하려면 표시 되는 실제로 새 값으로 초기화 하는 새 인스턴스를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Double">
          <source>As with any other type, reading and writing to a shared variable that contains an instance of this type must be protected by a lock to guarantee thread safety.</source>
          <target state="translated">으로 다른 종류와이 형식의 인스턴스를 포함 하는 공유 변수를 읽고 쓰는 보호 해야 스레드로부터 안전을 보장 하려면 잠금에 의해.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="T:System.Double">
          <source>Compares this instance to a specified object or <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object or <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> object.</source>
          <target state="translated">이 인스턴스를 지정된 개체나 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 개체와 비교하고 이 인스턴스의 값이 지정된 개체나 <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> 개체의 값보다 작은지, 같은지 또는 큰지를 나타내는 정수를 반환합니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source>A double-precision floating-point number to compare.</source>
          <target state="translated">비교할 배정밀도 부동 소수점 숫자입니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source>Compares this instance to a specified double-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified double-precision floating-point number.</source>
          <target state="translated">이 인스턴스를 지정된 배정밀도 부동 소수점 숫자와 비교하고 이 인스턴스의 값이 지정된 배정밀도 부동 소수점 숫자 값보다 작은지, 같은지 또는 큰지를 나타내는 정수를 반환합니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source>A signed number indicating the relative values of this instance and <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">이 인스턴스와 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>의 상대 값을 나타내는 부호 있는 숫자입니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Return Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 반환 값</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 설명</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0보다 작음</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance is less than <ph id="ph3">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 이 인스턴스는 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>보다 작습니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source>This instance is not a number (<ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph>) and <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is a number.</source>
          <target state="translated">이 인스턴스는 Not-a-Number(<ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph>)이고 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>는 숫자입니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance is equal to <ph id="ph3">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 이 인스턴스는 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>와 같습니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source>Both this instance and <ph id="ph1">&lt;paramref name="value" /&gt;</ph> are not a number (<ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph>), <ph id="ph3">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>, or <ph id="ph4">&lt;see cref="F:System.Double.NegativeInfinity" /&gt;</ph>.</source>
          <target state="translated">이 인스턴스와 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 모두 Not-a-Number(<ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph>), <ph id="ph3">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> 또는 <ph id="ph4">&lt;see cref="F:System.Double.NegativeInfinity" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0보다 큼</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance is greater than <ph id="ph3">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 이 인스턴스는 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>보다 큽니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Double)">
          <source>This instance is a number and <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number (<ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph>).</source>
          <target state="translated">이 인스턴스는 숫자이고 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>는 Not-a-Number(<ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>Values must be identical to be considered equal.</source>
          <target state="translated">값은 같은 동일 해야 합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits.</source>
          <target state="translated">특히 부동 소수점 값이 여러 수학 연산을에 종속 하는 경우에 정밀도 떨어질 수 및 최소 유효 자릿수가 제외 하 고 거의 동일 하 게 해당 값에 대 한 일반적입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>Because of this, the return value of the <ph id="ph1">&lt;xref:System.Double.CompareTo%2A&gt;</ph> method at times may seem surprising.</source>
          <target state="translated">반환 값이로 인해는 <ph id="ph1">&lt;xref:System.Double.CompareTo%2A&gt;</ph> 메서드 때때로 보일 수 있지만 놀라운 합니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>For example, multiplication by a particular value followed by division by the same value should produce the original value.</source>
          <target state="translated">예를 들어 동일한 값으로 나누기 뒤 특정 값을 곱하는 식은 원래 값을 생성 해야 합니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>In the following example, however, the computed value turns out to be greater than the original value.</source>
          <target state="translated">그러나 다음 예에서 계산 된 값으로 밝혀졌습니다 원래 값 보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>Showing all significant digits of the two values by using the "R" <bpt id="p1">[</bpt>standard numeric format string<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> indicates that the computed value differs from the original value in its least significant digits.</source>
          <target state="translated">"R"을 사용 하 여 두 값의 모든 유효 자릿수가 표시 <bpt id="p1">[</bpt>표준 숫자 형식 문자열<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> 의 최하위 유효 자릿수가의 원래 값에서 계산 된 값이 다른 것을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>For information on handling such comparisons, see the Remarks section of the <ph id="ph1">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph> method.</source>
          <target state="translated">이러한 비교를 처리 하는 방법은의 설명 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>This method implements the <ph id="ph1">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> interface and performs slightly better than the <ph id="ph2">&lt;xref:System.Double.CompareTo%2A?displayProperty=nameWithType&gt;</ph> method because it does not have to convert the <ph id="ph3">`value`</ph> parameter to an object.</source>
          <target state="translated">이 메서드를 구현 하는 <ph id="ph1">&lt;xref:System.IComparable%601?displayProperty=nameWithType&gt;</ph> 인터페이스 및 수행 보다 조금 더 나은 <ph id="ph2">&lt;xref:System.Double.CompareTo%2A?displayProperty=nameWithType&gt;</ph> 메서드 변환할 필요가 없기 때문에 <ph id="ph3">`value`</ph> 매개 변수를 개체로 합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>Note that, although an object whose value is <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> is not considered equal to another object whose value is <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph> (even itself), the <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> interface requires that <ph id="ph4">`A.CompareTo(A)`</ph> return zero.</source>
          <target state="translated">하지만 해당 값이 개체 <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> 값이 다른 개체에 같지 않은 경우 <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph> (심지어 자체)는 <ph id="ph3">&lt;xref:System.IComparable%601&gt;</ph> 인터페이스에서는 <ph id="ph4">`A.CompareTo(A)`</ph> 0을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>Widening Conversions</source>
          <target state="translated">확대 변환</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>Depending on your programming language, it might be possible to code a <ph id="ph1">&lt;xref:System.Double.CompareTo%2A&gt;</ph> method where the parameter type has fewer bits (is narrower) than the instance type.</source>
          <target state="translated">프로그래밍 언어에 따라 코딩할 수는 <ph id="ph1">&lt;xref:System.Double.CompareTo%2A&gt;</ph> 메서드 매개 변수 형식이 비트 수가 적은 보다 인스턴스 형식입니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</source>
          <target state="translated">일부 프로그래밍 언어 매개 변수를 나타내는 형식으로 비트 수는 인스턴스와 암시적 확대 변환을 수행 하기 때문에 이것이 가능 합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>For example, suppose the instance type is <ph id="ph1">&lt;xref:System.Double&gt;</ph> and the parameter type is <ph id="ph2">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">예를 들어 인스턴스 형식이 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 매개 변수 형식이 고 <ph id="ph2">&lt;xref:System.Int32&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>The Microsoft C# compiler generates instructions to represent the value of the parameter as a <ph id="ph1">&lt;xref:System.Double&gt;</ph> object, then generates a <ph id="ph2">&lt;xref:System.Double.CompareTo%28System.Double%29?displayProperty=nameWithType&gt;</ph> method that compares the values of the instance and the widened representation of the parameter.</source>
          <target state="translated">Microsoft C# 컴파일러는 매개 변수의 값을 나타내는 명령을 생성 한 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 개체를 생성 합니다는 <ph id="ph2">&lt;xref:System.Double.CompareTo%28System.Double%29?displayProperty=nameWithType&gt;</ph> 확대 표현의 매개 변수 및 인스턴스 값을 비교 하는 메서드.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types.</source>
          <target state="translated">해당 컴파일러에서 숫자 형식을 암시적으로 확대 변환을 수행 하는지 확인 하려면 해당 프로그래밍 언어의 설명서를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>For more information, see the <bpt id="p1">[</bpt>Type Conversion Tables<ept id="p1">](~/docs/standard/base-types/conversion-tables.md)</ept> topic.</source>
          <target state="translated">자세한 내용은 참조는 <bpt id="p1">[</bpt>형식 변환 표<ept id="p1">](~/docs/standard/base-types/conversion-tables.md)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>Precision in Comparisons</source>
          <target state="translated">정확 하 게 비교</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</source>
          <target state="translated">초과 문서화 된 정밀도 부동 소수점 숫자의 정밀도 특정 구현 및.NET Framework의 버전입니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</source>
          <target state="translated">따라서 전체 자릿수는 수의 내부 표현 변경 될 수 있으므로 두 개의 특정 숫자 비교.NET Framework의 버전 간에 변경 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Double)">
          <source>The following code example demonstrates generic and nongeneric versions of the <ph id="ph1">&lt;xref:System.Double.CompareTo%2A&gt;</ph> method for several value and reference types.</source>
          <target state="translated">다음 코드 예제에서는 제네릭 및 제네릭이 아닌 버전을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Double.CompareTo%2A&gt;</ph> 여러 값 및 참조 형식에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source>An object to compare, or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">비교할 개체 또는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source>Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</source>
          <target state="translated">이 인스턴스를 지정된 개체와 비교하고 이 인스턴스의 값이 지정된 개체의 값보다 작은지, 같은지 또는 큰지를 나타내는 정수를 반환합니다.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source>A signed number indicating the relative values of this instance and <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">이 인스턴스와 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>의 상대 값을 나타내는 부호 있는 숫자입니다.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 값</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 설명</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 음의 정수</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance is less than <ph id="ph3">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 이 인스턴스는 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>보다 작습니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source>This instance is not a number (<ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph>) and <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is a number.</source>
          <target state="translated">이 인스턴스는 Not-a-Number(<ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph>)이고 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>는 숫자입니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance is equal to <ph id="ph3">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 이 인스턴스는 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>와 같습니다.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source>This instance and <ph id="ph1">&lt;paramref name="value" /&gt;</ph> are both <ph id="ph2">&lt;see langword="Double.NaN" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>, or <ph id="ph4">&lt;see cref="F:System.Double.NegativeInfinity" /&gt;</ph><ph id="ph5">&lt;/description&gt;</ph><ph id="ph6">&lt;/item&gt;</ph><ph id="ph7">&lt;item&gt;</ph><ph id="ph8">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated">이 인스턴스와 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 모두 <ph id="ph2">&lt;see langword="Double.NaN" /&gt;</ph>, <ph id="ph3">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> 또는 <ph id="ph4">&lt;see cref="F:System.Double.NegativeInfinity" /&gt;</ph>입니다.<ph id="ph5">&lt;/description&gt;</ph><ph id="ph6">&lt;/item&gt;</ph><ph id="ph7">&lt;item&gt;</ph><ph id="ph8">&lt;term&gt;</ph> 양의 정수</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance is greater than <ph id="ph3">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 이 인스턴스는 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>보다 큽니다.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source>This instance is a number and <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a number (<ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph>).</source>
          <target state="translated">이 인스턴스는 숫자이고 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>는 Not-a-Number(<ph id="ph2">&lt;see cref="F:System.Double.NaN" /&gt;</ph>)입니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>The <ph id="ph1">`value`</ph> parameter must be <ph id="ph2">`null`</ph> or an instance of <ph id="ph3">`Double`</ph>; otherwise, an exception is thrown.</source>
          <target state="translated"><ph id="ph1">`value`</ph> 매개 변수 여야 <ph id="ph2">`null`</ph> 또는 인스턴스의 <ph id="ph3">`Double`</ph>, 그러지 않으면 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>Any instance of <ph id="ph1">&lt;xref:System.Double&gt;</ph>, regardless of its value, is considered greater than <ph id="ph2">`null`</ph>.</source>
          <target state="translated">모든 인스턴스 <ph id="ph1">&lt;xref:System.Double&gt;</ph>, 해당 값에 관계 없이 보다 큰 것으로 간주 됩니다 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>Values must be identical to be considered equal.</source>
          <target state="translated">값은 같은 동일 해야 합니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits.</source>
          <target state="translated">특히 부동 소수점 값이 여러 수학 연산을에 종속 하는 경우에 정밀도 떨어질 수 및 최소 유효 자릿수가 제외 하 고 거의 동일 하 게 해당 값에 대 한 일반적입니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>Because of this, the return value of the <ph id="ph1">&lt;xref:System.Double.CompareTo%2A&gt;</ph> method at times may seem surprising.</source>
          <target state="translated">반환 값이로 인해는 <ph id="ph1">&lt;xref:System.Double.CompareTo%2A&gt;</ph> 메서드 때때로 보일 수 있지만 놀라운 합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>For example, multiplication by a particular value followed by division by the same value should produce the original value.</source>
          <target state="translated">예를 들어 동일한 값으로 나누기 뒤 특정 값을 곱하는 식은 원래 값을 생성 해야 합니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>In the following example, however, the computed value turns out to be greater than the original value.</source>
          <target state="translated">그러나 다음 예에서 계산 된 값으로 밝혀졌습니다 원래 값 보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>Showing all significant digits of the two values by using the "R" <bpt id="p1">[</bpt>standard numeric format string<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> indicates that the computed value differs from the original value in its least significant digits.</source>
          <target state="translated">"R"을 사용 하 여 두 값의 모든 유효 자릿수가 표시 <bpt id="p1">[</bpt>표준 숫자 형식 문자열<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> 의 최하위 유효 자릿수가의 원래 값에서 계산 된 값이 다른 것을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>For information on handling such comparisons, see the Remarks section of the <ph id="ph1">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph> method.</source>
          <target state="translated">이러한 비교를 처리 하는 방법은의 설명 섹션을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>This method is implemented to support the <ph id="ph1">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">이 메서드는 지원 하도록 구현 된 <ph id="ph1">&lt;xref:System.IComparable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>Note that, although a <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> is not considered to be equal to another <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph> (even itself), the <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> interface requires that <ph id="ph4">`A.CompareTo(A)`</ph> return zero.</source>
          <target state="translated">없지만 <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> 간에 동일한 것으로 간주 되지 않으며 <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph> (심지어 자체)는 <ph id="ph3">&lt;xref:System.IComparable&gt;</ph> 인터페이스에서는 <ph id="ph4">`A.CompareTo(A)`</ph> 0을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>Precision in Comparisons</source>
          <target state="translated">정확 하 게 비교</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</source>
          <target state="translated">초과 문서화 된 정밀도 부동 소수점 숫자의 정밀도 특정 구현 및.NET Framework의 버전입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</source>
          <target state="translated">따라서 전체 자릿수는 수의 내부 표현 변경 될 수 있으므로 두 개의 특정 숫자 비교.NET Framework의 버전 간에 변경 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.CompareTo(System.Object)">
          <source>The following code example illustrates the use of <ph id="ph1">`CompareTo`</ph> in the context of <ph id="ph2">`Double`</ph>.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">`CompareTo`</ph> 의 컨텍스트에서 <ph id="ph2">`Double`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Double.CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph>가 아닌 경우</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="F:System.Double.Epsilon">
          <source>Represents the smallest positive <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value that is greater than zero.</source>
          <target state="translated">0보다 큰 양의 최소 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="F:System.Double.Epsilon">
          <source>This field is constant.</source>
          <target state="translated">이 필드는 상수입니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>The value of the <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> property reflects the smallest positive <ph id="ph2">&lt;xref:System.Double&gt;</ph> value that is significant in numeric operations or comparisons when the value of the <ph id="ph3">&lt;xref:System.Double&gt;</ph> instance is zero.</source>
          <target state="translated">값은 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> 속성은 가장 작은 양수를 반영 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값은 숫자 연산 또는 비교에서 중요 하 때의 값은 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 인스턴스는 0입니다.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>For example, the following code shows that zero and <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> are considered to be unequal values, whereas zero and half the value of <ph id="ph2">&lt;xref:System.Double.Epsilon&gt;</ph> are considered to be equal.</source>
          <target state="translated">예를 들어 다음 코드와 0 및 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> 반면 같지 않은 값으로 간주 됩니다의 절반 및 값 <ph id="ph2">&lt;xref:System.Double.Epsilon&gt;</ph> 동일한 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>More precisely, the floating point format consists of a sign, a 52-bit mantissa or significand, and an 11-bit exponent.</source>
          <target state="translated">부동 보다 정확 하 게 지점은 기호, 52 비트가 수 또는, significand 및 11 비트 지 수의 형식으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>As the following example shows, zero has an exponent of -1022 and a mantissa of 0.</source>
          <target state="translated">다음 예제와 같이 0에-1022의 지 수 및 0의가 수 있습니다.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source><ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> has an exponent of -1022 and a mantissa of 1.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> -1022의 지 수에 1의가 수 있습니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>This means that <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> is the smallest positive <ph id="ph2">&lt;xref:System.Double&gt;</ph> value greater than zero and represents the smallest possible value and the smallest possible increment for a <ph id="ph3">&lt;xref:System.Double&gt;</ph> whose exponent is -1022.</source>
          <target state="translated">즉 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> 가 가장 작은 양수가 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 0 보다 큰 값을 나타내고, 가능한 가장 작은 값에 대 한 가능한 가장 작은 증가값은 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 인 지 수는-1022입니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>However, the <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> property is not a general measure of precision of the <ph id="ph2">&lt;xref:System.Double&gt;</ph> type; it applies only to <ph id="ph3">&lt;xref:System.Double&gt;</ph> instances that have a value of zero or an exponent of -1022.</source>
          <target state="translated">그러나는 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> 속성은 일반 측정 한 값의 전체 자릿수 없습니다는 <ph id="ph2">&lt;xref:System.Double&gt;</ph> ; 입력에 적용 됩니다 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 값은 0 또는-1022의 지수가 인스턴스.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>The value of the <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> property is not equivalent to machine epsilon, which represents the upper bound of the relative error due to rounding in floating-point arithmetic.</source>
          <target state="translated">값은 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> 속성 부동 소수점 연산에서 반올림 상대 오차의 상한을 나타내는 컴퓨터 엡실론 동일 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>The value of this constant is 4.94065645841247e-324.</source>
          <target state="translated">이 상수의 값은 4.94065645841247 e-324입니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>Two apparently equivalent floating-point numbers might not compare equal because of differences in their least significant digits.</source>
          <target state="translated">두 명백히 같은 부동 소수점 숫자가 수 것으로 간주 최소 유효 자릿수가에 차이가 있으므로 합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>For example, the C# expression, <ph id="ph1">`(double)1/3 == (double)0.33333`</ph>, does not compare equal because the division operation on the left side has maximum precision while the constant on the right side is precise only to the specified digits.</source>
          <target state="translated">예를 들어 C# 식 <ph id="ph1">`(double)1/3 == (double)0.33333`</ph>, 같은지 비교 하지 왼쪽에서 나누기 연산을 반면 상수 오른쪽에는 지정 된 자릿수로 최대 전체 자릿수에 있기 때문에 있습니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>If you create a custom algorithm that determines whether two floating-point numbers can be considered equal, we do not recommend that you base your algorithm on the value of the <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> constant to establish the acceptable absolute margin of difference for the two values to be considered equal.</source>
          <target state="translated">알고리즘의 값에 기반 하는 지 여부를 두 개의 부동 소수점 숫자 취급 될 수 있습니다를 결정 하는 사용자 지정 알고리즘을 만드는 경우이 방법은 권장 되지 않습니다는 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> 소수점의 차이 값을 설정 하는 상수 두 값을 같은 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>(Typically, that margin of difference is many times greater than <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph>.) For information about comparing two double-precision floating-point values, see <ph id="ph2">&lt;xref:System.Double&gt;</ph> and <ph id="ph3">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph>.</source>
          <target state="translated">(일반적으로 해당 차이 값은 이러한 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph>.) 두 개의 배정밀도 부동 소수점 값을 비교 하는 방법에 대 한 정보를 참조 하십시오. <ph id="ph2">&lt;xref:System.Double&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>Platform Notes</source>
          <target state="translated">플랫폼 참고 사항</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>On ARM systems, the value of the <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> constant is too small to be detected, so it equates to zero.</source>
          <target state="translated">ARM 시스템에서의 값은 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> 상수 0과 같으며 이므로 너무 작아 검색할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.Epsilon">
          <source>You can define an alternative epsilon value that equals 2.2250738585072014E-308 instead.</source>
          <target state="translated">2.2250738585072014 e 해당 하는 대체 epsilon 값을 정의할 수 있습니다-308 대신 합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="T:System.Double">
          <source>Returns a value indicating whether two instances of <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> represent the same value.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>의 두 인스턴스가 같은 값을 표시하는지를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Double.Equals(System.Double)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> object to compare to this instance.</source>
          <target state="translated">이 인스턴스와 비교할 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Double.Equals(System.Double)">
          <source>Returns a value indicating whether this instance and a specified <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> object represent the same value.</source>
          <target state="translated">이 인스턴스의 값과 지정된 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 개체의 값이 같은지를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Double.Equals(System.Double)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is equal to this instance; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 이 인스턴스와 같으면 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>이고, 그러지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>This method implements the <ph id="ph1">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> interface, and performs slightly better than <ph id="ph2">&lt;xref:System.Double.Equals%2A&gt;</ph> because it does not have to convert the <ph id="ph3">`obj`</ph> parameter to an object.</source>
          <target state="translated">이 메서드를 구현 하는 <ph id="ph1">&lt;xref:System.IEquatable%601?displayProperty=nameWithType&gt;</ph> 인터페이스를 하 고 수행 보다 조금 더 나은 <ph id="ph2">&lt;xref:System.Double.Equals%2A&gt;</ph> 변환할 필요가 없기 때문에 <ph id="ph3">`obj`</ph> 매개 변수를 개체로 합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>Widening Conversions</source>
          <target state="translated">확대 변환</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>Depending on your programming language, it might be possible to code a <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> method where the parameter type has fewer bits (is narrower) than the instance type.</source>
          <target state="translated">프로그래밍 언어에 따라 코딩할 수는 <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> 메서드 매개 변수 형식이 비트 수가 적은 보다 인스턴스 형식입니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</source>
          <target state="translated">일부 프로그래밍 언어 매개 변수를 나타내는 형식으로 비트 수는 인스턴스와 암시적 확대 변환을 수행 하기 때문에 이것이 가능 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>For example, suppose the instance type is <ph id="ph1">&lt;xref:System.Double&gt;</ph> and the parameter type is <ph id="ph2">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">예를 들어 인스턴스 형식이 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 매개 변수 형식이 고 <ph id="ph2">&lt;xref:System.Int32&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>The Microsoft C# compiler generates instructions to represent the value of the parameter as a <ph id="ph1">&lt;xref:System.Double&gt;</ph> object, then generates a <ph id="ph2">&lt;xref:System.Double.Equals%28System.Double%29?displayProperty=nameWithType&gt;</ph> method that compares the values of the instance and the widened representation of the parameter.</source>
          <target state="translated">Microsoft C# 컴파일러는 매개 변수의 값을 나타내는 명령을 생성 한 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 개체를 생성 합니다는 <ph id="ph2">&lt;xref:System.Double.Equals%28System.Double%29?displayProperty=nameWithType&gt;</ph> 확대 표현의 매개 변수 및 인스턴스 값을 비교 하는 메서드.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types.</source>
          <target state="translated">해당 컴파일러에서 숫자 형식을 암시적으로 확대 변환을 수행 하는지 확인 하려면 해당 프로그래밍 언어의 설명서를 참조 하십시오.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>For more information, see the <bpt id="p1">[</bpt>Type Conversion Tables<ept id="p1">](~/docs/standard/base-types/conversion-tables.md)</ept> topic.</source>
          <target state="translated">자세한 내용은 참조는 <bpt id="p1">[</bpt>형식 변환 표<ept id="p1">](~/docs/standard/base-types/conversion-tables.md)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>Precision in Comparisons</source>
          <target state="translated">정확 하 게 비교</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>The <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> 값 나타날 수 있는 두 값의 정밀도 차이 때문에 주의 해야 메서드를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>The following example reports that the <ph id="ph1">&lt;xref:System.Double&gt;</ph> value .333333 and the <ph id="ph2">&lt;xref:System.Double&gt;</ph> value returned by dividing 1 by 3 are unequal.</source>
          <target state="translated">다음 예제에서는 보고 하는 <ph id="ph1">&lt;xref:System.Double&gt;</ph> .333333 값 및 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 1 3으로 분할 하 여 반환 된 값이 다른 지 합니다.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>Rather than comparing for equality, one technique involves defining an acceptable relative margin of difference between two values (such as .001% of one of the values).</source>
          <target state="translated">동일한 지 비교 하는 대신 하나 정의 하는 방법을 허용 가능한 상대 오차 두 값 사이의 차이 (같은. 001%의 값 중 하나).</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to differences in precision and, therefore, the values are likely to be equal.</source>
          <target state="translated">절대 값의 두 값 사이의 차이 보다 작거나 동일한 경우 차이점은 전체 자릿수의 차이가 있기 때문에 발생할 가능성이 며 따라서 값 않습니다를 동일한 것입니다.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>The following example uses this technique to compare .33333 and 1/3, the two <ph id="ph1">&lt;xref:System.Double&gt;</ph> values that the previous code example found to be unequal.</source>
          <target state="translated">다음 예제에서는이 방법을 사용 하 여 33333과 1/3, 두 개의 비교 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 이전 코드 예제에서는 동일 하지 않은 것으로 확인 하는 값입니다.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>In this case, the values are equal.</source>
          <target state="translated">이 경우 값이 같으면 합니다.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>Because <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> defines the minimum expression of a positive value whose range is near zero, the margin of difference between two similar values must be greater than <ph id="ph2">&lt;xref:System.Double.Epsilon&gt;</ph>.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> 최소 식을 정의 합니다. 해당 범위는 0에 가까운 양수 값의 유사한 두 값 사이의 차이 보다 커야 <ph id="ph2">&lt;xref:System.Double.Epsilon&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>Typically, it is many times greater than <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph>.</source>
          <target state="translated">일반적으로 여러 번 보다 크면 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>Because of this, we recommend that you do not use <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> when comparing <ph id="ph2">&lt;xref:System.Double&gt;</ph> values for equality.</source>
          <target state="translated">이 인해 사용 하지 않으면 권장 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> 비교할 때 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 같음에 대 한 값입니다.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>A second technique involves comparing the difference between two floating-point numbers with some absolute value.</source>
          <target state="translated">두 번째 기술은 일부 절대 값으로 두 개의 부동 소수점 숫자의 차이 비교 하는 작업이 포함 됩니다.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>If the difference is less than or equal to that absolute value, the numbers are equal.</source>
          <target state="translated">차이 절대 값 보다 작은 경우 숫자는 동일 합니다.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>If it is greater, the numbers are not equal.</source>
          <target state="translated">큰 경우 숫자가 같지 않습니다.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>One alternative is to arbitrarily select an absolute value.</source>
          <target state="translated">한 가지 대안은 임의로 절대 값을 선택 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>This is problematic, however, because an acceptable margin of difference depends on the magnitude of the <ph id="ph1">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">하지만이 문제가 될 수 있습니다 차이의 허용 가능한 오차의 규모에 따라 다르기 때문에 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>A second alternative takes advantage of a design feature of the floating-point format: The difference between the integer representation of two floating-point values indicates the number of possible floating-point values that separates them.</source>
          <target state="translated">두 번째 대안에서는 부동 소수점 형식의 디자인 기능 활용: 두 개의 부동 소수점 값의 정수 표현 간의 차이 분리 하는 가능한 부동 소수점 값의 수를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>For example, the difference between 0.0 and <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> is 1, because <ph id="ph2">&lt;xref:System.Double.Epsilon&gt;</ph> is the smallest representable value when working with a <ph id="ph3">&lt;xref:System.Double&gt;</ph> whose value is zero.</source>
          <target state="translated">예를 들어 0.0 사이의 차이 및 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> 있으므로 1 <ph id="ph2">&lt;xref:System.Double.Epsilon&gt;</ph> 는 표현 가능한 가장 작은 값으로 작업할 때는 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 값이 0 인 합니다.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>The following example uses this technique to compare .33333 and 1/3, which are the two <ph id="ph1">&lt;xref:System.Double&gt;</ph> values that the previous code example with the <ph id="ph2">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph> method found to be unequal.</source>
          <target state="translated">다음 예제에서는이 방법을 사용 하 여은 두 33333과 1/3을 비교 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 있는 값이 이전 코드 예제와는 <ph id="ph2">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph> 를 동일 하지 않은 메서드를 찾을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>Note that the example uses the <ph id="ph1">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType&gt;</ph> method to convert a double-precision floating-point value to its integer representation.</source>
          <target state="translated">이 예에서는 사용 하는 <ph id="ph1">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A?displayProperty=nameWithType&gt;</ph> 배정밀도 부동 소수점 값을 정수 표현으로 변환 하는 메서드입니다.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</source>
          <target state="translated">초과 문서화 된 정밀도 부동 소수점 숫자의 정밀도 특정 구현 및.NET Framework의 버전입니다.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</source>
          <target state="translated">따라서 전체 자릿수는 수의 내부 표현 변경 될 수 있으므로 두 개의 특정 숫자 비교.NET Framework의 버전 간에 변경 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>If two <ph id="ph1">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> values are tested for equality by calling the <ph id="ph2">&lt;xref:System.Double.Equals%2A&gt;</ph> method, the method returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">두 개 <ph id="ph1">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> 값을 호출 하 여 같은지 테스트할는 <ph id="ph2">&lt;xref:System.Double.Equals%2A&gt;</ph> 메서드, 메서드에 반환 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>However, if two <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> values are tested for equality by using the equality operator, the operator returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">그러나 두 개 <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> 연산자 반환 값을 같음 연산자를 사용 하 여 같은지 테스트할 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>When you want to determine whether the value of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> is not a number (NaN), an alternative is to call the <ph id="ph2">&lt;xref:System.Double.IsNaN%2A&gt;</ph> method.</source>
          <target state="translated">확인 하려면 여부의 값은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> (NaN) 숫자가 아니거나 대신 호출 하는 것는 <ph id="ph2">&lt;xref:System.Double.IsNaN%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>Compiler overload resolution may account for an apparent difference in the behavior of the two <ph id="ph1">&lt;see cref="M:System.Double.Equals(System.Object)" /&gt;</ph> method overloads.</source>
          <target state="translated">컴파일러 오버 로드 확인의 두 동작에는 명백한 차이 고려 될 수 있습니다 <ph id="ph1">&lt;see cref="M:System.Double.Equals(System.Object)" /&gt;</ph> 메서드 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>If an implicit conversion between the <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> argument and a <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> is defined and the argument is not typed as an <ph id="ph3">&lt;see cref="T:System.Object" /&gt;</ph>, compilers may perform an implicit conversion and call the <ph id="ph4">&lt;see cref="M:System.Double.Equals(System.Double)" /&gt;</ph> method.</source>
          <target state="translated">경우 간에 암시적 변환이 <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 인수 및 <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> 정의 및 인수 인수로 형식화 되지 않습니다는 <ph id="ph3">&lt;see cref="T:System.Object" /&gt;</ph>, 컴파일러는 암시적 변환 및 호출 수행할 수 있습니다는 <ph id="ph4">&lt;see cref="M:System.Double.Equals(System.Double)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>Otherwise, they call the <ph id="ph1">&lt;see cref="M:System.Double.Equals(System.Object)" /&gt;</ph> method, which always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> if its <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> argument is not a <ph id="ph4">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">호출 그렇지 않은 경우는 <ph id="ph1">&lt;see cref="M:System.Double.Equals(System.Object)" /&gt;</ph> 메서드는 항상 반환 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 경우 해당 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> 인수가 <ph id="ph4">&lt;see cref="T:System.Double" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>The following example illustrates the difference in behavior between the two method overloads.</source>
          <target state="translated">다음 예제에서는 두 개의 메서드 오버 로드 간의 동작 차이 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Double)">
          <source>In the case of all primitive numeric types except for <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> and in C#, the first comparison returns <ph id="ph2">&lt;see langword="true" /&gt;</ph> because the compiler automatically performs a widening conversion and calls the <ph id="ph3">&lt;see cref="M:System.Double.Equals(System.Double)" /&gt;</ph> method, whereas the second comparison returns <ph id="ph4">&lt;see langword="false" /&gt;</ph> because the compiler calls the <ph id="ph5">&lt;see cref="M:System.Double.Equals(System.Object)" /&gt;</ph> method.</source>
          <target state="translated">제외한 모든 기본 숫자 형식의 경우 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> C#에서는 첫 번째 비교 반환 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 컴파일러가 확대 변환 및 호출에 자동으로 수행 하기 때문에 <ph id="ph3">&lt;see cref="M:System.Double.Equals(System.Double)" /&gt;</ph> 메서드를 반면 두 번째 비교 반환 <ph id="ph4">&lt;see langword="false" /&gt;</ph> 컴파일러를 호출 하기 때문에 <ph id="ph5">&lt;see cref="M:System.Double.Equals(System.Object)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Double.Equals(System.Object)">
          <source>An object to compare with this instance.</source>
          <target state="translated">이 인스턴스와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Double.Equals(System.Object)">
          <source>Returns a value indicating whether this instance is equal to a specified object.</source>
          <target state="translated">이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Double.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is an instance of <ph id="ph3">&lt;see cref="T:System.Double" /&gt;</ph> and equals the value of this instance; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph>의 인스턴스이고 이 인스턴스의 값과 같으면 <ph id="ph3">&lt;see cref="T:System.Double" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> 값 나타날 수 있는 두 값의 정밀도 차이 때문에 주의 해야 메서드를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>The following example reports that the <ph id="ph1">&lt;xref:System.Double&gt;</ph> value .3333 and the <ph id="ph2">&lt;xref:System.Double&gt;</ph> returned by dividing 1 by 3 are unequal.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Double&gt;</ph> .3333 값 및 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 분할 하 여 반환 된 1을 3 같지 않습니다.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>For alternatives to calling the <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> method, see the documentation for the <ph id="ph2">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph> overload.</source>
          <target state="translated">호출에 대 한 대안에 대 한는 <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> 메서드에 대 한 설명서를 참조는 <ph id="ph2">&lt;xref:System.Double.Equals%28System.Double%29&gt;</ph> 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>Because <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> defines the minimum expression of a positive value whose range is near zero, the margin of difference between two similar values must be greater than <ph id="ph2">&lt;xref:System.Double.Epsilon&gt;</ph>.</source>
          <target state="translated">때문에 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph> 최소 식을 정의 합니다. 해당 범위는 0에 가까운 양수 값의 유사한 두 값 사이의 차이 보다 커야 <ph id="ph2">&lt;xref:System.Double.Epsilon&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>Typically, it is many times greater than <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph>.</source>
          <target state="translated">일반적으로 여러 번 보다 크면 <ph id="ph1">&lt;xref:System.Double.Epsilon&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</source>
          <target state="translated">초과 문서화 된 정밀도 부동 소수점 숫자의 정밀도 특정 구현 및.NET Framework의 버전입니다.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</source>
          <target state="translated">따라서 전체 자릿수는 수의 내부 표현 변경 될 수 있으므로 두 개의 특정 숫자 비교.NET Framework의 버전 간에 변경 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>If two <ph id="ph1">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> values are tested for equality by calling the <ph id="ph2">&lt;xref:System.Double.Equals%2A&gt;</ph> method, the method returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated">두 개 <ph id="ph1">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> 값을 호출 하 여 같은지 테스트할는 <ph id="ph2">&lt;xref:System.Double.Equals%2A&gt;</ph> 메서드, 메서드에 반환 <ph id="ph3">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>However, if two <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> values are tested for equality by using the equality operator, the operator returns <ph id="ph2">`false`</ph>.</source>
          <target state="translated">그러나 두 개 <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> 연산자 반환 값을 같음 연산자를 사용 하 여 같은지 테스트할 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>When you want to determine whether the value of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> is not a number (NaN), an alternative is to call the <ph id="ph2">&lt;xref:System.Double.IsNaN%2A&gt;</ph> method.</source>
          <target state="translated">확인 하려면 여부의 값은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> (NaN) 숫자가 아니거나 대신 호출 하는 것는 <ph id="ph2">&lt;xref:System.Double.IsNaN%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>Compiler overload resolution may account for an apparent difference in the behavior of the two <ph id="ph1">&lt;see cref="M:System.Double.Equals(System.Object)" /&gt;</ph> method overloads.</source>
          <target state="translated">컴파일러 오버 로드 확인의 두 동작에는 명백한 차이 고려 될 수 있습니다 <ph id="ph1">&lt;see cref="M:System.Double.Equals(System.Object)" /&gt;</ph> 메서드 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>If an implicit conversion between the <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> argument and a <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> is defined and the argument is not typed as an <ph id="ph3">&lt;see cref="T:System.Object" /&gt;</ph>, compilers may perform an implicit conversion and call the <ph id="ph4">&lt;see cref="M:System.Double.Equals(System.Double)" /&gt;</ph> method.</source>
          <target state="translated">경우 간에 암시적 변환이 <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 인수 및 <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> 정의 및 인수 인수로 형식화 되지 않습니다는 <ph id="ph3">&lt;see cref="T:System.Object" /&gt;</ph>, 컴파일러는 암시적 변환 및 호출 수행할 수 있습니다는 <ph id="ph4">&lt;see cref="M:System.Double.Equals(System.Double)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>Otherwise, they call the <ph id="ph1">&lt;see cref="M:System.Double.Equals(System.Object)" /&gt;</ph> method, which always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph> if its <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> argument is not a <ph id="ph4">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">호출 그렇지 않은 경우는 <ph id="ph1">&lt;see cref="M:System.Double.Equals(System.Object)" /&gt;</ph> 메서드는 항상 반환 <ph id="ph2">&lt;see langword="false" /&gt;</ph> 경우 해당 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> 인수가 <ph id="ph4">&lt;see cref="T:System.Double" /&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>The following example illustrates the difference in behavior between the two method overloads.</source>
          <target state="translated">다음 예제에서는 두 개의 메서드 오버 로드 간의 동작 차이 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Equals(System.Object)">
          <source>In the case of all primitive numeric types except for <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> and in C#, the first comparison returns <ph id="ph2">&lt;see langword="true" /&gt;</ph> because the compiler automatically performs a widening conversion and calls the <ph id="ph3">&lt;see cref="M:System.Double.Equals(System.Double)" /&gt;</ph> method, whereas the second comparison returns <ph id="ph4">&lt;see langword="false" /&gt;</ph> because the compiler calls the <ph id="ph5">&lt;see cref="M:System.Double.Equals(System.Object)" /&gt;</ph> method.</source>
          <target state="translated">제외한 모든 기본 숫자 형식의 경우 <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph> C#에서는 첫 번째 비교 반환 <ph id="ph2">&lt;see langword="true" /&gt;</ph> 컴파일러가 확대 변환 및 호출에 자동으로 수행 하기 때문에 <ph id="ph3">&lt;see cref="M:System.Double.Equals(System.Double)" /&gt;</ph> 메서드를 반면 두 번째 비교 반환 <ph id="ph4">&lt;see langword="false" /&gt;</ph> 컴파일러를 호출 하기 때문에 <ph id="ph5">&lt;see cref="M:System.Double.Equals(System.Object)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Double.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">이 인스턴스의 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Double.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">부호 있는 32비트 정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Double.GetTypeCode">
          <source>Returns the <ph id="ph1">&lt;see cref="T:System.TypeCode" /&gt;</ph> for value type <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TypeCode" /&gt;</ph> 값 형식에 대한 <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph>를 반환합니다.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Double.GetTypeCode">
          <source>The enumerated constant, <ph id="ph1">&lt;see cref="F:System.TypeCode.Double" /&gt;</ph>.</source>
          <target state="translated">열거형 상수인 <ph id="ph1">&lt;see cref="F:System.TypeCode.Double" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Double.IsInfinity(System.Double)">
          <source>A double-precision floating-point number.</source>
          <target state="translated">배정밀도 부동 소수점 숫자입니다.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Double.IsInfinity(System.Double)">
          <source>Returns a value indicating whether the specified number evaluates to negative or positive infinity</source>
          <target state="translated">지정된 숫자가 음의 무한대로 계산되는지 양의 무한대로 계산되는지를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Double.IsInfinity(System.Double)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="d" /&gt;</ph> evaluates to <ph id="ph3">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> or <ph id="ph4">&lt;see cref="F:System.Double.NegativeInfinity" /&gt;</ph>; otherwise, <ph id="ph5">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="d" /&gt;</ph>가 <ph id="ph3">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph> 또는 <ph id="ph4">&lt;see cref="F:System.Double.NegativeInfinity" /&gt;</ph>로 계산되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph5">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.IsInfinity(System.Double)">
          <source>Floating-point operations return <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> or <ph id="ph2">&lt;xref:System.Double.NegativeInfinity&gt;</ph> to signal an overflow condition.</source>
          <target state="translated">부동 소수점 <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Double.NegativeInfinity&gt;</ph> 오버플로 조건을 신호를 보내 합니다.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.IsInfinity(System.Double)">
          <source>The following code example illustrates the use of <ph id="ph1">&lt;xref:System.Double.IsInfinity%2A&gt;</ph>:</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Double.IsInfinity%2A&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Double.IsNaN(System.Double)">
          <source>A double-precision floating-point number.</source>
          <target state="translated">배정밀도 부동 소수점 숫자입니다.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Double.IsNaN(System.Double)">
          <source>Returns a value that indicates whether the specified value is not a number (<ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph>).</source>
          <target state="translated">지정된 값이 숫자가 아닌지(<ph id="ph1">&lt;see cref="F:System.Double.NaN" /&gt;</ph>) 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Double.IsNaN(System.Double)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="d" /&gt;</ph> evaluates to <ph id="ph3">&lt;see cref="F:System.Double.NaN" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="d" /&gt;</ph>가 <ph id="ph3">&lt;see cref="F:System.Double.NaN" /&gt;</ph>으로 계산되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.IsNaN(System.Double)">
          <source>Floating-point operations return <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> to signal that that result of the operation is undefined.</source>
          <target state="translated">부동 소수점 <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> 신호를 보내 해당 연산의 결과가 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.IsNaN(System.Double)">
          <source>For example, dividing 0.0 by 0.0 results in <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph>.</source>
          <target state="translated">예를 들어 0.0으로 0.0 구분으로 인해 <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.IsNaN(System.Double)">
          <source><ph id="ph1">&lt;xref:System.Double.IsNaN%2A&gt;</ph> returns <ph id="ph2">`false`</ph> if a <ph id="ph3">&lt;xref:System.Double&gt;</ph> value is either <ph id="ph4">&lt;xref:System.Double.PositiveInfinity&gt;</ph> or <ph id="ph5">&lt;xref:System.Double.NegativeInfinity&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.IsNaN%2A&gt;</ph> 반환 <ph id="ph2">`false`</ph> 경우는 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 값 <ph id="ph4">&lt;xref:System.Double.PositiveInfinity&gt;</ph> 또는 <ph id="ph5">&lt;xref:System.Double.NegativeInfinity&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.IsNaN(System.Double)">
          <source>To test for these values, use the <ph id="ph1">&lt;xref:System.Double.IsInfinity%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Double.IsPositiveInfinity%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Double.IsNegativeInfinity%2A&gt;</ph> methods.</source>
          <target state="translated">이러한 값을 테스트 하려면는 <ph id="ph1">&lt;xref:System.Double.IsInfinity%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Double.IsPositiveInfinity%2A&gt;</ph>, 및 <ph id="ph3">&lt;xref:System.Double.IsNegativeInfinity%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.IsNaN(System.Double)">
          <source>The following code example illustrates the use of <ph id="ph1">&lt;xref:System.Double.IsNaN%2A&gt;</ph>:</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Double.IsNaN%2A&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Double.IsNegativeInfinity(System.Double)">
          <source>A double-precision floating-point number.</source>
          <target state="translated">배정밀도 부동 소수점 숫자입니다.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Double.IsNegativeInfinity(System.Double)">
          <source>Returns a value indicating whether the specified number evaluates to negative infinity.</source>
          <target state="translated">지정된 숫자가 음의 무한대로 계산되는지를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Double.IsNegativeInfinity(System.Double)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="d" /&gt;</ph> evaluates to <ph id="ph3">&lt;see cref="F:System.Double.NegativeInfinity" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="d" /&gt;</ph>가 <ph id="ph3">&lt;see cref="F:System.Double.NegativeInfinity" /&gt;</ph>으로 계산되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.IsNegativeInfinity(System.Double)">
          <source>Floating-point operations return <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> to signal an overflow condition.</source>
          <target state="translated">부동 소수점 <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph> 오버플로 조건을 신호를 보내 합니다.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.IsNegativeInfinity(System.Double)">
          <source>The following code example illustrates the use of <ph id="ph1">&lt;xref:System.Double.IsNegativeInfinity%2A&gt;</ph>:</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Double.IsNegativeInfinity%2A&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Double.IsPositiveInfinity(System.Double)">
          <source>A double-precision floating-point number.</source>
          <target state="translated">배정밀도 부동 소수점 숫자입니다.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Double.IsPositiveInfinity(System.Double)">
          <source>Returns a value indicating whether the specified number evaluates to positive infinity.</source>
          <target state="translated">지정된 숫자가 양의 무한대로 계산되는지를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Double.IsPositiveInfinity(System.Double)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="d" /&gt;</ph> evaluates to <ph id="ph3">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="d" /&gt;</ph>가 <ph id="ph3">&lt;see cref="F:System.Double.PositiveInfinity" /&gt;</ph>으로 계산되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.IsPositiveInfinity(System.Double)">
          <source>Floating-point operations return <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> to signal an overflow condition.</source>
          <target state="translated">부동 소수점 <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> 오버플로 조건을 신호를 보내 합니다.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.IsPositiveInfinity(System.Double)">
          <source>The following code example illustrates the use of <ph id="ph1">&lt;xref:System.Double.IsPositiveInfinity%2A&gt;</ph>:</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Double.IsPositiveInfinity%2A&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="F:System.Double.MaxValue">
          <source>Represents the largest possible value of a <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>의 가능한 최대값을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="F:System.Double.MaxValue">
          <source>This field is constant.</source>
          <target state="translated">이 필드는 상수입니다.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.MaxValue">
          <source>The value of this constant is positive 1.7976931348623157E+308.</source>
          <target state="translated">이 상수의 값은 양의 1.7976931348623157 e + 308입니다.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.MaxValue">
          <source>The result of an operation that exceeds <ph id="ph1">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph> is <ph id="ph2">&lt;xref:System.Double.PositiveInfinity?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">초과 하는 작업의 결과 <ph id="ph1">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph> 은 <ph id="ph2">&lt;xref:System.Double.PositiveInfinity?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.MaxValue">
          <source>In the following example, <ph id="ph1">&lt;xref:System.Double.PositiveInfinity?displayProperty=nameWithType&gt;</ph> results from addition, multiplication, and exponentiation operations when the result exceeds <ph id="ph2">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">다음 예에서 <ph id="ph1">&lt;xref:System.Double.PositiveInfinity?displayProperty=nameWithType&gt;</ph> 결과가 초과 하면 더하기, 곱하기 및 지 수 연산에서 결과 <ph id="ph2">&lt;xref:System.Double.MaxValue?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.MaxValue">
          <source>The following code example illustrates the use of <ph id="ph1">&lt;xref:System.Double.MaxValue&gt;</ph>:</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Double.MaxValue&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="F:System.Double.MinValue">
          <source>Represents the smallest possible value of a <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>의 최소값을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="F:System.Double.MinValue">
          <source>This field is constant.</source>
          <target state="translated">이 필드는 상수입니다.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.MinValue">
          <source>The value of this constant is negative 1.7976931348623157E+308.</source>
          <target state="translated">이 상수의 값은 음수 1.7976931348623157 e + 308입니다.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.MinValue">
          <source>The result of an operation that is less than <ph id="ph1">&lt;xref:System.Double.MinValue?displayProperty=nameWithType&gt;</ph> is <ph id="ph2">&lt;xref:System.Double.NegativeInfinity?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">작업의 결과 보다 작은 <ph id="ph1">&lt;xref:System.Double.MinValue?displayProperty=nameWithType&gt;</ph> 은 <ph id="ph2">&lt;xref:System.Double.NegativeInfinity?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.MinValue">
          <source>In the following example, <ph id="ph1">&lt;xref:System.Double.NegativeInfinity?displayProperty=nameWithType&gt;</ph> results from subtraction and multiplication operations when the result is less than <ph id="ph2">&lt;xref:System.Double.MinValue?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">다음 예에서 <ph id="ph1">&lt;xref:System.Double.NegativeInfinity?displayProperty=nameWithType&gt;</ph> 결과가 빼기 및 곱하기 작업에서 결과 보다 작은 <ph id="ph2">&lt;xref:System.Double.MinValue?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.MinValue">
          <source>The following code example illustrates the use of <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph>:</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="F:System.Double.NaN">
          <source>Represents a value that is not a number (<ph id="ph1">&lt;see langword="NaN" /&gt;</ph>).</source>
          <target state="translated">숫자가 아닌 값을 나타냅니다(<ph id="ph1">&lt;see langword="NaN" /&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="F:System.Double.NaN">
          <source>This field is constant.</source>
          <target state="translated">이 필드는 상수입니다.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.NaN">
          <source>A method or operator returns <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> when the result of an operation is undefined.</source>
          <target state="translated">메서드 또는 연산자 반환 <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> 때 연산의 결과가 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.NaN">
          <source>For example, the result of dividing zero by zero is <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph>, as the following example shows.</source>
          <target state="translated">예를 들어 0으로 나눈 결과 <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph>다음 예제와 같이 합니다.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.NaN">
          <source>(But note that dividing a non-zero number by zero returns either <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> or <ph id="ph2">&lt;xref:System.Double.NegativeInfinity&gt;</ph>, depending on the sign of the divisor.)</source>
          <target state="translated">(하지만 분모가 0이 아닌 숫자를 0을 반환 하거나 <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Double.NegativeInfinity&gt;</ph>제수의 부호에 따라.)</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.NaN">
          <source>In addition, a method call with a <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> value or an operation on a <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph> value returns <ph id="ph3">&lt;xref:System.Double.NaN&gt;</ph>, as the following example shows.</source>
          <target state="translated">메서드 호출 또한는 <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph> 값 또는 작업에는 <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph> 반환 값 <ph id="ph3">&lt;xref:System.Double.NaN&gt;</ph>다음 예제와 같이 합니다.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.NaN">
          <source>Use the <ph id="ph1">&lt;xref:System.Double.IsNaN%2A&gt;</ph> method to determine whether a value is not a number.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.Double.IsNaN%2A&gt;</ph> 메서드 값을 숫자 인지 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.NaN">
          <source>The <ph id="ph1">&lt;xref:System.Double.op_Equality%2A&gt;</ph> operator considers two <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph> values to be unequal to one another.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.op_Equality%2A&gt;</ph> 두 연산자 고려 <ph id="ph2">&lt;xref:System.Double.NaN&gt;</ph> 를 서로 동일 하지 않은 값입니다.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.NaN">
          <source>In general, <ph id="ph1">&lt;xref:System.Double&gt;</ph> operators cannot be used to compare <ph id="ph2">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> with other <ph id="ph3">&lt;xref:System.Double&gt;</ph> values, although comparison methods (such as <ph id="ph4">&lt;xref:System.Double.Equals%2A&gt;</ph> and <ph id="ph5">&lt;xref:System.Double.CompareTo%2A&gt;</ph>) can.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 비교 연산자를 사용할 수 없습니다 <ph id="ph2">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> 다른 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 있지만 값 비교 방법 (같은 <ph id="ph4">&lt;xref:System.Double.Equals%2A&gt;</ph> 및 <ph id="ph5">&lt;xref:System.Double.CompareTo%2A&gt;</ph>) 수 있습니다.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.NaN">
          <source>The following example illustrates the difference in behavior between <ph id="ph1">&lt;xref:System.Double&gt;</ph> comparison operators and methods.</source>
          <target state="translated">다음 예제에서는 간의 동작 차이 보여 줍니다. <ph id="ph1">&lt;xref:System.Double&gt;</ph> 비교 연산자와 메서드.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.NaN">
          <source>The following example illustrates the use of <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph>:</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.Double.NaN&gt;</ph>의 사용 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="F:System.Double.NegativeInfinity">
          <source>Represents negative infinity.</source>
          <target state="translated">음의 무한대를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="F:System.Double.NegativeInfinity">
          <source>This field is constant.</source>
          <target state="translated">이 필드는 상수입니다.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.NegativeInfinity">
          <source>The value of this constant is the result of dividing a negative number by zero.</source>
          <target state="translated">이 상수의 값은 음수 0으로 나눈 결과입니다.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.NegativeInfinity">
          <source>This constant is returned when the result of an operation is less than <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph>.</source>
          <target state="translated">작업의 결과이 상수가 반환은 보다 작은 <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.NegativeInfinity">
          <source>Use <ph id="ph1">&lt;xref:System.Double.IsNegativeInfinity%2A&gt;</ph> to determine whether a value evaluates to negative infinity.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Double.IsNegativeInfinity%2A&gt;</ph> 하는 값이 음의 무한대로 계산 되는지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.NegativeInfinity">
          <source>The following code example illustrates the use of <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph>:</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Double.NegativeInfinity&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Double.op_Equality(System.Double,System.Double)">
          <source>The first value to compare.</source>
          <target state="translated">비교할 첫 번째 값입니다.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Double.op_Equality(System.Double,System.Double)">
          <source>The second value to compare.</source>
          <target state="translated">비교할 두 번째 값입니다.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Double.op_Equality(System.Double,System.Double)">
          <source>Returns a value that indicates whether two specified <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values are equal.</source>
          <target state="translated">지정된 두 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값이 같은지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Double.op_Equality(System.Double,System.Double)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph> are equal; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="left" /&gt;</ph>과 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>가 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.op_Equality(System.Double,System.Double)">
          <source>The <ph id="ph1">&lt;xref:System.Double.op_Equality%2A&gt;</ph> method defines the equality operator for <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.op_Equality%2A&gt;</ph> 메서드 정의 대 한 같음 연산자 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.op_Equality(System.Double,System.Double)">
          <source>If two <ph id="ph1">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> values are tested for equality by using the equality operator, the result is <ph id="ph2">`false`</ph>; two <ph id="ph3">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> values are not considered equal.</source>
          <target state="translated">두 개 <ph id="ph1">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> 값을 같음 연산자를 사용 하 여 같은지 테스트할 이면 결과 <ph id="ph2">`false`</ph>두; <ph id="ph3">&lt;xref:System.Double.NaN?displayProperty=nameWithType&gt;</ph> 값 같은 간주 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.op_Equality(System.Double,System.Double)">
          <source>If they are tested for equality by calling the <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> method, the result is <ph id="ph2">`true`</ph>.</source>
          <target state="translated">확장 저장 프로시저를 호출 하 여 같은지 테스트 되는 경우는 <ph id="ph1">&lt;xref:System.Double.Equals%2A&gt;</ph> 메서드, 결과 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.op_Equality(System.Double,System.Double)">
          <source>When you want to determine whether the value of a <ph id="ph1">&lt;xref:System.Double&gt;</ph> is not a number (NaN), an alternative is to call the <ph id="ph2">&lt;xref:System.Double.IsNaN%2A&gt;</ph> method.</source>
          <target state="translated">확인 하려면 여부의 값은 <ph id="ph1">&lt;xref:System.Double&gt;</ph> (NaN) 숫자가 아니거나 대신 호출 하는 것는 <ph id="ph2">&lt;xref:System.Double.IsNaN%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="M:System.Double.op_GreaterThan(System.Double,System.Double)">
          <source>The first value to compare.</source>
          <target state="translated">비교할 첫 번째 값입니다.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Double.op_GreaterThan(System.Double,System.Double)">
          <source>The second value to compare.</source>
          <target state="translated">비교할 두 번째 값입니다.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Double.op_GreaterThan(System.Double,System.Double)">
          <source>Returns a value that indicates whether a specified <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value is greater than another specified <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값이 지정된 다른 <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> 값보다 큰지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Double.op_GreaterThan(System.Double,System.Double)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is greater than <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이 <ph id="ph2">&lt;paramref name="left" /&gt;</ph>보다 크면 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.op_GreaterThan(System.Double,System.Double)">
          <source>The <ph id="ph1">&lt;xref:System.Double.op_GreaterThan%2A&gt;</ph> method defines the operation of the greater-than operator for <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.op_GreaterThan%2A&gt;</ph> 큼의 작업을 정의 하는 방법-에 대 한 연산자 보다 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
          <source>The first value to compare.</source>
          <target state="translated">비교할 첫 번째 값입니다.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
          <source>The second value to compare.</source>
          <target state="translated">비교할 두 번째 값입니다.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
          <source>Returns a value that indicates whether a specified <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value is greater than or equal to another specified <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값이 지정된 다른 <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> 값보다 크거나 같은지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is greater than or equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="left" /&gt;</ph>가 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>보다 크거나 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
          <source>The <ph id="ph1">&lt;xref:System.Double.op_GreaterThanOrEqual%2A&gt;</ph> method defines the operation of the greater-than-or-equal operator for <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.op_GreaterThanOrEqual%2A&gt;</ph> 메서드 정의 대 한 또는 같음 연산자의 연산을 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Double.op_Inequality(System.Double,System.Double)">
          <source>The first value to compare.</source>
          <target state="translated">비교할 첫 번째 값입니다.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" uid="M:System.Double.op_Inequality(System.Double,System.Double)">
          <source>The second value to compare.</source>
          <target state="translated">비교할 두 번째 값입니다.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" uid="M:System.Double.op_Inequality(System.Double,System.Double)">
          <source>Returns a value that indicates whether two specified <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values are not equal.</source>
          <target state="translated">지정된 두 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값이 같지 않은지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" uid="M:System.Double.op_Inequality(System.Double,System.Double)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph> are not equal; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="left" /&gt;</ph>과 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>가 다르면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.op_Inequality(System.Double,System.Double)">
          <source>The <ph id="ph1">&lt;xref:System.Double.op_Inequality%2A&gt;</ph> method defines the inequality operator for <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.op_Inequality%2A&gt;</ph> 메서드 정의 대 한 같지 않음 연산자 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Double.op_LessThan(System.Double,System.Double)">
          <source>The first value to compare.</source>
          <target state="translated">비교할 첫 번째 값입니다.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Double.op_LessThan(System.Double,System.Double)">
          <source>The second value to compare.</source>
          <target state="translated">비교할 두 번째 값입니다.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Double.op_LessThan(System.Double,System.Double)">
          <source>Returns a value that indicates whether a specified <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value is less than another specified <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값이 지정된 다른 <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> 값보다 작은지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Double.op_LessThan(System.Double,System.Double)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is less than <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="left" /&gt;</ph>가 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>보다 작으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.op_LessThan(System.Double,System.Double)">
          <source>The <ph id="ph1">&lt;xref:System.Double.op_LessThan%2A&gt;</ph> method defines the operation of the less-than operator for <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.op_LessThan%2A&gt;</ph> 메서드 작음 연산을 정의-에 대 한 연산자 보다 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
          <source>The first value to compare.</source>
          <target state="translated">비교할 첫 번째 값입니다.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
          <source>The second value to compare.</source>
          <target state="translated">비교할 두 번째 값입니다.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
          <source>Returns a value that indicates whether a specified <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value is less than or equal to another specified <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">지정된 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값이 지정된 다른 <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> 값보다 작거나 같은지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> is less than or equal to <ph id="ph3">&lt;paramref name="right" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="left" /&gt;</ph>가 <ph id="ph3">&lt;paramref name="right" /&gt;</ph>보다 작거나 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
          <source>The <ph id="ph1">&lt;xref:System.Double.op_LessThanOrEqual%2A&gt;</ph> method defines the operation of the less-than-or-equal operator for <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.op_LessThanOrEqual%2A&gt;</ph> 작거나 같음 연산자에 대 한 작업을 정의 하는 메서드 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="T:System.Double">
          <source>Converts the string representation of a number to its double-precision floating-point number equivalent.</source>
          <target state="translated">숫자의 문자열 표현을 같은 값의 배정밀도 부동 소수점 숫자로 변환합니다.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String)">
          <source>A string that contains a number to convert.</source>
          <target state="translated">변환할 숫자가 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String)">
          <source>Converts the string representation of a number to its double-precision floating-point number equivalent.</source>
          <target state="translated">숫자의 문자열 표현을 같은 값의 배정밀도 부동 소수점 숫자로 변환합니다.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String)">
          <source>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <ph id="ph1">&lt;paramref name="s" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>에 지정된 숫자 값 또는 기호에 해당하는 배정밀도 부동 소수점 숫자입니다.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>The <ph id="ph1">`s`</ph> parameter can contain the current culture's <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType&gt;</ph>, or a string of the form:</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수는 현재 문화권의 포함 될 수 있습니다 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType&gt;</ph>, 또는 형식의 문자열:</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>[<bpt id="p1">*</bpt>ws<ept id="p1">*</ept>][<bpt id="p2">*</bpt>sign<ept id="p2">*</ept>][<bpt id="p3">*</bpt>integral-digits<ept id="p3">*</ept>[<bpt id="p4">*</bpt>,<ept id="p4">*</ept>]]<bpt id="p5">*</bpt>integral-digits<ept id="p5">*</ept>[<bpt id="p6">*</bpt>.<ept id="p6">*</ept>[<bpt id="p7">*</bpt>fractional-digits<ept id="p7">*</ept>]][E[<bpt id="p8">*</bpt>sign<ept id="p8">*</ept>]<bpt id="p9">*</bpt>exponential-digits<ept id="p9">*</ept>][<bpt id="p10">*</bpt>ws<ept id="p10">*</ept>]</source>
          <target state="translated">[<bpt id="p1">*</bpt>ws<ept id="p1">*</ept>][<bpt id="p2">*</bpt>sign<ept id="p2">*</ept>][<bpt id="p3">*</bpt>integral-digits<ept id="p3">*</ept>[<bpt id="p4">*</bpt>,<ept id="p4">*</ept>]]<bpt id="p5">*</bpt>integral-digits<ept id="p5">*</ept>[<bpt id="p6">*</bpt>.<ept id="p6">*</ept>[<bpt id="p7">*</bpt>fractional-digits<ept id="p7">*</ept>]][E[<bpt id="p8">*</bpt>sign<ept id="p8">*</ept>]<bpt id="p9">*</bpt>exponential-digits<ept id="p9">*</ept>][<bpt id="p10">*</bpt>ws<ept id="p10">*</ept>]</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>Elements in square brackets ([ and ]) are optional.</source>
          <target state="translated">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>The following table describes each element.</source>
          <target state="translated">다음 표에서 각 요소에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>Element</source>
          <target state="translated">요소</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>A series of white-space characters.</source>
          <target state="translated">일련의 공백 문자입니다.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>A negative sign symbol (-) or a positive sign symbol (+).</source>
          <target state="translated">음수 부호 기호 (-) 또는 더하기 기호 (+) 기호입니다.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>Only a leading sign can be used.</source>
          <target state="translated">선행 기호만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>A series of digits ranging from 0 to 9 that specify the integral part of the number.</source>
          <target state="translated">일련의 숫자 0에서 하는 9 사이의 숫자의 정수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>Runs of <bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept> can be partitioned by a group-separator symbol.</source>
          <target state="translated">실행 <bpt id="p1">*</bpt>정수 계열 자릿수<ept id="p1">*</ept> 그룹 구분 기호로 분할할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>For example, in some cultures a comma (,) separates groups of thousands.</source>
          <target state="translated">예를 들어, 일부 문화권 쉼표 (,) 개의 그룹을 구분 합니다.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>The <bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept> element can be absent if the string contains the <bpt id="p2">*</bpt>fractional-digits<ept id="p2">*</ept> element.</source>
          <target state="translated"><bpt id="p1">*</bpt>정수 계열 숫자<ept id="p1">*</ept> 요소 문자열일 수 없는 경우에는 포함 되어는 <bpt id="p2">*</bpt>소수 자릿수<ept id="p2">*</ept> 요소입니다.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>,</source>
          <target state="translated">,</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>A culture-specific thousands separator symbol.</source>
          <target state="translated">Culture 별 1000 단위 구분 기호입니다.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>.</source>
          <target state="translated">이어야 합니다.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>A culture-specific decimal point symbol.</source>
          <target state="translated">Culture 별 소수점 기호입니다.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>A series of digits ranging from 0 to 9 that specify the fractional part of the number.</source>
          <target state="translated">일련의 숫자 0에서 하는 9 사이의 숫자의 소수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>E</source>
          <target state="translated">E</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</source>
          <target state="translated">"E" 또는 "E" 문자 값은 지 수 (과학적 표기법) 표기법으로 표현 됨을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>A series of digits ranging from 0 to 9 that specify an exponent.</source>
          <target state="translated">일련의 0에서 지 수를 지정 하는 9 사이의 숫자입니다.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>The <ph id="ph1">`s`</ph> parameter is interpreted using a combination of the <ph id="ph2">&lt;xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType&gt;</ph> flags.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수를 조합 하 여 해석 되는 <ph id="ph2">&lt;xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>This means that white space and thousands separators are allowed, for example, while currency symbols are not.</source>
          <target state="translated">즉, 해당 공백과 1000 상태인 통화 기호, 구분 기호 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>For finer control over which style elements are permitted in <ph id="ph1">`s`</ph> for the parse operation to succeed, call the <ph id="ph2">&lt;xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph> or the <ph id="ph3">&lt;xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">에 대 한 보다 세밀 하 게 제어 요소가 허용 되는 스타일 <ph id="ph1">`s`</ph> 구문 분석 작업이 성공 하기 위해 호출 된 <ph id="ph2">&lt;xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>The <ph id="ph1">`s`</ph> parameter is interpreted using the formatting information in a <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that is initialized for the current thread culture.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수에서 서식 지정 정보를 사용 하 여 해석 됩니다는 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 현재 스레드 문화권에 따라 초기화 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>To parse a string using the formatting information of some other culture, call the <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">다른 문화권의 서식 지정 정보를 사용 하는 문자열을 구문 분석 하려면 호출는 <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>Ordinarily, if you pass the <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> method a string that is created by calling the <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> method, the original <ph id="ph3">&lt;xref:System.Double&gt;</ph> value is returned.</source>
          <target state="translated">일반적으로 전달 하는 경우는 <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> 메서드를 호출 하 여 만든 문자열에는 <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> 메서드, 원래 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 값이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>However, because of a loss of precision, the values may not be equal.</source>
          <target state="translated">그러나 정밀도 손실 때문에 값 아니어야 동일 합니다.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>In addition, attempting to parse the string representation of either <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph> or <ph id="ph2">&lt;xref:System.Double.MaxValue&gt;</ph> throws an <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph>, as the following example illustrates.</source>
          <target state="translated">또한의 문자열 표현을 구문 분석 하려고 <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Double.MaxValue&gt;</ph> throw 한 <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph>다음 예제와 같이 합니다.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>If a separator is encountered in the <ph id="ph1">`s`</ph> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</source>
          <target state="translated">구분 기호에서 발견 되는 <ph id="ph1">`s`</ph> 분석 및 적용 가능한 통화 또는 숫자의 소수 하는 동안 매개 변수 및 그룹 구분 기호가 동일 합니다. 구문 분석 작업의 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>For more information about separators, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>.</source>
          <target state="translated">구분 기호에 대 한 자세한 내용은 참조 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%29&gt;</ph> method.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%29&gt;</ph> 메서드를 사용하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> does not represent a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>가 유효한 형식의 숫자를 나타내지 않는 경우</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>는 <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph>보다 작거나 <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>보다 큰 숫자를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>A string that contains a number to convert.</source>
          <target state="translated">변환할 숫자가 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>A bitwise combination of enumeration values that indicate the style elements that can be present in <bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>에 나타날 수 있는 스타일 요소를 나타내는 열거형 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>A typical value to specify is a combination of <ph id="ph1">&lt;see cref="F:System.Globalization.NumberStyles.Float" /&gt;</ph> combined with <ph id="ph2">&lt;see cref="F:System.Globalization.NumberStyles.AllowThousands" /&gt;</ph>.</source>
          <target state="translated">지정할 일반적인 값은 <ph id="ph2">&lt;see cref="F:System.Globalization.NumberStyles.AllowThousands" /&gt;</ph>와 결합되는 <ph id="ph1">&lt;see cref="F:System.Globalization.NumberStyles.Float" /&gt;</ph>의 조합입니다.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>Converts the string representation of a number in a specified style to its double-precision floating-point number equivalent.</source>
          <target state="translated">지정된 스타일의 숫자에 대한 문자열 표현을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <ph id="ph1">&lt;paramref name="s" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>에 지정된 숫자 값 또는 기호에 해당하는 배정밀도 부동 소수점 숫자입니다.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <ph id="ph1">`style`</ph> parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the <ph id="ph2">`s`</ph> parameter for the parse operation to succeed.</source>
          <target state="translated"><ph id="ph1">`style`</ph> 스타일 요소를 정의 하는 매개 변수 (공백, 1000 단위와 같은 구분 기호 및 통화 기호)에 허용 되는 <ph id="ph2">`s`</ph> 구문 분석 작업이 성공 하려면에 대 한 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>It must be a combination of bit flags from the <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumeration.</source>
          <target state="translated">비트 플래그의 조합 이어야 합니다는 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The following <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members are not supported:</source>
          <target state="translated">다음 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> 멤버가 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <ph id="ph1">`s`</ph> parameter can contain the current culture's <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, or <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수는 현재 문화권의 포함 될 수 있습니다 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, 또는 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>Depending on the value of <ph id="ph1">`style`</ph>, it can also take the form:</source>
          <target state="translated">값에 따라 <ph id="ph1">`style`</ph>, 형태를 취할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>[<bpt id="p1">*</bpt>ws<ept id="p1">*</ept>][<bpt id="p2">*</bpt><ph id="ph1">$</ph><ept id="p2">*</ept>][<bpt id="p3">*</bpt>sign<ept id="p3">*</ept>][<bpt id="p4">*</bpt>integral-digits<ept id="p4">*</ept>[<bpt id="p5">*</bpt>,<ept id="p5">*</ept>]]<bpt id="p6">*</bpt>integral-digits<ept id="p6">*</ept>[<bpt id="p7">*</bpt>.<ept id="p7">*</ept>[<bpt id="p8">*</bpt>fractional-digits<ept id="p8">*</ept>]][E[<bpt id="p9">*</bpt>sign<ept id="p9">*</ept>]<bpt id="p10">*</bpt>exponential-digits<ept id="p10">*</ept>][<bpt id="p11">*</bpt>ws<ept id="p11">*</ept>]</source>
          <target state="translated">[<bpt id="p1">*</bpt>ws<ept id="p1">*</ept>][<bpt id="p2">*</bpt><ph id="ph1">$</ph><ept id="p2">*</ept>][<bpt id="p3">*</bpt>sign<ept id="p3">*</ept>][<bpt id="p4">*</bpt>integral-digits<ept id="p4">*</ept>[<bpt id="p5">*</bpt>,<ept id="p5">*</ept>]]<bpt id="p6">*</bpt>integral-digits<ept id="p6">*</ept>[<bpt id="p7">*</bpt>.<ept id="p7">*</ept>[<bpt id="p8">*</bpt>fractional-digits<ept id="p8">*</ept>]][E[<bpt id="p9">*</bpt>sign<ept id="p9">*</ept>]<bpt id="p10">*</bpt>exponential-digits<ept id="p10">*</ept>][<bpt id="p11">*</bpt>ws<ept id="p11">*</ept>]</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>Elements in square brackets ([ and ]) are optional.</source>
          <target state="translated">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The following table describes each element.</source>
          <target state="translated">다음 표에서 각 요소에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>Element</source>
          <target state="translated">요소</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>A series of white-space characters.</source>
          <target state="translated">일련의 공백 문자입니다.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>White space can appear at the beginning of <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType&gt;</ph> flag, and it can appear at the end of <ph id="ph4">`s`</ph> if <ph id="ph5">`style`</ph> includes the <ph id="ph6">&lt;xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">맨 앞에 공백이 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType&gt;</ph> 의 끝에 있고, 나타날 수 있습니다 <ph id="ph4">`s`</ph> 경우 <ph id="ph5">`style`</ph> 포함는 <ph id="ph6">&lt;xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>A culture-specific currency symbol.</source>
          <target state="translated">Culture 별 통화 기호입니다.</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>Its position in the string is defined by the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType&gt;</ph> properties of the current culture.</source>
          <target state="translated">문자열에 해당 위치는 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType&gt;</ph> 현재 문화권의 속성입니다.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The current culture's currency symbol can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">현재 문화권의 통화 기호에 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>A negative sign symbol (-) or a positive sign symbol (+).</source>
          <target state="translated">음수 부호 기호 (-) 또는 더하기 기호 (+) 기호입니다.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The sign can appear at the beginning of <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType&gt;</ph> flag, and it can appear at the end of <ph id="ph4">`s`</ph> if <ph id="ph5">`style`</ph> includes the <ph id="ph6">&lt;xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">부호의 시작 부분에 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType&gt;</ph> 의 끝에 있고, 나타날 수 있습니다 <ph id="ph4">`s`</ph> 경우 <ph id="ph5">`style`</ph> 포함는 <ph id="ph6">&lt;xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>Parentheses can be used in <ph id="ph1">`s`</ph> to indicate a negative value if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">괄호를 사용할 수 있습니다 <ph id="ph1">`s`</ph> 경우 음수 값을 나타내는 데 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>A series of digits ranging from 0 to 9 that specify the integral part of the number.</source>
          <target state="translated">일련의 숫자 0에서 하는 9 사이의 숫자의 정수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept> element can be absent if the string contains the <bpt id="p2">*</bpt>fractional-digits<ept id="p2">*</ept> element.</source>
          <target state="translated"><bpt id="p1">*</bpt>정수 계열 숫자<ept id="p1">*</ept> 요소 문자열일 수 없는 경우에는 포함 되어는 <bpt id="p2">*</bpt>소수 자릿수<ept id="p2">*</ept> 요소입니다.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>,</source>
          <target state="translated">,</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>A culture-specific group separator.</source>
          <target state="translated">Culture 관련 그룹 구분 기호입니다.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The current culture's group separator symbol can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType&gt;</ph> flag</source>
          <target state="translated">현재 문화권의 그룹 구분 기호에 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType&gt;</ph> 플래그</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>.</source>
          <target state="translated">이어야 합니다.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>A culture-specific decimal point symbol.</source>
          <target state="translated">Culture 별 소수점 기호입니다.</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The current culture's decimal point symbol can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">에 현재 문화권의 소수점 기호가 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>A series of digits ranging from 0 to 9 that specify the fractional part of the number.</source>
          <target state="translated">일련의 숫자 0에서 하는 9 사이의 숫자의 소수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>Fractional digits can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">소수 자릿수에 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>E</source>
          <target state="translated">E</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</source>
          <target state="translated">"E" 또는 "E" 문자 값은 지 수 (과학적 표기법) 표기법으로 표현 됨을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <ph id="ph1">`s`</ph> parameter can represent a number in exponential notation if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 경우 매개 변수 지 수 표기법으로 숫자를 나타낼 수 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>A series of digits ranging from 0 to 9 that specify an exponent.</source>
          <target state="translated">일련의 0에서 지 수를 지정 하는 9 사이의 숫자입니다.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>A string with digits only (which corresponds to the <ph id="ph1">&lt;xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType&gt;</ph> style) always parses successfully.</source>
          <target state="translated">숫자만 문자열 (해당 하는 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType&gt;</ph> 스타일) 항상 성공적으로 구문 분석 합니다.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The remaining <ph id="ph1">&lt;xref:System.Globalization.NumberStyles?displayProperty=nameWithType&gt;</ph> members control elements that may be present, but are not required to be present, in the input string.</source>
          <target state="translated">나머지 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles?displayProperty=nameWithType&gt;</ph> 멤버 있을 수 있지만 입력된 문자열에서 제공 되어야 할 필요는 없습니다 있는 요소를 제어 합니다.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The following table indicates how individual <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> flags affect the elements that may be present in <ph id="ph2">`s`</ph>.</source>
          <target state="translated">다음 표에서 개별 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> 플래그에 있을 수 있는 요소에 영향을 <ph id="ph2">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>NumberStyles value</source>
          <target state="translated">NumberStyles 값</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>Elements permitted in <ph id="ph1">`s`</ph> in addition to digits</source>
          <target state="translated">에 허용 되는 요소 <ph id="ph1">`s`</ph> 숫자 이외에</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept> element only.</source>
          <target state="translated"><bpt id="p1">*</bpt>정수 계열 자릿수<ept id="p1">*</ept> 요소만 합니다.</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The decimal point (<bpt id="p1">*</bpt>.<ept id="p1">*</ept>) and <bpt id="p2">*</bpt>fractional-digits<ept id="p2">*</ept> elements.</source>
          <target state="translated">소수점 (<bpt id="p1">*</bpt>.<ept id="p1">*</ept>) 및 <bpt id="p2">*</bpt>소수 자릿수가<ept id="p2">*</ept> 요소입니다.</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The "e" or "E" character, which indicates exponential notation.</source>
          <target state="translated">"E" 또는 "E" 문자 지 수 표기법을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>This flag by itself supports values in the form <bpt id="p1">*</bpt>digits<ept id="p1">*</ept>E<bpt id="p2">*</bpt>digits<ept id="p2">*</ept>; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</source>
          <target state="translated">단독으로이 플래그는 폼의 값을 지원 <bpt id="p1">*</bpt>자리<ept id="p1">*</ept>E<bpt id="p2">*</bpt>자릿수<ept id="p2">*</ept>추가; 양수 또는 음수 부호 및 소수점 기호 등의 요소를 사용 하 여 문자열을 구문 분석 하는 데 필요한 플래그입니다.</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the beginning of <ph id="ph1">`s`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept> 의 시작 부분에 요소 <ph id="ph1">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the end of <ph id="ph1">`s`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept> 의 끝에 요소 <ph id="ph1">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element at the beginning of <ph id="ph1">`s`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>기호<ept id="p1">*</ept> 의 시작 부분에 요소 <ph id="ph1">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element at the end of <ph id="ph1">`s`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>기호<ept id="p1">*</ept> 의 끝에 요소 <ph id="ph1">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element in the form of parentheses enclosing the numeric value.</source>
          <target state="translated"><bpt id="p1">*</bpt>기호<ept id="p1">*</ept> 숫자 값이 들어 괄호 안에 형식 요소입니다.</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The thousands separator (,) element.</source>
          <target state="translated">1000 단위 구분 기호 (,) 요소입니다.</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The currency ($) element.</source>
          <target state="translated">통화 ($) 요소입니다.</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>All elements.</source>
          <target state="translated">모든 요소입니다.</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>However, <ph id="ph1">`s`</ph> cannot represent a hexadecimal number or a number in exponential notation.</source>
          <target state="translated">그러나 <ph id="ph1">`s`</ph> 16 진수 또는 숫자를 지 수 표기법으로 나타낼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the beginning or end of <ph id="ph1">`s`</ph>, <bpt id="p2">*</bpt>sign<ept id="p2">*</ept> at the beginning of <ph id="ph2">`s`</ph>, and the decimal point (.) symbol.</source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept> 부분이 나 끝 부분에 요소 <ph id="ph1">`s`</ph>, <bpt id="p2">*</bpt>기호<ept id="p2">*</ept> 맨 앞에 <ph id="ph2">`s`</ph>, 소수점 (.) 기호입니다.</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <ph id="ph1">`s`</ph> parameter can also use exponential notation.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수로 지 수 표기법을 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <ph id="ph1">`ws`</ph>, <ph id="ph2">`sign`</ph>, thousands separator (,) and decimal point (.) elements.</source>
          <target state="translated"><ph id="ph1">`ws`</ph>, <ph id="ph2">`sign`</ph>, 1000 단위 구분 기호 (,) 및 소수점 (.) 요소입니다.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>All elements.</source>
          <target state="translated">모든 요소입니다.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>However, <ph id="ph1">`s`</ph> cannot represent a hexadecimal number.</source>
          <target state="translated">그러나 <ph id="ph1">`s`</ph> 16 진수를 나타낼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The <ph id="ph1">`s`</ph> parameter is parsed using the formatting information in a <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that is initialized for the current system culture.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수에서 서식 지정 정보를 사용 하 여 구문 분석 되는 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 현재 시스템 문화권에 따라 초기화 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>Ordinarily, if you pass the <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> method a string that is created by calling the <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> method, the original <ph id="ph3">&lt;xref:System.Double&gt;</ph> value is returned.</source>
          <target state="translated">일반적으로 전달 하는 경우는 <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> 메서드를 호출 하 여 만든 문자열에는 <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> 메서드, 원래 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 값이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>However, because of a loss of precision, the values may not be equal.</source>
          <target state="translated">그러나 정밀도 손실 때문에 값 아니어야 동일 합니다.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>In addition, attempting to parse the string representation of either <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph> or <ph id="ph2">&lt;xref:System.Double.MaxValue&gt;</ph> throws an <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph>, as the following example illustrates.</source>
          <target state="translated">또한의 문자열 표현을 구문 분석 하려고 <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Double.MaxValue&gt;</ph> throw 한 <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph>다음 예제와 같이 합니다.</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>If a separator is encountered in the <ph id="ph1">`s`</ph> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</source>
          <target state="translated">구분 기호에서 발견 되는 <ph id="ph1">`s`</ph> 분석 및 적용 가능한 통화 또는 숫자의 소수 하는 동안 매개 변수 및 그룹 구분 기호가 동일 합니다. 구문 분석 작업의 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>For more information about separators, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>.</source>
          <target state="translated">구분 기호에 대 한 자세한 내용은 참조 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29&gt;</ph> method to parse the string representations of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values using the en-US culture.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%29&gt;</ph> 의 문자열 표현을 구문 분석할 메서드의 <ph id="ph2">&lt;xref:System.Double&gt;</ph> EN-US 문화권을 사용 하 여 값입니다.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> does not represent a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>가 유효한 형식의 숫자를 나타내지 않는 경우</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>는 <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph>보다 작거나 <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>보다 큰 숫자를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source><ph id="ph1">&lt;paramref name="style" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Globalization.NumberStyles" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="style" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Globalization.NumberStyles" /&gt;</ph> 값이 아닙니다.</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
          <source><ph id="ph1">&lt;paramref name="style" /&gt;</ph> includes the <ph id="ph2">&lt;see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="style" /&gt;</ph>이 <ph id="ph2">&lt;see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /&gt;</ph> 값을 포함하는 경우</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>A string that contains a number to convert.</source>
          <target state="translated">변환할 숫자가 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information about <bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>Converts the string representation of a number in a specified culture-specific format to its double-precision floating-point number equivalent.</source>
          <target state="translated">지정된 문화권별 형식의 숫자에 대한 문자열 표현을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <ph id="ph1">&lt;paramref name="s" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>에 지정된 숫자 값 또는 기호에 해당하는 배정밀도 부동 소수점 숫자입니다.</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method is typically used to convert text that can be formatted in a variety of ways to a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated">이 오버 로드는 <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29&gt;</ph> 메서드는 여러 가지 방법으로 서식을 지정할 수 있는 텍스트 변환 데 일반적으로 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>For example, it can be used to convert the text that is entered by a user into an HTML text box to a numeric value.</source>
          <target state="translated">예를 들어 숫자 값을 위해 HTML 텍스트 상자에 사용자가 입력 하는 텍스트 변환에 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">`s`</ph> parameter is interpreted using a combination of the <ph id="ph2">&lt;xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType&gt;</ph> flags.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수를 조합 하 여 해석 되는 <ph id="ph2">&lt;xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">`s`</ph> parameter can contain <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, or <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType&gt;</ph> for the culture specified by <ph id="ph5">`provider`</ph>, or it can contain a string of the form:</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수가 포함 될 수 있습니다 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, 또는 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType&gt;</ph> 로 지정 된 문화권에 대 한 <ph id="ph5">`provider`</ph>, 또는 형식의 문자열을 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>[<bpt id="p1">*</bpt>ws<ept id="p1">*</ept>][<bpt id="p2">*</bpt>sign<ept id="p2">*</ept>]<bpt id="p3">*</bpt>integral-digits<ept id="p3">*</ept>[<bpt id="p4">*</bpt>.<ept id="p4">*</ept>[<bpt id="p5">*</bpt>fractional-digits<ept id="p5">*</ept>]][E[<bpt id="p6">*</bpt>sign<ept id="p6">*</ept>]<bpt id="p7">*</bpt>exponential-digits<ept id="p7">*</ept>][<bpt id="p8">*</bpt>ws<ept id="p8">*</ept>]</source>
          <target state="translated">[<bpt id="p1">*</bpt>ws<ept id="p1">*</ept>][<bpt id="p2">*</bpt>sign<ept id="p2">*</ept>]<bpt id="p3">*</bpt>integral-digits<ept id="p3">*</ept>[<bpt id="p4">*</bpt>.<ept id="p4">*</ept>[<bpt id="p5">*</bpt>fractional-digits<ept id="p5">*</ept>]][E[<bpt id="p6">*</bpt>sign<ept id="p6">*</ept>]<bpt id="p7">*</bpt>exponential-digits<ept id="p7">*</ept>][<bpt id="p8">*</bpt>ws<ept id="p8">*</ept>]</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>Optional elements are framed in square brackets ([ and ]).</source>
          <target state="translated">선택적 요소를 대괄호로 묶여 있습니다 ([및]).</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</source>
          <target state="translated">"자리" 라는 용어를 포함 하는 요소는 일련의 0에서 9 사이의 숫자 문자로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>Element</source>
          <target state="translated">요소</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>A series of white-space characters.</source>
          <target state="translated">일련의 공백 문자입니다.</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>A negative sign symbol (-) or a positive sign symbol (+).</source>
          <target state="translated">음수 부호 기호 (-) 또는 더하기 기호 (+) 기호입니다.</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>A series of digits ranging from 0 to 9 that specify the integral part of the number.</source>
          <target state="translated">일련의 숫자 0에서 하는 9 사이의 숫자의 정수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>Runs of <bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept> can be partitioned by a group-separator symbol.</source>
          <target state="translated">실행 <bpt id="p1">*</bpt>정수 계열 자릿수<ept id="p1">*</ept> 그룹 구분 기호로 분할할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>For example, in some cultures a comma (,) separates groups of thousands.</source>
          <target state="translated">예를 들어, 일부 문화권 쉼표 (,) 개의 그룹을 구분 합니다.</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>The <bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept> element can be absent if the string contains the <bpt id="p2">*</bpt>fractional-digits<ept id="p2">*</ept> element.</source>
          <target state="translated"><bpt id="p1">*</bpt>정수 계열 숫자<ept id="p1">*</ept> 요소 문자열일 수 없는 경우에는 포함 되어는 <bpt id="p2">*</bpt>소수 자릿수<ept id="p2">*</ept> 요소입니다.</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>.</source>
          <target state="translated">이어야 합니다.</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>A culture-specific decimal point symbol.</source>
          <target state="translated">Culture 별 소수점 기호입니다.</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>A series of digits ranging from 0 to 9 that specify the fractional part of the number.</source>
          <target state="translated">일련의 숫자 0에서 하는 9 사이의 숫자의 소수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>E</source>
          <target state="translated">E</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</source>
          <target state="translated">"E" 또는 "E" 문자 값은 지 수 (과학적 표기법) 표기법으로 표현 됨을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>A series of digits ranging from 0 to 9 that specify an exponent.</source>
          <target state="translated">일련의 0에서 지 수를 지정 하는 9 사이의 숫자입니다.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>For more information about numeric formats, see the <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept> topic.</source>
          <target state="translated">숫자 형식에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>형식 지정<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation whose <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns a <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that supplies culture-specific information used in interpreting the format of <ph id="ph5">`s`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> 매개 변수는 한 <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> 구현 인 <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> 메서드가 반환 되는 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 의 형식을 해석에 사용 되는 문화권별 정보를 제공 하는 개체 <ph id="ph5">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>Typically, it is a <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> or <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph> or a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> cannot be obtained, the formatting information for the current system culture is used.</source>
          <target state="translated">경우 <ph id="ph1">`provider`</ph> 은 <ph id="ph2">`null`</ph> 또는 <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 를 가져올 수 없으며 서식 지정 정보는 현재 시스템 문화권이 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>Ordinarily, if you pass the <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> method a string that is created by calling the <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> method, the original <ph id="ph3">&lt;xref:System.Double&gt;</ph> value is returned.</source>
          <target state="translated">일반적으로 전달 하는 경우는 <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> 메서드를 호출 하 여 만든 문자열에는 <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> 메서드, 원래 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 값이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>However, because of a loss of precision, the values may not be equal.</source>
          <target state="translated">그러나 정밀도 손실 때문에 값 아니어야 동일 합니다.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>In addition, attempting to parse the string representation of either <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph> or <ph id="ph2">&lt;xref:System.Double.MaxValue&gt;</ph> throws an <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph>, as the following example illustrates.</source>
          <target state="translated">또한의 문자열 표현을 구문 분석 하려고 <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Double.MaxValue&gt;</ph> throw 한 <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph>다음 예제와 같이 합니다.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>If a separator is encountered in the <ph id="ph1">`s`</ph> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</source>
          <target state="translated">구분 기호에서 발견 되는 <ph id="ph1">`s`</ph> 분석 및 적용 가능한 통화 또는 숫자의 소수 하는 동안 매개 변수 및 그룹 구분 기호가 동일 합니다. 구문 분석 작업의 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>For more information about separators, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>.</source>
          <target state="translated">구분 기호에 대 한 자세한 내용은 참조 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>The following example is the button click event handler of a Web form.</source>
          <target state="translated">다음 예제에서는 단추 클릭 Web form의 이벤트 처리기입니다.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>It uses the array returned by the <ph id="ph1">&lt;xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType&gt;</ph> property to determine the user's locale.</source>
          <target state="translated">반환 된 배열을 사용 하 여는 <ph id="ph1">&lt;xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType&gt;</ph> 속성을 사용자의 로캘을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>It then instantiates a <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that corresponds to that locale.</source>
          <target state="translated">그런 다음는 <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 해당 로캘에 해당 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that belongs to that <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object is then passed to the <ph id="ph3">&lt;xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method to convert the user's input to a <ph id="ph4">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 하에 속하는 개체는 <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 에 다음 전달 된 개체는 <ph id="ph3">&lt;xref:System.Double.Parse%28System.String%2CSystem.IFormatProvider%29&gt;</ph> 메서드는 사용자 입력을 <ph id="ph4">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> does not represent a number in a valid format.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>가 유효한 형식의 숫자를 나타내지 않는 경우</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>는 <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph>보다 작거나 <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>보다 큰 숫자를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>A string that contains a number to convert.</source>
          <target state="translated">변환할 숫자가 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>A bitwise combination of enumeration values that indicate the style elements that can be present in <bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>에 나타날 수 있는 스타일 요소를 나타내는 열거형 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>A typical value to specify is <ph id="ph1">&lt;see cref="F:System.Globalization.NumberStyles.Float" /&gt;</ph> combined with <ph id="ph2">&lt;see cref="F:System.Globalization.NumberStyles.AllowThousands" /&gt;</ph>.</source>
          <target state="translated">지정할 일반적인 값은 <ph id="ph2">&lt;see cref="F:System.Globalization.NumberStyles.AllowThousands" /&gt;</ph>와 결합되는 <ph id="ph1">&lt;see cref="F:System.Globalization.NumberStyles.Float" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information about <bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</source>
          <target state="translated">지정된 스타일 및 문화권별 형식의 숫자에 대한 문자열 표현을 같은 값의 배정밀도 부동 소수점 숫자로 변환합니다.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>A double-precision floating-point number that is equivalent to the numeric value or symbol specified in <ph id="ph1">&lt;paramref name="s" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>에 지정된 숫자 값 또는 기호에 해당하는 배정밀도 부동 소수점 숫자입니다.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <ph id="ph1">`style`</ph> parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the <ph id="ph2">`s`</ph> parameter for the parse operation to succeed.</source>
          <target state="translated"><ph id="ph1">`style`</ph> 스타일 요소를 정의 하는 매개 변수 (공백, 1000 단위와 같은 구분 기호 및 통화 기호)에 허용 되는 <ph id="ph2">`s`</ph> 구문 분석 작업이 성공 하려면에 대 한 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>It must be a combination of bit flags from the <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumeration.</source>
          <target state="translated">비트 플래그의 조합 이어야 합니다는 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The following <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members are not supported:</source>
          <target state="translated">다음 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> 멤버가 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <ph id="ph1">`s`</ph> parameter can contain <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, or <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType&gt;</ph> for the culture specified by <ph id="ph5">`provider`</ph>.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수에 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, 또는 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType&gt;</ph> 로 지정 된 문화권에 대 한 <ph id="ph5">`provider`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>Depending on the value of <ph id="ph1">`style`</ph>, it can also take the form:</source>
          <target state="translated">값에 따라 <ph id="ph1">`style`</ph>, 형태를 취할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>[<bpt id="p1">*</bpt>ws<ept id="p1">*</ept>] [<bpt id="p2">*</bpt><ph id="ph1">$</ph><ept id="p2">*</ept>] [<bpt id="p3">*</bpt>sign<ept id="p3">*</ept>][<bpt id="p4">*</bpt>integral-digits<ept id="p4">*</ept>,]<bpt id="p5">*</bpt>integral-digits<ept id="p5">*</ept>[.[<bpt id="p6">*</bpt>fractional-digits<ept id="p6">*</ept>]][E[<bpt id="p7">*</bpt>sign<ept id="p7">*</ept>]<bpt id="p8">*</bpt>exponential-digits<ept id="p8">*</ept>][<bpt id="p9">*</bpt>ws<ept id="p9">*</ept>]</source>
          <target state="translated">[<bpt id="p1">*</bpt>ws<ept id="p1">*</ept>] [<bpt id="p2">*</bpt><ph id="ph1">$</ph><ept id="p2">*</ept>] [<bpt id="p3">*</bpt>sign<ept id="p3">*</ept>][<bpt id="p4">*</bpt>integral-digits<ept id="p4">*</ept>,]<bpt id="p5">*</bpt>integral-digits<ept id="p5">*</ept>[.[<bpt id="p6">*</bpt>fractional-digits<ept id="p6">*</ept>]][E[<bpt id="p7">*</bpt>sign<ept id="p7">*</ept>]<bpt id="p8">*</bpt>exponential-digits<ept id="p8">*</ept>][<bpt id="p9">*</bpt>ws<ept id="p9">*</ept>]</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>Elements framed in square brackets ([ and ]) are optional.</source>
          <target state="translated">대괄호 ([및])는 선택적 요소에 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The following table describes each element.</source>
          <target state="translated">다음 표에서 각 요소에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>Element</source>
          <target state="translated">요소</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>A series of white-space characters.</source>
          <target state="translated">일련의 공백 문자입니다.</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>White space can appear at the beginning of <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType&gt;</ph> flag, and it can appear at the end of <ph id="ph4">`s`</ph> if <ph id="ph5">`style`</ph> includes the <ph id="ph6">&lt;xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">맨 앞에 공백이 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType&gt;</ph> 의 끝에 있고, 나타날 수 있습니다 <ph id="ph4">`s`</ph> 경우 <ph id="ph5">`style`</ph> 포함는 <ph id="ph6">&lt;xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>A culture-specific currency symbol.</source>
          <target state="translated">Culture 별 통화 기호입니다.</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>Its position in the string is defined by the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType&gt;</ph> properties of the current culture.</source>
          <target state="translated">문자열에 해당 위치는 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType&gt;</ph> 현재 문화권의 속성입니다.</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The current culture's currency symbol can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">현재 문화권의 통화 기호에 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>A negative sign symbol (-) or a positive sign symbol (+).</source>
          <target state="translated">음수 부호 기호 (-) 또는 더하기 기호 (+) 기호입니다.</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The sign can appear at the beginning of <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType&gt;</ph> flag, and it can appear at the end of <ph id="ph4">`s`</ph> if <ph id="ph5">`style`</ph> includes the <ph id="ph6">&lt;xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">부호의 시작 부분에 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType&gt;</ph> 의 끝에 있고, 나타날 수 있습니다 <ph id="ph4">`s`</ph> 경우 <ph id="ph5">`style`</ph> 포함는 <ph id="ph6">&lt;xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>Parentheses can be used in <ph id="ph1">`s`</ph> to indicate a negative value if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">괄호를 사용할 수 있습니다 <ph id="ph1">`s`</ph> 경우 음수 값을 나타내는 데 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>A series of digits ranging from 0 to 9 that specify the integral part of the number.</source>
          <target state="translated">일련의 숫자 0에서 하는 9 사이의 숫자의 정수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept> element can be absent if the string contains the <bpt id="p2">*</bpt>fractional-digits<ept id="p2">*</ept> element.</source>
          <target state="translated"><bpt id="p1">*</bpt>정수 계열 숫자<ept id="p1">*</ept> 요소 문자열일 수 없는 경우에는 포함 되어는 <bpt id="p2">*</bpt>소수 자릿수<ept id="p2">*</ept> 요소입니다.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>,</source>
          <target state="translated">,</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>A culture-specific group separator.</source>
          <target state="translated">Culture 관련 그룹 구분 기호입니다.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The current culture's group separator symbol can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType&gt;</ph> flag</source>
          <target state="translated">현재 문화권의 그룹 구분 기호에 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType&gt;</ph> 플래그</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>.</source>
          <target state="translated">이어야 합니다.</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>A culture-specific decimal point symbol.</source>
          <target state="translated">Culture 별 소수점 기호입니다.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The current culture's decimal point symbol can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">에 현재 문화권의 소수점 기호가 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>A series of digits ranging from 0 to 9 that specify the fractional part of the number.</source>
          <target state="translated">일련의 숫자 0에서 하는 9 사이의 숫자의 소수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>Fractional digits can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">소수 자릿수에 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>E</source>
          <target state="translated">E</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</source>
          <target state="translated">"E" 또는 "E" 문자 값은 지 수 (과학적 표기법) 표기법으로 표현 됨을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <ph id="ph1">`s`</ph> parameter can represent a number in exponential notation if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 경우 매개 변수 지 수 표기법으로 숫자를 나타낼 수 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>A series of digits ranging from 0 to 9 that specify an exponent.</source>
          <target state="translated">일련의 0에서 지 수를 지정 하는 9 사이의 숫자입니다.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>A string with digits only (which corresponds to the <ph id="ph1">&lt;xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType&gt;</ph> style) always parses successfully.</source>
          <target state="translated">숫자만 문자열 (해당 하는 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType&gt;</ph> 스타일) 항상 성공적으로 구문 분석 합니다.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The remaining <ph id="ph1">&lt;xref:System.Globalization.NumberStyles?displayProperty=nameWithType&gt;</ph> members control elements that may be present, but are not required to be present, in the input string.</source>
          <target state="translated">나머지 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles?displayProperty=nameWithType&gt;</ph> 멤버 있을 수 있지만 입력된 문자열에서 제공 되어야 할 필요는 없습니다 있는 요소를 제어 합니다.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The following table indicates how individual <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> flags affect the elements that may be present in <ph id="ph2">`s`</ph>.</source>
          <target state="translated">다음 표에서 개별 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> 플래그에 있을 수 있는 요소에 영향을 <ph id="ph2">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>NumberStyles value</source>
          <target state="translated">NumberStyles 값</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>Elements permitted in <ph id="ph1">`s`</ph> in addition to digits</source>
          <target state="translated">에 허용 되는 요소 <ph id="ph1">`s`</ph> 숫자 이외에</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept> element only.</source>
          <target state="translated"><bpt id="p1">*</bpt>정수 계열 자릿수<ept id="p1">*</ept> 요소만 합니다.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The decimal point (<bpt id="p1">*</bpt>.<ept id="p1">*</ept>) and <bpt id="p2">*</bpt>fractional-digits<ept id="p2">*</ept> elements.</source>
          <target state="translated">소수점 (<bpt id="p1">*</bpt>.<ept id="p1">*</ept>) 및 <bpt id="p2">*</bpt>소수 자릿수가<ept id="p2">*</ept> 요소입니다.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The "e" or "E" character, which indicates exponential notation.</source>
          <target state="translated">"E" 또는 "E" 문자 지 수 표기법을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>This flag by itself supports values in the form <bpt id="p1">*</bpt>digits<ept id="p1">*</ept>E<bpt id="p2">*</bpt>digits<ept id="p2">*</ept>; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</source>
          <target state="translated">단독으로이 플래그는 폼의 값을 지원 <bpt id="p1">*</bpt>자리<ept id="p1">*</ept>E<bpt id="p2">*</bpt>자릿수<ept id="p2">*</ept>추가; 양수 또는 음수 부호 및 소수점 기호 등의 요소를 사용 하 여 문자열을 구문 분석 하는 데 필요한 플래그입니다.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the beginning of <ph id="ph1">`s`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept> 의 시작 부분에 요소 <ph id="ph1">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the end of <ph id="ph1">`s`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept> 의 끝에 요소 <ph id="ph1">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element at the beginning of <ph id="ph1">`s`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>기호<ept id="p1">*</ept> 의 시작 부분에 요소 <ph id="ph1">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element at the end of <ph id="ph1">`s`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>기호<ept id="p1">*</ept> 의 끝에 요소 <ph id="ph1">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element in the form of parentheses enclosing the numeric value.</source>
          <target state="translated"><bpt id="p1">*</bpt>기호<ept id="p1">*</ept> 숫자 값이 들어 괄호 안에 형식 요소입니다.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The thousands separator (,) element.</source>
          <target state="translated">1000 단위 구분 기호 (,) 요소입니다.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The currency ($) element.</source>
          <target state="translated">통화 ($) 요소입니다.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>All elements.</source>
          <target state="translated">모든 요소입니다.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>However, <ph id="ph1">`s`</ph> cannot represent a hexadecimal number or a number in exponential notation.</source>
          <target state="translated">그러나 <ph id="ph1">`s`</ph> 16 진수 또는 숫자를 지 수 표기법으로 나타낼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the beginning or end of <ph id="ph1">`s`</ph>, <bpt id="p2">*</bpt>sign<ept id="p2">*</ept> at the beginning of <ph id="ph2">`s`</ph>, and the decimal point (.) symbol.</source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept> 부분이 나 끝 부분에 요소 <ph id="ph1">`s`</ph>, <bpt id="p2">*</bpt>기호<ept id="p2">*</ept> 맨 앞에 <ph id="ph2">`s`</ph>, 소수점 (.) 기호입니다.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <ph id="ph1">`s`</ph> parameter can also use exponential notation.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수로 지 수 표기법을 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <ph id="ph1">`ws`</ph>, <ph id="ph2">`sign`</ph>, thousands separator (,) and decimal point (.) elements.</source>
          <target state="translated"><ph id="ph1">`ws`</ph>, <ph id="ph2">`sign`</ph>, 1000 단위 구분 기호 (,) 및 소수점 (.) 요소입니다.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>All elements.</source>
          <target state="translated">모든 요소입니다.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>However, <ph id="ph1">`s`</ph> cannot represent a hexadecimal number.</source>
          <target state="translated">그러나 <ph id="ph1">`s`</ph> 16 진수를 나타낼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation whose <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns a <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that supplies culture-specific information used in interpreting the format of <ph id="ph5">`s`</ph>.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> 매개 변수는 한 <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> 구현 인 <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> 메서드가 반환 되는 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 의 형식을 해석에 사용 되는 문화권별 정보를 제공 하는 개체 <ph id="ph5">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>Typically, it is a <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> or <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph> or a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> cannot be obtained, the formatting information for the current system culture is used.</source>
          <target state="translated">경우 <ph id="ph1">`provider`</ph> 은 <ph id="ph2">`null`</ph> 또는 <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 를 가져올 수 없으며 서식 지정 정보는 현재 시스템 문화권이 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>Ordinarily, if you pass the <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> method a string that is created by calling the <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> method, the original <ph id="ph3">&lt;xref:System.Double&gt;</ph> value is returned.</source>
          <target state="translated">일반적으로 전달 하는 경우는 <ph id="ph1">&lt;xref:System.Double.Parse%2A?displayProperty=nameWithType&gt;</ph> 메서드를 호출 하 여 만든 문자열에는 <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> 메서드, 원래 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 값이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>However, because of a loss of precision, the values may not be equal.</source>
          <target state="translated">그러나 정밀도 손실 때문에 값 아니어야 동일 합니다.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>In addition, attempting to parse the string representation of either <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph> or <ph id="ph2">&lt;xref:System.Double.MaxValue&gt;</ph> throws an <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph>, as the following example illustrates.</source>
          <target state="translated">또한의 문자열 표현을 구문 분석 하려고 <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Double.MaxValue&gt;</ph> throw 한 <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph>다음 예제와 같이 합니다.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>If a separator is encountered in the <ph id="ph1">`s`</ph> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</source>
          <target state="translated">구분 기호에서 발견 되는 <ph id="ph1">`s`</ph> 분석 및 적용 가능한 통화 또는 숫자의 소수 하는 동안 매개 변수 및 그룹 구분 기호가 동일 합니다. 구문 분석 작업의 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>For more information about separators, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>.</source>
          <target state="translated">구분 기호에 대 한 자세한 내용은 참조 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>The following example illustrates the use of the <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29&gt;</ph> method to assign several string representations of temperature values to a <ph id="ph2">`Temperature`</ph> object.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29&gt;</ph> 메서드를 할당 하는 온도 값의 여러 문자열 표현을 <ph id="ph2">`Temperature`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> does not represent a numeric value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>가 숫자 값을 나타내지 않는 경우</target>       </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="style" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Globalization.NumberStyles" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="style" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Globalization.NumberStyles" /&gt;</ph> 값이 아닙니다.</target>       </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="style" /&gt;</ph> is the <ph id="ph2">&lt;see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="style" /&gt;</ph>이 <ph id="ph2">&lt;see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /&gt;</ph> 값인 경우</target>       </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve" uid="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
          <source><ph id="ph1">&lt;paramref name="s" /&gt;</ph> represents a number that is less than <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="s" /&gt;</ph>는 <ph id="ph2">&lt;see cref="F:System.Double.MinValue" /&gt;</ph>보다 작거나 <ph id="ph3">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>보다 큰 숫자를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve" uid="F:System.Double.PositiveInfinity">
          <source>Represents positive infinity.</source>
          <target state="translated">양의 무한대를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve" uid="F:System.Double.PositiveInfinity">
          <source>This field is constant.</source>
          <target state="translated">이 필드는 상수입니다.</target>       </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.PositiveInfinity">
          <source>The value of this constant is the result of dividing a positive number by zero.</source>
          <target state="translated">이 상수의 값은 양의 숫자를 0으로 나눈 결과입니다.</target>       </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.PositiveInfinity">
          <source>This constant is returned when the result of an operation is greater than <ph id="ph1">&lt;xref:System.Double.MaxValue&gt;</ph>.</source>
          <target state="translated">이 상수는 작업의 결과 보다 크면 반환 됩니다 <ph id="ph1">&lt;xref:System.Double.MaxValue&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.PositiveInfinity">
          <source>Use <ph id="ph1">&lt;xref:System.Double.IsPositiveInfinity%2A&gt;</ph> to determine whether a value evaluates to positive infinity.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.Double.IsPositiveInfinity%2A&gt;</ph> 값이 양의 무한대로 계산 되는지 확인 하려면.</target>       </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.Double.PositiveInfinity">
          <source>The following code example illustrates the use of <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph>:</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Double.PositiveInfinity&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value of the current instance is not zero; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 인스턴스의 값이 0이 아니면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Double&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToBoolean%28System.Double%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">&lt;xref:System.Convert.ToBoolean%28System.Double%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>로 변환된 현재 인스턴스의 값입니다.</target>       </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Double&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.Double%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">&lt;xref:System.Convert.ToByte%28System.Double%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>This conversion is not supported.</source>
          <target state="translated">이 변환은 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>Attempting to use this method throws an <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>.</source>
          <target state="translated">이 메서드를 사용하려고 하면 <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>This conversion is not supported.</source>
          <target state="translated">이 변환은 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>No value is returned.</source>
          <target state="translated">값이 반환되지 않습니다.</target>       </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">모든 경우</target>       </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>This conversion is not supported.</source>
          <target state="translated">이 변환은 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>Attempting to use this method throws an <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph></source>
          <target state="translated">이 메서드를 사용하려고 하면 <ph id="ph1">&lt;see cref="T:System.InvalidCastException" /&gt;</ph>이 throw됩니다.</target>       </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>This conversion is not supported.</source>
          <target state="translated">이 변환은 지원되지 않습니다.</target>       </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>No value is returned.</source>
          <target state="translated">값이 반환되지 않습니다.</target>       </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
          <source>In all cases.</source>
          <target state="translated">모든 경우</target>       </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Decimal" /&gt;</ph>로 변환된 현재 인스턴스의 값입니다.</target>       </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Double&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">&lt;xref:System.Convert.ToDecimal%28System.Double%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>The value of the current instance, unchanged.</source>
          <target state="translated">변경되지 않은 현재 인스턴스의 값입니다.</target>       </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Double&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>The value of the current instance, converted to an <ph id="ph1">&lt;see cref="T:System.Int16" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int16" /&gt;</ph>로 변환된 현재 인스턴스의 값입니다.</target>       </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Double&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.Double%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">&lt;xref:System.Convert.ToInt16%28System.Double%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>The value of the current instance, converted to an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>로 변환된 현재 인스턴스의 값입니다.</target>       </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Double&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.Double%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">&lt;xref:System.Convert.ToInt32%28System.Double%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>The value of the current instance, converted to an <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>로 변환된 현재 인스턴스의 값입니다.</target>       </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Double&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.Double%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">&lt;xref:System.Convert.ToInt64%28System.Double%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>The value of the current instance, converted to an <ph id="ph1">&lt;see cref="T:System.SByte" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.SByte" /&gt;</ph>로 변환된 현재 인스턴스의 값입니다.</target>       </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Double&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.Double%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">&lt;xref:System.Convert.ToSByte%28System.Double%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>로 변환된 현재 인스턴스의 값입니다.</target>       </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Double&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToSingle%28System.Double%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">&lt;xref:System.Convert.ToSingle%28System.Double%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>The type to which to convert this <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값을 변환할 대상 형식입니다.</target>       </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IFormatProvider" /&gt;</ph> implementation that supplies culture-specific information about the format of the returned value.</source>
          <target state="translated">반환된 값의 형식에 대한 문화권별 정보를 제공하는 <ph id="ph1">&lt;see cref="T:System.IFormatProvider" /&gt;</ph> 구현입니다.</target>       </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>The value of the current instance, converted to <ph id="ph1">&lt;paramref name="type" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph>으로 변환된 현재 인스턴스의 값입니다.</target>       </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Double&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> in Visual Basic) <ph id="ph3">&lt;xref:System.Convert.ChangeType%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">`static`</ph> (<ph id="ph2">`Shared`</ph> Visual basic에서) <ph id="ph3">&lt;xref:System.Convert.ChangeType%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;see cref="T:System.UInt16" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.UInt16" /&gt;</ph>로 변환된 현재 인스턴스의 값입니다.</target>       </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Double&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.Double%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">&lt;xref:System.Convert.ToUInt16%28System.Double%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;see cref="T:System.UInt32" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.UInt32" /&gt;</ph>로 변환된 현재 인스턴스의 값입니다.</target>       </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Double&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.Double%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">&lt;xref:System.Convert.ToUInt32%28System.Double%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>This parameter is ignored.</source>
          <target state="translated">이 매개 변수는 무시됩니다.</target>       </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve" uid="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>The value of the current instance, converted to a <ph id="ph1">&lt;see cref="T:System.UInt64" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.UInt64" /&gt;</ph>로 변환된 현재 인스턴스의 값입니다.</target>       </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Double&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IConvertible&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.Convert.ToUInt64%28System.Double%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">메서드 대신 호출 하는 것은 <ph id="ph1">&lt;xref:System.Convert.ToUInt64%28System.Double%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve" uid="T:System.Double">
          <source>Converts the numeric value of this instance to its equivalent string representation.</source>
          <target state="translated">이 인스턴스의 숫자 값을 해당하는 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve" uid="M:System.Double.ToString">
          <source>Converts the numeric value of this instance to its equivalent string representation.</source>
          <target state="translated">이 인스턴스의 숫자 값을 해당하는 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve" uid="M:System.Double.ToString">
          <source>The string representation of the value of this instance.</source>
          <target state="translated">이 인스턴스 값의 문자열 표현입니다.</target>       </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>The <ph id="ph1">&lt;xref:System.Double.ToString&gt;</ph> method formats a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value in the default ("G", or general) format of the current culture.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.ToString&gt;</ph> 메서드 형식을 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 에서 값을 기본값 ("G" 또는 일반)는 현재 문화권의 형식입니다.</target>       </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>If you want to specify a different format, precision, or culture, use the other overloads of the <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> method, as follows:</source>
          <target state="translated">다른 형식, 전체 자릿수 또는 culture를 지정 하려는 경우 사용의 다른 오버 로드는 <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> 다음과 같이 메서드:</target>       </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>To use format</source>
          <target state="translated">형식을 사용 하려면</target>       </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>For culture</source>
          <target state="translated">문화권에 대 한</target>       </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>Use the overload</source>
          <target state="translated">오버 로드를 사용 하 여</target>       </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>Default ("G") format</source>
          <target state="translated">기본 ("G") 형식</target>       </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>A specific culture</source>
          <target state="translated">특정 문화권</target>       </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>A specific format or precision</source>
          <target state="translated">특정 형식 또는 전체 자릿수</target>       </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>Default (current) culture</source>
          <target state="translated">기본 (현재) 문화권</target>       </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>A specific format or precision</source>
          <target state="translated">특정 형식 또는 전체 자릿수</target>       </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>A specific culture</source>
          <target state="translated">특정 문화권</target>       </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>The return value can be <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A&gt;</ph>, or a string of the form:</source>
          <target state="translated">반환 값일 수 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A&gt;</ph>, 또는 형식의 문자열:</target>       </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</source>
          <target state="translated">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</target>       </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>Optional elements are framed in square brackets ([ and ]).</source>
          <target state="translated">선택적 요소를 대괄호로 묶여 있습니다 ([및]).</target>       </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</source>
          <target state="translated">"자리" 라는 용어를 포함 하는 요소는 일련의 0에서 9 사이의 숫자 문자로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>The elements listed in the following table are supported.</source>
          <target state="translated">다음 표에 나열 된 요소가 지원 됩니다.</target>       </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>Element</source>
          <target state="translated">요소</target>       </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>A negative sign or positive sign symbol.</source>
          <target state="translated">음수 부호 또는 양수 부호 기호입니다.</target>       </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>A series of digits specifying the integral part of the number.</source>
          <target state="translated">일련의 숫자는 숫자의 정수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>Integral-digits can be absent if there are fractional-digits.</source>
          <target state="translated">정수 계열 자릿수 수 없어야 경우 소수 자릿수입니다.</target>       </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>'<bpt id="p1">*</bpt>.<ept id="p1">*</ept>'</source>
          <target state="translated">'<bpt id="p1">*</bpt>.<ept id="p1">*</ept>'</target>       </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>A culture-specific decimal point symbol.</source>
          <target state="translated">Culture 별 소수점 기호입니다.</target>       </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>A series of digits specifying the fractional part of the number.</source>
          <target state="translated">일련의 숫자의 소수 부분을 지정 하는 숫자입니다.</target>       </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>'<bpt id="p1">*</bpt>e<ept id="p1">*</ept>'</source>
          <target state="translated">'<bpt id="p1">*</bpt>e<ept id="p1">*</ept>'</target>       </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>A lowercase character 'e', indicating exponential (scientific) notation.</source>
          <target state="translated">소문자 'e' 지 수 (과학적 표기법) 표기법을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>A series of digits specifying an exponent.</source>
          <target state="translated">일련의 지 수를 지정 하는 숫자입니다.</target>       </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</source>
          <target state="translated">반환 값의 예로 "100", "-123456789", "123.45 e + 6", "500", "3.1416", "600", "-0.123" 및 "-Infinity"입니다.</target>       </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
          <target state="translated">.NET Framework에서는 다음 서식 지정 항목에 자세히 설명 하는 광범위 한 서식 지정 지원을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">숫자 서식 지정자에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>표준 숫자 형식 문자열<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> 및 <bpt id="p2">[</bpt>사용자 지정 숫자 형식 문자열<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">서식 지정 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>형식 지정<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>The following example uses the default <ph id="ph1">&lt;xref:System.Double.ToString?displayProperty=nameWithType&gt;</ph> method to display the string representations of a number of <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">다음 예제에서는 기본 <ph id="ph1">&lt;xref:System.Double.ToString?displayProperty=nameWithType&gt;</ph> 메서드의 숫자의 문자열 표현을 표시를 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString">
          <source>The following example illustrates the use of <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">문화권별 서식 지정 정보를 제공하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</source>
          <target state="translated">지정된 문화권별 형식 정보를 사용하여 이 인스턴스의 숫자 값을 해당 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>The string representation of the value of this instance as specified by <ph id="ph1">&lt;paramref name="provider" /&gt;</ph>.</source>
          <target state="translated">이 인스턴스의 값을 <ph id="ph1">&lt;paramref name="provider" /&gt;</ph>에 지정된 내용에 따라 나타낸 문자열 표현입니다.</target>       </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Double.ToString%28System.IFormatProvider%29&gt;</ph> method formats a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value in the default ("G", or general) format of a specified culture.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.ToString%28System.IFormatProvider%29&gt;</ph> 메서드 형식을 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 에서 값을 기본값 ("G" 또는 일반) 지정된 된 문화권의 형식입니다.</target>       </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>If you want to specify a different format or culture, use the other overloads of the <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> method, as follows:</source>
          <target state="translated">다른 형식이 나 문화권을 지정 하려는 경우 사용의 다른 오버 로드는 <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> 다음과 같이 메서드:</target>       </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>To use format</source>
          <target state="translated">형식을 사용 하려면</target>       </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>For culture</source>
          <target state="translated">문화권에 대 한</target>       </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>Use the overload</source>
          <target state="translated">오버 로드를 사용 하 여</target>       </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>Default ("G") format</source>
          <target state="translated">기본 ("G") 형식</target>       </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>Default (current)</source>
          <target state="translated">기본 (현재)</target>       </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>A specific format or precision</source>
          <target state="translated">특정 형식 또는 전체 자릿수</target>       </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>Default (current) culture</source>
          <target state="translated">기본 (현재) 문화권</target>       </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>A specific format or precision</source>
          <target state="translated">특정 형식 또는 전체 자릿수</target>       </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>A specific culture</source>
          <target state="translated">특정 문화권</target>       </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>The return value can be <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A&gt;</ph>, or a string of the form:</source>
          <target state="translated">반환 값일 수 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A&gt;</ph>, 또는 형식의 문자열:</target>       </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</source>
          <target state="translated">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</target>       </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>Optional elements are framed in square brackets ([ and ]).</source>
          <target state="translated">선택적 요소를 대괄호로 묶여 있습니다 ([및]).</target>       </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</source>
          <target state="translated">"자리" 라는 용어를 포함 하는 요소는 일련의 0에서 9 사이의 숫자 문자로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>The elements listed in the following table are supported.</source>
          <target state="translated">다음 표에 나열 된 요소가 지원 됩니다.</target>       </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>Element</source>
          <target state="translated">요소</target>       </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>A negative sign or positive sign symbol.</source>
          <target state="translated">음수 부호 또는 양수 부호 기호입니다.</target>       </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>A series of digits specifying the integral part of the number.</source>
          <target state="translated">일련의 숫자는 숫자의 정수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>Integral-digits can be absent if there are fractional-digits.</source>
          <target state="translated">정수 계열 자릿수 수 없어야 경우 소수 자릿수입니다.</target>       </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>'<bpt id="p1">*</bpt>.<ept id="p1">*</ept>'</source>
          <target state="translated">'<bpt id="p1">*</bpt>.<ept id="p1">*</ept>'</target>       </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>A culture-specific decimal point symbol.</source>
          <target state="translated">Culture 별 소수점 기호입니다.</target>       </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>A series of digits specifying the fractional part of the number.</source>
          <target state="translated">일련의 숫자의 소수 부분을 지정 하는 숫자입니다.</target>       </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>'<bpt id="p1">*</bpt>e<ept id="p1">*</ept>'</source>
          <target state="translated">'<bpt id="p1">*</bpt>e<ept id="p1">*</ept>'</target>       </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>A lowercase character 'e', indicating exponential (scientific) notation.</source>
          <target state="translated">소문자 'e' 지 수 (과학적 표기법) 표기법을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>A series of digits specifying an exponent.</source>
          <target state="translated">일련의 지 수를 지정 하는 숫자입니다.</target>       </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</source>
          <target state="translated">반환 값의 예로 "100", "-123456789", "123.45 e + 6", "500", "3.1416", "600", "-0.123" 및 "-Infinity"입니다.</target>       </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>This instance is formatted with the general numeric format specifier ("G").</source>
          <target state="translated">이 인스턴스의 형식은 일반 숫자 형식 지정자 ("G")로 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
          <target state="translated">.NET Framework에서는 다음 서식 지정 항목에 자세히 설명 하는 광범위 한 서식 지정 지원을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">숫자 서식 지정자에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>표준 숫자 형식 문자열<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> 및 <bpt id="p2">[</bpt>사용자 지정 숫자 형식 문자열<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">서식 지정 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>형식 지정<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation whose <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns a <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> 매개 변수는 한 <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> 구현 인 <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> 메서드가 반환 되는 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>Typically, <ph id="ph1">`provider`</ph> is a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object or a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">일반적으로 <ph id="ph1">`provider`</ph> 는 <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 개체 또는 <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter supplies culture-specific information used in formatting.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> 매개 변수에서 서식 지정에 사용 되는 문화권별 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the return value is formatted using the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture.</source>
          <target state="translated">경우 <ph id="ph1">`provider`</ph> 은 <ph id="ph2">`null`</ph>를 사용 하 여 반환 값의 형식이 <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 현재 문화권에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>The following example displays the string representation of two <ph id="ph1">&lt;xref:System.Double&gt;</ph> values using <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> objects that represent several different cultures.</source>
          <target state="translated">다음 예제에서는 두 개의 문자열 표현을 표시 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 사용 하 여 값 <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 서로 다른 문화권을 나타내는 개체입니다.</target>       </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.IFormatProvider)">
          <source>The following example illustrates the use of <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph>, taking a <ph id="ph2">&lt;xref:System.String&gt;</ph> and an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> as parameters.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph>해는 <ph id="ph2">&lt;xref:System.String&gt;</ph> 및 <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve" uid="M:System.Double.ToString(System.String)">
          <source>A numeric format string.</source>
          <target state="translated">숫자 서식 문자열입니다.</target>       </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve" uid="M:System.Double.ToString(System.String)">
          <source>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</source>
          <target state="translated">지정된 형식을 사용하여 이 인스턴스의 숫자 값을 해당 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve" uid="M:System.Double.ToString(System.String)">
          <source>The string representation of the value of this instance as specified by <ph id="ph1">&lt;paramref name="format" /&gt;</ph>.</source>
          <target state="translated">이 인스턴스의 값을 <ph id="ph1">&lt;paramref name="format" /&gt;</ph>에 지정된 내용에 따라 나타낸 문자열 표현입니다.</target>       </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Double.ToString%28System.String%29&gt;</ph> method formats a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value in a specified format by using the conventions of the current culture.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.ToString%28System.String%29&gt;</ph> 메서드 형식을 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 현재 문화권의 규칙을 사용 하 여 지정 된 형식에서 값입니다.</target>       </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>If you want to specify a different format or culture, use the other overloads of the <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> method, as follows:</source>
          <target state="translated">다른 형식이 나 문화권을 지정 하려는 경우 사용의 다른 오버 로드는 <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> 다음과 같이 메서드:</target>       </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>To use format</source>
          <target state="translated">형식을 사용 하려면</target>       </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>For culture</source>
          <target state="translated">문화권에 대 한</target>       </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>Use the overload</source>
          <target state="translated">오버 로드를 사용 하 여</target>       </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>Default ("G") format</source>
          <target state="translated">기본 ("G") 형식</target>       </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>Default (current) culture</source>
          <target state="translated">기본 (현재) 문화권</target>       </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>Default ("G") format</source>
          <target state="translated">기본 ("G") 형식</target>       </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>A specific culture</source>
          <target state="translated">특정 문화권</target>       </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>A specific format or precision</source>
          <target state="translated">특정 형식 또는 전체 자릿수</target>       </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>A specific culture</source>
          <target state="translated">특정 문화권</target>       </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>The return value can be <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A&gt;</ph>, or the string representation of a number, as specified by <ph id="ph4">`format`</ph>.</source>
          <target state="translated">반환 값일 수 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A&gt;</ph>, 또는로 지정 된 숫자의 문자열 표현을 <ph id="ph4">`format`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>The <ph id="ph1">`format`</ph> parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers.</source>
          <target state="translated"><ph id="ph1">`format`</ph> 매개 변수는 D 및 X를 제외한 모든 유효한 표준 숫자 서식 지정자 및 사용자 지정 숫자 서식 지정자의 조합이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph> or an empty string, the return value is formatted with the general numeric format specifier ("G").</source>
          <target state="translated">경우 <ph id="ph1">`format`</ph> 은 <ph id="ph2">`null`</ph> 이거나 빈 문자열이 면 반환 값 ("G")는 일반 숫자 형식 지정자와 함께 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
          <target state="translated">.NET Framework에서는 다음 서식 지정 항목에 자세히 설명 하는 광범위 한 서식 지정 지원을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">숫자 서식 지정자에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>표준 숫자 형식 문자열<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> 및 <bpt id="p2">[</bpt>사용자 지정 숫자 형식 문자열<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">서식 지정 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>형식 지정<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>By default, the return value only contains 15 digits of precision although a maximum of 17 digits is maintained internally.</source>
          <target state="translated">기본적으로 반환 값만 포함 15 자리의 전체 자릿수 내부적으로 최대 17 자리가 유지 합니다.</target>       </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>If the value of this instance has greater than 15 digits, <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> returns <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A&gt;</ph> instead of the expected number.</source>
          <target state="translated">이 인스턴스의 값이 15 자리 보다 큰 경우 <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> 반환 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A&gt;</ph> 를 초과 합니다.</target>       </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>If you require more precision, specify <ph id="ph1">`format`</ph> with the "G17" format specification, which always returns 17 digits of precision, or "R", which returns 15 digits if the number can be represented with that precision or 17 digits if the number can only be represented with maximum precision.</source>
          <target state="translated">정교한 정밀도 필요로 하는 경우 지정 <ph id="ph1">`format`</ph> 는 항상 반환 17 자리 전체 자릿수 또는 "R", "G17" 형식 지정을 반환 하는 15 자리 수만 될 수 있는 경우 해당 정밀도, 17 자리로 나타낼 수 있는 최대 전체 자릿수도 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>The following example defines a numeric value and formats it as a currency value by using the "C" standard numeric format string and as a numeric value to three decimal places by using the "N" standard numeric format string.</source>
          <target state="translated">다음 예제에서는 숫자 값을 정의 찾아서을 통화 값으로 "C" 표준 숫자 서식 문자열을 사용 하 여과 세 개의 소수 자릿수 숫자 값으로 "N" 표준 숫자 형식 문자열을 사용 하 여입니다.</target>       </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>The result strings are formatted by using the conventions of the en-US culture.</source>
          <target state="translated">결과 문자열은 EN-US 문화권의 규칙을 사용 하 여 형식이 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>For more information on numeric format strings, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">숫자 형식 문자열에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>표준 숫자 형식 문자열<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> 및 <bpt id="p2">[</bpt>사용자 지정 숫자 형식 문자열<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>The following example displays several <ph id="ph1">&lt;xref:System.Double&gt;</ph> values using the supported standard numeric format specifiers together with three custom numeric format strings.</source>
          <target state="translated">다음 예제에서는 여러 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 와 세 개의 사용자 지정 숫자 형식 문자열을 함께 지원 되는 표준 숫자 서식 지정자를 사용 하 여 값입니다.</target>       </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>One of those custom format strings illustrates how to pad a <ph id="ph1">&lt;xref:System.Single&gt;</ph> value with leading zeros.</source>
          <target state="translated">패딩 하는 방법을 보여 줍니다 이러한 사용자 지정 형식 문자열 중 하나는 <ph id="ph1">&lt;xref:System.Single&gt;</ph> 값 앞에 오는 0입니다.</target>       </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>In addition, the example uses precision specifiers with each standard format specifier except for "R".</source>
          <target state="translated">또한이 예제에서는 "R"를 제외한 각 표준 형식 지정자와 함께 전체 자릿수 지정자를 사용합니다.</target>       </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>The values of the precision specifiers range from 0 to 3.</source>
          <target state="translated">전체 자릿수 지정자 범위는 0에서 3 값입니다.</target>       </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>To convert the numeric values to strings, the example uses the formatting conventions of the en-US culture.</source>
          <target state="translated">숫자 값을 문자열로 변환할 예제에서는 EN-US 문화권의 형식 규칙을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve" uid="M:System.Double.ToString(System.String)">
          <source><ph id="ph1">&lt;paramref name="format" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph>이 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>In some cases, <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values formatted with the "R" standard numeric format string do not successfully round-trip if compiled using the <ph id="ph2">&lt;see langword="/platform:x64" /&gt;</ph> or <ph id="ph3">&lt;see langword="/platform:anycpu" /&gt;</ph> switches and run on 64-bit systems.</source>
          <target state="translated"><ph id="ph2">&lt;see langword="/platform:x64" /&gt;</ph> 또는 <ph id="ph3">&lt;see langword="/platform:anycpu" /&gt;</ph> 스위치를 사용하여 컴파일되고 64비트 시스템에서 실행되는 경우 "R" 표준 숫자 형식 문자열로 형식이 지정된 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값이 성공적으로 라운드트립되지 않는 경우가 있습니다.</target>       </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>To work around this problem, you can format <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values by using the "G17" standard numeric format string.</source>
          <target state="translated">이 문제를 해결하려면 "G17" 표준 숫자 형식 문자열을 사용하여 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값의 형식을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String)">
          <source>The following example uses the "R" format string with a <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value that does not round-trip successfully, and also uses the "G17" format string to successfully round-trip the original value.</source>
          <target state="translated">다음 예제에서는 성공적으로 라운드트립되지 않는 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값에 "R" 형식 문자열을 사용하고 "G17" 형식 문자열도 사용하여 원래 값을 성공적으로 라운드트립합니다.</target>       </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>A numeric format string.</source>
          <target state="translated">숫자 서식 문자열입니다.</target>       </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>An object that supplies culture-specific formatting information.</source>
          <target state="translated">문화권별 서식 지정 정보를 제공하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</source>
          <target state="translated">지정된 형식 및 문화권별 형식 정보를 사용하여 이 인스턴스의 숫자 값을 해당 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>The string representation of the value of this instance as specified by <ph id="ph1">&lt;paramref name="format" /&gt;</ph> and <ph id="ph2">&lt;paramref name="provider" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="format" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="provider" /&gt;</ph>로 지정된 이 인스턴스 값의 문자열 표현입니다.</target>       </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">&lt;xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29&gt;</ph> method formats a <ph id="ph2">&lt;xref:System.Double&gt;</ph> value in a specified format of a specified culture.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.ToString%28System.String%2CSystem.IFormatProvider%29&gt;</ph> 메서드 형식을 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 지정된 된 문화권의 지정 된 형식에서 값입니다.</target>       </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>If you want to specify a different format or culture, use the other overloads of the <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> method, as follows:</source>
          <target state="translated">다른 형식이 나 문화권을 지정 하려는 경우 사용의 다른 오버 로드는 <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> 다음과 같이 메서드:</target>       </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>To use format</source>
          <target state="translated">형식을 사용 하려면</target>       </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>For culture</source>
          <target state="translated">문화권에 대 한</target>       </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>Use the overload</source>
          <target state="translated">오버 로드를 사용 하 여</target>       </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>Default ("G") format</source>
          <target state="translated">기본 ("G") 형식</target>       </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>Default (current) culture</source>
          <target state="translated">기본 (현재) 문화권</target>       </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>Default ("G") format</source>
          <target state="translated">기본 ("G") 형식</target>       </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>A specific culture</source>
          <target state="translated">특정 문화권</target>       </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>A specific format or precision</source>
          <target state="translated">특정 형식 또는 전체 자릿수</target>       </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>Default (current) culture</source>
          <target state="translated">기본 (현재) 문화권</target>       </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>The return value can be <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A&gt;</ph>, or the string representation of a number, as specified by <ph id="ph4">`format`</ph>.</source>
          <target state="translated">반환 값일 수 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A&gt;</ph>, 또는로 지정 된 숫자의 문자열 표현을 <ph id="ph4">`format`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">`format`</ph> parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers.</source>
          <target state="translated"><ph id="ph1">`format`</ph> 매개 변수는 D 및 X를 제외한 모든 유효한 표준 숫자 서식 지정자 및 사용자 지정 숫자 서식 지정자의 조합이 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph> or an empty string, the return value for this instance is formatted with the general numeric format specifier ("G").</source>
          <target state="translated">경우 <ph id="ph1">`format`</ph> 은 <ph id="ph2">`null`</ph> 이거나 빈 문자열을이 인스턴스에 대 한 반환 값 ("G")는 일반 숫자 형식 지정자와 함께 지정 됩니다.</target>       </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</source>
          <target state="translated">.NET Framework에서는 다음 서식 지정 항목에 자세히 설명 하는 광범위 한 서식 지정 지원을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>For more information about numeric format specifiers, see <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> and <bpt id="p2">[</bpt>Custom Numeric Format Strings<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>.</source>
          <target state="translated">숫자 서식 지정자에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>표준 숫자 형식 문자열<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> 및 <bpt id="p2">[</bpt>사용자 지정 숫자 형식 문자열<ept id="p2">](~/docs/standard/base-types/custom-numeric-format-strings.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>For more information about formatting, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">서식 지정 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>형식 지정<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter is an <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation whose <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns a <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> 매개 변수는 한 <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> 구현 인 <ph id="ph3">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> 메서드가 반환 되는 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>Typically, <ph id="ph1">`provider`</ph> is a <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object or a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object.</source>
          <target state="translated">일반적으로 <ph id="ph1">`provider`</ph> 는 <ph id="ph2">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 개체 또는 <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>The <ph id="ph1">`provider`</ph> parameter supplies culture-specific information used in formatting.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> 매개 변수에서 서식 지정에 사용 되는 문화권별 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph>, the return value is formatted using the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object for the current culture.</source>
          <target state="translated">경우 <ph id="ph1">`provider`</ph> 은 <ph id="ph2">`null`</ph>를 사용 하 여 반환 값의 형식이 <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 현재 문화권에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>By default, the return value only contains 15 digits of precision although a maximum of 17 digits is maintained internally.</source>
          <target state="translated">기본적으로 반환 값만 포함 15 자리의 전체 자릿수 내부적으로 최대 17 자리가 유지 합니다.</target>       </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>If the value of this instance has greater than 15 digits, <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> returns <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A&gt;</ph> instead of the expected number.</source>
          <target state="translated">이 인스턴스의 값이 15 자리 보다 큰 경우 <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph> 반환 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A&gt;</ph> 를 초과 합니다.</target>       </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>If you require more precision, specify <ph id="ph1">`format`</ph> with the "G17" format specification, which always returns 17 digits of precision, or "R", which returns 15 digits if the number can be represented with that precision or 17 digits if the number can only be represented with maximum precision.</source>
          <target state="translated">정교한 정밀도 필요로 하는 경우 지정 <ph id="ph1">`format`</ph> 는 항상 반환 17 자리 전체 자릿수 또는 "R", "G17" 형식 지정을 반환 하는 15 자리 수만 될 수 있는 경우 해당 정밀도, 17 자리로 나타낼 수 있는 최대 전체 자릿수도 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>The following example displays a <ph id="ph1">&lt;xref:System.Double&gt;</ph> value using each of the supported standard numeric format specifiers for several different cultures.</source>
          <target state="translated">다음 예제에서는 표시 된 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 각 지원 되는 표준 숫자 서식 지정자를 사용 하 여 다양 한 문화권에 대 한 값입니다.</target>       </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>The following example illustrates the use of <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph>, taking a <ph id="ph2">&lt;xref:System.String&gt;</ph> and an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> as parameters.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Double.ToString%2A&gt;</ph>해는 <ph id="ph2">&lt;xref:System.String&gt;</ph> 및 <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>In some cases, <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values formatted with the "R" standard numeric format string do not successfully round-trip if compiled using the <ph id="ph2">&lt;see langword="/platform:x64" /&gt;</ph> or <ph id="ph3">&lt;see langword="/platform:anycpu" /&gt;</ph> switches and run on 64-bit systems.</source>
          <target state="translated"><ph id="ph2">&lt;see langword="/platform:x64" /&gt;</ph> 또는 <ph id="ph3">&lt;see langword="/platform:anycpu" /&gt;</ph> 스위치를 사용하여 컴파일되고 64비트 시스템에서 실행되는 경우 "R" 표준 숫자 형식 문자열로 형식이 지정된 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값이 성공적으로 라운드트립되지 않는 경우가 있습니다.</target>       </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>To work around this problem, you can format <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> values by using the "G17" standard numeric format string.</source>
          <target state="translated">이 문제를 해결하려면 "G17" 표준 숫자 형식 문자열을 사용하여 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값의 형식을 지정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.ToString(System.String,System.IFormatProvider)">
          <source>The following example uses the "R" format string with a <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> value that does not round-trip successfully, and also uses the "G17" format string to successfully round-trip the original value.</source>
          <target state="translated">다음 예제에서는 성공적으로 라운드트립되지 않는 <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph> 값에 "R" 형식 문자열을 사용하고 "G17" 형식 문자열도 사용하여 원래 값을 성공적으로 라운드트립합니다.</target>       </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve" uid="T:System.Double">
          <source>Converts the string representation of a number to its double-precision floating-point number equivalent.</source>
          <target state="translated">숫자의 문자열 표현을 같은 값의 배정밀도 부동 소수점 숫자로 변환합니다.</target>       </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve" uid="T:System.Double">
          <source>A return value indicates whether the conversion succeeded or failed.</source>
          <target state="translated">반환 값은 변환이 성공했는지 아니면 실패했는지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>A string containing a number to convert.</source>
          <target state="translated">변환할 숫자가 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>When this method returns, contains the double-precision floating-point number equivalent of the <bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept> parameter, if the conversion succeeded, or zero if the conversion failed.</source>
          <target state="translated">이 메서드는 변환이 성공한 경우 <bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept> 매개 변수의 배정밀도 부동 소수점 숫자를 반환하고 변환이 실패한 경우 0을 반환합니다.</target>       </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>The conversion fails if the <bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept> parameter is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, is not a number in a valid format, or represents a number less than <ph id="ph3">&lt;see cref="F:System.Double.MinValue" /&gt;</ph> or greater than <ph id="ph4">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>이거나 올바른 형식의 숫자가 아니거나, <ph id="ph3">&lt;see cref="F:System.Double.MinValue" /&gt;</ph>보다 작거나 <ph id="ph4">&lt;see cref="F:System.Double.MaxValue" /&gt;</ph>보다 큰 숫자를 나타내는 경우 변환이 실패합니다.</target>       </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>This parameter is passed uninitialized; any value originally supplied in <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> will be overwritten.</source>
          <target state="translated">이 매개 변수는 초기화되지 않은 상태로 전달됩니다. 원래 <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept>에 제공된 모든 값을 덮어쓰게 됩니다.</target>       </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>Converts the string representation of a number to its double-precision floating-point number equivalent.</source>
          <target state="translated">숫자의 문자열 표현을 같은 값의 배정밀도 부동 소수점 숫자로 변환합니다.</target>       </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>A return value indicates whether the conversion succeeded or failed.</source>
          <target state="translated">반환 값은 변환이 성공했는지 아니면 실패했는지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="s" /&gt;</ph> was converted successfully; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 성공적으로 변환되었으면 <ph id="ph2">&lt;paramref name="s" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>This overload differs from the <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value.</source>
          <target state="translated">와 다른이 오버 로드는 <ph id="ph1">&lt;xref:System.Double.Parse%28System.String%29?displayProperty=nameWithType&gt;</ph> 메서드 구문 분석 된 숫자 값을 반환 하는 대신 구문 분석 작업이 성공 했는지를 나타내는 부울 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>It eliminates the need to use exception handling to test for a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> in the event that <ph id="ph2">`s`</ph> is invalid and cannot be successfully parsed.</source>
          <target state="translated">테스트 하기 위해 예외 처리를 사용할 필요가 <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> 에 <ph id="ph2">`s`</ph> 잘못 되었으며 성공적으로 구문 분석할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>The <ph id="ph1">`s`</ph> parameter can contain the current culture's <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType&gt;</ph> (the string comparison is case-sensitive), or a string of the form:</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수는 현재 문화권의 포함 될 수 있습니다 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType&gt;</ph> (문자열 비교는 대/소문자 구분) 또는 형식의 문자열:</target>       </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>[ws][sign][integral-digits,]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</source>
          <target state="translated">[ws][sign][integral-digits,]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</target>       </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>Elements in square brackets are optional.</source>
          <target state="translated">대괄호에서는 요소는 선택 사항입니다.</target>       </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>The following table describes each element.</source>
          <target state="translated">다음 표에서 각 요소에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>Element</source>
          <target state="translated">요소</target>       </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>A series of white-space characters.</source>
          <target state="translated">일련의 공백 문자입니다.</target>       </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>A negative sign or positive sign symbol.</source>
          <target state="translated">음수 부호 또는 양수 부호 기호입니다.</target>       </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>A series of numeric characters ranging from 0 to 9 that specify the integral part of the number.</source>
          <target state="translated">일련의 숫자 0에서 하는 9 사이의 숫자의 정수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>Integral-digits can be absent if there are fractional-digits.</source>
          <target state="translated">정수 계열 자릿수 수 없어야 경우 소수 자릿수입니다.</target>       </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source><bpt id="p1">*</bpt>,<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>,<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>A culture-specific group separator symbol.</source>
          <target state="translated">Culture 관련 그룹 구분 기호입니다.</target>       </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>.<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>A culture-specific decimal point symbol.</source>
          <target state="translated">Culture 별 소수점 기호입니다.</target>       </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>A series of numeric characters ranging from 0 to 9 that specify the fractional part of the number.</source>
          <target state="translated">일련의 숫자 0에서 하는 9 사이의 숫자의 소수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source><bpt id="p1">*</bpt>E<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>E<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>An uppercase or lowercase character 'e', that indicates exponential (scientific) notation.</source>
          <target state="translated">대 / 소문자 구분 문자 'e' 지 수 (과학적 표기법) 표기법을 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>A series of numeric characters ranging from 0 to 9 that specify an exponent.</source>
          <target state="translated">일련의 숫자 0에서 하는 9 사이의 지 수를 지정 합니다.</target>       </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>For more information about numeric formats, see <bpt id="p1">[</bpt>Formatting Types<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>.</source>
          <target state="translated">숫자 형식에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>형식 지정<ept id="p1">](~/docs/standard/base-types/formatting-types.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>The <ph id="ph1">`s`</ph> parameter is interpreted by using a combination of the <ph id="ph2">&lt;xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType&gt;</ph> flags.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수는 함께 사용 하 여 해석 됩니다는 <ph id="ph2">&lt;xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>This means that white space and thousands separators are allowed but currency symbols are not.</source>
          <target state="translated">즉, 공백과 천 단위 구분 기호는 사용할 수 있지만 통화 기호를 없는 합니다.</target>       </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <ph id="ph1">`s`</ph>, use the <ph id="ph2">&lt;xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType&gt;</ph> method overload.</source>
          <target state="translated">요소를 명시적으로 정의 하려면 (통화 기호, 1000 단위와 같은 구분 기호 및 공백)에 나타날 수 있는 <ph id="ph1">`s`</ph>를 사용 하 여는 <ph id="ph2">&lt;xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>The <ph id="ph1">`s`</ph> parameter is parsed using the formatting information in a <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object that is initialized for the current system culture.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수에서 서식 지정 정보를 사용 하 여 구문 분석 되는 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 현재 시스템 문화권에 따라 초기화 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>For more information, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType&gt;</ph>을 참조하세요.</target>       </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>To parse a string using the formatting information of some other specified culture, use the <ph id="ph1">&lt;xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType&gt;</ph> method overload.</source>
          <target state="translated">구문 분석 하려면 문화권 지정 다른 서식 지정 정보를 사용 하 여, 사용 된 <ph id="ph1">&lt;xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드 합니다.</target>       </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>Ordinarily, if you pass the <ph id="ph1">&lt;xref:System.Double.TryParse%2A?displayProperty=nameWithType&gt;</ph> method a string that is created by calling the <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> method, the original <ph id="ph3">&lt;xref:System.Double&gt;</ph> value is returned.</source>
          <target state="translated">일반적으로 전달 하는 경우는 <ph id="ph1">&lt;xref:System.Double.TryParse%2A?displayProperty=nameWithType&gt;</ph> 메서드를 호출 하 여 만든 문자열에는 <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> 메서드, 원래 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 값이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>However, because of a loss of precision, the values may not be equal.</source>
          <target state="translated">그러나 정밀도 손실 때문에 값 아니어야 동일 합니다.</target>       </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>In addition, attempting to parse the string representation of either <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph> or <ph id="ph2">&lt;xref:System.Double.MaxValue&gt;</ph> throws an <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph>, as the following example illustrates.</source>
          <target state="translated">또한의 문자열 표현을 구문 분석 하려고 <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Double.MaxValue&gt;</ph> throw 한 <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph>다음 예제와 같이 합니다.</target>       </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>If a separator is encountered in the <ph id="ph1">`s`</ph> parameter during a parse operation, and the decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</source>
          <target state="translated">구분 기호에서 발견 되는 <ph id="ph1">`s`</ph> 10 진수를 그룹 구분 기호 및 구문 분석 작업을 사용 하는 동안 매개 변수는 동일, 구문 분석 작업의 구분 기호는 그룹 구분 기호가 아니라 소수 구분 기호로 간주 합니다.</target>       </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>For more information about separators, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>.</source>
          <target state="translated">구분 기호에 대 한 자세한 내용은 참조 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29&gt;</ph> method to convert the string representations of numeric values to <ph id="ph2">&lt;xref:System.Double&gt;</ph> values.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29&gt;</ph> 숫자 값의 문자열 표현을 상호 변환 하는 메서드 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Double@)">
          <source>It assumes that en-US is the current culture.</source>
          <target state="translated">해당 EN-US가 현재 문화권이 가정 합니다.</target>       </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>A string containing a number to convert.</source>
          <target state="translated">변환할 숫자가 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Globalization.NumberStyles" /&gt;</ph> values that indicates the permitted format of <bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>에 사용할 수 있는 형식을 나타내는 <ph id="ph1">&lt;see cref="T:System.Globalization.NumberStyles" /&gt;</ph> 값의 비트 조합입니다.</target>       </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>A typical value to specify is <ph id="ph1">&lt;see cref="F:System.Globalization.NumberStyles.Float" /&gt;</ph> combined with <ph id="ph2">&lt;see cref="F:System.Globalization.NumberStyles.AllowThousands" /&gt;</ph>.</source>
          <target state="translated">지정할 일반적인 값은 <ph id="ph2">&lt;see cref="F:System.Globalization.NumberStyles.AllowThousands" /&gt;</ph>와 결합되는 <ph id="ph1">&lt;see cref="F:System.Globalization.NumberStyles.Float" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IFormatProvider" /&gt;</ph> that supplies culture-specific formatting information about <bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>에 대한 문화권별 서식 지정 정보를 제공하는 <ph id="ph1">&lt;see cref="T:System.IFormatProvider" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>When this method returns, contains a double-precision floating-point number equivalent of the numeric value or symbol contained in <bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>, if the conversion succeeded, or zero if the conversion failed.</source>
          <target state="translated">이 메서드는 변환이 성공한 경우 <bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept>에 포함된 숫자 값이나 기호의 배정밀도 부동 소수점 숫자를 반환하며 변환이 실패한 경우 0을 반환합니다.</target>       </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The conversion fails if the <bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept> parameter is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>, is not in a format compliant with <bpt id="p2">&lt;c&gt;</bpt>style<ept id="p2">&lt;/c&gt;</ept>, represents a number less than <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph> or greater than <ph id="ph4">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>, or if <bpt id="p3">&lt;c&gt;</bpt>style<ept id="p3">&lt;/c&gt;</ept> is not a valid combination of <ph id="ph5">&lt;see cref="T:System.Globalization.NumberStyles" /&gt;</ph> enumerated constants.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>s<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 <ph id="ph1">&lt;see langword="null" /&gt;</ph> 또는 <ph id="ph2">&lt;see cref="F:System.String.Empty" /&gt;</ph>이거나, <bpt id="p2">&lt;c&gt;</bpt>스타일<ept id="p2">&lt;/c&gt;</ept>과 규격 형식이 아니거나, <ph id="ph3">&lt;see cref="F:System.SByte.MinValue" /&gt;</ph>보다 작거나 <ph id="ph4">&lt;see cref="F:System.SByte.MaxValue" /&gt;</ph>보다 큰 숫자를 나타내거나, <bpt id="p3">&lt;c&gt;</bpt>스타일<ept id="p3">&lt;/c&gt;</ept>이 <ph id="ph5">&lt;see cref="T:System.Globalization.NumberStyles" /&gt;</ph> 열거형 상수의 유효한 조합이 아닌 경우 변환이 실패합니다.</target>       </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>This parameter is passed uninitialized; any value originally supplied in <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept> will be overwritten.</source>
          <target state="translated">이 매개 변수는 초기화되지 않은 상태로 전달됩니다. 원래 <bpt id="p1">&lt;c&gt;</bpt>result<ept id="p1">&lt;/c&gt;</ept>에 제공된 모든 값을 덮어쓰게 됩니다.</target>       </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>Converts the string representation of a number in a specified style and culture-specific format to its double-precision floating-point number equivalent.</source>
          <target state="translated">지정된 스타일 및 문화권별 형식의 숫자에 대한 문자열 표현을 같은 값의 배정밀도 부동 소수점 숫자로 변환합니다.</target>       </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>A return value indicates whether the conversion succeeded or failed.</source>
          <target state="translated">반환 값은 변환이 성공했는지 아니면 실패했는지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="s" /&gt;</ph> was converted successfully; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>가 성공적으로 변환되었으면 <ph id="ph2">&lt;paramref name="s" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <ph id="ph1">&lt;xref:System.Double.TryParse%2A&gt;</ph> method is like the <ph id="ph2">&lt;xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29&gt;</ph> method, except this method does not throw an exception if the conversion fails.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Double.TryParse%2A&gt;</ph> 방법은 <ph id="ph2">&lt;xref:System.Double.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29&gt;</ph> 메서드와 변환에 실패 하면이 메서드가 예외를 throw 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="1074" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>If the conversion succeeds, the return value is <ph id="ph1">`true`</ph> and the <ph id="ph2">`result`</ph> parameter is set to the outcome of the conversion.</source>
          <target state="translated">반환 값은 변환이 성공 <ph id="ph1">`true`</ph> 및 <ph id="ph2">`result`</ph> 매개 변수 변환의 결과를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1075" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>If the conversion fails, the return value is <ph id="ph1">`false`</ph> and the <ph id="ph2">`result`</ph> parameter is set to zero.</source>
          <target state="translated">반환 값은 변환이 실패할 경우 <ph id="ph1">`false`</ph> 및 <ph id="ph2">`result`</ph> 매개 변수를 0으로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="1076" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>This eliminates the need to use exception handling to test for a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> in the event that <ph id="ph2">`s`</ph> is invalid and cannot be successfully parsed.</source>
          <target state="translated">이렇게 하면 테스트 하기 위해 예외 처리를 사용할 필요가 없습니다. 한 <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> 에 <ph id="ph2">`s`</ph> 잘못 되었으며 성공적으로 구문 분석할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1077" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <ph id="ph1">`style`</ph> parameter defines the allowable format of the <ph id="ph2">`s`</ph> parameter for the parse operation to succeed.</source>
          <target state="translated"><ph id="ph1">`style`</ph> 매개 변수를 허용 되는 형식을 정의 <ph id="ph2">`s`</ph> 구문 분석 작업이 성공 하려면에 대 한 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1078" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>It must be a combination of bit flags from the <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumeration.</source>
          <target state="translated">비트 플래그의 조합 이어야 합니다는 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="1079" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The following <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> members are not supported:</source>
          <target state="translated">다음 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> 멤버가 지원 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="1080" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <ph id="ph1">`s`</ph> parameter can contain <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, or <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType&gt;</ph> for the culture indicated by <ph id="ph5">`provider`</ph>.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수에 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType&gt;</ph>, 또는 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType&gt;</ph> 하 여 지정 된 문화권에 대 한 <ph id="ph5">`provider`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1081" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>In addition, depending on the value of <ph id="ph1">`style`</ph>, the <ph id="ph2">`s`</ph> parameter may include the following elements:</source>
          <target state="translated">값에 따라 또한 <ph id="ph1">`style`</ph>, <ph id="ph2">`s`</ph> 매개 변수는 다음과 같은 요소가 포함 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1082" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>[ws] [$] [sign][integral-digits,]integral-digits[.fractional-digits][e[sign]exponential-digits][ws]</source>
          <target state="translated">[ws] [$] [sign][integral-digits,]integral-digits[.fractional-digits][e[sign]exponential-digits][ws]</target>       </trans-unit>
        <trans-unit id="1083" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>Elements in square brackets ([ and ]) are optional.</source>
          <target state="translated">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</target>       </trans-unit>
        <trans-unit id="1084" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The following table describes each element.</source>
          <target state="translated">다음 표에서 각 요소에 설명 합니다.</target>       </trans-unit>
        <trans-unit id="1085" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>Element</source>
          <target state="translated">요소</target>       </trans-unit>
        <trans-unit id="1086" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>Description</source>
          <target state="translated">설명</target>       </trans-unit>
        <trans-unit id="1087" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1088" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>Optional white space.</source>
          <target state="translated">선택적 공백입니다.</target>       </trans-unit>
        <trans-unit id="1089" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>White space can appear at the beginning of <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">맨 앞에 공백이 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="1090" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>It can appear at the end of <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">끝에 나 나타날 수 있습니다 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="1091" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>A culture-specific currency symbol.</source>
          <target state="translated">Culture 별 통화 기호입니다.</target>       </trans-unit>
        <trans-unit id="1092" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>Its position in the string is defined by the <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType&gt;</ph> properties of the <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object returned by the <ph id="ph4">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> method of the <ph id="ph5">`provider`</ph> parameter.</source>
          <target state="translated">위치는 문자열에 의해 정의 됩니다는 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType&gt;</ph> 의 속성은 <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 에서 반환 된 개체는 <ph id="ph4">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> 의 메서드는 <ph id="ph5">`provider`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="1093" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The currency symbol can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">통화 기호에 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="1094" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>sign<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1095" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>An optional sign.</source>
          <target state="translated">가 선택적 부호입니다.</target>       </trans-unit>
        <trans-unit id="1096" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The sign can appear at the beginning of <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType&gt;</ph> flag, and it can appear at the end of <ph id="ph4">`s`</ph> if <ph id="ph5">`style`</ph> includes the <ph id="ph6">&lt;xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">부호의 시작 부분에 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType&gt;</ph> 의 끝에 있고, 나타날 수 있습니다 <ph id="ph4">`s`</ph> 경우 <ph id="ph5">`style`</ph> 포함는 <ph id="ph6">&lt;xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="1097" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>Parentheses can be used in <ph id="ph1">`s`</ph> to indicate a negative value if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">괄호를 사용할 수 있습니다 <ph id="ph1">`s`</ph> 경우 음수 값을 나타내는 데 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="1098" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1099" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>A series of digits ranging from 0 to 9 that specify the integral part of the number.</source>
          <target state="translated">일련의 숫자 0에서 하는 9 사이의 숫자의 정수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="1100" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>Integral-digits can be absent if there are fractional-digits.</source>
          <target state="translated">정수 계열 자릿수 수 없어야 경우 소수 자릿수입니다.</target>       </trans-unit>
        <trans-unit id="1101" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source><bpt id="p1">*</bpt>,<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>,<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1102" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>A culture-specific thousands separator symbol.</source>
          <target state="translated">Culture 별 1000 단위 구분 기호입니다.</target>       </trans-unit>
        <trans-unit id="1103" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The current culture's thousands separator symbol can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">현재 문화권의 천 단위 구분 기호에 나타날 수 있습니다 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="1104" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>.<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1105" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>A culture-specific decimal point symbol.</source>
          <target state="translated">Culture 별 소수점 기호입니다.</target>       </trans-unit>
        <trans-unit id="1106" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The current culture's decimal point symbol can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">에 현재 문화권의 소수점 기호가 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="1107" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>A series of digits ranging from 0 to 9 that specify the fractional part of the number.</source>
          <target state="translated">일련의 숫자 0에서 하는 9 사이의 숫자의 소수 부분을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="1109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>Fractional digits can appear in <ph id="ph1">`s`</ph> if <ph id="ph2">`style`</ph> includes the <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">소수 자릿수에 나타날 수 <ph id="ph1">`s`</ph> 경우 <ph id="ph2">`style`</ph> 포함는 <ph id="ph3">&lt;xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="1110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source><bpt id="p1">*</bpt>e<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>e<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The e or E character, which indicates that <ph id="ph1">`s`</ph> can represent a number using exponential notation.</source>
          <target state="translated">E 또는 E 문자 임을 나타내는 <ph id="ph1">`s`</ph> 지 수 표기법을 사용 하 여 숫자를 표시할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="1112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <ph id="ph1">`s`</ph> parameter can represent a number in exponential notation if style includes the <ph id="ph2">&lt;xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수 스타일을 포함 하는 경우 지 수 표기법으로 숫자를 나타낼 수는 <ph id="ph2">&lt;xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType&gt;</ph> 플래그입니다.</target>       </trans-unit>
        <trans-unit id="1113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>exponential-digits<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>A series of digits ranging from 0 to 9 that specify an exponent.</source>
          <target state="translated">일련의 0에서 지 수를 지정 하는 9 사이의 숫자입니다.</target>       </trans-unit>
        <trans-unit id="1115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>A string with digits only (which corresponds to the <ph id="ph1">&lt;xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType&gt;</ph> style) always parses successfully.</source>
          <target state="translated">숫자만 문자열 (해당 하는 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType&gt;</ph> 스타일) 항상 성공적으로 구문 분석 합니다.</target>       </trans-unit>
        <trans-unit id="1116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The remaining <ph id="ph1">&lt;xref:System.Globalization.NumberStyles?displayProperty=nameWithType&gt;</ph> members control elements that may be but are not required to be present in the input string.</source>
          <target state="translated">나머지 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles?displayProperty=nameWithType&gt;</ph> 멤버 요소는 입력된 문자열에 필요 하지 않을 수도 있는 제어 합니다.</target>       </trans-unit>
        <trans-unit id="1117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The following table indicates how individual <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> flags affect the elements that may be present in <ph id="ph2">`s`</ph>.</source>
          <target state="translated">다음 표에서 개별 <ph id="ph1">&lt;xref:System.Globalization.NumberStyles&gt;</ph> 플래그에 있을 수 있는 요소에 영향을 <ph id="ph2">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>NumberStyles value</source>
          <target state="translated">NumberStyles 값</target>       </trans-unit>
        <trans-unit id="1119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>Elements permitted in s in addition to digits</source>
          <target state="translated">S에서 숫자 허용 되는 요소</target>       </trans-unit>
        <trans-unit id="1120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept> element only.</source>
          <target state="translated"><bpt id="p1">*</bpt>정수 계열 자릿수<ept id="p1">*</ept> 요소만 합니다.</target>       </trans-unit>
        <trans-unit id="1121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>.<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="1122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>and <bpt id="p1">*</bpt>fractional-digits<ept id="p1">*</ept> elements.</source>
          <target state="translated">및 <bpt id="p1">*</bpt>소수 자릿수가<ept id="p1">*</ept> 요소입니다.</target>       </trans-unit>
        <trans-unit id="1123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <ph id="ph1">`s`</ph> parameter can also use exponential notation.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수로 지 수 표기법을 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="1124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>This flag by itself supports values in the form <bpt id="p1">*</bpt>integral-digits<ept id="p1">*</ept>E<bpt id="p2">*</bpt>exponential-digits<ept id="p2">*</ept>; additional flags are needed to successfully parse strings in exponential notation with such elements as positive or negative signs and decimal point symbols.</source>
          <target state="translated">이 플래그를 단독으로 폼의 값을 지원 <bpt id="p1">*</bpt>정수 계열 숫자<ept id="p1">*</ept>E<bpt id="p2">*</bpt>자리 지 수<ept id="p2">*</ept>추가; 등의 요소와 지 수 표기법에서 문자열을 구문 분석 하는 데 필요한 플래그 양수 또는 음수 기호 및 소수점 기호입니다.</target>       </trans-unit>
        <trans-unit id="1125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the beginning of <ph id="ph1">`s`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept> 의 시작 부분에 요소 <ph id="ph1">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the end of <ph id="ph1">`s`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept> 의 끝에 요소 <ph id="ph1">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element at the beginning of <ph id="ph1">`s`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>기호<ept id="p1">*</ept> 의 시작 부분에 요소 <ph id="ph1">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element at the end of <ph id="ph1">`s`</ph>.</source>
          <target state="translated"><bpt id="p1">*</bpt>기호<ept id="p1">*</ept> 의 끝에 요소 <ph id="ph1">`s`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <bpt id="p1">*</bpt>sign<ept id="p1">*</ept> element in the form of parentheses enclosing the numeric value.</source>
          <target state="translated"><bpt id="p1">*</bpt>기호<ept id="p1">*</ept> 숫자 값이 들어 괄호 안에 형식 요소입니다.</target>       </trans-unit>
        <trans-unit id="1130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <bpt id="p1">*</bpt>,<ept id="p1">*</ept> element.</source>
          <target state="translated"><bpt id="p1">*</bpt>,<ept id="p1">*</ept> 요소입니다.</target>       </trans-unit>
        <trans-unit id="1131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <bpt id="p1">*</bpt><ph id="ph1">$</ph><ept id="p1">*</ept> element.</source>
          <target state="translated"><bpt id="p1">*</bpt> <ph id="ph1">$</ph> <ept id="p1">*</ept> 요소입니다.</target>       </trans-unit>
        <trans-unit id="1132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>All.</source>
          <target state="translated">모두.</target>       </trans-unit>
        <trans-unit id="1133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <ph id="ph1">`s`</ph> parameter cannot represent a hexadecimal number or a number in exponential notation.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수를 16 진수 숫자 또는 지 수 표기법으로 숫자를에서 나타낼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <bpt id="p1">*</bpt>ws<ept id="p1">*</ept> element at the beginning or end of <ph id="ph1">`s`</ph>, <bpt id="p2">*</bpt>sign<ept id="p2">*</ept> at the beginning of <ph id="ph2">`s`</ph>, and the <bpt id="p3">*</bpt>.<ept id="p3">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>ws<ept id="p1">*</ept> 부분이 나 끝 부분에 요소 <ph id="ph1">`s`</ph>, <bpt id="p2">*</bpt>기호<ept id="p2">*</ept> 맨 앞에 <ph id="ph2">`s`</ph>, 및 <bpt id="p3">*</bpt>합니다.<ept id="p3">*</ept></target>       </trans-unit>
        <trans-unit id="1135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>symbol.</source>
          <target state="translated">기호입니다.</target>       </trans-unit>
        <trans-unit id="1136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <ph id="ph1">`s`</ph> parameter can also use exponential notation.</source>
          <target state="translated"><ph id="ph1">`s`</ph> 매개 변수로 지 수 표기법을 사용할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="1137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <ph id="ph1">`ws`</ph>, <ph id="ph2">`sign`</ph>, thousands separator (<bpt id="p1">*</bpt>,),<ept id="p1">*</ept> and decimal point (<bpt id="p2">*</bpt>.<ept id="p2">*</ept>) elements.</source>
          <target state="translated"><ph id="ph1">`ws`</ph>, <ph id="ph2">`sign`</ph>, 1000 단위 구분 기호 (<bpt id="p1">*</bpt>,),<ept id="p1">*</ept> 및 소수점 (<bpt id="p2">*</bpt>.<ept id="p2">*</ept>) 요소입니다.</target>       </trans-unit>
        <trans-unit id="1138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>All styles, except <ph id="ph1">`s`</ph> cannot represent a hexadecimal number.</source>
          <target state="translated">모든 스타일 제외 하 고 <ph id="ph1">`s`</ph> 16 진수를 나타낼 수 없습니다.</target>       </trans-unit>
        <trans-unit id="1139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <ph id="ph1">`provider`</ph> parameter is a <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation, such as a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> or <ph id="ph4">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> 매개 변수는 한 <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> 구현에서와 같은 <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 또는 <ph id="ph4">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="1140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The <ph id="ph1">`provider`</ph> parameter supplies culture-specific information used in parsing.</source>
          <target state="translated"><ph id="ph1">`provider`</ph> 매개 변수에서 구문 분석에 사용 되는 문화권별 정보를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="1141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>If <ph id="ph1">`provider`</ph> is <ph id="ph2">`null`</ph> or a <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object cannot be obtained, the format information for the current culture is used.</source>
          <target state="translated">경우 <ph id="ph1">`provider`</ph> 은 <ph id="ph2">`null`</ph> 또는 <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 개체를 가져올 수, 현재 문화권에 대 한 형식 정보를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="1142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The conversion fails if the <ph id="ph1">`s`</ph> parameter is <ph id="ph2">`null`</ph> or not a numeric value, the <ph id="ph3">`provider`</ph> parameter does not yield a <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> object, or the <ph id="ph5">`style`</ph> parameter is not a combination of bit flags from the <ph id="ph6">&lt;xref:System.Globalization.NumberStyles&gt;</ph> enumeration.</source>
          <target state="translated">변환에 실패는 <ph id="ph1">`s`</ph> 매개 변수는 <ph id="ph2">`null`</ph> 또는 숫자 값이 아닌,는 <ph id="ph3">`provider`</ph> 매개 변수를 생성 하지 않습니다는 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo&gt;</ph> 개체 또는 <ph id="ph5">`style`</ph> 매개 변수가의 비트 플래그의 조합을 않습니다는 <ph id="ph6">&lt;xref:System.Globalization.NumberStyles&gt;</ph> 열거형입니다.</target>       </trans-unit>
        <trans-unit id="1143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>Ordinarily, if you pass the <ph id="ph1">&lt;xref:System.Double.TryParse%2A?displayProperty=nameWithType&gt;</ph> method a string that is created by calling the <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> method, the original <ph id="ph3">&lt;xref:System.Double&gt;</ph> value is returned.</source>
          <target state="translated">일반적으로 전달 하는 경우는 <ph id="ph1">&lt;xref:System.Double.TryParse%2A?displayProperty=nameWithType&gt;</ph> 메서드를 호출 하 여 만든 문자열에는 <ph id="ph2">&lt;xref:System.Double.ToString%2A?displayProperty=nameWithType&gt;</ph> 메서드, 원래 <ph id="ph3">&lt;xref:System.Double&gt;</ph> 값이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="1144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>However, because of a loss of precision, the values may not be equal.</source>
          <target state="translated">그러나 정밀도 손실 때문에 값 아니어야 동일 합니다.</target>       </trans-unit>
        <trans-unit id="1145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>In addition, attempting to parse the string representation of either <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph> or <ph id="ph2">&lt;xref:System.Double.MaxValue&gt;</ph> throws an <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph>, as the following example illustrates.</source>
          <target state="translated">또한의 문자열 표현을 구문 분석 하려고 <ph id="ph1">&lt;xref:System.Double.MinValue&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Double.MaxValue&gt;</ph> throw 한 <ph id="ph3">&lt;xref:System.OverflowException&gt;</ph>다음 예제와 같이 합니다.</target>       </trans-unit>
        <trans-unit id="1146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>If a separator is encountered in the <ph id="ph1">`s`</ph> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</source>
          <target state="translated">구분 기호에서 발견 되는 <ph id="ph1">`s`</ph> 분석 및 적용 가능한 통화 또는 숫자의 소수 하는 동안 매개 변수 및 그룹 구분 기호가 동일 합니다. 구문 분석 작업의 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</target>       </trans-unit>
        <trans-unit id="1147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>For more information about separators, see <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>.</source>
          <target state="translated">구분 기호에 대 한 자세한 내용은 참조 <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="1148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType&gt;</ph> method to parse the string representation of numbers that have a particular style and are formatted using the conventions of a particular culture.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Double.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Double%40%29?displayProperty=nameWithType&gt;</ph> 특정 스타일 및 특정 문화권의 규칙을 사용 하 여 서식이 지정 된 숫자의 문자열 표현을 구문 분석 하는 메서드.</target>       </trans-unit>
        <trans-unit id="1149" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source><ph id="ph1">&lt;paramref name="style" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Globalization.NumberStyles" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="style" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Globalization.NumberStyles" /&gt;</ph> 값이 아닙니다.</target>       </trans-unit>
        <trans-unit id="1150" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="1151" translate="yes" xml:space="preserve" uid="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
          <source><ph id="ph1">&lt;paramref name="style" /&gt;</ph> includes the <ph id="ph2">&lt;see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="style" /&gt;</ph>이 <ph id="ph2">&lt;see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /&gt;</ph> 값을 포함하는 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>