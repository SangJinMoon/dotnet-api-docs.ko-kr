<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IObservable`1.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c2589d1e6912470385b77aa8afee4b096c72c259.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2589d1e6912470385b77aa8afee4b096c72c259</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The object that provides notification information.</source>
          <target state="translated">알림 정보를 제공하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IObservable`1">
          <source>Defines a provider for push-based notification.</source>
          <target state="translated">푸시 기반 알림의 공급자를 정의합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The <ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph> and <ph id="ph2">&lt;xref:System.IObservable%601&gt;</ph> interfaces provide a generalized mechanism for push-based notification, also known as the observer design pattern.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IObservable%601&gt;</ph> 인터페이스 푸시 기반 알림, 관찰자 디자인 패턴 라고도 하는 일반화 된 메커니즘을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> interface represents the class that sends notifications (the provider); the <ph id="ph2">&lt;xref:System.IObserver%601&gt;</ph> interface represents the class that receives them (the observer).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> 인터페이스를 나타냅니다 (공급자); 알림을 전송 하는 클래스는 <ph id="ph2">&lt;xref:System.IObserver%601&gt;</ph> 인터페이스를 (관찰자) 받는 클래스를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source><ph id="ph1">`T`</ph> represents the class that provides the notification information.</source>
          <target state="translated"><ph id="ph1">`T`</ph> 알림 정보를 제공 하는 클래스를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>In some push-based notifications, the <ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph> implementation and <ph id="ph2">`T`</ph> can represent the same type.</source>
          <target state="translated">푸시 기반 알림을 일부에 <ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph> 구현 및 <ph id="ph2">`T`</ph> 동일한 형식을 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The provider must implement a single method, <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph>, that indicates that an observer wants to receive push-based notifications.</source>
          <target state="translated">공급자는 단일 메서드를 구현 해야 <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph>, 관찰자 푸시 기반 알림을 수신 하려는 나타내는입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>Callers to the method pass an instance of the observer.</source>
          <target state="translated">메서드 호출자 관찰자의 인스턴스를 전달 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The method returns an <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> implementation that enables observers to cancel notifications at any time before the provider has stopped sending them.</source>
          <target state="translated">메서드는 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 관찰자가 알림을 공급자가 보내기를 중지 하기 전에 언제 든 지 취소할 수 있도록 구현 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>At any given time, a given provider may have zero, one, or multiple observers.</source>
          <target state="translated">지정된 된 시간에 지정 된 공급자 0, 1 개 또는 여러 관찰자가 있을 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The provider is responsible for storing references to observers and ensuring that they are valid before it sends notifications.</source>
          <target state="translated">공급자는 관찰자에 대 한 참조를 저장 하 고 증명이 유효 하다 고 알림을 보내기 전에 확인 하는 일을 담당 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> interface does not make any assumptions about the number of observers or the order in which notifications are sent.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> 인터페이스 관찰자 또는 알림을 보내는 주문 수에 대 한 가정을 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The provider sends the following three kinds of notifications to the observer by calling <ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph> methods:</source>
          <target state="translated">공급자를 호출 하 여 다음과 같은 세 가지 알림 관찰자에 게 보냅니다 <ph id="ph1">&lt;xref:System.IObserver%601&gt;</ph> 메서드:</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The current data.</source>
          <target state="translated">현재 데이터입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The provider can call the <ph id="ph1">&lt;xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType&gt;</ph> method to pass the observer a <ph id="ph2">`T`</ph> object that has current data, changed data, or fresh data.</source>
          <target state="translated">공급자를 호출할 수는 <ph id="ph1">&lt;xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType&gt;</ph> 관찰자를 전달할 메서드는 <ph id="ph2">`T`</ph> 개체는 현재 데이터, 변경 된 데이터 또는 새로운 데이터입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>An error condition.</source>
          <target state="translated">오류가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The provider can call the <ph id="ph1">&lt;xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType&gt;</ph> method to notify the observer that some error condition has occurred.</source>
          <target state="translated">공급자를 호출할 수는 <ph id="ph1">&lt;xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType&gt;</ph> 일부 오류 조건이 발생 했음을 관찰자에 알리기 위해 메서드.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>No further data.</source>
          <target state="translated">추가 데이터가 없습니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The provider can call the <ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType&gt;</ph> method to notify the observer that it has finished sending notifications.</source>
          <target state="translated">공급자를 호출할 수는 <ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType&gt;</ph> 알림 전송을 완료 했음을 관찰자에 알리기 위해 메서드.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The following example illustrates the observer design pattern.</source>
          <target state="translated">다음 예제에서는 관찰자 디자인 패턴을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>It defines a <ph id="ph1">`Location`</ph> class that contains latitude and longitude information.</source>
          <target state="translated">정의 <ph id="ph1">`Location`</ph> 위도 및 경도 정보를 포함 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The <ph id="ph1">`LocationTracker`</ph> class provides the <ph id="ph2">&lt;xref:System.IObservable%601&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">`LocationTracker`</ph> 클래스를 제공는 <ph id="ph2">&lt;xref:System.IObservable%601&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>Its <ph id="ph1">`TrackLocation`</ph> method is passed a nullable <ph id="ph2">`Location`</ph> object that contains the latitude and longitude data.</source>
          <target state="translated">해당 <ph id="ph1">`TrackLocation`</ph> 메서드는 null을 허용 전달 <ph id="ph2">`Location`</ph> 위도 및 경도 데이터가 들어 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>If the <ph id="ph1">`Location`</ph> value is not <ph id="ph2">`null`</ph>, the <ph id="ph3">`TrackLocation`</ph> method calls the <ph id="ph4">&lt;xref:System.IObserver%601.OnNext%2A&gt;</ph> method of each observer.</source>
          <target state="translated">경우는 <ph id="ph1">`Location`</ph> 값이 <ph id="ph2">`null`</ph>, <ph id="ph3">`TrackLocation`</ph> 메서드 호출에서 <ph id="ph4">&lt;xref:System.IObserver%601.OnNext%2A&gt;</ph> 각 관찰자의 메서드.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>If the <ph id="ph1">`Location`</ph> value is <ph id="ph2">`null`</ph>, the <ph id="ph3">`TrackLocation`</ph> method instantiates a <ph id="ph4">`LocationUnknownException`</ph> object, which is shown in the following example.</source>
          <target state="translated">경우는 <ph id="ph1">`Location`</ph> 값은 <ph id="ph2">`null`</ph>, <ph id="ph3">`TrackLocation`</ph> 메서드를 만드는 데는 <ph id="ph4">`LocationUnknownException`</ph> 다음 예제에 나와 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>It then calls each observer's <ph id="ph1">&lt;xref:System.IObserver%601.OnError%2A&gt;</ph> method and passes it the <ph id="ph2">`LocationUnknownException`</ph> object.</source>
          <target state="translated">그런 다음 각 관찰자의 연속 호출 <ph id="ph1">&lt;xref:System.IObserver%601.OnError%2A&gt;</ph> 메서드 전달는 <ph id="ph2">`LocationUnknownException`</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>Note that <ph id="ph1">`LocationUnknownException`</ph> derives from <ph id="ph2">&lt;xref:System.Exception&gt;</ph>, but does not add any new members.</source>
          <target state="translated"><ph id="ph1">`LocationUnknownException`</ph> 에서 파생 <ph id="ph2">&lt;xref:System.Exception&gt;</ph>, 하지만 새 멤버를 추가 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>Observers register to receive notifications from a <ph id="ph1">`TrackLocation`</ph> object by calling its <ph id="ph2">&lt;xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType&gt;</ph> method, which assigns a reference to the observer object to a private generic <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object.</source>
          <target state="translated">관찰자에 게 등록에서 알림을 받을 수는 <ph id="ph1">`TrackLocation`</ph> 개체를 호출 하 여 해당 <ph id="ph2">&lt;xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType&gt;</ph> private 제네릭 observer 개체에 대 한 참조를 할당 하는 메서드를 <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The method returns an <ph id="ph1">`Unsubscriber`</ph> object, which is an <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> implementation that enables observers to stop receiving notifications.</source>
          <target state="translated">메서드 반환는 <ph id="ph1">`Unsubscriber`</ph> 인 개체는 <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> 관찰자가 알림 수신을 중지할 수 있도록 구현 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The <ph id="ph1">`LocationTracker`</ph> class also includes an <ph id="ph2">`EndTransmission`</ph> method.</source>
          <target state="translated"><ph id="ph1">`LocationTracker`</ph> 클래스도 포함 되어는 <ph id="ph2">`EndTransmission`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>When no further location data is available, the method calls each observer's <ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A&gt;</ph> method and then clears the internal list of observers.</source>
          <target state="translated">메서드 추가 위치 데이터가 표시 되 면 각 관찰자의 호출 <ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A&gt;</ph> 메서드 관찰자의 내부 목록을 지웁니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>In this example, the <ph id="ph1">`LocationReporter`</ph> class provides the <ph id="ph2">&lt;xref:System.IObserver%601&gt;</ph> implementation.</source>
          <target state="translated">이 예제는 <ph id="ph1">`LocationReporter`</ph> 클래스를 제공는 <ph id="ph2">&lt;xref:System.IObserver%601&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>It displays information about the current location to the console.</source>
          <target state="translated">현재 위치에 대 한 정보는 콘솔에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>Its constructor includes a <ph id="ph1">`name`</ph> parameter, which enables the <ph id="ph2">`LocationReporter`</ph> instance to identify itself in its string output.</source>
          <target state="translated">해당 생성자를 포함 한 <ph id="ph1">`name`</ph> 수 있는 매개 변수는 <ph id="ph2">`LocationReporter`</ph> 문자열 출력에서 자신을 식별 하는 인스턴스.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>It also includes a <ph id="ph1">`Subscribe`</ph> method, which wraps a call to the provider's <ph id="ph2">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> method.</source>
          <target state="translated">또한 포함 한 <ph id="ph1">`Subscribe`</ph> 메서드는 공급자에 대 한 호출을 래핑하는 <ph id="ph2">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>This allows the method to assign the returned <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> reference to a private variable.</source>
          <target state="translated">이렇게 하면 반환 된 메서드의 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 전용 변수를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The <ph id="ph1">`LocationReporter`</ph> class also includes an <ph id="ph2">`Unsubscribe`</ph> method, which calls the <ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> method of the object that is returned by the <ph id="ph4">&lt;xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">`LocationReporter`</ph> 클래스도 포함 되어는 <ph id="ph2">`Unsubscribe`</ph> 메서드를 호출 하 여 <ph id="ph3">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> 에서 반환 되는 개체의 메서드는 <ph id="ph4">&lt;xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The following code defines the <ph id="ph1">`LocationReporter`</ph> class.</source>
          <target state="translated">다음 코드 정의 <ph id="ph1">`LocationReporter`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IObservable`1">
          <source>The following code then instantiates the provider and the observer.</source>
          <target state="translated">다음 코드는 공급자와 관찰자를 인스턴스화합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>The object that is to receive notifications.</source>
          <target state="translated">알림을 받을 개체입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>Notifies the provider that an observer is to receive notifications.</source>
          <target state="translated">관찰자가 알림을 받게 됨을 공급자에 알립니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them.</source>
          <target state="translated">공급자가 알림 보내기를 완료하기 전에 관찰자가 알림 수신을 중지할 수 있도록 허용하는 인터페이스에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>The <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> method must be called to register an observer for push-based notifications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> 푸시 기반 알림에 대 한 observer를 등록 하려면 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>A typical implementation of the <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> method does the following:</source>
          <target state="translated">구현 하는 일반적인는 <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> 메서드는 다음을 수행 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>It stores a reference to the observer in a collection object, such as a <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object.</source>
          <target state="translated">관찰자에 대 한 참조에에서 저장 한 컬렉션 개체와 같은 한 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>It returns a reference to an <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">에 대 한 참조를 반환 된 <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>This enables observers to unsubscribe (that is, to stop receiving notifications) before the provider has finished sending them and called the subscriber's <ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A&gt;</ph> method.</source>
          <target state="translated">이렇게 하면 관찰자의 등록을 취소할 수 있습니다 (즉, 알림 수신을 중지할 수) 공급자가 알림 전송을 완료 하 고 구독자의 호출 하기 전에 <ph id="ph1">&lt;xref:System.IObserver%601.OnCompleted%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>At any given time, a particular instance of an <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> implementation is responsible for handling all subscriptions and notifying all subscribers.</source>
          <target state="translated">주어진 시간의 특정 인스턴스에에 <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> 구현은 모든 구독을 처리 하 고 모든 구독자에 게 알리는 담당 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>Unless the documentation for a particular <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> implementation indicates otherwise, observers should make no assumptions about the <ph id="ph2">&lt;xref:System.IObservable%601&gt;</ph> implementation, such as the order of notifications that multiple observers will receive.</source>
          <target state="translated">하지 않는 한 특정에 대 한 설명서 <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> 구현, 나타냅니다 관찰자 해야 가정을 대 한는 <ph id="ph2">&lt;xref:System.IObservable%601&gt;</ph> 여러 관찰자를 수신할 알림 순서는 같은 구현 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>The following example illustrates the <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> method for an application that reports latitude and longitude information.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.IObservable%601.Subscribe%2A&gt;</ph> 위도 및 경도 정보를 보고 하는 응용 프로그램에 대 한 메서드.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>It defines an <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> collection object that stores references to all observers.</source>
          <target state="translated">정의 <ph id="ph1">&lt;xref:System.Collections.Generic.IList%601&gt;</ph> 모든 관찰자에 대 한 참조를 저장 하는 컬렉션 개체입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>It also returns a private class named <ph id="ph1">`Unsubscriber`</ph> that implements the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> interface and enables subscribers to stop receiving event notifications.</source>
          <target state="translated">명명 된 전용 클래스를 반환 한다는 <ph id="ph1">`Unsubscriber`</ph> 구현 하는 <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> 인터페이스 및 구독자를 이벤트 알림 수신을 중지할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
          <source>See the Example section of the <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> topic for the complete example.</source>
          <target state="translated">예제 단원을 참조는 <ph id="ph1">&lt;xref:System.IObservable%601&gt;</ph> 전체 예제에 대 한 항목입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>