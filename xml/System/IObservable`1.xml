<Type Name="IObservable&lt;T&gt;" FullName="System.IObservable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c2589d1e6912470385b77aa8afee4b096c72c259" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728437" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IObservable&lt;out T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IObservable`1&lt;+ T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IObservable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IObservable(Of Out T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IObservable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">알림 정보를 제공하는 개체입니다.</typeparam>
    <summary>푸시 기반 알림의 공급자를 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IObserver%601> 및 <xref:System.IObservable%601> 인터페이스 푸시 기반 알림, 관찰자 디자인 패턴 라고도 하는 일반화 된 메커니즘을 제공 합니다. <xref:System.IObservable%601> 인터페이스를 나타냅니다 (공급자); 알림을 전송 하는 클래스는 <xref:System.IObserver%601> 인터페이스를 (관찰자) 받는 클래스를 나타냅니다. `T` 알림 정보를 제공 하는 클래스를 나타냅니다. 푸시 기반 알림을 일부에 <xref:System.IObserver%601> 구현 및 `T` 동일한 형식을 나타낼 수 있습니다.  
  
 공급자는 단일 메서드를 구현 해야 <xref:System.IObservable%601.Subscribe%2A>, 관찰자 푸시 기반 알림을 수신 하려는 나타내는입니다. 메서드 호출자 관찰자의 인스턴스를 전달 합니다. 메서드는 <xref:System.IDisposable> 관찰자가 알림을 공급자가 보내기를 중지 하기 전에 언제 든 지 취소할 수 있도록 구현 합니다.  
  
 지정된 된 시간에 지정 된 공급자 0, 1 개 또는 여러 관찰자가 있을 수 있습니다. 공급자는 관찰자에 대 한 참조를 저장 하 고 증명이 유효 하다 고 알림을 보내기 전에 확인 하는 일을 담당 합니다. <xref:System.IObservable%601> 인터페이스 관찰자 또는 알림을 보내는 주문 수에 대 한 가정을 하지 않습니다.  
  
 공급자를 호출 하 여 다음과 같은 세 가지 알림 관찰자에 게 보냅니다 <xref:System.IObserver%601> 메서드:  
  
-   현재 데이터입니다. 공급자를 호출할 수는 <xref:System.IObserver%601.OnNext%2A?displayProperty=nameWithType> 관찰자를 전달할 메서드는 `T` 개체는 현재 데이터, 변경 된 데이터 또는 새로운 데이터입니다.  
  
-   오류가 발생 합니다. 공급자를 호출할 수는 <xref:System.IObserver%601.OnError%2A?displayProperty=nameWithType> 일부 오류 조건이 발생 했음을 관찰자에 알리기 위해 메서드.  
  
-   추가 데이터가 없습니다. 공급자를 호출할 수는 <xref:System.IObserver%601.OnCompleted%2A?displayProperty=nameWithType> 알림 전송을 완료 했음을 관찰자에 알리기 위해 메서드.  
  
   
  
## Examples  
 다음 예제에서는 관찰자 디자인 패턴을 보여 줍니다. 정의 `Location` 위도 및 경도 정보를 포함 하는 클래스입니다.  
  
 [!code-csharp[System.IObserver.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#5)]
 [!code-vb[System.IObserver.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#5)]  
  
 `LocationTracker` 클래스를 제공는 <xref:System.IObservable%601> 구현 합니다. 해당 `TrackLocation` 메서드는 null을 허용 전달 `Location` 위도 및 경도 데이터가 들어 있는 개체입니다. 경우는 `Location` 값이 `null`, `TrackLocation` 메서드 호출에서 <xref:System.IObserver%601.OnNext%2A> 각 관찰자의 메서드.  
  
 [!code-csharp[System.IObserver.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#6)]
 [!code-vb[System.IObserver.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#6)]  
  
 경우는 `Location` 값은 `null`, `TrackLocation` 메서드를 만드는 데는 `LocationUnknownException` 다음 예제에 나와 있는 개체입니다. 그런 다음 각 관찰자의 연속 호출 <xref:System.IObserver%601.OnError%2A> 메서드 전달는 `LocationUnknownException` 개체입니다. `LocationUnknownException` 에서 파생 <xref:System.Exception>, 하지만 새 멤버를 추가 하지 않습니다.  
  
 [!code-csharp[System.IObserver.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#7)]
 [!code-vb[System.IObserver.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#7)]  
  
 관찰자에 게 등록에서 알림을 받을 수는 `TrackLocation` 개체를 호출 하 여 해당 <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> private 제네릭 observer 개체에 대 한 참조를 할당 하는 메서드를 <xref:System.Collections.Generic.List%601> 개체입니다. 메서드 반환는 `Unsubscriber` 인 개체는 <xref:System.IDisposable> 관찰자가 알림 수신을 중지할 수 있도록 구현 합니다. `LocationTracker` 클래스도 포함 되어는 `EndTransmission` 메서드. 메서드 추가 위치 데이터가 표시 되 면 각 관찰자의 호출 <xref:System.IObserver%601.OnCompleted%2A> 메서드 관찰자의 내부 목록을 지웁니다.  
  
 이 예제는 `LocationReporter` 클래스를 제공는 <xref:System.IObserver%601> 구현 합니다. 현재 위치에 대 한 정보는 콘솔에 표시 됩니다. 해당 생성자를 포함 한 `name` 수 있는 매개 변수는 `LocationReporter` 문자열 출력에서 자신을 식별 하는 인스턴스. 또한 포함 한 `Subscribe` 메서드는 공급자에 대 한 호출을 래핑하는 <xref:System.IObservable%601.Subscribe%2A> 메서드. 이렇게 하면 반환 된 메서드의 <xref:System.IDisposable> 전용 변수를 참조 합니다. `LocationReporter` 클래스도 포함 되어는 `Unsubscribe` 메서드를 호출 하 여 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 에서 반환 되는 개체의 메서드는 <xref:System.IObservable%601.Subscribe%2A?displayProperty=nameWithType> 메서드. 다음 코드 정의 `LocationReporter` 클래스입니다.  
  
 [!code-csharp[System.IObserver.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/observer.cs#8)]
 [!code-vb[System.IObserver.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/observer.vb#8)]  
  
 다음 코드는 공급자와 관찰자를 인스턴스화합니다.  
  
 [!code-csharp[System.IObserver.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/program.cs#9)]
 [!code-vb[System.IObserver.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/module1.vb#9)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IObserver`1" />
  </Docs>
  <Members>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public IDisposable Subscribe (IObserver&lt;out T&gt; observer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable Subscribe(class System.IObserver`1&lt;!T&gt; observer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IObservable`1.Subscribe(System.IObserver{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Subscribe (observer As IObserver(Of Out T)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Subscribe(IObserver&lt;T&gt; ^ observer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="System.IObserver&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="observer">알림을 받을 개체입니다.</param>
        <summary>관찰자가 알림을 받게 됨을 공급자에 알립니다.</summary>
        <returns>공급자가 알림 보내기를 완료하기 전에 관찰자가 알림 수신을 중지할 수 있도록 허용하는 인터페이스에 대한 참조입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IObservable%601.Subscribe%2A> 푸시 기반 알림에 대 한 observer를 등록 하려면 메서드를 호출 해야 합니다. 구현 하는 일반적인는 <xref:System.IObservable%601.Subscribe%2A> 메서드는 다음을 수행 합니다.  
  
-   관찰자에 대 한 참조에에서 저장 한 컬렉션 개체와 같은 한 <xref:System.Collections.Generic.List%601> 개체입니다.  
  
-   에 대 한 참조를 반환 된 <xref:System.IDisposable> 인터페이스입니다. 이렇게 하면 관찰자의 등록을 취소할 수 있습니다 (즉, 알림 수신을 중지할 수) 공급자가 알림 전송을 완료 하 고 구독자의 호출 하기 전에 <xref:System.IObserver%601.OnCompleted%2A> 메서드.  
  
 주어진 시간의 특정 인스턴스에에 <xref:System.IObservable%601> 구현은 모든 구독을 처리 하 고 모든 구독자에 게 알리는 담당 합니다. 하지 않는 한 특정에 대 한 설명서 <xref:System.IObservable%601> 구현, 나타냅니다 관찰자 해야 가정을 대 한는 <xref:System.IObservable%601> 여러 관찰자를 수신할 알림 순서는 같은 구현 합니다.  
  
   
  
## Examples  
 다음 예제는 <xref:System.IObservable%601.Subscribe%2A> 위도 및 경도 정보를 보고 하는 응용 프로그램에 대 한 메서드. 정의 <xref:System.Collections.Generic.IList%601> 모든 관찰자에 대 한 참조를 저장 하는 컬렉션 개체입니다. 명명 된 전용 클래스를 반환 한다는 `Unsubscriber` 구현 하는 <xref:System.IDisposable> 인터페이스 및 구독자를 이벤트 알림 수신을 중지할 수 있습니다.  예제 단원을 참조는 <xref:System.IObservable%601> 전체 예제에 대 한 항목입니다.  
  
 [!code-csharp[System.IObserver.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iobserver.class/cs/provider.cs#13)]
 [!code-vb[System.IObserver.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iobserver.class/vb/provider.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IObserver`1" />
      </Docs>
    </Member>
  </Members>
</Type>