<Type Name="Enum" FullName="System.Enum">
  <TypeSignature Language="C#" Value="public abstract class Enum : ValueType, IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Enum extends System.ValueType implements class System.IComparable, class System.IConvertible, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Enum" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Enum&#xA;Inherits ValueType&#xA;Implements IComparable, IConvertible, IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enum abstract : ValueType, IComparable, IConvertible, IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c4fce-101">열거형에 대한 기본 클래스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-101">Provides the base class for enumerations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-102">열거형은 내부 형식이 모든 정수 계열 형식이 있는 명명 된 상수 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-102">An enumeration is a set of named constants whose underlying type is any integral type.</span></span> <span data-ttu-id="c4fce-103">기본 형식이 없는 명시적으로 선언 하는 경우 <xref:System.Int32> 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-103">If no underlying type is explicitly declared, <xref:System.Int32> is used.</span></span> <span data-ttu-id="c4fce-104"><xref:System.Enum> .NET Framework의 모든 열거형에 대 한 기본 클래스가입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-104"><xref:System.Enum> is the base class for all enumerations in the .NET Framework.</span></span> <span data-ttu-id="c4fce-105">열거형 형식에 의해 정의 됩니다는 `enum` C# 키워드 및 `Enum`... `End Enum` Visual Basic에서 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-105">Enumeration types are defined by the `enum` keyword in C# and the `Enum`...`End Enum` construct in Visual Basic.</span></span>  
  
 <span data-ttu-id="c4fce-106"><xref:System.Enum> 이 클래스의 인스턴스를 비교, 인스턴스 값을 문자열 표현으로 변환 하 고 숫자의 문자열 표현을이 클래스의 인스턴스로 변환 및 지정 된 열거형 및 값의 인스턴스를 만드는 메서드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-106"><xref:System.Enum> provides methods for comparing instances of this class, converting the value of an instance to its string representation, converting the string representation of a number to an instance of this class, and creating an instance of a specified enumeration and value.</span></span>  
  
 <span data-ttu-id="c4fce-107">열거형 비트 필드로 처리할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-107">You can also treat an enumeration as a bit field.</span></span> <span data-ttu-id="c4fce-108">자세한 내용은 참조는 [비독점적 멤버 및 플래그 특성](#Flags) 섹션 및 <xref:System.FlagsAttribute> 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-108">For more information, see the [Non-Exclusive Members and the Flags Attribute](#Flags) section and the <xref:System.FlagsAttribute> topic.</span></span>  
  
 <span data-ttu-id="c4fce-109">항목 내용:</span><span class="sxs-lookup"><span data-stu-id="c4fce-109">In this topic:</span></span>  
  
 <span data-ttu-id="c4fce-110">[열거형 형식 만들기](#Creating) </span><span class="sxs-lookup"><span data-stu-id="c4fce-110">[Creating an enumeration type](#Creating) </span></span>  
 <span data-ttu-id="c4fce-111">[열거형 형식 인스턴스화](#Instantiating) </span><span class="sxs-lookup"><span data-stu-id="c4fce-111">[Instantiating an enumeration type](#Instantiating) </span></span>  
 <span data-ttu-id="c4fce-112">[열거형에 대 한 유용한 정보](#BestPractices) </span><span class="sxs-lookup"><span data-stu-id="c4fce-112">[Enumeration best practices](#BestPractices) </span></span>  
 <span data-ttu-id="c4fce-113">[열거형을 사용 하 여 작업을 수행합니다.](#Operations) </span><span class="sxs-lookup"><span data-stu-id="c4fce-113">[Performing operations with enumerations](#Operations) </span></span>  
 [<span data-ttu-id="c4fce-114">변환 수행</span><span class="sxs-lookup"><span data-stu-id="c4fce-114">Performing conversions</span></span>](#conversions)  
 [<span data-ttu-id="c4fce-115">열거형 값을 구문 분석</span><span class="sxs-lookup"><span data-stu-id="c4fce-115">Parsing enumeration values</span></span>](#parsing)  
 [<span data-ttu-id="c4fce-116">열거형 값의 서식 지정</span><span class="sxs-lookup"><span data-stu-id="c4fce-116">Formatting enumeration values</span></span>](#formatting)  
[<span data-ttu-id="c4fce-117">반복 열거형 멤버</span><span class="sxs-lookup"><span data-stu-id="c4fce-117">Iterating enumeration members</span></span>](#iterating)  
[<span data-ttu-id="c4fce-118">비독점적 멤버 및 플래그 특성</span><span class="sxs-lookup"><span data-stu-id="c4fce-118">Non-exclusive members and the Flags attribute</span></span>](#Flags)  
[<span data-ttu-id="c4fce-119">열거형 메서드를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-119">Adding enumeration methods</span></span>](#methods)  
  
<a name="Creating"></a>   
## <a name="creating-an-enumeration-type"></a><span data-ttu-id="c4fce-120">열거형 형식 만들기</span><span class="sxs-lookup"><span data-stu-id="c4fce-120">Creating an enumeration type</span></span>  
 <span data-ttu-id="c4fce-121">프로그래밍 언어에는 일반적으로 명명 된 상수 및 해당 값의 집합으로 구성 하는 열거형을 선언 하는 구문을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-121">Programming languages typically provide syntax to declare an enumeration that consists of a set of named constants and their values.</span></span> <span data-ttu-id="c4fce-122">다음 예제에서는 C# 및 Visual Basic에서 열거형 정의를 사용 하는 구문을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-122">The following example illustrates the syntax used by C# and Visual Basic to define an enumeration.</span></span> <span data-ttu-id="c4fce-123">란 이름의 열거형 만듭니다 `ArrivalStatus` 세 명의 멤버가 있는: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, 및 `ArrivalStatus.Late`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-123">It creates an enumeration named `ArrivalStatus` that has three members: `ArrivalStatus.Early`, `ArrivalStatus.OnTime`, and `ArrivalStatus.Late`.</span></span> <span data-ttu-id="c4fce-124">두 경우 모두 열거형 명시적으로에서 상속 되지 않는 참고 <xref:System.Enum>; 상속 관계 컴파일러에 의해 암시적으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-124">Note that in both cases, the enumeration does not explicitly inherit from <xref:System.Enum>; the inheritance relationship is handled implicitly by the compiler.</span></span>  
  
 [!code-csharp[System.Enum.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#1)]
 [!code-vb[System.Enum.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#1)]  
  
> [!WARNING]
>  <span data-ttu-id="c4fce-125">정수 계열이 아닌 내부 형식이 열거형 형식을 만들지 마십시오 또는 <xref:System.Char>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-125">You should never create an enumeration type whose underlying type is non-integral or <xref:System.Char>.</span></span> <span data-ttu-id="c4fce-126">열거형 형식 리플렉션을 사용 하 여를 만들 수는 있지만 결과 형식을 사용 하는 메서드 호출 안정적이 지 않습니다 및 추가 예외를 throw 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-126">Although you can create such an enumeration type by using reflection, method calls that use the resulting type are unreliable and may also throw additional exceptions.</span></span>  
  
<a name="Instantiating"></a>   
## <a name="instantiating-an-enumeration-type"></a><span data-ttu-id="c4fce-127">열거형 형식 인스턴스화</span><span class="sxs-lookup"><span data-stu-id="c4fce-127">Instantiating an enumeration type</span></span>  
 <span data-ttu-id="c4fce-128">다른 값 형식을 인스턴스화할 때 열거형 형식을 인스턴스화할 수 있습니다: 변수를 선언 하 고 열거형의 상수 중 하나를 할당 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-128">You can instantiate an enumeration type just as you instantiate any other value type: by declaring a variable and assigning one of the enumeration's constants to it.</span></span> <span data-ttu-id="c4fce-129">다음 예제는 `ArrivalStatus` 값인 `ArrivalStatus.OnTime`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-129">The following example instantiates an `ArrivalStatus` whose value is `ArrivalStatus.OnTime`.</span></span>  
  
 [!code-csharp[System.Enum.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class1.cs#2)]
 [!code-vb[System.Enum.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class1.vb#2)]  
  
 <span data-ttu-id="c4fce-130">또한 다음과 같은 방법으로 열거형 값을 인스턴스화할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-130">You can also instantiate an enumeration value in the following ways:</span></span>  
  
-   <span data-ttu-id="c4fce-131">캐스트 (C#) 또는 변환 (Visual Basic의 경우)는 정수 값을 열거형 값에 특정 프로그래밍 언어의 기능을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-131">By using a particular programming language's features to cast (as in C#) or convert (as in Visual Basic) an integer value to an enumeration value.</span></span> <span data-ttu-id="c4fce-132">다음 예제에서는 `ArrivalStatus` 값을 가진 개체 `ArrivalStatus.Early` 이렇게에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-132">The following example creates an `ArrivalStatus` object whose value is `ArrivalStatus.Early` in this way.</span></span>  
  
     [!code-csharp[System.Enum.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#4)]
     [!code-vb[System.Enum.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#4)]  
  
-   <span data-ttu-id="c4fce-133">암시적 기본 생성자를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-133">By calling its implicit default constructor.</span></span> <span data-ttu-id="c4fce-134">다음 예제에서 볼 수 있듯이 예제의 열거형 인스턴스의 기본 값은 0입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-134">As the following example shows, in this case the underlying value of the enumeration instance is 0.</span></span> <span data-ttu-id="c4fce-135">그러나 아닙니다 반드시 열거형에는 올바른 상수 값.</span><span class="sxs-lookup"><span data-stu-id="c4fce-135">However, this is not necessarily the value of a valid constant in the enumeration.</span></span>  
  
     [!code-csharp[System.Enum.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#3)]
     [!code-vb[System.Enum.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#3)]  
  
-   <span data-ttu-id="c4fce-136">호출 하 여는 <xref:System.Enum.Parse%2A> 또는 <xref:System.Enum.TryParse%2A> 메서드 열거형에서 상수의 이름을 포함 하는 문자열을 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-136">By calling the <xref:System.Enum.Parse%2A> or <xref:System.Enum.TryParse%2A> method to parse a string that contains the name of a constant in the enumeration.</span></span> <span data-ttu-id="c4fce-137">자세한 내용은 참조는 [열거형 값을 구문 분석](#parsing) 섹션.</span><span class="sxs-lookup"><span data-stu-id="c4fce-137">For more information, see the [Parsing Enumeration Values](#parsing) section.</span></span>  
  
-   <span data-ttu-id="c4fce-138">호출 하 여는 <xref:System.Enum.ToObject%2A> 열거형 형식에 정수 값을 변환 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-138">By calling the <xref:System.Enum.ToObject%2A> method to convert an integral value to an enumeration type.</span></span> <span data-ttu-id="c4fce-139">자세한 내용은 참조는 [변환 수행](#conversions) 섹션.</span><span class="sxs-lookup"><span data-stu-id="c4fce-139">For more information, see the [Performing Conversions](#conversions) section.</span></span>  
  
<a name="BestPractices"></a>   
## <a name="enumeration-best-practices"></a><span data-ttu-id="c4fce-140">열거형에 대 한 유용한 정보</span><span class="sxs-lookup"><span data-stu-id="c4fce-140">Enumeration best practices</span></span>  
 <span data-ttu-id="c4fce-141">열거형 형식을 정의할 때 다음 모범 사례를 사용 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-141">We recommend that you use the following best practices when you define enumeration types:</span></span>  
  
-   <span data-ttu-id="c4fce-142">값이 0 인 열거형 멤버를 정의 하지 않은 경우 만드십시오는 `None` 열거형된 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-142">If you have not defined an enumeration member whose value is 0, consider creating a `None` enumerated constant.</span></span> <span data-ttu-id="c4fce-143">기본적으로 열거형에 사용 된 메모리를 0으로 초기화 공용 언어 런타임에 의해 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-143">By default, the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="c4fce-144">따라서 값이 0 인 상수를 정의 하지 않는 경우 만들어질 때 열거형 잘못 된 값이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-144">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
-   <span data-ttu-id="c4fce-145">응용 프로그램에서 사용 하는 열거 하는 것이 좋습니다.를 나타내도록 하는 명확한 기본 경우가 상수 값이 0 인 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-145">If there is an obvious default case that your application has to represent, consider using an enumerated constant whose value is zero to represent it.</span></span> <span data-ttu-id="c4fce-146">기본 케이스가 없는 경우에 다른 열거 상수 중 하나로 인해 값이 표시 되지 않는 대/소문자를 지정 하는 0 인 열거형된 상수를 사용 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-146">If there is no default case, consider using an enumerated constant whose value is zero to specify the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="c4fce-147">나중에 사용 하도록 예약 된 열거 상수를 지정 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="c4fce-147">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="c4fce-148">메서드 또는 값으로는 열거형된 상수를 사용 하는 속성을 정의할 때 값 유효성을 검사 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-148">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="c4fce-149">이유는이 숫자 값을 열거형에 정의 되지 않은 경우에 숫자 값을 열거형 형식으로 캐스팅할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-149">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
 <span data-ttu-id="c4fce-150">해당 상수는 비트 필드 열거형 형식에 대 한 추가 모범 사례에 나열 된는 [비독점적 멤버 및 플래그 특성](#Flags) 섹션.</span><span class="sxs-lookup"><span data-stu-id="c4fce-150">Additional best practices for enumeration types whose constants are bit fields are listed in the [Non-Exclusive Members and the Flags Attribute](#Flags) section.</span></span>  
  
<a name="Operations"></a>   
## <a name="performing-operations-with-enumerations"></a><span data-ttu-id="c4fce-151">열거형을 사용 하 여 작업을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-151">Performing operations with enumerations</span></span>  
 <span data-ttu-id="c4fce-152">열거형을 만들 때 새 메서드를 정의할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-152">You cannot define new methods when you are creating an enumeration.</span></span> <span data-ttu-id="c4fce-153">열거형 형식을 정적의 전체 집합 및 인스턴스 메서드를 상속 하는 반면는 <xref:System.Enum> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-153">However, an enumeration type inherits a complete set of static and instance methods from the <xref:System.Enum> class.</span></span> <span data-ttu-id="c4fce-154">다음 섹션에서는 대부분의 열거 값을 작업할 때 자주 사용 되는 다른 여러 방법 외에도 이러한 메서드를 조사 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-154">The following sections survey most of these methods, in addition to several other methods that are commonly used when working with enumeration values.</span></span>  
  
<a name="conversions"></a>   
### <a name="performing-conversions"></a><span data-ttu-id="c4fce-155">변환 수행</span><span class="sxs-lookup"><span data-stu-id="c4fce-155">Performing conversions</span></span>  
 <span data-ttu-id="c4fce-156">열거형 멤버 및 해당 기본 형식 간의 캐스팅 (C#) 또는 변환 (Visual Basic)에서는 연산자를 사용 하 여 변환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-156">You can convert between an enumeration member and its underlying type by using a casting (in C#) or conversion (in Visual Basic) operator.</span></span> <span data-ttu-id="c4fce-157">다음 예에서는 캐스팅 또는 변환 연산자를 사용 하 여 정수로 열거형 값의 및는 정수를 열거형 값에서 변환을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-157">The following example uses casting or conversion operators to perform conversions both from an integer to an enumeration value and from an enumeration value to an integer.</span></span>  
  
 [!code-csharp[System.Enum.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#5)]
 [!code-vb[System.Enum.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#5)]  
  
 <span data-ttu-id="c4fce-158"><xref:System.Enum> 클래스도 포함 되어는 <xref:System.Enum.ToObject%2A> 모든 정수 계열 형식의 값을 열거형 값으로 변환 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-158">The <xref:System.Enum> class also includes a <xref:System.Enum.ToObject%2A> method that converts a value of any integral type to an enumeration value.</span></span> <span data-ttu-id="c4fce-159">다음 예제에서는 <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> 변환 하는 메서드는 <xref:System.Int32> 에 `ArrivalStatus` 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-159">The following example uses the <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method to convert an <xref:System.Int32> to an `ArrivalStatus` value.</span></span> <span data-ttu-id="c4fce-160">때문에 <xref:System.Enum.ToObject%2A> 형식의 값을 반환 <xref:System.Object>, 캐스팅 또는 변환 연산자의 사용 개체 열거형 형식으로 캐스팅 하는 데 필요한 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-160">Note that, because the <xref:System.Enum.ToObject%2A> returns a value of type <xref:System.Object>, the use of a casting or conversion operator may still be necessary to cast the object to the enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/class2.cs#6)]
 [!code-vb[System.Enum.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/class2.vb#6)]  
  
 <span data-ttu-id="c4fce-161">정수는 열거형 값으로 변환할 때 실제로 열거형의 구성원이 아니므로 값을 할당 하는 것이 같습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-161">When converting an integer to an enumeration value, it is possible to assign a value that is not actually a member of the enumeration.</span></span> <span data-ttu-id="c4fce-162">이 방지 하려면 정수를 전달할 수는 <xref:System.Enum.IsDefined%2A> 변환을 수행 하기 전에 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-162">To prevent this, you can pass the integer to the <xref:System.Enum.IsDefined%2A> method before performing the conversion.</span></span> <span data-ttu-id="c4fce-163">다음 예제에서는이 메서드를 사용 하 여 정수 값의 배열에 요소를 변환할 수 있는지 확인 하려면 `ArrivalStatus` 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-163">The following example uses this method to determine whether the elements in an array of integer values can be converted to `ArrivalStatus` values.</span></span>  
  
 [!code-csharp[System.Enum.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion1.cs#7)]
 [!code-vb[System.Enum.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion1.vb#7)]  
  
 <span data-ttu-id="c4fce-164">하지만 <xref:System.Enum> 클래스의 명시적 인터페이스 구현을 제공는 <xref:System.IConvertible> 인터페이스는 열거형 값에서 정수 계열 형식으로 변환할의 메서드를 사용 해야는 <xref:System.Convert> 클래스 같은 <xref:System.Convert.ToInt32%2A>, 이러한 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-164">Although the <xref:System.Enum> class provides explicit interface implementations of the <xref:System.IConvertible> interface for converting from an enumeration value to an integral type, you should use the methods of the <xref:System.Convert> class, such as <xref:System.Convert.ToInt32%2A>, to perform these conversions.</span></span> <span data-ttu-id="c4fce-165">다음 예에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Enum.GetUnderlyingType%2A> 메서드와 함께 <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> 열거형 값을 내부 형식으로 변환 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-165">The following example illustrates how you can use the <xref:System.Enum.GetUnderlyingType%2A> method along with the <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method to convert an enumeration value to its underlying type.</span></span> <span data-ttu-id="c4fce-166">이 예제는 컴파일 타임에 알려진 열거형의 내부 형식 필요 하지 않다는 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-166">Note that this example does not require the underlying type of the enumeration to be known at compile time.</span></span>  
  
 [!code-csharp[System.Enum.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classconversion2.cs#8)]
 [!code-vb[System.Enum.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classconversion2.vb#8)]  
  
<a name="parsing"></a>   
### <a name="parsing-enumeration-values"></a><span data-ttu-id="c4fce-167">열거형 값을 구문 분석</span><span class="sxs-lookup"><span data-stu-id="c4fce-167">Parsing enumeration values</span></span>  
 <span data-ttu-id="c4fce-168"><xref:System.Enum.Parse%2A> 및 <xref:System.Enum.TryParse%2A> 메서드를 사용 하는 열거형 값의 문자열 표현을 해당 값으로 변환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-168">The <xref:System.Enum.Parse%2A> and <xref:System.Enum.TryParse%2A> methods allow you to convert the string representation of an enumeration value to that value.</span></span> <span data-ttu-id="c4fce-169">이름 또는 원본으로 사용 하는 열거형 상수 값 문자열 표현 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-169">The string representation can be either the name or the underlying value of an enumeration constant.</span></span> <span data-ttu-id="c4fce-170">참고가 구문 분석 메서드는 문자열 열거형의 내부 형식의 값으로 변환할 수 있는 경우 특정 열거의 멤버가 아닌 숫자의 문자열 표현을 성공적으로 변환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-170">Note that the parsing methods will successfully convert string representations of numbers that are not members of a particular enumeration if the strings can be converted to a value of the enumeration's underlying type.</span></span> <span data-ttu-id="c4fce-171">이 방지 하려면는 <xref:System.Enum.IsDefined%2A> 메서드를 구문 분석 결과 유효한 열거형 값 임이 되도록 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-171">To prevent this, the <xref:System.Enum.IsDefined%2A> method can be called to ensure that the result of the parsing method is a valid enumeration value.</span></span> <span data-ttu-id="c4fce-172">이 예제에서는이 방법을 보여 줍니다를 둘 다에 대 한 호출을 보여 줍니다는 <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> 및 <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-172">The example illustrates this approach and demonstrates calls to both the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> and <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="c4fce-173">Note 제네릭이 아닌 구문 분석 방법 캐스팅 (C#) 또는 (Visual Basic)에서는 적절 한 열거형 형식으로 변환 해야 하는 개체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-173">Note that the non-generic parsing method returns an object that you may have to cast (in C#) or convert (in Visual Basic) to the appropriate enumeration type.</span></span>  
  
 [!code-csharp[System.Enum.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classparse1.cs#9)]
 [!code-vb[System.Enum.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classparse1.vb#9)]  
  
<a name="formatting"></a>   
### <a name="formatting-enumeration-values"></a><span data-ttu-id="c4fce-174">열거형 값의 서식 지정</span><span class="sxs-lookup"><span data-stu-id="c4fce-174">Formatting enumeration values</span></span>  
 <span data-ttu-id="c4fce-175">정적을 호출 하 여 해당 문자열 표현으로 열거형 값을 변환할 수 있습니다 <xref:System.Enum.Format%2A> 으로 메서드를 오버 로드 인스턴스 <xref:System.Enum.ToString%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-175">You can convert enumeration values to their string representations by calling the static <xref:System.Enum.Format%2A> method, as well as the overloads of the instance <xref:System.Enum.ToString%2A> method.</span></span> <span data-ttu-id="c4fce-176">열거형 값을 문자열로 표시 됩니다는 정확한 방법을 제어 하는 형식 문자열을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-176">You can use a format string to control the precise way in which an enumeration value is represented as a string.</span></span> <span data-ttu-id="c4fce-177">자세한 내용은 참조 [열거형 형식 문자열](~/docs/standard/base-types/enumeration-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-177">For more information, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="c4fce-178">다음 예제에서는 각 지원 되는 열거형 형식 문자열 ("G" 또는 "g", "D" 또는 "d", "X" 또는 "x" 및 "F" 또는 "f") 사용 하 여 변환의 멤버는 `ArrivalStatus` 해당 문자열 표현으로 열거 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-178">The following example uses each of the supported enumeration format strings ("G" or "g", "D" or "d", "X" or "x", and "F" or "f" ) to convert a member of the `ArrivalStatus` enumeration to its string representations.</span></span>  
  
 [!code-csharp[System.Enum.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classformat1.cs#10)]
 [!code-vb[System.Enum.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classformat1.vb#10)]  
  
<a name="iterating"></a>   
### <a name="iterating-enumeration-members"></a><span data-ttu-id="c4fce-179">반복 열거형 멤버</span><span class="sxs-lookup"><span data-stu-id="c4fce-179">Iterating enumeration members</span></span>  
 <span data-ttu-id="c4fce-180"><xref:System.Enum> 형식이 구현 하지 않습니다는 <xref:System.Collections.IEnumerable> 또는 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스를 사용 하 여 컬렉션의 멤버를 반복 하는 데 사용할 수는 `foreach` (C#에서) 또는 `For Each` (Visual Basic)에서는 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-180">The <xref:System.Enum> type does not implement the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interface, which would enable you to iterate members of a collection by using a `foreach` (in C#) or `For Each` (in Visual Basic) construct.</span></span> <span data-ttu-id="c4fce-181">그러나 다음 두 가지 방법 중 하나에서 멤버를 열거할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-181">However, you can enumerate members in either of two ways.</span></span>  
  
-   <span data-ttu-id="c4fce-182">호출할 수 있습니다는 <xref:System.Enum.GetNames%2A> 메서드 열거형 멤버의 이름이 포함 된 문자열 배열을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-182">You can call the <xref:System.Enum.GetNames%2A> method to retrieve a string array containing the names of the enumeration members.</span></span> <span data-ttu-id="c4fce-183">다음으로 문자열 배열의 각 요소에 대해 호출할 수 있습니다는 <xref:System.Enum.Parse%2A> 을 해당 하는 열거형 값의 문자열을 변환 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-183">Next, for each element of the string array, you can call the <xref:System.Enum.Parse%2A> method to convert the string to its equivalent enumeration value.</span></span> <span data-ttu-id="c4fce-184">다음 예제에서 이 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-184">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#11)]
     [!code-vb[System.Enum.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#11)]  
  
-   <span data-ttu-id="c4fce-185">호출할 수 있습니다는 <xref:System.Enum.GetValues%2A> 열거형에서 값을 내부 포함 하는 배열을 검색 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-185">You can call the <xref:System.Enum.GetValues%2A> method to retrieve an array that contains the underlying values in the enumeration.</span></span> <span data-ttu-id="c4fce-186">다음으로 배열의 각 요소에 대해 호출할 수 있습니다는 <xref:System.Enum.ToObject%2A> 을 해당 하는 열거형 값의 정수를 변환 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-186">Next, for each element of the array, you can call the <xref:System.Enum.ToObject%2A> method to convert the integer to its equivalent enumeration value.</span></span> <span data-ttu-id="c4fce-187">다음 예제에서 이 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-187">The following example illustrates this approach.</span></span>  
  
     [!code-csharp[System.Enum.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classiterate.cs#12)]
     [!code-vb[System.Enum.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classiterate.vb#12)]  
  
<a name="Flags"></a>   
## <a name="non-exclusive-members-and-the-flags-attribute"></a><span data-ttu-id="c4fce-188">비독점적 멤버 및 플래그 특성</span><span class="sxs-lookup"><span data-stu-id="c4fce-188">Non-exclusive members and the Flags attribute</span></span>  
 <span data-ttu-id="c4fce-189">열거형의 일반적인 용도 중 하나는 상호 배타적인 값 집합을 나타내는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-189">One common use of an enumeration is to represent a set of mutually exclusive values.</span></span> <span data-ttu-id="c4fce-190">예를 들어 한 `ArrivalStatus` 인스턴스 값을 가질 수 있습니다 `Early`, `OnTime`, 또는 `Late`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-190">For example, an `ArrivalStatus` instance can have a value of `Early`, `OnTime`, or `Late`.</span></span> <span data-ttu-id="c4fce-191">값의 의미가 없을 `ArrivalStatus` 둘 이상의 열거 상수를 반영 하도록 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c4fce-191">It makes no sense for the value of an `ArrivalStatus` instance to reflect more than one enumeration constant.</span></span>  
  
 <span data-ttu-id="c4fce-192">그러나 다른 경우 열거형 개체의 값에는 여러 명의 열거형 멤버를 포함할 수 있습니다 및 각 멤버는 열거형 값의 비트 필드를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-192">In other cases, however, the value of an enumeration object can include multiple enumeration members, and each member represents a bit field in the enumeration value.</span></span> <span data-ttu-id="c4fce-193"><xref:System.FlagsAttribute> 특성 열거형 비트 필드는 구성 되어 있음을 나타내는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-193">The <xref:System.FlagsAttribute> attribute can be used to indicate that the enumeration consists of bit fields.</span></span> <span data-ttu-id="c4fce-194">예를 들어 란 이름의 열거형 `Pets` 가계에 애완 동물의 종류를 나타내는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-194">For example, an enumeration named `Pets` might be used to indicate the kinds of pets in a household.</span></span> <span data-ttu-id="c4fce-195">다음과 같이 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-195">It can be defined as follows.</span></span>  
  
 [!code-csharp[System.Enum.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#13)]
 [!code-vb[System.Enum.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#13)]  
  
 <span data-ttu-id="c4fce-196">`Pets` 열거형 다음 예제와 같이 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-196">The `Pets` enumeration can then be used as shown in the following example.</span></span>  
  
 [!code-csharp[System.Enum.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#14)]
 [!code-vb[System.Enum.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#14)]  
  
 <span data-ttu-id="c4fce-197">비트를 정의할 때 다음 모범 사례를 사용 해야 열거 하 고 적용 된 <xref:System.FlagsAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-197">The following best practices should be used when defining a bitwise enumeration and applying the <xref:System.FlagsAttribute> attribute.</span></span>  
  
-   <span data-ttu-id="c4fce-198">사용 된 <xref:System.FlagsAttribute> 연산을 (AND, OR, 포함 또는 제외)는 숫자 값에서 수행 해야 하는 경우에 열거형에 대 한 사용자 지정 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-198">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="c4fce-199">즉, 1, 2, 4, 8, 등에 2의 거듭제곱에 열거 상수를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-199">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="c4fce-200">즉, 개별 플래그 조합 된 열거형 상수에 겹치지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-200">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="c4fce-201">일반적으로 사용 하는 플래그 조합에 대 한 열거형된 상수를 만드는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-201">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="c4fce-202">예를 들어 파일 I/O 작업에 사용 되는 열거형을 사용 하는 경우 포함 하는 열거 상수 `Read = 1` 및 `Write = 2`, 열거형된 상수를 만드는 것이 좋습니다 `ReadWrite = Read OR Write`, 결합 하 여 `Read` 및 `Write` 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-202">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="c4fce-203">또한 OR 연산은 플래그를 조합 하는 데 사용 하지 않아야 하는 간단한 작업에 필요한 경우에 따라 고급 개념을 간주 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-203">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="c4fce-204">여러 플래그 위치가 혼동 코드를 만들 수 있습니다 및 코딩 오류 들이 1로 설정할 수 때문에 플래그 열거 상수 음수를 정의 하는 경우에 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-204">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="c4fce-205">인스턴스를 호출 하는 숫자 값에는 플래그가 설정 되어 있는지 여부를 테스트 하는 편리한 방법은 것 <xref:System.Enum.HasFlag%2A> 메서드를 다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-205">A convenient way to test whether a flag is set in a numeric value is to call the instance <xref:System.Enum.HasFlag%2A> method, as shown in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#15)]
     [!code-vb[System.Enum.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#15)]  
  
     <span data-ttu-id="c4fce-206">숫자 값과 플래그 열거형된 상수 플래그에 해당 하지 않는 0으로 숫자 값의 모든 비트를 설정 하는 사이 비트 AND 연산을 수행 하 고 다음 해당 작업의 결과 같은지 여부를 테스트 하는 것과 같습니다는 플래그 열거형된 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-206">It is equivalent to performing a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, and then testing whether the result of that operation is equal to the flag enumerated constant.</span></span> <span data-ttu-id="c4fce-207">이런 내용은 다음 예에서 설명되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-207">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#16)]
     [!code-vb[System.Enum.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#16)]  
  
-   <span data-ttu-id="c4fce-208">사용 하 여 `None` 플래그의 이름을 값이 0 인 상수를 열거 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-208">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="c4fce-209">사용할 수 없습니다는 `None` 플래그에 대 한 테스트 결과 항상 0 이므로 비트 AND 연산 열거 된 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-209">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="c4fce-210">그러나 수행할 수 있습니다는 논리 숫자 값 간에 비트, 비교 하지 및 `None` 숫자 값의 모든 비트가 설정 되었는지 여부를 결정 하는 열거형된 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-210">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span> <span data-ttu-id="c4fce-211">이런 내용은 다음 예에서 설명되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-211">This is illustrated in the following example.</span></span>  
  
     [!code-csharp[System.Enum.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/classbitwise1.cs#17)]
     [!code-vb[System.Enum.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/classbitwise1.vb#17)]  
  
-   <span data-ttu-id="c4fce-212">열거형 값의 형식은 열거형의 상태를 미러링 하는 데에 정의 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-212">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="c4fce-213">예를 들어 단순히 열거형의 끝을 표시 하는 열거형된 상수를 정의 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-213">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="c4fce-214">열거형의 마지막 값을 결정 해야 하는 경우 해당 값을 명시적으로 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-214">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="c4fce-215">또한 범위 내 모든 값을 사용할 경우 첫 번째 및 마지막 열거 상수에 대 한 범위 검사를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-215">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
<a name="methods"></a>   
## <a name="adding-enumeration-methods"></a><span data-ttu-id="c4fce-216">열거형 메서드를 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-216">Adding enumeration methods</span></span>  
 <span data-ttu-id="c4fce-217">열거형 형식와 같은 언어 구조에서 정의 되므로 `enum` (C#) 및 `Enum` 에서 상속 되며, 이러한 메서드 이외의 열거형 형식에 대 한 사용자 지정 메서드를 정의할 수 없습니다 (Visual Basic)는 <xref:System.Enum> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-217">Because enumeration types are defined by language structures, such as `enum` (C#) and `Enum` (Visual Basic), you cannot define custom methods for an enumeration type other than those methods inherited from the <xref:System.Enum> class.</span></span>  <span data-ttu-id="c4fce-218">그러나 기능을 추가 하려면 특정 열거형 형식에 확장 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-218">However, you can use extension methods to add functionality to a particular enumeration type.</span></span>  
  
 <span data-ttu-id="c4fce-219">다음 예제에서 `Grades` 열거형은 학생이 클래스에서 받을 수 있는 문자 성적을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-219">In the following example, the `Grades` enumeration represents the possible letter grades that a student may receive in a class.</span></span> <span data-ttu-id="c4fce-220">해당 형식의 각 인스턴스가 이제 합격 성적을 나타내는지 여부를 "알 수 있도록" `Passing`이라는 확장 메서드가 `Grades` 형식에 추가됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-220">An extension method named `Passing` is added to the `Grades` type so that each instance of that type now "knows" whether it represents a passing grade or not.</span></span>       <span data-ttu-id="c4fce-221">`Extensions` 클래스도 최소 통과 등급을 정의 하는 정적 읽기 / 쓰기 변수를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-221">The `Extensions` class also contains a static read-write variable that defines the minimum passing grade.</span></span> <span data-ttu-id="c4fce-222">반환 값은 `Passing` 확장 메서드는 해당 변수의 현재 값을 반영 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-222">The return value of the `Passing` extension method reflects the current value of that variable.</span></span>  
  
 [!code-csharp[System.Enum.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.class/cs/Extensions.cs#18)]
 [!code-vb[System.Enum.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.class/vb/Extensions.vb#18)]  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-223">다음 예제에서는 명명 된 값을 나타내고 다른 열거를 명명 된 비트 필드를 나타내는 열거형을 사용 하 여 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-223">The following example demonstrates using an enumeration to represent named values and another enumeration to represent named bit fields.</span></span>  
  
 [!code-cpp[enummain#1](~/samples/snippets/cpp/VS_Snippets_CLR/enummain/CPP/EnumMain.cpp#1)]
 [!code-csharp[enummain#1](~/samples/snippets/csharp/VS_Snippets_CLR/enummain/CS/EnumMain.cs#1)]
 [!code-vb[enummain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enummain/VB/EnumMain.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="c4fce-224">이 형식은 스레드로부터 안전합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-224">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.ValueType" />
    <altmember cref="T:System.FlagsAttribute" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Enum ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Enum();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c4fce-225"><see cref="T:System.Enum" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-225">Initializes a new instance of the <see cref="T:System.Enum" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (target As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="c4fce-226">비교할 개체 또는 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-226">An object to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="c4fce-227">이 인스턴스를 지정된 개체와 비교하여 상대 값의 표시를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-227">Compares this instance to a specified object and returns an indication of their relative values.</span></span></summary>
        <returns><span data-ttu-id="c4fce-228">인스턴스와 <paramref name="target" />의 상대 값을 나타내는 부호 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-228">A signed number that indicates the relative values of this instance and <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="c4fce-229"><list type="table"><listheader><term> 값</span><span class="sxs-lookup"><span data-stu-id="c4fce-229"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="c4fce-230"></term><description> 의미</span><span class="sxs-lookup"><span data-stu-id="c4fce-230"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="c4fce-231"></description></listheader><item><term> 0보다 작음</span><span class="sxs-lookup"><span data-stu-id="c4fce-231"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="c4fce-232"></term><description> 이 인스턴스의 값이 <paramref name="target" />의 값보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-232"></term><description> The value of this instance is less than the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="c4fce-233"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="c4fce-233"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="c4fce-234"></term><description> 이 인스턴스의 값이 <paramref name="target" />의 값과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-234"></term><description> The value of this instance is equal to the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="c4fce-235"></description></item><item><term> 0보다 큼</span><span class="sxs-lookup"><span data-stu-id="c4fce-235"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="c4fce-236"></term><description> 이 인스턴스의 값이 <paramref name="target" />의 값보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-236"></term><description> The value of this instance is greater than the value of <paramref name="target" />.</span></span>  
  
 <span data-ttu-id="c4fce-237">또는</span><span class="sxs-lookup"><span data-stu-id="c4fce-237">-or-</span></span>  
  
 <span data-ttu-id="c4fce-238"><paramref name="target" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-238"><paramref name="target" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c4fce-239">다음 예제에서는 `CompareTo` 의 컨텍스트에서 `Enum`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-239">The following example illustrates the use of `CompareTo` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumcompareto/CPP/EnumCompareTo.cpp#1)]
 [!code-csharp[enumcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumcompareto/CS/EnumCompareTo.cs#1)]
 [!code-vb[enumcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumcompareto/VB/EnumCompareTo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-240"><paramref name="target" /> 및 이 인스턴스가 형식이 다른 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-240"><paramref name="target" /> and this instance are not the same type.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4fce-241">이 인스턴스가 <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" /> 또는 <see cref="T:System.UInt64" /> 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-241">This instance is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="c4fce-242">이 인스턴스와 비교할 개체 또는 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-242">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="c4fce-243">이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-243">Returns a value indicating whether this instance is equal to a specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="c4fce-244"><paramref name="obj" />가 이 인스턴스와 기본값이 동일하고 형식이 동일한 열거형 값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-244"><see langword="true" /> if <paramref name="obj" /> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-245"><xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> 메서드 재정의 <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> 열거형 멤버 같은지 평가 되는 방식을 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-245">The <xref:System.Enum.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> to define how enumeration members are evaluated for equality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-246">다음 예제에서는 <xref:System.Enum.Equals%2A> 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-246">The following example illustrates the use of the <xref:System.Enum.Equals%2A> method.</span></span>  
  
 [!code-cpp[enumequals#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumequals/CPP/EnumEquals.cpp#1)]
 [!code-csharp[enumequals#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumequals/CS/EnumEquals.cs#1)]
 [!code-vb[enumequals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumequals/VB/EnumEquals.vb#1)]  
  
 <span data-ttu-id="c4fce-247">다음 예제에서는 두 개의 열거형 형식 `SledDog` 및 `WorkDog`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-247">The following example defines two enumeration types, `SledDog` and `WorkDog`.</span></span> <span data-ttu-id="c4fce-248">`SledDog` 열거형에는 두 명의 멤버 `SledDog.AlaskanMalamute` 및 `SledDog.Malamute`, 기본값이 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-248">The `SledDog` enumeration has two members, `SledDog.AlaskanMalamute` and `SledDog.Malamute`, that have the same underlying value.</span></span> <span data-ttu-id="c4fce-249">에 대 한 호출에서 <xref:System.Enum.Equals%2A> 메서드의 기본 값이 동일 하기 때문에 이러한 값이 같은지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-249">The call to the <xref:System.Enum.Equals%2A> method indicates that these values are equal because their underlying values are the same.</span></span> <span data-ttu-id="c4fce-250">`SledDog.Malamute` 및 `WorkDog.Newfoundland` 멤버 동일한 내부 값을 충족 하는 다른 열거형 형식을 나타내는 하지만 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-250">The `SledDog.Malamute` and `WorkDog.Newfoundland` members have the same underlying value, although they represent different enumeration types.</span></span> <span data-ttu-id="c4fce-251">에 대 한 호출에서 <xref:System.Enum.Equals%2A> 메서드 이러한 값이 서로 같지 않은지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-251">A call to the <xref:System.Enum.Equals%2A> method indicates that these values are not equal.</span></span>  
  
 [!code-csharp[System.Enum.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.equals/cs/enumequals.cs#1)]
 [!code-vb[System.Enum.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.equals/vb/enumequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Enum.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (Type enumType, object value, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.Type enumType, object value, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (enumType As Type, value As Object, format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(Type ^ enumType, System::Object ^ value, System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-252">변환할 값의 열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-252">The enumeration type of the value to convert.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-253">변환할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-253">The value to convert.</span></span></param>
        <param name="format"><span data-ttu-id="c4fce-254">사용할 출력 서식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-254">The output format to use.</span></span></param>
        <summary><span data-ttu-id="c4fce-255">열거 형식이 지정된 특정 값을 특정 서식에 따라 해당 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-255">Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</span></span></summary>
        <returns><span data-ttu-id="c4fce-256"><paramref name="value" />의 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-256">A string representation of <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-257">다음 표에 나와 대 한 유효한 값은 `format` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-257">The following table shows the valid values for the `format` parameter.</span></span>  
  
|<span data-ttu-id="c4fce-258">형식</span><span class="sxs-lookup"><span data-stu-id="c4fce-258">Format</span></span>|<span data-ttu-id="c4fce-259">설명</span><span class="sxs-lookup"><span data-stu-id="c4fce-259">Description</span></span>|  
|------------|-----------------|  
|<span data-ttu-id="c4fce-260">"G" 또는 "g"</span><span class="sxs-lookup"><span data-stu-id="c4fce-260">"G" or "g"</span></span>|<span data-ttu-id="c4fce-261">경우 `value` 은 명명된 된 열거 상수 같음, 해당 상수 이름이 고, 그렇지 않으면 반환 된 10 진수 `value` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-261">If `value` is equal to a named enumerated constant, the name of that constant is returned; otherwise, the decimal equivalent of `value` is returned.</span></span><br /><br /> <span data-ttu-id="c4fce-262">예를 들어 유일한 열거 상수에 빨간색으로 라고 하며 그 값은 1입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-262">For example, suppose the only enumerated constant is named Red, and its value is 1.</span></span> <span data-ttu-id="c4fce-263">경우 `value` 1로 지정 되이 형식은 "Red"를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-263">If `value` is specified as 1, this format returns "Red".</span></span> <span data-ttu-id="c4fce-264">그러나 경우 `value` 2로 지정 되 "2"이이 형식은 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-264">However, if `value` is specified as 2, this format returns "2".</span></span><br /><br /> <span data-ttu-id="c4fce-265">또는</span><span class="sxs-lookup"><span data-stu-id="c4fce-265">-or-</span></span><br /><br /> <span data-ttu-id="c4fce-266">경우는 <xref:System.FlagsAttribute> 사용자 지정 특성은 열거형에 적용 `value` 하나 이상의 비트로 구성 된 하나 이상의 플래그를 포함 하는 비트 필드로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-266">If the <xref:System.FlagsAttribute> custom attribute is applied to the enumeration, `value` is treated as a bit field that contains one or more flags that consist of one or more bits.</span></span><br /><br /> <span data-ttu-id="c4fce-267">경우 `value` 의 조합과 같은 열거 된 상수의 이름이 이면 해당 상수 이름의의 구분 기호로 구분 된 목록이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-267">If `value` is equal to a combination of named enumerated constants, a delimiter-separated list of the names of those constants is returned.</span></span> <span data-ttu-id="c4fce-268">`value` 가장 작은 값에서 가장 큰 값으로 플래그 하려는 플래그에 대 한 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-268">`value` is searched for flags, going from the flag with the largest value to the smallest value.</span></span> <span data-ttu-id="c4fce-269">비트 필드에 해당 하는 각 플래그에 대 한 `value`, 상수의 이름을 구분 기호로 구분 된 목록에 연결 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-269">For each flag that corresponds to a bit field in `value`, the name of the constant is concatenated to the delimiter-separated list.</span></span> <span data-ttu-id="c4fce-270">해당 플래그의 값은 더 이상 고려에서 제외 된 하 고 플래그에 대 한 검색이 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-270">The value of that flag is then excluded from further consideration, and the search continues for the next flag.</span></span><br /><br /> <span data-ttu-id="c4fce-271">경우 `value` 의 조합과 같은 이름이 지정 되지 않은 열거 상수를 10 진수로 변환 `value` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-271">If `value` is not equal to a combination of named enumerated constants, the decimal equivalent of `value` is returned.</span></span>|  
|<span data-ttu-id="c4fce-272">"X" 또는 "x"</span><span class="sxs-lookup"><span data-stu-id="c4fce-272">"X" or "x"</span></span>|<span data-ttu-id="c4fce-273">나타냅니다 `value` "0x"는 앞에 오지 없이 16 진수 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-273">Represents `value` in hexadecimal format without a leading "0x".</span></span>|  
|<span data-ttu-id="c4fce-274">"D" 또는 "d"</span><span class="sxs-lookup"><span data-stu-id="c4fce-274">"D" or "d"</span></span>|<span data-ttu-id="c4fce-275">나타냅니다 `value` 소수 형식에서입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-275">Represents `value` in decimal form.</span></span>|  
|<span data-ttu-id="c4fce-276">"F" 또는 "f"</span><span class="sxs-lookup"><span data-stu-id="c4fce-276">"F" or "f"</span></span>|<span data-ttu-id="c4fce-277">"G" 또는 "g" 동일 작동 점을 제외 하 고는 <xref:System.FlagsAttribute> 에 있이 필요가 없습니다는 <xref:System.Enum> 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-277">Behaves identically to "G" or "g", except that the <xref:System.FlagsAttribute> is not required to be present on the <xref:System.Enum> declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-278">다음 예제에서는 `Format` 의 컨텍스트에서 `Enum`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-278">The following example illustrates the use of `Format` in the context of `Enum`.</span></span>  
  
 [!code-cpp[enumformat#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumformat/CPP/EnumFormat.cpp#1)]
 [!code-csharp[enumformat#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumformat/CS/EnumFormat.cs#1)]
 [!code-vb[enumformat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumformat/VB/EnumFormat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c4fce-279"><paramref name="enumType" />, <paramref name="value" /> 또는 <paramref name="format" /> 매개 변수가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-279">The <paramref name="enumType" />, <paramref name="value" />, or <paramref name="format" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c4fce-280"><paramref name="enumType" /> 매개 변수가 <see cref="T:System.Enum" /> 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-280">The <paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" /> type.</span></span>  
  
 <span data-ttu-id="c4fce-281">또는</span><span class="sxs-lookup"><span data-stu-id="c4fce-281">-or-</span></span>  
  
 <span data-ttu-id="c4fce-282"><paramref name="value" />가 <paramref name="enumType" />과 형식이 다른 열거형인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-282">The <paramref name="value" /> is from an enumeration that differs in type from <paramref name="enumType" />.</span></span>  
  
 <span data-ttu-id="c4fce-283">또는</span><span class="sxs-lookup"><span data-stu-id="c4fce-283">-or-</span></span>  
  
 <span data-ttu-id="c4fce-284"><paramref name="value" />의 형식이 <paramref name="enumType" />의 내부 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-284">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="c4fce-285"><paramref name="format" /> 매개 변수에 잘못된 값이 포함된 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-285">The <paramref name="format" /> parameter contains an invalid value.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c4fce-286"><paramref name="format" /> 은 "X" 와 같지만 열거형 형식을 알 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-286"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.ToString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c4fce-287">이 인스턴스의 값에 대한 해시 코드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-287">Returns the hash code for the value of this instance.</span></span></summary>
        <returns><span data-ttu-id="c4fce-288">부호 있는 32비트 정수 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-288">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetName">
      <MemberSignature Language="C#" Value="public static string GetName (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetName(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetName(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetName (enumType As Type, value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetName(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-289">열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-289">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-290">내부 형식에 대한 특정 열거 상수의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-290">The value of a particular enumerated constant in terms of its underlying type.</span></span></param>
        <summary><span data-ttu-id="c4fce-291">지정된 값의 특정 열거형에서 상수의 이름을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-291">Retrieves the name of the constant in the specified enumeration that has the specified value.</span></span></summary>
        <returns><span data-ttu-id="c4fce-292"><paramref name="enumType" />를 값으로 갖는 <paramref name="value" />의 열거된 상수 이름이 포함된 문자열이거나, 해당 상수가 없으면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-292">A string containing the name of the enumerated constant in <paramref name="enumType" /> whose value is <paramref name="value" />; or <see langword="null" /> if no such constant is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-293">여러 열거형 멤버는 동일한 기본 값이 있으면는 <xref:System.Enum.GetName%2A> 메서드는 해당 열거형 멤버 중 하나의 이름을 반환 하는 것을 보장 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-293">If multiple enumeration members have the same underlying value, the <xref:System.Enum.GetName%2A> method guarantees that it will return the name of one of those enumeration members.</span></span> <span data-ttu-id="c4fce-294">그러나 못하고 동일한 열거형 멤버의 이름의 항상 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-294">However, it does not guarantee that it will always return the name of the same enumeration member.</span></span> <span data-ttu-id="c4fce-295">결과적으로, 여러 열거형 멤버 동일한 값이 있는 응용 프로그램 코드 특정 멤버의 이름을 반환 하는 메서드에 의존 하지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-295">As a result, when multiple enumeration members have the same value, your application code should never depend on the method returning a particular member's name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-296">다음 예제에서는 `GetName`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-296">The following example illustrates the use of `GetName`.</span></span>  
  
 [!code-cpp[enumgetname#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetname/CPP/EnumGetName.cpp#1)]
 [!code-csharp[enumgetname#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetname/CS/EnumGetName.cs#1)]
 [!code-vb[enumgetname#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetname/VB/EnumGetName.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-297"><paramref name="enumType" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-297"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-298"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-298"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="c4fce-299">또는</span><span class="sxs-lookup"><span data-stu-id="c4fce-299">-or-</span></span>  
  
 <span data-ttu-id="c4fce-300"><paramref name="value" />가 <paramref name="enumType" /> 형식이 아니거나 <paramref name="enumType" />과 같은 내부 형식을 가지지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-300"><paramref name="value" /> is neither of type <paramref name="enumType" /> nor does it have the same underlying type as <paramref name="enumType" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetNames">
      <MemberSignature Language="C#" Value="public static string[] GetNames (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetNames(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetNames(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNames (enumType As Type) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetNames(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-301">열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-301">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="c4fce-302">지정된 열거형에서 상수 이름의 배열을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-302">Retrieves an array of the names of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="c4fce-303"><paramref name="enumType" />에 있는 상수 이름의 문자열 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-303">A string array of the names of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-304">반환 값 배열의 요소는 열거형 상수의 이진 값으로 정렬 됩니다 (즉, 부호 없는 크기).</span><span class="sxs-lookup"><span data-stu-id="c4fce-304">The elements of the return value array are sorted by the binary values of the enumerated constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="c4fce-305">다음 예제에서 반환 된 배열에 대 한 정보를 표시 합니다는 <xref:System.Enum.GetNames%2A> 방법 음수, 0, 양수 값을 포함 하는 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-305">The following example provides displays information about the array returned by the <xref:System.Enum.GetNames%2A> method for an enumeration that includes a negative, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getnames/cs/getnames1.cs#1)]
 [!code-vb[System.Enum.GetNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getnames/vb/getnames1.vb#1)]  
  
 <span data-ttu-id="c4fce-306">열거 상수 값이 동일한 경우 해당 이름의 순서가 지정 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-306">If there are enumerated constants with same value, the order of their corresponding names is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-307">다음 예제에서는 <xref:System.Enum.GetNames%2A> 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-307">The following example illustrates the use of the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 [!code-cpp[enumgetnames#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetnames/CPP/EnumGetNames.cpp#1)]
 [!code-csharp[enumgetnames#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetnames/CS/EnumGetNames.cs#1)]
 [!code-vb[enumgetnames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetnames/VB/EnumGetNames.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-308"><paramref name="enumType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-308"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-309"><paramref name="enumType" /> 매개 변수가 <see cref="T:System.Enum" />이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-309"><paramref name="enumType" /> parameter is not an <see cref="T:System.Enum" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c4fce-310">이 열거형 멤버에 대한 내부 형식의 형식 코드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-310">Returns the type code of the underlying type of this enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c4fce-311">이 인스턴스에 대한 내부 형식의 형식 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-311">The type code of the underlying type of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4fce-312">알 수 없는 열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-312">The enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.GetUnderlyingType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnderlyingType">
      <MemberSignature Language="C#" Value="public static Type GetUnderlyingType (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetUnderlyingType(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetUnderlyingType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnderlyingType (enumType As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetUnderlyingType(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-313">내부 형식이 검색되는 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-313">The enumeration whose underlying type will be retrieved.</span></span></param>
        <summary><span data-ttu-id="c4fce-314">지정된 열거형의 내부 형식을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-314">Returns the underlying type of the specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="c4fce-315"><paramref name="enumType" />의 내부 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-315">The underlying type of <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-316"><xref:System.Enum> 구조를 통해 명명 된 상수로 표현 하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-316">The <xref:System.Enum> structure enables values to be represented as named constants.</span></span> <span data-ttu-id="c4fce-317">열거형의 값의 데이터 형식은 기본 형식으로 알려져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-317">The data type of the enumeration's values is known as its underlying type.</span></span> <span data-ttu-id="c4fce-318">예를 들어 내부 형식의 <xref:System.DayOfWeek> 각 날짜의 주를 나타내는 상수 구성 된 열거형 (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>등)은 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-318">For example, the underlying type of the <xref:System.DayOfWeek> enumeration, which consists of constants that represent each day of the week (<xref:System.DayOfWeek.Monday?displayProperty=nameWithType>, <xref:System.DayOfWeek.Tuesday?displayProperty=nameWithType>, and so on), is <xref:System.Int32>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-319">다음 예제에서는 <xref:System.Enum.GetUnderlyingType%2A> 메서드 일부 열거형 멤버의 기본 형식이 표시를 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-319">The following example calls the <xref:System.Enum.GetUnderlyingType%2A> method to display the underlying type of some enumeration members.</span></span>  
  
 [!code-csharp[System.Enum.GetUnderlyingType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getunderlyingtype/cs/getunderlyingtype1.cs#1)]
 [!code-vb[System.Enum.GetUnderlyingType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getunderlyingtype/vb/getunderlyingtype1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-320"><paramref name="enumType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-320"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-321"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-321"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.GetTypeCode" />
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public static Array GetValues (Type enumType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Array GetValues(class System.Type enumType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.GetValues(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValues (enumType As Type) As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Array ^ GetValues(Type ^ enumType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-322">열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-322">An enumeration type.</span></span></param>
        <summary><span data-ttu-id="c4fce-323">지정된 열거형에서 상수 값의 배열을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-323">Retrieves an array of the values of the constants in a specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="c4fce-324"><paramref name="enumType" />의 상수 값을 포함하는 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-324">An array that contains the values of the constants in <paramref name="enumType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-325">배열의 요소는 열거형 상수의 이진 값으로 정렬 됩니다 (즉, 부호 없는 크기).</span><span class="sxs-lookup"><span data-stu-id="c4fce-325">The elements of the array are sorted by the binary values of the enumeration constants (that is, by their unsigned magnitude).</span></span> <span data-ttu-id="c4fce-326">반환 된 배열에 대 한 정보를 표시 하는 다음 예제는 <xref:System.Enum.GetValues%2A> 방법 음수 값을, 0, 양수 값을 포함 하는 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-326">The following example displays information about the array returned by the <xref:System.Enum.GetValues%2A> method for an enumeration that includes a negative value, zero, and a positive value.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues1.cs#1)]
 [!code-vb[System.Enum.GetValues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues1.vb#1)]  
  
 <span data-ttu-id="c4fce-327"><xref:System.Enum.GetValues%2A> 의 각 멤버에 대 한 값이 포함 된 배열을 반환는 `enumType` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-327">The <xref:System.Enum.GetValues%2A> method returns an array that contains a value for each member of the `enumType` enumeration.</span></span> <span data-ttu-id="c4fce-328">여러 멤버에 같은 값이 있으면 반환 되는 배열에 중복 값이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-328">If multiple members have the same value, the returned array includes duplicate values.</span></span> <span data-ttu-id="c4fce-329">이 경우 호출 된 <xref:System.Enum.GetName%2A> 메서드 각 값이 반환된 된 배열에 중복 값을 가진 멤버에 할당 된 고유 이름은 복원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-329">In this case, calling the <xref:System.Enum.GetName%2A> method with each value in the returned array does not restore the unique names assigned to members that have duplicate values.</span></span> <span data-ttu-id="c4fce-330">열거형 멤버의 이름을 모두를 성공적으로 검색 하려면는 <xref:System.Enum.GetNames%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-330">To retrieve all the names of enumeration members successfully, call the <xref:System.Enum.GetNames%2A> method.</span></span>  
  
 <span data-ttu-id="c4fce-331"><xref:System.Enum.GetValues%2A> 리플렉션 전용 컨텍스트에 있는 리플렉션을 사용 하 여 메서드를 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-331">The <xref:System.Enum.GetValues%2A> method cannot be invoked by using reflection in a reflection-only context.</span></span> <span data-ttu-id="c4fce-332">대신, 사용 하 여 모든 열거형 멤버의 값을 검색할 수 있습니다는 <xref:System.Type.GetFields%2A?displayProperty=nameWithType> 배열을 가져올 메서드를 <xref:System.Reflection.FieldInfo> 열거형 멤버를 나타내며 다음 호출 하는 개체는 <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> 배열의 각 요소에 대해 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-332">Instead, you can retrieve the value of all enumeration members by using the <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method to get an array of <xref:System.Reflection.FieldInfo> objects that represent enumeration members and then call the <xref:System.Reflection.FieldInfo.GetRawConstantValue%2A?displayProperty=nameWithType> method on each element of the array.</span></span> <span data-ttu-id="c4fce-333">다음 예제에서는이 방법을 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-333">The following example illustrates this technique.</span></span> <span data-ttu-id="c4fce-334">다음 열거형 Enumerations.dll 라는 어셈블리에서 정의 하는 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-334">It requires that you define the following enumeration in an assembly named Enumerations.dll:</span></span>  
  
 [!code-csharp[System.Enum.GetValues#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#2)]
 [!code-vb[System.Enum.GetValues#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#2)]  
  
 <span data-ttu-id="c4fce-335">어셈블리가 리플렉션 전용 컨텍스트에 로드 되는 <xref:System.Type> 를 나타내는 개체입니다는 `Pets` 열거형 인스턴스화되면 배열을 <xref:System.Reflection.FieldInfo> 개체 검색 되 고 필드 값을 콘솔에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-335">The assembly is loaded in a reflection-only context, a <xref:System.Type> object that represents the `Pets` enumeration is instantiated, an array of <xref:System.Reflection.FieldInfo> objects is retrieved, and the field values are displayed to the console.</span></span>  
  
 [!code-csharp[System.Enum.GetValues#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.getvalues/cs/getvalues_reflectiononly.cs#3)]
 [!code-vb[System.Enum.GetValues#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.getvalues/vb/getvalues_reflectiononly.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-336">다음 예제에서는 <xref:System.Enum.GetValues%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-336">The following example illustrates the use of <xref:System.Enum.GetValues%2A>.</span></span>  
  
 [!code-cpp[enumgetvalues#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumgetvalues/CPP/EnumGetValues.cpp#1)]
 [!code-csharp[enumgetvalues#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumgetvalues/CS/EnumGetValues.cs#1)]
 [!code-vb[enumgetvalues#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumgetvalues/VB/EnumGetValues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-337"><paramref name="enumType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-337"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-338"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-338"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c4fce-339">이 메서드는 리플렉션 전용 컨텍스트에서 리플렉션에 의해 호출됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-339">The method is invoked by reflection in a reflection-only context,</span></span>  
  
 <span data-ttu-id="c4fce-340">또는</span><span class="sxs-lookup"><span data-stu-id="c4fce-340">-or-</span></span>  
  
 <span data-ttu-id="c4fce-341"><paramref name="enumType" />는 리플렉션 전용 컨텍스트에 로드된 어셈블리의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-341"><paramref name="enumType" /> is a type from an assembly loaded in a reflection-only context.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HasFlag">
      <MemberSignature Language="C#" Value="public bool HasFlag (Enum flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasFlag(class System.Enum flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.HasFlag(System.Enum)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasFlag (flag As Enum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasFlag(Enum ^ flag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Enum" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="c4fce-342">열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-342">An enumeration value.</span></span></param>
        <summary><span data-ttu-id="c4fce-343">현재 인스턴스에 하나 이상의 비트 필드가 설정되어 있는지를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-343">Determines whether one or more bit fields are set in the current instance.</span></span></summary>
        <returns>
          <span data-ttu-id="c4fce-344"><paramref name="flag" />에 설정되어 있는 비트 필드가 현재 인스턴스에도 설정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-344"><see langword="true" /> if the bit field or bit fields that are set in <paramref name="flag" /> are also set in the current instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-345"><xref:System.Enum.HasFlag%2A> 메서드는 다음 부울 식의 결과 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-345">The <xref:System.Enum.HasFlag%2A> method returns the result of the following Boolean expression.</span></span>  
  
```  
thisInstance And flag = flag   
```  
  
 <span data-ttu-id="c4fce-346">하는 경우의 기본 값 `flag` 가 0 이면 메서드는 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-346">If the underlying value of `flag` is zero, the method returns `true`.</span></span> <span data-ttu-id="c4fce-347">사용할 수 있습니다이 동작이 필요 없는 경우는 <xref:System.Enum.Equals%2A> 메서드 호출 0과 같은지 여부를 테스트할 <xref:System.Enum.HasFlag%2A> 경우에만의 내부 값 `flag` 다음 예제와 같이 0이 아닌 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-347">If this behavior is not desirable, you can use the <xref:System.Enum.Equals%2A> method to test for equality with zero and call <xref:System.Enum.HasFlag%2A> only if the underlying value of `flag` is non-zero, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag0.cs#1)]
 [!code-vb[System.Enum.HasFlag#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag0.vb#1)]  
  
 <span data-ttu-id="c4fce-348"><xref:System.Enum.HasFlag%2A> 반환로 표시 된 열거형 형식에 사용할 수는 <xref:System.FlagsAttribute> 특성을 여러 비트 필드가 설정 되어 있는지 여부를 확인 하기 위해 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-348">The <xref:System.Enum.HasFlag%2A> method is designed to be used with enumeration types that are marked with the <xref:System.FlagsAttribute> attribute and can be used to determine whether multiple bit fields are set.</span></span> <span data-ttu-id="c4fce-349">표시 되지 않은 열거형 형식에 대 한는 <xref:System.FlagsAttribute> 특성, 호출 된 <xref:System.Enum.Equals%2A> 메서드 또는 <xref:System.Enum.CompareTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-349">For enumeration types that are not marked with the <xref:System.FlagsAttribute> attribute, call either the <xref:System.Enum.Equals%2A> method or the <xref:System.Enum.CompareTo%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-350">다음 예제에서는 정의 `ItemsOrdered` 식당에서 고객이 주문할 수 있는 항목의 범주를 반영 하는 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-350">The following example defines an `ItemsOrdered` enumeration that reflects categories of items that a customer can order in a restaurant.</span></span> <span data-ttu-id="c4fce-351">이 예제에는 주 및 음료 모두 고객 주문 있는지 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-351">The example tests whether the customer has ordered both an entrée and a beverage.</span></span>  
  
 [!code-csharp[System.Enum.HasFlag#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.hasflag/cs/hasflag1.cs#2)]
 [!code-vb[System.Enum.HasFlag#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.hasflag/vb/hasflag1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-352"><paramref name="flag" />가 현재 인스턴스와는 다른 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-352"><paramref name="flag" /> is a different type than the current instance.</span></span></exception>
        <altmember cref="T:System.FlagsAttribute" />
        <altmember cref="M:System.Enum.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.IsDefined(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefined (enumType As Type, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefined(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-353">열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-353">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-354"><c>enumType</c>의 상수 값이나 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-354">The value or name of a constant in <c>enumType</c>.</span></span></param>
        <summary><span data-ttu-id="c4fce-355">지정된 정수 값 또는 문자열로 해당 이름이 지정된 열거형에 있는지 여부를 나타내는 부울을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-355">Returns a Boolean telling whether a given integral value, or its name as a string, exists in a specified enumeration.</span></span></summary>
        <returns>
          <span data-ttu-id="c4fce-356"><paramref name="enumType" />의 상수가 <paramref name="value" />와 같은 값을 가지면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-356"><see langword="true" /> if a constant in <paramref name="enumType" /> has a value equal to <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-357">`value` 매개 변수는 다음 중 하나일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-357">The `value` parameter can be any of the following:</span></span>  
  
-   <span data-ttu-id="c4fce-358">형식의 멤버 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-358">Any member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="c4fce-359">값이 형식의 열거형 멤버 변수 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-359">A variable whose value is an enumeration member of type `enumType`.</span></span>  
  
-   <span data-ttu-id="c4fce-360">열거형 멤버의 이름의 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-360">The string representation of the name of an enumeration member.</span></span> <span data-ttu-id="c4fce-361">문자열의 문자에는 열거형 멤버 이름으로 대/소문자 그대로 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-361">The characters in the string must have the same case as the enumeration member name.</span></span>  
  
-   <span data-ttu-id="c4fce-362">내부 형식의 값 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-362">A value of the underlying type of `enumType`.</span></span>  
  
 <span data-ttu-id="c4fce-363">경우에 상수 `enumType` 비트 필드의 집합을 정의 및 `value` 값, 이름 또는 여러 개의 비트 필드의 내부 값을 포함는 <xref:System.Enum.IsDefined%2A> 메서드 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-363">If the constants in `enumType` define a set of bit fields and `value` contains the values, names, or underlying values of multiple bit fields, the <xref:System.Enum.IsDefined%2A> method returns `false`.</span></span> <span data-ttu-id="c4fce-364">즉, 비트 필드의 집합을 정의 하는 열거형 메서드만 속하는지 여부를 확인 단일 비트 필드의 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-364">In other words, for enumerations that define a set of bit fields, the method determines only whether a single bit field belongs to the enumeration.</span></span> <span data-ttu-id="c4fce-365">태그가 지정 된 열거형 형식에 여러 비트 필드가 설정 되어 있는지 여부를 확인 하 고 <xref:System.FlagsAttribute> 특성을 호출할 수 있습니다는 <xref:System.Enum.HasFlag%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-365">To determine whether multiple bit fields are set in an enumeration type that is tagged with the <xref:System.FlagsAttribute> attribute, you can call the <xref:System.Enum.HasFlag%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-366">다음 예제에서는 정의 란 이름의 열거형 `PetType` 개별 비트 필드로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-366">The following example defines an enumeration named `PetType` that consists of individual bit fields.</span></span> <span data-ttu-id="c4fce-367">그런 다음 호출 하는 <xref:System.Enum.IsDefined%2A> 가능한 근본 열거형 값, 문자열 이름 및 여러 개의 비트 필드를 설정 하 여 발생 하는 복합 값을 사용 하 여 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-367">It then calls the <xref:System.Enum.IsDefined%2A> method with possible underlying enumeration values, string names, and composite values that result from setting multiple bit fields.</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined1.cs#1)]
 [!code-vb[System.Enum.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/IsDefined1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-368"><paramref name="enumType" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-368"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-369"><paramref name="enumType" />이 <see langword="Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-369"><paramref name="enumType" /> is not an <see langword="Enum" />.</span></span>  
  
 <span data-ttu-id="c4fce-370">또는</span><span class="sxs-lookup"><span data-stu-id="c4fce-370">-or-</span></span>  
  
 <span data-ttu-id="c4fce-371"><paramref name="value" />의 형식은 열거형이지만 <paramref name="enumType" /> 형식의 열거형은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-371">The type of <paramref name="value" /> is an enumeration, but it is not an enumeration of type <paramref name="enumType" />.</span></span>  
  
 <span data-ttu-id="c4fce-372">또는</span><span class="sxs-lookup"><span data-stu-id="c4fce-372">-or-</span></span>  
  
 <span data-ttu-id="c4fce-373"><paramref name="value" />의 형식이 <paramref name="enumType" />의 내부 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-373">The type of <paramref name="value" /> is not an underlying type of <paramref name="enumType" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c4fce-374"><paramref name="value" />는 <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, <see cref="T:System.UInt64" /> 또는 <see cref="T:System.String" />이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-374"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="c4fce-375">경우 <paramref name="enumType" /> 은 사용 하 여 정의 하는 열거형의 <see cref="T:System.FlagsAttribute" /> 특성을 메서드가 반환 <see langword="false" /> 여러 비트 필드의 경우 <paramref name="value" /> 설정 되어 있지만 <paramref name="value" /> 복합 열거형 값에 해당 하지 않는 경우 <paramref name="value" /> 여러 비트 플래그의 이름을 문자열 연결입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-375">If <paramref name="enumType" /> is an enumeration that is defined by using the <see cref="T:System.FlagsAttribute" /> attribute, the method returns <see langword="false" /> if multiple bit fields in <paramref name="value" /> are set but <paramref name="value" /> does not correspond to a composite enumeration value, or if <paramref name="value" /> is a string concatenation of the names of multiple bit flags.</span></span> <span data-ttu-id="c4fce-376">다음 예제에서는 <c>애완 동물</c> 열거형으로 정의 되는 <see cref="T:System.FlagsAttribute" /> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-376">In the following example, a <c>Pets</c> enumeration is defined with the <see cref="T:System.FlagsAttribute" /> attribute.</span></span> <span data-ttu-id="c4fce-377"><see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> 메서드가 반환 되 <see langword="false" /> 전달 하는 경우이 두 개의 비트 필드를가 하는 열거형 값 (<c>Pets.Dog</c> 및 <c>Pets.Cat</c>)을 설정 하 고 전달 하는 경우 해당 하는의 문자열 표현 열거형 값 ("Dog, Cat")입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-377">The <see cref="M:System.Enum.IsDefined(System.Type,System.Object)" /> method returns <see langword="false" /> when you pass it an enumeration value that has two bit fields (<c>Pets.Dog</c> and <c>Pets.Cat</c>) set, and when you pass it the string representation of that enumeration value ("Dog, Cat").</span></span>  
  
 [!code-csharp[System.Enum.IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.IsDefined/cs/isdefined2.cs#2)]
 [!code-vb[System.Enum.IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.IsDefined/vb/isdefined2.vb#2)]  
  
 <span data-ttu-id="c4fce-378">호출 하 여 여러 비트 필드가 설정 되어 있는지 여부를 확인할 수 있습니다는 <see cref="M:System.Enum.HasFlag(System.Enum)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-378">You can determine whether multiple bit fields are set by calling the <see cref="M:System.Enum.HasFlag(System.Enum)" /> method.</span></span></para>
        </block>
        <altmember cref="M:System.Enum.GetName(System.Type,System.Object)" />
        <altmember cref="M:System.Enum.GetNames(System.Type)" />
        <altmember cref="M:System.Enum.GetValues(System.Type)" />
        <altmember cref="M:System.Enum.HasFlag(System.Enum)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c4fce-379">하나 이상의 열거된 상수의 이름이나 숫자 값의 문자열 표현을 해당하는 열거형 개체로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-379">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <altmember cref="M:System.Enum.TryParse``1(System.String,``0@)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-380">열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-380">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-381">변환할 이름이나 값이 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-381">A string containing the name or value to convert.</span></span></param>
        <summary><span data-ttu-id="c4fce-382">하나 이상의 열거된 상수의 이름이나 숫자 값의 문자열 표현을 해당하는 열거형 개체로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-382">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span></summary>
        <returns><span data-ttu-id="c4fce-383">값이 <paramref name="enumType" />로 표현된 <paramref name="value" /> 형식의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-383">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-384">`value` 목록은 명명 된 쉼표 (,)로 구분 하는 상수 또는 매개 변수는 열거형 멤버의 기본 값 또는 명명 된 상수의 문자열 표현을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-384">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="c4fce-385">하나 이상의 공백이 앞 또는 각 값, 이름 또는에서 쉼표 뒤에 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-385">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="c4fce-386">경우 `value` 는 목록이 반환 값의 비트와 연결 된 특정된 이름의 값은 `OR` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-386">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="c4fce-387">경우 `value` 이름인의 명명 된 상수에 해당 하지 않는 `enumType`, 메서드에서 throw 된 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-387">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="c4fce-388">경우 `value` 의 내부 값을 나타내지 않는 정수 문자열 표현인는 `enumType` 열거형 메서드 내부 값은 열거형 멤버를 반환 `value` 정수 계열 형식으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-388">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="c4fce-389">이 동작이 필요 없는 경우 호출 된 <xref:System.Enum.IsDefined%2A> 정수의 특정 문자열 표현을 실제로의 구성원 인지 확인 하려면 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-389">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="c4fce-390">다음 예제에서는 정의 `Colors` 열거형을 호출 하는 <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> 문자열의 해당 열거형 값과 호출을 변환 하는 메서드는 <xref:System.Enum.IsDefined%2A> 에 값을 특정 정수 값 기반이 되도록 메서드 `Colors` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-390">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample1.cs#1)]
 [!code-vb[System.Enum.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample1.vb#1)]  
  
 <span data-ttu-id="c4fce-391">이 작업은 대/소문자 구분.</span><span class="sxs-lookup"><span data-stu-id="c4fce-391">This operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-392">다음 예제에서는 <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> 메서드를 호출 하 여 생성 하는 문자열의 배열을 구문 분석 된 <xref:System.Enum.GetNames%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-392">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="c4fce-393">또한 사용 하 여는 <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> 메서드를 비트 필드로 구성 된 열거형 값을 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-393">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-cpp[enumparse#1](~/samples/snippets/cpp/VS_Snippets_CLR/enumparse/CPP/EnumParse.cpp#1)]
 [!code-csharp[enumparse#1](~/samples/snippets/csharp/VS_Snippets_CLR/enumparse/CS/EnumParse.cs#1)]
 [!code-vb[enumparse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enumparse/VB/EnumParse.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-394"><paramref name="enumType" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-394"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-395"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-395"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="c4fce-396">또는</span><span class="sxs-lookup"><span data-stu-id="c4fce-396">-or-</span></span>  
  
 <span data-ttu-id="c4fce-397"><paramref name="value" />가 빈 문자열이거나 공백만을 포함하는 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-397"><paramref name="value" /> is either an empty string or only contains white space.</span></span>  
  
 <span data-ttu-id="c4fce-398">또는</span><span class="sxs-lookup"><span data-stu-id="c4fce-398">-or-</span></span>  
  
 <span data-ttu-id="c4fce-399"><paramref name="value" />가 이름이지만 해당 열거형에 대해 정의된 명명된 상수가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-399"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="c4fce-400"><paramref name="value" />가 <paramref name="enumType" />의 내부 형식 범위를 벗어난 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-400"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (Type enumType, string value, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(class System.Type enumType, string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (enumType As Type, value As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(Type ^ enumType, System::String ^ value, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-401">열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-401">An enumeration type.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-402">변환할 이름이나 값이 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-402">A string containing the name or value to convert.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="c4fce-403">대/소문자를 무시하려면 <see langword="true" />이고, 구분하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-403"><see langword="true" /> to ignore case; <see langword="false" /> to regard case.</span></span></param>
        <summary><span data-ttu-id="c4fce-404">하나 이상의 열거된 상수의 이름이나 숫자 값의 문자열 표현을 해당하는 열거형 개체로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-404">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="c4fce-405">매개 변수는 연산이 대/소문자를 구분하지 않는지를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-405">A parameter specifies whether the operation is case-insensitive.</span></span></summary>
        <returns><span data-ttu-id="c4fce-406">값이 <paramref name="enumType" />로 표현된 <paramref name="value" /> 형식의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-406">An object of type <paramref name="enumType" /> whose value is represented by <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-407">`value` 목록은 명명 된 쉼표 (,)로 구분 하는 상수 또는 매개 변수는 열거형 멤버의 기본 값 또는 명명 된 상수의 문자열 표현을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-407">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,).</span></span> <span data-ttu-id="c4fce-408">하나 이상의 공백이 앞 또는 각 값, 이름 또는에서 쉼표 뒤에 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-408">One or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="c4fce-409">경우 `value` 는 목록이 반환 값의 비트와 연결 된 특정된 이름의 값은 `OR` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-409">If `value` is a list, the return value is the value of the specified names combined with a bitwise `OR` operation.</span></span>  
  
 <span data-ttu-id="c4fce-410">경우 `value` 이름인의 명명 된 상수에 해당 하지 않는 `enumType`, 메서드에서 throw 된 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-410">If `value` is a name that does not correspond to a named constant of `enumType`, the method throws an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="c4fce-411">경우 `value` 의 내부 값을 나타내지 않는 정수 문자열 표현인는 `enumType` 열거형 메서드 내부 값은 열거형 멤버를 반환 `value` 정수 계열 형식으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-411">If `value` is the string representation of an integer that does not represent an underlying value of the `enumType` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="c4fce-412">이 동작이 필요 없는 경우 호출 된 <xref:System.Enum.IsDefined%2A> 정수의 특정 문자열 표현을 실제로의 구성원 인지 확인 하려면 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-412">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `enumType`.</span></span> <span data-ttu-id="c4fce-413">다음 예제에서는 정의 `Colors` 열거형을 호출 하는 <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> 문자열의 해당 열거형 값과 호출을 변환 하는 메서드는 <xref:System.Enum.IsDefined%2A> 에 값을 특정 정수 값 기반이 되도록 메서드 `Colors` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-413">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 <span data-ttu-id="c4fce-414">`ignoreCase` 매개 변수는이 작업은 대/소문자 구분 여부를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-414">The `ignoreCase` parameter specifies whether this operation is case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-415">다음 예제에서는 <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> 메서드를 호출 하 여 생성 하는 문자열의 배열을 구문 분석 된 <xref:System.Enum.GetNames%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-415">The following example uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method to parse an array of strings that are created by calling the <xref:System.Enum.GetNames%2A> method.</span></span> <span data-ttu-id="c4fce-416">또한 사용 하 여는 <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> 메서드를 비트 필드로 구성 된 열거형 값을 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-416">It also uses the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method to parse an enumeration value that consists of a bit field.</span></span>  
  
 [!code-csharp[System.Enum.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Enum.Parse/cs/ParseExample2.cs#2)]
 [!code-vb[System.Enum.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Enum.Parse/vb/ParseExample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-417"><paramref name="enumType" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-417"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-418"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-418"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="c4fce-419">또는</span><span class="sxs-lookup"><span data-stu-id="c4fce-419">-or-</span></span>  
  
 <span data-ttu-id="c4fce-420"><paramref name="value" />가 빈 문자열("")이거나 공백만을 포함하는 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-420"><paramref name="value" /> is either an empty string ("") or only contains white space.</span></span>  
  
 <span data-ttu-id="c4fce-421">또는</span><span class="sxs-lookup"><span data-stu-id="c4fce-421">-or-</span></span>  
  
 <span data-ttu-id="c4fce-422"><paramref name="value" />가 이름이지만 해당 열거형에 대해 정의된 명명된 상수가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-422"><paramref name="value" /> is a name, but not one of the named constants defined for the enumeration.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="c4fce-423"><paramref name="value" />가 <paramref name="enumType" />의 내부 형식 범위를 벗어난 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-423"><paramref name="value" /> is outside the range of the underlying type of <paramref name="enumType" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static TEnum Parse&lt;TEnum&gt; (string value, bool ignoreCase) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TEnum Parse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.Parse``1(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse(Of TEnum As Structure) (value As String, ignoreCase As Boolean) As TEnum" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static TEnum Parse(System::String ^ value, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEnum</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum">To be added.</typeparam>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-424">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-424">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-425">현재 값을 내부 형식에 따라 부울 값으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-425">Converts the current value to a Boolean value based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-426">이 멤버는 항상 예외를 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-426">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-427">현재 구현되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-427">Currently not implemented.</span></span> <span data-ttu-id="c4fce-428">항상 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-428">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c4fce-429">모든 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-429">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-430">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-430">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-431">현재 값을 내부 형식에 따라 8비트 부호 없는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-431">Converts the current value to an 8-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-432">변환된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-432">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-433">사용 하 여 <xref:System.Convert> 변환을 수행 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-433">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-434">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-434">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-435">현재 값을 내부 형식에 따라 유니코드 문자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-435">Converts the current value to a Unicode character based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-436">이 멤버는 항상 예외를 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-436">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-437">현재 구현되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-437">Currently not implemented.</span></span> <span data-ttu-id="c4fce-438">항상 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-438">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c4fce-439">모든 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-439">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-440">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-440">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-441">현재 값을 내부 형식에 따라 <see cref="T:System.DateTime" />으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-441">Converts the current value to a <see cref="T:System.DateTime" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-442">이 멤버는 항상 예외를 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-442">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-443">현재 구현되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-443">Currently not implemented.</span></span> <span data-ttu-id="c4fce-444">항상 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-444">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c4fce-445">모든 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-445">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-446">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-446">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-447">현재 값을 내부 형식에 따라 <see cref="T:System.Decimal" />으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-447">Converts the current value to a <see cref="T:System.Decimal" /> based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-448">이 멤버는 항상 예외를 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-448">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-449">현재 구현되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-449">Currently not implemented.</span></span> <span data-ttu-id="c4fce-450">항상 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-450">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c4fce-451">모든 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-451">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-452">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-452">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-453">현재 값을 내부 형식에 따라 배정밀도 부동 소수점 숫자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-453">Converts the current value to a double-precision floating point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-454">이 멤버는 항상 예외를 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-454">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-455">현재 구현되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-455">Currently not implemented.</span></span> <span data-ttu-id="c4fce-456">항상 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-456">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c4fce-457">모든 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-457">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-458">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-458">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-459">현재 값을 내부 형식에 따라 16비트 부호 있는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-459">Converts the current value to a 16-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-460">변환된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-460">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-461">사용 하 여 <xref:System.Convert> 변환을 수행 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-461">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-462">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-462">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-463">현재 값을 내부 형식에 따라 32비트 부호 있는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-463">Converts the current value to a 32-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-464">변환된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-464">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-465">사용 하 여 <xref:System.Convert> 변환을 수행 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-465">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-466">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-466">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-467">현재 값을 내부 형식에 따라 64비트 부호 있는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-467">Converts the current value to a 64-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-468">변환된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-468">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-469">사용 하 여 <xref:System.Convert> 변환을 수행 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-469">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-470">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-470">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-471">현재 값을 내부 형식에 따라 8비트 부호 있는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-471">Converts the current value to an 8-bit signed integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-472">변환된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-472">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-473">사용 하 여 <xref:System.Convert> 변환을 수행 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-473">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-474">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-474">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-475">현재 값을 내부 형식에 따라 단정밀도 부동 소수점 숫자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-475">Converts the current value to a single-precision floating-point number based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-476">이 멤버는 항상 예외를 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-476">This member always throws an exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-477">현재 구현되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-477">Currently not implemented.</span></span> <span data-ttu-id="c4fce-478">항상 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-478">Always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="c4fce-479">모든 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-479">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c4fce-480">변환할 대상 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-480">The type to convert to.</span></span></param>
        <param name="provider"><span data-ttu-id="c4fce-481">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-481">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-482">현재 값을 내부 형식에 따라 지정된 형식으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-482">Converts the current value to a specified type based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-483">변환된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-483">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-484">사용 하 여 <xref:System.Convert> 변환을 수행 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-484">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-485">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-485">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-486">현재 값을 내부 형식에 따라 16비트 부호 없는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-486">Converts the current value to a 16-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-487">변환된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-487">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-488">사용 하 여 <xref:System.Convert> 변환을 수행 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-488">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-489">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-489">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-490">현재 값을 내부 형식에 따라 32비트 부호 없는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-490">Converts the current value to a 32-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-491">변환된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-491">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-492">사용 하 여 <xref:System.Convert> 변환을 수행 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-492">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-493">문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-493">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="c4fce-494">현재 값을 내부 형식에 따라 64비트 부호 없는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-494">Converts the current value to a 64-bit unsigned integer based on the underlying type.</span></span></summary>
        <returns><span data-ttu-id="c4fce-495">변환된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-495">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-496">사용 하 여 <xref:System.Convert> 변환을 수행 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-496">Uses <xref:System.Convert> to perform the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c4fce-497">지정된 정수 값을 열거형 멤버로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-497">Converts a specified integer value to an enumeration member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Byte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Byte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-498">반환할 열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-498">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-499">열거형 멤버로 변환할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-499">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c4fce-500">지정된 8비트 부호 없는 정수를 열거형 멤버로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-500">Converts the specified 8-bit unsigned integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c4fce-501"><paramref name="value" />로 설정된 열거형의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-501">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-502"><xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> 메서드 변환 `value` 내부 값은 열거형 멤버 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-502">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Byte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c4fce-503">변환이 성공 값의 범위를 벗어난 경우에 참고 `enumType` 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-503">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c4fce-504">되도록 `value` 의 유효한 기본 값이는 `enumType` 열거형에 전달 된 <xref:System.Enum.IsDefined%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-504">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c4fce-505">이 변환 메서드 반환 형식의 값 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-505">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c4fce-506">그런 다음 캐스팅 하거나 형식의 개체로 변환할 수 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-506">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-507"><paramref name="enumType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-507"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-508"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-508"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Short) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-509">반환할 열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-509">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-510">열거형 멤버로 변환할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-510">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c4fce-511">지정된 16비트 부호 있는 정수를 열거형 멤버로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-511">Converts the specified 16-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c4fce-512"><paramref name="value" />로 설정된 열거형의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-512">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-513"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> 메서드 변환 `value` 내부 값은 열거형 멤버 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-513">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c4fce-514">변환이 성공 값의 범위를 벗어난 경우에 참고 `enumType` 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-514">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c4fce-515">되도록 `value` 의 유효한 기본 값이는 `enumType` 열거형에 전달 된 <xref:System.Enum.IsDefined%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-515">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c4fce-516">이 변환 메서드 반환 형식의 값 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-516">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c4fce-517">그런 다음 캐스팅 하거나 형식의 개체로 변환할 수 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-517">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-518"><paramref name="enumType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-518"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-519"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-519"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-520">반환할 열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-520">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-521">열거형 멤버로 변환할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-521">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c4fce-522">지정된 32비트 부호 있는 정수를 열거형 멤버로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-522">Converts the specified 32-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c4fce-523"><paramref name="value" />로 설정된 열거형의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-523">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-524"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> 메서드 변환 `value` 내부 값은 열거형 멤버 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-524">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c4fce-525">변환이 성공 값의 범위를 벗어난 경우에 참고 `enumType` 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-525">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c4fce-526">되도록 `value` 의 유효한 기본 값이는 `enumType` 열거형에 전달 된 <xref:System.Enum.IsDefined%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-526">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c4fce-527">이 변환 메서드 반환 형식의 값 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-527">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c4fce-528">그런 다음 캐스팅 하거나 형식의 개체로 변환할 수 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-528">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-529"><paramref name="enumType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-529"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-530"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-530"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Long) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-531">반환할 열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-531">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-532">열거형 멤버로 변환할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-532">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c4fce-533">지정된 64비트 부호 있는 정수를 열거형 멤버로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-533">Converts the specified 64-bit signed integer to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c4fce-534"><paramref name="value" />로 설정된 열거형의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-534">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-535"><xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> 메서드 변환 `value` 내부 값은 열거형 멤버 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-535">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Int64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c4fce-536">변환이 성공 값의 범위를 벗어난 경우에 참고 `enumType` 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-536">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c4fce-537">되도록 `value` 의 유효한 기본 값이는 `enumType` 열거형에 전달 된 <xref:System.Enum.IsDefined%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-537">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c4fce-538">이 변환 메서드 반환 형식의 값 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-538">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c4fce-539">그런 다음 캐스팅 하거나 형식의 개체로 변환할 수 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-539">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-540"><paramref name="enumType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-540"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-541"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-541"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-542">반환할 열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-542">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-543">열거형 멤버로 변환할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-543">The value convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c4fce-544">정수 값이 있는 지정된 개체를 열거형 멤버로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-544">Converts the specified object with an integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c4fce-545">값이 <paramref name="value" />인 열거형 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-545">An enumeration object whose value is <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-546"><xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> 메서드는 정수 계열 값 변환 `value` 내부 값은 열거형 멤버 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-546">The <xref:System.Enum.ToObject%28System.Type%2CSystem.Object%29> method converts the integral value `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c4fce-547">변환이 성공 값의 범위를 벗어난 경우에 참고 `enumType` 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-547">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c4fce-548">되도록 `value` 의 유효한 기본 값이는 `enumType` 열거형에 전달 된 <xref:System.Enum.IsDefined%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-548">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c4fce-549">이 변환 메서드 반환 형식의 값 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-549">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c4fce-550">그런 다음 캐스팅 하거나 형식의 개체로 변환할 수 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-550">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-551"><paramref name="enumType" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-551"><paramref name="enumType" /> or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-552"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-552"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span>  
  
 <span data-ttu-id="c4fce-553">또는</span><span class="sxs-lookup"><span data-stu-id="c4fce-553">-or-</span></span>  
  
 <span data-ttu-id="c4fce-554"><paramref name="value" />가 <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" /> 또는 <see cref="T:System.UInt64" /> 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-554"><paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />, <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As SByte) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-555">반환할 열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-555">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-556">열거형 멤버로 변환할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-556">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c4fce-557">지정된 8비트 부호 있는 정수 값을 열거형 멤버로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-557">Converts the specified 8-bit signed integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c4fce-558"><paramref name="value" />로 설정된 열거형의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-558">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-559"><xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> 메서드 변환 `value` 내부 값은 열거형 멤버 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-559">The <xref:System.Enum.ToObject%28System.Type%2CSystem.SByte%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c4fce-560">변환이 성공 값의 범위를 벗어난 경우에 참고 `enumType` 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-560">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c4fce-561">되도록 `value` 의 유효한 기본 값이는 `enumType` 열거형에 전달 된 <xref:System.Enum.IsDefined%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-561">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c4fce-562">이 변환 메서드 반환 형식의 값 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-562">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c4fce-563">그런 다음 캐스팅 하거나 형식의 개체로 변환할 수 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-563">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-564"><paramref name="enumType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-564"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-565"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-565"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UShort) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt16 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-566">반환할 열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-566">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-567">열거형 멤버로 변환할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-567">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c4fce-568">지정된 16비트 부호 없는 정수 값을 열거형 멤버로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-568">Converts the specified 16-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c4fce-569"><paramref name="value" />로 설정된 열거형의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-569">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-570"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> 메서드 변환 `value` 내부 값은 열거형 멤버 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-570">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt16%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c4fce-571">변환이 성공 값의 범위를 벗어난 경우에 참고 `enumType` 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-571">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c4fce-572">되도록 `value` 의 유효한 기본 값이는 `enumType` 열거형에 전달 된 <xref:System.Enum.IsDefined%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-572">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c4fce-573">이 변환 메서드 반환 형식의 값 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-573">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c4fce-574">그런 다음 캐스팅 하거나 형식의 개체로 변환할 수 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-574">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-575"><paramref name="enumType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-575"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-576"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-576"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As UInteger) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-577">반환할 열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-577">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-578">열거형 멤버로 변환할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-578">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c4fce-579">지정된 32비트 부호 없는 정수 값을 열거형 멤버로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-579">Converts the specified 32-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c4fce-580"><paramref name="value" />로 설정된 열거형의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-580">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-581"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> 메서드 변환 `value` 내부 값은 열거형 멤버 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-581">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt32%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c4fce-582">변환이 성공 값의 범위를 벗어난 경우에 참고 `enumType` 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-582">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c4fce-583">되도록 `value` 의 유효한 기본 값이는 `enumType` 열거형에 전달 된 <xref:System.Enum.IsDefined%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-583">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c4fce-584">이 변환 메서드 반환 형식의 값 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-584">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c4fce-585">그런 다음 캐스팅 하거나 형식의 개체로 변환할 수 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-585">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-586"><paramref name="enumType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-586"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-587"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-587"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public static object ToObject (Type enumType, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ToObject(class System.Type enumType, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToObject(System.Type,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToObject (enumType As Type, value As ULong) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ ToObject(Type ^ enumType, System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="enumType"><span data-ttu-id="c4fce-588">반환할 열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-588">The enumeration type to return.</span></span></param>
        <param name="value"><span data-ttu-id="c4fce-589">열거형 멤버로 변환할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-589">The value to convert to an enumeration member.</span></span></param>
        <summary><span data-ttu-id="c4fce-590">지정된 64비트 부호 없는 정수 값을 열거형 멤버로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-590">Converts the specified 64-bit unsigned integer value to an enumeration member.</span></span></summary>
        <returns><span data-ttu-id="c4fce-591"><paramref name="value" />로 설정된 열거형의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-591">An instance of the enumeration set to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-592"><xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> 메서드 변환 `value` 내부 값은 열거형 멤버 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-592">The <xref:System.Enum.ToObject%28System.Type%2CSystem.UInt64%29> method converts `value` to an enumeration member whose underlying value is `value`.</span></span> <span data-ttu-id="c4fce-593">변환이 성공 값의 범위를 벗어난 경우에 참고 `enumType` 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-593">Note that the conversion succeeds even if value is outside the bounds of `enumType` members.</span></span> <span data-ttu-id="c4fce-594">되도록 `value` 의 유효한 기본 값이는 `enumType` 열거형에 전달 된 <xref:System.Enum.IsDefined%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="c4fce-594">To ensure that `value` is a valid underlying value of the `enumType` enumeration, pass it to the <xref:System.Enum.IsDefined%2A> method.</span></span>  
  
 <span data-ttu-id="c4fce-595">이 변환 메서드 반환 형식의 값 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-595">This conversion method returns a value of type <xref:System.Object>.</span></span> <span data-ttu-id="c4fce-596">그런 다음 캐스팅 하거나 형식의 개체로 변환할 수 `enumType`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-596">You can then cast it or convert it to an object of type `enumType`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c4fce-597"><paramref name="enumType" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-597"><paramref name="enumType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-598"><paramref name="enumType" />이 <see cref="T:System.Enum" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-598"><paramref name="enumType" /> is not an <see cref="T:System.Enum" />.</span></span></exception>
        <altmember cref="M:System.Enum.IsDefined(System.Type,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c4fce-599">이 인스턴스의 값을 해당하는 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-599">Converts the value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c4fce-600">이 인스턴스의 값을 해당하는 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-600">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="c4fce-601">이 인스턴스 값의 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-601">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-602">반환 값 ("G")는 일반 형식 지정자와 함께 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-602">The return value is formatted with the general format specifier ("G").</span></span> <span data-ttu-id="c4fce-603">즉, 하는 경우는 <xref:System.FlagsAttribute> 에 적용 되지 않으면이 열거 형식의 하 고이 인스턴스의 값에 명명 된 상수 같음을 다음 반환 값은 상수 이름을 포함 하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-603">That is, if the <xref:System.FlagsAttribute> is not applied to this enumerated type and there is a named constant equal to the value of this instance, then the return value is a string containing the name of the constant.</span></span> <span data-ttu-id="c4fce-604">경우는 <xref:System.FlagsAttribute> 적용 되는이 인스턴스의 값과 같은 하나 이상의 명명 된 상수를 조합 하 고 다음 반환 값은 상수 이름의의 구분 기호로 구분 된 목록이 들어 있는 string입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-604">If the <xref:System.FlagsAttribute> is applied and there is a combination of one or more named constants equal to the value of this instance, then the return value is a string containing a delimiter-separated list of the names of the constants.</span></span> <span data-ttu-id="c4fce-605">그렇지 않으면 반환 값은이 인스턴스의 숫자 값의 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-605">Otherwise, the return value is the string representation of the numeric value of this instance.</span></span> <span data-ttu-id="c4fce-606">열거형 값을 형식 지정에 대 한 자세한 내용은 참조 [열거형 형식 문자열](~/docs/standard/base-types/enumeration-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-606">For more information about formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="c4fce-607">일반 형식 지정에 대 한 자세한 내용은 참조 하십시오. [형식 지정](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-607">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-608">다음 예제에서는 열거 된 값을 문자열로 변환 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-608">The following example demonstrates converting an enumerated value to a string.</span></span>  
  
 [!code-cpp[Classic Enum.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Enum.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic Enum.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Enum.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="c4fce-609">여러 열거형 멤버는 동일한 기본 값을 포함 하는 경우 해당 내부 값을 기반으로 하는 열거형 멤버의 이름이의 문자열 표현을 검색 하려고 하면 코드 해야 어떠한가 정도 이름에 대 한 메서드가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-609">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="c4fce-610">다음 열거형은 두 명의 멤버를 정의 하는 예를 들어 <c>Shade.Gray</c> 및 <c>Shade.Grey</c>, 기본값이 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-610">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
 [!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)]
 [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]  
  
 <span data-ttu-id="c4fce-611">다음 메서드 호출이 시도의 멤버 이름을 검색 하는 <c>음영</c> 기본 값이 1 인 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-611">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="c4fce-612">"Gray" 또는 "Grey"에 메서드가 반환할 수 있습니다 및 코드는 어떠한가 정도 대 한 문자열을 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-612">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
 [!code-csharp[System.Enum.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#2)]
 [!code-vb[System.Enum.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString().")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="c4fce-613">이 항목은 사용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-613">(obsolete)</span></span></param>
        <summary><span data-ttu-id="c4fce-614">이 메서드 오버로드는 사용되지 않으므로 <see cref="M:System.Enum.ToString" />을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-614">This method overload is obsolete; use <see cref="M:System.Enum.ToString" />.</span></span></summary>
        <returns><span data-ttu-id="c4fce-615">이 인스턴스 값의 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-615">The string representation of the value of this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="c4fce-616">서식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-616">A format string.</span></span></param>
        <summary><span data-ttu-id="c4fce-617">지정된 형식을 사용하여 이 인스턴스의 값을 해당하는 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-617">Converts the value of this instance to its equivalent string representation using the specified format.</span></span></summary>
        <returns><span data-ttu-id="c4fce-618">이 인스턴스의 값을 <paramref name="format" />에 지정된 내용에 따라 나타낸 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-618">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-619">`format` 매개 변수는 "G" 또는 "g", "D" 또는 "d", "X" 또는 "x" 및 "F" 또는 "f" 형식 문자열 (형식 문자열은 대/소문자 구분)를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-619">The `format` parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</span></span> <span data-ttu-id="c4fce-620">경우 `format` 은 `null` 또는 빈 문자열 (""), 일반 형식 지정자 ("G")가 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-620">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="c4fce-621">열거형 형식 문자열 및 서식 지정 열거형 값에 대 한 자세한 내용은 참조 [열거형 형식 문자열](~/docs/standard/base-types/enumeration-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-621">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="c4fce-622">일반 형식 지정에 대 한 자세한 내용은 참조 하십시오. [형식 지정](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-622">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-623">다음 예제에서는 열거 된 값을 문자열로 변환 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-623">The following example demonstrates how to convert an enumerated value to a string.</span></span>  
  
 [!code-cpp[enum.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/enum.tostring/CPP/tostr.cpp#1)]
 [!code-csharp[enum.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/enum.tostring/CS/tostr.cs#1)]
 [!code-vb[enum.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/enum.tostring/VB/tostr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="c4fce-624"><paramref name="format" />에는 잘못된 사양이 들어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-624"><paramref name="format" /> contains an invalid specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c4fce-625"><paramref name="format" /> 은 "X" 와 같지만 열거형 형식을 알 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-625"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="c4fce-626">여러 열거형 멤버는 동일한 기본 값을 포함 하는 경우 해당 내부 값을 기반으로 하는 열거형 멤버의 이름이의 문자열 표현을 검색 하려고 하면 코드 해야 어떠한가 정도 이름에 대 한 메서드가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-626">If multiple enumeration members have the same underlying value and you attempt to retrieve the string representation of an enumeration member's name based on its underlying value, your code should not make any assumptions about which name the method will return.</span></span> <span data-ttu-id="c4fce-627">다음 열거형은 두 명의 멤버를 정의 하는 예를 들어 <c>Shade.Gray</c> 및 <c>Shade.Grey</c>, 기본값이 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-627">For example, the following enumeration defines two members, <c>Shade.Gray</c> and <c>Shade.Grey</c>, that have the same underlying value.</span></span>  
  
 [!code-csharp[System.Enum.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#1)]
 [!code-vb[System.Enum.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#1)]  
  
 <span data-ttu-id="c4fce-628">다음 메서드 호출이 시도의 멤버 이름을 검색 하는 <c>음영</c> 기본 값이 1 인 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-628">The following method call attempts to retrieve the name of a member of the <c>Shade</c> enumeration whose underlying value is 1.</span></span> <span data-ttu-id="c4fce-629">"Gray" 또는 "Grey"에 메서드가 반환할 수 있습니다 및 코드는 어떠한가 정도 대 한 문자열을 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-629">The method can return either "Gray" or "Grey", and your code should not make any assumptions about which string will be returned.</span></span>  
  
 [!code-csharp[System.Enum.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tostring/cs/tostringbyvalue1.cs#3)]
 [!code-vb[System.Enum.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tostring/vb/tostringbyvalue1.vb#3)]</para>
        </block>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
        <altmember cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The provider argument is not used. Please use ToString(String).")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="c4fce-630">형식 사양입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-630">A format specification.</span></span></param>
        <param name="provider"><span data-ttu-id="c4fce-631">이 항목은 사용되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-631">(Obsolete.)</span></span></param>
        <summary><span data-ttu-id="c4fce-632">이 메서드 오버로드는 사용되지 않으므로 <see cref="M:System.Enum.ToString(System.String)" />을 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-632">This method overload is obsolete; use <see cref="M:System.Enum.ToString(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="c4fce-633">이 인스턴스의 값을 <paramref name="format" />에 지정된 내용에 따라 나타낸 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-633">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-634">`format` 매개 변수는 "G" 또는 "g", "D" 또는 "d", "X" 또는 "x" 및 "F" 또는 "f" 형식 문자열 (형식 문자열은 대/소문자 구분)를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-634">The `format` parameter can contain the "G" or "g", "D" or "d", "X" or "x", and "F" or "f" format strings (the format string is not case-sensitive).</span></span> <span data-ttu-id="c4fce-635">경우 `format` 은 `null` 또는 빈 문자열 (""), 일반 형식 지정자 ("G")가 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-635">If `format` is `null` or an empty string (""), the general format specifier ("G") is used.</span></span> <span data-ttu-id="c4fce-636">열거형 형식 문자열 및 서식 지정 열거형 값에 대 한 자세한 내용은 참조 [열거형 형식 문자열](~/docs/standard/base-types/enumeration-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-636">For more information about the enumeration format strings and formatting enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span> <span data-ttu-id="c4fce-637">일반 형식 지정에 대 한 자세한 내용은 참조 하십시오. [형식 지정](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-637">For more information about formatting in general, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="c4fce-638">만 지정 `format`; `provider` 매개 변수는 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-638">Specify only `format`; the `provider` parameter is obsolete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="c4fce-639"><paramref name="format" />에 유효한 형식 사양이 들어 있지 않은 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-639"><paramref name="format" /> does not contain a valid format specification.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="c4fce-640"><paramref name="format" /> 은 "X" 와 같지만 열거형 형식을 알 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-640"><paramref name="format" /> equals "X", but the enumeration type is unknown.</span></span></exception>
        <altmember cref="M:System.Enum.Format(System.Type,System.Object,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c4fce-641">하나 이상의 열거된 상수의 이름이나 숫자 값의 문자열 표현을 해당하는 열거형 개체로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-641">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="c4fce-642">반환 값은 변환의 성공 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-642">The return value indicates whether the conversion succeeded.</span></span></summary>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (Type enumType, string value, bool ignoreCase, out object result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(class System.Type enumType, string value, bool ignoreCase, [out] object&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (enumType As Type, value As String, ignoreCase As Boolean, ByRef result As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(Type ^ enumType, System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] System::Object ^ % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enumType" Type="System.Type" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="enumType">To be added.</param>
        <param name="value">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="result" Type="TEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="c4fce-643">변환할 열거형 형식을 <c>값</c>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-643">The enumeration type to which to convert <c>value</c>.</span></span></typeparam>
        <param name="value"><span data-ttu-id="c4fce-644">변환할 열거형 이름 또는 내부 값에 대한 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-644">The string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="result"><span data-ttu-id="c4fce-645">이 메서드가 반환할 때 구문 분석 작업에 성공하면 <c>result</c>에는 값이 <c>value</c>로 표현되는 <c>TEnum</c> 형식의 개체가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-645">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span></span> <span data-ttu-id="c4fce-646">구문 분석 작업이 실패하면 <c>result</c>에 <c>TEnum</c> 기본 형식의 기본값이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-646">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="c4fce-647">이 값은 <c>TEnum</c> 열거형의 멤버가 아니어도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-647">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="c4fce-648">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-648">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="c4fce-649">하나 이상의 열거된 상수의 이름이나 숫자 값의 문자열 표현을 해당하는 열거형 개체로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-649">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="c4fce-650">반환 값은 변환의 성공 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-650">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns>
          <span data-ttu-id="c4fce-651"><see langword="true" /> 매개 변수가 변환되었으면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-651"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-652"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> 동일는 <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> 메서드와 비슷하지만 throw 된 예외를 반환 하는 대신 `false` 변환이 실패 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="c4fce-652"><xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="c4fce-653">열거형 값의 문자열 표현을 구문 분석할 때 처리 되는 예외에 대 한 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-653">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="c4fce-654">`value` 쉼표 (,)로 구분 된 명명 된 상수 또는 내부 값의 목록 또는 매개 변수는 열거형 멤버의 기본 값 또는 명명 된 상수의 문자열 표현을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-654">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="c4fce-655">경우 `value` 여러 개 명명 된 상수 또는 값에 공백이 하나 이상의 앞 또는 뒤에 각 값, 이름 또는에서 쉼표 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-655">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="c4fce-656">경우 `value` 는 목록 `result` 는 지정 된 이름의 값을 반영 하거나 내부 값에 비트 결합 `OR` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-656">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="c4fce-657">경우 `value` 열거형 값의 비교 이름의 문자열 표현인 `value` 열거형 이름은 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-657">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names is case-sensitive.</span></span>  
  
 <span data-ttu-id="c4fce-658">경우 `value` 의 명명 된 상수에 해당 하지 않는 이름인 `TEnum`, 메서드가 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-658">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="c4fce-659">경우 `value` 의 내부 값을 나타내지 않는 정수 문자열 표현인는 `TEnum` 열거형 메서드 내부 값은 열거형 멤버를 반환 `value` 정수 계열 형식으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-659">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="c4fce-660">이 동작이 필요 없는 경우 호출 된 <xref:System.Enum.IsDefined%2A> 정수의 특정 문자열 표현을 실제로의 구성원 인지 확인 하려면 `TEnum`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-660">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-661">다음 예제에서는 정의 `Colors` 열거형을 호출 하는 <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> 문자열의 해당 열거형 값과 호출을 변환 하는 메서드는 <xref:System.Enum.IsDefined%2A> 에 값을 특정 정수 값 기반이 되도록 메서드 `Colors` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-661">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Enum.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-662"><paramref name="TEnum" />이 열거형 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-662"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryParse&lt;TEnum&gt;">
      <MemberSignature Language="C#" Value="public static bool TryParse&lt;TEnum&gt; (string value, bool ignoreCase, out TEnum result) where TEnum : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse&lt;struct .ctor (class System.ValueType) TEnum&gt;(string value, bool ignoreCase, [out] !!TEnum&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse(Of TEnum As Structure) (value As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEnum&gt;&#xA; where TEnum : value class static bool TryParse(System::String ^ value, bool ignoreCase, [Runtime::InteropServices::Out] TEnum % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEnum">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="result" Type="TEnum&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TEnum"><span data-ttu-id="c4fce-663">변환할 열거형 형식을 <c>값</c>합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-663">The enumeration type to which to convert <c>value</c>.</span></span></typeparam>
        <param name="value"><span data-ttu-id="c4fce-664">변환할 열거형 이름 또는 내부 값에 대한 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-664">The string representation of the enumeration name or underlying value to convert.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="c4fce-665">대/소문자를 무시하려면 <see langword="true" />이고, 대/소문자를 구분하려면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-665"><see langword="true" /> to ignore case; <see langword="false" /> to consider case.</span></span></param>
        <param name="result"><span data-ttu-id="c4fce-666">이 메서드가 반환할 때 구문 분석 작업에 성공하면 <c>result</c>에는 값이 <c>value</c>로 표현되는 <c>TEnum</c> 형식의 개체가 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-666">When this method returns, <c>result</c> contains an object of type <c>TEnum</c> whose value is represented by <c>value</c> if the parse operation succeeds.</span></span> <span data-ttu-id="c4fce-667">구문 분석 작업이 실패하면 <c>result</c>에 <c>TEnum</c> 기본 형식의 기본값이 포함됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-667">If the parse operation fails, <c>result</c> contains the default value of the underlying type of <c>TEnum</c>.</span></span> <span data-ttu-id="c4fce-668">이 값은 <c>TEnum</c> 열거형의 멤버가 아니어도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-668">Note that this value need not be a member of the <c>TEnum</c> enumeration.</span></span> <span data-ttu-id="c4fce-669">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-669">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="c4fce-670">하나 이상의 열거된 상수의 이름이나 숫자 값의 문자열 표현을 해당하는 열거형 개체로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-670">Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</span></span> <span data-ttu-id="c4fce-671">매개 변수는 연산이 대/소문자를 구분하는지를 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-671">A parameter specifies whether the operation is case-sensitive.</span></span> <span data-ttu-id="c4fce-672">반환 값은 변환의 성공 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-672">The return value indicates whether the conversion succeeded.</span></span></summary>
        <returns>
          <span data-ttu-id="c4fce-673"><see langword="true" /> 매개 변수가 변환되었으면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-673"><see langword="true" /> if the <paramref name="value" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c4fce-674"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> 동일는 <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> 메서드와 비슷하지만 throw 된 예외를 반환 하는 대신 `false` 변환이 실패 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="c4fce-674"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> is identical to the <xref:System.Enum.Parse%28System.Type%2CSystem.String%2CSystem.Boolean%29> method, except that instead of throwing an exception, it returns `false` if the conversion fails.</span></span> <span data-ttu-id="c4fce-675">열거형 값의 문자열 표현을 구문 분석할 때 처리 되는 예외에 대 한 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-675">It eliminates the need for exception handling when parsing the string representation of an enumeration value.</span></span>  
  
 <span data-ttu-id="c4fce-676">`value` 쉼표 (,)로 구분 된 명명 된 상수 또는 내부 값의 목록 또는 매개 변수는 열거형 멤버의 기본 값 또는 명명 된 상수의 문자열 표현을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-676">The `value` parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,).</span></span> <span data-ttu-id="c4fce-677">경우 `value` 여러 개 명명 된 상수 또는 값에 공백이 하나 이상의 앞 또는 뒤에 각 값, 이름 또는에서 쉼표 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-677">If `value` includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in `value`.</span></span> <span data-ttu-id="c4fce-678">경우 `value` 는 목록 `result` 는 지정 된 이름의 값을 반영 하거나 내부 값에 비트 결합 `OR` 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-678">If `value` is a list, `result` reflects the value of the specified names or underlying values combined with a bitwise `OR` operation.</span></span> <span data-ttu-id="c4fce-679">경우 `value` 열거형 값의 비교 이름의 문자열 표현인 `value` 열거형 이름에 따라 달라 집니다는 `ignoreCase` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-679">If `value` is the string representation of the name of an enumeration value, the comparison of `value` with enumeration names depends on the `ignoreCase` parameter.</span></span> <span data-ttu-id="c4fce-680">경우 `true`, 비교는 대/소문자 구분 경우 `false`, 대/소문자 구분 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-680">If `true`, the comparison is case-insensitive; if `false`, it is case-sensitive.</span></span>  
  
 <span data-ttu-id="c4fce-681">경우 `value` 의 명명 된 상수에 해당 하지 않는 이름인 `TEnum`, 메서드가 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-681">If `value` is a name that does not correspond to a named constant of `TEnum`, the method returns `false`.</span></span> <span data-ttu-id="c4fce-682">경우 `value` 의 내부 값을 나타내지 않는 정수 문자열 표현인는 `TEnum` 열거형 메서드 내부 값은 열거형 멤버를 반환 `value` 정수 계열 형식으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-682">If `value` is the string representation of an integer that does not represent an underlying value of the `TEnum` enumeration, the method returns an enumeration member whose underlying value is `value` converted to an integral type.</span></span> <span data-ttu-id="c4fce-683">이 동작이 필요 없는 경우 호출 된 <xref:System.Enum.IsDefined%2A> 정수의 특정 문자열 표현을 실제로의 구성원 인지 확인 하려면 `TEnum`합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-683">If this behavior is undesirable, call the <xref:System.Enum.IsDefined%2A> method to ensure that a particular string representation of an integer is actually a member of `TEnum`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c4fce-684">다음 예제에서는 정의 `Colors` 열거형을 호출 하는 <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> 문자열의 해당 열거형 값과 호출을 변환 하는 메서드는 <xref:System.Enum.IsDefined%2A> 에 값을 특정 정수 값 기반이 되도록 메서드 `Colors` 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-684">The following example defines a `Colors` enumeration, calls the <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method to convert strings to their corresponding enumeration values, and calls the <xref:System.Enum.IsDefined%2A> method to ensure that particular integral values are underlying values in the `Colors` enumeration.</span></span> <span data-ttu-id="c4fce-685"><xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> 명명 된 상수를 해당 하는 열거형 값의 문자열 표현으로 변환 하려고 하는 경우 메서드는 대/소문자 구분 비교를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="c4fce-685">The <xref:System.Enum.TryParse%60%601%28System.String%2CSystem.Boolean%2C%60%600%40%29> method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.</span></span>  
  
 [!code-csharp[System.Enum.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.enum.tryparse/cs/tryparse2.cs#2)]
 [!code-vb[System.Enum.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.enum.tryparse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c4fce-686"><paramref name="TEnum" />이 열거형 형식이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="c4fce-686"><paramref name="TEnum" /> is not an enumeration type.</span></span></exception>
        <altmember cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>
