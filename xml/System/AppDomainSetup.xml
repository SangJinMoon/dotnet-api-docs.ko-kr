<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AppDomainSetup.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5de1a8d1ecd07f9f8d0291eb6d18e2d042042a9b2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de1a8d1ecd07f9f8d0291eb6d18e2d042042a9b2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AppDomainSetup">
          <source>Represents assembly binding information that can be added to an instance of <ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AppDomain" /&gt;</ph>의 인스턴스에 추가할 수 있는 어셈블리 바인딩 정보를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>Changing the properties of an <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> instance does not affect any existing <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">속성 변경는 <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> 인스턴스가 기존에 영향을 주지 않는 <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>It can affect only the creation of a new <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>, when the <ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> method is called with the <ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph> instance as a parameter.</source>
          <target state="translated">만들 때에 새의 영향을 줄 수 <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>때는 <ph id="ph2">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> 메서드는 <ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph> 인스턴스를 매개 변수로 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>This class implements the <ph id="ph1">&lt;xref:System.IAppDomainSetup&gt;</ph> interface.</source>
          <target state="translated">이 클래스는 <ph id="ph1">&lt;xref:System.IAppDomainSetup&gt;</ph> 인터페이스를 구현합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>The default value for the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> property is false.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> 속성이 false입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>This setting is unsafe for services.</source>
          <target state="translated">이 설정은 서비스에 대 한 안전 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainSetup">
          <source>To help prevent services from downloading partially trusted code, set this property to true</source>
          <target state="translated">서비스 부분적으로 신뢰할 수 있는 코드를 다운로드 하는 것을 방지 하려면이 속성을 true로 설정</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.AppDomainSetup">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source>The activation context to be used for an application domain.</source>
          <target state="translated">응용 프로그램 도메인에 사용할 활성화 컨텍스트입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> class with the specified activation context to use for manifest-based activation of an application domain.</source>
          <target state="translated">응용 프로그램 도메인의 매니페스트 기반 활성화에 사용하기 위해 지정된 활성화 컨텍스트를 사용하여 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source>The <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> object specified for <ph id="ph2">`activationContext`</ph> is used to generate an <ph id="ph3">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object containing information required to activate a new application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> 개체에 대해 지정 된 <ph id="ph2">`activationContext`</ph> 생성 하는 데 사용 되는 <ph id="ph3">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> 새 응용 프로그램 도메인을 활성화 하는 데 필요한 정보가 들어 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source>This <ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object can be accessed by using the <ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph> property.</source>
          <target state="translated">이 <ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> 개체를 사용 하 여 액세스할 수는 <ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.ActivationContext)">
          <source><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)">
          <source>An object that specifies information required for the manifest-based activation of a new application domain.</source>
          <target state="translated">새 응용 프로그램 도메인의 매니페스트 기반 활성화에 필요한 정보를 지정하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> class with the specified activation arguments required for manifest-based activation of an application domain.</source>
          <target state="translated">응용 프로그램 도메인의 매니페스트 기반 활성화에 필요한 지정된 활성화 인수를 사용하여 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)">
          <source>The object specified for <ph id="ph1">`activationArguments`</ph> can be accessed by using the <ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph> property.</source>
          <target state="translated">에 대 한 지정 된 개체가 <ph id="ph1">`activationArguments`</ph> 를 사용 하 여 액세스할 수는 <ph id="ph2">&lt;xref:System.AppDomainSetup.ActivationArguments%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.#ctor(System.Runtime.Hosting.ActivationArguments)">
          <source><ph id="ph1">&lt;paramref name="activationArguments" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="activationArguments" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>Gets or sets data about the activation of an application domain.</source>
          <target state="translated">응용 프로그램 도메인의 활성화에 대한 데이터를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>An object that contains data about the activation of an application domain.</source>
          <target state="translated">응용 프로그램 도메인의 활성화에 대한 데이터가 들어 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>No exception is thrown if this property is set to <ph id="ph1">`null`</ph>.</source>
          <target state="translated">이 속성은로 설정 하는 경우 예외가 throw 되지 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>The information provided by the <ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object supports manifest-based activation.</source>
          <target state="translated">제공한 정보는 <ph id="ph1">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> 개체가 매니페스트 기반 활성화를 지원 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>The property is set to an <ph id="ph1">&lt;see cref="T:System.Runtime.Hosting.ActivationArguments" /&gt;</ph> object whose application identity does not match the application identity of the <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> object returned by the <ph id="ph3">&lt;see cref="P:System.AppDomainSetup.ApplicationTrust" /&gt;</ph> property.</source>
          <target state="translated">응용 프로그램 ID가 <ph id="ph3">&lt;see cref="P:System.AppDomainSetup.ApplicationTrust" /&gt;</ph> 속성이 반환한 <ph id="ph2">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> 개체의 응용 프로그램 ID와 일치하지 않는 <ph id="ph1">&lt;see cref="T:System.Runtime.Hosting.ActivationArguments" /&gt;</ph> 개체로 속성이 설정되어 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ActivationArguments">
          <source>No exception is thrown if the <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationTrust" /&gt;</ph> property is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationTrust" /&gt;</ph> 속성이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이면 예외가 발생하지 않습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> delegate, which represents a callback method that is invoked when the application domain is initialized.</source>
          <target state="translated">응용 프로그램 도메인이 초기화될 때 호출되는 콜백 메서드를 나타내는 <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> 대리자를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>A delegate that represents a callback method that is invoked when the application domain is initialized.</source>
          <target state="translated">응용 프로그램 도메인이 초기화될 때 호출되는 콜백 메서드를 나타내는 대리자입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>To pass information to the callback method, assign an array of strings to the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph> property.</source>
          <target state="translated">콜백 메서드에 정보를 전달 하려면 문자열의 배열에 할당할는 <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The array is passed to the callback method each time an <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> is initialized.</source>
          <target state="translated">배열의 때마다 콜백 메서드로 전달 되는 <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> 초기화 됩니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The callback method is executed in the context of the newly created application domain.</source>
          <target state="translated">콜백 메서드는 새로 만든된 응용 프로그램 도메인의 컨텍스트에서 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The following example creates a child application domain named <ph id="ph1">`ChildDomain`</ph>, using an <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object and evidence from the default application domain.</source>
          <target state="translated">다음 예제에서는 자식 응용 프로그램 도메인 <ph id="ph1">`ChildDomain`</ph>를 사용 하 여 프로그램 <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> 개체와 기본 응용 프로그램 도메인의 증명 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property is set to the callback method <ph id="ph2">`AppDomainInit`</ph>, which is invoked when the child domain is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> 속성은 콜백 메서드로 <ph id="ph2">`AppDomainInit`</ph>, 자식 도메인이 초기화 될 때 호출 되는 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>The arguments for the callback method are placed in an array of strings, which is assigned to the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph> property.</source>
          <target state="translated">콜백 메서드에 대 한 인수에 할당 하는 문자열의 배열에 배치 됩니다는 <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializer">
          <source>When the child domain is created, the callback method simply prints the strings.</source>
          <target state="translated">자식 도메인이 만들어지면 콜백 메서드는 단순히 문자열을 출력 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>Gets or sets the arguments passed to the callback method represented by the <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> delegate.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> 대리자가 나타내는 콜백 메서드로 전달되는 인수를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The callback method is invoked when the application domain is initialized.</source>
          <target state="translated">콜백 메서드는 응용 프로그램 도메인이 초기화될 때 호출됩니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>An array of strings that is passed to the callback method represented by the <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> delegate, when the callback method is invoked during <ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph> initialization.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.AppDomain" /&gt;</ph>이 초기화되는 동안 콜백 메서드가 호출될 때 <ph id="ph1">&lt;see cref="T:System.AppDomainInitializer" /&gt;</ph> 대리자가 나타내는 콜백 메서드로 전달되는 문자열 배열입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>Use the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property to specify a callback method that is invoked during <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> initialization.</source>
          <target state="translated">사용 하 여 <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> 속성을 지정 하는 동안 호출 되는 콜백 메서드 <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> 초기화 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property is not set, the array assigned to this property is not used.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> 속성이 설정 되지 않으면,이 속성에 할당 된 배열 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The callback method is executed in the context of the newly created application domain.</source>
          <target state="translated">콜백 메서드는 새로 만든된 응용 프로그램 도메인의 컨텍스트에서 실행 됩니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The following code example creates a child application domain named <ph id="ph1">`ChildDomain`</ph>, using an <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object and evidence from the default application domain.</source>
          <target state="translated">다음 코드 예제에서는 명명 된 자식 응용 프로그램 도메인을 만듭니다 <ph id="ph1">`ChildDomain`</ph>를 사용 하 여 프로그램 <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> 개체와 기본 응용 프로그램 도메인의 증명 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> property is set to the callback method <ph id="ph2">`AppDomainInit`</ph>, which is invoked when the child domain is initialized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializer%2A&gt;</ph> 속성은 콜백 메서드로 <ph id="ph2">`AppDomainInit`</ph>, 자식 도메인이 초기화 될 때 호출 되는 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>The arguments for the callback method are placed in an array of strings, which is assigned to the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph> property.</source>
          <target state="translated">콜백 메서드에 대 한 인수에 할당 하는 문자열의 배열에 배치 됩니다는 <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainInitializerArguments%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainInitializerArguments">
          <source>When the child domain is created, the callback method simply prints the strings.</source>
          <target state="translated">자식 도메인이 만들어지면 콜백 메서드는 단순히 문자열을 출력 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>Gets or sets the display name of the assembly that provides the type of the application domain manager for application domains created using this <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 개체를 사용하여 만든 응용 프로그램 도메인에 대한 응용 프로그램 도메인 관리자의 형식을 제공하는 어셈블리의 표시 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>The display name of the assembly that provides the <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the application domain manager.</source>
          <target state="translated">응용 프로그램 도메인 관리자의 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>을 제공하는 어셈블리의 표시 이름입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>To specify the type of the application domain manager, set both this property and the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph> property.</source>
          <target state="translated">응용 프로그램 도메인 관리자의 종류를 지정 하려면이 두 속성을 설정 및 <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>If either of these properties is not set, the other is ignored.</source>
          <target state="translated">이러한 속성 중 하나를 설정 하지 않으면 다른 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=nameWithType&gt;</ph> method is called).</source>
          <target state="translated">응용 프로그램 도메인 관리자 없는 형식이 제공 하는 경우 부모 응용 프로그램 도메인와 동일한 형식에서 생성 됩니다 (즉, 응용 프로그램 도메인을는 <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=nameWithType&gt;</ph> 메서드는).</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>When the application domain is loaded, <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown if the assembly does not exist, or if the assembly does not contain the type specified by the <ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph> property.</source>
          <target state="translated">응용 프로그램 도메인이 로드 되 면 <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> 어셈블리가 없는 경우 또는 어셈블리에 지정 된 형식 없는 경우 throw 되는 <ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerType%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source><ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> is thrown if the assembly is found but the version information does not match.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.FileLoadException&gt;</ph> 어셈블리를 찾았지만 버전 정보가 일치 하지 않는 경우 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>To set the application domain manager for the default application domain, use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>appDomainManagerAssembly&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>appDomainManagerType&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept> elements in the <bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>runtime&gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of the application configuration file, or use the environment variables described in <ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>.</source>
          <target state="translated">기본 응용 프로그램 도메인에 대 한 응용 프로그램 도메인 관리자를 설정 하려면는 <bpt id="p1">[</bpt> <ph id="ph1">\&lt;</ph>appDomainManagerAssembly &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept> 및 <bpt id="p2">[</bpt> <ph id="ph2">\&lt;</ph>appDomainManagerType &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept> 요소에는 <bpt id="p3">[</bpt> <ph id="ph3">\&lt;</ph>런타임 &gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> 섹션에 설명 된 환경 변수를 사용 하 여 응용 프로그램 구성 파일의 <ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>This feature requires the application to have full trust.</source>
          <target state="translated">이 기능에는 응용 프로그램을 완전 신뢰 권한이 필요 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>(For example, an application running on the desktop has full trust.) If the application does not have full trust, a <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown.</source>
          <target state="translated">(예를 들어 데스크톱에서 실행 중인 응용 프로그램에 완전 신뢰.) 응용 프로그램에 완전 신뢰가 없는 경우는 <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> throw 됩니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerAssembly">
          <source>The format of the assembly display name is given by the <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">형식의 어셈블리 표시 이름 지정 하 여는 <ph id="ph1">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>Gets or sets the full name of the type that provides the application domain manager for application domains created using this <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 개체를 사용하여 만든 응용 프로그램 도메인에 대한 응용 프로그램 도메인 관리자를 제공하는 형식의 전체 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>The full name of the type, including the namespace.</source>
          <target state="translated">네임스페이스를 포함한 형식의 전체 이름입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>To specify the type of the application domain manager, set both this property and the <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph> property.</source>
          <target state="translated">응용 프로그램 도메인 관리자의 종류를 지정 하려면이 두 속성을 설정 및 <ph id="ph1">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>If either of these properties is not set, the other is ignored.</source>
          <target state="translated">이러한 속성 중 하나를 설정 하지 않으면 다른 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>If no type is provided, the application domain manager is created from the same type as the parent application domain (that is, the application domain from which the <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=nameWithType&gt;</ph> method is called).</source>
          <target state="translated">응용 프로그램 도메인 관리자 없는 형식이 제공 하는 경우 부모 응용 프로그램 도메인와 동일한 형식에서 생성 됩니다 (즉, 응용 프로그램 도메인을는 <ph id="ph1">&lt;xref:System.AppDomain.CreateDomain%2A?displayProperty=nameWithType&gt;</ph> 메서드는).</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>When the application domain is loaded, <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown if the assembly specified by the <ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph> property does not contain the type specified by this property.</source>
          <target state="translated">응용 프로그램 도메인이 로드 되 면 <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> 어셈블리에서 지정 된 경우 throw 되는 <ph id="ph2">&lt;xref:System.AppDomainSetup.AppDomainManagerAssembly%2A&gt;</ph> 속성에이 속성에서 지정 된 유형이 포함 되어 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>To set the application domain manager for the default application domain, use the <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>appDomainManagerAssembly&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept> and <bpt id="p2">[</bpt><ph id="ph2">\&lt;</ph>appDomainManagerType&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept> elements in the <bpt id="p3">[</bpt><ph id="ph3">\&lt;</ph>runtime&gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of the application configuration file, or use the environment variables described in <ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>.</source>
          <target state="translated">기본 응용 프로그램 도메인에 대 한 응용 프로그램 도메인 관리자를 설정 하려면는 <bpt id="p1">[</bpt> <ph id="ph1">\&lt;</ph>appDomainManagerAssembly &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept> 및 <bpt id="p2">[</bpt> <ph id="ph2">\&lt;</ph>appDomainManagerType &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept> 요소에는 <bpt id="p3">[</bpt> <ph id="ph3">\&lt;</ph>런타임 &gt;<ept id="p3">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> 섹션에 설명 된 환경 변수를 사용 하 여 응용 프로그램 구성 파일의 <ph id="ph4">&lt;xref:System.AppDomainManager&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>This feature requires the application to have full trust.</source>
          <target state="translated">이 기능에는 응용 프로그램을 완전 신뢰 권한이 필요 합니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>(For example, an application running on the desktop has full trust.) If the application does not have full trust, a <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> is thrown.</source>
          <target state="translated">(예를 들어 데스크톱에서 실행 중인 응용 프로그램에 완전 신뢰.) 응용 프로그램에 완전 신뢰가 없는 경우는 <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> throw 됩니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.AppDomainManagerType">
          <source>The format of the full name of a type is given by the <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">형식의 전체 이름의 형식을 지정 하 여는 <ph id="ph1">&lt;xref:System.Type.FullName%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>Gets or sets the name of the directory containing the application.</source>
          <target state="translated">응용 프로그램이 들어 있는 디렉터리의 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>The name of the application base directory.</source>
          <target state="translated">응용 프로그램 기준 위치 디렉터리의 이름입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>The application base directory is where the assembly manager begins probing for assemblies.</source>
          <target state="translated">응용 프로그램 기본 디렉터리에서 어셈블리 관리자 시작 어셈블리에 대 한 검색입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property can influence which permissions are granted to an application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> 속성은 응용 프로그램 도메인에 부여 되는 권한에 영향을 줄 수 있습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>For example, an application domain originating from the local computer normally receives full trust based on its location of origin.</source>
          <target state="translated">예를 들어 일반적으로 로컬 컴퓨터에서 시작 된 응용 프로그램 도메인은 원래 위치에 따라 완전 신뢰를 받습니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>However, if the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property of that <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> is set to the full name of an intranet directory, the <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> setting restricts the permissions granted to the application domain to a LocalIntranet grant even though the application domain actually originates from the local computer.</source>
          <target state="translated">그러나 경우는 <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> 속성의 <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> 인트라넷 디렉터리의 전체 이름으로 설정 된 <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> 설정은 LocalIntranet grant 응용 프로그램 도메인에도 응용 프로그램 도메인 부여 하는 권한을 제한 실제로 로컬 컴퓨터에서 발생 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property to set the location where the assembly loader begins probing for assemblies to load into a new application domain.</source>
          <target state="translated">다음 예제에서는 사용 하는 방법을 <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> 속성을 여기서 어셈블리 로더가 새 응용 프로그램 도메인에 로드 하는 어셈블리에 대 한 조사를 시작 하는 위치를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>You must ensure that the folder you specify exists.</source>
          <target state="translated">지정한 폴더가 있는지 확인 해야 합니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>for access to the path information.</source>
          <target state="translated">경로 정보에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationBase">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationName">
          <source>Gets or sets the name of the application.</source>
          <target state="translated">응용 프로그램의 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The name of the application.</source>
          <target state="translated">응용 프로그램의 이름입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The following example shows how to set the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property when you create a new application domain.</source>
          <target state="translated">설정 하는 방법을 보여 주는 다음 예제는 <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> 새 응용 프로그램 도메인을 만들 때 속성입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The example creates a new application domain, and then calls the <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph> method to load the example assembly into the new application domain and create an instance of the <ph id="ph2">`Worker`</ph> class.</source>
          <target state="translated">이 예제에서는 새 응용 프로그램 도메인을 만들고 호출 합니다는 <ph id="ph1">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph> 새 응용 프로그램 도메인에 예제에서는 어셈블리를 로드 하의 인스턴스를 만들고 메서드는 <ph id="ph2">`Worker`</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The <ph id="ph1">`Worker`</ph> class inherits <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, so the example can use the proxy returned by <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph> to call the <ph id="ph4">`TestLoad`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Worker`</ph> 클래스 상속 <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>예제에서 반환 되는 프록시를 사용할 수 있도록, <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A&gt;</ph> 호출 하는 <ph id="ph4">`TestLoad`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The <ph id="ph1">`TestLoad`</ph> method loads an assembly that you specify.</source>
          <target state="translated"><ph id="ph1">`TestLoad`</ph> 메서드 지정 하는 어셈블리를 로드 합니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>You must either specify a valid, fully qualified assembly name, or comment out the <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.String%29&gt;</ph> method.</source>
          <target state="translated">유효한 정규화 된 어셈블리 이름을 지정 하거나 주석으로 처리 해야는 <ph id="ph1">&lt;xref:System.Reflection.Assembly.Load%28System.String%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The <ph id="ph1">`TestLoad`</ph> method lists the assemblies that are loaded into the new application domain, showing that your specified assembly and the example assembly are loaded.</source>
          <target state="translated"><ph id="ph1">`TestLoad`</ph> 메서드는 지정 된 어셈블리 및 예제에서는 어셈블리를 로드 했는지 보여 주는 새 응용 프로그램 도메인에 로드 된 어셈블리를 나열 합니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationName">
          <source>The example uses the <ph id="ph1">&lt;xref:System.LoaderOptimizationAttribute&gt;</ph> attribute to tell the assembly loader how the application will share code across application domains.</source>
          <target state="translated">이 예제에서는 사용 된 <ph id="ph1">&lt;xref:System.LoaderOptimizationAttribute&gt;</ph> 어떻게 공유 하는 코드 응용 프로그램 도메인 간에 어셈블리 로더를 구별 하는 특성입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>Gets or sets an object containing security and trust information.</source>
          <target state="translated">보안과 신뢰 정보가 들어 있는 개체를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>An object that contains security and trust information.</source>
          <target state="translated">보안과 신뢰 정보가 들어 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>This property is <ph id="ph1">`null`</ph> when the <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> is created.</source>
          <target state="translated">이 속성은 <ph id="ph1">`null`</ph> 때는 <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> 만들어집니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>Once changed, it cannot be reset to a null reference.</source>
          <target state="translated">이 변경 되 면 null 참조로 다시 설정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>The property is set to an <ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> object whose application identity does not match the application identity of the <ph id="ph2">&lt;see cref="T:System.Runtime.Hosting.ActivationArguments" /&gt;</ph> object returned by the <ph id="ph3">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> property.</source>
          <target state="translated">응용 프로그램 ID가 <ph id="ph3">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> 속성이 반환한 <ph id="ph2">&lt;see cref="T:System.Runtime.Hosting.ActivationArguments" /&gt;</ph> 개체의 응용 프로그램 ID와 일치하지 않는 <ph id="ph1">&lt;see cref="T:System.Security.Policy.ApplicationTrust" /&gt;</ph> 개체로 속성이 설정되어 있습니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>No exception is thrown if the <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> property is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> 속성이 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이면 예외가 발생하지 않습니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ApplicationTrust">
          <source>The property is set to <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">속성이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>로 설정됩니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.CachePath">
          <source>Gets or sets the name of an area specific to the application where files are shadow copied.</source>
          <target state="translated">파일을 섀도 복사한 응용 프로그램 관련 영역의 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>The fully qualified name of the directory path and file name where files are shadow copied.</source>
          <target state="translated">파일을 섀도 복사한 디렉터리 경로와 파일의 정규화된 이름입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>In order for this property to have an effect, the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property must also be set.</source>
          <target state="translated">이 속성을 적용을 위해는 <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> 속성 설정 해야 합니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property is not set, the <ph id="ph2">&lt;xref:System.AppDomainSetup.CachePath%2A&gt;</ph> property is ignored and the shadow copy cache location defaults to the download cache.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> 속성이 설정 되어 있지는 <ph id="ph2">&lt;xref:System.AppDomainSetup.CachePath%2A&gt;</ph> 속성이 무시 되 고 섀도 복사본 캐시 위치는 다운로드 캐시 기본적으로 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">섀도 복사에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>어셈블리 섀도 복사<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>for access to the path information.</source>
          <target state="translated">경로 정보에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.CachePath">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>Gets or sets the name of the configuration file for an application domain.</source>
          <target state="translated">응용 프로그램 도메인의 구성 파일 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>The name of the configuration file.</source>
          <target state="translated">구성 파일의 이름입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>The configuration file describes the search rules and configuration data for the application domain.</source>
          <target state="translated">구성 파일 검색 규칙 및 응용 프로그램 도메인에 대 한 구성 데이터를 설명합니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>The host that creates the application domain is responsible for supplying this data because the meaningful values vary from situation to situation.</source>
          <target state="translated">응용 프로그램 도메인을 만드는 호스트는 의미 있는 값 다 상황에 있기 때문에이 데이터를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>For example, the configuration data for ASP.NET applications is stored for each application, site, and computer, while the configuration data for an executable is stored for each application, user, and computer.</source>
          <target state="translated">예를 들어 ASP.NET 응용 프로그램에 대 한 구성 데이터는 각 응용 프로그램, 사용자 및 컴퓨터에 대 한 실행 파일에 대 한 구성 데이터는 저장 하는 동안 각 응용 프로그램, 사이트 및 컴퓨터에 대 한 저장 됩니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>Only the host knows the specifics of the configuration data for a particular circumstance.</source>
          <target state="translated">호스트만 특정 상황에 대 한 구성 데이터의 고유 정보를 알고 있습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>for access to the path information.</source>
          <target state="translated">경로 정보에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ConfigurationFile">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>Specifies whether the application base path and private binary path are probed when searching for assemblies to load.</source>
          <target state="translated">로드할 어셈블리를 검색할 때 응용 프로그램 기본 경로와 전용 이진 경로를 검색할지 여부를 지정합니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if probing is not allowed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">검색이 허용되지 않으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 허용되면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>If the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> property is <ph id="ph2">`true`</ph>, the value of the <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property is ignored.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> 속성은 <ph id="ph2">`true`</ph>의 값은 <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> 속성은 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>That is, no assemblies are probed for in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> property.</source>
          <target state="translated">즉, 어셈블리가 없는에서 검색 하 여 지정 된 디렉터리는 <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>In addition, the values of the <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> property and the <ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPathProbe%2A&gt;</ph> property are ignored.</source>
          <target state="translated">또한 값은 <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> 속성 및 <ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPathProbe%2A&gt;</ph> 속성은 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>No assemblies are probed for in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> property.</source>
          <target state="translated">어셈블리가 없는으로 지정 된 디렉터리에서 검색 된 <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> property provides an additional layer of control over the loading process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> 속성 로드 프로세스에 대 한 제어의 추가 계층을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>In the normal assembly loading sequence, the application base is probed before the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType&gt;</ph> event is raised.</source>
          <target state="translated">일반 어셈블리 로딩 시퀀스, 응용 프로그램 기준 위치 하기 전에 검색 된는 <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType&gt;</ph> 이벤트가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>However, some applications might need to load assemblies from an OLE compound file within a document, or from a unique known location that is neither in the global assembly cache nor in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> properties.</source>
          <target state="translated">그러나 일부 응용 프로그램에서 지정 된 디렉터리에서 또는 전역 어셈블리 캐시에 고유한 알려진된 위치 또는 문서 내 OLE 복합 파일에서 어셈블리를 로드 해야 할 수는 <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowApplicationBaseProbing">
          <source>Such applications can use the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> property to avoid the delay caused by normal probing, and to avoid loading copies of the necessary assembly that might be located in the normal probing paths.</source>
          <target state="translated">이러한 응용 프로그램에서 사용할 수는 <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A&gt;</ph> 일반 검색로 인해 지연이 발생을 방지 하 고 일반 검색 경로에 위치할 수 있습니다 하는 데 필요한 어셈블리의 복사본을 로드 하지 않도록 하려면 속성입니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DisallowBindingRedirects">
          <source>Gets or sets a value that indicates whether an application domain allows assembly binding redirection.</source>
          <target state="translated">응용 프로그램 도메인에서 어셈블리 바인딩 리디렉션을 허용하는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowBindingRedirects">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if redirection of assemblies is not allowed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is allowed.</source>
          <target state="translated">어셈블리 리디렉션이 허용되지 않으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 허용되면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowBindingRedirects">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowBindingRedirects%2A&gt;</ph> property is designed to be used by services and server applications where assembly binding redirection is not part of the application scenario.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowBindingRedirects%2A&gt;</ph> 속성은 어셈블리 바인딩 리디렉션 하지 않은 응용 프로그램 시나리오의 일부 서비스 및 서버 응용 프로그램에서 사용 되도록 설계 되었습니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>Gets or sets a value that indicates whether HTTP download of assemblies is allowed for an application domain.</source>
          <target state="translated">응용 프로그램 도메인에서 HTTP를 사용하여 어셈블리를 다운로드할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if HTTP download of assemblies is not allowed; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is allowed.</source>
          <target state="translated">HTTP를 사용하여 어셈블리를 다운로드할 수 없으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 다운로드할 수 있으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> property is designed to be used by services and server applications where downloading code from an intranet or the Internet is not part of the application scenario.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> 속성은 사용 하도록 서비스 및 응용 프로그램 서버에서 인트라넷 또는 인터넷에서 다운로드 코드는 응용 프로그램 시나리오의 일부가 아닙니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>The default value for the <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> property is <ph id="ph2">`false`</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowCodeDownload%2A&gt;</ph> 속성은 <ph id="ph2">`false`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>This setting is unsafe for services.</source>
          <target state="translated">이 설정은 서비스에 대 한 안전 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowCodeDownload">
          <source>To help prevent services from downloading partially trusted code, set this property to <ph id="ph1">`true`</ph>.</source>
          <target state="translated">서비스 부분적으로 신뢰할 수 있는 코드를 다운로드 하는 것을 방지 하려면이 속성을 설정 <ph id="ph1">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>Gets or sets a value that indicates whether the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>publisherPolicy<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/publisherpolicy-element.md)</ept> section of the configuration file is applied to an application domain.</source>
          <target state="translated">구성 파일의 <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>publisherPolicy<ph id="ph2">&amp;gt;</ph><ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/publisherpolicy-element.md)</ept> 섹션이 응용 프로그램 도메인에 적용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see langword="&amp;lt;publisherPolicy&amp;gt;" /&gt;</ph> section of the configuration file for an application domain is ignored; <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the declared publisher policy is honored.</source>
          <target state="translated">응용 프로그램 도메인에 대한 구성 파일의 <ph id="ph2">&lt;see langword="&amp;lt;publisherPolicy&amp;gt;" /&gt;</ph> 섹션이 무시되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 적용되면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowPublisherPolicy%2A&gt;</ph> property specifically applies to a Web application that is loaded locally.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.DisallowPublisherPolicy%2A&gt;</ph> 속성이 로컬로 로드 되는 웹 응용 프로그램에 특별히 적용 됩니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>Use this property to help prevent a malicious attempt to execute an unsafe Web application in safe mode.</source>
          <target state="translated">안전 모드에서 안전 하지 않은 웹 응용 프로그램을 실행 하는 악의적인 시도 방지 하려면이 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>For more information about bypassing publisher policy, see the <bpt id="p1">[</bpt>Redirecting Assembly Versions<ept id="p1">](~/docs/framework/configure-apps/redirect-assembly-versions.md)</ept> topic.</source>
          <target state="translated">게시자 정책을 무시 하는 방법에 대 한 자세한 내용은 참조는 <bpt id="p1">[</bpt>어셈블리 버전 리디렉션<ept id="p1">](~/docs/framework/configure-apps/redirect-assembly-versions.md)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DisallowPublisherPolicy">
          <source>For more information about safe mode, see the "Examining the Configuration Files" section of the <bpt id="p1">[</bpt>How the Runtime Locates Assemblies<ept id="p1">](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept> topic.</source>
          <target state="translated">안전 모드에 대 한 자세한 내용은의 "구성 파일 검사" 섹션을 참조 하십시오.는 <bpt id="p1">[</bpt>런타임에서 어셈블리를 찾는 방법을<ept id="p1">](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept> 항목입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Gets or sets the base directory where the directory for dynamically generated files is located.</source>
          <target state="translated">동적으로 생성된 파일의 디렉터리가 있는 기본 디렉터리를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The directory where the <ph id="ph1">&lt;see cref="P:System.AppDomain.DynamicDirectory" /&gt;</ph> is located.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.AppDomain.DynamicDirectory" /&gt;</ph>가 위치한 디렉터리입니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The return value of this property is different from the value assigned.</source>
          <target state="translated">이 속성의 반환 값은 할당된 값과 다릅니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Use this property to set the base directory where the dynamic directory for the new application domain will be located.</source>
          <target state="translated">새 응용 프로그램 도메인에 대 한 동적 디렉터리를 배치할 기본 디렉터리를 설정 하려면이 속성을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>When code in the new application domain loads an assembly, assembly resolution looks first in the normal probing paths.</source>
          <target state="translated">새 응용 프로그램 도메인에서 코드 어셈블리, 어셈블리 확인이 로드 될 때 일반 검색 경로에서 첫 번째 찾습니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>If it does not find the assembly, it looks in the dynamic directory, which is returned by the <ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">어셈블리를 찾지 못하면 경우 검색에서 반환 되는 동적 디렉터리는 <ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Dynamic assemblies that will be loaded and executed by the new application domain can be placed there.</source>
          <target state="translated">로드 되 고 새 응용 프로그램 도메인에서 실행 하는 동적 어셈블리에 배치할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>When you assign a path to the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property, an additional subdirectory is added; the name of this subdirectory is the hash code of the value assigned to the <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property.</source>
          <target state="translated">에 대 한 경로 할당 하면는 <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> 속성을 추가 하위 디렉터리가 추가 됩니다;이 하위 디렉터리의 이름에 할당 된 값의 해시 코드를는 <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Thus, the base directory subsequently returned by this property is always different from the value assigned.</source>
          <target state="translated">되므로이 속성에서 반환 된 기본 디렉터리는 항상 할당 된 값과에서 다릅니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Assigning a value to this property does not create any directories.</source>
          <target state="translated">이 속성에 값을 할당 하는 모든 디렉터리 생성 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The directories must be created or verified by the code that uses them.</source>
          <target state="translated">디렉터리는 생성 해야 하거나 메트릭을 사용 하는 코드에서 확인할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The dynamic directory is a subdirectory of <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>.</source>
          <target state="translated">동적 디렉터리의 하위 디렉터리가 <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Its simple name is the value returned by the <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property, so its format is <bpt id="p1">*</bpt>original path<ept id="p1">*</ept><ph id="ph2">\\</ph><bpt id="p2">*</bpt>hash code<ept id="p2">*</ept><ph id="ph3">\\</ph><bpt id="p3">*</bpt>application name<ept id="p3">*</ept>.</source>
          <target state="translated">간단한 이름은 반환 값은 고 <ph id="ph1">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> 속성, 해당 형식은입니다 <bpt id="p1">*</bpt>원래 경로<ept id="p1">*</ept><ph id="ph2">\\</ph><bpt id="p2">*</bpt>해시 코드<ept id="p2">*</ept><ph id="ph3">\\</ph><bpt id="p3">*</bpt>응용 프로그램 이름<ept id="p3">*</ept>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property to set the path an application domain probes when loading dynamic assemblies.</source>
          <target state="translated">다음 예제에서는 사용 하는 <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> 동적 어셈블리를 로드할 때 응용 프로그램 도메인의 경로 설정 하려면 속성 검색 합니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example creates an <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> object and sets its <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> property to "Example" and its <ph id="ph3">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property to "C:\DynamicAssemblyDir".</source>
          <target state="translated">이 예에서는 만듭니다는 <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> 개체 및 집합의 <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationName%2A&gt;</ph> 속성을 "예" 및 해당 <ph id="ph3">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> 속성을 "C:\DynamicAssemblyDir"입니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example then displays the <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> property, to show that the hash code of the application name has been appended as a subdirectory of the path that was originally assigned.</source>
          <target state="translated">이 예제에서는 다음 표시는 <ph id="ph1">&lt;xref:System.AppDomainSetup.DynamicBase%2A&gt;</ph> 원래 할당 된 경로의 하위 디렉터리로 응용 프로그램 이름이의 해시 코드를 추가 된 하 합니다.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The base directory in this example is intended to be outside the probing path for the example application.</source>
          <target state="translated">이 예제의 기본 디렉터리는 예제 응용 프로그램에 대 한 검색 경로 이외의 되도록 만들어졌습니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Be sure to compile the example in a different location.</source>
          <target state="translated">다른 위치에 예제를 컴파일하려면 해야 합니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Delete the base directory and all its subdirectories each time you run the example.</source>
          <target state="translated">기본 디렉터리 및 모든 하위 디렉터리는 예제를 실행할 때마다 삭제 합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example creates a new application domain using the <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> object.</source>
          <target state="translated">이 예에서는 사용 하 여 새 응용 프로그램 도메인을 만듭니다는 <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example then creates the dynamic directory if it does not already exist.</source>
          <target state="translated">그런 다음 예제에서는 아직 없는 경우 동적 디렉터리를 만듭니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Although the example uses the application domain's <ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=nameWithType&gt;</ph> property to get the name of the dynamic directory, it could just as easily create the directory beforehand by concatenating the original path, the hash code of the application name, and the application name.</source>
          <target state="translated">이 예제에서는 응용 프로그램 도메인을 사용 하지는 않지만 <ph id="ph1">&lt;xref:System.AppDomain.DynamicDirectory%2A?displayProperty=nameWithType&gt;</ph> 동적 디렉터리의 이름을 가져올 속성을 쉽게 발생할 수 디렉터리 미리 원래 경로 응용 프로그램 이름의 해시 코드를 연결 하 여 및 응용 프로그램 이름입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The example has a <ph id="ph1">`GenerateDynamicAssembly`</ph> method that emits an assembly named <ph id="ph2">`DynamicHelloWorld.dll`</ph> and stores it in the new application domain's dynamic directory.</source>
          <target state="translated">이 예제에는 <ph id="ph1">`GenerateDynamicAssembly`</ph> 명명 된 어셈블리를 내보내고 메서드 <ph id="ph2">`DynamicHelloWorld.dll`</ph> 새 응용 프로그램 도메인의 동적 디렉터리에 저장 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The dynamic assembly contains one type, <ph id="ph1">`HelloWorld`</ph>, that has a static method (<ph id="ph2">`Shared`</ph> method in Visual Basic) named <ph id="ph3">`HelloFromAD`</ph>.</source>
          <target state="translated">동적 어셈블리 유형에서는 포함 되어 <ph id="ph1">`HelloWorld`</ph>, 하는 정적 메서드 (<ph id="ph2">`Shared`</ph> Visual Basic의에서 메서드) 라는 <ph id="ph3">`HelloFromAD`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Calling this method displays the name of the application domain.</source>
          <target state="translated">이 메서드를 호출 응용 프로그램 도메인의 이름을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The <ph id="ph1">`Example`</ph> class derives from <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, so the example can create an instance of the class in the new application domain and call its <ph id="ph3">`Test`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Example`</ph> 클래스에서 파생 <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>예제에서는 새 응용 프로그램 도메인 및 호출에서 클래스의 인스턴스를 만들 수 있으므로 해당 <ph id="ph3">`Test`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The <ph id="ph1">`Test`</ph> method loads the dynamic assembly by its display name and calls the static <ph id="ph2">`HelloFromAD`</ph> method.</source>
          <target state="translated"><ph id="ph1">`Test`</ph> 메서드 표시 이름을 사용 하 여 동적 어셈블리를 로드 하 고 정적 호출 <ph id="ph2">`HelloFromAD`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>You can show that the dynamic directory is searched after the normal probing paths by writing code for an assembly named <ph id="ph1">`DynamicHelloWorld.dll`</ph> and compiling it in the same directory as this example.</source>
          <target state="translated">이라는 어셈블리에 대 한 코드를 작성 하 여 일반 검색 경로 후 동적 디렉터리 검색 됩니다 표시할 수 있습니다 <ph id="ph1">`DynamicHelloWorld.dll`</ph> 및이 예제와 동일한 디렉터리에 컴파일입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The assembly must have a class named <ph id="ph1">`HelloWorld`</ph> with a static method named <ph id="ph2">`HelloFromAD`</ph>.</source>
          <target state="translated">어셈블리에는 라는 클래스를 사용 해야 합니다. <ph id="ph1">`HelloWorld`</ph> 라는 정적 메서드가 있는 <ph id="ph2">`HelloFromAD`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>This method does not have to have the same functionality as the one in the example; it can simply display a string to the console.</source>
          <target state="translated">이 메서드는 예제;에 있는 것과 동일한 기능을 제공 하지 않아도 콘솔에 문자열을 표시 하기만 하면 것입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>The assembly must also have an <ph id="ph1">&lt;xref:System.Reflection.AssemblyVersionAttribute&gt;</ph> attribute that sets its version to 1.0.0.0.</source>
          <target state="translated">어셈블리 있어야는 <ph id="ph1">&lt;xref:System.Reflection.AssemblyVersionAttribute&gt;</ph> 특성을 해당 버전을 1.0.0.0으로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>When you run the example, the assembly you compiled in the current directory is found before the dynamic directory is searched.</source>
          <target state="translated">예제를 실행 하는 경우 현재 디렉터리에 컴파일된 어셈블리가 동적 디렉터리를 검색 하기 전에.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.DynamicBase">
          <source>This property cannot be set because the application name on the application domain is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">응용 프로그램 도메인의 응용 프로그램 이름이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이므로 이 속성을 설정할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>for access to the path information.</source>
          <target state="translated">경로 정보에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.DynamicBase">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>Returns the XML configuration information set by the <ph id="ph1">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> method, which overrides the application's XML configuration information.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> 메서드로 설정된 XML 구성 정보를 반환합니다. 이 구성 정보는 응용 프로그램의 XML 구성 정보를 재정의합니다.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>An array that contains the XML configuration information that was set by the <ph id="ph1">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the <ph id="ph3">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> method has not been called.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> 메서드로 의해 설정된 XML 구성 정보가 들어 있는 배열이거나, <ph id="ph3">&lt;see cref="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])" /&gt;</ph> 메서드가 호출되지 않았으면 <ph id="ph2">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method provides a way to override the configuration information of an application that creates a new application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> 메서드를 새 응용 프로그램 도메인을 만드는 응용 프로그램의 구성 정보를 재정의 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The configuration file information in <ph id="ph1">`value`</ph> overrides the configuration file information for the application.</source>
          <target state="translated">구성 파일 정보 <ph id="ph1">`value`</ph> 응용 프로그램에 대 한 구성 파일 정보를 재정의 합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>For example, when the Example.exe application creates a new application domain, it can override the configuration information originally obtained from Example.exe.config file.</source>
          <target state="translated">예를 들어 Example.exe 응용 프로그램이 새 응용 프로그램 도메인을 만들 때 처음에 확보 Example.exe.config 파일에서 구성 정보를 재정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>Some consumers of configuration file information do not use the information stored by the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method.</source>
          <target state="translated">구성 파일에 대 한 정보의 소비자가 저장 한 정보를 사용 하지 마십시오는 <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The runtime does not enforce this.</source>
          <target state="translated">런타임에서이 적용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>To ensure that all configuration file information is overridden in a new application domain, use the <ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph> property to specify a configuration file.</source>
          <target state="translated">사용을 보장 하기 위해 모든 구성 파일 정보는 새 응용 프로그램 도메인에서 재정의 되는 <ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph> 속성을 구성 파일을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method does affect assembly binding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> 메서드는 어셈블리 바인딩에 영향 을지 않습니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>The XML in <ph id="ph1">`value`</ph> is the same as the XML in a normal configuration file, except that it is stored as a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> array.</source>
          <target state="translated">XML <ph id="ph1">`value`</ph> 같습니다 일반 구성 파일에서 XML로 저장 된 제외 하 고는 <ph id="ph2">&lt;xref:System.Byte&gt;</ph> 배열입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.GetConfigurationBytes">
          <source>To access the configuration bytes for an application domain, use the <ph id="ph1">&lt;xref:System.AppDomain.SetupInformation%2A?displayProperty=nameWithType&gt;</ph> property to get the <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object for the application domain, then use the <ph id="ph3">&lt;xref:System.AppDomainSetup.GetConfigurationBytes%2A&gt;</ph> method.</source>
          <target state="translated">응용 프로그램 도메인에 대 한 구성 바이트에 액세스 하려면 사용 하 여는 <ph id="ph1">&lt;xref:System.AppDomain.SetupInformation%2A?displayProperty=nameWithType&gt;</ph> 가져올 속성의 <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> 개체 응용 프로그램 도메인에 대 한 다음 사용 하 여는 <ph id="ph3">&lt;xref:System.AppDomainSetup.GetConfigurationBytes%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.LicenseFile">
          <source>Gets or sets the location of the license file associated with this domain.</source>
          <target state="translated">이 도메인과 관련된 라이센스 파일의 위치를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LicenseFile">
          <source>The location and name of the license file.</source>
          <target state="translated">라이선스 파일의 위치 및 이름입니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LicenseFile">
          <source>for access to the path information.</source>
          <target state="translated">경로 정보에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LicenseFile">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.LoaderOptimization">
          <source>Specifies the optimization policy used to load an executable.</source>
          <target state="translated">실행 파일을 로드하는 데 사용되는 최적화 정책을 지정합니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LoaderOptimization">
          <source>An enumerated constant that is used with the <ph id="ph1">&lt;see cref="T:System.LoaderOptimizationAttribute" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.LoaderOptimizationAttribute" /&gt;</ph>와 함께 사용되는 열거형 상수입니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.LoaderOptimization">
          <source>The following example creates a dynamic assembly and saves it to disk, and then uses the <ph id="ph1">&lt;xref:System.AppDomainSetup.LoaderOptimization%2A&gt;</ph> property to set the optimization policy used to load the assembly into an application domain.</source>
          <target state="translated">다음 예에서는 동적 어셈블리를 만들고 디스크를 사용 하 여 다음에 저장 된 <ph id="ph1">&lt;xref:System.AppDomainSetup.LoaderOptimization%2A&gt;</ph> 속성을 응용 프로그램 도메인에 어셈블리를 로드 하는 데 사용 하는 최적화 정책을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>Gets or sets a list of assemblies marked with the <ph id="ph1">&lt;see cref="F:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault" /&gt;</ph> flag that are made visible to partial-trust code running in a sandboxed application domain.</source>
          <target state="translated">샌드박스가 적용된 응용 프로그램 도메인에서 실행 중인 부분 신뢰 코드에 보이는 <ph id="ph1">&lt;see cref="F:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault" /&gt;</ph> 플래그로 표시된 어셈블리의 목록을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>An array of partial assembly names, where each partial name consists of the simple assembly name and the public key.</source>
          <target state="translated">각 부분 이름이 단순한 이름과 공개 키로 구성되는 부분 어셈블리 이름의 배열입니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> (APTCA) attribute can be made conditional by setting its <ph id="ph3">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A&gt;</ph> property to <ph id="ph4">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph>.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> 설정 하 여 조건을 (APTCA) 특성을 만들 수 있습니다는 <ph id="ph3">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel%2A&gt;</ph> 속성을 <ph id="ph4">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>An APTCA assembly that is marked with <ph id="ph1">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph> cannot be used by partially trusted code unless the host application allows it.</source>
          <target state="translated">로 표시 된 APTCA 어셈블리 <ph id="ph1">&lt;xref:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault&gt;</ph> 호스트 응용 프로그램에서 허용 하지 않는 한 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>The host of a sandboxed application domain allows code in the application domain to use assemblies with conditional APTCA attributes by creating an array that contains the simple name and public key of each assembly, and assigning the array to this property.</source>
          <target state="translated">샌드 박싱된 응용 프로그램 도메인의 호스트는 단순한 이름 및 각 어셈블리의 공개 키를 포함 하는 배열을 만들고이 속성에 할당 하 여 조건부 APTCA 특성이 있는 어셈블리를 사용 하려면 응용 프로그램 도메인에서 코드를 허용 합니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>For example, an element of the array might look like the following: "MyAssembly, PublicKey=0024000004800000940000000602000000240000525341310004000001000100db2ad5e5fedc67ea526ff72ad426ef68e08e241d296c499eedfec6648dcc62b1a12f72be5833a45bbec481b68415b08a5fbc9f9ef247b523dd72bbea65bb532784ddc5c704544bd2f1c2d46fdbe41e4f949e76f9947357b2d5cf8ca9f970701bbd6e8ab64ad31b20ad0be9b56dae4f6b83332b92a2a3b8ea2804c40efbc0b6b9".</source>
          <target state="translated">For example, an element of the array might look like the following: "MyAssembly, PublicKey=0024000004800000940000000602000000240000525341310004000001000100db2ad5e5fedc67ea526ff72ad426ef68e08e241d296c499eedfec6648dcc62b1a12f72be5833a45bbec481b68415b08a5fbc9f9ef247b523dd72bbea65bb532784ddc5c704544bd2f1c2d46fdbe41e4f949e76f9947357b2d5cf8ca9f970701bbd6e8ab64ad31b20ad0be9b56dae4f6b83332b92a2a3b8ea2804c40efbc0b6b9".</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>If you are using a subclass of <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>, and the assembly that defines it depends on assemblies that are marked with the conditional APTCA attribute, you must include those assemblies in the list that you pass to the <ph id="ph2">&lt;xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph> you use to create application domains.</source>
          <target state="translated">서브 클래스를 사용 하는 경우 <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>, 조건부 APTCA 특성으로 표시 된 어셈블리에 정의 하는 어셈블리가 종속, 전달 하는 목록에서 해당 어셈블리를 포함 해야 하 고는 <ph id="ph2">&lt;xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A&gt;</ph> 는 속성<ph id="ph3">&lt;xref:System.AppDomainSetup&gt;</ph>응용 프로그램 도메인을 만드는 데 사용 합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>Otherwise the assemblies that are marked with the conditional APTCA attribute will be disabled.</source>
          <target state="translated">그렇지 않은 경우 조건부 APTCA 특성으로 표시 되는 어셈블리를 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>When you are debugging an application that is running in a sandboxed application domain, some <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> messages can be misleading.</source>
          <target state="translated">샌드 박싱된 응용 프로그램 도메인에서 실행 되는 응용 프로그램을 디버깅 하는 경우 일부 <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> 메시지 잘못 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PartialTrustVisibleAssemblies">
          <source>For example, a message might state that one of your fully trusted assemblies has only limited permissions, when the real cause of the problem is that a security demand that exceeds the grant set of the sandboxed application domain has propagated to the boundary of the sandboxed application domain and failed.</source>
          <target state="translated">예를 들어 메시지는 하거나 완전히 신뢰할 수 있는 어셈블리 중 하나에 제한 된 사용 권한을, 샌드 박싱된 응용 프로그램 도메인의 권한 부여 집합을 초과 하는 보안 요청 샌드 박싱된 응용 프로그램 도메인 경계에 전파 된 경우 문제의 실제 원인을 나타낼 수 있습니다 및 실패 했습니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.PrivateBinPath">
          <source>Gets or sets the list of directories under the application base directory that are probed for private assemblies.</source>
          <target state="translated">응용 프로그램 기본 디렉터리 아래에 있는 전용 어셈블리를 검색할 디렉터리 목록을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPath">
          <source>A list of directory names separated by semicolons.</source>
          <target state="translated">세미콜론으로 구분된 디렉터리 이름의 목록입니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPath">
          <source>Private assemblies are deployed in the same directory structure as the application.</source>
          <target state="translated">전용 어셈블리는 응용 프로그램과 동일한 디렉터리 구조에 배포 됩니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPath">
          <source>If the directories specified for <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> are not under <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>, they are ignored.</source>
          <target state="translated">디렉터리에 대해 지정 된 경우 <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> 아래에 있지 않으면 <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph>, 무시 됩니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.PrivateBinPathProbe">
          <source>Gets or sets a string value that includes or excludes <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationBase" /&gt;</ph> from the search path for the application, and searches only <ph id="ph2">&lt;see cref="P:System.AppDomainSetup.PrivateBinPath" /&gt;</ph>.</source>
          <target state="translated">응용 프로그램의 검색 경로에서 <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ApplicationBase" /&gt;</ph>를 포함하거나 제외하고 <ph id="ph2">&lt;see cref="P:System.AppDomainSetup.PrivateBinPath" /&gt;</ph>만 검색하는 문자열을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPathProbe">
          <source>A null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) to include the application base path when searching for assemblies; any non-null string value to exclude the path.</source>
          <target state="translated">어셈블리를 검색할 때 응용 프로그램 기준 위치 경로를 포함하려면 Null 참조(Visual Basic의 경우 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)이고, 이 경로를 제외하려면 Null이 아닌 임의의 문자열 값입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPathProbe">
          <source>The default value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">기본값은 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.PrivateBinPathProbe">
          <source>Set this property to any non-null string value, including <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> (""), to exclude the application directory path — that is, <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> — from the search path for the application, and to search for assemblies only in <ph id="ph3">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>.</source>
          <target state="translated">모든 null이 아닌 문자열 값으로이 속성을 설정 합니다. 포함 하 여 <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph> (""), 응용 프로그램 디렉터리 경로 제외 하려면-즉, <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> -응용 프로그램 및 어셈블리를 검색할 검색 경로에서 에서만 <ph id="ph3">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.SandboxInterop">
          <source>Gets or sets a value that indicates whether interface caching is disabled for interop calls in the application domain, so that a <bpt id="p1">&lt;c&gt;</bpt>QueryInterface<ept id="p1">&lt;/c&gt;</ept> is performed on each call.</source>
          <target state="translated">각 호출에 대해 <bpt id="p1">&lt;c&gt;</bpt>QueryInterface<ept id="p1">&lt;/c&gt;</ept>가 수행되도록 응용 프로그램 도메인의 interop 호출에 대한 인터페이스 캐싱을 비활성화할지 여부를 지정하는 값을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.SandboxInterop">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if interface caching is disabled for interop calls in application domains created with the current <ph id="ph2">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph2">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 개체로 만든 응용 프로그램 도메인의 interop 호출에 대한 인터페이스 캐싱이 비활성화되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.SandboxInterop">
          <source>Disabling interface caching has a significant impact on the performance of interop calls.</source>
          <target state="translated">Interop 호출의 성능이 인터페이스 캐싱을 사용 하지 않도록 설정에 상당한 영향을 줍니다.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.SandboxInterop">
          <source>This member is introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>.</source>
          <target state="translated">에 도입 된이 멤버는 <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>An enumerable set of string values that specify compatibility switches, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> to erase the existing compatibility switches.</source>
          <target state="translated">호환성 스위치를 지정하는 열거 가능한 문자열 값이거나 기존 호환성 스위치를 제거하는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Sets the specified switches, making the application domain compatible with previous versions of the .NET Framework for the specified issues.</source>
          <target state="translated">지정된 스위치를 설정하여 지정된 문제에 대해 이전 버전의 .NET Framework와 호환되는 응용 프로그램 도메인을 만듭니다.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Major versions of the .NET Framework sometimes introduce breaking changes from the previous version.</source>
          <target state="translated">경우에 따라.NET Framework의 주 버전을 이전 버전의 주요 변경 내용을 소개합니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>For example, the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> introduces a small number of breaking changes from the <ph id="ph2">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>.</source>
          <target state="translated">예를 들어는 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> 적은 수의 주요 변경 내용에서 소개 된 <ph id="ph2">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>합니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Use the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetCompatibilitySwitches%2A&gt;</ph> method to specify that one or more of these breaking changes should be rolled back for the application domain, to make the behavior compatible with the previous version of the .NET Framework.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.AppDomainSetup.SetCompatibilitySwitches%2A&gt;</ph> 메서드를 이러한 주요 변경 사항 중 하나 이상을 지정 롤백해야 응용 프로그램 도메인의 동작을 이전 버전의.NET Framework와 호환 되도록 합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Each time you call this method, it replaces the existing switch settings.</source>
          <target state="translated">이 메서드를 호출할 때마다 기존 스위치 설정을 대체 합니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>To erase the settings, specify <ph id="ph1">`null`</ph> for the <ph id="ph2">`switches`</ph> parameter.</source>
          <target state="translated">설정을 지우려면 지정 <ph id="ph1">`null`</ph> 에 대 한는 <ph id="ph2">`switches`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>The set of string values you provide for <ph id="ph1">`switches`</ph> can be a simple string array, because arrays implement the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
          <target state="translated">에 대해 제공 하는 문자열 값의 집합 <ph id="ph1">`switches`</ph> 배열 구현 하기 때문에 간단한 문자열 배열을 수는 <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>The following table provides examples of compatibility switches that can be set to restore the behavior of earlier versions of the .NET Framework.</source>
          <target state="translated">다음 표에서 이전 버전의.NET Framework의 동작을 복원할로 설정할 수 있는 호환성 스위치의 예제를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Switch</source>
          <target state="translated">전환</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Meaning</source>
          <target state="translated">의미</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"NetFx40_LegacySecurityPolicy"</source>
          <target state="translated">"NetFx40_LegacySecurityPolicy"</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Code access security (CAS) for the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> is enabled in this application domain.</source>
          <target state="translated">에 대 한 코드 액세스 보안 (CA)는 <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> 이 응용 프로그램 도메인에서 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>NetFx40_LegacySecurityPolicy<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>NetFx40_LegacySecurityPolicy<ph id="ph2">&amp;gt;</ph> 요소<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"NetFx40_Legacy20SortingBehavior"</source>
          <target state="translated">"NetFx40_Legacy20SortingBehavior"</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>String sorting defaults for the <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> are enabled in this application domain.</source>
          <target state="translated">문자열 정렬에 대 한 기본값은 <ph id="ph1">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> 이 응용 프로그램 도메인에서 활성화 됩니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Successfully restoring legacy sorting behavior also requires the sort00001000.dll dynamic link library to be available on the local system.</source>
          <target state="translated">레거시 정렬 동작을 성공적으로 복원 로컬 시스템에서 사용할 수 있도록 sort00001000.dll 동적 링크 라이브러리도 필요 합니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>CompatSortNLSVersion<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>CompatSortNLSVersion<ph id="ph2">&amp;gt;</ph> 요소<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"NetFx40_Legacy40SortingBehavior"</source>
          <target state="translated">"NetFx40_Legacy40SortingBehavior"</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>String sorting defaults for the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> and Unicode 5.0 are enabled in this application domain.</source>
          <target state="translated">문자열 정렬에 대 한 기본값은 <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph> 유니코드 5.0이 응용 프로그램 도메인에서 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>Successfully restoring legacy sorting behavior also requires the sort00060101.dll dynamic link library to be available on the local system.</source>
          <target state="translated">레거시 정렬 동작을 성공적으로 복원 하면 sort00060101.dll 동적 연결 라이브러리를 로컬 시스템에서 사용할 수 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"NetFx40_TimeSpanLegacyFormatMode"</source>
          <target state="translated">"NetFx40_TimeSpanLegacyFormatMode"</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source><ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> formatting behavior for the <ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> is enabled in this application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> 서식 지정에 대 한 동작의 <ph id="ph2">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]</ph> 이 응용 프로그램 도메인에서 사용 하도록 설정 합니다.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>TimeSpan_LegacyFormatMode<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md)</ept> and the "Restoring Legacy TimeSpan Formatting" section of the <ph id="ph3">&lt;xref:System.TimeSpan&gt;</ph> topic.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>TimeSpan_LegacyFormatMode<ph id="ph2">&amp;gt;</ph> 요소<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md)</ept> 및의 "레거시 TimeSpan 서식 복원" 섹션에서 <ph id="ph3">&lt;xref:System.TimeSpan&gt;</ph> 항목입니다.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>"UseRandomizedStringHashAlgorithm"</source>
          <target state="translated">"UseRandomizedStringHashAlgorithm"</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>The runtime calculates hash codes for strings on a per application domain basis instead of using a single hashing algorithm that produces a consistent hash code across application domains.</source>
          <target state="translated">문자열에 대 한 해시 코드를 계산 하는 런타임에서 응용 프로그램 도메인 간에 일관 된 해시 코드를 생성 하는 단일 해시 알고리즘을 사용 하는 대신 응용 프로그램 도메인 단위로 합니다.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>UseRandomizedStringHashAlgorithm<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>.</source>
          <target state="translated">참조 <bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>UseRandomizedStringHashAlgorithm<ph id="ph2">&amp;gt;</ph> 요소<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>An array that contains the XML configuration information to be used for the application domain.</source>
          <target state="translated">응용 프로그램 도메인에 사용할 XML 구성 정보가 들어 있는 배열입니다.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>Provides XML configuration information for the application domain, replacing the application's XML configuration information.</source>
          <target state="translated">응용 프로그램 도메인에 XML 구성 정보를 제공하여 응용 프로그램의 XML 구성 정보를 바꿉니다.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method provides a way to replace the configuration information of an application that creates a new application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> 메서드를 새 응용 프로그램 도메인을 만드는 응용 프로그램의 구성 정보를 대체 하는 방법을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The configuration file information in <ph id="ph1">`value`</ph> replaces the configuration file information for the application.</source>
          <target state="translated">구성 파일 정보 <ph id="ph1">`value`</ph> 응용 프로그램에 대 한 구성 파일 정보를 대체 합니다.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>For example, when the Example.exe application creates a new application domain, it can replace the configuration information originally obtained from the Example.exe.config file.</source>
          <target state="translated">예를 들어 Example.exe 응용 프로그램이 새 응용 프로그램 도메인을 만들 때 처음에 확보 Example.exe.config 파일에서 구성 정보를 바꿀 수 것입니다.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>Some consumers of configuration file information do not use the information stored by the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method.</source>
          <target state="translated">구성 파일에 대 한 정보의 소비자가 저장 한 정보를 사용 하지 마십시오는 <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The runtime does not enforce this.</source>
          <target state="translated">런타임에서이 적용 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>To ensure that all configuration file information is replaced in a new application domain, use the <ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph> property to specify a configuration file.</source>
          <target state="translated">새 응용 프로그램 도메인에서 모든 구성 파일 정보가 대체 되도록 하려면 사용 하 여는 <ph id="ph1">&lt;xref:System.AppDomainSetup.ConfigurationFile%2A&gt;</ph> 속성을 구성 파일을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> method does affect assembly binding.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.SetConfigurationBytes%2A&gt;</ph> 메서드는 어셈블리 바인딩에 영향 을지 않습니다.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetConfigurationBytes(System.Byte[])">
          <source>The XML in <ph id="ph1">`value`</ph> is the same as the XML in a normal configuration file, except that it is stored as a <ph id="ph2">&lt;xref:System.Byte&gt;</ph> array.</source>
          <target state="translated">XML <ph id="ph1">`value`</ph> 같습니다 일반 구성 파일에서 XML로 저장 된 제외 하 고는 <ph id="ph2">&lt;xref:System.Byte&gt;</ph> 배열입니다.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>The name of the string comparison function to override.</source>
          <target state="translated">재정의할 문자열 비교 함수의 이름입니다.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>The function version.</source>
          <target state="translated">함수 버전입니다.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>For <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, its value must be 1 or greater.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>의 경우 값은 1 이상이어야 합니다.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>A pointer to the function that overrides <bpt id="p1">&lt;c&gt;</bpt>functionName<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>functionName<ept id="p1">&lt;/c&gt;</ept>을 재정의하는 함수에 대한 포인터입니다.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>Provides the common language runtime with an alternate implementation of a string comparison function.</source>
          <target state="translated">공용 언어 런타임에 문자열 비교 함수의 대체 구현을 제공합니다.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>The following string comparison and sorting methods can be overridden by the <ph id="ph1">&lt;xref:System.AppDomainSetup.SetNativeFunction%2A&gt;</ph> method:</source>
          <target state="translated">다음 문자열 비교 및 정렬 방법을으로 재정의할 수 있습니다는 <ph id="ph1">&lt;xref:System.AppDomainSetup.SetNativeFunction%2A&gt;</ph> 메서드:</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>For information about these functions, see <bpt id="p1">[</bpt>National Language Support Functions<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=228134)</ept>.</source>
          <target state="translated">이러한 함수에 대 한 정보를 참조 하십시오. <bpt id="p1">[</bpt>국가별 언어 지원 기능<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=228134)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source><ph id="ph1">&lt;paramref name="functionName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="functionName" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source><ph id="ph1">&lt;paramref name="functionVersion" /&gt;</ph> is not 1 or greater.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="functionVersion" /&gt;</ph>가 1 이상입니다.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source><ph id="ph1">&lt;paramref name="functionPointer" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="functionPointer" /&gt;</ph>가 <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainSetup.SetNativeFunction(System.String,System.Int32,System.IntPtr)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>Gets or sets the names of the directories containing assemblies to be shadow copied.</source>
          <target state="translated">섀도 복사할 어셈블리가 들어 있는 디렉터리의 이름을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>A list of directory names separated by semicolons.</source>
          <target state="translated">세미콜론으로 구분된 디렉터리 이름의 목록입니다.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>When shadow copying is enabled, the default is to shadow copy all assemblies found through probing; that is, in the directories specified by the <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> properties.</source>
          <target state="translated">기본값은 섀도 복사본; 검색을 통해 찾은 모든 어셈블리를 섀도 복사를 사용 하는 경우 즉, 지정 된 디렉터리에서는 <ph id="ph1">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> 및 <ph id="ph2">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> property restricts the shadow copy to the assemblies in the directories specified by <ph id="ph2">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> 속성으로 지정 된 디렉터리에서 어셈블리를 섀도 복사를 제한 <ph id="ph2">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>If you don’t assign a string to the <ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> property, or if you set this property to <ph id="ph2">`null`</ph>, all assemblies in the directories specified by the <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> properties are shadow copied.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainSetup.ShadowCopyDirectories%2A&gt;</ph> 속성에 문자열을 할당하거나 이 속성을 <ph id="ph2">`null`</ph>로 설정하면 <ph id="ph3">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> 및 <ph id="ph4">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> 속성을 통해 지정된 디렉터리의 모든 어셈블리가 섀도 복사됩니다.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>Directory paths must not contain semicolons, because the semicolon is the delimiter character.</source>
          <target state="translated">세미콜론은 구분 기호 문자이므로 디렉터리 경로에 세미콜론을 포함하면 안 됩니다.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>There is no escape character for semicolons.</source>
          <target state="translated">세미콜론에 대한 이스케이프 문자는 없습니다.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>When shadow copying is in effect, assembly files are copied to another location before the assemblies are loaded.</source>
          <target state="translated">섀도 복사 되 고 어셈블리를 로드 하기 전에 어셈블리 파일을 다른 위치로 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>The original assembly file is not locked, so it can be updated.</source>
          <target state="translated">업데이트할 수 있도록 원래 어셈블리 파일 잠겨 있지 않습니다.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">섀도 복사에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>어셈블리 섀도 복사<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>for access to the path information.</source>
          <target state="translated">경로 정보에 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyDirectories">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.ShadowCopyFiles">
          <source>Gets or sets a string that indicates whether shadow copying is turned on or off.</source>
          <target state="translated">섀도 복사를 설정하거나 해제할지 여부를 나타내는 문자열을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyFiles">
          <source>The string value "true" to indicate that shadow copying is turned on; or "false" to indicate that shadow copying is turned off.</source>
          <target state="translated">섀도 복사가 설정되었음을 나타내려면 문자열 값 "true"이고, 섀도 복사가 해제되었음을 나타내려면 "false"입니다.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.ShadowCopyFiles">
          <source>For more information on shadow copying, see <bpt id="p1">[</bpt>Shadow Copying Assemblies<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>.</source>
          <target state="translated">섀도 복사에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>어셈블리 섀도 복사<ept id="p1">](~/docs/framework/app-domains/shadow-copy-assemblies.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>Gets or sets a string that specifies the target version and profile of the .NET Framework for the application domain, in a format that can be parsed by the <ph id="ph1">&lt;see cref="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)" /&gt;</ph> constructor.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)" /&gt;</ph> 생성자가 구문 분석할 수 있는 형식으로 응용 프로그램에 대한 .NET Framework의 대상 버전 및 프로필을 지정하는 문자열을 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>The target version and profile of the .NET Framework.</source>
          <target state="translated">.NET Framework의 대상 버전 및 프로필입니다.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>Set this property to tell the currently running version of the .NET Framework that the application domain will be used to load and run assemblies that have been compiled for the target version and profile.</source>
          <target state="translated">현재 실행 중인 버전의.NET Framework 응용 프로그램 도메인 로드 대상 버전 및 프로필에 대 한 컴파일된 어셈블리를 실행 하는이 속성을 설정 합니다.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>If the currently running version of the .NET Framework has optional behaviors that affect the compatibility of code that was compiled with the target version, it can enable or disable those behaviors, as appropriate, to improve compatibility.</source>
          <target state="translated">현재 실행 중인 버전의.NET Framework 대상 버전으로 컴파일된 코드의 호환성에 영향을 주는 선택적 동작 있으면 것 설정 하거나 해제할 수 호환성을 개선 하기 위해 적절 하 게 이러한 동작 합니다.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>This can be useful when an application supports add-ins compiled with multiple versions of the .NET Framework by running them in separate application domains.</source>
          <target state="translated">응용 프로그램에서 별도 응용 프로그램 도메인에서이 실행 하 여 여러 버전의.NET Framework를 사용 하 여 컴파일된 추가 기능을 지 원하는 경우에 유용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>For client applications, the value of the <ph id="ph1">&lt;xref:System.AppDomainSetup.TargetFrameworkName%2A&gt;</ph> property is inferred from the <ph id="ph2">&lt;xref:System.Runtime.Versioning.TargetFrameworkAttribute&gt;</ph> attribute.</source>
          <target state="translated">클라이언트 응용 프로그램의 값에 대 한는 <ph id="ph1">&lt;xref:System.AppDomainSetup.TargetFrameworkName%2A&gt;</ph> 속성에서 유추 되는 <ph id="ph2">&lt;xref:System.Runtime.Versioning.TargetFrameworkAttribute&gt;</ph> 특성입니다.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainSetup.TargetFrameworkName">
          <source>In <ph id="ph1">[!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]</ph> and later, this attribute is added to the assembly automatically based on the setting of the project's <bpt id="p1">**</bpt>Target Framework<ept id="p1">**</ept> property.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]</ph> 이 특성은 프로젝트의 설정에 따라 자동으로 어셈블리에 추가 하는 나중 및 <bpt id="p1">**</bpt>대상 프레임 워크<ept id="p1">**</ept> 속성입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>