<Type Name="IComparable&lt;T&gt;" FullName="System.IComparable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3331f1bbc5cf363b6ed960262fcd90e74a236a00" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34241377" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IComparable&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparable`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IComparable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparable(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">비교할 개체의 형식입니다.</typeparam>
    <summary>인스턴스를 정렬하는 형식 고유의 비교 메서드를 만들기 위해 값 형식 또는 클래스에서 구현하는 일반화된 비교 메서드를 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 인터페이스 형식 값을 가진 정렬 하거나 정렬할 수에 의해 구현 되 고 제네릭 컬렉션 개체의 멤버를 정렬 하기 위한 강력한 형식의 비교 메서드를 제공 합니다. 예를 들어 한 수를 두 번째 숫자 보다 클 수와 한 문자열이 다른 것 보다 먼저 사전순으로 표시 될 수 있습니다. 구현 형식, 단일 메서드에서 정의 필요 <xref:System.IComparable%601.CompareTo%28%600%29>, 하 고 정렬 순서에서 현재 인스턴스의 위치 인지 나타내는 이전에 뒤 동일한 형식의 두 번째 개체와 동일 합니다. 대개, 개발자 코드에서 직접 메서드 호출 되지 않습니다. 대신,이 자동으로 호출 메서드와 같은 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> 및 <xref:System.Collections.Generic.SortedList%602.Add%2A>합니다.  
  
 일반적으로 형식을 제공 하는 한 <xref:System.IComparable%601> 구현도 구현에서 <xref:System.IEquatable%601> 인터페이스입니다. <xref:System.IEquatable%601> 인터페이스 정의 <xref:System.IEquatable%601.Equals%2A> 메서드를 구현 하는 형식의 인스턴스의 같음을 결정 합니다.  
  
 구현에서 <xref:System.IComparable%601.CompareTo%28%600%29> 메서드 반환 해야 합니다는 <xref:System.Int32> 된 세 값 중 하나는 다음 표에 나와 있는 것 처럼 합니다.  
  
|값|의미|  
|-----------|-------------|  
|0보다 작음|이 개체에서 지정한 개체 앞에 <xref:System.IComparable%601.CompareTo%2A> 정렬 순서에서 메서드.|  
|0|이 현재 인스턴스에 지정한 개체와 정렬 순서에서 같은 위치에서 발생 된 <xref:System.IComparable%601.CompareTo%2A> 메서드 인수입니다.|  
|0보다 큼|이 현재 인스턴스에 의해 지정 된 개체 다음에 오는 <xref:System.IComparable%601.CompareTo%2A> 정렬 순서에서 메서드 인수입니다.|  
  
 모든 숫자 형식 (예: <xref:System.Int32> 및 <xref:System.Double>) 구현 <xref:System.IComparable%601>할 <xref:System.String>, <xref:System.Char>, 및 <xref:System.DateTime>합니다. 사용자 지정 형식을의 자체 구현을 제공 해야 <xref:System.IComparable%601> 개체 인스턴스 순서를 지정 하거나 정렬할 수를 사용할 수 있도록 합니다.  
  
   
  
## Examples  
 다음 코드 예제에는의 구현 방법을 보여 줍니다. <xref:System.IComparable%601> 간단한 위한 `Temperature` 개체입니다. 이 예에서는 만듭니다는 <xref:System.Collections.Generic.SortedList%602> 있는 문자열의 컬렉션 `Temperature` 키, 개체를 순서에 상관 없이 목록에 여러 쌍의 온도 문자열을 추가 합니다. 에 대 한 호출에서는 <xref:System.Collections.Generic.SortedList%602.Add%2A> 메서드를는 <xref:System.Collections.Generic.SortedList%602> 사용 하 여 컬렉션의 <xref:System.IComparable%601> 을에 표시 되는 목록 항목을 정렬 하려면 구현 합니다.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>형식 매개 변수 대체는 <see cref="T:System.IComparable`1" /> 이 인터페이스를 구현 하는 형식과 인터페이스입니다.  구현 하는 경우 <see cref="T:System.IComparable`1" />, 오버 로드 해야는 <see langword="op_GreaterThan" />, <see langword="op_GreaterThanOrEqual" />, <see langword="op_LessThan" />, 및 <see langword="op_LessThanOrEqual" /> 와 일치 하는 값을 반환 하는 연산자 <see cref="M:System.IComparable`1.CompareTo(`0)" />합니다. 또한 구현 해야 <see cref="T:System.IEquatable`1" />합니다. 참조는 <see cref="T:System.IEquatable`1" /> 완전 한 정보에 대 한 문서입니다.</para>
    </block>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IEquatable`1" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IComparable`1.CompareTo(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (other As T) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">이 인스턴스와 비교할 개체입니다.</param>
        <summary>현재 인스턴스와 동일한 형식의 다른 개체를 비교하고 정렬 순서에서 현재 인스턴스의 위치가 다른 개체보다 앞인지, 뒤인지 또는 동일한지를 나타내는 정수를 반환합니다.</summary>
        <returns>비교되는 개체의 상대 순서를 나타내는 값입니다. 반환 값에는 다음과 같은 의미가 있습니다.  <list type="table"><listheader><term> 값  </term><description> 의미  </description></listheader><item><term> 0보다 작음  </term><description> 이 인스턴스는 정렬 순서에서 <paramref name="other" /> 앞에 옵니다.  </description></item><item><term> 0  </term><description> 이 인스턴스가 정렬 순서에서 <paramref name="other" />와 동일한 위치에서 발생합니다.  </description></item><item><term> 0보다 큼  </term><description> 이 인스턴스가 정렬 순서에서 <paramref name="other" /> 뒤에 옵니다.  </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IComparable%601.CompareTo%2A> 제네릭 컬렉션 개체의 멤버를 정렬 하기 위한 강력한 형식의 비교 메서드를 제공 합니다. 이 때문에는 호출 되지 개발자 코드에서 직접 합니다. 대신,이 자동으로 호출 메서드와 같은 <xref:System.Collections.Generic.List%601.Sort?displayProperty=nameWithType> 및 <xref:System.Collections.Generic.SortedList%602.Add%2A>합니다.  
  
 이 메서드 정의만 고 효과가 사용 되는 특정 클래스 또는 값 형식으로 구현 되어야 합니다. 섹션 ("앞 에", "와 같은 위치에서 발생" 및 "뒤에 오는) 특정 구현에 따라 반환 값에 지정 된 비교의 의미 합니다.  
  
 모든 개체 정의 따르면 보다 큰 간주 `null`, 서로 다른 두 개의 null 참조 비교 합니다.  
  
   
  
## Examples  
 다음 코드 예제에는의 구현 방법을 보여 줍니다. <xref:System.IComparable%601> 간단한 위한 `Temperature` 개체입니다. 이 예에서는 만듭니다는 <xref:System.Collections.Generic.SortedList%602> 있는 문자열의 컬렉션 `Temperature` 키, 개체를 순서에 상관 없이 목록에 여러 쌍의 온도 문자열을 추가 합니다. 에 대 한 호출에서는 <xref:System.Collections.Generic.SortedList%602.Add%2A> 메서드를는 <xref:System.Collections.Generic.SortedList%602> 사용 하 여 컬렉션의 <xref:System.IComparable%601> 을에 표시 되는 목록 항목을 정렬 하려면 구현 합니다.  
  
 [!code-cpp[IComparable\`1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/IComparable`1 Example/CPP/source.cpp#1)]
 [!code-csharp[IComparable\`1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/IComparable`1 Example/CS/source.cs#1)]
 [!code-vb[IComparable\`1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IComparable`1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>A, B 및 C 개체에는 다음 사항을 충족 해야: <c>A.CompareTo(A)</c> 는 0을 반환 해야 합니다.  경우 <c>A.CompareTo(B)</c> 0을 반환, 다음 <c>B.CompareTo(A)</c> 는 0을 반환 해야 합니다.  경우 <c>A.CompareTo(B)</c> 0을 반환 하 고 <c>B.CompareTo(C)</c> 0을 반환, 다음 <c>A.CompareTo(C)</c> 0을 반환 하는 데 필요한 합니다.  경우 <c>A.CompareTo(B)</c> 다음 0이 아닌 값을 반환 <c>B.CompareTo(A)</c> 는 부호가 다른 값을 반환 해야 합니다.  경우 <c>A.CompareTo(B)</c> 값을 반환 <paramref name="x" /> 0 없는 및 <c>B.CompareTo(C)</c> 값을 반환 <paramref name="y" /> 같은 부호의 <paramref name="x" />, 다음 <c>1. CompareTo(C)</c> 와 기호가 동일 값을 반환 하는 데 필요한 <paramref name="x" /> 및 <paramref name="y" />합니다.</para>
        </block>
        <block subset="none" type="usage">
          <para>사용 된 <see cref="M:System.IComparable`1.CompareTo(`0)" /> 메서드는 클래스의 인스턴스 순서를 결정 합니다.</para>
        </block>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
  </Members>
</Type>