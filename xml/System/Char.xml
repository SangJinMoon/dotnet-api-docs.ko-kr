<Type Name="Char" FullName="System.Char">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d749c6a63f9748e113f570ba94e2982062f0213d" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39854164" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit char extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;char&gt;, class System.IConvertible, class System.IEquatable`1&lt;char&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Char" />
  <TypeSignature Language="VB.NET" Value="Public Structure Char&#xA;Implements IComparable, IComparable(Of Char), IConvertible, IEquatable(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public value class Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type char = struct&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Char&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="07cb0-101">UTF-16 코드 단위인 문자를 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="07cb0-101">Represents a character as a UTF-16 code unit.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-102">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 사용 하는 <xref:System.Char> 유니코드 문자를 나타내는 구조체입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-102">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] uses the <xref:System.Char> structure to represent a Unicode character.</span></span> <span data-ttu-id="07cb0-103">유니코드 표준 21 비트 스칼라 라는 고유 번호를 코드 포인트를 사용 하 여 각 유니코드 문자를 식별 하 고 코드 포인트를 하나 이상의 16 비트 값의 시퀀스로 인코딩됩니다 하는 방법을 지정 하는 utf-16 인코딩 형식을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-103">The Unicode Standard identifies each Unicode character with a unique 21-bit scalar number called a code point, and defines the UTF-16 encoding form that specifies how a code point is encoded into a sequence of one or more 16-bit values.</span></span> <span data-ttu-id="07cb0-104">각 16 비트 값 범위는 16 진수 0x0000에서 0xFFFF 및에 저장 되는 <xref:System.Char> 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-104">Each 16-bit value ranges from hexadecimal 0x0000 through 0xFFFF and is stored in a <xref:System.Char> structure.</span></span>  <span data-ttu-id="07cb0-105">값을 <xref:System.Char> 개체가 해당 16 비트 숫자 (서 수) 값입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-105">The value of a <xref:System.Char> object is its 16-bit numeric (ordinal) value.</span></span>  
  
 <span data-ttu-id="07cb0-106">간의 관계를 검사 하는 다음 섹션을 <xref:System.Char> 개체와 문자를 사용한 몇 가지 일반적인 작업에 설명 하 고 <xref:System.Char> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="07cb0-106">The following sections examine the relationship between a <xref:System.Char> object and a character and discuss some common tasks performed with <xref:System.Char> instances.</span></span>  
  
 <span data-ttu-id="07cb0-107">[Char 개체, 유니코드 문자 및 문자열](#Relationship) </span><span class="sxs-lookup"><span data-stu-id="07cb0-107">[Char objects, Unicode characters, and strings](#Relationship) </span></span>  
 <span data-ttu-id="07cb0-108">[문자 및 문자 범주](#Categories) </span><span class="sxs-lookup"><span data-stu-id="07cb0-108">[Characters and character categories](#Categories) </span></span>  
 <span data-ttu-id="07cb0-109">[문자 및 text 요소](#Elements) </span><span class="sxs-lookup"><span data-stu-id="07cb0-109">[Characters and text elements](#Elements) </span></span>  
 <span data-ttu-id="07cb0-110">[일반 작업](#Operations) </span><span class="sxs-lookup"><span data-stu-id="07cb0-110">[Common operations](#Operations) </span></span>  
 [<span data-ttu-id="07cb0-111">Char 값 및 interop</span><span class="sxs-lookup"><span data-stu-id="07cb0-111">Char values and interop</span></span>](#Interop)  
  
<a name="Relationship"></a>   
## <a name="char-objects-unicode-characters-and-strings"></a><span data-ttu-id="07cb0-112">Char 개체, 유니코드 문자 및 문자열</span><span class="sxs-lookup"><span data-stu-id="07cb0-112">Char objects, Unicode characters, and strings</span></span>  
 <span data-ttu-id="07cb0-113">A <xref:System.String> 개체의 순차 컬렉션이 <xref:System.Char> 텍스트 문자열을 나타내는 구조입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-113">A <xref:System.String> object is a sequential collection of <xref:System.Char> structures that represents a string of text.</span></span> <span data-ttu-id="07cb0-114">단일 대부분의 유니코드 문자를 표현할 수 있습니다 <xref:System.Char> 서로게이트 쌍 및/또는 문자 시퀀스 결합은 여러 표현 기본 문자, 인코딩된 문자를 제외한 개체 <xref:System.Char> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-114">Most Unicode characters can be represented by a single <xref:System.Char> object, but a character that is encoded as a base character, surrogate pair, and/or combining character sequence is represented by multiple <xref:System.Char> objects.</span></span> <span data-ttu-id="07cb0-115">이러한 이유로 <xref:System.Char> 구조는 <xref:System.String> 개체 단일 유니코드 문자를 반드시 동일 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-115">For this reason, a <xref:System.Char> structure in a <xref:System.String> object is not necessarily equivalent to a single Unicode character.</span></span>  
  
 <span data-ttu-id="07cb0-116">여러 16 비트 코드 단위는 다음 경우에 단일 유니코드 문자를 표시 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-116">Multiple 16-bit code units are used to represent single Unicode characters in the following cases:</span></span>  
  
-   <span data-ttu-id="07cb0-117">문자는 기본 문자 뒤에 하나 이상의 조합 문자 또는 단일 문자 구성 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-117">Glyphs, which may consist of a single character or of a base character followed by one or more combining characters.</span></span> <span data-ttu-id="07cb0-118">문자 ä는 표현 예를 들어 <xref:System.Char> 단위는 U + a 0061 코드 개체 <xref:System.Char> 인 코드 단위 + 0308 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-118">For example, the character ä is represented by a <xref:System.Char> object whose code unit is U+0061 followed by a <xref:System.Char> object whose code unit is U+0308.</span></span> <span data-ttu-id="07cb0-119">(A single에서 문자 a ¤ 정의할 수도 있습니다 <xref:System.Char> 00 e U + 4 인 코드 단위에 있는 개체입니다.) 다음 예제는 문자 a ¤ 이루어져 두 <xref:System.Char> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-119">(The character ä can also be defined by a single <xref:System.Char> object that has a code unit of U+00E4.) The following example illustrates that the character ä consists of two <xref:System.Char> objects.</span></span>  
  
     [!code-csharp[System.Char.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/grapheme1.cs#1)]
     [!code-vb[System.Char.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/grapheme1.vb#1)]  
  
-   <span data-ttu-id="07cb0-120">유니코드 Basic Multilingual Plane (BMP) 외부 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-120">Characters outside the Unicode Basic Multilingual Plane (BMP).</span></span> <span data-ttu-id="07cb0-121">유니코드 16 개 평면 평면 0을 나타내는 BMP, 외에도 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-121">Unicode supports sixteen planes in addition to the BMP, which represents plane 0.</span></span> <span data-ttu-id="07cb0-122">유니코드 코드 포인트를 UTF-32에 평면을 포함 하는 21 비트 값으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-122">A Unicode code point is represented in UTF-32 by a 21-bit value that includes the plane.</span></span> <span data-ttu-id="07cb0-123">예를 들어, U + 1D160 음표 기호 여덟 번째 문자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-123">For example, U+1D160 represents the MUSICAL SYMBOL EIGHTH NOTE character.</span></span> <span data-ttu-id="07cb0-124">Utf-16 인코딩을 16 비트만 있으므로 BMP 밖의 문자는 utf-16에서 서로게이트 쌍으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-124">Because UTF-16 encoding has only 16 bits, characters outside the BMP are represented by surrogate pairs in UTF-16.</span></span> <span data-ttu-id="07cb0-125">다음 예에서는 UTF-32에 해당 하는 U + 1D160, 음악 기호 여덟 번째 참고 문자 U + D834 U + DD60 임을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-125">The following example illustrates that the UTF-32 equivalent of U+1D160, the MUSICAL SYMBOL EIGHTH NOTE character, is U+D834 U+DD60.</span></span> <span data-ttu-id="07cb0-126">U + D834은 상위 서로게이트; u+d800부터 U + DBFF 까지의 범위를 상위 서로게이트입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-126">U+D834 is the high surrogate; high surrogates range from U+D800 through U+DBFF.</span></span> <span data-ttu-id="07cb0-127">U + DD60은 하위 서로게이트 이면 u+dc00부터 U + DFFF 까지의 범위를 하위 서로게이트입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-127">U+DD60 is the low surrogate; low surrogates range from U+DC00 through U+DFFF.</span></span>  
  
     [!code-csharp[System.Char.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/surrogate1.cs#2)]
     [!code-vb[System.Char.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/surrogate1.vb#2)]  
  
<a name="Categories"></a>   
## <a name="characters-and-character-categories"></a><span data-ttu-id="07cb0-128">문자 및 문자 범주</span><span class="sxs-lookup"><span data-stu-id="07cb0-128">Characters and character categories</span></span>  
 <span data-ttu-id="07cb0-129">각 유니코드 문자 또는 유효한 서로게이트 쌍에는 유니코드 범주에 속합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-129">Each Unicode character or valid surrogate pair belongs to a Unicode category.</span></span> <span data-ttu-id="07cb0-130">유니코드 범주는.NET framework에서의 멤버에 의해 표시 됩니다는 <xref:System.Globalization.UnicodeCategory> 열거형과 같은 값이 포함 <xref:System.Globalization.UnicodeCategory.CurrencySymbol?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>, 및 <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>예를 들어 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-130">In the .NET Framework, Unicode categories are represented by members of the <xref:System.Globalization.UnicodeCategory> enumeration and include values such as <xref:System.Globalization.UnicodeCategory.CurrencySymbol?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>, and <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>, for example.</span></span>  
  
 <span data-ttu-id="07cb0-131">문자의 유니코드 범주를 확인 하려면 호출을 <xref:System.Char.GetUnicodeCategory%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-131">To determine the Unicode category of a character, you call the <xref:System.Char.GetUnicodeCategory%2A> method.</span></span> <span data-ttu-id="07cb0-132">예를 들어, 다음 예제에서는 <xref:System.Char.GetUnicodeCategory%2A> 문자열에서 각 문자의 유니코드 범주를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-132">For example, the following example calls the <xref:System.Char.GetUnicodeCategory%2A> to display the Unicode category of each character in a string.</span></span>  
  
 [!code-csharp[System.Char.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/GetUnicodeCategory3.cs#6)]
 [!code-vb[System.Char.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/GetUnicodeCategory3.vb#6)]  
  
 <span data-ttu-id="07cb0-133">(U + 0000부터 U + 00FF), ASCII 범위 밖의 문자에 대해 내부적으로 <xref:System.Char.GetUnicodeCategory%2A> 에서 보고 하는 유니코드 범주에 따라 달라 집니다 메서드는 <xref:System.Globalization.CharUnicodeInfo> 클래스.</span><span class="sxs-lookup"><span data-stu-id="07cb0-133">Internally, for characters outside the ASCII range (U+0000 through U+00FF), the <xref:System.Char.GetUnicodeCategory%2A> method depends on Unicode categories reported by the <xref:System.Globalization.CharUnicodeInfo> class.</span></span> <span data-ttu-id="07cb0-134">로 시작 합니다 [!INCLUDE[net_v462](~/includes/net-v462-md.md)], 유니코드 문자 기반으로 분류 됩니다 [유니코드 표준, 버전 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-134">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unicode Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="07cb0-135">버전에서.NET Framework의는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 에 [!INCLUDE[net_v461](~/includes/net-v461-md.md)]를 기반으로 분류 된 [유니코드 표준, 버전 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-135">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unicode Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>  
  
<a name="Elements"></a>   
## <a name="characters-and-text-elements"></a><span data-ttu-id="07cb0-136">문자 및 text 요소</span><span class="sxs-lookup"><span data-stu-id="07cb0-136">Characters and text elements</span></span>  
 <span data-ttu-id="07cb0-137">여러 단일 문자를 표시할 수 있으므로 <xref:System.Char> 개체는 항상 개별 작업에 의미가 없습니다 <xref:System.Char> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-137">Because a single character can be represented by multiple <xref:System.Char> objects, it is not always meaningful to work with individual <xref:System.Char> objects.</span></span> <span data-ttu-id="07cb0-138">예를 들어, 다음 예제에서는 u t F-16으로 인코딩된 코드 단위를 Aegean 0부터 9 까지의 숫자를 나타내는 유니코드 코드 포인트를 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-138">For instance, the following example converts the Unicode code points that represent the Aegean numbers zero through 9 to UTF-16 encoded code units.</span></span> <span data-ttu-id="07cb0-139">잘못 동일 하므로 <xref:System.Char> 정확 하 게 보고 하지 20 자 결과 문자열에 문자를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-139">Because it erroneously equates <xref:System.Char> objects with characters, it inaccurately reports that the resulting string has 20 characters.</span></span>  
  
 [!code-csharp[System.Char.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2.cs#3)]
 [!code-vb[System.Char.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2.vb#3)]  
  
 <span data-ttu-id="07cb0-140">가정 하지 않으려면 다음을 수행할 수 있는 <xref:System.Char> 개체는 단일 문자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-140">You can do the following to avoid the assumption that a <xref:System.Char> object represents a single character.</span></span>  
  
-   <span data-ttu-id="07cb0-141">사용 하 여 작업할 수는 <xref:System.String> 나타내는 언어 콘텐츠를 분석 하는 개별 문자를 사용 하 여 작업 하는 대신 전체에서 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-141">You can work with a <xref:System.String> object in its entirety instead of working with its individual characters to represent and analyze linguistic content.</span></span>  
  
-   <span data-ttu-id="07cb0-142">사용할 수는 <xref:System.Globalization.StringInfo> 개별 대신 텍스트 요소를 사용 하는 클래스 <xref:System.Char> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-142">You can use the <xref:System.Globalization.StringInfo> class to work with text elements instead of individual <xref:System.Char> objects.</span></span> <span data-ttu-id="07cb0-143">다음 예제에서는 <xref:System.Globalization.StringInfo> Aegean로 구성 된 문자열의 텍스트 요소 수를 계산 하는 개체에는 0부터 9 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-143">The following example uses the <xref:System.Globalization.StringInfo> object to count the number of text elements in a string that consists of the Aegean numbers zero through nine.</span></span> <span data-ttu-id="07cb0-144">서로게이트 쌍을 단일 문자를 간주 하므로 올바르게 보고 됩니다. 문자열 10 개의 문자를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-144">Because it considers a surrogate pair a single character, it correctly reports that the string contains ten characters.</span></span>  
  
     [!code-csharp[System.Char.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2a.cs#4)]
     [!code-vb[System.Char.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2a.vb#4)]  
  
-   <span data-ttu-id="07cb0-145">문자열로 결합 문자가 하나 이상 있는 기본 문자를 포함 하는 경우 호출할 수 있습니다는 <xref:System.String.Normalize%2A?displayProperty=nameWithType> 단일 u t F-16으로 인코딩된 코드 단위에 부분 문자열을 변환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-145">If a string contains a base character that has one or more combining characters, you can call the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method to convert the substring to a single UTF-16 encoded code unit.</span></span> <span data-ttu-id="07cb0-146">다음 예제에서는 <xref:System.String.Normalize%2A?displayProperty=nameWithType> 00 e U + 4 인 기본 문자 단어로 (라틴어 소문자 A) 및 결합 문자 + 0308 (결합 DIAERESIS) 변환 하는 방법 (라틴 문자 작은 문자는 사용 하 여 DIAERESIS).</span><span class="sxs-lookup"><span data-stu-id="07cb0-146">The following example calls the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method to convert the base character U+0061 (LATIN SMALL LETTER A) and combining character U+0308 (COMBINING DIAERESIS) to U+00E4 (LATIN SMALL LETTER A WITH DIAERESIS).</span></span>  
  
     [!code-csharp[System.Char.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/normalized.cs#5)]
     [!code-vb[System.Char.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/normalized.vb#5)]  
  
<a name="Operations"></a>   
## <a name="common-operations"></a><span data-ttu-id="07cb0-147">일반 작업</span><span class="sxs-lookup"><span data-stu-id="07cb0-147">Common operations</span></span>  
 <span data-ttu-id="07cb0-148"><xref:System.Char> 비교 하는 메서드를 제공 하는 구조 <xref:System.Char> 개체의 현재 값을 변환 <xref:System.Char> 다른 형식의 개체에 개체 및의 유니코드 범주를 확인할를 <xref:System.Char> 개체:</span><span class="sxs-lookup"><span data-stu-id="07cb0-148">The <xref:System.Char> structure provides methods to compare <xref:System.Char> objects, convert the value of the current <xref:System.Char> object to an object of another type, and determine the Unicode category of a <xref:System.Char> object:</span></span>  
  
|<span data-ttu-id="07cb0-149">수행할 작업</span><span class="sxs-lookup"><span data-stu-id="07cb0-149">To do this</span></span>|<span data-ttu-id="07cb0-150">이 사용 하 여 `System.Char` 메서드</span><span class="sxs-lookup"><span data-stu-id="07cb0-150">Use these `System.Char` methods</span></span>|  
|----------------|-------------------------------------|  
|<span data-ttu-id="07cb0-151">비교 <xref:System.Char> 개체</span><span class="sxs-lookup"><span data-stu-id="07cb0-151">Compare <xref:System.Char> objects</span></span>|<span data-ttu-id="07cb0-152"><xref:System.Char.CompareTo%2A> 및 <xref:System.Char.Equals%2A></span><span class="sxs-lookup"><span data-stu-id="07cb0-152"><xref:System.Char.CompareTo%2A> and <xref:System.Char.Equals%2A></span></span>|  
|<span data-ttu-id="07cb0-153">코드 포인트를 문자열로 변환</span><span class="sxs-lookup"><span data-stu-id="07cb0-153">Convert a code point to a string</span></span>|<xref:System.Char.ConvertFromUtf32%2A>|  
|<span data-ttu-id="07cb0-154">변환 된 <xref:System.Char> 개체 또는 서로게이트 쌍의 <xref:System.Char> 코드 포인트를 개체</span><span class="sxs-lookup"><span data-stu-id="07cb0-154">Convert a <xref:System.Char> object or a surrogate pair of <xref:System.Char> objects to a code point</span></span>|<span data-ttu-id="07cb0-155">단일 문자: <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="07cb0-155">For a single character: <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType></span></span><br /><br /> <span data-ttu-id="07cb0-156">서로게이트 쌍에는 문자열의 문자: <xref:System.Char.ConvertToUtf32%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="07cb0-156">For a surrogate pair or a character in a string: <xref:System.Char.ConvertToUtf32%2A?displayProperty=nameWithType></span></span>|  
|<span data-ttu-id="07cb0-157">문자의 유니코드 범주 가져오기</span><span class="sxs-lookup"><span data-stu-id="07cb0-157">Get the Unicode category of a character</span></span>|<xref:System.Char.GetUnicodeCategory%2A>|  
|<span data-ttu-id="07cb0-158">제어 문자, 숫자, 문자, 문장 부호와 같은 특정 유니코드 범주의 문자 인지를 확인 하 고 등</span><span class="sxs-lookup"><span data-stu-id="07cb0-158">Determine whether a character is in a particular Unicode category such as digit, letter, punctuation, control character, and so on</span></span>|<span data-ttu-id="07cb0-159"><xref:System.Char.IsControl%2A><xref:System.Char.IsDigit%2A>, <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLetter%2A>, <xref:System.Char.IsLetterOrDigit%2A>, <xref:System.Char.IsLower%2A>를 <xref:System.Char.IsLowSurrogate%2A>, <xref:System.Char.IsNumber%2A>를 <xref:System.Char.IsPunctuation%2A>, <xref:System.Char.IsSeparator%2A>를 <xref:System.Char.IsSurrogate%2A>, <xref:System.Char.IsSurrogatePair%2A>, <xref:System.Char.IsSymbol%2A>, <xref:System.Char.IsUpper%2A>, 및 <xref:System.Char.IsWhiteSpace%2A></span><span class="sxs-lookup"><span data-stu-id="07cb0-159"><xref:System.Char.IsControl%2A>, <xref:System.Char.IsDigit%2A>, <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLetter%2A>, <xref:System.Char.IsLetterOrDigit%2A>, <xref:System.Char.IsLower%2A>, <xref:System.Char.IsLowSurrogate%2A>, <xref:System.Char.IsNumber%2A>, <xref:System.Char.IsPunctuation%2A>, <xref:System.Char.IsSeparator%2A>, <xref:System.Char.IsSurrogate%2A>, <xref:System.Char.IsSurrogatePair%2A>, <xref:System.Char.IsSymbol%2A>, <xref:System.Char.IsUpper%2A>, and <xref:System.Char.IsWhiteSpace%2A></span></span>|  
|<span data-ttu-id="07cb0-160">변환 된 <xref:System.Char> 숫자 값 형식으로 숫자를 나타내는 개체</span><span class="sxs-lookup"><span data-stu-id="07cb0-160">Convert a <xref:System.Char> object that represents a number to a numeric value type</span></span>|<xref:System.Char.GetNumericValue%2A>|  
|<span data-ttu-id="07cb0-161">변환에 문자열의 문자는 <xref:System.Char> 개체</span><span class="sxs-lookup"><span data-stu-id="07cb0-161">Convert a character in a string into a <xref:System.Char> object</span></span>|<span data-ttu-id="07cb0-162"><xref:System.Char.Parse%2A> 및 <xref:System.Char.TryParse%2A></span><span class="sxs-lookup"><span data-stu-id="07cb0-162"><xref:System.Char.Parse%2A> and <xref:System.Char.TryParse%2A></span></span>|  
|<span data-ttu-id="07cb0-163">변환 된 <xref:System.Char> 개체를 <xref:System.String> 개체</span><span class="sxs-lookup"><span data-stu-id="07cb0-163">Convert a <xref:System.Char> object to a <xref:System.String> object</span></span>|<xref:System.Char.ToString%2A>|  
|<span data-ttu-id="07cb0-164">대/소문자 변경 된 <xref:System.Char> 개체</span><span class="sxs-lookup"><span data-stu-id="07cb0-164">Change the case of a <xref:System.Char> object</span></span>|<span data-ttu-id="07cb0-165"><xref:System.Char.ToLower%2A>, <xref:System.Char.ToLowerInvariant%2A>, <xref:System.Char.ToUpper%2A> 및 <xref:System.Char.ToUpperInvariant%2A></span><span class="sxs-lookup"><span data-stu-id="07cb0-165"><xref:System.Char.ToLower%2A>, <xref:System.Char.ToLowerInvariant%2A>, <xref:System.Char.ToUpper%2A>, and <xref:System.Char.ToUpperInvariant%2A></span></span>|  
  
<a name="Interop"></a>   
## <a name="char-values-and-interop"></a><span data-ttu-id="07cb0-166">Char 값 및 interop</span><span class="sxs-lookup"><span data-stu-id="07cb0-166">Char values and interop</span></span>  
<span data-ttu-id="07cb0-167">관리 되는 경우 <xref:System.Char> interop 마샬러가 기본적으로 ANSI로 설정 하는 문자, 유니코드 u t F-16으로 인코딩된 코드 단위, 표시 되는 형식을 관리 되지 않는 코드에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-167">When a managed <xref:System.Char> type, which is represented as a Unicode UTF-16 encoded code unit, is passed to unmanaged code, the interop marshaler converts the character set to ANSI by default.</span></span> <span data-ttu-id="07cb0-168">적용할 수 있습니다 합니다 <xref:System.Runtime.InteropServices.DllImportAttribute> 특성을 플랫폼 호출 선언 및 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 는 문자 집합 마샬링된 컨트롤에 COM interop 선언에 특성 <xref:System.Char> 사용 하 여 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-168">You can apply the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to platform invoke declarations and the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute to a COM interop declaration to control which character set a marshaled <xref:System.Char> type uses.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-169">다음 코드 예제에서 메서드 중 일부를 보여 줍니다 <xref:System.Char>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-169">The following code example demonstrates some of the methods in <xref:System.Char>.</span></span>  
  
 [!code-cpp[System.Char &#91;Type Level&#93;#23](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char [Type Level]/CPP/charstructure.cpp#23)]
 [!code-csharp[System.Char &#91;Type Level&#93;#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char [Type Level]/CS/charstructure.cs#23)]
 [!code-vb[System.Char &#91;Type Level&#93;#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char [Type Level]/VB/charstructure.vb#23)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="07cb0-170">이 유형의 모든 멤버는 스레드로부터 안전 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="07cb0-170">All members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="07cb0-171">인스턴스 상태를 수정 하려면 표시 되는 멤버는 실제로 새 값을 사용 하 여 초기화 된 새 인스턴스를 반환 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="07cb0-171">Members that appear to modify instance state actually return a new instance initialized with the new value.</span>
      </span>
      <span data-ttu-id="07cb0-172">으로 다른 형식을 사용 하 여이 형식의 인스턴스를 포함 하는 공유 변수를 읽고 쓰는로 보호 되어야 스레드로부터 안전을 보장 하려면 잠금.</span>
      <span class="sxs-lookup">
        <span data-stu-id="07cb0-172">As with any other type, reading and writing to a shared variable that contains an instance of this type must be protected by a lock to guarantee thread safety.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.String" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-173">이 인스턴스를 지정된 개체 또는 값 형식과 비교하고 정렬 순서에서 이 인스턴스의 위치가 지정된 개체 또는 값 형식보다 앞인지, 뒤인지 또는 동일한지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-173">Compares this instance to a specified object or value type, and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object or value type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(char value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : char -&gt; int&#xA;override this.CompareTo : char -&gt; int" Usage="char.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="07cb0-174">비교할 <see cref="T:System.Char" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-174">A <see cref="T:System.Char" /> object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-175">이 인스턴스를 지정된 <see cref="T:System.Char" /> 개체와 비교하고 정렬 순서에서 이 인스턴스의 위치가 지정된 <see cref="T:System.Char" /> 개체보다 앞인지, 뒤인지 또는 동일한지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-175">Compares this instance to a specified <see cref="T:System.Char" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Char" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-176">정렬 순서에서 <paramref name="value" /> 매개 변수와 비교한 이 인스턴스의 위치를 나타내는 부호 있는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-176">A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</span>
          </span>
          <span data-ttu-id="07cb0-177">
            <list type="table">
              <listheader>
                <term> 반환 값 </term>
                <description> 설명 </description>
              </listheader>
              <item>
                <term> 0보다 작음 </term>
                <description> 이 인스턴스는 <paramref name="value" />보다 앞에 옵니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description> 이 인스턴스의 위치가 정렬 순서에서 <paramref name="value" />와 같습니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description> 이 인스턴스가 <paramref name="value" /> 뒤에 옵니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-177">
              <list type="table">
                <listheader>
                  <term> Return Value  </term>
                  <description> Description  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> This instance precedes <paramref name="value" />.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> This instance has the same position in the sort order as <paramref name="value" />.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> This instance follows <paramref name="value" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-178">이 메서드를 구현 하는 <xref:System.IComparable%601?displayProperty=nameWithType> 인터페이스 및 수행 보다 조금 더 나은 <xref:System.Char.CompareTo%2A?displayProperty=nameWithType> 메서드 변환할 필요가 없기 때문에 `value` 개체에 대 한 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="07cb0-178">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.Char.CompareTo%2A?displayProperty=nameWithType> method because it does not have to convert the `value` parameter to an object.</span></span>  
  
 <span data-ttu-id="07cb0-179">이 인스턴스의 인코딩된 값을 기반으로 비교를이 메서드에 의해 수행 됩니다 및 `value`를 사전순으로 특징에 없습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-179">The comparison performed by this method is based on the encoded values of this instance and `value`, not their lexicographical characteristics.</span></span>  
  
 <span data-ttu-id="07cb0-180">경우는 <xref:System.Char.CompareTo%2A> 메서드 매개 변수 형식은 비트 수가 적은 인스턴스 유형을 보다 일부 프로그래밍 언어는 더 많은 비트가 값으로 매개 변수의 값을 변환 하는 암시적 확대 변환을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-180">If the <xref:System.Char.CompareTo%2A> method parameter type has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.</span></span>  
  
 <span data-ttu-id="07cb0-181">예를 들어, 인스턴스 유형이 <xref:System.Int32> 매개 변수 형식이 고 <xref:System.Byte>입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-181">For example, suppose the instance type is <xref:System.Int32> and the parameter type is <xref:System.Byte>.</span></span> <span data-ttu-id="07cb0-182">Microsoft C# 컴파일러는 매개 변수의 값을 표시 하는 명령을 생성는 <xref:System.Int32> 개체를 만든 다음 생성 된 <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> 의 값을 비교 하는 메서드를 <xref:System.Int32> 인스턴스 및 <xref:System.Int32> 매개 변수 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-182">The Microsoft C# compiler generates instructions to represent the value of the parameter as an <xref:System.Int32> object, then generates a <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> method that compares the values of the <xref:System.Int32> instance and the <xref:System.Int32> parameter representation.</span></span>  
  
 <span data-ttu-id="07cb0-183">일반적으로 숫자 형식에 암시적 확대 변환은 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-183">Typically, implicit widening conversions are performed on numeric types.</span></span> <span data-ttu-id="07cb0-184">해당 컴파일러에서 확대 변환을 수행 하는 경우를 확인 하려면 프로그래밍 언어의 설명서를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="07cb0-184">Consult your programming language's documentation to determine if its compiler performs widening conversions.</span></span> <span data-ttu-id="07cb0-185">컴파일러는 매개 변수 상자를 호출 하는 명령을 생성 인스턴스 및 매개 변수 형식 불일치 및 적절 한 변환을 사용할 수 없는 경우는 <xref:System.Char.CompareTo%2A> 오버 로드는 <xref:System.Object> 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-185">If the instance and parameter types mismatch and a suitable conversion is not available, the compiler generates instructions to box the parameter and invoke the <xref:System.Char.CompareTo%2A> overload that takes an <xref:System.Object> parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-186">다음 코드 예제에서는 제네릭 및 제네릭이 아닌 버전을 보여 줍니다.는 `CompareTo` 여러 값 및 참조 형식에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-186">The following code example demonstrates generic and non-generic versions of the `CompareTo` method for several value and reference types.</span></span>  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="char.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="07cb0-187">이 인스턴스와 비교할 개체 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-187">An object to compare this instance to, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-188">이 인스턴스를 지정된 개체와 비교하고 정렬 순서에서 이 인스턴스의 위치가 지정된 <see cref="T:System.Object" /> 개체보다 앞인지, 뒤인지 또는 동일한지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-188">Compares this instance to a specified object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-189">정렬 순서에서 <paramref name="value" /> 매개 변수와 비교한 이 인스턴스의 위치를 나타내는 부호 있는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-189">A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</span>
          </span>
          <span data-ttu-id="07cb0-190">
            <list type="table">
              <listheader>
                <term> 반환 값 </term>
                <description> 설명 </description>
              </listheader>
              <item>
                <term> 0보다 작음 </term>
                <description> 이 인스턴스는 <paramref name="value" />보다 앞에 옵니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description> 이 인스턴스의 위치가 정렬 순서에서 <paramref name="value" />와 같습니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description> 이 인스턴스가 <paramref name="value" /> 뒤에 옵니다.  -또는-  <paramref name="value" />가 <see langword="null" />입니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-190">
              <list type="table">
                <listheader>
                  <term> Return Value  </term>
                  <description> Description  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> This instance precedes <paramref name="value" />.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> This instance has the same position in the sort order as <paramref name="value" />.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> This instance follows <paramref name="value" />.  -or-  <paramref name="value" /> is <see langword="null" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-191">합니다 <xref:System.Char.CompareTo%2A> 메서드 구현 된 <xref:System.IComparable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-191">The <xref:System.Char.CompareTo%2A> method implements the <xref:System.IComparable> interface.</span></span>  
  
 <span data-ttu-id="07cb0-192">합니다 `value` 매개 변수 여야 합니다 `null` 인스턴스나 <xref:System.Char>고, 그렇지 않으면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-192">The `value` parameter must be `null` or an instance of <xref:System.Char>; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="07cb0-193">이 인스턴스의 인코딩된 값을 기반으로 비교를이 메서드에 의해 수행 되 고 `value`, 사전순으로 특징에 반드시 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-193">The comparison performed by this method is based on the encoded values of this instance and `value`, not necessarily their lexicographical characteristics.</span></span> <span data-ttu-id="07cb0-194">인스턴스에도 <xref:System.Char>, 해당 값에 관계 없이 보다 큰 것으로 간주 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-194">Any instance of <xref:System.Char>, regardless of its value, is considered greater than `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-195">다음 코드 예제에서는 <xref:System.Char.CompareTo%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-195">The following code example demonstrates <xref:System.Char.CompareTo%2A>.</span></span>  
  
 [!code-cpp[System.Char.CompareTo#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.CompareTo/CPP/compareto.cpp#19)]
 [!code-csharp[System.Char.CompareTo#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.CompareTo/CS/compareto.cs#19)]
 [!code-vb[System.Char.CompareTo#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.CompareTo/VB/compareto.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="07cb0-196">
            <paramref name="value" />이 <see cref="T:System.Char" /> 개체가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-196">
              <paramref name="value" /> is not a <see cref="T:System.Char" /> object.</span>
          </span>
        </exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertFromUtf32">
      <MemberSignature Language="C#" Value="public static string ConvertFromUtf32 (int utf32);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ConvertFromUtf32(int32 utf32) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertFromUtf32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertFromUtf32 (utf32 As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ConvertFromUtf32(int utf32);" />
      <MemberSignature Language="F#" Value="static member ConvertFromUtf32 : int -&gt; string" Usage="System.char.ConvertFromUtf32 utf32" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf32" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf32">
          <span data-ttu-id="07cb0-197">21비트 유니코드 코드 포인트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-197">A 21-bit Unicode code point.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-198">지정된 유니코드 코드 포인트를 UTF-16으로 인코딩된 문자열로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-198">Converts the specified Unicode code point into a UTF-16 encoded string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-199">
            <see cref="T:System.Char" /> 매개 변수로 지정된 코드 포인트에 해당하는 <see cref="T:System.Char" /> 개체 하나 또는 <paramref name="utf32" /> 개체의 서로게이트 쌍으로 구성된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-199">A string consisting of one <see cref="T:System.Char" /> object or a surrogate pair of <see cref="T:System.Char" /> objects equivalent to the code point specified by the <paramref name="utf32" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-200">이 메서드를 사용 하 여 같은 메서드를 사용 하 여 문자열을 테스트 하기 전에 21 비트 유니코드 코드 포인트를 u t F-16으로 인코딩된 문자열로 변환할 <xref:System.Char.IsLowSurrogate%28System.Char%29> 고 <xref:System.Char.IsHighSurrogate%28System.Char%29>입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-200">Use this method to convert a 21-bit Unicode code point to a UTF-16 encoded string before testing the string with methods such as <xref:System.Char.IsLowSurrogate%28System.Char%29> and <xref:System.Char.IsHighSurrogate%28System.Char%29>.</span></span>  
  
 <span data-ttu-id="07cb0-201">유효한 코드 포인트 외부를 평면 BMP (기본적인 다국어)는 항상 유효한 서로게이트 쌍을 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-201">A valid code point outside the Basic Multilingual Plane (BMP) always yields a valid surrogate pair.</span></span> <span data-ttu-id="07cb0-202">그러나 BMP 내에서 올바른 코드 포인트를 없는 언어 처리 변환에 사용 되기 때문에 유니코드 표준에 따라 유효한 결과을 생성 하지 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-202">However, a valid code point within the BMP might not yield a valid result according to the Unicode standard because no linguistic processing is used in the conversion.</span></span> <span data-ttu-id="07cb0-203">이런 이유로 사용 하 여는 <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> utf-16 형식으로 데이터를 대량으로 UTF-32 데이터를 대량으로 변환 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-203">For that reason, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class to convert bulk UTF-32 data into bulk UTF-16 data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-204">다음 코드 예제는 <xref:System.Char.ConvertToUtf32%2A> 고 <xref:System.Char.ConvertFromUtf32%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-204">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>  
  
 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-205">
            <paramref name="utf32" />는 U+d800~U+DFFF 범위의 서로게이트 쌍 범위를 제외한 U+0~U+10ffff 범위의 유효한 21비트 유니코드 코드 포인트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-205">
              <paramref name="utf32" /> is not a valid 21-bit Unicode code point ranging from U+0 through U+10FFFF, excluding the surrogate pair range from U+D800 through U+DFFF.</span>
          </span>
        </exception>
        <altmember cref="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertToUtf32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-206">UTF-16으로 인코딩된 서로게이트 쌍의 값을 유니코드 코드 포인트로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-206">Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUtf32 (highSurrogate As Char, lowSurrogate As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ConvertToUtf32(char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="F#" Value="static member ConvertToUtf32 : char * char -&gt; int" Usage="System.char.ConvertToUtf32 (highSurrogate, lowSurrogate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="highSurrogate">
          <span data-ttu-id="07cb0-207">high surrogate 코드 단위, 즉 U+D800부터 U+DBFF까지의 범위에 있는 코드 단위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-207">A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF).</span>
          </span>
        </param>
        <param name="lowSurrogate">
          <span data-ttu-id="07cb0-208">low surrogate 코드 단위, 즉 U+DC00부터 U+DFFF까지의 범위에 있는 코드 단위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-208">A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-209">UTF-16으로 인코딩된 서로게이트 쌍의 값을 유니코드 코드 포인트로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-209">Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-210">
            <paramref name="highSurrogate" /> 및 <paramref name="lowSurrogate" /> 매개 변수가 나타내는 21비트 유니코드 코드 포인트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-210">The 21-bit Unicode code point represented by the <paramref name="highSurrogate" /> and <paramref name="lowSurrogate" /> parameters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-211">21 비트 유니코드 코드 포인트를 서로게이트 쌍으로 변환 하려면이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-211">Use this method to convert a surrogate pair into a 21-bit Unicode code point.</span></span> <span data-ttu-id="07cb0-212">UTF-32 데이터를 u t F-16으로 데이터를 변환 하려면 사용 된 <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-212">To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="07cb0-213">일반적으로 utf-16 인코딩을 16 비트 코드 단위로 단일 유니코드 문자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-213">Ordinarily, UTF-16 encoding represents a single Unicode character as a 16-bit code unit.</span></span> <span data-ttu-id="07cb0-214">그러나 단일 추상 문자 두 명의 16 비트 코드 단위로 표시할 수 있는 서로게이트 쌍도 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-214">However, it also supports surrogate pairs, which allow a single abstract character to be represented as two 16-bit code units.</span></span> <span data-ttu-id="07cb0-215">이러한 두 <xref:System.Char> 개체 코드 단위 u+d800부터 U + dbff 사이의 첫 번째 (높음) 서로게이트에 대 한 고 u+dc00부터 U + dfff 두 번째 (낮음) 서로게이트에 대 한 범위에 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-215">These two <xref:System.Char> objects must have code units that range from U+D800 to U+DBFF for the first (high) surrogate and from U+DC00 to U+DFFF for the second (low) surrogate.</span></span> <span data-ttu-id="07cb0-216">서로게이트 쌍 지만 utf-16 인코딩.</span><span class="sxs-lookup"><span data-stu-id="07cb0-216">Surrogate pairs are supported only by UTF-16 encoding.</span></span> <span data-ttu-id="07cb0-217">이 메서드는 UTF-32 인코딩을 사용 하 여 문자를 변환할 utf-16 서로게이트 쌍으로 표현 하는 문자를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-217">This method allows a character represented by a UTF-16 surrogate pair to be converted to a character using UTF-32 encoding.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-218">다음 코드 예제는 <xref:System.Char.ConvertToUtf32%2A> 고 <xref:System.Char.ConvertFromUtf32%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-218">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>  
  
 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-219">
            <paramref name="highSurrogate" />가 U+D800 ~ U+DBFF 범위에 속하지 않거나 <paramref name="lowSurrogate" />가 U+DC00 ~ U+DFFF 범위에 속하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-219">
              <paramref name="highSurrogate" /> is not in the range U+D800 through U+DBFF, or <paramref name="lowSurrogate" /> is not in the range U+DC00 through U+DFFF.</span>
          </span>
        </exception>
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUtf32 (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ConvertToUtf32(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member ConvertToUtf32 : string * int -&gt; int" Usage="System.char.ConvertToUtf32 (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-220">문자나 서로게이트 쌍이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-220">A string that contains a character or surrogate pair.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-221">
            <c>s</c>에 있는 문자나 서로게이트 쌍의 인덱스 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-221">The index position of the character or surrogate pair in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-222">문자열의 지정한 위치에 있는 UTF-16으로 인코딩된 문자 또는 서로게이트 쌍의 값을 유니코드 코드 포인트로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-222">Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-223">
            <paramref name="s" /> 매개 변수로 지정된 <paramref name="index" /> 매개 변수 위치에서 문자나 서로게이트 쌍이 나타내는 21비트 유니코드 코드 포인트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-223">The 21-bit Unicode code point represented by the character or surrogate pair at the position in the <paramref name="s" /> parameter specified by the <paramref name="index" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-224">21 비트 유니코드 코드 포인트를 문자나 서로게이트 쌍으로 변환 하려면이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-224">Use this method to convert a character or surrogate pair into a 21-bit Unicode code point.</span></span> <span data-ttu-id="07cb0-225">UTF-32 데이터를 u t F-16으로 데이터를 변환 하려면 사용 된 <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-225">To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-226">다음 코드 예제는 <xref:System.Char.ConvertToUtf32%2A> 고 <xref:System.Char.ConvertFromUtf32%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-226">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>  
  
 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-227">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-227">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-228">
            <paramref name="index" />가 <paramref name="s" /> 내의 위치가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-228">
              <paramref name="index" /> is not a position within <paramref name="s" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="07cb0-229">지정된 인덱스 위치에는 서로게이트 쌍이 포함되어 있으며, 이 쌍의 첫 번째 문자가 올바른 높은 서로게이트가 아니거나 이 쌍의 두 번째 문자가 올바른 낮은 서로게이트가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-229">The specified index position contains a surrogate pair, and either the first character in the pair is not a valid high surrogate or the second character in the pair is not a valid low surrogate.</span>
          </span>
        </exception>
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-230">이 인스턴스가 지정된 개체나 <see cref="T:System.Char" /> 값과 같은지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-230">Returns a value that indicates whether this instance is equal to a specified object or <see cref="T:System.Char" /> value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (char obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(char obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(char obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : char -&gt; bool" Usage="char.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07cb0-231">이 인스턴스와 비교할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-231">An object to compare to this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-232">이 인스턴스가 지정된 <see cref="T:System.Char" /> 개체와 같은지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-232">Returns a value that indicates whether this instance is equal to the specified <see cref="T:System.Char" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-233">
            <paramref name="obj" /> 매개 변수가 이 인스턴스의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-233">
              <see langword="true" /> if the <paramref name="obj" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-234">이 메서드를 구현 하는 <xref:System.IEquatable%601?displayProperty=nameWithType> 인터페이스를 하 고 수행 보다 조금 더 나은 <xref:System.Char.Equals%28System.Object%29?displayProperty=nameWithType> unbox 필요가 없으므로 `obj` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-234">This method implements the <xref:System.IEquatable%601?displayProperty=nameWithType> interface, and performs slightly better than <xref:System.Char.Equals%28System.Object%29?displayProperty=nameWithType> because it does not need to unbox the `obj` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="char.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="07cb0-235">이 인스턴스와 비교할 개체 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-235">An object to compare with this instance or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-236">@FSHO2@이 인스턴스가 지정한 개체와 같은지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-236">Returns a value that indicates whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-237">
            <see langword="true" />가 <paramref name="obj" />의 인스턴스이고 이 인스턴스의 값과 같으면 <see cref="T:System.Char" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-237">
              <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Char" /> and equals the value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-238">이 인스턴스의 인코딩된 값을 기반으로 비교를이 메서드에 의해 수행 되 고 `obj`, 사전순으로 특징에 반드시 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-238">The comparison performed by this method is based on the encoded values of this instance and `obj`, not necessarily their lexicographical characteristics.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-239">다음 코드 예제에서는 <xref:System.Char.Equals%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-239">The following code example demonstrates <xref:System.Char.Equals%2A>.</span></span>  
  
 [!code-cpp[System.Char.Equals#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Equals/CPP/equals.cpp#20)]
 [!code-csharp[System.Char.Equals#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Equals/CS/equals.cs#20)]
 [!code-vb[System.Char.Equals#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Equals/VB/equals.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="char.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-240">이 인스턴스의 해시 코드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-240">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-241">부호 있는 32비트 정수 해시 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-241">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-242">숫자 형식의 유니코드 문자를 배정밀도 부동 소수점 숫자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-242">Converts a specified numeric Unicode character to a double-precision floating-point number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (c As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char c);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.char.GetNumericValue c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-243">변환할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-243">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-244">숫자 형식의 유니코드 문자를 배정밀도 부동 소수점 숫자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-244">Converts the specified numeric Unicode character to a double-precision floating point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-245">문자가 숫자를 나타내는 경우에는 <paramref name="c" />의 숫자 값을 반환하고 그렇지 않은 경우에는 -1.0을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-245">The numeric value of <paramref name="c" /> if that character represents a number; otherwise, -1.0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-246">합니다 `c` 매개 변수 여야 합니다는 <xref:System.Char> 숫자 값의 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-246">The `c` parameter must be the <xref:System.Char> representation of a numeric value.</span></span> <span data-ttu-id="07cb0-247">예를 들어 경우 `c` "5"를 반환 값은 5입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-247">For example, if `c` is "5", the return value is 5.</span></span> <span data-ttu-id="07cb0-248">그러나 경우 `c` "z"는 반환 값은-1.0입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-248">However, if `c` is "z", the return value is -1.0.</span></span>  
  
 <span data-ttu-id="07cb0-249">문자에 연결 된 숫자 값을 다음 중 하나의 멤버인 경우에 <xref:System.Globalization.UnicodeCategory> 범주: `DecimalDigitNumber`를 `LetterNumber`, 또는 `OtherNumber`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-249">A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.</span></span>  
  
 <span data-ttu-id="07cb0-250">합니다 <xref:System.Char.GetNumericValue%2A> 가정 메서드 `c` 단일 언어 문자에 해당 하며 문자가 10 진수 숫자로 변환할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-250">The <xref:System.Char.GetNumericValue%2A> method assumes that `c` corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit.</span></span> <span data-ttu-id="07cb0-251">그러나 유니코드 표준의 일부 숫자 두 인용 부호로 표시 되는 <xref:System.Char> 서로게이트 쌍을 형성 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-251">However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair.</span></span> <span data-ttu-id="07cb0-252">예를 들어, U + 10107 ~ U + 10133 코드 포인트 번호 지정 시스템 Aegean 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-252">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="07cb0-253">다음 예제에서는 <xref:System.Char.ConvertFromUtf32%2A> 메서드 AEGEAN 숫자 1을 나타내는 문자열을 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-253">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="07cb0-254">예제에서 출력으로는 <xref:System.Char.GetNumericValue%28System.Char%29> 상위 서로게이트 또는 하위 서로게이트 문자의이 전달 되는 경우 메서드는-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-254">As the output from the example shows, the <xref:System.Char.GetNumericValue%28System.Char%29> method returns -1 if it is passed either a high surrogate or a low surrogate of this character.</span></span>  
  
 [!code-csharp[System.Char.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#2)]
 [!code-vb[System.Char.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-255">다음 예제에서는 <xref:System.Char.GetNumericValue%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-255">The following example demonstrates <xref:System.Char.GetNumericValue%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetNumericValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.char.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-256">
            <see cref="T:System.String" />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-256">A <see cref="T:System.String" />.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-257">
            <c>s</c>의 문자 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-257">The character position in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-258">지정된 문자열의 지정된 위치에 있는 숫자 형식의 유니코드 문자를 배정밀도 부동 소수점 숫자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-258">Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-259">문자가 숫자를 나타내는 경우에는 <paramref name="index" />의 <paramref name="s" /> 위치에 있는 문자의 숫자 값을 반환하고 그렇지 않은 경우에는 -1을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-259">The numeric value of the character at position <paramref name="index" /> in <paramref name="s" /> if that character represents a number; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-260">`s` 매개 변수는 숫자 값의 문자열 표현 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-260">The `s` parameter must be the string representation of a numeric value.</span></span> <span data-ttu-id="07cb0-261">예를 들어 경우 위치에 있는 문자가 `index` 에서 `s` "5"를 반환 값은 5입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-261">For example, if the character at position `index` in `s` is "5", the return value is 5.</span></span> <span data-ttu-id="07cb0-262">그러나 경우 위치에 있는 문자가 `index` 에서 `s` "z"는 반환 값은-1입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-262">However, if the character at position `index` in `s` is "z", the return value is -1.</span></span>  
  
 <span data-ttu-id="07cb0-263">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-263">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="07cb0-264">문자에 연결 된 숫자 값을 다음 중 하나의 멤버인 경우에 <xref:System.Globalization.UnicodeCategory> 범주: `DecimalDigitNumber`를 `LetterNumber`, 또는 `OtherNumber`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-264">A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.</span></span>  
  
 <span data-ttu-id="07cb0-265">경우는 <xref:System.Char> 위치에 있는 개체 `index` 유효한 서로게이트 쌍의 첫 번째 문자는 <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> 메서드는 서로게이트 쌍 숫자를 형성 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-265">If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit.</span></span> <span data-ttu-id="07cb0-266">예를 들어, U + 10107 ~ U + 10133 코드 포인트 번호 지정 시스템 Aegean 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-266">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="07cb0-267">다음 예제에서는 <xref:System.Char.ConvertFromUtf32%2A> 메서드 Aegean 각 숫자를 나타내는 문자열을 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-267">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents each Aegean number.</span></span> <span data-ttu-id="07cb0-268">예제에서 출력으로는 <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> 메서드 Aegean 숫자의 high surrogate 전달 되는 경우 올바른 숫자 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-268">As the output from the example shows, the <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> method returns the correct numeric value if it is passed the high surrogate of an Aegean number.</span></span> <span data-ttu-id="07cb0-269">그러나 low surrogate를 전달한 경우에 격리에서 low surrogate를 고려 하 고-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-269">However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.</span></span>  
  
 [!code-csharp[System.Char.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#3)]
 [!code-vb[System.Char.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-270">다음 코드 예제에서는 <xref:System.Char.GetNumericValue%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-270">The following code example demonstrates <xref:System.Char.GetNumericValue%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetNumericValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-271">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-271">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-272">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-272">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="char.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-273">
            <see cref="T:System.TypeCode" /> 값 형식에 대한 <see cref="T:System.Char" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-273">Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-274">열거형 상수인 <see cref="F:System.TypeCode.Char" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-274">The enumerated constant, <see cref="F:System.TypeCode.Char" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-275">유니코드 문자를 <see cref="T:System.Globalization.UnicodeCategory" /> 값 중 하나로 식별되는 그룹으로 분류합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-275">Categorizes a Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span>
          </span>
        </summary>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (c As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char c);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.char.GetUnicodeCategory c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-276">분류할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-276">The Unicode character to categorize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-277">지정한 유니코드 문자를 <see cref="T:System.Globalization.UnicodeCategory" /> 값 중 하나로 식별되는 그룹으로 분류합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-277">Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-278">
            <see cref="T:System.Globalization.UnicodeCategory" />가 포함된 그룹을 식별하는 <paramref name="c" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-278">A <see cref="T:System.Globalization.UnicodeCategory" /> value that identifies the group that contains <paramref name="c" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-279">합니다 <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> 메서드 반환 하지 않는 경우도 동일 <xref:System.Globalization.UnicodeCategory> 값을 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> 메서드가 특정 문자를 매개 변수로 전달 될 때입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-279">The <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method when it is passed a particular character as a parameter.</span></span> <span data-ttu-id="07cb0-280"><xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> 메서드는 유니코드 표준의 현재 버전을 반영 하도록 디자인 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-280">The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method is designed to reflect the current version of the Unicode standard.</span></span> <span data-ttu-id="07cb0-281">반면 하지만 <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> 메서드는 일반적으로 현재 버전의 유니코드 표준 반영, 이전 버전의 표준에 따라 문자 범주를 반환할 수 있습니다 또는 다른 범주를 순서 대로 현재 표준에서 반환할 수 있습니다 이전 버전과 호환성을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-281">In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility.</span></span> <span data-ttu-id="07cb0-282">사용 하는 권장 따라서 합니다 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> 메서드 대신 <xref:System.Char.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-282">As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method instead of <xref:System.Char.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="07cb0-283">로 시작 합니다 [!INCLUDE[net_v462](~/includes/net-v462-md.md)], 유니코드 문자 기반으로 분류 됩니다 [Unix 표준, 버전 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-283">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unix Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="07cb0-284">버전에서.NET Framework의는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 에 [!INCLUDE[net_v461](~/includes/net-v461-md.md)]를 기반으로 분류 된 [Unix 표준, 버전 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-284">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unix Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-285">다음 코드 예제에서는 <xref:System.Char.GetUnicodeCategory%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-285">The following code example demonstrates <xref:System.Char.GetUnicodeCategory%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetUnicodeCategory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.char.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-286">
            <see cref="T:System.String" />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-286">A <see cref="T:System.String" />.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-287">
            <c>s</c>의 문자 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-287">The character position in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-288">지정된 문자열의 지정된 위치에 있는 문자를 <see cref="T:System.Globalization.UnicodeCategory" /> 값 중 하나로 식별되는 그룹으로 분류합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-288">Categorizes the character at the specified position in a specified string into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-289">
            <see cref="T:System.Globalization.UnicodeCategory" />의 <paramref name="index" /> 위치에 있는 문자가 포함된 그룹을 식별하는 <paramref name="s" /> 열거형 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-289">A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the group that contains the character at position <paramref name="index" /> in <paramref name="s" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-290">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-290">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="07cb0-291">합니다 <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> 메서드 반환 하지 않는 경우도 동일 <xref:System.Globalization.UnicodeCategory> 값을 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> 메서드가 특정 문자를 매개 변수로 전달 될 때입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-291">The <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method when it is passed a particular character as a parameter.</span></span> <span data-ttu-id="07cb0-292"><xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> 메서드는 유니코드 표준의 현재 버전을 반영 하도록 디자인 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-292">The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method is designed to reflect the current version of the Unicode standard.</span></span> <span data-ttu-id="07cb0-293">반면 하지만 <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> 메서드는 일반적으로 현재 버전의 유니코드 표준 반영, 이전 버전의 표준에 따라 문자 범주를 반환할 수 있습니다 또는 다른 범주를 순서 대로 현재 표준에서 반환할 수 있습니다 이전 버전과 호환성을 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-293">In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility.</span></span> <span data-ttu-id="07cb0-294">사용 하는 권장 따라서 합니다 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> 메서드 대신 <xref:System.Char.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-294">As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method instead of <xref:System.Char.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="07cb0-295">로 시작 합니다 [!INCLUDE[net_v462](~/includes/net-v462-md.md)], 유니코드 문자 기반으로 분류 됩니다 [Unix 표준, 버전 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-295">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unix Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="07cb0-296">버전에서.NET Framework의는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 에 [!INCLUDE[net_v461](~/includes/net-v461-md.md)]를 기반으로 분류 된 [Unix 표준, 버전 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/)합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-296">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unix Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-297">다음 예제에서는 <xref:System.Char.GetUnicodeCategory%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-297">The following example demonstrates <xref:System.Char.GetUnicodeCategory%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetUnicodeCategory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-298">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-298">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-299">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-299">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsControl">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-300">유니코드 문자가 제어 문자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-300">Indicates whether a specified Unicode character is categorized as a control character.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-301">제어 문자는 서식 지정 및 ACK, BEL, CR, FF, LF 및 VT. 같은 다른 인쇄할 수 없는 문자</span><span class="sxs-lookup"><span data-stu-id="07cb0-301">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="07cb0-302">유니코드 표준 \U0000 \U001F, \U007F를 제어 문자를 \U009F를 \U0080 코드 포인트를 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-302">The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="07cb0-303">유니코드 표준에 따라 이러한 값은 용도 그렇지 않으면 응용 프로그램에서 정의 하지 않으면 컨트롤 문자로 해석 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-303">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="07cb0-304">유효한 제어 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-304">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(char c);" />
      <MemberSignature Language="F#" Value="static member IsControl : char -&gt; bool" Usage="System.char.IsControl c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-305">평가할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-305">The Unicode character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-306">지정된 유니코드 문자가 제어 문자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-306">Indicates whether the specified Unicode character is categorized as a control character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-307">
            <paramref name="c" />가 제어 문자이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-307">
              <see langword="true" /> if <paramref name="c" /> is a control character; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-308">제어 문자는 서식 지정 및 ACK, BEL, CR, FF, LF 및 VT. 같은 다른 인쇄할 수 없는 문자</span><span class="sxs-lookup"><span data-stu-id="07cb0-308">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="07cb0-309">T의 유니코드 표준 \U0000 \U001F, \U007F를 제어 문자를 \U009F를 \U0080 코드 포인트를 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-309">T The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="07cb0-310">유니코드 표준에 따라 이러한 값은 용도 그렇지 않으면 응용 프로그램에서 정의 하지 않으면 컨트롤 문자로 해석 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-310">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="07cb0-311">유효한 제어 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-311">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-312">다음 예제에서는 각 제어 문자의 유니코드 코드 포인트를 나열합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-312">The following example lists the Unicode code point of each of the control characters.</span></span>  
  
 [!code-cpp[System.Char.IsControl#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol1.cpp#1)]
 [!code-csharp[System.Char.IsControl#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl1.cs#1)]
 [!code-vb[System.Char.IsControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsControl : string * int -&gt; bool" Usage="System.char.IsControl (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-313">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-313">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-314">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-314">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-315">지정된 문자열의 지정된 위치에 있는 문자가 제어 문자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-315">Indicates whether the character at the specified position in a specified string is categorized as a control character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-316">
            <paramref name="index" />의 <paramref name="s" /> 위치에 있는 문자가 제어 문자이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-316">
              <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a control character; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-317">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-317">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="07cb0-318">제어 문자는 서식 지정 및 ACK, BEL, CR, FF, LF 및 VT. 같은 다른 인쇄할 수 없는 문자</span><span class="sxs-lookup"><span data-stu-id="07cb0-318">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="07cb0-319">유니코드 표준 \U0000 \U001F, \U007F를 제어 문자를 \U009F를 \U0080 코드 포인트를 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-319">The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="07cb0-320">유니코드 표준에 따라 이러한 값은 용도 그렇지 않으면 응용 프로그램에서 정의 하지 않으면 컨트롤 문자로 해석 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-320">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="07cb0-321">유효한 제어 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-321">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-322">다음 예제에서는 문자열의 문자를 열거 하 고 제어 문자가 포함 되어 있는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-322">The following example enumerates the characters in a string and determines whether any are control characters.</span></span>  
  
 [!code-cpp[System.Char.IsControl#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol2.cpp#2)]
 [!code-csharp[System.Char.IsControl#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl2.cs#2)]
 [!code-vb[System.Char.IsControl#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-323">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-323">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-324">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-324">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-325">유니코드 문자가 10진수인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-325">Indicates whether a Unicode character is categorized as a decimal digit.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-326">올바른 숫자의 멤버인는 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-326">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(char c);" />
      <MemberSignature Language="F#" Value="static member IsDigit : char -&gt; bool" Usage="System.char.IsDigit c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-327">평가할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-327">The Unicode character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-328">유니코드 문자가 10진수인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-328">Indicates whether the specified Unicode character is categorized as a decimal digit.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-329">
            <paramref name="c" />가 10진수이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-329">
              <see langword="true" /> if <paramref name="c" /> is a decimal digit; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-330">이 메서드를 확인 하는지 여부를 <xref:System.Char> 는 기 수 10 진수입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-330">This method determines whether a <xref:System.Char> is a radix-10 digit.</span></span> <span data-ttu-id="07cb0-331">이와 달리 <xref:System.Char.IsNumber%2A>를 결정 하는 여부를 `Char` 숫자 유니코드 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-331">This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a `Char` is of any numeric Unicode category.</span></span> <span data-ttu-id="07cb0-332">숫자에 분수, 아래 첨자, 위 첨자, 로마 숫자, 통화 분자, 원된 숫자 및 스크립트의 특정 숫자와 같은 문자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-332">Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</span></span>  
  
 <span data-ttu-id="07cb0-333">올바른 숫자의 멤버인는 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-333">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-334">다음 코드 예제에서는 <xref:System.Char.IsDigit%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-334">The following code example demonstrates <xref:System.Char.IsDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsDigit#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsDigit/CPP/isdigit.cpp#4)]
 [!code-csharp[System.Char.IsDigit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsDigit/CS/isdigit.cs#4)]
 [!code-vb[System.Char.IsDigit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsDigit/VB/isdigit.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsDigit : string * int -&gt; bool" Usage="System.char.IsDigit (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-335">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-335">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-336">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-336">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-337">지정된 문자열의 지정된 위치에 있는 문자가 10진수인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-337">Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-338">
            <see langword="true" />의 <paramref name="index" /> 위치에 있는 문자가 10진수이면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-338">
              <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a decimal digit; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-339">이 메서드를 확인 하는지 여부를 <xref:System.Char> 는 기 수 10 진수입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-339">This method determines whether a <xref:System.Char> is a radix-10 digit.</span></span> <span data-ttu-id="07cb0-340">이와 달리 <xref:System.Char.IsNumber%2A>를 결정 하는 여부를 <xref:System.Char> 숫자 유니코드 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-340">This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="07cb0-341">숫자에 분수, 아래 첨자, 위 첨자, 로마 숫자, 통화 분자, 원된 숫자 및 스크립트의 특정 숫자와 같은 문자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-341">Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</span></span>  
  
 <span data-ttu-id="07cb0-342">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-342">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="07cb0-343">올바른 숫자의 멤버인는 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-343">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-344">다음 코드 예제에서는 <xref:System.Char.IsDigit%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-344">The following code example demonstrates <xref:System.Char.IsDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsDigit#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsDigit/CPP/isdigit.cpp#4)]
 [!code-csharp[System.Char.IsDigit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsDigit/CS/isdigit.cs#4)]
 [!code-vb[System.Char.IsDigit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsDigit/VB/isdigit.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-345">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-345">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-346">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-346">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsHighSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-347">지정한 <see cref="T:System.Char" /> 개체가 high surrogate인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-347">Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHighSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHighSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsHighSurrogate : char -&gt; bool" Usage="System.char.IsHighSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-348">평가할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-348">The Unicode character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-349">지정한 <see cref="T:System.Char" /> 개체가 high surrogate인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-349">Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-350">
            <paramref name="c" /> 매개 변수의 숫자 값이 U+D800부터 U+DBFF까지의 범위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-350">
              <see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-351">16 비트 코드 포인트를 사용 하 여 단일 문자를 나타낼 뿐 아니라는 표시할 문자를 추상화할 수 있도록 utf-16 인코딩을 서로게이트 쌍으로 알려진 두 개의 16 비트 코드 포인트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-351">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="07cb0-352">이 쌍의 첫 번째 요소는 high surrogate입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-352">The first element in this pair is the high surrogate.</span></span> <span data-ttu-id="07cb0-353">해당 코드 포인트가 u+d800부터 U + dbff 범위 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-353">Its code point can range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="07cb0-354">개별 서로게이트에 자체; 해석이 없습니다. 이 옵션은 서로게이트 쌍의 일부로 사용 되는 경우에 의미가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-354">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-355">다음 코드 예제는 <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, 및 <xref:System.Char.IsSurrogatePair%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-355">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHighSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHighSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsHighSurrogate : string * int -&gt; bool" Usage="System.char.IsHighSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-356">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-356">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-357">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-357">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-358">문자열의 지정한 위치에 있는 <see cref="T:System.Char" /> 개체가 high surrogate인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-358">Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a high surrogate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-359">
            <paramref name="s" /> 매개 변수에 있는 지정한 문자의 숫자 값이 U+D800부터 U+DBFF까지의 범위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-359">
              <see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-360">`index` 매개 변수는 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-360">The `index` parameter is zero-based.</span></span>  
  
 <span data-ttu-id="07cb0-361">16 비트 코드 포인트를 사용 하 여 단일 문자를 나타낼 뿐 아니라는 표시할 문자를 추상화할 수 있도록 utf-16 인코딩을 서로게이트 쌍으로 알려진 두 개의 16 비트 코드 포인트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-361">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="07cb0-362">이 쌍의 첫 번째 요소는 high surrogate입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-362">The first element in this pair is the high surrogate.</span></span> <span data-ttu-id="07cb0-363">해당 코드 포인트가 u+d800부터 U + dbff 범위 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-363">Its code point can range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="07cb0-364">개별 서로게이트에 자체; 해석이 없습니다. 이 옵션은 서로게이트 쌍의 일부로 사용 되는 경우에 의미가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-364">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-365">다음 코드 예제는 <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, 및 <xref:System.Char.IsSurrogatePair%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-365">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-366">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-366">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-367">
            <paramref name="index" />가 <paramref name="s" /> 내의 위치가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-367">
              <paramref name="index" /> is not a position within <paramref name="s" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetter">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-368">유니코드 문자가 유니코드 글자로 분류되는지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-368">Indicates whether a Unicode character is categorized as a Unicode letter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-369">이 메서드를 확인 하는지 여부를 <xref:System.Char> 유니코드 문자 범주에 멤버인입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-369">This method determines whether a <xref:System.Char> is a member of any category of Unicode letter.</span></span> <span data-ttu-id="07cb0-370">유니코드 문자는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-370">Unicode letters include the following:</span></span>  
  
-   <span data-ttu-id="07cb0-371">U+0041 (LATIN CAPITAL LETTER A) U + 005A 통해 같은 대문자 (LATIN CAPITAL LETTER Z), 또는 (u+0400 (키릴 자모 대문자 IE WITH GRAVE) U + 042F (키릴 자모 대문자 맞지)를 통해.</span><span class="sxs-lookup"><span data-stu-id="07cb0-371">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="07cb0-372">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-372">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="07cb0-373">단어로 (라틴어 소문자 A) U + 007A 통해 같은 소문자 (라틴 문자 작은 문자 Z), 또는 U + 03AC (그리스어 작은 문자 알파와 TONOS) U + 03CE 통해 (그리스어 작은 문자 오메가와 TONOS).</span><span class="sxs-lookup"><span data-stu-id="07cb0-373">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="07cb0-374">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-374">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="07cb0-375">대 문자와 소문자, U + 01 C 5와 같은 (LATIN CAPITAL LETTER D 사용 하 여 작은 문자 Z와 CARON) 또는 U + 1FFC 제목 (그리스어 대문자 오메가와 PROSGEGRAMMENI).</span><span class="sxs-lookup"><span data-stu-id="07cb0-375">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="07cb0-376">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-376">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="07cb0-377">U + 02B0 같은 한정자 (한정자 문자 작은 H) U + 02C 1 (한정자 문자 반대로 GLOTTAL 중지)를 통해 또는 U + 1D2C (한정자 문자 대문자 A) U + 1D 61 (한정자 문자 작은 카이)를 통해.</span><span class="sxs-lookup"><span data-stu-id="07cb0-377">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="07cb0-378">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-378">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="07cb0-379">U + 05 D 0 (히브리어 문자 ALEF) ~ U + 05EA 등의 다른 문자 (히브리어 문자 TAV), U + 0621 (아랍어 문자 HAMZA) U + 063A 통해 (아랍어 문자 GHAIN) 또는 U + 4E00 (\<한 중일 한자, 첫 번째 >) U + 9 FC 3 통해 (\<한 중일 한자, 마지막 >)입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-379">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="07cb0-380">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-380">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(char c);" />
      <MemberSignature Language="F#" Value="static member IsLetter : char -&gt; bool" Usage="System.char.IsLetter c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-381">평가할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-381">The Unicode character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-382">지정된 유니코드 문자가 유니코드 글자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-382">Indicates whether the specified Unicode character is categorized as a Unicode letter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-383">
            <see langword="true" />가 글자이면 <paramref name="c" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-383">
              <see langword="true" /> if <paramref name="c" /> is a letter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-384">이 메서드를 확인 하는지 여부를 <xref:System.Char> 유니코드 문자 범주에 멤버인입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-384">This method determines whether a <xref:System.Char> is a member of any category of Unicode letter.</span></span> <span data-ttu-id="07cb0-385">유니코드 문자는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-385">Unicode letters include the following:</span></span>  
  
-   <span data-ttu-id="07cb0-386">U+0041 (LATIN CAPITAL LETTER A) U + 005A 통해 같은 대문자 (LATIN CAPITAL LETTER Z), 또는 (u+0400 (키릴 자모 대문자 IE WITH GRAVE) U + 042F (키릴 자모 대문자 맞지)를 통해.</span><span class="sxs-lookup"><span data-stu-id="07cb0-386">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="07cb0-387">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-387">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="07cb0-388">단어로 (라틴어 소문자 A) U + 007A 통해 같은 소문자 (라틴 문자 작은 문자 Z), 또는 U + 03AC (그리스어 작은 문자 알파와 TONOS) U + 03CE 통해 (그리스어 작은 문자 오메가와 TONOS).</span><span class="sxs-lookup"><span data-stu-id="07cb0-388">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="07cb0-389">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-389">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="07cb0-390">대 문자와 소문자, U + 01 C 5와 같은 (LATIN CAPITAL LETTER D 사용 하 여 작은 문자 Z와 CARON) 또는 U + 1FFC 제목 (그리스어 대문자 오메가와 PROSGEGRAMMENI).</span><span class="sxs-lookup"><span data-stu-id="07cb0-390">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="07cb0-391">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-391">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="07cb0-392">U + 02B0 같은 한정자 (한정자 문자 작은 H) U + 02C 1 (한정자 문자 반대로 GLOTTAL 중지)를 통해 또는 U + 1D2C (한정자 문자 대문자 A) U + 1D 61 (한정자 문자 작은 카이)를 통해.</span><span class="sxs-lookup"><span data-stu-id="07cb0-392">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="07cb0-393">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-393">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="07cb0-394">U + 05 D 0 (히브리어 문자 ALEF) ~ U + 05EA 등의 다른 문자 (히브리어 문자 TAV), U + 0621 (아랍어 문자 HAMZA) U + 063A 통해 (아랍어 문자 GHAIN) 또는 U + 4E00 (\<한 중일 한자, 첫 번째 >) U + 9 FC 3 통해 (\<한 중일 한자, 마지막 >)입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-394">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="07cb0-395">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-395">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-396">다음 코드 예제에서는 <xref:System.Char.IsLetter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-396">The following code example demonstrates <xref:System.Char.IsLetter%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLetter : string * int -&gt; bool" Usage="System.char.IsLetter (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-397">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-397">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-398">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-398">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-399">지정된 문자열의 지정된 위치에 있는 문자가 유니코드 글자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-399">Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-400">
            <paramref name="index" />의 <paramref name="s" /> 위치에 있는 문자가 글자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-400">
              <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-401">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-401">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="07cb0-402">이 메서드는 문자열의 지정한 인덱스 위치에 있는 문자가 유니코드 문자 범주의 멤버 인지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-402">This method determines whether the character at a specified index position in a string is a member of any category of Unicode letter.</span></span> <span data-ttu-id="07cb0-403">유니코드 문자는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-403">Unicode letters include the following:</span></span>  
  
-   <span data-ttu-id="07cb0-404">U+0041 (LATIN CAPITAL LETTER A) U + 005A 통해 같은 대문자 (LATIN CAPITAL LETTER Z), 또는 (u+0400 (키릴 자모 대문자 IE WITH GRAVE) U + 042F (키릴 자모 대문자 맞지)를 통해.</span><span class="sxs-lookup"><span data-stu-id="07cb0-404">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="07cb0-405">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-405">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="07cb0-406">단어로 (라틴어 소문자 A) U + 007A 통해 같은 소문자 (라틴 문자 작은 문자 Z), 또는 U + 03AC (그리스어 작은 문자 알파와 TONOS) U + 03CE 통해 (그리스어 작은 문자 오메가와 TONOS).</span><span class="sxs-lookup"><span data-stu-id="07cb0-406">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="07cb0-407">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-407">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="07cb0-408">대 문자와 소문자, U + 01 C 5와 같은 (LATIN CAPITAL LETTER D 사용 하 여 작은 문자 Z와 CARON) 또는 U + 1FFC 제목 (그리스어 대문자 오메가와 PROSGEGRAMMENI).</span><span class="sxs-lookup"><span data-stu-id="07cb0-408">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="07cb0-409">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-409">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="07cb0-410">U + 02B0 같은 한정자 (한정자 문자 작은 H) U + 02C 1 (한정자 문자 반대로 GLOTTAL 중지)를 통해 또는 U + 1D2C (한정자 문자 대문자 A) U + 1D 61 (한정자 문자 작은 카이)를 통해.</span><span class="sxs-lookup"><span data-stu-id="07cb0-410">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="07cb0-411">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-411">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="07cb0-412">U + 05 D 0 (히브리어 문자 ALEF) ~ U + 05EA 등의 다른 문자 (히브리어 문자 TAV), U + 0621 (아랍어 문자 HAMZA) U + 063A 통해 (아랍어 문자 GHAIN) 또는 U + 4E00 (\<한 중일 한자, 첫 번째 >) U + 9 FC 3 통해 (\<한 중일 한자, 마지막 >)입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-412">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="07cb0-413">이러한 문자는의 멤버는 <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-413">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-414">다음 코드 예제에서는 <xref:System.Char.IsLetter%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-414">The following code example demonstrates <xref:System.Char.IsLetter%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-415">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-415">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-416">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-416">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetterOrDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-417">유니코드 문자가 글자나 10진수인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-417">Indicates whether a Unicode character is categorized as a letter or a decimal digit.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-418">유효한 문자 및 10 진수 숫자는 다음 범주 중 멤버 <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`를 `ModifierLetter`를 `OtherLetter`, 또는 `DecimalDigitNumber`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-418">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(char c);" />
      <MemberSignature Language="F#" Value="static member IsLetterOrDigit : char -&gt; bool" Usage="System.char.IsLetterOrDigit c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-419">평가할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-419">The Unicode character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-420">지정된 유니코드 문자가 글자나 10진수인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-420">Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-421">
            <see langword="true" />가 글자나 10진수이면 <paramref name="c" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-421">
              <see langword="true" /> if <paramref name="c" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-422">유효한 문자 및 10 진수 숫자는 다음 범주 중 멤버 <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`를 `ModifierLetter`를 `OtherLetter`, 또는 `DecimalDigitNumber`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-422">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-423">다음 코드 예제에서는 <xref:System.Char.IsLetterOrDigit%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-423">The following code example demonstrates <xref:System.Char.IsLetterOrDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetterOrDigit#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLetterOrDigit : string * int -&gt; bool" Usage="System.char.IsLetterOrDigit (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-424">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-424">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-425">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-425">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-426">지정된 문자열의 지정된 위치에 있는 문자가 글자나 10진수인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-426">Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-427">
            <see langword="true" />의 <paramref name="index" /> 위치에 있는 문자가 글자나 10진수이면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-427">
              <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-428">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-428">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="07cb0-429">유효한 문자 및 10 진수 숫자는 다음 범주 중 멤버 <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`를 `ModifierLetter`를 `OtherLetter`, 또는 `DecimalDigitNumber`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-429">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-430">다음 코드 예제에서는 <xref:System.Char.IsLetterOrDigit%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-430">The following code example demonstrates <xref:System.Char.IsLetterOrDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetterOrDigit#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-431">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-431">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-432">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-432">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-433">유니코드 문자가 소문자 자모인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-433">Indicates whether a Unicode character is categorized as a lowercase letter.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(char c);" />
      <MemberSignature Language="F#" Value="static member IsLower : char -&gt; bool" Usage="System.char.IsLower c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-434">평가할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-434">The Unicode character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-435">유니코드 문자가 소문자 자모인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-435">Indicates whether the specified Unicode character is categorized as a lowercase letter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-436">
            <see langword="true" />가 소문자이면 <paramref name="c" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-436">
              <see langword="true" /> if <paramref name="c" /> is a lowercase letter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-437">유효한 소문자 다음 범주의 멤버인 <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-437">Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-438">다음 코드 예제에서는 <xref:System.Char.IsLower%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-438">The following code example demonstrates <xref:System.Char.IsLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLower#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLower : string * int -&gt; bool" Usage="System.char.IsLower (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-439">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-439">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-440">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-440">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-441">지정된 문자열의 지정된 위치에 있는 자모가 소문자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-441">Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-442">
            <see langword="true" />의 <paramref name="index" /> 위치에 있는 문자가 소문자이면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-442">
              <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a lowercase letter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-443">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-443">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="07cb0-444">유효한 소문자 다음 범주의 멤버인 <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-444">Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-445">다음 코드 예제에서는 <xref:System.Char.IsLower%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-445">The following code example demonstrates <xref:System.Char.IsLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLower#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-446">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-446">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-447">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-447">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLowSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-448">지정한 <see cref="T:System.Char" /> 개체가 high surrogate인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-448">Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLowSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLowSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsLowSurrogate : char -&gt; bool" Usage="System.char.IsLowSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-449">확인할 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-449">The character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-450">지정한 <see cref="T:System.Char" /> 개체가 high surrogate인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-450">Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-451">
            <paramref name="c" /> 매개 변수의 숫자 값이 U+DC00부터 U+DFFF까지의 범위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-451">
              <see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-452">16 비트 코드 포인트를 사용 하 여 단일 문자를 나타낼 뿐 아니라는 표시할 문자를 추상화할 수 있도록 utf-16 인코딩을 서로게이트 쌍으로 알려진 두 개의 16 비트 코드 포인트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-452">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="07cb0-453">이 쌍의 두 번째 요소는 low surrogate입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-453">The second element in this pair is the low surrogate.</span></span> <span data-ttu-id="07cb0-454">해당 코드 포인트가 u+dc00에서 U + dfff 까지입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-454">Its code point can range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="07cb0-455">개별 서로게이트에 자체; 해석이 없습니다. 이 옵션은 서로게이트 쌍의 일부로 사용 되는 경우에 의미가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-455">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-456">다음 코드 예제는 <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, 및 <xref:System.Char.IsSurrogatePair%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-456">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLowSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLowSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLowSurrogate : string * int -&gt; bool" Usage="System.char.IsLowSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-457">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-457">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-458">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-458">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-459">문자열의 지정한 위치에 있는 <see cref="T:System.Char" /> 개체가 high surrogate인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-459">Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a low surrogate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-460">
            <see langword="true" /> 매개 변수에 지정된 문자의 숫자 값이 U+DC00부터 U+DFFF까지의 범위에 있으면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-460">
              <see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-461">`index` 매개 변수는 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-461">The `index` parameter is zero-based.</span></span>  
  
 <span data-ttu-id="07cb0-462">16 비트 코드 포인트를 사용 하 여 단일 문자를 나타낼 뿐 아니라는 표시할 문자를 추상화할 수 있도록 utf-16 인코딩을 서로게이트 쌍으로 알려진 두 개의 16 비트 코드 포인트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-462">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="07cb0-463">이 쌍의 두 번째 요소는 low surrogate입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-463">The second element in this pair is the low surrogate.</span></span> <span data-ttu-id="07cb0-464">해당 코드 포인트가 u+dc00에서 U + dfff 까지입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-464">Its code point can range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="07cb0-465">개별 서로게이트에 자체; 해석이 없습니다. 이 옵션은 서로게이트 쌍의 일부로 사용 되는 경우에 의미가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-465">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-466">다음 코드 예제는 <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, 및 <xref:System.Char.IsSurrogatePair%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-466">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-467">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-467">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-468">
            <paramref name="index" />가 <paramref name="s" /> 내의 위치가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-468">
              <paramref name="index" /> is not a position within <paramref name="s" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsNumber">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-469">유니코드 문자가 숫자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-469">Indicates whether a Unicode character is categorized as a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(char c);" />
      <MemberSignature Language="F#" Value="static member IsNumber : char -&gt; bool" Usage="System.char.IsNumber c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-470">평가할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-470">The Unicode character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-471">지정된 유니코드 문자가 숫자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-471">Indicates whether the specified Unicode character is categorized as a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-472">
            <paramref name="c" />가 숫자이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-472">
              <see langword="true" /> if <paramref name="c" /> is a number; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-473">이 메서드를 확인 하는지 여부를 <xref:System.Char> 숫자 유니코드 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-473">This method determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="07cb0-474">숫자를 포함 하는 것 외에도 숫자 문자, 분수, 아래 첨자, 위 첨자, 로마 숫자, 통화 분자 및 원된 숫자를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-474">In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers.</span></span> <span data-ttu-id="07cb0-475">반대 되는이 메서드는 <xref:System.Char.IsDigit%2A> 메서드를 결정 하는 여부를 <xref:System.Char> 는 기 수 10 진수입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-475">This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="07cb0-476"><xref:System.Char.IsNumber%28System.Char%29> 문자열 (예를 들어, 메서드 호출 하 여 문자열의 각 문자에 대 한)의 숫자 구성 하는지 여부를 확인 하려면 메서드는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-476">The <xref:System.Char.IsNumber%28System.Char%29> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string).</span></span> <span data-ttu-id="07cb0-477">문자열을 숫자 문자로 구성 되어 있는지 여부를 결정할 오버 로드 중 하나를 호출 합니다 `TryParse` 메서드 (같은 <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> 또는 <xref:System.Double.TryParse%2A?displayProperty=nameWithType> 정수 계열 또는 부동 소수점 형식의 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-477">To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> or <xref:System.Double.TryParse%2A?displayProperty=nameWithType> of an integral or floating point type.</span></span>  
  
 <span data-ttu-id="07cb0-478">유효한 숫자의 멤버인 합니다 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, 또는 <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-478">Valid numbers are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, or <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> category.</span></span>  
  
 <span data-ttu-id="07cb0-479">합니다 <xref:System.Char.IsNumber%28System.Char%29> 가정 메서드 `c` 단일 언어 문자에 해당 하며 문자가 숫자를 나타내는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-479">The <xref:System.Char.IsNumber%28System.Char%29> method assumes that `c` corresponds to a single linguistic character and checks whether that character represents a number.</span></span> <span data-ttu-id="07cb0-480">그러나 유니코드 표준의 일부 숫자 두 인용 부호로 표시 되는 <xref:System.Char> 서로게이트 쌍을 형성 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-480">However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair.</span></span> <span data-ttu-id="07cb0-481">예를 들어, U + 10107 ~ U + 10133 코드 포인트 번호 지정 시스템 Aegean 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-481">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="07cb0-482">다음 예제에서는 <xref:System.Char.ConvertFromUtf32%2A> 메서드 AEGEAN 숫자 1을 나타내는 문자열을 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-482">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="07cb0-483">예제에서 출력으로는 <xref:System.Char.IsNumber%28System.Char%29> 메서드가 반환 되는 `false` 경우 상위 서로게이트 또는 하위 서로게이트 문자의이 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-483">As the output from the example shows, the <xref:System.Char.IsNumber%28System.Char%29> method returns `false` if it is passed either a high surrogate or a low surrogate of this character.</span></span>  
  
 [!code-csharp[System.Char.IsNumber#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#1)]
 [!code-vb[System.Char.IsNumber#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-484">다음 예제에서는 <xref:System.Char.IsNumber%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-484">The following example demonstrates <xref:System.Char.IsNumber%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsNumber#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsNumber : string * int -&gt; bool" Usage="System.char.IsNumber (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-485">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-485">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-486">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-486">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-487">지정된 문자열의 지정된 위치에 있는 문자가 숫자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-487">Indicates whether the character at the specified position in a specified string is categorized as a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-488">
            <paramref name="index" />의 <paramref name="s" /> 위치에 있는 문자가 숫자이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-488">
              <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a number; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-489">이 메서드를 확인 하는지 여부를 <xref:System.Char> 숫자 유니코드 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-489">This method determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="07cb0-490">숫자를 포함 하는 것 외에도 숫자 문자, 분수, 아래 첨자, 위 첨자, 로마 숫자, 통화 분자 및 원된 숫자를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-490">In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers.</span></span> <span data-ttu-id="07cb0-491">반대 되는이 메서드는 <xref:System.Char.IsDigit%2A> 메서드를 결정 하는 여부를 <xref:System.Char> 는 기 수 10 진수입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-491">This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.</span></span>  
  
 <span data-ttu-id="07cb0-492">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-492">Character positions in a string are indexed starting from zero.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="07cb0-493"><xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> 문자열 (예를 들어, 메서드 호출 하 여 문자열의 각 문자에 대 한)의 숫자 구성 하는지 여부를 확인 하려면 메서드는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-493">The <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string).</span></span> <span data-ttu-id="07cb0-494">문자열을 숫자 문자로 구성 되어 있는지 여부를 결정할 오버 로드 중 하나를 호출 합니다 `TryParse` 메서드 (같은 <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> 또는 <xref:System.Double.TryParse%2A?displayProperty=nameWithType> 정수 계열 또는 부동 소수점 형식의 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-494">To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> or <xref:System.Double.TryParse%2A?displayProperty=nameWithType> of an integral or floating point type.</span></span>  
  
 <span data-ttu-id="07cb0-495">유효한 숫자의 멤버인 합니다 <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, 또는 <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-495">Valid numbers are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, or <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> category.</span></span>  
  
 <span data-ttu-id="07cb0-496">경우는 <xref:System.Char> 위치에 있는 개체 `index` 유효한 서로게이트 쌍의 첫 번째 문자는 <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> 메서드는 서로게이트 쌍 숫자를 형성 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-496">If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit.</span></span> <span data-ttu-id="07cb0-497">예를 들어, U + 10107 ~ U + 10133 코드 포인트 번호 지정 시스템 Aegean 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-497">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="07cb0-498">다음 예제에서는 <xref:System.Char.ConvertFromUtf32%2A> 메서드 AEGEAN 숫자 1을 나타내는 문자열을 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-498">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="07cb0-499">예제에서 출력으로는 <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> 메서드가 반환 되는 `true` high surrogate AEGEAN 숫자 1의 전달 된 경우.</span><span class="sxs-lookup"><span data-stu-id="07cb0-499">As the output from the example shows, the <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method returns `true` if it is passed the high surrogate of AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="07cb0-500">그러나 low surrogate를 전달한 경우에 하위 서로게이트의 범주를 고려 하 고 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-500">However, if it is passed the low surrogate, it considers only the category of the low surrogate and returns `false`.</span></span>  
  
 [!code-csharp[System.Char.IsNumber#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#2)]
 [!code-vb[System.Char.IsNumber#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-501">다음 예제에서는 <xref:System.Char.IsNumber%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-501">The following example demonstrates <xref:System.Char.IsNumber%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsNumber#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-502">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-502">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-503">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-503">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPunctuation">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-504">유니코드 문자가 문장 부호인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-504">Indicates whether a Unicode character is categorized as a punctuation mark.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-505">유효한 문장에는 다음 범주 중 멤버인 <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, 또는 `OtherPunctuation`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-505">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="07cb0-506">다음 표에 나열 된 유니코드 코드 포인트를 사용 하 여 문자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-506">They include characters with the Unicode code points listed in the following table.</span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="07cb0-507">(U+0021 U + 00-23에</span><span class="sxs-lookup"><span data-stu-id="07cb0-507">U+0021 to U+0023</span></span>|<span data-ttu-id="07cb0-508">U + 060 C와 U + 060 D</span><span class="sxs-lookup"><span data-stu-id="07cb0-508">U+060C and U+060D</span></span>|<span data-ttu-id="07cb0-509">U + 180A에 U + 1800</span><span class="sxs-lookup"><span data-stu-id="07cb0-509">U+1800 to U+180A</span></span>|<span data-ttu-id="07cb0-510">U + U + 301F 3014</span><span class="sxs-lookup"><span data-stu-id="07cb0-510">U+3014 to U+301F</span></span>|  
|<span data-ttu-id="07cb0-511">U + U + 002A에 0025</span><span class="sxs-lookup"><span data-stu-id="07cb0-511">U+0025 to U+002A</span></span>|<span data-ttu-id="07cb0-512">U+061B</span><span class="sxs-lookup"><span data-stu-id="07cb0-512">U+061B</span></span>|<span data-ttu-id="07cb0-513">U + 1944 및 U + 1945</span><span class="sxs-lookup"><span data-stu-id="07cb0-513">U+1944 and U+1945</span></span>|<span data-ttu-id="07cb0-514">U + 3030</span><span class="sxs-lookup"><span data-stu-id="07cb0-514">U+3030</span></span>|  
|<span data-ttu-id="07cb0-515">U + 002F에 U + 002 C</span><span class="sxs-lookup"><span data-stu-id="07cb0-515">U+002C to U+002F</span></span>|<span data-ttu-id="07cb0-516">U + 061E 및 U + 061F</span><span class="sxs-lookup"><span data-stu-id="07cb0-516">U+061E and U+061F</span></span>|<span data-ttu-id="07cb0-517">U + 19DE 및 U + 19DF</span><span class="sxs-lookup"><span data-stu-id="07cb0-517">U+19DE and U+19DF</span></span>|<span data-ttu-id="07cb0-518">U + 303D</span><span class="sxs-lookup"><span data-stu-id="07cb0-518">U+303D</span></span>|  
|<span data-ttu-id="07cb0-519">U + 003A 및 U + 003B</span><span class="sxs-lookup"><span data-stu-id="07cb0-519">U+003A and U+003B</span></span>|<span data-ttu-id="07cb0-520">U + 066 d U + 066A</span><span class="sxs-lookup"><span data-stu-id="07cb0-520">U+066A to U+066D</span></span>|<span data-ttu-id="07cb0-521">U + 1A1E 및 U + 1A1F</span><span class="sxs-lookup"><span data-stu-id="07cb0-521">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="07cb0-522">U + 30A0</span><span class="sxs-lookup"><span data-stu-id="07cb0-522">U+30A0</span></span>|  
|<span data-ttu-id="07cb0-523">U + 003F 및 U + 0040</span><span class="sxs-lookup"><span data-stu-id="07cb0-523">U+003F and U+0040</span></span>|<span data-ttu-id="07cb0-524">U+06D4</span><span class="sxs-lookup"><span data-stu-id="07cb0-524">U+06D4</span></span>|<span data-ttu-id="07cb0-525">U + U + 1B60 1B5A</span><span class="sxs-lookup"><span data-stu-id="07cb0-525">U+1B5A to U+1B60</span></span>|<span data-ttu-id="07cb0-526">U + 30FB</span><span class="sxs-lookup"><span data-stu-id="07cb0-526">U+30FB</span></span>|  
|<span data-ttu-id="07cb0-527">U + 005 d U + 005B</span><span class="sxs-lookup"><span data-stu-id="07cb0-527">U+005B to U+005D</span></span>|<span data-ttu-id="07cb0-528">U + 070 d U + 0700</span><span class="sxs-lookup"><span data-stu-id="07cb0-528">U+0700 to U+070D</span></span>|<span data-ttu-id="07cb0-529">U + U + 2027 2010</span><span class="sxs-lookup"><span data-stu-id="07cb0-529">U+2010 to U+2027</span></span>|<span data-ttu-id="07cb0-530">U + A874 U + A877를</span><span class="sxs-lookup"><span data-stu-id="07cb0-530">U+A874 to U+A877</span></span>|  
|<span data-ttu-id="07cb0-531">U+005F</span><span class="sxs-lookup"><span data-stu-id="07cb0-531">U+005F</span></span>|<span data-ttu-id="07cb0-532">U + U + 07F9 07F7</span><span class="sxs-lookup"><span data-stu-id="07cb0-532">U+07F7 to U+07F9</span></span>|<span data-ttu-id="07cb0-533">U+2030 U + 2043</span><span class="sxs-lookup"><span data-stu-id="07cb0-533">U+2030 to U+2043</span></span>|<span data-ttu-id="07cb0-534">U + FD3E 및 U + FD3F</span><span class="sxs-lookup"><span data-stu-id="07cb0-534">U+FD3E and U+FD3F</span></span>|  
|<span data-ttu-id="07cb0-535">U + 007B</span><span class="sxs-lookup"><span data-stu-id="07cb0-535">U+007B</span></span>|<span data-ttu-id="07cb0-536">U + 0964 및 U + 0965</span><span class="sxs-lookup"><span data-stu-id="07cb0-536">U+0964 and U+0965</span></span>|<span data-ttu-id="07cb0-537">U + U + 2051 2045</span><span class="sxs-lookup"><span data-stu-id="07cb0-537">U+2045 to U+2051</span></span>|<span data-ttu-id="07cb0-538">(U+fe10 U + FE19를</span><span class="sxs-lookup"><span data-stu-id="07cb0-538">U+FE10 to U+FE19</span></span>|  
|<span data-ttu-id="07cb0-539">U + 007 D</span><span class="sxs-lookup"><span data-stu-id="07cb0-539">U+007D</span></span>|<span data-ttu-id="07cb0-540">U+0970</span><span class="sxs-lookup"><span data-stu-id="07cb0-540">U+0970</span></span>|<span data-ttu-id="07cb0-541">U + U + 205E 2053</span><span class="sxs-lookup"><span data-stu-id="07cb0-541">U+2053 to U+205E</span></span>|<span data-ttu-id="07cb0-542">(U+fe30 U + FE52를</span><span class="sxs-lookup"><span data-stu-id="07cb0-542">U+FE30 to U+FE52</span></span>|  
|<span data-ttu-id="07cb0-543">00 A U + 1</span><span class="sxs-lookup"><span data-stu-id="07cb0-543">U+00A1</span></span>|<span data-ttu-id="07cb0-544">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="07cb0-544">U+0DF4</span></span>|<span data-ttu-id="07cb0-545">207 D U +와 U + 207E</span><span class="sxs-lookup"><span data-stu-id="07cb0-545">U+207D and  U+207E</span></span>|<span data-ttu-id="07cb0-546">U + FE54 U + FE61를</span><span class="sxs-lookup"><span data-stu-id="07cb0-546">U+FE54 to U+FE61</span></span>|  
|<span data-ttu-id="07cb0-547">U + 00AB</span><span class="sxs-lookup"><span data-stu-id="07cb0-547">U+00AB</span></span>|<span data-ttu-id="07cb0-548">U + U + 0E5B 0E4F</span><span class="sxs-lookup"><span data-stu-id="07cb0-548">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="07cb0-549">208 D U +와 U + 208E</span><span class="sxs-lookup"><span data-stu-id="07cb0-549">U+208D and U+208E</span></span>|<span data-ttu-id="07cb0-550">U + FE63</span><span class="sxs-lookup"><span data-stu-id="07cb0-550">U+FE63</span></span>|  
|<span data-ttu-id="07cb0-551">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="07cb0-551">U+00AD</span></span>|<span data-ttu-id="07cb0-552">U + U + 0F12 0F04</span><span class="sxs-lookup"><span data-stu-id="07cb0-552">U+0F04 to U+0F12</span></span>|<span data-ttu-id="07cb0-553">U + 2329에서 U + 232A</span><span class="sxs-lookup"><span data-stu-id="07cb0-553">U+2329 and U+232A</span></span>|<span data-ttu-id="07cb0-554">U + FE68</span><span class="sxs-lookup"><span data-stu-id="07cb0-554">U+FE68</span></span>|  
|<span data-ttu-id="07cb0-555">U + 00B7</span><span class="sxs-lookup"><span data-stu-id="07cb0-555">U+00B7</span></span>|<span data-ttu-id="07cb0-556">U + U + 0F3D 0F3A</span><span class="sxs-lookup"><span data-stu-id="07cb0-556">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="07cb0-557">U + U + 2775 2768</span><span class="sxs-lookup"><span data-stu-id="07cb0-557">U+2768 to U+2775</span></span>|<span data-ttu-id="07cb0-558">U + FE6A 및 U + FE6B</span><span class="sxs-lookup"><span data-stu-id="07cb0-558">U+FE6A and U+FE6B</span></span>|  
|<span data-ttu-id="07cb0-559">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="07cb0-559">U+00BB</span></span>|<span data-ttu-id="07cb0-560">U+0F85</span><span class="sxs-lookup"><span data-stu-id="07cb0-560">U+0F85</span></span>|<span data-ttu-id="07cb0-561">U + 27C 6 27C 5는 U +</span><span class="sxs-lookup"><span data-stu-id="07cb0-561">U+27C5 to U+27C6</span></span>|<span data-ttu-id="07cb0-562">U + FF01 U + FF03를</span><span class="sxs-lookup"><span data-stu-id="07cb0-562">U+FF01 to U+FF03</span></span>|  
|<span data-ttu-id="07cb0-563">U + 00BF</span><span class="sxs-lookup"><span data-stu-id="07cb0-563">U+00BF</span></span>|<span data-ttu-id="07cb0-564">U + 0FD0 및 U + 0FD1</span><span class="sxs-lookup"><span data-stu-id="07cb0-564">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="07cb0-565">U + U + 27EB 27E6</span><span class="sxs-lookup"><span data-stu-id="07cb0-565">U+27E6 to U+27EB</span></span>|<span data-ttu-id="07cb0-566">U + FF05 U + FF0A를</span><span class="sxs-lookup"><span data-stu-id="07cb0-566">U+FF05 to U+FF0A</span></span>|  
|<span data-ttu-id="07cb0-567">U + 037E</span><span class="sxs-lookup"><span data-stu-id="07cb0-567">U+037E</span></span>|<span data-ttu-id="07cb0-568">U + U + 104F 104A</span><span class="sxs-lookup"><span data-stu-id="07cb0-568">U+104A to U+104F</span></span>|<span data-ttu-id="07cb0-569">U + U + 2998 2983</span><span class="sxs-lookup"><span data-stu-id="07cb0-569">U+2983 to U+2998</span></span>|<span data-ttu-id="07cb0-570">U + FF0C에서 U + FF0F를</span><span class="sxs-lookup"><span data-stu-id="07cb0-570">U+FF0C to U+FF0F</span></span>|  
|<span data-ttu-id="07cb0-571">U+0387</span><span class="sxs-lookup"><span data-stu-id="07cb0-571">U+0387</span></span>|<span data-ttu-id="07cb0-572">U + 10FB</span><span class="sxs-lookup"><span data-stu-id="07cb0-572">U+10FB</span></span>|<span data-ttu-id="07cb0-573">U + 29DB에 U + 29D 8</span><span class="sxs-lookup"><span data-stu-id="07cb0-573">U+29D8 to U+29DB</span></span>|<span data-ttu-id="07cb0-574">U + FF1A 및 U + FF1B</span><span class="sxs-lookup"><span data-stu-id="07cb0-574">U+FF1A and U+FF1B</span></span>|  
|<span data-ttu-id="07cb0-575">U + U + 055F 055A</span><span class="sxs-lookup"><span data-stu-id="07cb0-575">U+055A to U+055F</span></span>|<span data-ttu-id="07cb0-576">U + U + 1368 1361</span><span class="sxs-lookup"><span data-stu-id="07cb0-576">U+1361 to U+1368</span></span>|<span data-ttu-id="07cb0-577">U + 29 FC와 U + 29FD</span><span class="sxs-lookup"><span data-stu-id="07cb0-577">U+29FC and U+29FD</span></span>|<span data-ttu-id="07cb0-578">U + FF1F 및 U + FF20</span><span class="sxs-lookup"><span data-stu-id="07cb0-578">U+FF1F and U+FF20</span></span>|  
|<span data-ttu-id="07cb0-579">U + 0589에서 U + 058A</span><span class="sxs-lookup"><span data-stu-id="07cb0-579">U+0589 and U+058A</span></span>|<span data-ttu-id="07cb0-580">166 D U +와 U + 166E</span><span class="sxs-lookup"><span data-stu-id="07cb0-580">U+166D and U+166E</span></span>|<span data-ttu-id="07cb0-581">U + U + 2CFC 2CF9</span><span class="sxs-lookup"><span data-stu-id="07cb0-581">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="07cb0-582">U + FF3B U + FF3D를</span><span class="sxs-lookup"><span data-stu-id="07cb0-582">U+FF3B to U+FF3D</span></span>|  
|<span data-ttu-id="07cb0-583">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="07cb0-583">U+05BE</span></span>|<span data-ttu-id="07cb0-584">U + 169B와 U + 169 C</span><span class="sxs-lookup"><span data-stu-id="07cb0-584">U+169B and U+169C</span></span>|<span data-ttu-id="07cb0-585">U + 2CFE 및 U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="07cb0-585">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="07cb0-586">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="07cb0-586">U+FF3F</span></span>|  
|<span data-ttu-id="07cb0-587">U+05C0</span><span class="sxs-lookup"><span data-stu-id="07cb0-587">U+05C0</span></span>|<span data-ttu-id="07cb0-588">U + U + 16ED 16EB</span><span class="sxs-lookup"><span data-stu-id="07cb0-588">U+16EB to U+16ED</span></span>|<span data-ttu-id="07cb0-589">U + U + 2E17 2E00</span><span class="sxs-lookup"><span data-stu-id="07cb0-589">U+2E00 to U+2E17</span></span>|<span data-ttu-id="07cb0-590">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="07cb0-590">U+FF5B</span></span>|  
|<span data-ttu-id="07cb0-591">U+05C3</span><span class="sxs-lookup"><span data-stu-id="07cb0-591">U+05C3</span></span>|<span data-ttu-id="07cb0-592">U + 1735 및 U + 1736</span><span class="sxs-lookup"><span data-stu-id="07cb0-592">U+1735 and U+1736</span></span>|<span data-ttu-id="07cb0-593">U + 2E1C 및 U + 2E1D</span><span class="sxs-lookup"><span data-stu-id="07cb0-593">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="07cb0-594">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="07cb0-594">U+FF5D</span></span>|  
|<span data-ttu-id="07cb0-595">U + 05C 6</span><span class="sxs-lookup"><span data-stu-id="07cb0-595">U+05C6</span></span>|<span data-ttu-id="07cb0-596">U + 17D 6 17D 4는 U +</span><span class="sxs-lookup"><span data-stu-id="07cb0-596">U+17D4 to U+17D6</span></span>|<span data-ttu-id="07cb0-597">U + U + 3003 3001</span><span class="sxs-lookup"><span data-stu-id="07cb0-597">U+3001 to U+3003</span></span>|<span data-ttu-id="07cb0-598">U + FF5F U + FF65를</span><span class="sxs-lookup"><span data-stu-id="07cb0-598">U+FF5F to U+FF65</span></span>|  
|<span data-ttu-id="07cb0-599">U + 05F3 및 U + 05F4</span><span class="sxs-lookup"><span data-stu-id="07cb0-599">U+05F3 and U+05F4</span></span>|<span data-ttu-id="07cb0-600">U + 17DA에 U + 17D 8</span><span class="sxs-lookup"><span data-stu-id="07cb0-600">U+17D8 to U+17DA</span></span>|<span data-ttu-id="07cb0-601">U + U + 3011 3008</span><span class="sxs-lookup"><span data-stu-id="07cb0-601">U+3008 to U+3011</span></span>||  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(char c);" />
      <MemberSignature Language="F#" Value="static member IsPunctuation : char -&gt; bool" Usage="System.char.IsPunctuation c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-602">평가할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-602">The Unicode character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-603">유니코드 문자가 문장 부호인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-603">Indicates whether the specified Unicode character is categorized as a punctuation mark.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-604">
            <see langword="true" />가 문장 부호이면 <paramref name="c" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-604">
              <see langword="true" /> if <paramref name="c" /> is a punctuation mark; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-605">유효한 문장에는 다음 범주 중 멤버인 <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, 또는 `OtherPunctuation`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-605">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="07cb0-606">다음 표에 나열 된 유니코드 코드 포인트를 사용 하 여 문자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-606">They include characters with the Unicode code points listed in the following table.</span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="07cb0-607">(U+0021 U + 00-23에</span><span class="sxs-lookup"><span data-stu-id="07cb0-607">U+0021 to U+0023</span></span>|<span data-ttu-id="07cb0-608">U + 060 C와 U + 060 D</span><span class="sxs-lookup"><span data-stu-id="07cb0-608">U+060C and U+060D</span></span>|<span data-ttu-id="07cb0-609">U + 180A에 U + 1800</span><span class="sxs-lookup"><span data-stu-id="07cb0-609">U+1800 to U+180A</span></span>|<span data-ttu-id="07cb0-610">U + U + 301F 3014</span><span class="sxs-lookup"><span data-stu-id="07cb0-610">U+3014 to U+301F</span></span>|  
|<span data-ttu-id="07cb0-611">U + U + 002A에 0025</span><span class="sxs-lookup"><span data-stu-id="07cb0-611">U+0025 to U+002A</span></span>|<span data-ttu-id="07cb0-612">U+061B</span><span class="sxs-lookup"><span data-stu-id="07cb0-612">U+061B</span></span>|<span data-ttu-id="07cb0-613">U + 1944 및 U + 1945</span><span class="sxs-lookup"><span data-stu-id="07cb0-613">U+1944 and U+1945</span></span>|<span data-ttu-id="07cb0-614">U + 3030</span><span class="sxs-lookup"><span data-stu-id="07cb0-614">U+3030</span></span>|  
|<span data-ttu-id="07cb0-615">U + 002F에 U + 002 C</span><span class="sxs-lookup"><span data-stu-id="07cb0-615">U+002C to U+002F</span></span>|<span data-ttu-id="07cb0-616">U + 061E 및 U + 061F</span><span class="sxs-lookup"><span data-stu-id="07cb0-616">U+061E and U+061F</span></span>|<span data-ttu-id="07cb0-617">U + 19DE 및 U + 19DF</span><span class="sxs-lookup"><span data-stu-id="07cb0-617">U+19DE and U+19DF</span></span>|<span data-ttu-id="07cb0-618">U + 303D</span><span class="sxs-lookup"><span data-stu-id="07cb0-618">U+303D</span></span>|  
|<span data-ttu-id="07cb0-619">U + 003A 및 U + 003B</span><span class="sxs-lookup"><span data-stu-id="07cb0-619">U+003A and U+003B</span></span>|<span data-ttu-id="07cb0-620">U + 066 d U + 066A</span><span class="sxs-lookup"><span data-stu-id="07cb0-620">U+066A to U+066D</span></span>|<span data-ttu-id="07cb0-621">U + 1A1E 및 U + 1A1F</span><span class="sxs-lookup"><span data-stu-id="07cb0-621">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="07cb0-622">U + 30A0</span><span class="sxs-lookup"><span data-stu-id="07cb0-622">U+30A0</span></span>|  
|<span data-ttu-id="07cb0-623">U + 003F 및 U + 0040</span><span class="sxs-lookup"><span data-stu-id="07cb0-623">U+003F and U+0040</span></span>|<span data-ttu-id="07cb0-624">U+06D4</span><span class="sxs-lookup"><span data-stu-id="07cb0-624">U+06D4</span></span>|<span data-ttu-id="07cb0-625">U + U + 1B60 1B5A</span><span class="sxs-lookup"><span data-stu-id="07cb0-625">U+1B5A to U+1B60</span></span>|<span data-ttu-id="07cb0-626">U + 30FB</span><span class="sxs-lookup"><span data-stu-id="07cb0-626">U+30FB</span></span>|  
|<span data-ttu-id="07cb0-627">U + 005 d U + 005B</span><span class="sxs-lookup"><span data-stu-id="07cb0-627">U+005B to U+005D</span></span>|<span data-ttu-id="07cb0-628">U + 070 d U + 0700</span><span class="sxs-lookup"><span data-stu-id="07cb0-628">U+0700 to U+070D</span></span>|<span data-ttu-id="07cb0-629">U + U + 2027 2010</span><span class="sxs-lookup"><span data-stu-id="07cb0-629">U+2010 to U+2027</span></span>|<span data-ttu-id="07cb0-630">U + A874 U + A877를</span><span class="sxs-lookup"><span data-stu-id="07cb0-630">U+A874 to U+A877</span></span>|  
|<span data-ttu-id="07cb0-631">U+005F</span><span class="sxs-lookup"><span data-stu-id="07cb0-631">U+005F</span></span>|<span data-ttu-id="07cb0-632">U + U + 07F9 07F7</span><span class="sxs-lookup"><span data-stu-id="07cb0-632">U+07F7 to U+07F9</span></span>|<span data-ttu-id="07cb0-633">U+2030 U + 2043</span><span class="sxs-lookup"><span data-stu-id="07cb0-633">U+2030 to U+2043</span></span>|<span data-ttu-id="07cb0-634">U + FD3E 및 U + FD3F</span><span class="sxs-lookup"><span data-stu-id="07cb0-634">U+FD3E and U+FD3F</span></span>|  
|<span data-ttu-id="07cb0-635">U + 007B</span><span class="sxs-lookup"><span data-stu-id="07cb0-635">U+007B</span></span>|<span data-ttu-id="07cb0-636">U + 0964 및 U + 0965</span><span class="sxs-lookup"><span data-stu-id="07cb0-636">U+0964 and U+0965</span></span>|<span data-ttu-id="07cb0-637">U + U + 2051 2045</span><span class="sxs-lookup"><span data-stu-id="07cb0-637">U+2045 to U+2051</span></span>|<span data-ttu-id="07cb0-638">(U+fe10 U + FE19를</span><span class="sxs-lookup"><span data-stu-id="07cb0-638">U+FE10 to U+FE19</span></span>|  
|<span data-ttu-id="07cb0-639">U + 007 D</span><span class="sxs-lookup"><span data-stu-id="07cb0-639">U+007D</span></span>|<span data-ttu-id="07cb0-640">U+0970</span><span class="sxs-lookup"><span data-stu-id="07cb0-640">U+0970</span></span>|<span data-ttu-id="07cb0-641">U + U + 205E 2053</span><span class="sxs-lookup"><span data-stu-id="07cb0-641">U+2053 to U+205E</span></span>|<span data-ttu-id="07cb0-642">(U+fe30 U + FE52를</span><span class="sxs-lookup"><span data-stu-id="07cb0-642">U+FE30 to U+FE52</span></span>|  
|<span data-ttu-id="07cb0-643">00 A U + 1</span><span class="sxs-lookup"><span data-stu-id="07cb0-643">U+00A1</span></span>|<span data-ttu-id="07cb0-644">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="07cb0-644">U+0DF4</span></span>|<span data-ttu-id="07cb0-645">207 D U +와 U + 207E</span><span class="sxs-lookup"><span data-stu-id="07cb0-645">U+207D and  U+207E</span></span>|<span data-ttu-id="07cb0-646">U + FE54 U + FE61를</span><span class="sxs-lookup"><span data-stu-id="07cb0-646">U+FE54 to U+FE61</span></span>|  
|<span data-ttu-id="07cb0-647">U + 00AB</span><span class="sxs-lookup"><span data-stu-id="07cb0-647">U+00AB</span></span>|<span data-ttu-id="07cb0-648">U + U + 0E5B 0E4F</span><span class="sxs-lookup"><span data-stu-id="07cb0-648">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="07cb0-649">208 D U +와 U + 208E</span><span class="sxs-lookup"><span data-stu-id="07cb0-649">U+208D and U+208E</span></span>|<span data-ttu-id="07cb0-650">U + FE63</span><span class="sxs-lookup"><span data-stu-id="07cb0-650">U+FE63</span></span>|  
|<span data-ttu-id="07cb0-651">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="07cb0-651">U+00AD</span></span>|<span data-ttu-id="07cb0-652">U + U + 0F12 0F04</span><span class="sxs-lookup"><span data-stu-id="07cb0-652">U+0F04 to U+0F12</span></span>|<span data-ttu-id="07cb0-653">U + 2329에서 U + 232A</span><span class="sxs-lookup"><span data-stu-id="07cb0-653">U+2329 and U+232A</span></span>|<span data-ttu-id="07cb0-654">U + FE68</span><span class="sxs-lookup"><span data-stu-id="07cb0-654">U+FE68</span></span>|  
|<span data-ttu-id="07cb0-655">U + 00B7</span><span class="sxs-lookup"><span data-stu-id="07cb0-655">U+00B7</span></span>|<span data-ttu-id="07cb0-656">U + U + 0F3D 0F3A</span><span class="sxs-lookup"><span data-stu-id="07cb0-656">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="07cb0-657">U + U + 2775 2768</span><span class="sxs-lookup"><span data-stu-id="07cb0-657">U+2768 to U+2775</span></span>|<span data-ttu-id="07cb0-658">U + FE6A 및 U + FE6B</span><span class="sxs-lookup"><span data-stu-id="07cb0-658">U+FE6A and U+FE6B</span></span>|  
|<span data-ttu-id="07cb0-659">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="07cb0-659">U+00BB</span></span>|<span data-ttu-id="07cb0-660">U+0F85</span><span class="sxs-lookup"><span data-stu-id="07cb0-660">U+0F85</span></span>|<span data-ttu-id="07cb0-661">U + 27C 6 27C 5는 U +</span><span class="sxs-lookup"><span data-stu-id="07cb0-661">U+27C5 to U+27C6</span></span>|<span data-ttu-id="07cb0-662">U + FF01 U + FF03를</span><span class="sxs-lookup"><span data-stu-id="07cb0-662">U+FF01 to U+FF03</span></span>|  
|<span data-ttu-id="07cb0-663">U + 00BF</span><span class="sxs-lookup"><span data-stu-id="07cb0-663">U+00BF</span></span>|<span data-ttu-id="07cb0-664">U + 0FD0 및 U + 0FD1</span><span class="sxs-lookup"><span data-stu-id="07cb0-664">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="07cb0-665">U + U + 27EB 27E6</span><span class="sxs-lookup"><span data-stu-id="07cb0-665">U+27E6 to U+27EB</span></span>|<span data-ttu-id="07cb0-666">U + FF05 U + FF0A를</span><span class="sxs-lookup"><span data-stu-id="07cb0-666">U+FF05 to U+FF0A</span></span>|  
|<span data-ttu-id="07cb0-667">U + 037E</span><span class="sxs-lookup"><span data-stu-id="07cb0-667">U+037E</span></span>|<span data-ttu-id="07cb0-668">U + U + 104F 104A</span><span class="sxs-lookup"><span data-stu-id="07cb0-668">U+104A to U+104F</span></span>|<span data-ttu-id="07cb0-669">U + U + 2998 2983</span><span class="sxs-lookup"><span data-stu-id="07cb0-669">U+2983 to U+2998</span></span>|<span data-ttu-id="07cb0-670">U + FF0C에서 U + FF0F를</span><span class="sxs-lookup"><span data-stu-id="07cb0-670">U+FF0C to U+FF0F</span></span>|  
|<span data-ttu-id="07cb0-671">U+0387</span><span class="sxs-lookup"><span data-stu-id="07cb0-671">U+0387</span></span>|<span data-ttu-id="07cb0-672">U + 10FB</span><span class="sxs-lookup"><span data-stu-id="07cb0-672">U+10FB</span></span>|<span data-ttu-id="07cb0-673">U + 29DB에 U + 29D 8</span><span class="sxs-lookup"><span data-stu-id="07cb0-673">U+29D8 to U+29DB</span></span>|<span data-ttu-id="07cb0-674">U + FF1A 및 U + FF1B</span><span class="sxs-lookup"><span data-stu-id="07cb0-674">U+FF1A and U+FF1B</span></span>|  
|<span data-ttu-id="07cb0-675">U + U + 055F 055A</span><span class="sxs-lookup"><span data-stu-id="07cb0-675">U+055A to U+055F</span></span>|<span data-ttu-id="07cb0-676">U + U + 1368 1361</span><span class="sxs-lookup"><span data-stu-id="07cb0-676">U+1361 to U+1368</span></span>|<span data-ttu-id="07cb0-677">U + 29 FC와 U + 29FD</span><span class="sxs-lookup"><span data-stu-id="07cb0-677">U+29FC and U+29FD</span></span>|<span data-ttu-id="07cb0-678">U + FF1F 및 U + FF20</span><span class="sxs-lookup"><span data-stu-id="07cb0-678">U+FF1F and U+FF20</span></span>|  
|<span data-ttu-id="07cb0-679">U + 0589에서 U + 058A</span><span class="sxs-lookup"><span data-stu-id="07cb0-679">U+0589 and U+058A</span></span>|<span data-ttu-id="07cb0-680">166 D U +와 U + 166E</span><span class="sxs-lookup"><span data-stu-id="07cb0-680">U+166D and U+166E</span></span>|<span data-ttu-id="07cb0-681">U + U + 2CFC 2CF9</span><span class="sxs-lookup"><span data-stu-id="07cb0-681">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="07cb0-682">U + FF3B U + FF3D를</span><span class="sxs-lookup"><span data-stu-id="07cb0-682">U+FF3B to U+FF3D</span></span>|  
|<span data-ttu-id="07cb0-683">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="07cb0-683">U+05BE</span></span>|<span data-ttu-id="07cb0-684">U + 169B와 U + 169 C</span><span class="sxs-lookup"><span data-stu-id="07cb0-684">U+169B and U+169C</span></span>|<span data-ttu-id="07cb0-685">U + 2CFE 및 U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="07cb0-685">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="07cb0-686">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="07cb0-686">U+FF3F</span></span>|  
|<span data-ttu-id="07cb0-687">U+05C0</span><span class="sxs-lookup"><span data-stu-id="07cb0-687">U+05C0</span></span>|<span data-ttu-id="07cb0-688">U + U + 16ED 16EB</span><span class="sxs-lookup"><span data-stu-id="07cb0-688">U+16EB to U+16ED</span></span>|<span data-ttu-id="07cb0-689">U + U + 2E17 2E00</span><span class="sxs-lookup"><span data-stu-id="07cb0-689">U+2E00 to U+2E17</span></span>|<span data-ttu-id="07cb0-690">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="07cb0-690">U+FF5B</span></span>|  
|<span data-ttu-id="07cb0-691">U+05C3</span><span class="sxs-lookup"><span data-stu-id="07cb0-691">U+05C3</span></span>|<span data-ttu-id="07cb0-692">U + 1735 및 U + 1736</span><span class="sxs-lookup"><span data-stu-id="07cb0-692">U+1735 and U+1736</span></span>|<span data-ttu-id="07cb0-693">U + 2E1C 및 U + 2E1D</span><span class="sxs-lookup"><span data-stu-id="07cb0-693">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="07cb0-694">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="07cb0-694">U+FF5D</span></span>|  
|<span data-ttu-id="07cb0-695">U + 05C 6</span><span class="sxs-lookup"><span data-stu-id="07cb0-695">U+05C6</span></span>|<span data-ttu-id="07cb0-696">U + 17D 6 17D 4는 U +</span><span class="sxs-lookup"><span data-stu-id="07cb0-696">U+17D4 to U+17D6</span></span>|<span data-ttu-id="07cb0-697">U + U + 3003 3001</span><span class="sxs-lookup"><span data-stu-id="07cb0-697">U+3001 to U+3003</span></span>|<span data-ttu-id="07cb0-698">U + FF5F U + FF65를</span><span class="sxs-lookup"><span data-stu-id="07cb0-698">U+FF5F to U+FF65</span></span>|  
|<span data-ttu-id="07cb0-699">U + 05F3 및 U + 05F4</span><span class="sxs-lookup"><span data-stu-id="07cb0-699">U+05F3 and U+05F4</span></span>|<span data-ttu-id="07cb0-700">U + 17DA에 U + 17D 8</span><span class="sxs-lookup"><span data-stu-id="07cb0-700">U+17D8 to U+17DA</span></span>|<span data-ttu-id="07cb0-701">U + U + 3011 3008</span><span class="sxs-lookup"><span data-stu-id="07cb0-701">U+3008 to U+3011</span></span>||  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-702">다음 코드 예제에서는 <xref:System.Char.IsPunctuation%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-702">The following code example demonstrates <xref:System.Char.IsPunctuation%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsPunctuation#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsPunctuation : string * int -&gt; bool" Usage="System.char.IsPunctuation (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-703">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-703">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-704">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-704">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-705">지정된 문자열의 지정된 위치에 있는 문자가 문장 부호인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-705">Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-706">
            <paramref name="index" />의 <paramref name="s" /> 위치에 있는 문자가 문장 부호이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-706">
              <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a punctuation mark; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-707">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-707">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="07cb0-708">유효한 문장에는 다음 범주 중 멤버인 <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, 또는 `OtherPunctuation`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-708">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="07cb0-709">다음 표에 나열 된 유니코드 코드 포인트를 사용 하 여 문자가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-709">They include characters with the Unicode code points listed in the following table.</span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="07cb0-710">(U+0021 U + 00-23에</span><span class="sxs-lookup"><span data-stu-id="07cb0-710">U+0021 to U+0023</span></span>|<span data-ttu-id="07cb0-711">U + 060 C와 U + 060 D</span><span class="sxs-lookup"><span data-stu-id="07cb0-711">U+060C and U+060D</span></span>|<span data-ttu-id="07cb0-712">U + 180A에 U + 1800</span><span class="sxs-lookup"><span data-stu-id="07cb0-712">U+1800 to U+180A</span></span>|<span data-ttu-id="07cb0-713">U + U + 301F 3014</span><span class="sxs-lookup"><span data-stu-id="07cb0-713">U+3014 to U+301F</span></span>|  
|<span data-ttu-id="07cb0-714">U + U + 002A에 0025</span><span class="sxs-lookup"><span data-stu-id="07cb0-714">U+0025 to U+002A</span></span>|<span data-ttu-id="07cb0-715">U+061B</span><span class="sxs-lookup"><span data-stu-id="07cb0-715">U+061B</span></span>|<span data-ttu-id="07cb0-716">U + 1944 및 U + 1945</span><span class="sxs-lookup"><span data-stu-id="07cb0-716">U+1944 and U+1945</span></span>|<span data-ttu-id="07cb0-717">U + 3030</span><span class="sxs-lookup"><span data-stu-id="07cb0-717">U+3030</span></span>|  
|<span data-ttu-id="07cb0-718">U + 002F에 U + 002 C</span><span class="sxs-lookup"><span data-stu-id="07cb0-718">U+002C to U+002F</span></span>|<span data-ttu-id="07cb0-719">U + 061E 및 U + 061F</span><span class="sxs-lookup"><span data-stu-id="07cb0-719">U+061E and U+061F</span></span>|<span data-ttu-id="07cb0-720">U + 19DE 및 U + 19DF</span><span class="sxs-lookup"><span data-stu-id="07cb0-720">U+19DE and U+19DF</span></span>|<span data-ttu-id="07cb0-721">U + 303D</span><span class="sxs-lookup"><span data-stu-id="07cb0-721">U+303D</span></span>|  
|<span data-ttu-id="07cb0-722">U + 003A 및 U + 003B</span><span class="sxs-lookup"><span data-stu-id="07cb0-722">U+003A and U+003B</span></span>|<span data-ttu-id="07cb0-723">U + 066 d U + 066A</span><span class="sxs-lookup"><span data-stu-id="07cb0-723">U+066A to U+066D</span></span>|<span data-ttu-id="07cb0-724">U + 1A1E 및 U + 1A1F</span><span class="sxs-lookup"><span data-stu-id="07cb0-724">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="07cb0-725">U + 30A0</span><span class="sxs-lookup"><span data-stu-id="07cb0-725">U+30A0</span></span>|  
|<span data-ttu-id="07cb0-726">U + 003F 및 U + 0040</span><span class="sxs-lookup"><span data-stu-id="07cb0-726">U+003F and U+0040</span></span>|<span data-ttu-id="07cb0-727">U+06D4</span><span class="sxs-lookup"><span data-stu-id="07cb0-727">U+06D4</span></span>|<span data-ttu-id="07cb0-728">U + U + 1B60 1B5A</span><span class="sxs-lookup"><span data-stu-id="07cb0-728">U+1B5A to U+1B60</span></span>|<span data-ttu-id="07cb0-729">U + 30FB</span><span class="sxs-lookup"><span data-stu-id="07cb0-729">U+30FB</span></span>|  
|<span data-ttu-id="07cb0-730">U + 005 d U + 005B</span><span class="sxs-lookup"><span data-stu-id="07cb0-730">U+005B to U+005D</span></span>|<span data-ttu-id="07cb0-731">U + 070 d U + 0700</span><span class="sxs-lookup"><span data-stu-id="07cb0-731">U+0700 to U+070D</span></span>|<span data-ttu-id="07cb0-732">U + U + 2027 2010</span><span class="sxs-lookup"><span data-stu-id="07cb0-732">U+2010 to U+2027</span></span>|<span data-ttu-id="07cb0-733">U + A874 U + A877를</span><span class="sxs-lookup"><span data-stu-id="07cb0-733">U+A874 to U+A877</span></span>|  
|<span data-ttu-id="07cb0-734">U+005F</span><span class="sxs-lookup"><span data-stu-id="07cb0-734">U+005F</span></span>|<span data-ttu-id="07cb0-735">U + U + 07F9 07F7</span><span class="sxs-lookup"><span data-stu-id="07cb0-735">U+07F7 to U+07F9</span></span>|<span data-ttu-id="07cb0-736">U+2030 U + 2043</span><span class="sxs-lookup"><span data-stu-id="07cb0-736">U+2030 to U+2043</span></span>|<span data-ttu-id="07cb0-737">U + FD3E 및 U + FD3F</span><span class="sxs-lookup"><span data-stu-id="07cb0-737">U+FD3E and U+FD3F</span></span>|  
|<span data-ttu-id="07cb0-738">U + 007B</span><span class="sxs-lookup"><span data-stu-id="07cb0-738">U+007B</span></span>|<span data-ttu-id="07cb0-739">U + 0964 및 U + 0965</span><span class="sxs-lookup"><span data-stu-id="07cb0-739">U+0964 and U+0965</span></span>|<span data-ttu-id="07cb0-740">U + U + 2051 2045</span><span class="sxs-lookup"><span data-stu-id="07cb0-740">U+2045 to U+2051</span></span>|<span data-ttu-id="07cb0-741">(U+fe10 U + FE19를</span><span class="sxs-lookup"><span data-stu-id="07cb0-741">U+FE10 to U+FE19</span></span>|  
|<span data-ttu-id="07cb0-742">U + 007 D</span><span class="sxs-lookup"><span data-stu-id="07cb0-742">U+007D</span></span>|<span data-ttu-id="07cb0-743">U+0970</span><span class="sxs-lookup"><span data-stu-id="07cb0-743">U+0970</span></span>|<span data-ttu-id="07cb0-744">U + U + 205E 2053</span><span class="sxs-lookup"><span data-stu-id="07cb0-744">U+2053 to U+205E</span></span>|<span data-ttu-id="07cb0-745">(U+fe30 U + FE52를</span><span class="sxs-lookup"><span data-stu-id="07cb0-745">U+FE30 to U+FE52</span></span>|  
|<span data-ttu-id="07cb0-746">00 A U + 1</span><span class="sxs-lookup"><span data-stu-id="07cb0-746">U+00A1</span></span>|<span data-ttu-id="07cb0-747">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="07cb0-747">U+0DF4</span></span>|<span data-ttu-id="07cb0-748">207 D U +와 U + 207E</span><span class="sxs-lookup"><span data-stu-id="07cb0-748">U+207D and  U+207E</span></span>|<span data-ttu-id="07cb0-749">U + FE54 U + FE61를</span><span class="sxs-lookup"><span data-stu-id="07cb0-749">U+FE54 to U+FE61</span></span>|  
|<span data-ttu-id="07cb0-750">U + 00AB</span><span class="sxs-lookup"><span data-stu-id="07cb0-750">U+00AB</span></span>|<span data-ttu-id="07cb0-751">U + U + 0E5B 0E4F</span><span class="sxs-lookup"><span data-stu-id="07cb0-751">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="07cb0-752">208 D U +와 U + 208E</span><span class="sxs-lookup"><span data-stu-id="07cb0-752">U+208D and U+208E</span></span>|<span data-ttu-id="07cb0-753">U + FE63</span><span class="sxs-lookup"><span data-stu-id="07cb0-753">U+FE63</span></span>|  
|<span data-ttu-id="07cb0-754">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="07cb0-754">U+00AD</span></span>|<span data-ttu-id="07cb0-755">U + U + 0F12 0F04</span><span class="sxs-lookup"><span data-stu-id="07cb0-755">U+0F04 to U+0F12</span></span>|<span data-ttu-id="07cb0-756">U + 2329에서 U + 232A</span><span class="sxs-lookup"><span data-stu-id="07cb0-756">U+2329 and U+232A</span></span>|<span data-ttu-id="07cb0-757">U + FE68</span><span class="sxs-lookup"><span data-stu-id="07cb0-757">U+FE68</span></span>|  
|<span data-ttu-id="07cb0-758">U + 00B7</span><span class="sxs-lookup"><span data-stu-id="07cb0-758">U+00B7</span></span>|<span data-ttu-id="07cb0-759">U + U + 0F3D 0F3A</span><span class="sxs-lookup"><span data-stu-id="07cb0-759">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="07cb0-760">U + U + 2775 2768</span><span class="sxs-lookup"><span data-stu-id="07cb0-760">U+2768 to U+2775</span></span>|<span data-ttu-id="07cb0-761">U + FE6A 및 U + FE6B</span><span class="sxs-lookup"><span data-stu-id="07cb0-761">U+FE6A and U+FE6B</span></span>|  
|<span data-ttu-id="07cb0-762">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="07cb0-762">U+00BB</span></span>|<span data-ttu-id="07cb0-763">U+0F85</span><span class="sxs-lookup"><span data-stu-id="07cb0-763">U+0F85</span></span>|<span data-ttu-id="07cb0-764">U + 27C 6 27C 5는 U +</span><span class="sxs-lookup"><span data-stu-id="07cb0-764">U+27C5 to U+27C6</span></span>|<span data-ttu-id="07cb0-765">U + FF01 U + FF03를</span><span class="sxs-lookup"><span data-stu-id="07cb0-765">U+FF01 to U+FF03</span></span>|  
|<span data-ttu-id="07cb0-766">U + 00BF</span><span class="sxs-lookup"><span data-stu-id="07cb0-766">U+00BF</span></span>|<span data-ttu-id="07cb0-767">U + 0FD0 및 U + 0FD1</span><span class="sxs-lookup"><span data-stu-id="07cb0-767">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="07cb0-768">U + U + 27EB 27E6</span><span class="sxs-lookup"><span data-stu-id="07cb0-768">U+27E6 to U+27EB</span></span>|<span data-ttu-id="07cb0-769">U + FF05 U + FF0A를</span><span class="sxs-lookup"><span data-stu-id="07cb0-769">U+FF05 to U+FF0A</span></span>|  
|<span data-ttu-id="07cb0-770">U + 037E</span><span class="sxs-lookup"><span data-stu-id="07cb0-770">U+037E</span></span>|<span data-ttu-id="07cb0-771">U + U + 104F 104A</span><span class="sxs-lookup"><span data-stu-id="07cb0-771">U+104A to U+104F</span></span>|<span data-ttu-id="07cb0-772">U + U + 2998 2983</span><span class="sxs-lookup"><span data-stu-id="07cb0-772">U+2983 to U+2998</span></span>|<span data-ttu-id="07cb0-773">U + FF0C에서 U + FF0F를</span><span class="sxs-lookup"><span data-stu-id="07cb0-773">U+FF0C to U+FF0F</span></span>|  
|<span data-ttu-id="07cb0-774">U+0387</span><span class="sxs-lookup"><span data-stu-id="07cb0-774">U+0387</span></span>|<span data-ttu-id="07cb0-775">U + 10FB</span><span class="sxs-lookup"><span data-stu-id="07cb0-775">U+10FB</span></span>|<span data-ttu-id="07cb0-776">U + 29DB에 U + 29D 8</span><span class="sxs-lookup"><span data-stu-id="07cb0-776">U+29D8 to U+29DB</span></span>|<span data-ttu-id="07cb0-777">U + FF1A 및 U + FF1B</span><span class="sxs-lookup"><span data-stu-id="07cb0-777">U+FF1A and U+FF1B</span></span>|  
|<span data-ttu-id="07cb0-778">U + U + 055F 055A</span><span class="sxs-lookup"><span data-stu-id="07cb0-778">U+055A to U+055F</span></span>|<span data-ttu-id="07cb0-779">U + U + 1368 1361</span><span class="sxs-lookup"><span data-stu-id="07cb0-779">U+1361 to U+1368</span></span>|<span data-ttu-id="07cb0-780">U + 29 FC와 U + 29FD</span><span class="sxs-lookup"><span data-stu-id="07cb0-780">U+29FC and U+29FD</span></span>|<span data-ttu-id="07cb0-781">U + FF1F 및 U + FF20</span><span class="sxs-lookup"><span data-stu-id="07cb0-781">U+FF1F and U+FF20</span></span>|  
|<span data-ttu-id="07cb0-782">U + 0589에서 U + 058A</span><span class="sxs-lookup"><span data-stu-id="07cb0-782">U+0589 and U+058A</span></span>|<span data-ttu-id="07cb0-783">166 D U +와 U + 166E</span><span class="sxs-lookup"><span data-stu-id="07cb0-783">U+166D and U+166E</span></span>|<span data-ttu-id="07cb0-784">U + U + 2CFC 2CF9</span><span class="sxs-lookup"><span data-stu-id="07cb0-784">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="07cb0-785">U + FF3B U + FF3D를</span><span class="sxs-lookup"><span data-stu-id="07cb0-785">U+FF3B to U+FF3D</span></span>|  
|<span data-ttu-id="07cb0-786">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="07cb0-786">U+05BE</span></span>|<span data-ttu-id="07cb0-787">U + 169B와 U + 169 C</span><span class="sxs-lookup"><span data-stu-id="07cb0-787">U+169B and U+169C</span></span>|<span data-ttu-id="07cb0-788">U + 2CFE 및 U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="07cb0-788">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="07cb0-789">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="07cb0-789">U+FF3F</span></span>|  
|<span data-ttu-id="07cb0-790">U+05C0</span><span class="sxs-lookup"><span data-stu-id="07cb0-790">U+05C0</span></span>|<span data-ttu-id="07cb0-791">U + U + 16ED 16EB</span><span class="sxs-lookup"><span data-stu-id="07cb0-791">U+16EB to U+16ED</span></span>|<span data-ttu-id="07cb0-792">U + U + 2E17 2E00</span><span class="sxs-lookup"><span data-stu-id="07cb0-792">U+2E00 to U+2E17</span></span>|<span data-ttu-id="07cb0-793">U+FF5B</span><span class="sxs-lookup"><span data-stu-id="07cb0-793">U+FF5B</span></span>|  
|<span data-ttu-id="07cb0-794">U+05C3</span><span class="sxs-lookup"><span data-stu-id="07cb0-794">U+05C3</span></span>|<span data-ttu-id="07cb0-795">U + 1735 및 U + 1736</span><span class="sxs-lookup"><span data-stu-id="07cb0-795">U+1735 and U+1736</span></span>|<span data-ttu-id="07cb0-796">U + 2E1C 및 U + 2E1D</span><span class="sxs-lookup"><span data-stu-id="07cb0-796">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="07cb0-797">U+FF5D</span><span class="sxs-lookup"><span data-stu-id="07cb0-797">U+FF5D</span></span>|  
|<span data-ttu-id="07cb0-798">U + 05C 6</span><span class="sxs-lookup"><span data-stu-id="07cb0-798">U+05C6</span></span>|<span data-ttu-id="07cb0-799">U + 17D 6 17D 4는 U +</span><span class="sxs-lookup"><span data-stu-id="07cb0-799">U+17D4 to U+17D6</span></span>|<span data-ttu-id="07cb0-800">U + U + 3003 3001</span><span class="sxs-lookup"><span data-stu-id="07cb0-800">U+3001 to U+3003</span></span>|<span data-ttu-id="07cb0-801">U + FF5F U + FF65를</span><span class="sxs-lookup"><span data-stu-id="07cb0-801">U+FF5F to U+FF65</span></span>|  
|<span data-ttu-id="07cb0-802">U + 05F3 및 U + 05F4</span><span class="sxs-lookup"><span data-stu-id="07cb0-802">U+05F3 and U+05F4</span></span>|<span data-ttu-id="07cb0-803">U + 17DA에 U + 17D 8</span><span class="sxs-lookup"><span data-stu-id="07cb0-803">U+17D8 to U+17DA</span></span>|<span data-ttu-id="07cb0-804">U + U + 3011 3008</span><span class="sxs-lookup"><span data-stu-id="07cb0-804">U+3008 to U+3011</span></span>||  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-805">다음 코드 예제에서는 <xref:System.Char.IsPunctuation%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-805">The following code example demonstrates <xref:System.Char.IsPunctuation%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsPunctuation#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-806">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-806">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-807">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-807">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSeparator">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-808">유니코드 문자가 구분 문자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-808">Indicates whether a Unicode character is categorized as a separator character.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-809">유니코드 표준 구분 기호 중 세 가지 하위 범주를 인식합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-809">The Unicode standard recognizes three subcategories of separators:</span></span>  
  
-   <span data-ttu-id="07cb0-810">공백 구분 기호 (의 <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> 범주), \u0020 등의 문자를 포함 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-810">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>  
  
-   <span data-ttu-id="07cb0-811">줄 구분 기호 (의 <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> 범주), \u2028을 포함 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-811">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>  
  
-   <span data-ttu-id="07cb0-812">단락 구분 기호 (의 <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> 범주), \u2029 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-812">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07cb0-813">제어 문자를 문자 \u000A (LF), \u000c. 요 (FF) 및 \u000D (CR)를 분류 하는 유니코드 표준 (의 멤버는 <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> 범주), 구분 기호 문자가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-813">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(char c);" />
      <MemberSignature Language="F#" Value="static member IsSeparator : char -&gt; bool" Usage="System.char.IsSeparator c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-814">평가할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-814">The Unicode character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-815">유니코드 문자가 구분 문자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-815">Indicates whether the specified Unicode character is categorized as a separator character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-816">
            <see langword="true" />가 구분 문자이면 <paramref name="c" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-816">
              <see langword="true" /> if <paramref name="c" /> is a separator character; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-817">유니코드 표준 구분 기호 중 세 가지 하위 범주를 인식합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-817">The Unicode standard recognizes three subcategories of separators:</span></span>  
  
-   <span data-ttu-id="07cb0-818">공백 구분 기호 (의 <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> 범주), \u0020 등의 문자를 포함 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-818">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>  
  
-   <span data-ttu-id="07cb0-819">줄 구분 기호 (의 <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> 범주), \u2028을 포함 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-819">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>  
  
-   <span data-ttu-id="07cb0-820">단락 구분 기호 (의 <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> 범주), \u2029 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-820">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07cb0-821">제어 문자를 문자 \u000A (LF), \u000c. 요 (FF) 및 \u000D (CR)를 분류 하는 유니코드 표준 (의 멤버는 <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> 범주), 구분 기호 문자가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-821">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-822">다음 예제에서는 목록은 <xref:System.Char> 구분 기호 문자로 분류 되는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-822">The following example lists the <xref:System.Char> objects that are classified as separator characters.</span></span>  
  
 [!code-cpp[System.Char.IsSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator1.cpp#1)]
 [!code-csharp[System.Char.IsSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator1.cs#1)]
 [!code-vb[System.Char.IsSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSeparator : string * int -&gt; bool" Usage="System.char.IsSeparator (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-823">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-823">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-824">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-824">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-825">지정된 문자열의 지정된 위치에 있는 문자가 구분 문자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-825">Indicates whether the character at the specified position in a specified string is categorized as a separator character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-826">
            <see langword="true" />의 <paramref name="index" /> 위치에 있는 문자가 구분 문자이면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-826">
              <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a separator character; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-827">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-827">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="07cb0-828">유니코드 표준 구분 기호 중 세 가지 하위 범주를 인식합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-828">The Unicode standard recognizes three subcategories of separators:</span></span>  
  
-   <span data-ttu-id="07cb0-829">공백 구분 기호 (의 <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> 범주), \u0020 등의 문자를 포함 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-829">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>  
  
-   <span data-ttu-id="07cb0-830">줄 구분 기호 (의 <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> 범주), \u2028을 포함 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-830">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>  
  
-   <span data-ttu-id="07cb0-831">단락 구분 기호 (의 <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> 범주), \u2029 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-831">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="07cb0-832">제어 문자를 문자 \u000A (LF), \u000c. 요 (FF) 및 \u000D (CR)를 분류 하는 유니코드 표준 (의 멤버는 <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> 범주), 구분 기호 문자가 아니라 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-832">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-833">다음 예제에서는 <xref:System.Char.IsSeparator%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-833">The following example demonstrates <xref:System.Char.IsSeparator%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSeparator#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator.cpp#10)]
 [!code-csharp[System.Char.IsSeparator#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator.cs#10)]
 [!code-vb[System.Char.IsSeparator#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-834">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-834">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-835">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-835">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-836">문자에 서로게이트 코드 단위가 있는지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-836">Indicates whether a character has a surrogate code unit.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsSurrogate : char -&gt; bool" Usage="System.char.IsSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-837">평가할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-837">The Unicode character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-838">지정된 문자에 서로게이트 코드 단위가 있는지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-838">Indicates whether the specified character has a surrogate code unit.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-839">
            <see langword="true" />가 상위 서로게이트 또는 하위 서로게이트이면 <paramref name="c" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-839">
              <see langword="true" /> if <paramref name="c" /> is either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-840">서로게이트는 한 <xref:System.Char> u+d800부터 U + DFFF 범위에는 utf-16 코드 단위를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-840">A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF.</span></span> <span data-ttu-id="07cb0-841">이 범위에서 코드 단위를 사용 하 여 각 문자에 속하는 <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-841">Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> category.</span></span> <span data-ttu-id="07cb0-842">개별 surrogate 코드 단위를 해석 하지 않고 자체를 갖지만 서로게이트 쌍의 일부로 사용 되는 경우에 의미가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-842">The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair.</span></span> <span data-ttu-id="07cb0-843">Unicode Standard 부분 서로게이트 쌍에 대 한 자세한 내용은 참조는 [유니코드 홈페이지](http://go.microsoft.com/fwlink/?linkid=37123)합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-843">For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?linkid=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-844">다음 예제는 <xref:System.Char.IsSurrogate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-844">The following example demonstrates the <xref:System.Char.IsSurrogate%2A> method.</span></span>  
  
 [!code-cpp[System.Char.IsSurrogate#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSurrogate : string * int -&gt; bool" Usage="System.char.IsSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-845">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-845">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-846">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-846">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-847">지정된 문자열의 지정된 위치에 있는 문자에 서로게이트 코드 단위가 있는지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-847">Indicates whether the character at the specified position in a specified string has a surrogate code unit.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-848">
            <paramref name="index" />에서 <paramref name="s" /> 위치에 있는 문자가 상위 서로게이트 또는 하위 서로게이트이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-848">
              <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-849">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-849">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="07cb0-850">서로게이트는 한 <xref:System.Char> u+d800부터 U + DFFF 범위에는 utf-16 코드 단위를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-850">A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF.</span></span> <span data-ttu-id="07cb0-851">이 범위에서 코드 단위를 사용 하 여 각 문자에 속하는 <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> 범주입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-851">Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> category.</span></span> <span data-ttu-id="07cb0-852">개별 surrogate 코드 단위를 해석 하지 않고 자체를 갖지만 서로게이트 쌍의 일부로 사용 되는 경우에 의미가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-852">The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair.</span></span> <span data-ttu-id="07cb0-853">Unicode Standard 부분 서로게이트 쌍에 대 한 자세한 내용은 참조는 [유니코드 홈페이지](http://go.microsoft.com/fwlink/?linkid=37123)합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-853">For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?linkid=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-854">다음 코드 예제에서는 <xref:System.Char.IsSurrogate%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-854">The following code example demonstrates <xref:System.Char.IsSurrogate%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSurrogate#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-855">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-855">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-856">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-856">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSurrogatePair">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-857">지정한 두 개의 <see cref="T:System.Char" /> 개체가 서로게이트 쌍을 형성하는지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-857">Indicates whether two specified <see cref="T:System.Char" /> objects form a surrogate pair.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogatePair (highSurrogate As Char, lowSurrogate As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogatePair(char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="F#" Value="static member IsSurrogatePair : char * char -&gt; bool" Usage="System.char.IsSurrogatePair (highSurrogate, lowSurrogate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="highSurrogate">
          <span data-ttu-id="07cb0-858">서로게이트 쌍의 high surrogate로 확인할 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-858">The character to evaluate as the high surrogate of a surrogate pair.</span>
          </span>
        </param>
        <param name="lowSurrogate">
          <span data-ttu-id="07cb0-859">서로게이트 쌍의 low surrogate로 확인할 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-859">The character to evaluate as the low surrogate of a surrogate pair.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-860">지정한 두 개의 <see cref="T:System.Char" /> 개체가 서로게이트 쌍을 형성하는지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-860">Indicates whether the two specified <see cref="T:System.Char" /> objects form a surrogate pair.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-861">
            <see langword="true" /> 매개 변수의 숫자 값이 U+D800부터 U+DBFF까지의 범위에 있고 <paramref name="highSurrogate" /> 매개 변수의 숫자 값이 U+DC00부터 U+DFFF까지의 범위에 있으면 <paramref name="lowSurrogate" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-861">
              <see langword="true" /> if the numeric value of the <paramref name="highSurrogate" /> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <paramref name="lowSurrogate" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-862">일반적으로 단일 문자는 단일 16 비트 유니코드 코드 단위로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-862">Ordinarily, a single character is represented by a single 16-bit Unicode code unit.</span></span> <span data-ttu-id="07cb0-863">Utf-16 인코딩의 단일 추상 문자 두 명의 16 비트 코드 단위로 표시할 수 있는 서로게이트 쌍도 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-863">UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units.</span></span> <span data-ttu-id="07cb0-864">첫 번째 코드 단위에 있는 값의 범위는 u+d800부터 U + dbff 사이의은 상위 서로게이트입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-864">The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate.</span></span> <span data-ttu-id="07cb0-865">값이 U+dc00부터에서 U + dfff 범위, 두 번째 코드 단위, low surrogate가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-865">The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate.</span></span> <span data-ttu-id="07cb0-866">개별 서로게이트 코드 포인트는 자체적으로 해석 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-866">Individual surrogate code points have no interpretation of their own.</span></span> <span data-ttu-id="07cb0-867">서로게이트 및 유니코드 표준에 대 한 자세한 내용은 참조는 [유니코드 홈페이지](http://go.microsoft.com/fwlink/?LinkId=37123)합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-867">For more information about surrogates and the Unicode Standard, see the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-868">다음 코드 예제는 <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, 및 <xref:System.Char.IsSurrogatePair%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-868">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogatePair (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogatePair(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSurrogatePair : string * int -&gt; bool" Usage="System.char.IsSurrogatePair (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-869">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-869">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-870">
            <c>s</c> 내에서 확인할 문자 쌍의 시작 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-870">The starting position of the pair of characters to evaluate within <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-871">문자열의 지정한 위치에 있는 두 개의 인접한 <see cref="T:System.Char" /> 개체가 서로게이트 쌍을 형성하는지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-871">Indicates whether two adjacent <see cref="T:System.Char" /> objects at a specified position in a string form a surrogate pair.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-872">
            <paramref name="s" /> 매개 변수에 <paramref name="index" /> 위치와 <paramref name="index" /> + 1 위치에 인접한 문자가 포함되고, <paramref name="index" /> 위치에 있는 문자의 숫자 값이 U+D800부터 U+DBFF까지의 범위에 있으며, <paramref name="index" />+1 위치에 있는 문자의 숫자 값이 U+DC00부터 U+DFFF까지의 범위에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-872">
              <see langword="true" /> if the <paramref name="s" /> parameter includes adjacent characters at positions <paramref name="index" /> and <paramref name="index" /> + 1, and the numeric value of the character at position <paramref name="index" /> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <paramref name="index" />+1 ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-873">일반적으로 단일 문자는 단일 16 비트 유니코드 코드 단위로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-873">Ordinarily, a single character is represented by a single 16-bit Unicode code unit.</span></span> <span data-ttu-id="07cb0-874">Utf-16 인코딩의 단일 추상 문자 두 명의 16 비트 코드 단위로 표시할 수 있는 서로게이트 쌍도 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-874">UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units.</span></span> <span data-ttu-id="07cb0-875">첫 번째 코드 단위에 있는 값의 범위는 u+d800부터 U + dbff 사이의은 상위 서로게이트입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-875">The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate.</span></span> <span data-ttu-id="07cb0-876">값이 U+dc00부터에서 U + dfff 범위, 두 번째 코드 단위, low surrogate가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-876">The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate.</span></span> <span data-ttu-id="07cb0-877">개별 서로게이트 코드 포인트는 자체적으로 해석 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-877">Individual surrogate code points have no interpretation of their own.</span></span> <span data-ttu-id="07cb0-878">서로게이트 및 유니코드 표준에 대 한 자세한 내용은 참조는 [유니코드 홈페이지](http://go.microsoft.com/fwlink/?LinkId=37123)합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-878">For more information about surrogates and the Unicode Standard, see the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-879">다음 코드 예제는 <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, 및 <xref:System.Char.IsSurrogatePair%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-879">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-880">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-880">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-881">
            <paramref name="index" />가 <paramref name="s" /> 내의 위치가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-881">
              <paramref name="index" /> is not a position within <paramref name="s" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSymbol">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-882">유니코드 문자가 기호 문자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-882">Indicates whether a Unicode character is categorized as a symbol character.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-883">올바른 기호에서 다음 범주의 멤버인 <xref:System.Globalization.UnicodeCategory>: `MathSymbol`를 `CurrencySymbol`, `ModifierSymbol`, 및 `OtherSymbol`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-883">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>  
  
 <span data-ttu-id="07cb0-884">유니코드 표준의 기호는 느슨하게 정의 된 다음을 포함 하는 문자 집합:</span><span class="sxs-lookup"><span data-stu-id="07cb0-884">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>  
  
-   <span data-ttu-id="07cb0-885">통화 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-885">Currency symbols.</span></span>  
  
-   <span data-ttu-id="07cb0-886">물론 수학 영숫자 기호 등의 ℅를 №, 기호 집합을 포함 하는 글자꼴 기호 및™입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-886">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>  
  
-   <span data-ttu-id="07cb0-887">위 첨자 및 아래 첨자와 같은 숫자 양식입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-887">Number forms, such as subscripts and superscripts.</span></span>  
  
-   <span data-ttu-id="07cb0-888">수학 연산자 및 화살표입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-888">Mathematical operators and arrows.</span></span>  
  
-   <span data-ttu-id="07cb0-889">기하학적 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-889">Geometric symbols.</span></span>  
  
-   <span data-ttu-id="07cb0-890">기술 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-890">Technical symbols.</span></span>  
  
-   <span data-ttu-id="07cb0-891">점자 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-891">Braille patterns.</span></span>  
  
-   <span data-ttu-id="07cb0-892">딩뱃 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-892">Dingbats.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(char c);" />
      <MemberSignature Language="F#" Value="static member IsSymbol : char -&gt; bool" Usage="System.char.IsSymbol c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-893">평가할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-893">The Unicode character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-894">유니코드 문자가 기호 문자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-894">Indicates whether the specified Unicode character is categorized as a symbol character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-895">
            <paramref name="c" />가 기호 문자이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-895">
              <see langword="true" /> if <paramref name="c" /> is a symbol character; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-896">올바른 기호에서 다음 범주의 멤버인 <xref:System.Globalization.UnicodeCategory>: `MathSymbol`를 `CurrencySymbol`, `ModifierSymbol`, 및 `OtherSymbol`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-896">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>  
  
 <span data-ttu-id="07cb0-897">유니코드 표준의 기호는 느슨하게 정의 된 다음을 포함 하는 문자 집합:</span><span class="sxs-lookup"><span data-stu-id="07cb0-897">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>  
  
-   <span data-ttu-id="07cb0-898">통화 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-898">Currency symbols.</span></span>  
  
-   <span data-ttu-id="07cb0-899">물론 수학 영숫자 기호 등의 ℅를 №, 기호 집합을 포함 하는 글자꼴 기호 및™입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-899">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>  
  
-   <span data-ttu-id="07cb0-900">위 첨자 및 아래 첨자와 같은 숫자 양식입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-900">Number forms, such as subscripts and superscripts.</span></span>  
  
-   <span data-ttu-id="07cb0-901">수학 연산자 및 화살표입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-901">Mathematical operators and arrows.</span></span>  
  
-   <span data-ttu-id="07cb0-902">기하학적 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-902">Geometric symbols.</span></span>  
  
-   <span data-ttu-id="07cb0-903">기술 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-903">Technical symbols.</span></span>  
  
-   <span data-ttu-id="07cb0-904">점자 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-904">Braille patterns.</span></span>  
  
-   <span data-ttu-id="07cb0-905">딩뱃 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-905">Dingbats.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-906">다음 코드 예제에서는 <xref:System.Char.IsSymbol%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-906">The following code example demonstrates <xref:System.Char.IsSymbol%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSymbol#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSymbol : string * int -&gt; bool" Usage="System.char.IsSymbol (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-907">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-907">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-908">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-908">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-909">지정된 문자열의 지정된 위치에 있는 문자가 기호 문자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-909">Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-910">
            <paramref name="index" />의 <paramref name="s" /> 위치에 있는 문자가 기호 문자이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-910">
              <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a symbol character; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-911">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-911">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="07cb0-912">올바른 기호에서 다음 범주의 멤버인 <xref:System.Globalization.UnicodeCategory?displayProperty=nameWithType>: `MathSymbol`를 `CurrencySymbol`, `ModifierSymbol`, 및 `OtherSymbol`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-912">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory?displayProperty=nameWithType>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>  
  
 <span data-ttu-id="07cb0-913">유니코드 표준의 기호는 느슨하게 정의 된 다음을 포함 하는 문자 집합:</span><span class="sxs-lookup"><span data-stu-id="07cb0-913">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>  
  
-   <span data-ttu-id="07cb0-914">통화 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-914">Currency symbols.</span></span>  
  
-   <span data-ttu-id="07cb0-915">물론 수학 영숫자 기호 등의 ℅를 №, 기호 집합을 포함 하는 글자꼴 기호 및™입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-915">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>  
  
-   <span data-ttu-id="07cb0-916">위 첨자 및 아래 첨자와 같은 숫자 양식입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-916">Number forms, such as subscripts and superscripts.</span></span>  
  
-   <span data-ttu-id="07cb0-917">수학 연산자 및 화살표입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-917">Mathematical operators and arrows.</span></span>  
  
-   <span data-ttu-id="07cb0-918">기하학적 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-918">Geometric symbols.</span></span>  
  
-   <span data-ttu-id="07cb0-919">기술 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-919">Technical symbols.</span></span>  
  
-   <span data-ttu-id="07cb0-920">점자 패턴입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-920">Braille patterns.</span></span>  
  
-   <span data-ttu-id="07cb0-921">딩뱃 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-921">Dingbats.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-922">다음 코드 예제에서는 <xref:System.Char.IsSymbol%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-922">The following code example demonstrates <xref:System.Char.IsSymbol%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSymbol#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-923">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-923">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-924">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-924">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-925">유니코드 자모가 대문자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-925">Indicates whether a Unicode character is categorized as an uppercase letter.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(char c);" />
      <MemberSignature Language="F#" Value="static member IsUpper : char -&gt; bool" Usage="System.char.IsUpper c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-926">평가할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-926">The Unicode character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-927">유니코드 자모가 대문자인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-927">Indicates whether the specified Unicode character is categorized as an uppercase letter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-928">
            <see langword="true" />가 대문자이면 <paramref name="c" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-928">
              <see langword="true" /> if <paramref name="c" /> is an uppercase letter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-929">유효한 대문자 다음 범주의 멤버인 <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-929">Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsLower(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsUpper : string * int -&gt; bool" Usage="System.char.IsUpper (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-930">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-930">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-931">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-931">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-932">지정된 문자열의 지정된 위치에 있는 문자가 대문자 자모인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-932">Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-933">
            <paramref name="index" />의 <paramref name="s" /> 위치에 있는 자모가 대문자이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-933">
              <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is an uppercase letter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-934">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-934">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="07cb0-935">유효한 대문자 다음 범주의 멤버인 <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-935">Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-936">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-936">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-937">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-937">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsWhiteSpace">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-938">유니코드 문자가 공백인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-938">Indicates whether a Unicode character is categorized as white space.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-939">공백 문자는 유니코드 문자:</span><span class="sxs-lookup"><span data-stu-id="07cb0-939">White space characters are the following Unicode characters:</span></span>  
  
-   <span data-ttu-id="07cb0-940">멤버는 <xref:System.Globalization.UnicodeCategory.SpaceSeparator> 범주를 포함 하는 문자는 공백 (u+0020), 오 검 문자 공간 표시 (U + 1680), EN 쿼드 (U + 2000), EM 쿼드 (U + 2001), EN 공간 (U + 2002), EM (U + 2003) 공간 전각 당 3 (U + 2004), EM 당 4 개 공간 (U + 2005), EM 당 6 (U + 2006) 공간을 공간 그림 (U + 2007), 문장 부호 (U + 2008)를 씬 공간 (U + 2009), 공간 십자선 공간 (U + 200A), 좁은 비분할 공간 (U + 202F), 보통 수학 공간 (U + 205F), 및 표의 문자 공백 ((u+3000).</span><span class="sxs-lookup"><span data-stu-id="07cb0-940">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator> category, which includes the characters SPACE (U+0020), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>  
  
-   <span data-ttu-id="07cb0-941">멤버는 <xref:System.Globalization.UnicodeCategory.LineSeparator> 줄 구분 기호 문자 전적으로 구성 된 범주 (u+2028).</span><span class="sxs-lookup"><span data-stu-id="07cb0-941">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>  
  
-   <span data-ttu-id="07cb0-942">멤버는 <xref:System.Globalization.UnicodeCategory.ParagraphSeparator> 단락 구분 기호 문자 전적으로 구성 된 범주 (u+2029).</span><span class="sxs-lookup"><span data-stu-id="07cb0-942">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>  
  
-   <span data-ttu-id="07cb0-943">문자가 문자 집계 ((u+0009), 줄 바꿈 (U + 000A), 줄 집계 (U + 000B), 폼 피드 (U + 000 C), 캐리지 리턴 (U+000d), 다음 줄 (U + 0085), 및 비분할 공간 (U + 00A0).</span><span class="sxs-lookup"><span data-stu-id="07cb0-943">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), NEXT LINE (U+0085), and NO-BREAK SPACE (U+00A0).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(char c);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : char -&gt; bool" Usage="System.char.IsWhiteSpace c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-944">평가할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-944">The Unicode character to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-945">유니코드 문자가 공백인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-945">Indicates whether the specified Unicode character is categorized as white space.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-946">
            <see langword="true" />가 공백이면 <paramref name="c" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-946">
              <see langword="true" /> if <paramref name="c" /> is white space; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-947">공백 문자는 유니코드 문자:</span><span class="sxs-lookup"><span data-stu-id="07cb0-947">White space characters are the following Unicode characters:</span></span>  
  
-   <span data-ttu-id="07cb0-948">멤버는 <xref:System.Globalization.UnicodeCategory.SpaceSeparator> 공백 문자를 포함 하는 범주 (u+0020), 비분할 공간 (U + 00A0), 오 검 문자 공간 표시 (U + 1680), EN 쿼드 (U + 2000), EM 쿼드 (U + 2001), EN 공간 (U + 2002), EM (U + 2003) 공간 전각 당 3 (U + 2004), EM 당 4 개 공간 ( U+ 2005), 6-EM 당 공간 (U + 2006), 그림 공간 (U + 2007), 문장 부호 (U + 2008)를 씬 공간 (U + 2009), 공간 십자선 공간 (U + 200A), 좁은 비분할 공간 (U + 202F), 보통 수학 공간 (U + 205F), 및 표의 문자 공백 ((u+3000).</span><span class="sxs-lookup"><span data-stu-id="07cb0-948">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>  
  
-   <span data-ttu-id="07cb0-949">멤버는 <xref:System.Globalization.UnicodeCategory.LineSeparator> 줄 구분 기호 문자 전적으로 구성 된 범주 (u+2028).</span><span class="sxs-lookup"><span data-stu-id="07cb0-949">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>  
  
-   <span data-ttu-id="07cb0-950">멤버는 <xref:System.Globalization.UnicodeCategory.ParagraphSeparator> 단락 구분 기호 문자 전적으로 구성 된 범주 (u+2029).</span><span class="sxs-lookup"><span data-stu-id="07cb0-950">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>  
  
-   <span data-ttu-id="07cb0-951">문자가 문자 집계 ((u+0009), (U + 000A) 피드, 줄 집계 (U + 000B), 폼 피드 (U + 000 C), 캐리지 리턴 (U+000d), 정격 및 다음 (U + 0085).</span><span class="sxs-lookup"><span data-stu-id="07cb0-951">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-952">다음 예제는 <xref:System.Char.IsWhiteSpace%28System.Char%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-952">The following example demonstrates the <xref:System.Char.IsWhiteSpace%28System.Char%29> method.</span></span>  
  
 [!code-cpp[System.Char.IsWhiteSpace#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : string * int -&gt; bool" Usage="System.char.IsWhiteSpace (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-953">문자열</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-953">A string.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="07cb0-954">
            <c>s</c>에서 평가할 문자의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-954">The position of the character to evaluate in <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-955">지정된 문자열의 지정된 위치에 있는 문자가 공백인지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-955">Indicates whether the character at the specified position in a specified string is categorized as white space.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-956">
            <paramref name="index" />의 <paramref name="s" /> 위치에 있는 문자가 공백이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-956">
              <see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is white space; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-957">0부터 시작 하는 문자열의 문자 위치가 인덱싱됩니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-957">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="07cb0-958">공백 문자는 유니코드 문자:</span><span class="sxs-lookup"><span data-stu-id="07cb0-958">White space characters are the following Unicode characters:</span></span>  
  
-   <span data-ttu-id="07cb0-959">멤버는 <xref:System.Globalization.UnicodeCategory.SpaceSeparator> 공백 문자를 포함 하는 범주 (u+0020), 비분할 공간 (U + 00A0), 오 검 문자 공간 표시 (U + 1680), EN 쿼드 (U + 2000), EM 쿼드 (U + 2001), EN 공간 (U + 2002), EM (U + 2003) 공간 전각 당 3 (U + 2004), EM 당 4 개 공간 ( U+ 2005), 6-EM 당 공간 (U + 2006), 그림 공간 (U + 2007), 문장 부호 (U + 2008)를 씬 공간 (U + 2009), 공간 십자선 공간 (U + 200A), 좁은 비분할 공간 (U + 202F), 보통 수학 공간 (U + 205F), 및 표의 문자 공백 ((u+3000).</span><span class="sxs-lookup"><span data-stu-id="07cb0-959">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>  
  
-   <span data-ttu-id="07cb0-960">멤버는 <xref:System.Globalization.UnicodeCategory.LineSeparator> 줄 구분 기호 문자 전적으로 구성 된 범주 (u+2028).</span><span class="sxs-lookup"><span data-stu-id="07cb0-960">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>  
  
-   <span data-ttu-id="07cb0-961">멤버는 <xref:System.Globalization.UnicodeCategory.ParagraphSeparator> 단락 구분 기호 문자 전적으로 구성 된 범주 (u+2029).</span><span class="sxs-lookup"><span data-stu-id="07cb0-961">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>  
  
-   <span data-ttu-id="07cb0-962">문자가 문자 집계 ((u+0009), (U + 000A) 피드, 줄 집계 (U + 000B), 폼 피드 (U + 000 C), 캐리지 리턴 (U+000d), 정격 및 다음 (U + 0085).</span><span class="sxs-lookup"><span data-stu-id="07cb0-962">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-963">다음 코드 예제에서는 <xref:System.Char.IsWhiteSpace%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-963">The following code example demonstrates <xref:System.Char.IsWhiteSpace%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsWhiteSpace#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-964">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-964">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="07cb0-965">
            <paramref name="index" />가 0보다 작거나 <paramref name="s" />의 마지막 위치보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-965">
              <paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const char MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char MaxValue;" />
      <MemberSignature Language="F#" Value="val mutable MaxValue : char" Usage="System.char.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-966">
            <see cref="T:System.Char" />의 가능한 최대값을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-966">Represents the largest possible value of a <see cref="T:System.Char" />.</span>
          </span>
          <span data-ttu-id="07cb0-967">이 필드는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-967">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-968">이 상수의 값은 16 진수 0xFFFF입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-968">The value of this constant is hexadecimal 0xFFFF.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const char MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MinValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char MinValue;" />
      <MemberSignature Language="F#" Value="val mutable MinValue : char" Usage="System.char.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-969">
            <see cref="T:System.Char" />의 최소값을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-969">Represents the smallest possible value of a <see cref="T:System.Char" />.</span>
          </span>
          <span data-ttu-id="07cb0-970">이 필드는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-970">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-971">이 상수의 값은 16 진수 0x00입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-971">The value of this constant is hexadecimal 0x00.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static char Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; char" Usage="System.char.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-972">단일 문자가 들어 있는 문자열이거나 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-972">A string that contains a single character, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-973">지정된 문자열의 값을 해당하는 유니코드 문자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-973">Converts the value of the specified string to its equivalent Unicode character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-974">
            <paramref name="s" />의 유일한 문자에 해당하는 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-974">A Unicode character equivalent to the sole character in <paramref name="s" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="07cb0-975">다음 코드 예제에서는 <xref:System.Char.Parse%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-975">The following code example demonstrates <xref:System.Char.Parse%2A>.</span></span>  
  
 [!code-cpp[System.Char.Parse#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Parse/CPP/parse.cpp#15)]
 [!code-csharp[System.Char.Parse#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Parse/CS/parse.cs#15)]
 [!code-vb[System.Char.Parse#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Parse/VB/parse.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-976">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-976">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="07cb0-977">
            <paramref name="s" />의 길이가 1이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-977">The length of <paramref name="s" /> is not 1.</span>
          </span>
        </exception>
        <altmember cref="M:System.Char.ToString" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-978">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-978">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-979">**참고** 이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-979">**Note** This conversion is not supported.</span>
          </span>
          <span data-ttu-id="07cb0-980">그렇게 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-980">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-981">이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-981">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="07cb0-982">값이 반환되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-982">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="07cb0-983">이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-983">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-984">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-984">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-985">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-985">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-986">현재 <see cref="T:System.Char" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-986">The converted value of the current <see cref="T:System.Char" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-987">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="07cb0-987">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="07cb0-988"><xref:System.Char> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-988">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="07cb0-989">권장된 대안 호출 하는 것은 <xref:System.Convert.ToByte%28System.Char%29?displayProperty=nameWithType> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-989">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-990">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-990">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-991">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-991">For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-992">현재 <see cref="T:System.Char" /> 개체의 값이 그대로 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-992">The value of the current <see cref="T:System.Char" /> object unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-993">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="07cb0-993">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="07cb0-994"><xref:System.Char> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-994">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-995">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-995">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-996">**참고** 이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-996">**Note** This conversion is not supported.</span>
          </span>
          <span data-ttu-id="07cb0-997">그렇게 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-997">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-998">값이 반환되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-998">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="07cb0-999">이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-999">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-1000">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1000">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1001">**참고** 이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1001">**Note** This conversion is not supported.</span>
          </span>
          <span data-ttu-id="07cb0-1002">그렇게 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1002">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1003">값이 반환되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1003">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="07cb0-1004">이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1004">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-1005">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1005">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1006">**참고** 이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1006">**Note** This conversion is not supported.</span>
          </span>
          <span data-ttu-id="07cb0-1007">그렇게 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1007">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1008">값이 반환되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1008">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="07cb0-1009">이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1009">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-1010">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1010">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1011">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1011">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1012">현재 <see cref="T:System.Char" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1012">The converted value of the current <see cref="T:System.Char" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1013">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="07cb0-1013">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="07cb0-1014"><xref:System.Char> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1014">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="07cb0-1015">권장된 대안 호출 하는 것은 <xref:System.Convert.ToInt16%28System.Char%29?displayProperty=nameWithType> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1015">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-1016">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1016">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1017">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1017">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1018">현재 <see cref="T:System.Char" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1018">The converted value of the current <see cref="T:System.Char" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1019">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="07cb0-1019">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="07cb0-1020"><xref:System.Char> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1020">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="07cb0-1021">권장된 대안 호출 하는 것은 <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1021">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-1022">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1022">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1023">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1023">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1024">현재 <see cref="T:System.Char" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1024">The converted value of the current <see cref="T:System.Char" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1025">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="07cb0-1025">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="07cb0-1026"><xref:System.Char> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1026">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="07cb0-1027">권장된 대안 호출 하는 것은 <xref:System.Convert.ToInt64%28System.Char%29?displayProperty=nameWithType> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1027">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-1028">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1028">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1029">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1029">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1030">현재 <see cref="T:System.Char" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1030">The converted value of the current <see cref="T:System.Char" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1031">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="07cb0-1031">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="07cb0-1032"><xref:System.Char> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1032">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="07cb0-1033">권장된 대안 호출 하는 것은 <xref:System.Convert.ToSByte%28System.Char%29?displayProperty=nameWithType> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1033">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-1034">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1034">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1035">**참고** 이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1035">**Note** This conversion is not supported.</span>
          </span>
          <span data-ttu-id="07cb0-1036">그렇게 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1036">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1037">값이 반환되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1037">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="07cb0-1038">이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1038">This conversion is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="07cb0-1039">
            <see cref="T:System.Type" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1039">A <see cref="T:System.Type" /> object.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="07cb0-1040">
            <see cref="T:System.IFormatProvider" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1040">An <see cref="T:System.IFormatProvider" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1041">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1041">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1042">지정된 형식의 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1042">An object of the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1043">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="07cb0-1043">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="07cb0-1044"><xref:System.Char> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1044">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="07cb0-1045">권장된 대안 호출 하는 것은 <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1045">The recommended alternative is to call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-1046">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1046">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="07cb0-1047">현재 <see cref="T:System.Char" /> 개체의 값을 <paramref name="type" /> 매개 변수로 지정된 형식으로 변환할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1047">The value of the current <see cref="T:System.Char" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-1048">
            <see cref="T:System.IFormatProvider" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1048">An <see cref="T:System.IFormatProvider" /> object.</span>
          </span>
          <span data-ttu-id="07cb0-1049">(<c>provider</c> 매개 변수가 무시되므로 <see langword="null" />을 지정합니다.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1049">(Specify <see langword="null" /> because the <c>provider</c> parameter is ignored.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1050">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1050">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1051">현재 <see cref="T:System.Char" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1051">The converted value of the current <see cref="T:System.Char" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1052">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="07cb0-1052">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="07cb0-1053"><xref:System.Char> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1053">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="07cb0-1054">권장된 대안 호출 하는 것은 <xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=nameWithType> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1054">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-1055">
            <see cref="T:System.IFormatProvider" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1055">An <see cref="T:System.IFormatProvider" /> object.</span>
          </span>
          <span data-ttu-id="07cb0-1056">(<c>provider</c> 매개 변수가 무시되므로 <see langword="null" />을 지정합니다.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1056">(Specify <see langword="null" /> because the <c>provider</c> parameter is ignored.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1057">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1057">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1058">현재 <see cref="T:System.Char" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1058">The converted value of the current <see cref="T:System.Char" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1059">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="07cb0-1059">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="07cb0-1060"><xref:System.Char> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1060">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="07cb0-1061">권장된 대안 호출 하는 것은 <xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=nameWithType> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1061">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-1062">
            <see cref="T:System.IFormatProvider" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1062">An <see cref="T:System.IFormatProvider" /> object.</span>
          </span>
          <span data-ttu-id="07cb0-1063">(<c>provider</c> 매개 변수가 무시되므로 <see langword="null" />을 지정합니다.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1063">(Specify <see langword="null" /> because the <c>provider</c> parameter is ignored.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1064">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1064">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1065">현재 <see cref="T:System.Char" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1065">The converted value of the current <see cref="T:System.Char" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1066">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="07cb0-1066">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="07cb0-1067"><xref:System.Char> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1067">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="07cb0-1068">권장된 대안 호출 하는 것은 <xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=nameWithType> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1068">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-1069">유니코드 문자를 해당하는 소문자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1069">Converts the value of a Unicode character to its lowercase equivalent.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLower(char c);" />
      <MemberSignature Language="F#" Value="static member ToLower : char -&gt; char" Usage="System.char.ToLower c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-1070">변환할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1070">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1071">유니코드 문자를 해당하는 소문자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1071">Converts the value of a Unicode character to its lowercase equivalent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1072">
            <paramref name="c" />에 해당하는 소문자이거나, <paramref name="c" />가 이미 소문자이거나 영문자가 아닌 경우 변경되지 않은 <paramref name="c" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1072">The lowercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1073">대/소문자 구분 규칙은 현재 문화권에서 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1073">Casing rules are obtained from the current culture.</span></span>  
  
 <span data-ttu-id="07cb0-1074">사용 하 여 <xref:System.String.ToLower%2A?displayProperty=nameWithType> 하는 문자열을 소문자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1074">Use <xref:System.String.ToLower%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-1075">다음 예제에서는 <xref:System.Char.ToLower%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1075">The following example demonstrates <xref:System.Char.ToLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToLower#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="07cb0-1076">
            <para>에 설명 된 대로 [를 사용 하 여 문자열에 대 한 모범 사례](~/docs/standard/base-types/best-practices-strings.md), 기본 값으로 대체 하는 문자-대/소문자 구분 및 대/소문자 문자열 메서드를 호출 하는 것이 좋습니다. 대신, 매개 변수를 명시적으로 지정 해야 하는 메서드를 호출 해야 합니다. 문자를 현재 문화권의 대/소문자 규칙을 사용 하 여 소문자로 변환할 호출을 <see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" /> 값을 사용 하 여 메서드 오버 로드 <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> 에 대 한 해당 <paramref name="culture" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1076">
              <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values. Instead, you should call methods that require parameters to be explicitly specified. To convert a character to lowercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (c As Char, culture As CultureInfo) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLower(char c, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToLower : char * System.Globalization.CultureInfo -&gt; char" Usage="System.char.ToLower (c, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-1077">변환할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1077">The Unicode character to convert.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="07cb0-1078">문화권별 대/소문자 규칙을 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1078">An object that supplies culture-specific casing rules.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1079">문화권별 형식 지정 정보를 사용하여 지정된 유니코드 문자의 값을 해당하는 소문자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1079">Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1080">
            <paramref name="c" />에 따라 수정된 <paramref name="culture" />에 해당하는 소문자이거나, <paramref name="c" />가 이미 소문자이거나 영문자가 아닌 경우 변경되지 않은 <paramref name="c" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1080">The lowercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1081">사용 하 여 <xref:System.String.ToLower%2A?displayProperty=nameWithType> 하는 문자열을 소문자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1081">Use <xref:System.String.ToLower%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-1082">다음 코드 예제에서는 <xref:System.Char.ToLower%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1082">The following code example demonstrates <xref:System.Char.ToLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToLower#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-1083">
            <paramref name="culture" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1083">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public static char ToLowerInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLowerInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLowerInvariant(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLowerInvariant (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLowerInvariant(char c);" />
      <MemberSignature Language="F#" Value="static member ToLowerInvariant : char -&gt; char" Usage="System.char.ToLowerInvariant c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-1084">변환할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1084">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1085">고정 문화권의 대/소문자 규칙을 사용하여 유니코드 문자의 값을 해당하는 소문자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1085">Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1086">
            <paramref name="c" /> 매개 변수에 해당하는 소문자이거나, <paramref name="c" />가 이미 소문자이거나 영문자가 아닌 경우 변경되지 않은 <paramref name="c" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1086">The lowercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1087">응용 프로그램을 현재 문화권에 의해 영향을 받는 아니며 예측 가능한 방식으로 변경 하는 문자의 대/소문자에 따라 달라 집니다 경우 사용 된 <xref:System.Char.ToLowerInvariant%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1087">If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, then use the <xref:System.Char.ToLowerInvariant%2A> method.</span></span> <span data-ttu-id="07cb0-1088">합니다 <xref:System.Char.ToLowerInvariant%2A> 메서드는 `ToLower(Char, CultureInfo.InvariantCulture)`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1088">The <xref:System.Char.ToLowerInvariant%2A> method is equivalent to `ToLower(Char, CultureInfo.InvariantCulture)`.</span></span>  
  
 <span data-ttu-id="07cb0-1089">사용 하 여 <xref:System.String.ToLowerInvariant%2A?displayProperty=nameWithType> 하는 문자열을 소문자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1089">Use <xref:System.String.ToLowerInvariant%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-1090">이 인스턴스의 값을 해당하는 문자열 표현으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1090">Converts the value of this instance to its equivalent string representation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="char.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-1091">이 인스턴스의 값을 해당하는 문자열 표현으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1091">Converts the value of this instance to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1092">이 인스턴스 값의 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1092">The string representation of the value of this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="07cb0-1093">다음 코드 예제에서는 <xref:System.Char.ToString%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1093">The following code example demonstrates <xref:System.Char.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (c As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(char c);" />
      <MemberSignature Language="F#" Value="static member ToString : char -&gt; string" Usage="System.char.ToString c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-1094">변환할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1094">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1095">지정된 유니코드 문자를 해당하는 문자열 표현으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1095">Converts the specified Unicode character to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1096">
            <paramref name="c" /> 값의 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1096">The string representation of the value of <paramref name="c" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="07cb0-1097">다음 코드 예제에서는 <xref:System.Char.ToString%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1097">The following code example demonstrates <xref:System.Char.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="char.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="07cb0-1098">(예약됨) 문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1098">(Reserved) An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1099">지정된 문화권별 형식 정보를 사용하여 이 인스턴스의 값을 해당 문자열 표현으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1099">Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1100">이 인스턴스의 값을 <paramref name="provider" />에 지정된 내용에 따라 나타낸 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1100">The string representation of the value of this instance as specified by <paramref name="provider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1101">`provider` 매개 변수가 무시 됩니다;이 작업에 참여 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1101">The `provider` parameter is ignored; it does not participate in this operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-1102">다음 코드 예제에서는 오버 로드 <xref:System.Char.ToString%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1102">The following code example demonstrates an overload of <xref:System.Char.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="07cb0-1103">유니코드 문자를 해당하는 대문자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1103">Converts the value of a Unicode character to its uppercase equivalent.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpper(char c);" />
      <MemberSignature Language="F#" Value="static member ToUpper : char -&gt; char" Usage="System.char.ToUpper c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-1104">변환할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1104">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1105">유니코드 문자를 해당하는 대문자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1105">Converts the value of a Unicode character to its uppercase equivalent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1106">
            <paramref name="c" />에 해당하는 대문자이거나, <paramref name="c" />가 이미 대문자이거나 해당하는 대문자가 없거나 영문자가 아닌 경우 변경되지 않은 <paramref name="c" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1106">The uppercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1107">대/소문자 구분 규칙은 현재 문화권에서 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1107">Casing rules are obtained from the current culture.</span></span>  
  
 <span data-ttu-id="07cb0-1108">사용 하 여 <xref:System.String.ToUpper%2A?displayProperty=nameWithType> 문자열을 대문자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1108">Use <xref:System.String.ToUpper%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-1109">다음 예제에서는 각 문자 배열에 해당 대문자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1109">The following example converts each character in an array to its uppercase equivalent.</span></span>  
  
 [!code-csharp[System.Char.ToUpper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper1.cs#1)]
 [!code-vb[System.Char.ToUpper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="07cb0-1110">
            <para>에 설명 된 대로 [를 사용 하 여 문자열에 대 한 모범 사례](~/docs/standard/base-types/best-practices-strings.md), 기본 값으로 대체 하는 문자-대/소문자 구분 및 대/소문자 문자열 메서드를 호출 하는 것이 좋습니다. 대신, 매개 변수를 명시적으로 지정 해야 하는 메서드를 호출 해야 합니다. 문자를 현재 문화권의 대/소문자 규칙을 사용 하 여 대문자로 변환 하려면 호출을 <see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" /> 값을 사용 하 여 메서드 오버 로드 <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> 에 대 한 해당 <paramref name="culture" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1110">
              <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values. Instead, you should call methods that require parameters to be explicitly specified. To convert a character to uppercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (c As Char, culture As CultureInfo) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpper(char c, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToUpper : char * System.Globalization.CultureInfo -&gt; char" Usage="System.char.ToUpper (c, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-1111">변환할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1111">The Unicode character to convert.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="07cb0-1112">문화권별 대/소문자 규칙을 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1112">An object that supplies culture-specific casing rules.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1113">문화권별 형식 지정 정보를 사용하여 지정된 유니코드 문자의 값을 해당하는 대문자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1113">Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1114">
            <paramref name="c" />에 따라 수정된 <paramref name="culture" />에 해당하는 대문자이거나, <paramref name="c" />가 이미 대문자이거나 해당하는 대문자가 없거나 영문자가 아닌 경우 변경되지 않은 <paramref name="c" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1114">The uppercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1115">사용 하 여 <xref:System.String.ToUpper%2A?displayProperty=nameWithType> 문자열을 대문자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1115">Use <xref:System.String.ToUpper%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-1116">다음 예제에서는 배열에서 각 문자는 EN-US 문화권, 고정 문화권 및 TR-TR 문화권에 대 한 해당 대문자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1116">The following example converts each character in an array to its uppercase equivalent for the en-US culture, the invariant culture, and the tr-TR culture.</span></span> <span data-ttu-id="07cb0-1117">이 예의 각 소문자 대문자에 해당 하는 한 가지 경우를 제외 하 고 모든 문화권에 대 한 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1117">In this example, the uppercase equivalent of each lowercase letter is identical for all cultures except for one case.</span></span> <span data-ttu-id="07cb0-1118">소문자 "i" 문자 "I" (라는) 변환 (U + 0049) EN-US 및 고정 문화권에서 사용 하지만 를"" (U + 0130) TR-TR 문화권에서입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1118">The lowercase "i" character (U+0069) converts to "I" (U+0049) in the en-US and invariant cultures, but to "İ" (U+0130) in the tr-TR culture.</span></span>  
  
 [!code-csharp[System.Char.ToUpper#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper5.cs#2)]
 [!code-vb[System.Char.ToUpper#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper5.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="07cb0-1119">
            <paramref name="culture" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1119">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public static char ToUpperInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpperInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpperInvariant(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpperInvariant (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpperInvariant(char c);" />
      <MemberSignature Language="F#" Value="static member ToUpperInvariant : char -&gt; char" Usage="System.char.ToUpperInvariant c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="07cb0-1120">변환할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1120">The Unicode character to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1121">고정 문화권의 대/소문자 규칙을 사용하여 유니코드 문자의 값을 해당하는 대문자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1121">Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1122">
            <paramref name="c" /> 매개 변수에 해당하는 대문자이거나, <paramref name="c" />가 이미 대문자이거나 영문자가 아닌 경우 변경되지 않은 <paramref name="c" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1122">The uppercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1123">응용 프로그램 현재 문화권에 의해 영향을 받지 않습니다 하 고 예측 가능한 방식으로 변경 하는 문자의 대/소문자에 따라 달라 집니다, 사용 된 <xref:System.Char.ToUpperInvariant%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1123">If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, use the <xref:System.Char.ToUpperInvariant%2A> method.</span></span>  <span data-ttu-id="07cb0-1124">합니다 <xref:System.Char.ToUpperInvariant%2A> 메서드는 `ToUpper(Char, CultureInfo.InvariantCulture)`합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1124">The <xref:System.Char.ToUpperInvariant%2A> method is equivalent to `ToUpper(Char, CultureInfo.InvariantCulture)`.</span></span>  
  
 <span data-ttu-id="07cb0-1125">사용 하 여 <xref:System.String.ToUpperInvariant%2A?displayProperty=nameWithType> 문자열을 대문자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1125">Use <xref:System.String.ToUpperInvariant%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out char result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] char&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.TryParse(System.String,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] char % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.char.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Char" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="07cb0-1126">단일 문자가 들어 있는 문자열이거나 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1126">A string that contains a single character, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="07cb0-1127">이 메서드는 변환이 성공한 경우 <c>s</c>의 유일한 문자에 해당하는 유니코드 문자를 반환하고, 변환이 실패한 경우 정의되지 않은 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1127">When this method returns, contains a Unicode character equivalent to the sole character in <c>s</c>, if the conversion succeeded, or an undefined value if the conversion failed.</span>
          </span>
          <span data-ttu-id="07cb0-1128">
            <c>s</c> 매개 변수가 <see langword="null" />이거나 <c>s</c>의 길이가 1이 아니면 변환에 실패합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1128">The conversion fails if the <c>s</c> parameter is <see langword="null" /> or the length of <c>s</c> is not 1.</span>
          </span>
          <span data-ttu-id="07cb0-1129">이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1129">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="07cb0-1130">지정된 문자열의 값을 해당하는 유니코드 문자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1130">Converts the value of the specified string to its equivalent Unicode character.</span>
          </span>
          <span data-ttu-id="07cb0-1131">반환 코드는 변환이 성공했는지 아니면 실패했는지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1131">A return code indicates whether the conversion succeeded or failed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="07cb0-1132">
            <see langword="true" /> 매개 변수가 변환되었으면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="07cb0-1132">
              <see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="07cb0-1133">합니다 <xref:System.Char.TryParse%2A> 메서드와 비슷합니다는 <xref:System.Char.Parse%2A> 메서드를 제외 하 고는 <xref:System.Char.TryParse%2A> 메서드 변환에 실패 하면 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1133">The <xref:System.Char.TryParse%2A> method is like the <xref:System.Char.Parse%2A> method, except the <xref:System.Char.TryParse%2A> method does not throw an exception if the conversion fails.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="07cb0-1134">다음 코드 예제에서는 오버 로드는 <xref:System.Char.TryParse%2A> 여러 기본 형식에 대 한 메서드 및 <xref:System.DateTime.TryParseExact%2A> 에 대 한 메서드는 <xref:System.DateTime> 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="07cb0-1134">The following code example demonstrates overloads of the <xref:System.Char.TryParse%2A> method for several base types, and the <xref:System.DateTime.TryParseExact%2A> method for the <xref:System.DateTime> base type.</span></span>  
  
 [!code-cpp[T.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.TryParse/CPP/tp.cpp#1)]
 [!code-csharp[T.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.TryParse/CS/tp.cs#1)]
 [!code-vb[T.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.TryParse/VB/tp.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="M:System.Char.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>