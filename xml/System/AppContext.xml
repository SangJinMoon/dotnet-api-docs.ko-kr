<Type Name="AppContext" FullName="System.AppContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="893966e3a9901acea67237c6fa8d21aea736380a" />
    <Meta Name="ms.sourcegitcommit" Value="81d387351cc43c342755705908f4a5eb8af153d3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/04/2018" />
    <Meta Name="ms.locfileid" Value="34568287" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AppContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AppContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AppContext" />
  <TypeSignature Language="VB.NET" Value="Public Class AppContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppContext abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.AppContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>응용 프로그램의 컨텍스트에 대한 데이터를 설정 및 검색하기 위한 멤버를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.AppContext> 클래스를 사용 하면 라이브러리 작성자가 사용자에 게 새로운 기능에 대 한 균일 한 옵트아웃 메커니즘을 제공할 수 있습니다. 옵트아웃(opt out) 요청을 전달하기 위해 구성 요소 간에 느슨하게 결합된 계약을 설정합니다. 이 기능은 일반적으로 기존 기능이 변경될 때 중요합니다. 반대로, 새로운 기능에 대한 암시적 옵트인(opt in)은 이미 있습니다.  
  
## <a name="appcontext-for-library-developers"></a>라이브러리 개발자를 위한 AppContext  
 라이브러리는 사용 된 <xref:System.AppContext> 라이브러리 사용자가 해당 스위치를 라이브러리 동작에 영향을 설정할 수 있지만 클래스 정의 하 고 호환성을 노출 전환 합니다. 기본적으로 라이브러리는 새로운 기능을 제공하며 스위치가 설정된 경우에만 변경합니다(즉, 이전 기능 제공).  이렇게 하면 라이브러리 줄이면서 이전 동작에 의존 하는 호출자를 지원 하도록 기존 API에 대 한 새 동작을 제공할 수 있습니다.  
  
### <a name="defining-the-switch-name"></a>스위치 이름 정의  
 변경 된 동작 컬렉션에서 라이브러리의 소비자를 허용 하는 가장 일반적인 방법은 명명 된 스위치를 정의 하는 합니다.  해당 `value` 요소는 스위치의 이름으로 구성 된 이름/값 쌍 및 해당 <xref:System.Boolean> 값입니다.  기본적으로 스위치는 암시적으로 항상 `false`이며 새 동작이 제공 (및 새 동작 옵트인 하면 기본적으로). 스위치 설정 `true` 레거시 동작을 제공 하 고 활성화 합니다. 는 스위치를 명시적으로 설정 `false` 또한 새로운 동작을 제공 합니다.  
  
 라이브러리에 의해 노출 되는 공식 계약 이므로 스위치 이름에 대 한 일관 된 형식을 사용 하는 것이 좋습니다. 다음은 두 가지 명확한 형식입니다.  
  
-   *Switch*.*namespace*.*switchname*  
  
-   *Switch*.*library*.*switchname*  
  
 정의 하 고 스위치 문서화 되 면 호출자가 사용할 수를 추가 하 여 레지스트리를 사용 하 여 프로그램 [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) 요소를 호출 하거나 해당 응용 프로그램 구성 파일에는 <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 메서드 프로그래밍 방식으로 합니다. 참조는 [라이브러리 소비자에 대 한 AppContext](#ForConsumers) 호출자에 게 사용 하 고 값을 설정 하는 방법에 대 한 자세한 내용은 섹션 <xref:System.AppContext> 구성 스위치입니다.  
  
 공용 언어 런타임 응용 프로그램을 실행 하는 경우 자동으로 호환성 레지스트리를 읽고 응용 프로그램의 채우기 위해 응용 프로그램 구성 파일을 로드 <xref:System.AppContext> 인스턴스. 때문에 <xref:System.AppContext> 인스턴스 또는 호출자가 프로그래밍 방식으로 런타임에 의해 채워집니다, 호출 등의 어떤 조치도 취할 필요가 없습니다는 <xref:System.AppContext.SetSwitch%2A> 메서드를 구성 하는 <xref:System.AppContext> 인스턴스.  
  
### <a name="checking-the-setting"></a>설정을 확인 하는 중  
 소비자가 act 적절 하 게 호출 하 고 스위치의 값을 선언 하는 경우 선택할 수 있습니다는 <xref:System.AppContext.TryGetSwitch%2A?displayProperty=nameWithType> 메서드. 메서드가 반환 `true` 경우는 `switchName` 인수 발견 되 고 메서드가 반환 하는 경우, 해당 `isEnabled` 인수에 스위치의 값을 나타냅니다.  그렇지 않은 경우 메서드는 `false`를 반환합니다.  
  
### <a name="an-example"></a>예  
 다음 예제에서는 <xref:System.AppContext> 클래스는 고객이 라이브러리 메서드의 원래 동작을 선택할 수 있도록 합니다.   다음은 명명 된 라이브러리의 버전 1.0 `StringLibrary`합니다. 정의 `SubstringStartsAt` 더 큰 문자열에 부분 문자열의 시작 인덱스를 결정 하는 서 수 비교를 수행 하는 메서드입니다.  
  
 [!code-csharp[System.AppContext.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#4)]
 [!code-vb[System.AppContext.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#4)]  
  
 다음 예제에서는 다음 라이브러리를 사용 하 여 "고고학자"에서 "archæ" 부분 문자열의 시작 인덱스를 찾을 수 있습니다. 메서드는 서 수 비교 수행, 하기 때문에 부분 문자열을 찾을 수 없습니다.  
  
 [!code-csharp[System.AppContext.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example4.cs#5)]
 [!code-vb[System.AppContext.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example4.vb#5)]  
  
 하지만 변경 하는 라이브러리의 버전 2는 `SubstringStartsAt` 문화권 구분 비교를 사용 하는 메서드.  
  
 [!code-csharp[System.AppContext.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#6)]
 [!code-vb[System.AppContext.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#6)]  
  
 응용 프로그램은 라이브러리의 새 버전에서 실행 되도록 다시 컴파일하면에 이제 "archæ" 하위 문자열은 "고고학자"에서 인덱스 4에서 발견 되었음을 보고 합니다.  
  
 [!code-csharp[System.AppContext.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example6.cs#7)]
 [!code-vb[System.AppContext.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example6.vb#7)]  
  
 이 변경 내용을 정의 하 여 원래 동작에 종속 된 응용 프로그램을 중단에서 금지할 수 있습니다는 [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) 전환 합니다. 이 경우 스위치가 라는 `StringLibrary.DoNotUseCultureSensitiveComparison`합니다. 기본값인 `false`, 라이브러리 버전 2.0에서 문화권 구분 비교를 수행 해야 한다고 나타냅니다. `true` 라이브러리의 버전 1.0 서 수 비교를 수행 해야 한다고 나타냅니다.  앞의 코드를 약간 수정 라이브러리 소비자를 메서드가 수행할 비교의 종류를 결정 하는 스위치를 설정할 수 있습니다.  
  
 [!code-csharp[System.AppContext.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/Example8.cs#8)]
 [!code-vb[System.AppContext.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/Example8.vb#8)]  
  
 경우 응용 프로그램 버전 1.0 동작으로 복원 하려면 다음 구성 파일을 유도할 수 있습니다.  
  
```xml  
  
<configuration>  
   <runtime>  
      <AppContextSwitchOverrides value="StringLibrary.DoNotUseCultureSensitiveComparison=true" />   
   </runtime>  
</configuration>  
  
```  
  
 응용 프로그램이 있는 구성 파일에 실행 될 때 다음과 같은 출력이 생성 됩니다.  
  
```  
'archæ' not found in 'The archaeologist'  
```  
  
<a name="ForConsumers"></a>   
## <a name="appcontext-for-library-consumers"></a>AppContext 라이브러리 소비자에 대 한  
 소비자는 라이브러리의 경우는 <xref:System.AppContext> 클래스 라이브러리 또는 새로운 기능에 대해 라이브러리 메서드 옵트아웃 메커니즘을 활용할 수 있습니다.   호출 하는 클래스 라이브러리의 개별 메서드는 새로운 동작을 사용할지 여부를 지정 하는 특정 스위치를 정의 합니다. 스위치의 값에는 부울입니다. 이 경우 `false`, 값은 일반적으로 기본 값, 새 동작 사용 되는 경우 `true`새로운 동작을 사용 하지 않도록 설정 하 고 멤버와 같은 동작을 이전에 합니다.  
  
 다음 세 가지 방법 중 하나에 스위치의 값을 설정할 수 있습니다.  
  
-   호출 하 여는 <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 코드에서 메서드.  `switchName` 인수에 스위치 이름 정의 및 `isEnabled` 속성은 스위치의 값을 정의 합니다. 때문에 <xref:System.AppContext> 정적 클래스는 응용 프로그램 도메인 별로 사용할 수 있습니다.  
  
     호출 된 <xref:System.AppContext.SetSwitch%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 응용 프로그램 범위가;만 응용 프로그램에 영향을 주므로, 합니다.  
  
-   추가 하 여는 `<AppContextSwitchOverrides>` 요소는 [ \<런타임 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) app.config 파일의 섹션입니다. 스위치는 단일 특성을 `value`, 해당 값은 스위치 이름 및 해당 값을 모두 포함 하는 키/값 쌍을 나타내는 문자열입니다.  
  
     여러 개의 스위치를 정의 하려면의 각 스위치 키/값 쌍을 구분는 [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) 요소의 `value` 세미콜론을 사용 하 여 특성입니다. 이 경우에 `<AppContextSwitchOverrides>` 요소 형식은 다음과 같습니다.  
  
    ```xml  
    <AppContextSwitchOverrides value="switchName1=value1;switchName2=value2" />  
    ```  
  
     사용 하는 `<AppContextSwitchOverrides>` 구성 설정을 정의 하는 요소에는 응용 프로그램 범위 않으며 즉, 응용 프로그램만 적용 합니다.  

    > [!NOTE]    
    > .NET Framework에 정의 하는 스위치에 대 한 자세한 내용은 참조는 [ \<AppContextSwitchOverrides > 요소](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)합니다.

-   스위치의 이름을 이름은 문자열 값을 추가 하 여에 `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` 레지스트리에서 키입니다. 변수 값의 문자열 표현 이어야 합니다는 <xref:System.Boolean> 로 구문 분석할 수는 <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> 메서드, 즉 것 이어야 합니다 "True", "true", "False" 또는 "false"입니다. 런타임에 다른 값을 발견 하는 경우 스위치를 무시 합니다.  
  
     레지스트리를 사용 하 여 정의 하는 <xref:System.AppContext> 스위치 컴퓨터 범위에가; 컴퓨터에서 실행 하는 모든 응용 프로그램에 영향을 주므로, 합니다.  
  
 여러 가지 방법에서 같은 스위치를 설정 하면 다른 어떤 설정은 재정의 확인 하기 위한 우선 순위는:  
  
1.  프로그래밍 방식으로 설정 합니다.  
  
2.  응용 프로그램 구성 파일의 설정입니다.  
  
3.  레지스트리 설정입니다.  
  
 다음은 파일 URI를 전달 하는 간단한 응용 프로그램에는 <xref:System.IO.Path.GetDirectoryName%2A?displayProperty=nameWithType> 메서드.  .NET Framework 4.6에서 실행 되는 경우 throw 한 <xref:System.ArgumentException> 때문에 `file://` 은 더 이상 올바른 파일 경로의 일부입니다.  
  
 [!code-csharp[System.AppContext.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/ForConsumers1.cs#10)]
 [!code-vb[System.AppContext.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/ForConsumers1.vb#10)]  
  
 메서드의 이전 동작을 복원 하 고 예외를 방지 하려면 추가할 수 있습니다는 `Switch.System.IO.UseLegacyPathHandling` 예제에 대 한 응용 프로그램 구성 파일에로 전환 합니다.  
  
```xml  
<configuration>  
    <runtime>  
        <AppContextSwitchOverrides value="Switch.System.IO.UseLegacyPathHandling=true" />    
    </runtime>  
</configuration>  
```  
## <a name="see-also"></a>참고 항목
[AppContext 스위치](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md)

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public static string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>어셈블리 확인자에서 어셈블리를 조사하는 데 사용하는 기본 디렉터리의 경로 이름을 가져옵니다.</summary>
        <value>어셈블리 확인자에서 어셈블리를 조사하는 데 사용하는 기본 디렉터리의 경로 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 한 응용 프로그램 도메인 속성 당 합니다. 해당 값에 해당 하는 <xref:System.AppDomain.BaseDirectory%2A?displayProperty=nameWithType> 현재 응용 프로그램 도메인의 속성입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public static object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ GetData(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">데이터 요소의 이름입니다.</param>
        <summary>현재 응용 프로그램 도메인에 할당되어 있는 명명된 데이터 요소의 값을 반환합니다.</summary>
        <returns>
          <paramref name="name" />이 명명된 값을 식별하는 경우 <paramref name="name" />의 값이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSwitch">
      <MemberSignature Language="C#" Value="public static void SetSwitch (string switchName, bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSwitch(string switchName, bool isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSwitch (switchName As String, isEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSwitch(System::String ^ switchName, bool isEnabled);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="switchName">스위치의 이름입니다.</param>
        <param name="isEnabled">스위치의 값입니다.</param>
        <summary>스위치의 값을 설정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.AppContext> 클래스를 사용 하면 라이브러리 작성자가 사용자에 게 새로운 기능에 대 한 균일 한 옵트아웃 메커니즘을 제공할 수 있습니다. 옵트아웃(opt out) 요청을 전달하기 위해 구성 요소 간에 느슨하게 결합된 계약을 설정합니다. 이 기능은 일반적으로 기존 기능이 변경될 때 중요합니다. 반대로, 새로운 기능에 대한 암시적 옵트인(opt in)은 이미 있습니다.  
  
 <xref:System.AppContext.SetSwitch%2A> 스위치의 값을 선언 하는 응용 프로그램 (또는 라이브러리) 메서드는 (항상는 <xref:System.Boolean> 값)은 종속 라이브러리가 정의 하는 합니다. 스위치는 항상 암시적으로 `false`, 새로운 동작을 제공 하는 합니다. 스위치 설정 `true` 레거시 동작을 제공 하 고 활성화 합니다. 는 스위치를 명시적으로 설정 `false` 또한 새로운 동작을 제공 합니다. 종속 라이브러리를 호출 하 여 다음 스위치의 값을 확인할 수는 <xref:System.AppContext.TryGetSwitch%2A> 메서드.  
  
> [!NOTE]
>  라이브러리에 의해 노출 되는 공식 계약 이므로 스위치 이름에 대 한 일관 된 형식을 사용 하는 것이 좋습니다. 다음은 두 가지 명확한 형식입니다.  
>   
>  -   *Switch*.*namespace*.*switchname*  
> -   *Switch*.*library*.*switchname*  
  
 스위치의 값을 프로그래밍 방식으로 설정 하는 것 외에도.NET Framework에서 실행 중인 응용 프로그램에 대 한 것도 설정할 수 있습니다.  
  
-   스위치 이름 및 값을 추가 하 여는 [ \<AppContextSwitchOverrides >](~/docs/framework/configure-apps/file-schema/runtime/appcontextswitchoverrides-element.md) 요소에는 [ \<런타임 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) 응용 프로그램 구성 파일의 섹션입니다. 예를 들어, 다음 정의 라는 스위치 `Libraries.FPLibrary.UseExactFloatingPointComparison` 값인 `False`합니다.  
  
    ```xml  
  
    <configuration>  
       <runtime>  
          <AppContextSwitchOverrides value="Libraries.FPLibrary.UseExactFloatingPointComparison=false" />   
       </runtime>  
    </configuration>  
  
    ```  
  
-   스위치의 이름을 이름은 문자열 값을 추가 하 여에 `HKLM\SOFTWARE\Microsoft\.NETFramework\AppContext` 레지스트리에서 키입니다. 변수 값의 문자열 표현 이어야 합니다는 <xref:System.Boolean> 로 구문 분석할 수는 <xref:System.Boolean.Parse%2A?displayProperty=nameWithType> 메서드, 즉 것 이어야 합니다 "True", "true", "False" 또는 "false"입니다.  
  
 경우 `switchName` 이미 있으면 해당 값을 덮어씁니다는 `isEnabled` 인수입니다.  즉, 가장 최근의에 대 한 호출에서 <xref:System.AppContext.SetSwitch%2A> 응용 프로그램 구성 파일에서 또는 이전 호출에서 레지스트리에 정의 된 값을 재정의 하는 메서드는 <xref:System.AppContext.SetSwitch%2A> 메서드.  
 
 ### <a name="appcontextsetswitch-and-net-core"></a>AppContext.SetSwitch 및.NET Core

.NET core 지원 사용 하 여 프로그래밍 방식 호출에서 <xref:System.AppContext.SetSwitch%2A> 메서드만 합니다. 다음 스위치가 지원 됩니다.

|전환|값|설명|
|--|--|--|
|`System.Net.Http.useSocketsHttpHandler` |`true`|`false`|높은 수준의 있는지 여부를 결정 Api와 같은 네트워킹 <xref:System.Net.Http.HttpClient> 사용 <xref:System.Net.Http.SocketsHttpHandler?displayProperty=nameWithType> (`true`) 또는 <xref:System.Net.Http.HttpClientHandler?displayProperty=nameWithType> (`false`).|   
  
## Examples  
 라는 스위치를 설정 하는 코드의 다음 줄 `Switch.AmazingLib.ThrowOnException` 를 `true`, 레거시 동작 수 있습니다. 라이브러리는 라이브러리 소비자를 호출 하 여 스위치의 값 설정 않았는지 여부를 선택할 수는 <xref:System.AppContext.TryGetSwitch%2A> 메서드.  
  
 [!code-csharp[System.AppContext.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#1)]
 [!code-vb[System.AppContext.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="switchName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="switchName" />가 <see cref="F:System.String.Empty" />인 경우</exception>
        <altmember cref="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="TargetFrameworkName">
      <MemberSignature Language="C#" Value="public static string TargetFrameworkName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string TargetFrameworkName" />
      <MemberSignature Language="DocId" Value="P:System.AppContext.TargetFrameworkName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TargetFrameworkName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ TargetFrameworkName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 응용 프로그램의 대상인 프레임워크 버전의 이름을 가져옵니다.</summary>
        <value>현재 응용 프로그램의 대상인 프레임워크 버전의 이름입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값에 해당 하는 대상 프레임 워크 버전 이름은 <xref:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName%2A?displayProperty=nameWithType> 속성입니다. .NET Framework에 대 한 대상 프레임 워크 이름 목록에 대 한 참조는 [ &lt;supportedRuntime&gt; 요소](~/docs/framework/configure-apps/file-schema/startup/supportedruntime-element.md) 요소입니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" />
        <altmember cref="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSwitch">
      <MemberSignature Language="C#" Value="public static bool TryGetSwitch (string switchName, out bool isEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetSwitch(string switchName, [out] bool&amp; isEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetSwitch (switchName As String, ByRef isEnabled As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetSwitch(System::String ^ switchName, [Runtime::InteropServices::Out] bool % isEnabled);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AppContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchName" Type="System.String" />
        <Parameter Name="isEnabled" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="switchName">스위치의 이름입니다.</param>
        <param name="isEnabled">이 메서드가 반환될 때 <c>switchName</c>을 찾을 없을 경우 <c>switchName</c>의 값, <c>switchName</c>을 찾을 수 없을 없는 경우 <see langword="false" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
        <summary>스위치의 값을 가져오려고 합니다.</summary>
        <returns>
          <paramref name="switchName" />이 설정되었으며 <paramref name="isEnabled" /> 인수에 스위치의 값이 포함되어 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.AppContext> 클래스를 사용 하면 라이브러리 작성자가 사용자에 게 새로운 기능에 대 한 균일 한 옵트아웃 메커니즘을 제공할 수 있습니다. 옵트아웃(opt out) 요청을 전달하기 위해 구성 요소 간에 느슨하게 결합된 계약을 설정합니다. 이 기능은 일반적으로 기존 기능이 변경될 때 중요합니다. 반대로, 새로운 기능에 대한 암시적 옵트인(opt in)은 이미 있습니다.  
  
 에 할당 하는 스위치를 자동으로 채우려고 하는 공용 언어 런타임에서 <xref:System.AppContext> 레지스트리 및 응용 프로그램의 구성 파일을 읽어 인스턴스. 호출 하 여 새 스위치를 추가 하 고 이러한 스위치의 값을 재정의할 수 다음,는 <xref:System.AppContext.SetSwitch%2A> 메서드.  
  
 라이브러리를 호출 하는 <xref:System.AppContext.TryGetSwitch%2A> 소비자 스위치의 값을 선언 해야 하 고에 적절 하 게 작동 하는지 여부를 확인 하는 메서드.  스위치를 정의 하지 않은 경우에 기본적으로 새 기능 사용은... 스위치 정의 되어 있고 해당 값이 있으면 `false`, 새로운 기능에도 사용 합니다. 값이 `true`, 레거시 동작을 사용할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 라이브러리 소비자가 라는 스위치를 설정 하는지 여부를 확인 `Switch.AmazingLib.ThrowOnException`합니다.  
  
 [!code-csharp[System.AppContext.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AppContext.Class/cs/TestValue1.cs#2)]
 [!code-vb[System.AppContext.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AppContext.Class/vb/TestValue1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="switchName" />가 <see langword="null" />인 경우</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="switchName" />가 <see cref="F:System.String.Empty" />인 경우</exception>
        <altmember cref="M:System.AppContext.SetSwitch(System.String,System.Boolean)" />
      </Docs>
    </Member>
  </Members>
</Type>