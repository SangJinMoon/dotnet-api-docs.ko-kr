<Type Name="Math" FullName="System.Math">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c2a23b572b68e3d10d101512088abd060687a734" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39822310" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Math" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Math extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Math" />
  <TypeSignature Language="VB.NET" Value="Public Class Math" />
  <TypeSignature Language="C++ CLI" Value="public ref class Math abstract sealed" />
  <TypeSignature Language="F#" Value="type Math = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="cd9fa-101">삼각, 로그 및 기타 일반 수학 함수에 대한 상수 및 정적 메서드를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="cd9fa-101">Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-102">다음 예제에서는에서 몇 가지 수치 연산 및 삼각 함수는 <xref:System.Math> 사다리꼴의 내부 각도 계산 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-102">The following example uses several mathematical and trigonometric functions from the <xref:System.Math> class to calculate the inner angles of a trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Abs">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd9fa-103">지정된 숫자의 절대 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-103">Returns the absolute value of a specified number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static decimal Abs (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Abs(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Abs(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member Abs : decimal -&gt; decimal" Usage="System.Math.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-104">
            <see cref="F:System.Decimal.MinValue" />보다 크거나 같지만 <see cref="F:System.Decimal.MaxValue" />보다 작거나 같은 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-104">A number that is greater than or equal to <see cref="F:System.Decimal.MinValue" />, but less than or equal to <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-105">
            <see cref="T:System.Decimal" /> 숫자의 절대값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-105">Returns the absolute value of a <see cref="T:System.Decimal" /> number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-106">0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" /> 범위의 10진수 x입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-106">A decimal number, x, such that 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-107">절대값을 <xref:System.Decimal> 는 숫자 값은 부호가 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-107">The absolute value of a <xref:System.Decimal> is its numeric value without its sign.</span></span> <span data-ttu-id="cd9fa-108">예를 들어 1.2와-1.2의 절대값은 1.2입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-108">For example, the absolute value of both 1.2 and -1.2 is 1.2.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-109">다음 예제에서는 합니다 <xref:System.Math.Abs%28System.Decimal%29> 의 숫자의 절대 값을 가져오기 위한 메서드를 <xref:System.Decimal> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-109">The following example uses the <xref:System.Math.Abs%28System.Decimal%29> method to get the absolute value of a number of <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/Abs1.cs#1)]
 [!code-vb[System.Math.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/Abs1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static double Abs (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Abs(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Abs(double value);" />
      <MemberSignature Language="F#" Value="static member Abs : double -&gt; double" Usage="System.Math.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-110">
            <see cref="F:System.Double.MinValue" />보다 크거나 같지만 <see cref="F:System.Double.MaxValue" />보다 작거나 같은 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-110">A number that is greater than or equal to <see cref="F:System.Double.MinValue" />, but less than or equal to <see cref="F:System.Double.MaxValue" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-111">배정밀도 부동 소수점 수의 절대 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-111">Returns the absolute value of a double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-112">0 ≤ x ≤<see cref="F:System.Double.MaxValue" /> 범위의 배정밀도 부동 소수점 숫자 x입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-112">A double-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-113">절대값을 <xref:System.Double> 는 숫자 값은 부호가 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-113">The absolute value of a <xref:System.Double> is its numeric value without its sign.</span></span> <span data-ttu-id="cd9fa-114">예를 들어 1.2 e 03 및-1.2 e 03의 절대값은 1.2 e 03 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-114">For example, the absolute value of both 1.2e03 and -1.2e03 is 1.2e03.</span></span>  
  
 <span data-ttu-id="cd9fa-115">하는 경우 `value` 값과 같음 <xref:System.Double.NegativeInfinity> 하거나 <xref:System.Double.PositiveInfinity>, 반환 값은 <xref:System.Double.PositiveInfinity>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-115">If `value` is equal to <xref:System.Double.NegativeInfinity> or <xref:System.Double.PositiveInfinity>, the return value is <xref:System.Double.PositiveInfinity>.</span></span> <span data-ttu-id="cd9fa-116">하는 경우 `value` 값과 같음 <xref:System.Double.NaN>, 반환 값은 <xref:System.Double.NaN>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-116">If `value` is equal to <xref:System.Double.NaN>, the return value is <xref:System.Double.NaN>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-117">다음 예제에서는 합니다 <xref:System.Math.Abs%28System.Double%29> 의 숫자의 절대 값을 가져오기 위한 메서드를 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-117">The following example uses the <xref:System.Math.Abs%28System.Double%29> method to get the absolute value of a number of <xref:System.Double> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs2.cs#2)]
 [!code-vb[System.Math.Abs#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static short Abs (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Abs(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Abs(short value);" />
      <MemberSignature Language="F#" Value="static member Abs : int16 -&gt; int16" Usage="System.Math.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-118">
            <see cref="F:System.Int16.MinValue" />보다 크지만 <see cref="F:System.Int16.MaxValue" />보다 작거나 같은 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-118">A number that is greater than <see cref="F:System.Int16.MinValue" />, but less than or equal to <see cref="F:System.Int16.MaxValue" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-119">16비트 부호 있는 정수의 절대 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-119">Returns the absolute value of a 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-120">0 ≤ x ≤<see cref="F:System.Int16.MaxValue" /> 범위의 16비트 부호 있는 정수 x입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-120">A 16-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-121">절대값을 <xref:System.Int16> 는 숫자 값은 부호가 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-121">The absolute value of an <xref:System.Int16> is its numeric value without its sign.</span></span> <span data-ttu-id="cd9fa-122">예를 들어,-123 및 123의 절대 값 123입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-122">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-123">다음 예제에서는 합니다 <xref:System.Math.Abs%28System.Int16%29> 의 숫자의 절대 값을 가져오기 위한 메서드를 <xref:System.Int16> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-123">The following example uses the <xref:System.Math.Abs%28System.Int16%29> method to get the absolute value of a number of <xref:System.Int16> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs3.cs#3)]
 [!code-vb[System.Math.Abs#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="cd9fa-124">
            <paramref name="value" />가 <see cref="F:System.Int16.MinValue" />와 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-124">
              <paramref name="value" /> equals <see cref="F:System.Int16.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static int Abs (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Abs(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Abs(int value);" />
      <MemberSignature Language="F#" Value="static member Abs : int -&gt; int" Usage="System.Math.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-125">
            <see cref="F:System.Int32.MinValue" />보다 크지만 <see cref="F:System.Int32.MaxValue" />보다 작거나 같은 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-125">A number that is greater than <see cref="F:System.Int32.MinValue" />, but less than or equal to <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-126">32비트 부호 있는 정수의 절대 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-126">Returns the absolute value of a 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-127">0 ≤ x ≤<see cref="F:System.Int32.MaxValue" /> 범위의 32비트 부호 있는 정수 x입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-127">A 32-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-128">절대값을 <xref:System.Int32> 는 숫자 값은 부호가 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-128">The absolute value of an <xref:System.Int32> is its numeric value without its sign.</span></span> <span data-ttu-id="cd9fa-129">예를 들어,-123 및 123의 절대 값 123입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-129">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-130">다음 예제에서는 합니다 <xref:System.Math.Abs%28System.Int32%29> 의 숫자의 절대 값을 가져오기 위한 메서드를 <xref:System.Int32> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-130">The following example uses the <xref:System.Math.Abs%28System.Int32%29> method to get the absolute value of a number of <xref:System.Int32> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs4.cs#4)]
 [!code-vb[System.Math.Abs#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="cd9fa-131">
            <paramref name="value" />가 <see cref="F:System.Int32.MinValue" />와 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-131">
              <paramref name="value" /> equals <see cref="F:System.Int32.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static long Abs (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Abs(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Abs(long value);" />
      <MemberSignature Language="F#" Value="static member Abs : int64 -&gt; int64" Usage="System.Math.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-132">
            <see cref="F:System.Int64.MinValue" />보다 크지만 <see cref="F:System.Int64.MaxValue" />보다 작거나 같은 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-132">A number that is greater than <see cref="F:System.Int64.MinValue" />, but less than or equal to <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-133">64비트 부호 있는 정수의 절대 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-133">Returns the absolute value of a 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-134">0 ≤ x ≤<see cref="F:System.Int64.MaxValue" /> 범위의 64비트 부호 있는 정수 x입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-134">A 64-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-135">절대값을 <xref:System.Int64> 는 숫자 값은 부호가 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-135">The absolute value of an <xref:System.Int64> is its numeric value without its sign.</span></span> <span data-ttu-id="cd9fa-136">예를 들어,-123 및 123의 절대 값 123입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-136">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-137">다음 예제에서는 합니다 <xref:System.Math.Abs%28System.Int64%29> 의 숫자의 절대 값을 가져오기 위한 메서드를 <xref:System.Int64> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-137">The following example uses the <xref:System.Math.Abs%28System.Int64%29> method to get the absolute value of a number of <xref:System.Int64> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs5.cs#5)]
 [!code-vb[System.Math.Abs#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="cd9fa-138">
            <paramref name="value" />가 <see cref="F:System.Int64.MinValue" />와 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-138">
              <paramref name="value" /> equals <see cref="F:System.Int64.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static sbyte Abs (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Abs(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Abs(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member Abs : sbyte -&gt; sbyte" Usage="System.Math.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-139">
            <see cref="F:System.SByte.MinValue" />보다 크지만 <see cref="F:System.SByte.MaxValue" />보다 작거나 같은 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-139">A number that is greater than <see cref="F:System.SByte.MinValue" />, but less than or equal to <see cref="F:System.SByte.MaxValue" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-140">8비트 부호 있는 정수의 절대 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-140">Returns the absolute value of an 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-141">0 ≤ x ≤<see cref="F:System.SByte.MaxValue" /> 범위의 8비트 부호 있는 정수 x입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-141">An 8-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-142">부호 있는 바이트의 절대 값을 해당 숫자 값은 부호가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cd9fa-142">The absolute value of a signed byte is its numeric value without its sign.</span></span> <span data-ttu-id="cd9fa-143">예를 들어, 12 및-12의 절대 값은 12입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-143">For example, the absolute value of both 12 and -12 is 12.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-144">다음 예제에서는 합니다 <xref:System.Math.Abs%28System.SByte%29> 의 숫자의 절대 값을 가져오기 위한 메서드를 <xref:System.SByte> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-144">The following example uses the <xref:System.Math.Abs%28System.SByte%29> method to get the absolute value of a number of <xref:System.SByte> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs6.cs#6)]
 [!code-vb[System.Math.Abs#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="cd9fa-145">
            <paramref name="value" />가 <see cref="F:System.SByte.MinValue" />와 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-145">
              <paramref name="value" /> equals <see cref="F:System.SByte.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static float Abs (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Abs(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Abs(float value);" />
      <MemberSignature Language="F#" Value="static member Abs : single -&gt; single" Usage="System.Math.Abs value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-146">
            <see cref="F:System.Single.MinValue" />보다 크거나 같지만 <see cref="F:System.Single.MaxValue" />보다 작거나 같은 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-146">A number that is greater than or equal to <see cref="F:System.Single.MinValue" />, but less than or equal to <see cref="F:System.Single.MaxValue" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-147">단정밀도 부동 소수점 수의 절대 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-147">Returns the absolute value of a single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-148">0 ≤ x ≤<see cref="F:System.Single.MaxValue" /> 범위의 단정밀도 부동 소수점 숫자 x입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-148">A single-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-149">절대값을 <xref:System.Single> 는 숫자 값은 부호가 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-149">The absolute value of a <xref:System.Single> is its numeric value without its sign.</span></span> <span data-ttu-id="cd9fa-150">예를 들어의 절대 값을 모두 1.2e-03-1.2 e 03 이며 1.2 e 03 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-150">For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.</span></span>  
  
 <span data-ttu-id="cd9fa-151">하는 경우 `value` 값과 같음 <xref:System.Single.NegativeInfinity> 하거나 <xref:System.Single.PositiveInfinity>, 반환 값은 <xref:System.Single.PositiveInfinity>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-151">If `value` is equal to <xref:System.Single.NegativeInfinity> or <xref:System.Single.PositiveInfinity>, the return value is <xref:System.Single.PositiveInfinity>.</span></span> <span data-ttu-id="cd9fa-152">하는 경우 `value` 값과 같음 <xref:System.Single.NaN>, 반환 값은 <xref:System.Single.NaN>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-152">If `value` is equal to <xref:System.Single.NaN>, the return value is <xref:System.Single.NaN>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-153">다음 예제에서는 합니다 <xref:System.Math.Abs%28System.Single%29> 의 숫자의 절대 값을 가져오기 위한 메서드를 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-153">The following example uses the <xref:System.Math.Abs%28System.Single%29> method to get the absolute value of a number of <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs7.cs#7)]
 [!code-vb[System.Math.Abs#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs7.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static double Acos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Acos(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Acos(double d);" />
      <MemberSignature Language="F#" Value="static member Acos : double -&gt; double" Usage="System.Math.Acos d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-154">코사인을 나타내는 숫자입니다. <c>d</c>는 -1보다 크거나 같지만 1보다 작거나 같아야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-154">A number representing a cosine, where <c>d</c> must be greater than or equal to -1, but less than or equal to 1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-155">코사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-155">Returns the angle whose cosine is the specified number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-156">0 ≤θ≤π 범위의 각도 θ(라디안)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-156">An angle, θ, measured in radians, such that 0 ≤θ≤π</span>
          </span>
          <span data-ttu-id="cd9fa-157">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-157">-or-</span>
          </span>
          <span data-ttu-id="cd9fa-158">
            <paramref name="d" /> &lt; -1이거나 <paramref name="d" /> &gt; 1이거나 <paramref name="d" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-158">
              <see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-159">180을 사용 하 여 반환 값을 곱한 /<xref:System.Math.PI?displayProperty=nameWithType> 에 라디안에서 각도로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-159">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-160">다음 예제에서는 <xref:System.Math.Acos%2A> 지정된 사다리꼴의 내부 각도 계산 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-160">The following example uses the <xref:System.Math.Acos%2A> method to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public static double Acosh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Acosh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acosh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Acosh(double d);" />
      <MemberSignature Language="F#" Value="static member Acosh : double -&gt; double" Usage="System.Math.Acosh d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static double Asin (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Asin(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Asin(double d);" />
      <MemberSignature Language="F#" Value="static member Asin : double -&gt; double" Usage="System.Math.Asin d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-161">사인을 나타내는 숫자입니다. <c>d</c>는 -1보다 크거나 같지만 1보다 작거나 같아야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-161">A number representing a sine, where <c>d</c> must be greater than or equal to -1, but less than or equal to 1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-162">사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-162">Returns the angle whose sine is the specified number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-163">-π/2 ≤θ≤π/2 범위의 각도 θ(라디안)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-163">An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2</span>
          </span>
          <span data-ttu-id="cd9fa-164">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-164">-or-</span>
          </span>
          <span data-ttu-id="cd9fa-165">
            <paramref name="d" /> &lt; -1이거나 <paramref name="d" /> &gt; 1이거나 <paramref name="d" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-165">
              <see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-166">양수 반환 값; x 축에서 시계 반대 방향 각도를 나타냅니다. 음수 반환 값에는 시계 방향의 각도를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-166">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="cd9fa-167">180을 사용 하 여 반환 값을 곱한 /<xref:System.Math.PI?displayProperty=nameWithType> 에 라디안에서 각도로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-167">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-168">다음 예제에서는 <xref:System.Math.Asin%2A> 지정된 사다리꼴의 내부 각도 계산 지원 하기 위해.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-168">The following example uses <xref:System.Math.Asin%2A> to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public static double Asinh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Asinh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asinh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Asinh(double d);" />
      <MemberSignature Language="F#" Value="static member Asinh : double -&gt; double" Usage="System.Math.Asinh d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static double Atan (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atan(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan(double d);" />
      <MemberSignature Language="F#" Value="static member Atan : double -&gt; double" Usage="System.Math.Atan d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-169">접선을 나타내는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-169">A number representing a tangent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-170">탄젠트를 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-170">Returns the angle whose tangent is the specified number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-171">-π/2 ≤θ≤π/2 범위의 각도 θ(라디안)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-171">An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.</span>
          </span>
          <span data-ttu-id="cd9fa-172">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-172">-or-</span>
          </span>
          <span data-ttu-id="cd9fa-173">
            <paramref name="d" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />이고, <paramref name="d" />가 <see cref="F:System.Double.NegativeInfinity" />와 같으면 배정밀도로 반올림된 -π/2(-1.5707963267949)이고, <paramref name="d" />가 <see cref="F:System.Double.PositiveInfinity" />와 같으면 배정밀도로 반올림된 π/2(1.5707963267949)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-173">
              <see cref="F:System.Double.NaN" /> if <paramref name="d" /> equals <see cref="F:System.Double.NaN" />, -π/2 rounded to double precision (-1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, or π/2 rounded to double precision (1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.PositiveInfinity" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-174">양수 반환 값; x 축에서 시계 반대 방향 각도를 나타냅니다. 음수 반환 값에는 시계 방향의 각도를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-174">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="cd9fa-175">180을 사용 하 여 반환 값을 곱한 /<xref:System.Math.PI?displayProperty=nameWithType> 에 라디안에서 각도로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-175">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-176">다음 예제에서는 값의 아크탄젠트를 계산 하 고 콘솔에 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-176">The following example demonstrates how to calculate the arctangent of a value and display it to the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public static double Atan2 (double y, double x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan2(float64 y, float64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2 (y As Double, x As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan2(double y, double x);" />
      <MemberSignature Language="F#" Value="static member Atan2 : double * double -&gt; double" Usage="System.Math.Atan2 (y, x)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="y">
          <span data-ttu-id="cd9fa-177">점의 y 좌표입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-177">The y coordinate of a point.</span>
          </span>
        </param>
        <param name="x">
          <span data-ttu-id="cd9fa-178">점의 x 좌표입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-178">The x coordinate of a point.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-179">탄젠트를 적용했을 때 지정된 두 숫자의 몫이 나오는 각도를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-179">Returns the angle whose tangent is the quotient of two specified numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-180">-π≤θ≤π 범위의 각도 θ(라디안) 및 tan(θ) = <paramref name="y" /> / <paramref name="x" />입니다(여기서 <paramref name="x" />, <paramref name="y" />는 데카르트 평면 상의 지점임).</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-180">An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <paramref name="y" /> / <paramref name="x" />, where (<paramref name="x" />, <paramref name="y" />) is a point in the Cartesian plane.</span>
          </span>
          <span data-ttu-id="cd9fa-181">다음 사항이 적용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-181">Observe the following:</span>
          </span>
          <span data-ttu-id="cd9fa-182">-  (<paramref name="x" />, <paramref name="y" />)가 1사분면 안에 있으면 0 &lt; θ &lt; π/2입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-182">-   For (<paramref name="x" />, <paramref name="y" />) in quadrant 1, 0 &lt; θ &lt; π/2.</span>
          </span>
          <span data-ttu-id="cd9fa-183">-  (<paramref name="x" />, <paramref name="y" />)가 2사분면 안에 있으면 π/2 &lt; θ≤π입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-183">-   For (<paramref name="x" />, <paramref name="y" />) in quadrant 2, π/2 &lt; θ≤π.</span>
          </span>
          <span data-ttu-id="cd9fa-184">-  (<paramref name="x" />, <paramref name="y" />)가 3사분면 안에 있으면 -π &lt; θ &lt; -π/2입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-184">-   For (<paramref name="x" />, <paramref name="y" />) in quadrant 3, -π &lt; θ &lt; -π/2.</span>
          </span>
          <span data-ttu-id="cd9fa-185">-  (<paramref name="x" />, <paramref name="y" />)가 4사분면 안에 있으면 -π/2 &lt; θ &lt; 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-185">-   For (<paramref name="x" />, <paramref name="y" />) in quadrant 4, -π/2 &lt; θ &lt; 0.</span>
          </span>
          <span data-ttu-id="cd9fa-186">점이 사분면의 경계에 있는 경우 반환 값은 다음과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-186">For points on the boundaries of the quadrants, the return value is the following:</span>
          </span>
          <span data-ttu-id="cd9fa-187">-  y가 0이고 x가 음수가 아니면 θ = 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-187">-   If y is 0 and x is not negative, θ = 0.</span>
          </span>
          <span data-ttu-id="cd9fa-188">-  y가 0이고 x가 음수이면 θ = π입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-188">-   If y is 0 and x is negative, θ = π.</span>
          </span>
          <span data-ttu-id="cd9fa-189">-  y가 양수이고 x가 0이면 θ = π/2입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-189">-   If y is positive and x is 0, θ = π/2.</span>
          </span>
          <span data-ttu-id="cd9fa-190">-  y가 음수이고 x가 0이면 θ = -π/2입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-190">-   If y is negative and x is 0, θ = -π/2.</span>
          </span>
          <span data-ttu-id="cd9fa-191">-  y가 0이고 x가 0이면 θ = 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-191">-   If y is 0 and x is 0, θ = 0.</span>
          </span>
          <span data-ttu-id="cd9fa-192">
            <paramref name="x" /> 또는 <paramref name="y" />가 <see cref="F:System.Double.NaN" />이거나, <paramref name="x" /> 및 <paramref name="y" />가 <see cref="F:System.Double.PositiveInfinity" /> 또는 <see cref="F:System.Double.NegativeInfinity" />이면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-192">If <paramref name="x" /> or <paramref name="y" /> is <see cref="F:System.Double.NaN" />, or if <paramref name="x" /> and <paramref name="y" /> are either <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />, the method returns <see cref="F:System.Double.NaN" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-193">반환 값에는 x 축의 벡터는 원점 (0, 0)에서 시작 및 종료 지점, (x, y)로 구성 된 데카르트 평면의 각도입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-193">The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-194">다음 예제에서는 벡터와 각도의 아크탄젠트를 계산 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-194">The following example demonstrates how to calculate the arctangent of an angle and a vector.</span></span> <span data-ttu-id="cd9fa-195">결과 값을 콘솔에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-195">The resulting value is displayed in the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public static double Atanh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atanh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atanh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atanh(double d);" />
      <MemberSignature Language="F#" Value="static member Atanh : double -&gt; double" Usage="System.Math.Atanh d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BigMul">
      <MemberSignature Language="C#" Value="public static long BigMul (int a, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 BigMul(int32 a, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.BigMul(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BigMul (a As Integer, b As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long BigMul(int a, int b);" />
      <MemberSignature Language="F#" Value="static member BigMul : int * int -&gt; int64" Usage="System.Math.BigMul (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="cd9fa-196">곱할 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-196">The first number to multiply.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="cd9fa-197">곱할 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-197">The second number to multiply.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-198">32비트 숫자 두 개를 곱합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-198">Produces the full product of two 32-bit numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-199">지정된 수의 제품을 포함하는 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-199">The number containing the product of the specified numbers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-200">다음 예제에서는 사용 된 <xref:System.Math.BigMul%2A> 두 정수 값의 곱을 계산 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-200">The following example demonstrates the use of the <xref:System.Math.BigMul%2A> method to calculate the product of two integer values.</span></span>  
  
 [!code-cpp[math.bigmul#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.bigmul/CPP/bigmul.cpp#1)]
 [!code-csharp[math.bigmul#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.bigmul/CS/bigmul.cs#1)]
 [!code-vb[math.bigmul#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.bigmul/VB/bigmul.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cbrt">
      <MemberSignature Language="C#" Value="public static double Cbrt (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cbrt(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cbrt(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cbrt (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cbrt(double d);" />
      <MemberSignature Language="F#" Value="static member Cbrt : double -&gt; double" Usage="System.Math.Cbrt d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Ceiling">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd9fa-201">지정된 수보다 크거나 같은 최소 정수 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-201">Returns the smallest integral value greater than or equal to the specified number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-202">이 메서드는 IEEE 표준 754를 섹션 4 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-202">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd9fa-203">이러한 종류의 반올림이 양의 무한대로 반올림 라고도 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-203">This kind of rounding is sometimes called rounding toward positive infinity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static decimal Ceiling (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Ceiling(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Ceiling(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Ceiling(System::Decimal d);" />
      <MemberSignature Language="F#" Value="static member Ceiling : decimal -&gt; decimal" Usage="System.Math.Ceiling d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-204">10진수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-204">A decimal number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-205">지정된 10진수보다 크거나 같은 최소 정수 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-205">Returns the smallest integral value that is greater than or equal to the specified decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-206">
            <paramref name="d" />보다 크거나 같은 최소 정수 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-206">The smallest integral value that is greater than or equal to <paramref name="d" />.</span>
          </span>
          <span data-ttu-id="cd9fa-207">이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Decimal" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-207">Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-208">이 메서드는 IEEE 표준 754를 섹션 4 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-208">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd9fa-209">이러한 종류의 반올림이 양의 무한대로 반올림 라고도 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-209">This kind of rounding is sometimes called rounding toward positive infinity.</span></span> <span data-ttu-id="cd9fa-210">즉, 하는 경우 `d` 이 양수인 경우 모든 소수 부분이 원인이 있는지 `d` 다음 큰 정수로 내림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-210">In other words, if `d` is positive, the presence of any fractional component causes `d` to be rounded to the next highest integer.</span></span> <span data-ttu-id="cd9fa-211">하는 경우 `d` 가 음수 이면 반올림 하면의 소수 부분이 `d` 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-211">If `d` is negative, the rounding operation causes any fractional component of `d` to be discarded.</span></span> <span data-ttu-id="cd9fa-212">이 메서드의 작업에서 다른는 <xref:System.Math.Floor%28System.Decimal%29> 메서드를 음의 무한대로 반올림을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-212">The operation of this method differs from the <xref:System.Math.Floor%28System.Decimal%29> method, which supports rounding toward negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-213">다음 예제는 <xref:System.Math.Ceiling%28System.Decimal%29?displayProperty=nameWithType> 메서드 및 대조 하는 <xref:System.Math.Floor%28System.Decimal%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-213">The following example illustrates the <xref:System.Math.Ceiling%28System.Decimal%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Floor%28System.Decimal%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]
 [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static double Ceiling (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Ceiling(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Ceiling(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Ceiling(double a);" />
      <MemberSignature Language="F#" Value="static member Ceiling : double -&gt; double" Usage="System.Math.Ceiling a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="cd9fa-214">배정밀도 부동 소수점 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-214">A double-precision floating-point number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-215">지정된 배정밀도 부동 소수점 숫자보다 크거나 같은 최소 정수 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-215">Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-216">
            <paramref name="a" />보다 크거나 같은 최소 정수 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-216">The smallest integral value that is greater than or equal to <paramref name="a" />.</span>
          </span>
          <span data-ttu-id="cd9fa-217">
            <paramref name="a" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면, 해당 값이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-217">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span>
          </span>
          <span data-ttu-id="cd9fa-218">이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Double" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-218">Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-219">이 메서드는 IEEE 표준 754를 섹션 4 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-219">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd9fa-220">이러한 종류의 반올림이 양의 무한대로 반올림 라고도 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-220">This kind of rounding is sometimes called rounding toward positive infinity.</span></span> <span data-ttu-id="cd9fa-221">즉, 하는 경우 `a` 이 양수인 경우 모든 소수 부분이 원인이 있는지 `a` 다음 큰 정수로 내림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-221">In other words, if `a` is positive, the presence of any fractional component causes `a` to be rounded to the next highest integer.</span></span> <span data-ttu-id="cd9fa-222">하는 경우 `a` 가 음수 이면 반올림 하면의 소수 부분이 `a` 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-222">If `a` is negative, the rounding operation causes any fractional component of `a` to be discarded.</span></span> <span data-ttu-id="cd9fa-223">이 메서드의 작업에서 다른는 <xref:System.Math.Floor%28System.Double%29> 메서드를 음의 무한대로 반올림을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-223">The operation of this method differs from the <xref:System.Math.Floor%28System.Double%29> method, which supports rounding toward negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-224">다음 예제는 <xref:System.Math.Ceiling%28System.Double%29?displayProperty=nameWithType> 메서드 및 대조 하는 <xref:System.Math.Floor%28System.Double%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-224">The following example illustrates the <xref:System.Math.Ceiling%28System.Double%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Floor%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]
 [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static byte Clamp (byte value, byte min, byte max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Clamp(unsigned int8 value, unsigned int8 min, unsigned int8 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Byte, min As Byte, max As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Clamp(System::Byte value, System::Byte min, System::Byte max);" />
      <MemberSignature Language="F#" Value="static member Clamp : byte * byte * byte -&gt; byte" Usage="System.Math.Clamp (value, min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="min" Type="System.Byte" />
        <Parameter Name="max" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static decimal Clamp (decimal value, decimal min, decimal max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Clamp(valuetype System.Decimal value, valuetype System.Decimal min, valuetype System.Decimal max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Decimal, min As Decimal, max As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Clamp(System::Decimal value, System::Decimal min, System::Decimal max);" />
      <MemberSignature Language="F#" Value="static member Clamp : decimal * decimal * decimal -&gt; decimal" Usage="System.Math.Clamp (value, min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="min" Type="System.Decimal" />
        <Parameter Name="max" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static double Clamp (double value, double min, double max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Clamp(float64 value, float64 min, float64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Double, min As Double, max As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Clamp(double value, double min, double max);" />
      <MemberSignature Language="F#" Value="static member Clamp : double * double * double -&gt; double" Usage="System.Math.Clamp (value, min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="min" Type="System.Double" />
        <Parameter Name="max" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static short Clamp (short value, short min, short max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Clamp(int16 value, int16 min, int16 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Short, min As Short, max As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Clamp(short value, short min, short max);" />
      <MemberSignature Language="F#" Value="static member Clamp : int16 * int16 * int16 -&gt; int16" Usage="System.Math.Clamp (value, min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="min" Type="System.Int16" />
        <Parameter Name="max" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static int Clamp (int value, int min, int max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Clamp(int32 value, int32 min, int32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Integer, min As Integer, max As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Clamp(int value, int min, int max);" />
      <MemberSignature Language="F#" Value="static member Clamp : int * int * int -&gt; int" Usage="System.Math.Clamp (value, min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="max" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static long Clamp (long value, long min, long max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Clamp(int64 value, int64 min, int64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Long, min As Long, max As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Clamp(long value, long min, long max);" />
      <MemberSignature Language="F#" Value="static member Clamp : int64 * int64 * int64 -&gt; int64" Usage="System.Math.Clamp (value, min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="min" Type="System.Int64" />
        <Parameter Name="max" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static sbyte Clamp (sbyte value, sbyte min, sbyte max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Clamp(int8 value, int8 min, int8 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As SByte, min As SByte, max As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Clamp(System::SByte value, System::SByte min, System::SByte max);" />
      <MemberSignature Language="F#" Value="static member Clamp : sbyte * sbyte * sbyte -&gt; sbyte" Usage="System.Math.Clamp (value, min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="min" Type="System.SByte" />
        <Parameter Name="max" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static float Clamp (float value, float min, float max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Clamp(float32 value, float32 min, float32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Single, min As Single, max As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Clamp(float value, float min, float max);" />
      <MemberSignature Language="F#" Value="static member Clamp : single * single * single -&gt; single" Usage="System.Math.Clamp (value, min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="min" Type="System.Single" />
        <Parameter Name="max" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static ushort Clamp (ushort value, ushort min, ushort max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Clamp(unsigned int16 value, unsigned int16 min, unsigned int16 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As UShort, min As UShort, max As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Clamp(System::UInt16 value, System::UInt16 min, System::UInt16 max);" />
      <MemberSignature Language="F#" Value="static member Clamp : uint16 * uint16 * uint16 -&gt; uint16" Usage="System.Math.Clamp (value, min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="min" Type="System.UInt16" />
        <Parameter Name="max" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static uint Clamp (uint value, uint min, uint max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Clamp(unsigned int32 value, unsigned int32 min, unsigned int32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As UInteger, min As UInteger, max As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Clamp(System::UInt32 value, System::UInt32 min, System::UInt32 max);" />
      <MemberSignature Language="F#" Value="static member Clamp : uint32 * uint32 * uint32 -&gt; uint32" Usage="System.Math.Clamp (value, min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="min" Type="System.UInt32" />
        <Parameter Name="max" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static ulong Clamp (ulong value, ulong min, ulong max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Clamp(unsigned int64 value, unsigned int64 min, unsigned int64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As ULong, min As ULong, max As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Clamp(System::UInt64 value, System::UInt64 min, System::UInt64 max);" />
      <MemberSignature Language="F#" Value="static member Clamp : uint64 * uint64 * uint64 -&gt; uint64" Usage="System.Math.Clamp (value, min, max)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="min" Type="System.UInt64" />
        <Parameter Name="max" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static double Cos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cos(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cos(double d);" />
      <MemberSignature Language="F#" Value="static member Cos : double -&gt; double" Usage="System.Math.Cos d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-225">라디안 단위의 각도입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-225">An angle, measured in radians.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-226">지정된 각도의 코사인을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-226">Returns the cosine of the specified angle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-227">
            <paramref name="d" />의 코사인입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-227">The cosine of <paramref name="d" />.</span>
          </span>
          <span data-ttu-id="cd9fa-228">
            <paramref name="d" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-228">If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-229">각도 `d`, 라디안에서 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-229">The angle, `d`, must be in radians.</span></span> <span data-ttu-id="cd9fa-230">곱  <xref:System.Math.PI?displayProperty=nameWithType> /180 라디안으로 각도 변환 하기.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-230">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 <span data-ttu-id="cd9fa-231">허용 되는 값의 `d` -9223372036854775295 약에서 약 9223372036854775295 까지입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-231">Acceptable values of `d` range from approximately -9223372036854775295 to approximately 9223372036854775295.</span></span> <span data-ttu-id="cd9fa-232">이 범위를 벗어나는 값을 <xref:System.Math.Cos%2A> 메서드가 반환 되는 `d` 예외를 throw 하는 대신 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-232">For values outside this range, the <xref:System.Math.Cos%2A> method returns `d` unchanged rather than throwing an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-233">다음 예제에서는 <xref:System.Math.Cos%2A> 선택 된 각도의 삼각 특정 id를 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-233">The following example uses <xref:System.Math.Cos%2A> to evaluate certain trigonometric identities for selected angles.</span></span>  
  
 [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]
 [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]
 [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static double Cosh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cosh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cosh(double value);" />
      <MemberSignature Language="F#" Value="static member Cosh : double -&gt; double" Usage="System.Math.Cosh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-234">라디안 단위의 각도입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-234">An angle, measured in radians.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-235">지정된 각도의 하이퍼볼릭 코사인을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-235">Returns the hyperbolic cosine of the specified angle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-236">
            <paramref name="value" />의 쌍곡선 코사인입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-236">The hyperbolic cosine of <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="cd9fa-237">
            <paramref name="value" />가 <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면 <see cref="F:System.Double.PositiveInfinity" />가 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-237">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> is returned.</span>
          </span>
          <span data-ttu-id="cd9fa-238">
            <paramref name="value" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-238">If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-239">각도 `value`, 라디안에서 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-239">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="cd9fa-240">곱  <xref:System.Math.PI?displayProperty=nameWithType> /180 라디안으로 각도 변환 하기.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-240">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-241">다음 예제에서는 <xref:System.Math.Cosh%2A> 선택한 값에 대 한 하이퍼볼릭을 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-241">The following example uses <xref:System.Math.Cosh%2A> to evaluate certain hyperbolic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]
 [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]
 [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DivRem">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd9fa-242">두 수의 몫을 계산하고 나머지를 출력 매개 변수로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-242">Calculates the quotient of two numbers and also returns the remainder in an output parameter.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static int DivRem (int a, int b, out int result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DivRem(int32 a, int32 b, [out] int32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (a As Integer, b As Integer, ByRef result As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DivRem(int a, int b, [Runtime::InteropServices::Out] int % result);" />
      <MemberSignature Language="F#" Value="static member DivRem : int * int *  -&gt; int" Usage="System.Math.DivRem (a, b, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
        <Parameter Name="result" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="cd9fa-243">피제수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-243">The dividend.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="cd9fa-244">제수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-244">The divisor.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="cd9fa-245">나머지입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-245">The remainder.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-246">부호 있는 두 32비트 정수의 몫을 계산하고 나머지를 출력 매개 변수로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-246">Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-247">지정된 수의 몫입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-247">The quotient of the specified numbers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-248">나머지는 나머지 작업을 사용 하 여 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-248">The remainder is calculated by using the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-249">다음 예제는 <xref:System.Math.DivRem%28System.Int32%2CSystem.Int32%2CSystem.Int32%40%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-249">The following example demonstrates the <xref:System.Math.DivRem%28System.Int32%2CSystem.Int32%2CSystem.Int32%40%29> method.</span></span>  
  
 [!code-csharp[System.Math.DivRem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem1.cs#1)]
 [!code-vb[System.Math.DivRem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="cd9fa-250">
            <paramref name="b" />가 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-250">
              <paramref name="b" /> is zero.</span>
          </span>
        </exception>
        <altmember cref="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static long DivRem (long a, long b, out long result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 DivRem(int64 a, int64 b, [out] int64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (a As Long, b As Long, ByRef result As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long DivRem(long a, long b, [Runtime::InteropServices::Out] long % result);" />
      <MemberSignature Language="F#" Value="static member DivRem : int64 * int64 *  -&gt; int64" Usage="System.Math.DivRem (a, b, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
        <Parameter Name="b" Type="System.Int64" />
        <Parameter Name="result" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="cd9fa-251">피제수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-251">The dividend.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="cd9fa-252">제수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-252">The divisor.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="cd9fa-253">나머지입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-253">The remainder.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-254">부호 있는 두 64비트 정수의 몫을 계산하고 나머지를 출력 매개 변수로 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-254">Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-255">지정된 수의 몫입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-255">The quotient of the specified numbers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-256">나머지는 나머지 작업을 사용 하 여 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-256">The remainder is calculated by using the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-257">다음 예제는 <xref:System.Math.DivRem%28System.Int64%2CSystem.Int64%2CSystem.Int64%40%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-257">The following example demonstrates the <xref:System.Math.DivRem%28System.Int64%2CSystem.Int64%2CSystem.Int64%40%29> method.</span></span>  
  
 [!code-csharp[System.Math.DivRem#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem2.cs#2)]
 [!code-vb[System.Math.DivRem#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="cd9fa-258">
            <paramref name="b" />가 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-258">
              <paramref name="b" /> is zero.</span>
          </span>
        </exception>
        <altmember cref="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="E">
      <MemberSignature Language="C#" Value="public const double E = 2.71828182845905;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 E = (2.71828182845905)" />
      <MemberSignature Language="DocId" Value="F:System.Math.E" />
      <MemberSignature Language="VB.NET" Value="Public Const E As Double  = 2.71828182845905" />
      <MemberSignature Language="C++ CLI" Value="public: double E = 2.71828182845905;" />
      <MemberSignature Language="F#" Value="val mutable E : double" Usage="System.Math.E" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>2.71828182845905</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd9fa-259">상수, <see langword="e" />로 지정된 자연 로그의 밑을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-259">Represents the natural logarithmic base, specified by the constant, <see langword="e" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-260">이 필드의 값은 2.7182818284590452354입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-260">The value of this field is 2.7182818284590452354.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-261">다음 예제에서는 비교 <xref:System.Math.E> power 일련의 계산 된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-261">The following example compares <xref:System.Math.E> with the value calculated from a power series.</span></span>  
  
 [!code-cpp[System.Math.E#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.E/CPP/efield.cpp#1)]
 [!code-csharp[System.Math.E#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.E/CS/efield.cs#1)]
 [!code-vb[System.Math.E#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.E/VB/efield.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static double Exp (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Exp(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Exp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Exp(double d);" />
      <MemberSignature Language="F#" Value="static member Exp : double -&gt; double" Usage="System.Math.Exp d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-262">거듭제곱을 지정하는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-262">A number specifying a power.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-263">
            <see langword="e" />를 지정된 수만큼 거듭제곱하여 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-263">Returns <see langword="e" /> raised to the specified power.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-264">
            <see langword="e" />의 <paramref name="d" />승입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-264">The number <see langword="e" /> raised to the power <paramref name="d" />.</span>
          </span>
          <span data-ttu-id="cd9fa-265">
            <paramref name="d" />가 <see cref="F:System.Double.NaN" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면, 해당 값이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-265">If <paramref name="d" /> equals <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span>
          </span>
          <span data-ttu-id="cd9fa-266">
            <paramref name="d" />가 <see cref="F:System.Double.NegativeInfinity" />와 같으면 0이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-266">If <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, 0 is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-267">`e` 수학 상수 값인 약 2.71828입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-267">`e` is a mathematical constant whose value is approximately 2.71828.</span></span>  
  
 <span data-ttu-id="cd9fa-268">사용 된 <xref:System.Math.Pow%2A> 다른 밑의 승수를 계산 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-268">Use the <xref:System.Math.Pow%2A> method to calculate powers of other bases.</span></span>  
  
 <span data-ttu-id="cd9fa-269"><xref:System.Math.Exp%2A> 역 수는 <xref:System.Math.Log%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-269"><xref:System.Math.Exp%2A> is the inverse of <xref:System.Math.Log%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-270">다음 예제에서는 <xref:System.Math.Exp%2A> 선택한 값에 대 한 특정 지 수 및 로그 id를 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-270">The following example uses <xref:System.Math.Exp%2A> to evaluate certain exponential and logarithmic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Exp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Exp/CPP/exp.cpp#1)]
 [!code-csharp[System.Math.Exp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Exp/CS/exp.cs#1)]
 [!code-vb[System.Math.Exp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Exp/VB/exp.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Math.E" />
        <altmember cref="M:System.Math.Pow(System.Double,System.Double)" />
        <altmember cref="M:System.Math.Log(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Floor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd9fa-271">지정된 숫자보다 작거나 같은 최대 정수 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-271">Returns the largest integral value less than or equal to the specified number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-272">이 메서드는 IEEE 표준 754를 섹션 4 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-272">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd9fa-273">이러한 종류의 반올림 음의 무한대로 반올림 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-273">This kind of rounding is sometimes called rounding toward negative infinity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static decimal Floor (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Floor(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Floor(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Floor(System::Decimal d);" />
      <MemberSignature Language="F#" Value="static member Floor : decimal -&gt; decimal" Usage="System.Math.Floor d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-274">10진수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-274">A decimal number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-275">지정된 10진수보다 작거나 같은 최대 정수 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-275">Returns the largest integral value less than or equal to the specified decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-276">
            <paramref name="d" />보다 작거나 같은 최대 정수 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-276">The largest integral value less than or equal to <paramref name="d" />.</span>
          </span>
          <span data-ttu-id="cd9fa-277">메서드는 형식 <see cref="T:System.Decimal" />의 정수 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-277">Note that the method returns an integral value of type <see cref="T:System.Decimal" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-278">이 메서드는 IEEE 표준 754를 섹션 4 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-278">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd9fa-279">이러한 종류의 반올림 음의 무한대로 반올림 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-279">This kind of rounding is sometimes called rounding toward negative infinity.</span></span> <span data-ttu-id="cd9fa-280">즉, 경우 `d` 가 양수 이면 소수 부분이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-280">In other words, if `d` is positive, any fractional component is truncated.</span></span> <span data-ttu-id="cd9fa-281">경우 `d` 가 음수 이면 소수 부분이 있으면 존재 하면 가장 작은 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-281">If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</span></span> <span data-ttu-id="cd9fa-282">이 메서드의 작업에서 다른는 <xref:System.Math.Ceiling%2A> 메서드를 양의 무한대로 반올림을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-282">The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-283">다음 예제는 <xref:System.Math.Floor%28System.Decimal%29?displayProperty=nameWithType> 메서드 및 대조 하는 <xref:System.Math.Ceiling%28System.Decimal%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-283">The following example illustrates the <xref:System.Math.Floor%28System.Decimal%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Ceiling%28System.Decimal%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]
 [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Decimal.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static double Floor (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Floor(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Floor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Floor(double d);" />
      <MemberSignature Language="F#" Value="static member Floor : double -&gt; double" Usage="System.Math.Floor d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-284">배정밀도 부동 소수점 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-284">A double-precision floating-point number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-285">지정된 배정밀도 부동 소수점 숫자보다 작거나 같은 최대 정수 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-285">Returns the largest integral value less than or equal to the specified double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-286">
            <paramref name="d" />보다 작거나 같은 최대 정수 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-286">The largest integral value less than or equal to <paramref name="d" />.</span>
          </span>
          <span data-ttu-id="cd9fa-287">
            <paramref name="d" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면, 해당 값이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-287">If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-288">이 메서드는 IEEE 표준 754를 섹션 4 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-288">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd9fa-289">이러한 종류의 반올림 음의 무한대로 반올림 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-289">This kind of rounding is sometimes called rounding toward negative infinity.</span></span> <span data-ttu-id="cd9fa-290">즉, 경우 `d` 가 양수 이면 소수 부분이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-290">In other words, if `d` is positive, any fractional component is truncated.</span></span> <span data-ttu-id="cd9fa-291">경우 `d` 가 음수 이면 소수 부분이 있으면 존재 하면 가장 작은 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-291">If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</span></span> <span data-ttu-id="cd9fa-292">이 메서드의 작업에서 다른는 <xref:System.Math.Ceiling%2A> 메서드를 양의 무한대로 반올림을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-292">The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-293">다음 예제는 <xref:System.Math.Floor%28System.Double%29?displayProperty=nameWithType> 메서드 및 대조 하는 <xref:System.Math.Ceiling%28System.Double%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-293">The following example illustrates the <xref:System.Math.Floor%28System.Double%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Ceiling%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]
 [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="IEEERemainder">
      <MemberSignature Language="C#" Value="public static double IEEERemainder (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IEEERemainder(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IEEERemainder (x As Double, y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double IEEERemainder(double x, double y);" />
      <MemberSignature Language="F#" Value="static member IEEERemainder : double * double -&gt; double" Usage="System.Math.IEEERemainder (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="cd9fa-294">피제수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-294">A dividend.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="cd9fa-295">제수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-295">A divisor.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-296">지정된 수를 지정된 다른 수로 나눈 나머지를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-296">Returns the remainder resulting from the division of a specified number by another specified number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-297">
            <paramref name="x" /> - (<paramref name="y" /> Q)와 같은 숫자입니다. 여기서 Q는 가장 가까운 정수로 반올림된 <paramref name="x" /> / <paramref name="y" />의 몫입니다. <paramref name="x" /> / <paramref name="y" />가 두 수의 중간이면, 짝수가 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-297">A number equal to <paramref name="x" /> - (<paramref name="y" /> Q), where Q is the quotient of <paramref name="x" /> / <paramref name="y" /> rounded to the nearest integer (if <paramref name="x" /> / <paramref name="y" /> falls halfway between two integers, the even integer is returned).</span>
          </span>
          <span data-ttu-id="cd9fa-298">
            <paramref name="x" /> - (<paramref name="y" /> Q)가 0인 경우 <paramref name="x" />가 양수이면 값 +0이, <paramref name="x" />가 음수이면 값 -0이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-298">If <paramref name="x" /> - (<paramref name="y" /> Q) is zero, the value +0 is returned if <paramref name="x" /> is positive, or -0 if <paramref name="x" /> is negative.</span>
          </span>
          <span data-ttu-id="cd9fa-299">
            <paramref name="y" /> = 0인 경우 <see cref="F:System.Double.NaN" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-299">If <paramref name="y" /> = 0, <see cref="F:System.Double.NaN" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-300">ANSI/IEEE 표준 754-1985;의 5.1 절에에서 정의 된 나머지 작업을 사용 하 여이 작업을 준수 합니다. 이진 부동 소수점 연산;에 대 한 IEEE 표준 Institute of Electrical 및 Electronics Engineers, Inc. 1985 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-300">This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.</span></span>  
  
 <span data-ttu-id="cd9fa-301"><xref:System.Math.IEEERemainder%2A> 메서드는 모듈러스 연산자와 동일 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-301">The <xref:System.Math.IEEERemainder%2A> method is not the same as the modulus operator.</span></span> <span data-ttu-id="cd9fa-302">나누기 후 나머지를 반환 둘 다 사용 하는 수식을 서로 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-302">Although both return the remainder after division, the formulas they use are different.</span></span> <span data-ttu-id="cd9fa-303">에 대 한 수식은 <xref:System.Math.IEEERemainder%2A> 메서드는:</span><span class="sxs-lookup"><span data-stu-id="cd9fa-303">The formula for the <xref:System.Math.IEEERemainder%2A> method is:</span></span>  
  
```  
IEEERemainder = dividend - (divisor * Math.Round(dividend / divisor))  
```  
  
 <span data-ttu-id="cd9fa-304">반면, 나머지 연산자에 대 한 수식은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-304">In contrast, the formula for the modulus operator is:</span></span>  
  
```  
Modulus = (Math.Abs(dividend) - (Math.Abs(divisor) *   
          (Math.Floor(Math.Abs(dividend) / Math.Abs(divisor))))) *   
          Math.Sign(dividend)  
```  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-305">다음 예제에서는 반환한 나머지를 대조를 <xref:System.Math.IEEERemainder%2A> 모듈러스 나누기 연산자에서 반환 된 나머지 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-305">The following example contrasts the remainder returned by the <xref:System.Math.IEEERemainder%2A> method with the remainder returned by the modulus division operator.</span></span>  
  
 [!code-csharp[System.Math.IEEERemainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.ieeeremainder/cs/ieeeremainder1.cs#1)]
 [!code-vb[System.Math.IEEERemainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.ieeeremainder/vb/ieeeremainder1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd9fa-306">지정된 숫자의 로그를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-306">Returns the logarithm of a specified number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(double d);" />
      <MemberSignature Language="F#" Value="static member Log : double -&gt; double" Usage="System.Math.Log d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-307">로그가 있는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-307">The number whose logarithm is to be found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-308">지정된 숫자의 자연(밑 <see langword="e" />) 로그를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-308">Returns the natural (base <see langword="e" />) logarithm of a specified number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-309">다음 표에 나와 있는 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-309">One of the values in the following table.</span>
          </span>
          <span data-ttu-id="cd9fa-310">
            <list type="table">
              <listheader>
                <term>
                  <paramref name="d" /> 매개 변수  </term>
                <description> 반환 값  </description>
              </listheader>
              <item>
                <term> 양수  </term>
                <description>
                  <paramref name="d" />의 자연 로그 즉, <paramref name="d" />에서 또는 로그 <paramref name="d" /></description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <see cref="F:System.Double.NegativeInfinity" />
                </description>
              </item>
              <item>
                <term> 음수  </term>
                <description>
                  <see cref="F:System.Double.NaN" />
                </description>
              </item>
              <item>
                <term>
                  <see cref="F:System.Double.NaN" />
                </term>
                <description>
                  <see cref="F:System.Double.NaN" />
                </description>
              </item>
              <item>
                <term>과 같음  <see cref="F:System.Double.PositiveInfinity" /></term>
                <description>
                  <see cref="F:System.Double.PositiveInfinity" />
                </description>
              </item>
            </list>와 같음</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-310">
              <list type="table">
                <listheader>
                  <term>
                    <paramref name="d" /> parameter  </term>
                  <description> Return value  </description>
                </listheader>
                <item>
                  <term> Positive  </term>
                  <description> The natural logarithm of <paramref name="d" />; that is, ln <paramref name="d" />, or log e <paramref name="d" /></description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description>
                    <see cref="F:System.Double.NegativeInfinity" />
                  </description>
                </item>
                <item>
                  <term> Negative  </term>
                  <description>
                    <see cref="F:System.Double.NaN" />
                  </description>
                </item>
                <item>
                  <term> Equal to <see cref="F:System.Double.NaN" /></term>
                  <description>
                    <see cref="F:System.Double.NaN" />
                  </description>
                </item>
                <item>
                  <term> Equal to <see cref="F:System.Double.PositiveInfinity" /></term>
                  <description>
                    <see cref="F:System.Double.PositiveInfinity" />
                  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-311">매개 변수 `d` 10 진수로로 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-311">Parameter `d` is specified as a base 10 number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-312">다음 예제는 <xref:System.Math.Log%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-312">The following example illustrates the <xref:System.Math.Log%2A> method.</span></span>  
  
 [!code-csharp[System.Math.Log_Overloads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/log1.cs#2)]
 [!code-vb[System.Math.Log_Overloads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/log1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Math.E" />
        <altmember cref="M:System.Math.Exp(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (double a, double newBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 a, float64 newBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (a As Double, newBase As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(double a, double newBase);" />
      <MemberSignature Language="F#" Value="static member Log : double * double -&gt; double" Usage="System.Math.Log (a, newBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="newBase" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="cd9fa-313">로그가 있는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-313">The number whose logarithm is to be found.</span>
          </span>
        </param>
        <param name="newBase">
          <span data-ttu-id="cd9fa-314">로그의 밑입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-314">The base of the logarithm.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-315">지정된 밑을 사용하여 지정된 숫자의 로그를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-315">Returns the logarithm of a specified number in a specified base.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-316">다음 표에 나와 있는 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-316">One of the values in the following table.</span>
          </span>
          <span data-ttu-id="cd9fa-317">+Infinity는 <see cref="F:System.Double.PositiveInfinity" />, -Infinity는 <see cref="F:System.Double.NegativeInfinity" />,NaN은 <see cref="F:System.Double.NaN" />을 의미합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-317">(+Infinity denotes <see cref="F:System.Double.PositiveInfinity" />, -Infinity denotes <see cref="F:System.Double.NegativeInfinity" />, and NaN denotes <see cref="F:System.Double.NaN" />.)</span>
          </span>
          <span data-ttu-id="cd9fa-318">
            <list type="table">
              <listheader>
                <term>
                  <paramref name="a" />
                </term>
                <description>
                  <paramref name="newBase" />
                </description>
                <description> 반환 값  </description>
              </listheader>
              <item>
                <term>
                  <paramref name="a" />&gt; 0  </term>
                <description> (0 &lt;<paramref name="newBase" />&lt; 1) 또는 (<paramref name="newBase" />&gt; 1)  </description>
                <description> lognewBase(a)  </description>
              </item>
              <item>
                <term>
                  <paramref name="a" />&lt; 0  </term>
                <description> (모든 값)  </description>
                <description> NaN  </description>
              </item>
              <item>
                <term> (모든 값)  </term>
                <description>
                  <paramref name="newBase" />&lt; 0  </description>
                <description> NaN  </description>
              </item>
              <item>
                <term>
                  <paramref name="a" /> != 1  </term>
                <description>
                  <paramref name="newBase" /> = 0  </description>
                <description> NaN  </description>
              </item>
              <item>
                <term>
                  <paramref name="a" /> != 1  </term>
                <description>
                  <paramref name="newBase" /> = +Infinity  </description>
                <description> NaN  </description>
              </item>
              <item>
                <term>
                  <paramref name="a" /> = NaN  </term>
                <description> (모든 값)  </description>
                <description> NaN  </description>
              </item>
              <item>
                <term> (모든 값)  </term>
                <description>
                  <paramref name="newBase" /> = NaN  </description>
                <description> NaN  </description>
              </item>
              <item>
                <term> (모든 값)  </term>
                <description>
                  <paramref name="newBase" /> = 1  </description>
                <description> NaN  </description>
              </item>
              <item>
                <term>
                  <paramref name="a" /> = 0  </term>
                <description> 0 &lt;<paramref name="newBase" />&lt; 1  </description>
                <description> +Infinity  </description>
              </item>
              <item>
                <term>
                  <paramref name="a" /> = 0  </term>
                <description>
                  <paramref name="newBase" />&gt; 1  </description>
                <description> -Infinity  </description>
              </item>
              <item>
                <term>
                  <paramref name="a" /> =  +Infinity  </term>
                <description> 0 &lt;<paramref name="newBase" />&lt; 1  </description>
                <description> -Infinity  </description>
              </item>
              <item>
                <term>
                  <paramref name="a" /> =  +Infinity  </term>
                <description>
                  <paramref name="newBase" />&gt; 1  </description>
                <description> +Infinity  </description>
              </item>
              <item>
                <term>
                  <paramref name="a" /> = 1  </term>
                <description>
                  <paramref name="newBase" /> = 0  </description>
                <description> 0  </description>
              </item>
              <item>
                <term>
                  <paramref name="a" /> = 1  </term>
                <description>
                  <paramref name="newBase" /> = +Infinity  </description>
                <description> 0  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-318">
              <list type="table">
                <listheader>
                  <term>
                    <paramref name="a" />
                  </term>
                  <description>
                    <paramref name="newBase" />
                  </description>
                  <description> Return value  </description>
                </listheader>
                <item>
                  <term>
                    <paramref name="a" />&gt; 0  </term>
                  <description> (0 &lt;<paramref name="newBase" />&lt; 1) -or-(<paramref name="newBase" />&gt; 1)  </description>
                  <description> lognewBase(a)  </description>
                </item>
                <item>
                  <term>
                    <paramref name="a" />&lt; 0  </term>
                  <description> (any value)  </description>
                  <description> NaN  </description>
                </item>
                <item>
                  <term> (any value)  </term>
                  <description>
                    <paramref name="newBase" />&lt; 0  </description>
                  <description> NaN  </description>
                </item>
                <item>
                  <term>
                    <paramref name="a" /> != 1  </term>
                  <description>
                    <paramref name="newBase" /> = 0  </description>
                  <description> NaN  </description>
                </item>
                <item>
                  <term>
                    <paramref name="a" /> != 1  </term>
                  <description>
                    <paramref name="newBase" /> = +Infinity  </description>
                  <description> NaN  </description>
                </item>
                <item>
                  <term>
                    <paramref name="a" /> = NaN  </term>
                  <description> (any value)  </description>
                  <description> NaN  </description>
                </item>
                <item>
                  <term> (any value)  </term>
                  <description>
                    <paramref name="newBase" /> = NaN  </description>
                  <description> NaN  </description>
                </item>
                <item>
                  <term> (any value)  </term>
                  <description>
                    <paramref name="newBase" /> = 1  </description>
                  <description> NaN  </description>
                </item>
                <item>
                  <term>
                    <paramref name="a" /> = 0  </term>
                  <description> 0 &lt;<paramref name="newBase" />&lt; 1  </description>
                  <description> +Infinity  </description>
                </item>
                <item>
                  <term>
                    <paramref name="a" /> = 0  </term>
                  <description>
                    <paramref name="newBase" />&gt; 1  </description>
                  <description> -Infinity  </description>
                </item>
                <item>
                  <term>
                    <paramref name="a" /> =  +Infinity  </term>
                  <description> 0 &lt;<paramref name="newBase" />&lt; 1  </description>
                  <description> -Infinity  </description>
                </item>
                <item>
                  <term>
                    <paramref name="a" /> =  +Infinity  </term>
                  <description>
                    <paramref name="newBase" />&gt; 1  </description>
                  <description> +Infinity  </description>
                </item>
                <item>
                  <term>
                    <paramref name="a" /> = 1  </term>
                  <description>
                    <paramref name="newBase" /> = 0  </description>
                  <description> 0  </description>
                </item>
                <item>
                  <term>
                    <paramref name="a" /> = 1  </term>
                  <description>
                    <paramref name="newBase" /> = +Infinity  </description>
                  <description> 0  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-319">다음 예제에서는 <xref:System.Math.Log%2A> 선택한 값에 대 한 특정 로그 id를 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-319">The following example uses <xref:System.Math.Log%2A> to evaluate certain logarithmic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Log_Overloads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CPP/loggen.cpp#1)]
 [!code-csharp[System.Math.Log_Overloads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/loggen.cs#1)]
 [!code-vb[System.Math.Log_Overloads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/loggen.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static double Log10 (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log10(double d);" />
      <MemberSignature Language="F#" Value="static member Log10 : double -&gt; double" Usage="System.Math.Log10 d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-320">로그가 있는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-320">A number whose logarithm is to be found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-321">밑을 10으로 사용하여 지정된 숫자의 로그를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-321">Returns the base 10 logarithm of a specified number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-322">다음 표에 나와 있는 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-322">One of the values in the following table.</span>
          </span>
          <span data-ttu-id="cd9fa-323">
            <list type="table">
              <listheader>
                <term>
                  <paramref name="d" /> 매개 변수  </term>
                <description> 반환 값  </description>
              </listheader>
              <item>
                <term> 양수  </term>
                <description>
                  <paramref name="d" />의 기본 10 로그 즉, 로그 10<paramref name="d" />입니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <see cref="F:System.Double.NegativeInfinity" />
                </description>
              </item>
              <item>
                <term> 음수  </term>
                <description>
                  <see cref="F:System.Double.NaN" />
                </description>
              </item>
              <item>
                <term>
                  <see cref="F:System.Double.NaN" />
                </term>
                <description>
                  <see cref="F:System.Double.NaN" />
                </description>
              </item>
              <item>
                <term>과 같음  <see cref="F:System.Double.PositiveInfinity" /></term>
                <description>
                  <see cref="F:System.Double.PositiveInfinity" />
                </description>
              </item>
            </list>와 같음</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-323">
              <list type="table">
                <listheader>
                  <term>
                    <paramref name="d" /> parameter  </term>
                  <description> Return value  </description>
                </listheader>
                <item>
                  <term> Positive  </term>
                  <description> The base 10 log of <paramref name="d" />; that is, log 10<paramref name="d" />.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description>
                    <see cref="F:System.Double.NegativeInfinity" />
                  </description>
                </item>
                <item>
                  <term> Negative  </term>
                  <description>
                    <see cref="F:System.Double.NaN" />
                  </description>
                </item>
                <item>
                  <term> Equal to <see cref="F:System.Double.NaN" /></term>
                  <description>
                    <see cref="F:System.Double.NaN" />
                  </description>
                </item>
                <item>
                  <term> Equal to <see cref="F:System.Double.PositiveInfinity" /></term>
                  <description>
                    <see cref="F:System.Double.PositiveInfinity" />
                  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-324">매개 변수 `d` 10 진수로로 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-324">Parameter `d` is specified as a base 10 number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-325">다음 예제에서는 <xref:System.Math.Log10%2A> 선택한 값의 밑수 10을 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-325">The following example uses the <xref:System.Math.Log10%2A> method to return the base 10 logarithm for selected values.</span></span>  
  
 [!code-csharp[System.Math.Log10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log10/CS/log10.cs#1)]
 [!code-vb[System.Math.Log10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log10/VB/log10.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Max">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd9fa-326">지정된 두 숫자 중 더 큰 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-326">Returns the larger of two specified numbers.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static byte Max (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Max(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Byte, val2 As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Max(System::Byte val1, System::Byte val2);" />
      <MemberSignature Language="F#" Value="static member Max : byte * byte -&gt; byte" Usage="System.Math.Max (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-327">비교할 두 개의 8비트 부호 없는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-327">The first of two 8-bit unsigned integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-328">비교할 두 개의 8비트 부호 없는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-328">The second of two 8-bit unsigned integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-329">두 개의 8비트 부호 없는 정수 중 더 큰 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-329">Returns the larger of two 8-bit unsigned integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-330">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-330">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-331">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Max%2A> 메서드를 반환 하 고 두 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-331">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal Max (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Decimal, val2 As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Max(System::Decimal val1, System::Decimal val2);" />
      <MemberSignature Language="F#" Value="static member Max : decimal * decimal -&gt; decimal" Usage="System.Math.Max (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-332">비교할 두 개의 10진수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-332">The first of two decimal numbers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-333">비교할 두 개의 10진수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-333">The second of two decimal numbers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-334">두 개의 10진수 중 더 큰 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-334">Returns the larger of two decimal numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-335">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-335">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-336">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Max%2A> 메서드를 반환 하 고 두 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-336">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double Max (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(float64 val1, float64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Double, val2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Max(double val1, double val2);" />
      <MemberSignature Language="F#" Value="static member Max : double * double -&gt; double" Usage="System.Math.Max (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-337">비교할 두 개의 배정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-337">The first of two double-precision floating-point numbers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-338">비교할 두 개의 배정밀도 부동 소수점 수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-338">The second of two double-precision floating-point numbers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-339">두 개의 배정밀도 부동 소수점 수 중 더 큰 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-339">Returns the larger of two double-precision floating-point numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-340">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-340">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span>
          </span>
          <span data-ttu-id="cd9fa-341">
            <paramref name="val1" />, <paramref name="val2" /> 또는 <paramref name="val1" />과 <paramref name="val2" />가 모두 <see cref="F:System.Double.NaN" />과 같은 경우 <see cref="F:System.Double.NaN" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-341">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-342">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Max%2A> 메서드를 반환 하 고 두 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-342">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static short Max (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Max(int16 val1, int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Short, val2 As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Max(short val1, short val2);" />
      <MemberSignature Language="F#" Value="static member Max : int16 * int16 -&gt; int16" Usage="System.Math.Max (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-343">비교할 두 개의 16비트 부호 있는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-343">The first of two 16-bit signed integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-344">비교할 두 개의 16비트 부호 있는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-344">The second of two 16-bit signed integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-345">두 개의 16비트 부호 있는 정수 중 더 큰 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-345">Returns the larger of two 16-bit signed integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-346">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-346">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-347">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Max%2A> 메서드를 반환 하 고 두 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-347">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int Max (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(int32 val1, int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Integer, val2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Max(int val1, int val2);" />
      <MemberSignature Language="F#" Value="static member Max : int * int -&gt; int" Usage="System.Math.Max (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-348">비교할 두 개의 32비트 부호 있는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-348">The first of two 32-bit signed integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-349">비교할 두 개의 32비트 부호 있는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-349">The second of two 32-bit signed integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-350">두 개의 32비트 부호 있는 정수 중 더 큰 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-350">Returns the larger of two 32-bit signed integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-351">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-351">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-352">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Max%2A> 메서드를 반환 하 고 두 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-352">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long Max (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(int64 val1, int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Long, val2 As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Max(long val1, long val2);" />
      <MemberSignature Language="F#" Value="static member Max : int64 * int64 -&gt; int64" Usage="System.Math.Max (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-353">비교할 두 개의 64비트 부호 있는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-353">The first of two 64-bit signed integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-354">비교할 두 개의 64비트 부호 있는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-354">The second of two 64-bit signed integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-355">두 개의 64비트 부호 있는 정수 중 더 큰 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-355">Returns the larger of two 64-bit signed integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-356">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-356">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-357">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Max%2A> 메서드를 반환 하 고 두 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-357">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static sbyte Max (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Max(int8 val1, int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As SByte, val2 As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Max(System::SByte val1, System::SByte val2);" />
      <MemberSignature Language="F#" Value="static member Max : sbyte * sbyte -&gt; sbyte" Usage="System.Math.Max (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-358">비교할 두 개의 8비트 부호 있는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-358">The first of two 8-bit signed integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-359">비교할 두 개의 8비트 부호 있는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-359">The second of two 8-bit signed integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-360">두 개의 8비트 부호 있는 정수 중 더 큰 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-360">Returns the larger of two 8-bit signed integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-361">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-361">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-362">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Max%2A> 메서드를 반환 하 고 두 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-362">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(float32 val1, float32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Single, val2 As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Max(float val1, float val2);" />
      <MemberSignature Language="F#" Value="static member Max : single * single -&gt; single" Usage="System.Math.Max (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-363">비교할 두 개의 단정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-363">The first of two single-precision floating-point numbers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-364">비교할 두 개의 단정밀도 부동 소수점 수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-364">The second of two single-precision floating-point numbers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-365">두 개의 단정밀도 부동 소수점 수 중 더 큰 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-365">Returns the larger of two single-precision floating-point numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-366">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-366">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span>
          </span>
          <span data-ttu-id="cd9fa-367">
            <paramref name="val1" />이나 <paramref name="val2" /> 또는 <paramref name="val1" />과 <paramref name="val2" />가 모두 <see cref="F:System.Single.NaN" />과 같은 경우 <see cref="F:System.Single.NaN" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-367">If <paramref name="val1" />, or <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-368">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Max%2A> 메서드를 반환 하 고 두 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-368">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static ushort Max (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Max(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As UShort, val2 As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Max(System::UInt16 val1, System::UInt16 val2);" />
      <MemberSignature Language="F#" Value="static member Max : uint16 * uint16 -&gt; uint16" Usage="System.Math.Max (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-369">비교할 두 개의 16비트 부호 없는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-369">The first of two 16-bit unsigned integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-370">비교할 두 개의 16비트 부호 없는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-370">The second of two 16-bit unsigned integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-371">두 개의 16비트 부호 없는 정수 중 더 큰 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-371">Returns the larger of two 16-bit unsigned integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-372">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-372">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-373">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Max%2A> 메서드를 반환 하 고 두 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-373">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static uint Max (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Max(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As UInteger, val2 As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Max(System::UInt32 val1, System::UInt32 val2);" />
      <MemberSignature Language="F#" Value="static member Max : uint32 * uint32 -&gt; uint32" Usage="System.Math.Max (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-374">비교할 두 개의 32비트 부호 없는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-374">The first of two 32-bit unsigned integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-375">비교할 두 개의 32비트 부호 없는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-375">The second of two 32-bit unsigned integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-376">두 개의 32비트 부호 없는 정수 중 더 큰 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-376">Returns the larger of two 32-bit unsigned integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-377">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-377">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-378">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Max%2A> 메서드를 반환 하 고 두 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-378">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static ulong Max (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Max(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As ULong, val2 As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Max(System::UInt64 val1, System::UInt64 val2);" />
      <MemberSignature Language="F#" Value="static member Max : uint64 * uint64 -&gt; uint64" Usage="System.Math.Max (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-379">비교할 두 개의 64비트 부호 없는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-379">The first of two 64-bit unsigned integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-380">비교할 두 개의 64비트 부호 없는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-380">The second of two 64-bit unsigned integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-381">두 개의 64비트 부호 없는 정수 중 더 큰 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-381">Returns the larger of two 64-bit unsigned integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-382">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-382">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-383">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Max%2A> 메서드를 반환 하 고 두 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-383">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Min">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd9fa-384">두 개의 숫자 중 더 작은 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-384">Returns the smaller of two numbers.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static byte Min (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Min(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Byte, val2 As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Min(System::Byte val1, System::Byte val2);" />
      <MemberSignature Language="F#" Value="static member Min : byte * byte -&gt; byte" Usage="System.Math.Min (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-385">비교할 두 개의 8비트 부호 없는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-385">The first of two 8-bit unsigned integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-386">비교할 두 개의 8비트 부호 없는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-386">The second of two 8-bit unsigned integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-387">두 개의 8비트 부호 없는 정수 중 더 작은 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-387">Returns the smaller of two 8-bit unsigned integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-388">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-388">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-389">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Min%2A> 메서드를 반환 하 고 두 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-389">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal Min (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Decimal, val2 As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Min(System::Decimal val1, System::Decimal val2);" />
      <MemberSignature Language="F#" Value="static member Min : decimal * decimal -&gt; decimal" Usage="System.Math.Min (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-390">비교할 두 개의 10진수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-390">The first of two decimal numbers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-391">비교할 두 개의 10진수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-391">The second of two decimal numbers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-392">두 개의 10진수 중 더 작은 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-392">Returns the smaller of two decimal numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-393">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-393">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-394">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Min%2A> 메서드를 반환 하 고 두 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-394">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double Min (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(float64 val1, float64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Double, val2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Min(double val1, double val2);" />
      <MemberSignature Language="F#" Value="static member Min : double * double -&gt; double" Usage="System.Math.Min (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-395">비교할 두 개의 배정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-395">The first of two double-precision floating-point numbers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-396">비교할 두 개의 배정밀도 부동 소수점 수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-396">The second of two double-precision floating-point numbers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-397">두 개의 배정밀도 부동 소수점 수 중 더 작은 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-397">Returns the smaller of two double-precision floating-point numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-398">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-398">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span>
          </span>
          <span data-ttu-id="cd9fa-399">
            <paramref name="val1" />, <paramref name="val2" /> 또는 <paramref name="val1" />과 <paramref name="val2" />가 모두 <see cref="F:System.Double.NaN" />과 같은 경우 <see cref="F:System.Double.NaN" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-399">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-400">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Min%2A> 메서드를 반환 하 고 두 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-400">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static short Min (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Min(int16 val1, int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Short, val2 As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Min(short val1, short val2);" />
      <MemberSignature Language="F#" Value="static member Min : int16 * int16 -&gt; int16" Usage="System.Math.Min (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-401">비교할 두 개의 16비트 부호 있는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-401">The first of two 16-bit signed integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-402">비교할 두 개의 16비트 부호 있는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-402">The second of two 16-bit signed integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-403">두 개의 16비트 부호 있는 정수 중 더 작은 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-403">Returns the smaller of two 16-bit signed integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-404">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-404">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-405">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Min%2A> 메서드를 반환 하 고 두 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-405">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int Min (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(int32 val1, int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Integer, val2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Min(int val1, int val2);" />
      <MemberSignature Language="F#" Value="static member Min : int * int -&gt; int" Usage="System.Math.Min (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-406">비교할 두 개의 32비트 부호 있는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-406">The first of two 32-bit signed integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-407">비교할 두 개의 32비트 부호 있는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-407">The second of two 32-bit signed integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-408">두 개의 32비트 부호 있는 정수 중 더 작은 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-408">Returns the smaller of two 32-bit signed integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-409">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-409">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-410">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Min%2A> 메서드를 반환 하 고 두 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-410">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long Min (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(int64 val1, int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Long, val2 As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Min(long val1, long val2);" />
      <MemberSignature Language="F#" Value="static member Min : int64 * int64 -&gt; int64" Usage="System.Math.Min (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-411">비교할 두 개의 64비트 부호 있는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-411">The first of two 64-bit signed integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-412">비교할 두 개의 64비트 부호 있는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-412">The second of two 64-bit signed integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-413">두 개의 64비트 부호 있는 정수 중 더 작은 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-413">Returns the smaller of two 64-bit signed integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-414">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-414">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-415">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Min%2A> 메서드를 반환 하 고 두 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-415">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static sbyte Min (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Min(int8 val1, int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As SByte, val2 As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Min(System::SByte val1, System::SByte val2);" />
      <MemberSignature Language="F#" Value="static member Min : sbyte * sbyte -&gt; sbyte" Usage="System.Math.Min (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-416">비교할 두 개의 8비트 부호 있는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-416">The first of two 8-bit signed integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-417">비교할 두 개의 8비트 부호 있는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-417">The second of two 8-bit signed integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-418">두 개의 8비트 부호 있는 정수 중 더 작은 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-418">Returns the smaller of two 8-bit signed integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-419">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-419">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-420">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Min%2A> 메서드를 반환 하 고 두 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-420">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(float32 val1, float32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Single, val2 As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Min(float val1, float val2);" />
      <MemberSignature Language="F#" Value="static member Min : single * single -&gt; single" Usage="System.Math.Min (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-421">비교할 두 개의 단정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-421">The first of two single-precision floating-point numbers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-422">비교할 두 개의 단정밀도 부동 소수점 수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-422">The second of two single-precision floating-point numbers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-423">두 개의 단정밀도 부동 소수점 수 중 더 작은 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-423">Returns the smaller of two single-precision floating-point numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-424">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-424">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span>
          </span>
          <span data-ttu-id="cd9fa-425">
            <paramref name="val1" />, <paramref name="val2" /> 또는 <paramref name="val1" />과 <paramref name="val2" />가 모두 <see cref="F:System.Single.NaN" />과 같은 경우 <see cref="F:System.Single.NaN" />이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-425">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-426">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Min%2A> 메서드를 반환 하 고 두 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-426">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static ushort Min (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Min(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As UShort, val2 As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Min(System::UInt16 val1, System::UInt16 val2);" />
      <MemberSignature Language="F#" Value="static member Min : uint16 * uint16 -&gt; uint16" Usage="System.Math.Min (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-427">비교할 두 개의 16비트 부호 없는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-427">The first of two 16-bit unsigned integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-428">비교할 두 개의 16비트 부호 없는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-428">The second of two 16-bit unsigned integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-429">두 개의 16비트 부호 없는 정수 중 더 작은 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-429">Returns the smaller of two 16-bit unsigned integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-430">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-430">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-431">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Min%2A> 메서드를 반환 하 고 두 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-431">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static uint Min (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Min(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As UInteger, val2 As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Min(System::UInt32 val1, System::UInt32 val2);" />
      <MemberSignature Language="F#" Value="static member Min : uint32 * uint32 -&gt; uint32" Usage="System.Math.Min (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-432">비교할 두 개의 32비트 부호 없는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-432">The first of two 32-bit unsigned integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-433">비교할 두 개의 32비트 부호 없는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-433">The second of two 32-bit unsigned integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-434">두 개의 32비트 부호 없는 정수 중 더 작은 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-434">Returns the smaller of two 32-bit unsigned integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-435">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-435">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-436">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Min%2A> 메서드를 반환 하 고 두 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-436">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static ulong Min (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Min(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As ULong, val2 As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Min(System::UInt64 val1, System::UInt64 val2);" />
      <MemberSignature Language="F#" Value="static member Min : uint64 * uint64 -&gt; uint64" Usage="System.Math.Min (val1, val2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="val1">
          <span data-ttu-id="cd9fa-437">비교할 두 개의 64비트 부호 없는 정수 중 첫 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-437">The first of two 64-bit unsigned integers to compare.</span>
          </span>
        </param>
        <param name="val2">
          <span data-ttu-id="cd9fa-438">비교할 두 개의 64비트 부호 없는 정수 중 두 번째 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-438">The second of two 64-bit unsigned integers to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-439">두 개의 64비트 부호 없는 정수 중 더 작은 숫자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-439">Returns the smaller of two 64-bit unsigned integers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-440">
            <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-440">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-441">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Min%2A> 메서드를 반환 하 고 두 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-441">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PI">
      <MemberSignature Language="C#" Value="public const double PI = 3.14159265358979;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 PI = (3.14159265358979)" />
      <MemberSignature Language="DocId" Value="F:System.Math.PI" />
      <MemberSignature Language="VB.NET" Value="Public Const PI As Double  = 3.14159265358979" />
      <MemberSignature Language="C++ CLI" Value="public: double PI = 3.14159265358979;" />
      <MemberSignature Language="F#" Value="val mutable PI : double" Usage="System.Math.PI" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>3.14159265358979</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="cd9fa-442">상수(π)로 지정된 원주율을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-442">Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-443">이 필드의 값은 3.14159265358979323846입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-443">The value of this field is 3.14159265358979323846.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-444">다음 예제에서는 <xref:System.Math.PI> 지정된 사다리꼴의 내부 각도 계산 지원 하기 위해.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-444">The following example uses <xref:System.Math.PI> to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static double Pow (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Pow(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Pow(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (x As Double, y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Pow(double x, double y);" />
      <MemberSignature Language="F#" Value="static member Pow : double * double -&gt; double" Usage="System.Math.Pow (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">
          <span data-ttu-id="cd9fa-445">거듭제곱할 배정밀도 부동 소수점 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-445">A double-precision floating-point number to be raised to a power.</span>
          </span>
        </param>
        <param name="y">
          <span data-ttu-id="cd9fa-446">거듭제곱을 지정하는 배정밀도 부동 소수점 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-446">A double-precision floating-point number that specifies a power.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-447">지정된 숫자의 지정된 거듭제곱을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-447">Returns a specified number raised to the specified power.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-448">
            <paramref name="x" />의 <paramref name="y" />승입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-448">The number <paramref name="x" /> raised to the power <paramref name="y" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-449">다음 표에서 다양 한 값 또는 값의 범위가 지정 되 면 반환 값을 나타내는 합니다 `x` 고 `y` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-449">The following table indicates the return value when various values or ranges of values are specified for the `x` and `y` parameters.</span></span> <span data-ttu-id="cd9fa-450">자세한 내용은 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 및 <xref:System.Double.NaN?displayProperty=nameWithType>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-450">For more information, see <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="cd9fa-451">매개 변수</span><span class="sxs-lookup"><span data-stu-id="cd9fa-451">Parameters</span></span>|<span data-ttu-id="cd9fa-452">반환 값</span><span class="sxs-lookup"><span data-stu-id="cd9fa-452">Return value</span></span>|  
|----------------|------------------|  
|<span data-ttu-id="cd9fa-453">`x` 또는 `y`  =  `NaN`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-453">`x` or `y` = `NaN`.</span></span>|`NaN`|  
|<span data-ttu-id="cd9fa-454">`x` = 이외의 값 `NaN`; `y` = 0.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-454">`x` = Any value except `NaN`; `y` = 0.</span></span>|<span data-ttu-id="cd9fa-455">1</span><span class="sxs-lookup"><span data-stu-id="cd9fa-455">1</span></span>|  
|<span data-ttu-id="cd9fa-456">`x` = `NegativeInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-456">`x` = `NegativeInfinity`; `y` < 0.</span></span>|<span data-ttu-id="cd9fa-457">0</span><span class="sxs-lookup"><span data-stu-id="cd9fa-457">0</span></span>|  
|<span data-ttu-id="cd9fa-458">`x` = `NegativeInfinity`; `y` 홀수 양수입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-458">`x` = `NegativeInfinity`; `y` is a positive odd integer.</span></span>|`NegativeInfinity`|  
|<span data-ttu-id="cd9fa-459">`x` = `NegativeInfinity`; `y` 긍정 이지만 홀수 정수에 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-459">`x` = `NegativeInfinity`; `y` is positive but not an odd integer.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="cd9fa-460">`x` < 0 아닌 `NegativeInfinity`; `y` 정수 아닙니다 `NegativeInfinity`, 또는 `PositiveInfinity`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-460">`x` < 0 but not `NegativeInfinity`; `y` is not an integer, `NegativeInfinity`, or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="cd9fa-461">`x` =-1입니다. `y`  =  `NegativeInfinity` 또는 `PositiveInfinity`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-461">`x` = -1; `y` = `NegativeInfinity` or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="cd9fa-462">-1 < `x` < 1 `y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-462">-1 < `x` < 1; `y` = `NegativeInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="cd9fa-463">-1 < `x` < 1 `y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-463">-1 < `x` < 1; `y` = `PositiveInfinity`.</span></span>|<span data-ttu-id="cd9fa-464">0</span><span class="sxs-lookup"><span data-stu-id="cd9fa-464">0</span></span>|  
|<span data-ttu-id="cd9fa-465">`x` <-1 또는 `x` > 1 `y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-465">`x` < -1 or `x` > 1; `y` = `NegativeInfinity`.</span></span>|<span data-ttu-id="cd9fa-466">0</span><span class="sxs-lookup"><span data-stu-id="cd9fa-466">0</span></span>|  
|<span data-ttu-id="cd9fa-467">`x` <-1 또는 `x` > 1 `y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-467">`x` < -1 or `x` > 1; `y` = `PositiveInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="cd9fa-468">`x` = 0; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-468">`x` = 0; `y` < 0.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="cd9fa-469">`x` = 0; `y` > 0.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-469">`x` = 0; `y` > 0.</span></span>|<span data-ttu-id="cd9fa-470">0</span><span class="sxs-lookup"><span data-stu-id="cd9fa-470">0</span></span>|  
|<span data-ttu-id="cd9fa-471">`x` = 1입니다. `y` 제외한 모든 값은 `NaN`합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-471">`x` = 1; `y` is any value except `NaN`.</span></span>|<span data-ttu-id="cd9fa-472">1</span><span class="sxs-lookup"><span data-stu-id="cd9fa-472">1</span></span>|  
|<span data-ttu-id="cd9fa-473">`x` = `PositiveInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-473">`x` = `PositiveInfinity`; `y` < 0.</span></span>|<span data-ttu-id="cd9fa-474">0</span><span class="sxs-lookup"><span data-stu-id="cd9fa-474">0</span></span>|  
|<span data-ttu-id="cd9fa-475">`x` = `PositiveInfinity`; `y` > 0.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-475">`x` = `PositiveInfinity`; `y` > 0.</span></span>|`PositiveInfinity`|  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-476">다음 예제에서는 <xref:System.Math.Pow%2A> 발생 하는 0에서 32 까지의 거듭제곱 2에서 발생 하는 값을 계산 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-476">The following example uses the <xref:System.Math.Pow%2A> method to calculate the value that results from raising 2 to a power ranging from 0 to 32.</span></span>  
  
 [!code-csharp[System.Math.Pow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.pow/cs/pow1.cs#1)]
 [!code-vb[System.Math.Pow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.pow/vb/pow1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Sqrt(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Round">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd9fa-477">값을 가장 가까운 정수나 지정된 소수 자릿수로 반올림합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-477">Rounds a value to the nearest integer or to the specified number of fractional digits.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-478">섹션 내용</span><span class="sxs-lookup"><span data-stu-id="cd9fa-478">In this section:</span></span>  
  
 <span data-ttu-id="cd9fa-479">[오버 로드 된 메서드 구문](#Syntax) </span><span class="sxs-lookup"><span data-stu-id="cd9fa-479">[Overloaded method syntax](#Syntax) </span></span>  
 <span data-ttu-id="cd9fa-480">[매개 변수](#Params) </span><span class="sxs-lookup"><span data-stu-id="cd9fa-480">[Parameters](#Params) </span></span>  
 <span data-ttu-id="cd9fa-481">[반환 값](#Returns) </span><span class="sxs-lookup"><span data-stu-id="cd9fa-481">[Return value](#Returns) </span></span>  
 <span data-ttu-id="cd9fa-482">[예외](#Exceptions) </span><span class="sxs-lookup"><span data-stu-id="cd9fa-482">[Exceptions](#Exceptions) </span></span>  
 <span data-ttu-id="cd9fa-483">[메서드 호출 합니까?](#Tasks) </span><span class="sxs-lookup"><span data-stu-id="cd9fa-483">[Which method do I call?](#Tasks) </span></span>  
 <span data-ttu-id="cd9fa-484">[중간점 값 및 반올림 규칙](#Midpoint) </span><span class="sxs-lookup"><span data-stu-id="cd9fa-484">[Midpoint values and rounding conventions](#Midpoint) </span></span>  
 <span data-ttu-id="cd9fa-485">[반올림 하 고 전체 자릿수](#Precision) </span><span class="sxs-lookup"><span data-stu-id="cd9fa-485">[Rounding and precision](#Precision) </span></span>  
 <span data-ttu-id="cd9fa-486">[반올림 하 고 단 정밀도 부동 소수점 값](#Single) </span><span class="sxs-lookup"><span data-stu-id="cd9fa-486">[Rounding and single-precision floating-point values](#Single) </span></span>  
 <span data-ttu-id="cd9fa-487">예를 들면 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-487">Examples:</span></span>   
 [<span data-ttu-id="cd9fa-488">Math.Round(Decimal)</span><span class="sxs-lookup"><span data-stu-id="cd9fa-488">Math.Round(Decimal)</span></span>](#Round1_Example)  
 [<span data-ttu-id="cd9fa-489">Math.Round(Double)</span><span class="sxs-lookup"><span data-stu-id="cd9fa-489">Math.Round(Double)</span></span>](#Round2_Example)  
 [<span data-ttu-id="cd9fa-490">Math.Round(Decimal, Int32)</span><span class="sxs-lookup"><span data-stu-id="cd9fa-490">Math.Round(Decimal, Int32)</span></span>](#Round3_Example)  
 [<span data-ttu-id="cd9fa-491">Math.Round(Decimal, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="cd9fa-491">Math.Round(Decimal, MidpointRounding)</span></span>](#Round4_Example)  
 [<span data-ttu-id="cd9fa-492">Math.Round(Double, Int32)</span><span class="sxs-lookup"><span data-stu-id="cd9fa-492">Math.Round(Double, Int32)</span></span>](#Round5_Example)  
 [<span data-ttu-id="cd9fa-493">Math.Round(Double, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="cd9fa-493">Math.Round(Double, MidpointRounding)</span></span>](#Round6_Example)  
 [<span data-ttu-id="cd9fa-494">Math.Round(Decimal, Int32, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="cd9fa-494">Math.Round(Decimal, Int32, MidpointRounding)</span></span>](#Round7_Example)  
 [<span data-ttu-id="cd9fa-495">Math.Round(Double, Int32, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="cd9fa-495">Math.Round(Double, Int32, MidpointRounding)</span></span>](#Round8_Example)  
[<span data-ttu-id="cd9fa-496">버전 정보</span><span class="sxs-lookup"><span data-stu-id="cd9fa-496">Version information</span></span>](#Round_Versions)  
  
<a name="Syntax"></a>   
## <a name="overloaded-method-syntax"></a><span data-ttu-id="cd9fa-497">오버 로드 된 메서드 구문</span><span class="sxs-lookup"><span data-stu-id="cd9fa-497">Overloaded method syntax</span></span>  
 <span data-ttu-id="cd9fa-498">오버 로드를 선택 하면 추가 지침을 참조 하세요. [메서드 호출 합니까?](#Tasks)</span><span class="sxs-lookup"><span data-stu-id="cd9fa-498">For additional guidance on choosing an overload, see [Which method do I call?](#Tasks)</span></span>  
  
 <span data-ttu-id="cd9fa-499">`Decimal Math.Round(Decimal` `d` `)`</span><span class="sxs-lookup"><span data-stu-id="cd9fa-499">`Decimal Math.Round(Decimal` `d` `)`</span></span>  
 <span data-ttu-id="cd9fa-500">10 진수 값을 가장 가까운 정수로 반올림 하 고 중간점 값을 가장 가까운 짝수로 반올림 ([예제](#Round1_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd9fa-500">Rounds a decimal value to the nearest integer, and rounds midpoint values to the nearest even number ([example](#Round1_Example)).</span></span>  
  
 <span data-ttu-id="cd9fa-501">`Double Math.Round(Double` `a` `)`</span><span class="sxs-lookup"><span data-stu-id="cd9fa-501">`Double Math.Round(Double` `a` `)`</span></span>  
 <span data-ttu-id="cd9fa-502">배정밀도 부동 소수점 값을 가장 가까운 정수로 반올림 하 고 중간점 값을 가장 가까운 짝수로 반올림 ([예제](#Round2_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd9fa-502">Rounds a double-precision floating-point value to the nearest integer, and rounds midpoint values to the nearest even number ([example](#Round2_Example)).</span></span>  
  
 <span data-ttu-id="cd9fa-503">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `)`</span><span class="sxs-lookup"><span data-stu-id="cd9fa-503">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `)`</span></span>  
 <span data-ttu-id="cd9fa-504">소수 자릿수가 지정 된 수의 10 진수 값을 반올림 하 고 중간점 값을 가장 가까운 짝수로 반올림 ([예제](#Round3_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd9fa-504">Rounds a decimal value to a specified number of fractional digits, and rounds midpoint values to the nearest even number ([example](#Round3_Example)).</span></span>  
  
 <span data-ttu-id="cd9fa-505">`Double Math.Round(Double` `value` `, Int32`  `digits` `)`</span><span class="sxs-lookup"><span data-stu-id="cd9fa-505">`Double Math.Round(Double` `value` `, Int32`  `digits` `)`</span></span>  
 <span data-ttu-id="cd9fa-506">지정된 된 수의 소수 자릿수를 배정밀도 부동 소수점 값 반올림 및 중간점 값을 가장 가까운 짝수로 반올림 ([예제](#Round4_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd9fa-506">Rounds a double-precision floating-point value to a specified number of fractional digits, and rounds midpoint values to the nearest even number ([example](#Round4_Example)).</span></span>  
  
 <span data-ttu-id="cd9fa-507">`Decimal Math.Round(Decimal` `d` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="cd9fa-507">`Decimal Math.Round(Decimal` `d` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="cd9fa-508">10 진수 값을 가장 가까운 정수로 반올림 및 중간점 값에 대 한 지정 된 반올림 규칙을 사용 하 여 ([예제](#Round5_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd9fa-508">Rounds a decimal value to the nearest integer, and uses the specified rounding convention for midpoint values ([example](#Round5_Example)).</span></span>  
  
 <span data-ttu-id="cd9fa-509">`Double Math.Round(Double` `value` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="cd9fa-509">`Double Math.Round(Double` `value` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="cd9fa-510">가장 가까운 정수로 배정밀도 부동 소수점 값 반올림 및 중간점 값에 대 한 지정 된 반올림 규칙을 사용 하 여 ([예제](#Round6_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd9fa-510">Rounds a double-precision floating-point value to the nearest integer, and uses the specified rounding convention for midpoint values ([example](#Round6_Example)).</span></span>  
  
 <span data-ttu-id="cd9fa-511">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="cd9fa-511">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="cd9fa-512">소수 자릿수가 지정 된 수의 10 진수 값을 반올림 하 고 지정 된 반올림 규칙을 사용 하 여 중간점 값 ([예제](#Round7_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd9fa-512">Rounds a decimal value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values ([example](#Round7_Example)).</span></span>  
  
 <span data-ttu-id="cd9fa-513">`Double Math.Round(Double` `value` `, Int32`  `digits` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="cd9fa-513">`Double Math.Round(Double` `value` `, Int32`  `digits` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="cd9fa-514">지정된 된 수의 소수 자릿수를 배정밀도 부동 소수점 값 반올림 및 중간점 값에 대 한 지정 된 반올림 규칙을 사용 하 여 ([예제](#Round8_Example)).</span><span class="sxs-lookup"><span data-stu-id="cd9fa-514">Rounds a double-precision floating-point value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values ([example](#Round8_Example)).</span></span>  
  
<a name="Params"></a>   
## <a name="parameters"></a><span data-ttu-id="cd9fa-515">매개 변수</span><span class="sxs-lookup"><span data-stu-id="cd9fa-515">Parameters</span></span>  
 <span data-ttu-id="cd9fa-516">이 매개 변수 목록은 <xref:System.Math.Round%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-516">This is a complete list of parameters for the <xref:System.Math.Round%2A> method.</span></span> <span data-ttu-id="cd9fa-517">각 오버 로드에서 사용 하는 매개 변수를 위의 구문은 오버 로드를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-517">For the parameters used by each overload, see the overload syntax above.</span></span>  
  
|<span data-ttu-id="cd9fa-518">매개 변수</span><span class="sxs-lookup"><span data-stu-id="cd9fa-518">Parameter</span></span>|<span data-ttu-id="cd9fa-519">형식</span><span class="sxs-lookup"><span data-stu-id="cd9fa-519">Type</span></span>|<span data-ttu-id="cd9fa-520">설명</span><span class="sxs-lookup"><span data-stu-id="cd9fa-520">Description</span></span>|  
|---------------|----------|-----------------|  
|`d`|<xref:System.Decimal>|<span data-ttu-id="cd9fa-521">반올림할 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-521">A number to be rounded.</span></span>|  
|`a`<br /><br /> <span data-ttu-id="cd9fa-522">또는</span><span class="sxs-lookup"><span data-stu-id="cd9fa-522">-or-</span></span><br /><br /> `value`|<xref:System.Double>|<span data-ttu-id="cd9fa-523">반올림할 배정밀도 부동 소수점 수입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-523">A double-precision floating-point number to be rounded.</span></span>|  
|`decimals`<br /><br /> <span data-ttu-id="cd9fa-524">또는</span><span class="sxs-lookup"><span data-stu-id="cd9fa-524">-or-</span></span><br /><br /> `digits`|<xref:System.Int32>|<span data-ttu-id="cd9fa-525">반환 값의 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-525">The number of fractional digits in the return value.</span></span> <span data-ttu-id="cd9fa-526">에 대 한 <xref:System.Decimal> 값이 범위는 0에서 28입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-526">For <xref:System.Decimal> values, it can range from 0 to 28.</span></span> <span data-ttu-id="cd9fa-527">에 대 한 <xref:System.Double> 값이 범위는 0에서 15로 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-527">For <xref:System.Double> values, it can range from 0 to 15.</span></span> <span data-ttu-id="cd9fa-528">15에서 지원 되는 정수 부분과 소수 부분 자릿수의 최대 수는는 <xref:System.Double> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-528">Note that 15 is the maximum number of integral and fractional digits supported by the <xref:System.Double> type.</span></span><br /><br /> <span data-ttu-id="cd9fa-529">기본값: 0으로, 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-529">Default value: 0, which rounds to an integer</span></span>|  
|`mode`|<xref:System.MidpointRounding>|<span data-ttu-id="cd9fa-530">중간점 값을 반올림 하기 위해 사용 하도록 설정할 규칙을 지정 하는 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-530">A flag that specifies the convention to use for rounding midpoint values.</span></span> <span data-ttu-id="cd9fa-531">참조 [중간점 값 및 반올림 규칙](#Midpoint)합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-531">See [Midpoint values and rounding conventions](#Midpoint).</span></span><br /><br /> <span data-ttu-id="cd9fa-532">기본값: <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType> </span><span class="sxs-lookup"><span data-stu-id="cd9fa-532">Default value: <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType></span></span>|  
  
<a name="Returns"></a>   
## <a name="return-value"></a><span data-ttu-id="cd9fa-533">반환 값</span><span class="sxs-lookup"><span data-stu-id="cd9fa-533">Return value</span></span>  
 <span data-ttu-id="cd9fa-534">형식: <xref:System.Decimal> 또는 <xref:System.Double>반올림할 값의 형식에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-534">Type: <xref:System.Decimal> or <xref:System.Double>, depending on the type of the value to be rounded.</span></span>   
<span data-ttu-id="cd9fa-535">동일한 형식의 숫자 값 `d`, `a`, 또는 `value`, 정수 또는 10 진수 숫자의 지정 된 수 하지만 모서리가 둥근 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-535">A numeric value of the same type as `d`, `a`, or `value`, but rounded either to an integer or to the specified number of decimal digits.</span></span> <span data-ttu-id="cd9fa-536">참조 [중간점 값 및 반올림 규칙](#Midpoint) 중간점 값을 사용 하 여 숫자를 반올림 하는 방법에 대 한 정보에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-536">See [Midpoint values and rounding conventions](#Midpoint) for information about rounding numbers with midpoint values.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="cd9fa-537">중간점 값을 반올림 하는 경우 반올림 알고리즘 같음 테스트를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-537">When rounding midpoint values, the rounding algorithm performs an equality test.</span></span> <span data-ttu-id="cd9fa-538">이진 표현 및 정밀도 부동 소수점 형식에서의 문제 때문에 확장 메서드에서 반환한 값 예상 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-538">Because of problems of binary representation and precision in the floating-point format, the value returned by the method can be unexpected.</span></span> <span data-ttu-id="cd9fa-539">자세한 내용은 [반올림 및 전체 자릿수](#Precision)합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-539">For more information, see [Rounding and precision](#Precision).</span></span>  
  
 <span data-ttu-id="cd9fa-540">경우 사용 하 여 오버 로드는 <xref:System.Double> 매개 변수를 사용 하 여 라고 <xref:System.Double.NaN?displayProperty=nameWithType>, 메서드가 반환 <xref:System.Double.NaN?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-540">If an overload with a <xref:System.Double> parameter is called with <xref:System.Double.NaN?displayProperty=nameWithType>, the method returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cd9fa-541">로 호출 되 면 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 나 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, 메서드가 반환 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 또는 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>각각.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-541">If it is called with <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
<a name="Exceptions"></a>   
## <a name="exceptions"></a><span data-ttu-id="cd9fa-542">예외</span><span class="sxs-lookup"><span data-stu-id="cd9fa-542">Exceptions</span></span>  
  
|<span data-ttu-id="cd9fa-543">예외</span><span class="sxs-lookup"><span data-stu-id="cd9fa-543">Exception</span></span>|<span data-ttu-id="cd9fa-544">조건</span><span class="sxs-lookup"><span data-stu-id="cd9fa-544">Condition</span></span>|<span data-ttu-id="cd9fa-545">throw</span><span class="sxs-lookup"><span data-stu-id="cd9fa-545">Thrown by</span></span>|  
|---------------|---------------|---------------|  
|<xref:System.OverflowException>|<span data-ttu-id="cd9fa-546">결과의 범위를 벗어난는 <xref:System.Decimal> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-546">The result is outside the range of the <xref:System.Decimal> type.</span></span>|<xref:System.Math.Round%28System.Decimal%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="cd9fa-547">`decimals`가 0보다 작거나 28보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-547">`decimals` is less than 0 or greater than 28.</span></span><br /><br /> <span data-ttu-id="cd9fa-548">또는</span><span class="sxs-lookup"><span data-stu-id="cd9fa-548">-or-</span></span><br /><br /> <span data-ttu-id="cd9fa-549">`digits`가 0보다 작거나 15보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-549">`digits` is less than 0 or greater than 15.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<xref:System.ArgumentException>|<span data-ttu-id="cd9fa-550">`mode`가 유효한 <xref:System.MidpointRounding> 값이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="cd9fa-550">`mode` is not a valid value of <xref:System.MidpointRounding>.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
  
<a name="Tasks"></a>   
## <a name="which-method-do-i-call"></a><span data-ttu-id="cd9fa-551">메서드 호출 합니까?</span><span class="sxs-lookup"><span data-stu-id="cd9fa-551">Which method do I call?</span></span>  
  
|<span data-ttu-id="cd9fa-552">대상</span><span class="sxs-lookup"><span data-stu-id="cd9fa-552">To</span></span>|<span data-ttu-id="cd9fa-553">Call</span><span class="sxs-lookup"><span data-stu-id="cd9fa-553">Call</span></span>|  
|--------|----------|  
|<span data-ttu-id="cd9fa-554">가장 가까운 규칙에 따라 반올림을 사용 하 여 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-554">Round a number to an integer by using the rounding to nearest convention.</span></span>|<xref:System.Math.Round%28System.Decimal%29><br /><br /> <span data-ttu-id="cd9fa-555">또는</span><span class="sxs-lookup"><span data-stu-id="cd9fa-555">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%29>|  
|<span data-ttu-id="cd9fa-556">숫자로 지정을 사용 하 여 정수로 반올림 규칙을 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-556">Round a number to an integer by using a specified rounding convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <span data-ttu-id="cd9fa-557">또는</span><span class="sxs-lookup"><span data-stu-id="cd9fa-557">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>|  
|<span data-ttu-id="cd9fa-558">가장 가까운 규칙에 따라 반올림을 사용 하 여 지정 된 수의 소수 자릿수 숫자를 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-558">Round a number to a specified number of fractional digits by using the rounding to nearest convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <span data-ttu-id="cd9fa-559">또는</span><span class="sxs-lookup"><span data-stu-id="cd9fa-559">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%29>|  
|<span data-ttu-id="cd9fa-560">숫자로 지정을 사용 하 여 소수 자릿수가 지정 된 숫자로 반올림 규칙을 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-560">Round a number to a specified number of fractional digits by using a specified rounding convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <span data-ttu-id="cd9fa-561">또는</span><span class="sxs-lookup"><span data-stu-id="cd9fa-561">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<span data-ttu-id="cd9fa-562">Round는 <xref:System.Single> 소수 자릿수를 지정 된 반올림 규칙 및 전체 자릿수 손실을 최소화를 사용 하 여 지정 된 수의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-562">Round a <xref:System.Single> value to a specified number of fractional digits by using a specified rounding convention and minimizing the loss of precision.</span></span>|<span data-ttu-id="cd9fa-563">변환 합니다 <xref:System.Single> 에 <xref:System.Decimal> 호출 <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-563">Convert the <xref:System.Single> to a <xref:System.Decimal> and call <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>.</span></span>|  
|<span data-ttu-id="cd9fa-564">반올림 중간점 값의 전체 자릿수는 문제를 최소화 하는 동안 지정 된 수의 소수 자릿수 숫자를 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-564">Round a number to a specified number of fractional digits while minimizing problems of precision in rounding midpoint values.</span></span>|<span data-ttu-id="cd9fa-565">"보다 크거나 약 같음" 비교를 구현 하는 반올림 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-565">Call a rounding method that implements a "greater than or approximately equal to" comparison.</span></span> <span data-ttu-id="cd9fa-566">참조 [반올림 및 전체 자릿수](#Precision)합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-566">See [Rounding and precision](#Precision).</span></span>|  
|<span data-ttu-id="cd9fa-567">소수 자릿수 값을 정수로 반올림 하는 보다 큰 경우 소수 자릿수 값</span><span class="sxs-lookup"><span data-stu-id="cd9fa-567">Round a fractional value to an integer that is greater than the fractional value.</span></span> <span data-ttu-id="cd9fa-568">예를 들어 3.1을 4로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-568">For example, round 3.1 to 4.</span></span>|<xref:System.Math.Ceiling%2A>|  
|<span data-ttu-id="cd9fa-569">소수 자릿수 값을 정수로 반올림 하는 보다 작으면 소수 자릿수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-569">Round a fractional value to an integer that is less than the fractional value.</span></span> <span data-ttu-id="cd9fa-570">예를 들어 3.9 ~ 3 개를 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-570">For example, round 3.9 to 3.</span></span>|<xref:System.Math.Floor%2A>|  
  
<a name="Midpoint"></a>   
## <a name="midpoint-values-and-rounding-conventions"></a><span data-ttu-id="cd9fa-571">중간점 값 및 반올림 규칙</span><span class="sxs-lookup"><span data-stu-id="cd9fa-571">Midpoint values and rounding conventions</span></span>  
 <span data-ttu-id="cd9fa-572">반올림 정밀도 사용 하 여 가장 가까운 값으로 지정한 전체 자릿수를 사용 하 여 숫자 값을 변환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-572">Rounding involves converting a numeric value with a specified precision to the nearest value with less precision.</span></span> <span data-ttu-id="cd9fa-573">예를 들어 사용할 수 있습니다 합니다 <xref:System.Math.Round%28System.Double%29> 3.4-3.0의 값을 반올림 하는 방법 및 <xref:System.Math.Round%28System.Double%2CSystem.Int32%29> 3.579를 3.58 값을 반올림 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-573">For example, you can use the <xref:System.Math.Round%28System.Double%29> method to round a value of 3.4 to 3.0, and the <xref:System.Math.Round%28System.Double%2CSystem.Int32%29> method to round a value of 3.579 to 3.58.</span></span>  
  
 <span data-ttu-id="cd9fa-574">중간점 값을 결과에 가장 중요 하지 않은 숫자 후 값이 정확 하 게 절반만 두 숫자.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-574">In a midpoint value, the value after the least significant digit in the result is precisely half way between two numbers.</span></span> <span data-ttu-id="cd9fa-575">예를 들어 3.47500 이며 중간값은 경우 두 자리로 반올림 7.500 중간점 값을 정수로 반올림 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-575">For example, 3.47500 is a midpoint value if it is to be rounded two decimal places, and 7.500 is a midpoint value if it is to be rounded to an integer.</span></span> <span data-ttu-id="cd9fa-576">이러한 경우에 가장 가까운 값을 반올림 규칙 없이 쉽게 식별할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-576">In these cases, the nearest value can't be easily identified without a rounding convention.</span></span>  
  
 <span data-ttu-id="cd9fa-577"><xref:System.Math.Round%2A> 메서드 중간점 값을 처리 하기 위해 두 반올림 규칙을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-577">The <xref:System.Math.Round%2A> method supports two rounding conventions for handling midpoint values:</span></span>  
  
 <span data-ttu-id="cd9fa-578">**0에서 멀어지는 쪽으로 반올림**</span><span class="sxs-lookup"><span data-stu-id="cd9fa-578">**Rounding away from zero**</span></span>  
 <span data-ttu-id="cd9fa-579">중간점 값은 다음 번호 0에서 멀어지는 쪽으로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-579">Midpoint values are rounded to the next number away from zero.</span></span> <span data-ttu-id="cd9fa-580">예를 들어, 3.8, 3.75 반올림-3.8, 3.9, 3.85 반올림-3.75 반올림-3.85-3.9 반올림 하 고 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-580">For example, 3.75 rounds to 3.8, 3.85 rounds to 3.9, -3.75 rounds to -3.8, and -3.85 rounds to -3.9.</span></span> <span data-ttu-id="cd9fa-581">반올림이 폼은 표현 된 <xref:System.MidpointRounding.AwayFromZero?displayProperty=nameWithType> 열거형 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-581">This form of rounding is represented by the <xref:System.MidpointRounding.AwayFromZero?displayProperty=nameWithType> enumeration member.</span></span>  
  
 <span data-ttu-id="cd9fa-582">0에서 멀어지는 쪽으로 반올림 하는 것은 가장 널리 알려진된 형태의 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-582">Rounding away from zero is the most widely known form of rounding.</span></span>  
  
 <span data-ttu-id="cd9fa-583">**가장 가까운 수로 반올림 또는 은행원의 반올림**</span><span class="sxs-lookup"><span data-stu-id="cd9fa-583">**Rounding to nearest, or banker's rounding**</span></span>  
 <span data-ttu-id="cd9fa-584">중간점 값을 가장 가까운 짝수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-584">Midpoint values are rounded to the nearest even number.</span></span> <span data-ttu-id="cd9fa-585">예를 들어 3.75와 3.85 3.8을 반올림할 및-3.75와-3.85-3.8 반내림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-585">For example, both 3.75 and 3.85 round to 3.8, and both -3.75 and -3.85 round to -3.8.</span></span> <span data-ttu-id="cd9fa-586">반올림이 폼은 표현 된 <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType> 열거형 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-586">This form of rounding is represented by the <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType> enumeration member.</span></span>  
  
 <span data-ttu-id="cd9fa-587">재무 및 통계 작업에 사용 되는 반올림 하 여 표준 형식의 가장 가까운 수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-587">Rounding to nearest is the standard form of rounding used in financial and statistical operations.</span></span> <span data-ttu-id="cd9fa-588">섹션 4 IEEE 표준 754를 준수 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-588">It conforms to IEEE Standard 754, section 4.</span></span> <span data-ttu-id="cd9fa-589">반올림 작업을 여러 개를 사용 하면 일관 되 게 한 방향 중간점 값을 반올림 하 여 발생 하는 반올림 오류를 줄입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-589">When used in multiple rounding operations, it reduces the rounding error that is caused by consistently rounding midpoint values in a single direction.</span></span> <span data-ttu-id="cd9fa-590">경우에 따라이 반올림 오류 중요할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-590">In some cases, this rounding error can be significant.</span></span>  
  
 <span data-ttu-id="cd9fa-591">다음 예제에서는 일관 되 게 한 방향 중간점 값을 반올림에서 발생할 수 있는 편차를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-591">The following example illustrates the bias that can result from consistently rounding midpoint values in a single direction.</span></span> <span data-ttu-id="cd9fa-592">배열의 true 평균을 계산 하는 예제 <xref:System.Decimal> 값 및 다음 두 개의 규칙을 사용 하 여 배열의 값은 반올림 하는 경우 평균을 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-592">The example computes the true mean of an array of <xref:System.Decimal> values, and then computes the mean when the values in the array are rounded by using the two conventions.</span></span> <span data-ttu-id="cd9fa-593">이 예제에서는 true 평균 및 가장 가까운 수로 반올림 때 발생 하는 평균 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-593">In this example, the true mean and the mean that results when rounding to nearest are the same.</span></span> <span data-ttu-id="cd9fa-594">그러나 0에서 멀어지는 쪽으로 반올림 하는 경우 발생 하는 평균 true 평균과에서.05 (또는 3.6%) 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-594">However, the mean that results when rounding away from zero differs by .05 (or by 3.6%) from the true mean.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/mean1.cs#2)]
 [!code-vb[System.Math.Round.Overload#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/mean1.vb#2)]  
  
 <span data-ttu-id="cd9fa-595">기본적으로 <xref:System.Math.Round%2A> 메서드가 가장 가까운 규칙에 따라 반올림을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-595">By default, the <xref:System.Math.Round%2A> method uses the rounding to nearest convention.</span></span> <span data-ttu-id="cd9fa-596">다음 표에서 오버 로드는 <xref:System.Math.Round%2A> 메서드 및 반올림 규칙 각 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-596">The following table lists the overloads of the <xref:System.Math.Round%2A> method and the rounding convention that each uses.</span></span>  
  
|<span data-ttu-id="cd9fa-597">오버로드</span><span class="sxs-lookup"><span data-stu-id="cd9fa-597">Overload</span></span>|<span data-ttu-id="cd9fa-598">반올림 규칙</span><span class="sxs-lookup"><span data-stu-id="cd9fa-598">Rounding convention</span></span>|  
|--------------|-------------------------|  
|<xref:System.Math.Round%28System.Decimal%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Double%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Double%2CSystem.Int32%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29>|<span data-ttu-id="cd9fa-599">에 의해 결정 `mode` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-599">Determined by `mode` parameter.</span></span>|  
|<xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>|<span data-ttu-id="cd9fa-600">에 의해 결정 `mode` 매개 변수</span><span class="sxs-lookup"><span data-stu-id="cd9fa-600">Determined by `mode` parameter</span></span>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>|<span data-ttu-id="cd9fa-601">에 의해 결정 `mode` 매개 변수</span><span class="sxs-lookup"><span data-stu-id="cd9fa-601">Determined by `mode` parameter</span></span>|  
|<xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|<span data-ttu-id="cd9fa-602">에 의해 결정 `mode` 매개 변수</span><span class="sxs-lookup"><span data-stu-id="cd9fa-602">Determined by `mode` parameter</span></span>|  
  
<a name="Precision"></a>   
## <a name="rounding-and-precision"></a><span data-ttu-id="cd9fa-603">반올림 하 고 전체 자릿수</span><span class="sxs-lookup"><span data-stu-id="cd9fa-603">Rounding and precision</span></span>  
 <span data-ttu-id="cd9fa-604">반올림 작업을 중간점 값을 수행 하는지 여부를 확인 하기 위해 합니다 <xref:System.Math.Round%2A> 메서드 10으로 반올림 되는 원래 값을 곱합니다<sup>n</sup>여기서 *n* 원하는 수의 소수 자릿수는 반환 값의 숫자 값의 소수 자릿수에 남은.5 보다 크거나 같은 경우 인지를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-604">In order to determine whether a rounding operation involves a midpoint value, the <xref:System.Math.Round%2A> method multiplies the original value to be rounded by 10<sup>n</sup>, where *n* is the desired number of fractional digits in the return value, and then determines whether the remaining fractional portion of the value is greater than or equal to .5.</span></span> <span data-ttu-id="cd9fa-605">이 "같음 테스트" 섹션에서 같은지 및 설명 된 것 처럼 테스트에서 약간의 변형이 <xref:System.Double> 참조 항목을 이진 부동 소수점 형식으로 문제로 인해 부동 소수점 값을 사용 하 여 같은지 여부를 테스트 문제가 많이 표현 및 전체 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-605">This is a slight variation on a test for equality, and as discussed in the "Testing for Equality" section of the <xref:System.Double> reference topic, tests for equality with floating-point values are problematic because of the floating-point format's issues with binary representation and precision.</span></span> <span data-ttu-id="cd9fa-606">이 소수 부분 (때문에 전체 자릿수 손실) 보다 약간 작습니다. 5는 숫자는 반올림 되지 않습니다 상향 것을 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-606">This means that any fractional portion of a number that is slightly less than .5 (because of a loss of precision) will not be rounded upward.</span></span>  
  
 <span data-ttu-id="cd9fa-607">다음 예제에서 이 문제를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-607">The following example illustrates the problem.</span></span> <span data-ttu-id="cd9fa-608">반복적으로.1을 11.0을 추가 하 고 결과를 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-608">It repeatedly adds .1 to 11.0 and rounds the result to the nearest integer.</span></span> <span data-ttu-id="cd9fa-609">반올림 규칙에 관계 없이 대 한 11.5 12로 반올림 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-609">Regardless of the rounding convention, 11.5 should round to 12.</span></span> <span data-ttu-id="cd9fa-610">그러나 예제의 출력으로 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-610">However, as the output from the example shows, it does not.</span></span> <span data-ttu-id="cd9fa-611">예제에서는 "R" [표준 숫자 서식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 표시할 부동 소수점 값의 전체 자릿수 및 값을 반올림할 전체 자릿수 반복된 추가 하는 동안 손실에 표시 및 해당 값이 실제로 11.499999999999998 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-611">The example uses the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) to display the floating point value's full precision, and shows that the value to be rounded has lost precision during repeated additions, and its value is actually 11.499999999999998.</span></span> <span data-ttu-id="cd9fa-612">.499999999999998.5 미만인 이기 때문에 값은 다음 가장 큰 정수를 반올림 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-612">Because .499999999999998 is less than .5, the value is not rounded to the next highest integer.</span></span> <span data-ttu-id="cd9fa-613">또한 예와 같이 단순히에 대 한 11.5 상수 값을 할당 하는 경우이 문제가 발생 하지 않습니다는 <xref:System.Double> 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-613">As the example also shows, this problem does not occur if we simply assign the constant value 11.5 to a <xref:System.Double> variable.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/precision1.cs#7)]
 [!code-vb[System.Math.Round.Overload#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/precision1.vb#7)]  
  
 <span data-ttu-id="cd9fa-614">다음 조건에서 발생할 가능성이 가장 높은 문제 중간점 값을 반올림에서 정밀도 같습니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-614">Problems of precision in rounding midpoint values are most likely to arise in the following conditions:</span></span>  
  
-   <span data-ttu-id="cd9fa-615">경우 소수 자릿수 값은 부동 소수점 형식의 이진 형식으로 정확 하 게 표현할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-615">When a fractional value cannot be expressed precisely in the floating-point type's binary format.</span></span>  
  
-   <span data-ttu-id="cd9fa-616">때 하나 이상의 부동 소수점 작업에서 값으로 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-616">When the value to be rounded is calculated from one or more floating-point operations.</span></span>  
  
-   <span data-ttu-id="cd9fa-617">반올림할 값이를 <xref:System.Single> 아닌 <xref:System.Double> 또는 <xref:System.Decimal>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-617">When the value to be rounded is a <xref:System.Single> rather than a <xref:System.Double> or <xref:System.Decimal>.</span></span> <span data-ttu-id="cd9fa-618">자세한 내용은 다음 섹션을 참조 하세요 [반올림 하 고 단 정밀도 부동 소수점 값](#Single)합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-618">For more information, see the next section, [Rounding and single-precision floating-point values](#Single).</span></span>  
  
 <span data-ttu-id="cd9fa-619">작업을 반올림에서 정밀도 부족 문제가 있는 경우에서 다음을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-619">In cases where the lack of precision in rounding operations is problematic, you can do the following:</span></span>  
  
-   <span data-ttu-id="cd9fa-620">반올림 연산 반올림 하는 오버 로드를 호출 하는 경우를 <xref:System.Double> 변경할 수 값을는 <xref:System.Double> 에 <xref:System.Decimal> 값을 반올림 하는 오버 로드를 호출를 <xref:System.Decimal> 값을 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-620">If the rounding operation calls an overload that rounds a <xref:System.Double> value, you can change the <xref:System.Double> to a <xref:System.Decimal> value and call an overload that rounds a <xref:System.Decimal> value instead.</span></span> <span data-ttu-id="cd9fa-621">하지만 <xref:System.Decimal> 표현의 문제와 정밀도의 손실에도 데이터 형식에, 이러한 문제는 훨씬 덜 일반적인 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-621">Although the <xref:System.Decimal> data type also has problems of representation and loss of precision, these issues are far less common.</span></span>  
  
-   <span data-ttu-id="cd9fa-622">만족 스럽게 값을 반올림할 중간점 값에 가까운 적용 되는지 확인 하려면 "거의 같은" 테스트를 수행 하는 사용자 지정 반올림 알고리즘을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-622">Define a custom rounding algorithm that performs a "nearly equal" test to determine whether the value to be rounded is acceptably close to a midpoint value.</span></span> <span data-ttu-id="cd9fa-623">다음 예제에서는 정의 `RoundApproximate` 중간점 반올림이 적용 되도록 중간점 값에 가까이 있는 소수 자릿수 값을 충분히 인지 검사 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-623">The following example defines a `RoundApproximate` method that examines whether a fractional value is sufficiently near to a midpoint value to be subject to midpoint rounding.</span></span> <span data-ttu-id="cd9fa-624">예제의 출력에서 볼 수 있듯이 이전 예에서 같이 반올림 문제를 해결 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-624">As the output from the example shows, it corrects the rounding problem shown in the previous example.</span></span>  
  
     [!code-csharp[System.Math.Round.Overload#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/precision2.cs#8)]
     [!code-vb[System.Math.Round.Overload#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/precision2.vb#8)]  
  
<a name="Single"></a>   
## <a name="rounding-and-single-precision-floating-point-values"></a><span data-ttu-id="cd9fa-625">반올림 하 고 단 정밀도 부동 소수점 값</span><span class="sxs-lookup"><span data-stu-id="cd9fa-625">Rounding and single-precision floating-point values</span></span>  
 <span data-ttu-id="cd9fa-626">합니다 <xref:System.Math.Round%2A> 형식의 인수를 받아들이는 오버 로드를 포함 하는 메서드 <xref:System.Decimal> 및 <xref:System.Double>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-626">The <xref:System.Math.Round%2A> method includes overloads that accept arguments of type <xref:System.Decimal> and <xref:System.Double>.</span></span> <span data-ttu-id="cd9fa-627">형식의 값을 반올림 하는 메서드가 없으면 <xref:System.Single>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-627">There are no methods that round values of type <xref:System.Single>.</span></span> <span data-ttu-id="cd9fa-628">전달 하는 경우는 <xref:System.Single> 오버 로드 중 하나에 값을 <xref:System.Math.Round%2A> 메서드는 캐스팅 (C#) 또는 변환 (Visual Basic)를 <xref:System.Double>, 및 해당 <xref:System.Math.Round%2A> 오버 로드를 <xref:System.Double> 매개 변수 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-628">If you pass a <xref:System.Single> value to one of the overloads of the <xref:System.Math.Round%2A> method, it is cast (in C#) or converted (in Visual Basic) to a <xref:System.Double>, and the corresponding <xref:System.Math.Round%2A> overload with a <xref:System.Double> parameter is called.</span></span> <span data-ttu-id="cd9fa-629">확대 변환이 있지만 문제가 다음 예제와 같이 정밀도 손실 종종 것입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-629">Although this is a widening conversion, it often involves a loss of precision, as the following example illustrates.</span></span> <span data-ttu-id="cd9fa-630">경우는 <xref:System.Single> 16.325의 값이 전달는 <xref:System.Math.Round%2A> 메서드 결과 16.32 16.33 및 없습니다 예상 결과 가장 가까운 규칙에 따라 반올림을 사용 하 여 두 자리로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-630">When a <xref:System.Single> value of 16.325 is passed to the <xref:System.Math.Round%2A> method and rounded to two decimal places using the rounding to nearest convention, the result is 16.33 and not the expected result of 16.32.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/single1.cs#1)]
 [!code-vb[System.Math.Round.Overload#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/single1.vb#1)]  
  
 <span data-ttu-id="cd9fa-631">변환의 전체 자릿수 손실 되었기 때문이 예기치 않은 결과 <xref:System.Single> 값을 <xref:System.Double>입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-631">This unexpected result is due to a loss of precision in the conversion of the <xref:System.Single> value to a <xref:System.Double>.</span></span> <span data-ttu-id="cd9fa-632">때문에 결과 <xref:System.Double> 16.325000762939453 값 중간점 값이 아닙니다 16.325 보다 크면를 항상 반올림 상향 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-632">Because the resulting <xref:System.Double> value of 16.325000762939453 is not a midpoint value and is greater than 16.325, it is always rounded upward.</span></span>  
  
 <span data-ttu-id="cd9fa-633">대부분의 경우에서 예제와 같이 전체 자릿수 손실을 최소화 하거나 수 캐스팅 하거나 변환 하 여 제거 합니다 <xref:System.Single> 값을 <xref:System.Decimal>합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-633">In many cases, as the example illustrates, the loss of precision can be minimized or eliminated by casting or converting the <xref:System.Single> value to a <xref:System.Decimal>.</span></span> <span data-ttu-id="cd9fa-634">참고, 축소 변환 이기 때문에 필요 하다는 캐스트 연산자를 사용 하 여 또는 변환 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-634">Note that, because this is a narrowing conversion, it requires using a cast operator or calling a conversion method.</span></span>  
  
<a name="Round1_Example"></a>   
## <a name="mathrounddecimal-example"></a><span data-ttu-id="cd9fa-635">Math.Round(Decimal) 예제</span><span class="sxs-lookup"><span data-stu-id="cd9fa-635">Math.Round(Decimal) example</span></span>  
 <span data-ttu-id="cd9fa-636">다음 예제는 <xref:System.Math.Round%28System.Decimal%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-636">The following example demonstrates the <xref:System.Math.Round%28System.Decimal%29> method.</span></span> <span data-ttu-id="cd9fa-637">이때 합니다 <xref:System.Decimal> 4.5의 값이 5 보다는 4 반올림이 오버 로드는 기본값을 사용 하므로 <xref:System.MidpointRounding.ToEven> 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-637">Note that the <xref:System.Decimal> value of 4.5 rounds to 4 rather than 5, because this overload uses the default <xref:System.MidpointRounding.ToEven> convention.</span></span>  
  
 [!code-csharp[System.Math.Round#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/rounddecimal1.cs#6)]
 [!code-vb[System.Math.Round#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/rounddecimal1.vb#6)]  
  
<a name="Round2_Example"></a>   
## <a name="mathrounddouble-example"></a><span data-ttu-id="cd9fa-638">Math.Round(Double) 예제</span><span class="sxs-lookup"><span data-stu-id="cd9fa-638">Math.Round(Double) example</span></span>  
 <span data-ttu-id="cd9fa-639">다음 예제에서는 가장 근사한 정수값으로 반올림 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-639">The following example demonstrates rounding to the nearest integer value.</span></span>  
  
 [!code-cpp[Classic Math.Round Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Math.Round Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Math.Round Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Math.Round Example/CS/source.cs#1)]
 [!code-vb[Classic Math.Round Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Math.Round Example/VB/source.vb#1)]  
  
<a name="Round3_Example"></a>   
## <a name="mathrounddecimal-int32-example"></a><span data-ttu-id="cd9fa-640">Math.Round (10 진수, Int32) 예제</span><span class="sxs-lookup"><span data-stu-id="cd9fa-640">Math.Round(Decimal, Int32) example</span></span>  
 <span data-ttu-id="cd9fa-641">다음 예제에서는 단일 소수 자릿수를 포함 하는 값을 두 소수 자릿수를 사용 하 여 10 진수 값을 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-641">The following example rounds decimal values with two fractional digits to values that have a single fractional digit.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/source.cs#3)]
 [!code-vb[System.Math.Round.Overload#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/source.vb#3)]  
  
<a name="Round4_Example"></a>   
## <a name="mathrounddouble-int32-example"></a><span data-ttu-id="cd9fa-642">Math.Round (Double, Int32) 예제</span><span class="sxs-lookup"><span data-stu-id="cd9fa-642">Math.Round(Double, Int32) example</span></span>  
 <span data-ttu-id="cd9fa-643">다음 예제에서는 두 소수 자릿수를 소수 자리 있는 double 사용 하 여 double 값을 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-643">The following example rounds double values with two fractional digits to doubles that have a single fractional digit.</span></span>  
  
 [!code-cpp[Classic Math.Round2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Math.Round2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Math.Round2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Math.Round2 Example/CS/source.cs#1)]
 [!code-vb[Classic Math.Round2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Math.Round2 Example/VB/source.vb#1)]  
  
<a name="Round5_Example"></a>   
## <a name="mathrounddecimal-midpointrounding-example"></a><span data-ttu-id="cd9fa-644">Math.Round (10 진수, MidpointRounding) 예제</span><span class="sxs-lookup"><span data-stu-id="cd9fa-644">Math.Round(Decimal, MidpointRounding) example</span></span>  
 <span data-ttu-id="cd9fa-645">반환 된 값을 표시 하는 다음 예제는 <xref:System.Math.Round%28System.Decimal%29> 메서드를를 <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> 메서드를 `mode` 인수의 <xref:System.MidpointRounding.ToEven>, 및 <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> 메서드를 `mode` 인수의 <xref:System.MidpointRounding.AwayFromZero>.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-645">The following example displays values returned by the <xref:System.Math.Round%28System.Decimal%29> method, the <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.ToEven>, and the <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.AwayFromZero>.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/midpoint1.cs#5)]
 [!code-vb[System.Math.Round.Overload#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/midpoint1.vb#5)]  
  
<a name="Round6_Example"></a>   
## <a name="mathrounddouble-midpointrounding-example"></a><span data-ttu-id="cd9fa-646">Math.Round (Double MidpointRounding) 예제</span><span class="sxs-lookup"><span data-stu-id="cd9fa-646">Math.Round(Double, MidpointRounding) example</span></span>  
 <span data-ttu-id="cd9fa-647">반환 된 값을 표시 하는 다음 예제는 <xref:System.Math.Round%28System.Double%29> 메서드를를 <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> 메서드를 `mode` 인수의 <xref:System.MidpointRounding.ToEven>, 및 <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> 메서드를 `mode` 인수의 <xref:System.MidpointRounding.AwayFromZero>.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-647">The following example displays values returned by the <xref:System.Math.Round%28System.Double%29> method, the <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.ToEven>, and the <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.AwayFromZero>.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/midpoint2.cs#6)]
 [!code-vb[System.Math.Round.Overload#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/midpoint2.vb#6)]  
  
<a name="Round7_Example"></a>   
## <a name="mathrounddecimal-int32-midpointrounding-example"></a><span data-ttu-id="cd9fa-648">Math.Round (Int32, Decimal MidpointRounding) 예제</span><span class="sxs-lookup"><span data-stu-id="cd9fa-648">Math.Round(Decimal, Int32, MidpointRounding) example</span></span>  
 <span data-ttu-id="cd9fa-649">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Round%2A> 메서드는 <xref:System.MidpointRounding> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-649">The following example demonstrates how to use the <xref:System.Math.Round%2A> method with the <xref:System.MidpointRounding> enumeration.</span></span>  
  
 [!code-cpp[math.midpointrounding#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.midpointrounding/cpp/mpr.cpp#1)]
 [!code-csharp[math.midpointrounding#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.midpointrounding/CS/mpr.cs#1)]
 [!code-vb[math.midpointrounding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.midpointrounding/VB/mpr.vb#1)]  
  
<a name="Round8_Example"></a>   
## <a name="mathrounddouble-int32-midpointrounding-example"></a><span data-ttu-id="cd9fa-650">Math.Round (Int32, Double MidpointRounding) 예제</span><span class="sxs-lookup"><span data-stu-id="cd9fa-650">Math.Round(Double, Int32, MidpointRounding) example</span></span>  
 <span data-ttu-id="cd9fa-651">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29> 메서드는 <xref:System.MidpointRounding> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-651">The following example demonstrates how to use the <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29> method with the <xref:System.MidpointRounding> enumeration.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/mpr.cs#4)]
 [!code-vb[System.Math.Round.Overload#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/mpr.vb#4)]  
  
<a name="Round_Versions"></a>   
## <a name="version-information"></a><span data-ttu-id="cd9fa-652">버전 정보</span><span class="sxs-lookup"><span data-stu-id="cd9fa-652">Version information</span></span>  
 <span data-ttu-id="cd9fa-653">.NET Framework</span><span class="sxs-lookup"><span data-stu-id="cd9fa-653">.NET Framework</span></span>  
 <span data-ttu-id="cd9fa-654">없이 오버 로드는 <xref:System.MidpointRounding> 매개 변수에서 지원 됩니다: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span><span class="sxs-lookup"><span data-stu-id="cd9fa-654">Overloads without a <xref:System.MidpointRounding> parameter are supported in: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span></span>  
<span data-ttu-id="cd9fa-655">사용 하 여 오버 로드는 <xref:System.MidpointRounding> 매개 변수에서 지원 됩니다: 4.5, 4, 3.5, 3.0, 2.0</span><span class="sxs-lookup"><span data-stu-id="cd9fa-655">Overloads with a <xref:System.MidpointRounding> parameter are supported in: 4.5, 4, 3.5, 3.0, 2.0</span></span>  
  
 <span data-ttu-id="cd9fa-656">.NET Framework Client Profile</span><span class="sxs-lookup"><span data-stu-id="cd9fa-656">.NET Framework Client Profile</span></span>  
 <span data-ttu-id="cd9fa-657">모든 오버 로드에 지원 됩니다: 4, 3.5 SP1</span><span class="sxs-lookup"><span data-stu-id="cd9fa-657">All overloads are supported in: 4, 3.5 SP1</span></span>  
  
 <span data-ttu-id="cd9fa-658">이식 가능한 클래스 라이브러리</span><span class="sxs-lookup"><span data-stu-id="cd9fa-658">Portable Class Library</span></span>  
 <span data-ttu-id="cd9fa-659">모든 오버 로드 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-659">All overloads are supported</span></span>  
  
 <span data-ttu-id="cd9fa-660">Windows 스토어 앱용 .NET</span><span class="sxs-lookup"><span data-stu-id="cd9fa-660">.NET for Windows Store apps</span></span>  
 <span data-ttu-id="cd9fa-661">모든 오버 로드에 지원 됩니다: Windows 8</span><span class="sxs-lookup"><span data-stu-id="cd9fa-661">All overloads are supported in: Windows 8</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
        <altmember cref="M:System.Math.Truncate(System.Decimal)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d);" />
      <MemberSignature Language="F#" Value="static member Round : decimal -&gt; decimal" Usage="System.Math.Round d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-662">반올림할 10진수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-662">A decimal number to be rounded.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-663">10진수 값을 가장 가까운 정수 값으로 반올림합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-663">Rounds a decimal value to the nearest integral value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-664">매개 변수 <paramref name="d" />에 가장 가까운 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-664">The integer nearest parameter <paramref name="d" />.</span>
          </span>
          <span data-ttu-id="cd9fa-665">
            <paramref name="d" />의 소수 부분이 하나는 짝수이고 다른 하나는 홀수인 두 정수의 중간인 경우에는 짝수가 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-665">If the fractional component of <paramref name="d" /> is halfway between two integers, one of which is even and the other odd, the even number is returned.</span>
          </span>
          <span data-ttu-id="cd9fa-666">이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Decimal" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-666">Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd9fa-667">이 및 다른 오버 로드에 대 한 포괄적인 사용 정보와 예제는 `Round` 메서드를 참조 합니다 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-667">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="cd9fa-668">결과가 <see cref="T:System.Decimal" /> 범위를 벗어나는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-668">The result is outside the range of a <see cref="T:System.Decimal" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double a);" />
      <MemberSignature Language="F#" Value="static member Round : double -&gt; double" Usage="System.Math.Round a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="cd9fa-669">반올림할 배정밀도 부동 소수점 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-669">A double-precision floating-point number to be rounded.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-670">배정밀도 부동 소수점 값을 가장 가까운 정수 값으로 반올림합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-670">Rounds a double-precision floating-point value to the nearest integral value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-671">
            <paramref name="a" />에 가장 가까운 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-671">The integer nearest <paramref name="a" />.</span>
          </span>
          <span data-ttu-id="cd9fa-672">
            <paramref name="a" />의 소수 부분이 하나는 짝수이고 다른 하나는 홀수인 두 정수의 중간인 경우에는 짝수가 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-672">If the fractional component of <paramref name="a" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned.</span>
          </span>
          <span data-ttu-id="cd9fa-673">이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Double" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-673">Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd9fa-674">이 및 다른 오버 로드에 대 한 포괄적인 사용 정보와 예제는 `Round` 메서드를 참조 합니다 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-674">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="cd9fa-675">
            <para>경우에 따라 부동 소수점 값에 산술 연산을 수행 또는 10 진수 값을 부동 소수점 표현에서 발생할 수 있는 전체 자릿수 손실을 인해는 <see cref="M:System.Math.Round(System.Double)" /> 메서드 중간점 값을 반올림할 나타나지 않을 수 있습니다는 가장 근사한 짝수 정수로 합니다. 다음 예제에서는 부동 소수점 값.1이 유한 이진 표현이 없기 때문에 첫 번째 호출 하는 <see cref="M:System.Math.Round(System.Double)" /> 11.5 값을 사용 하 여 메서드 12 대신 11을 반환 합니다.  [! 코드 csharp[System.Math.Round#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round2.cs#1)] [! 코드 vb[System.Math.Round#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round2.vb#1)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-675">
              <para>Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double)" /> method may not appear to round midpoint values to the nearest even integer. In the following example, because the floating-point value .1 has no finite binary representation, the first call to the <see cref="M:System.Math.Round(System.Double)" /> method with a value of 11.5 returns 11 instead of 12.  [!code-csharp[System.Math.Round#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round2.cs#1)] [!code-vb[System.Math.Round#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round2.vb#1)]</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, decimals As Integer) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, int decimals);" />
      <MemberSignature Language="F#" Value="static member Round : decimal * int -&gt; decimal" Usage="System.Math.Round (d, decimals)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-676">반올림할 10진수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-676">A decimal number to be rounded.</span>
          </span>
        </param>
        <param name="decimals">
          <span data-ttu-id="cd9fa-677">반환 값의 소수 자릿수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-677">The number of decimal places in the return value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-678">10진수 값을 지정된 소수 자릿수로 반올림합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-678">Rounds a decimal value to a specified number of fractional digits.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-679">
            <paramref name="d" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="decimals" />에 가장 가까운 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-679">The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd9fa-680">이 및 다른 오버 로드에 대 한 포괄적인 사용 정보와 예제는 `Round` 메서드를 참조 합니다 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-680">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cd9fa-681">
            <paramref name="decimals" />가 0보다 작거나 28보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-681">
              <paramref name="decimals" /> is less than 0 or greater than 28.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="cd9fa-682">결과가 <see cref="T:System.Decimal" /> 범위를 벗어나는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-682">The result is outside the range of a <see cref="T:System.Decimal" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, mode As MidpointRounding) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, MidpointRounding mode);" />
      <MemberSignature Language="F#" Value="static member Round : decimal * MidpointRounding -&gt; decimal" Usage="System.Math.Round (d, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-683">반올림할 10진수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-683">A decimal number to be rounded.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="cd9fa-684">서로 다른 두 숫자 중간에 있는 <c>d</c>의 반올림 방법에 대한 사양입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-684">Specification for how to round <c>d</c> if it is midway between two other numbers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-685">10진 값을 가장 가까운 정수로 반올림합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-685">Rounds a decimal value to the nearest integer.</span>
          </span>
          <span data-ttu-id="cd9fa-686">두 숫자의 중간에 있는 값을 반올림하는 방법을 지정하는 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-686">A parameter specifies how to round the value if it is midway between two numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-687">
            <paramref name="d" />에 가장 가까운 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-687">The integer nearest <paramref name="d" />.</span>
          </span>
          <span data-ttu-id="cd9fa-688">
            <paramref name="d" />가 두 숫자의 중간이고, 이 숫자 중 하나는 짝수이고 다른 하나는 홀수이면, <paramref name="mode" />에 의해 두 숫자 중 하나가 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-688">If <paramref name="d" /> is halfway between two numbers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd9fa-689">이 및 다른 오버 로드에 대 한 포괄적인 사용 정보와 예제는 `Round` 메서드를 참조 합니다 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-689">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd9fa-690">
            <paramref name="mode" />가 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-690">
              <paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="cd9fa-691">결과가 <see cref="T:System.Decimal" /> 범위를 벗어나는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-691">The result is outside the range of a <see cref="T:System.Decimal" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, digits As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, int digits);" />
      <MemberSignature Language="F#" Value="static member Round : double * int -&gt; double" Usage="System.Math.Round (value, digits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-692">반올림할 배정밀도 부동 소수점 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-692">A double-precision floating-point number to be rounded.</span>
          </span>
        </param>
        <param name="digits">
          <span data-ttu-id="cd9fa-693">반환 값의 소수 자릿수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-693">The number of fractional digits in the return value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-694">배정밀도 부동 소수점 값을 지정된 소수 자릿수로 반올림합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-694">Rounds a double-precision floating-point value to a specified number of fractional digits.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-695">
            <paramref name="value" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="digits" />에 가장 가까운 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-695">The number nearest to <paramref name="value" /> that contains a number of fractional digits equal to <paramref name="digits" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd9fa-696">이 및 다른 오버 로드에 대 한 포괄적인 사용 정보와 예제는 `Round` 메서드를 참조 합니다 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-696">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cd9fa-697">
            <paramref name="digits" />가 0보다 작거나 15보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-697">
              <paramref name="digits" /> is less than 0 or greater than 15.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="cd9fa-698">
            <para>경우에 따라 부동 소수점 값에 산술 연산을 수행 또는 10 진수 값을 부동 소수점 표현에서 발생할 수 있는 전체 자릿수 손실을 인해는 <see cref="M:System.Math.Round(System.Double,System.Int32)" /> 메서드 중간점 값을 반올림할 나타나지 않을 수 있습니다는 에 값에 가장 가까운는 <paramref name="digits" /> 소수 자릿수입니다. 이 2.14 대신 2.13 2.135 반올림는 다음 예제에 나와 있습니다. 이 메서드를 내부적으로 곱합니다 때문에 발생 <paramref name="value" /> 10 씩<sup>자릿수</sup>, 곱하기 연산의 정밀도의 손실 로부터 경우 저하.  [! 코드 csharp[System.Math.Round#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round3.cs#2)] [! 코드 vb[System.Math.Round#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round3.vb#2)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-698">
              <para>Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.Int32)" /> method may not appear to round midpoint values to the nearest even value in the <paramref name="digits" /> decimal position. This is illustrated in the following example, where 2.135 is rounded to 2.13 instead of 2.14. This occurs because internally the method multiplies <paramref name="value" /> by 10<sup>digits</sup>, and the multiplication operation in this case suffers from a loss of precision.  [!code-csharp[System.Math.Round#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round3.cs#2)] [!code-vb[System.Math.Round#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round3.vb#2)]</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, mode As MidpointRounding) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, MidpointRounding mode);" />
      <MemberSignature Language="F#" Value="static member Round : double * MidpointRounding -&gt; double" Usage="System.Math.Round (value, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-699">반올림할 배정밀도 부동 소수점 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-699">A double-precision floating-point number to be rounded.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="cd9fa-700">서로 다른 두 숫자 중간에 있는 <c>value</c>의 반올림 방법에 대한 사양입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-700">Specification for how to round <c>value</c> if it is midway between two other numbers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-701">배정밀도 부동 소수점 값을 가장 가까운 정수로 반올림합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-701">Rounds a double-precision floating-point value to the nearest integer.</span>
          </span>
          <span data-ttu-id="cd9fa-702">두 숫자의 중간에 있는 값을 반올림하는 방법을 지정하는 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-702">A parameter specifies how to round the value if it is midway between two numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-703">
            <paramref name="value" />에 가장 가까운 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-703">The integer nearest <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="cd9fa-704">
            <paramref name="value" />가 두 정수의 중간이고, 이 숫자 중 하나는 짝수이고 다른 하나는 홀수이면, <paramref name="mode" />에 의해 두 숫자 중 하나가 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-704">If <paramref name="value" /> is halfway between two integers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd9fa-705">이 및 다른 오버 로드에 대 한 포괄적인 사용 정보와 예제는 `Round` 메서드를 참조 합니다 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-705">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd9fa-706">
            <paramref name="mode" />가 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-706">
              <paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="cd9fa-707">
            <para>경우에 따라 부동 소수점 값에 산술 연산을 수행 또는 10 진수 값을 부동 소수점 표현에서 발생할 수 있는 전체 자릿수 손실을 인해는 <see cref="M:System.Math.Round(System.Double,System.MidpointRounding)" /> 메서드 중간점 값을 반올림할 나타나지 않을 수 있습니다는 가장 근사한 짝수 정수로 합니다. 다음 예제에서는 부동 소수점 값.1이 유한 이진 표현이 없기 때문에 첫 번째 호출 하는 <see cref="M:System.Math.Round(System.Double)" /> 11.5 값을 사용 하 여 메서드 12 대신 11을 반환 합니다.  [! 코드 csharp[System.Math.Round#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round5.cs#4)] [! 코드 vb[System.Math.Round#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round5.vb#4)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-707">
              <para>Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.MidpointRounding)" /> method may not appear to round midpoint values to the nearest even integer. In the following example, because the floating-point value .1 has no finite binary representation, the first call to the <see cref="M:System.Math.Round(System.Double)" /> method with a value of 11.5 returns 11 instead of 12.  [!code-csharp[System.Math.Round#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round5.cs#4)] [!code-vb[System.Math.Round#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round5.vb#4)]</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, decimals As Integer, mode As MidpointRounding) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, int decimals, MidpointRounding mode);" />
      <MemberSignature Language="F#" Value="static member Round : decimal * int * MidpointRounding -&gt; decimal" Usage="System.Math.Round (d, decimals, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-708">반올림할 10진수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-708">A decimal number to be rounded.</span>
          </span>
        </param>
        <param name="decimals">
          <span data-ttu-id="cd9fa-709">반환 값의 소수 자릿수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-709">The number of decimal places in the return value.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="cd9fa-710">서로 다른 두 숫자 중간에 있는 <c>d</c>의 반올림 방법에 대한 사양입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-710">Specification for how to round <c>d</c> if it is midway between two other numbers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-711">10진수 값을 지정된 소수 자릿수로 반올림합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-711">Rounds a decimal value to a specified number of fractional digits.</span>
          </span>
          <span data-ttu-id="cd9fa-712">두 숫자의 중간에 있는 값을 반올림하는 방법을 지정하는 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-712">A parameter specifies how to round the value if it is midway between two numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-713">
            <paramref name="d" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="decimals" />에 가장 가까운 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-713">The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />.</span>
          </span>
          <span data-ttu-id="cd9fa-714">
            <paramref name="d" />의 소수 자릿수가 <paramref name="decimals" />보다 작은 경우, <paramref name="d" />가 변경되지 않은 상태로 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-714">If <paramref name="d" /> has fewer fractional digits than <paramref name="decimals" />, <paramref name="d" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd9fa-715">이 및 다른 오버 로드에 대 한 포괄적인 사용 정보와 예제는 `Round` 메서드를 참조 합니다 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-715">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cd9fa-716">
            <paramref name="decimals" />가 0보다 작거나 28보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-716">
              <paramref name="decimals" /> is less than 0 or greater than 28.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd9fa-717">
            <paramref name="mode" />가 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-717">
              <paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="cd9fa-718">결과가 <see cref="T:System.Decimal" /> 범위를 벗어나는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-718">The result is outside the range of a <see cref="T:System.Decimal" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, digits As Integer, mode As MidpointRounding) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, int digits, MidpointRounding mode);" />
      <MemberSignature Language="F#" Value="static member Round : double * int * MidpointRounding -&gt; double" Usage="System.Math.Round (value, digits, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-719">반올림할 배정밀도 부동 소수점 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-719">A double-precision floating-point number to be rounded.</span>
          </span>
        </param>
        <param name="digits">
          <span data-ttu-id="cd9fa-720">반환 값의 소수 자릿수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-720">The number of fractional digits in the return value.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="cd9fa-721">서로 다른 두 숫자 중간에 있는 <c>value</c>의 반올림 방법에 대한 사양입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-721">Specification for how to round <c>value</c> if it is midway between two other numbers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-722">배정밀도 부동 소수점 값을 지정된 소수 자릿수로 반올림합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-722">Rounds a double-precision floating-point value to a specified number of fractional digits.</span>
          </span>
          <span data-ttu-id="cd9fa-723">두 숫자의 중간에 있는 값을 반올림하는 방법을 지정하는 매개 변수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-723">A parameter specifies how to round the value if it is midway between two numbers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-724">
            <paramref name="digits" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="value" />에 가장 가까운 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-724">The number nearest to <paramref name="value" /> that has a number of fractional digits equal to <paramref name="digits" />.</span>
          </span>
          <span data-ttu-id="cd9fa-725">
            <paramref name="value" />의 소수 자릿수가 <paramref name="digits" />보다 작은 경우, <paramref name="value" />가 변경되지 않은 상태로 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-725">If <paramref name="value" /> has fewer fractional digits than <paramref name="digits" />, <paramref name="value" /> is returned unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="cd9fa-726">이 및 다른 오버 로드에 대 한 포괄적인 사용 정보와 예제는 `Round` 메서드를 참조 합니다 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-726">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="cd9fa-727">
            <paramref name="digits" />가 0보다 작거나 15보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-727">
              <paramref name="digits" /> is less than 0 or greater than 15.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cd9fa-728">
            <paramref name="mode" />가 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-728">
              <paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="cd9fa-729">
            <para>경우에 따라 부동 소수점 값에 산술 연산을 수행 또는 10 진수 값을 부동 소수점 표현에서 발생할 수 있는 전체 자릿수 손실을 인해는 <see cref="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" /> 메서드는 지정 된 대로 중간점 값을 반올림할 나타나지 않을 수 있습니다 여는 <paramref name="mode" /> 매개 변수입니다. 이 2.14 대신 2.13 2.135 반올림는 다음 예제에 나와 있습니다. 이 메서드를 내부적으로 곱합니다 때문에 발생 <paramref name="value" /> 10 씩<sup>자릿수</sup>, 곱하기 연산의 정밀도의 손실 로부터 경우 저하.  [! 코드 csharp[System.Math.Round#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round4.cs#3)] [! 코드 vb[System.Math.Round#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round4.vb#3)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-729">
              <para>Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" /> method may not appear to round midpoint values as specified by the <paramref name="mode" /> parameter. This is illustrated in the following example, where 2.135 is rounded to 2.13 instead of 2.14. This occurs because internally the method multiplies <paramref name="value" /> by 10<sup>digits</sup>, and the multiplication operation in this case suffers from a loss of precision.  [!code-csharp[System.Math.Round#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round4.cs#3)] [!code-vb[System.Math.Round#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round4.vb#3)]</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Sign">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd9fa-730">숫자의 부호를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-730">Returns an integer that indicates the sign of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(System::Decimal value);" />
      <MemberSignature Language="F#" Value="static member Sign : decimal -&gt; int" Usage="System.Math.Sign value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-731">부호 있는 10진수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-731">A signed decimal number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-732">10진수의 부호를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-732">Returns an integer that indicates the sign of a decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-733">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-733">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span>
          </span>
          <span data-ttu-id="cd9fa-734">
            <list type="table">
              <listheader>
                <term> 반환 값  </term>
                <description> 의미  </description>
              </listheader>
              <item>
                <term> -1  </term>
                <description>
                  <paramref name="value" />는 0보다 작습니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <paramref name="value" />는 0과 같습니다.  </description>
              </item>
              <item>
                <term> 1  </term>
                <description>
                  <paramref name="value" />는 0보다 큽니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-734">
              <list type="table">
                <listheader>
                  <term> Return value  </term>
                  <description> Meaning  </description>
                </listheader>
                <item>
                  <term> -1  </term>
                  <description>
                    <paramref name="value" /> is less than zero.  </description>
                </item>
                <item>
                  <term> 0  </term>
                  <description>
                    <paramref name="value" /> is equal to zero.  </description>
                </item>
                <item>
                  <term> 1  </term>
                  <description>
                    <paramref name="value" /> is greater than zero.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-735">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Sign%28System.Decimal%29> 의 부호를 확인 하는 방법을 <xref:System.Decimal> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-735">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Decimal%29> method to determine the sign of a <xref:System.Decimal> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(double value);" />
      <MemberSignature Language="F#" Value="static member Sign : double -&gt; int" Usage="System.Math.Sign value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-736">부호 있는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-736">A signed number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-737">배정밀도 부동 소수점 수의 부호를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-737">Returns an integer that indicates the sign of a double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-738">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-738">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span>
          </span>
          <span data-ttu-id="cd9fa-739">
            <list type="table">
              <listheader>
                <term> 반환 값  </term>
                <description> 의미  </description>
              </listheader>
              <item>
                <term> -1  </term>
                <description>
                  <paramref name="value" />는 0보다 작습니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <paramref name="value" />는 0과 같습니다.  </description>
              </item>
              <item>
                <term> 1  </term>
                <description>
                  <paramref name="value" />는 0보다 큽니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-739">
              <list type="table">
                <listheader>
                  <term> Return value  </term>
                  <description> Meaning  </description>
                </listheader>
                <item>
                  <term> -1  </term>
                  <description>
                    <paramref name="value" /> is less than zero.  </description>
                </item>
                <item>
                  <term> 0  </term>
                  <description>
                    <paramref name="value" /> is equal to zero.  </description>
                </item>
                <item>
                  <term> 1  </term>
                  <description>
                    <paramref name="value" /> is greater than zero.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-740">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Sign%28System.Double%29> 의 부호를 확인 하는 방법을 <xref:System.Double> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-740">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Double%29> method to determine the sign of a <xref:System.Double> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArithmeticException">
          <span data-ttu-id="cd9fa-741">
            <paramref name="value" />가 <see cref="F:System.Double.NaN" />와 같은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-741">
              <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(short value);" />
      <MemberSignature Language="F#" Value="static member Sign : int16 -&gt; int" Usage="System.Math.Sign value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-742">부호 있는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-742">A signed number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-743">16비트 부호 있는 정수의 부호를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-743">Returns an integer that indicates the sign of a 16-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-744">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-744">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span>
          </span>
          <span data-ttu-id="cd9fa-745">
            <list type="table">
              <listheader>
                <term> 반환 값  </term>
                <description> 의미  </description>
              </listheader>
              <item>
                <term> -1  </term>
                <description>
                  <paramref name="value" />는 0보다 작습니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <paramref name="value" />는 0과 같습니다.  </description>
              </item>
              <item>
                <term> 1  </term>
                <description>
                  <paramref name="value" />는 0보다 큽니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-745">
              <list type="table">
                <listheader>
                  <term> Return value  </term>
                  <description> Meaning  </description>
                </listheader>
                <item>
                  <term> -1  </term>
                  <description>
                    <paramref name="value" /> is less than zero.  </description>
                </item>
                <item>
                  <term> 0  </term>
                  <description>
                    <paramref name="value" /> is equal to zero.  </description>
                </item>
                <item>
                  <term> 1  </term>
                  <description>
                    <paramref name="value" /> is greater than zero.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-746">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Sign%28System.Int16%29> 의 부호를 확인 하는 방법은 <xref:System.Int16> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-746">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int16%29> method to determine the sign of an <xref:System.Int16> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(int value);" />
      <MemberSignature Language="F#" Value="static member Sign : int -&gt; int" Usage="System.Math.Sign value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-747">부호 있는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-747">A signed number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-748">32비트 부호 있는 정수의 부호를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-748">Returns an integer that indicates the sign of a 32-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-749">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-749">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span>
          </span>
          <span data-ttu-id="cd9fa-750">
            <list type="table">
              <listheader>
                <term> 반환 값  </term>
                <description> 의미  </description>
              </listheader>
              <item>
                <term> -1  </term>
                <description>
                  <paramref name="value" />는 0보다 작습니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <paramref name="value" />는 0과 같습니다.  </description>
              </item>
              <item>
                <term> 1  </term>
                <description>
                  <paramref name="value" />는 0보다 큽니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-750">
              <list type="table">
                <listheader>
                  <term> Return value  </term>
                  <description> Meaning  </description>
                </listheader>
                <item>
                  <term> -1  </term>
                  <description>
                    <paramref name="value" /> is less than zero.  </description>
                </item>
                <item>
                  <term> 0  </term>
                  <description>
                    <paramref name="value" /> is equal to zero.  </description>
                </item>
                <item>
                  <term> 1  </term>
                  <description>
                    <paramref name="value" /> is greater than zero.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-751">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Sign%28System.Int32%29> 의 부호를 확인 하는 방법은 <xref:System.Int32> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-751">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int32%29> method to determine the sign of an <xref:System.Int32> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(long value);" />
      <MemberSignature Language="F#" Value="static member Sign : int64 -&gt; int" Usage="System.Math.Sign value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-752">부호 있는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-752">A signed number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-753">64비트 부호 있는 정수의 부호를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-753">Returns an integer that indicates the sign of a 64-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-754">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-754">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span>
          </span>
          <span data-ttu-id="cd9fa-755">
            <list type="table">
              <listheader>
                <term> 반환 값  </term>
                <description> 의미  </description>
              </listheader>
              <item>
                <term> -1  </term>
                <description>
                  <paramref name="value" />는 0보다 작습니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <paramref name="value" />는 0과 같습니다.  </description>
              </item>
              <item>
                <term> 1  </term>
                <description>
                  <paramref name="value" />는 0보다 큽니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-755">
              <list type="table">
                <listheader>
                  <term> Return value  </term>
                  <description> Meaning  </description>
                </listheader>
                <item>
                  <term> -1  </term>
                  <description>
                    <paramref name="value" /> is less than zero.  </description>
                </item>
                <item>
                  <term> 0  </term>
                  <description>
                    <paramref name="value" /> is equal to zero.  </description>
                </item>
                <item>
                  <term> 1  </term>
                  <description>
                    <paramref name="value" /> is greater than zero.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-756">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Sign%28System.Int64%29> 의 부호를 확인 하는 방법은 <xref:System.Int64> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-756">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int64%29> method to determine the sign of an <xref:System.Int64> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(System::SByte value);" />
      <MemberSignature Language="F#" Value="static member Sign : sbyte -&gt; int" Usage="System.Math.Sign value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-757">부호 있는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-757">A signed number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-758">8비트 부호 있는 정수의 부호를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-758">Returns an integer that indicates the sign of an 8-bit signed integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-759">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-759">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span>
          </span>
          <span data-ttu-id="cd9fa-760">
            <list type="table">
              <listheader>
                <term> 반환 값  </term>
                <description> 의미  </description>
              </listheader>
              <item>
                <term> -1  </term>
                <description>
                  <paramref name="value" />는 0보다 작습니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <paramref name="value" />는 0과 같습니다.  </description>
              </item>
              <item>
                <term> 1  </term>
                <description>
                  <paramref name="value" />는 0보다 큽니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-760">
              <list type="table">
                <listheader>
                  <term> Return value  </term>
                  <description> Meaning  </description>
                </listheader>
                <item>
                  <term> -1  </term>
                  <description>
                    <paramref name="value" /> is less than zero.  </description>
                </item>
                <item>
                  <term> 0  </term>
                  <description>
                    <paramref name="value" /> is equal to zero.  </description>
                </item>
                <item>
                  <term> 1  </term>
                  <description>
                    <paramref name="value" /> is greater than zero.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-761">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Sign%28System.SByte%29> 의 부호를 확인 하는 방법은 <xref:System.SByte> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-761">The following example demonstrates how to use the <xref:System.Math.Sign%28System.SByte%29> method to determine the sign of an <xref:System.SByte> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(float value);" />
      <MemberSignature Language="F#" Value="static member Sign : single -&gt; int" Usage="System.Math.Sign value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-762">부호 있는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-762">A signed number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-763">단정밀도 부동 소수점 숫자의 부호를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-763">Returns an integer that indicates the sign of a single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-764">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-764">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span>
          </span>
          <span data-ttu-id="cd9fa-765">
            <list type="table">
              <listheader>
                <term> 반환 값  </term>
                <description> 의미  </description>
              </listheader>
              <item>
                <term> -1  </term>
                <description>
                  <paramref name="value" />는 0보다 작습니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <paramref name="value" />는 0과 같습니다.  </description>
              </item>
              <item>
                <term> 1  </term>
                <description>
                  <paramref name="value" />는 0보다 큽니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-765">
              <list type="table">
                <listheader>
                  <term> Return value  </term>
                  <description> Meaning  </description>
                </listheader>
                <item>
                  <term> -1  </term>
                  <description>
                    <paramref name="value" /> is less than zero.  </description>
                </item>
                <item>
                  <term> 0  </term>
                  <description>
                    <paramref name="value" /> is equal to zero.  </description>
                </item>
                <item>
                  <term> 1  </term>
                  <description>
                    <paramref name="value" /> is greater than zero.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-766">다음 예제에서는 사용 하는 방법에 설명 합니다 <xref:System.Math.Sign%28System.Single%29> 의 부호를 확인 하는 방법을 <xref:System.Single> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-766">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Single%29> method to determine the sign of a <xref:System.Single> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArithmeticException">
          <span data-ttu-id="cd9fa-767">
            <paramref name="value" />가 <see cref="F:System.Single.NaN" />와 같은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-767">
              <paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static double Sin (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sin(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sin(double a);" />
      <MemberSignature Language="F#" Value="static member Sin : double -&gt; double" Usage="System.Math.Sin a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="cd9fa-768">라디안 단위의 각도입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-768">An angle, measured in radians.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-769">지정된 각도의 사인을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-769">Returns the sine of the specified angle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-770">
            <paramref name="a" />의 사인입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-770">The sine of <paramref name="a" />.</span>
          </span>
          <span data-ttu-id="cd9fa-771">
            <paramref name="a" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-771">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-772">각도 `a`, 라디안에서 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-772">The angle, `a`, must be in radians.</span></span> <span data-ttu-id="cd9fa-773">곱  <xref:System.Math.PI?displayProperty=nameWithType> /180 라디안으로 각도 변환 하기.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-773">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 <span data-ttu-id="cd9fa-774">허용 되는 값의 `a` -9223372036854775295 약에서 약 9223372036854775295 까지입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-774">Acceptable values of `a` range from approximately -9223372036854775295 to approximately 9223372036854775295.</span></span> <span data-ttu-id="cd9fa-775">이 범위 밖의 값에 대 한 합니다 <xref:System.Math.Sin%2A> 메서드가 반환 되는 `a` 예외를 throw 하는 대신 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-775">For values outside of this range, the <xref:System.Math.Sin%2A> method returns `a` unchanged rather than throwing an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-776">다음 예제에서는 <xref:System.Math.Sin%2A> 선택 된 각도의 삼각 특정 id를 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-776">The following example uses <xref:System.Math.Sin%2A> to evaluate certain trigonometric identities for selected angles.</span></span>  
  
 [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]
 [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]
 [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static double Sinh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sinh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sinh(double value);" />
      <MemberSignature Language="F#" Value="static member Sinh : double -&gt; double" Usage="System.Math.Sinh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-777">라디안 단위의 각도입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-777">An angle, measured in radians.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-778">지정된 각도의 하이퍼볼릭 사인을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-778">Returns the hyperbolic sine of the specified angle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-779">
            <paramref name="value" />의 쌍곡선 사인입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-779">The hyperbolic sine of <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="cd9fa-780">
            <paramref name="value" />가 <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> 또는 <see cref="F:System.Double.NaN" />과 같으면 이 메서드는 <paramref name="value" />와 같은 <see cref="T:System.Double" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-780">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns a <see cref="T:System.Double" /> equal to <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-781">각도 `value`, 라디안에서 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-781">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="cd9fa-782">곱  <xref:System.Math.PI?displayProperty=nameWithType> /180 라디안으로 각도 변환 하기.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-782">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-783">다음 예제에서는 <xref:System.Math.Sinh%2A> 선택한 값에 대 한 하이퍼볼릭을 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-783">The following example uses <xref:System.Math.Sinh%2A> to evaluate certain hyperbolic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]
 [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]
 [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static double Sqrt (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sqrt(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sqrt(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sqrt(double d);" />
      <MemberSignature Language="F#" Value="static member Sqrt : double -&gt; double" Usage="System.Math.Sqrt d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-784">제곱근을 구할 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-784">The number whose square root is to be found.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-785">지정된 숫자의 제곱근을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-785">Returns the square root of a specified number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-786">다음 표에 나와 있는 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-786">One of the values in the following table.</span>
          </span>
          <span data-ttu-id="cd9fa-787">
            <list type="table">
              <listheader>
                <term>
                  <paramref name="d" /> 매개 변수  </term>
                <description> 반환 값  </description>
              </listheader>
              <item>
                <term> 0 또는 양수  </term>
                <description>
                  <paramref name="d" />의 양의 제곱근입니다.  </description>
              </item>
              <item>
                <term> 음수  </term>
                <description>
                  <see cref="F:System.Double.NaN" />
                </description>
              </item>
              <item>
                <term> 같음 <see cref="F:System.Double.NaN" /></term>
                <description>
                  <see cref="F:System.Double.NaN" />
                </description>
              </item>
              <item>
                <term> 같음 <see cref="F:System.Double.PositiveInfinity" /></term>
                <description>
                  <see cref="F:System.Double.PositiveInfinity" />
                </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-787">
              <list type="table">
                <listheader>
                  <term>
                    <paramref name="d" /> parameter  </term>
                  <description> Return value  </description>
                </listheader>
                <item>
                  <term> Zero or positive  </term>
                  <description> The positive square root of <paramref name="d" />.  </description>
                </item>
                <item>
                  <term> Negative  </term>
                  <description>
                    <see cref="F:System.Double.NaN" />
                  </description>
                </item>
                <item>
                  <term> Equals <see cref="F:System.Double.NaN" /></term>
                  <description>
                    <see cref="F:System.Double.NaN" />
                  </description>
                </item>
                <item>
                  <term> Equals <see cref="F:System.Double.PositiveInfinity" /></term>
                  <description>
                    <see cref="F:System.Double.PositiveInfinity" />
                  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cd9fa-788">사각형 영역의 제곱근 제곱 변의 길이 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-788">The square root of the area of a square represents the length of any side of the square.</span></span> <span data-ttu-id="cd9fa-789">다음 예제에서는 미국의 영역의 일부 도시를 표시 하 고 사각형으로 표시 된 경우 각 도시의 크기의 새를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-789">The following example displays the area of some cities in the United States and gives an impression of each city's size if it were represented by a square.</span></span>  
  
 [!code-csharp[System.Math.Sqrt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.sqrt/cs/sqrt1.cs#1)]
 [!code-vb[System.Math.Sqrt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.sqrt/vb/sqrt1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Pow(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static double Tan (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tan(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Tan(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tan(double a);" />
      <MemberSignature Language="F#" Value="static member Tan : double -&gt; double" Usage="System.Math.Tan a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="cd9fa-790">라디안 단위의 각도입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-790">An angle, measured in radians.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-791">지정된 각도의 탄젠트를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-791">Returns the tangent of the specified angle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-792">
            <paramref name="a" />의 접선입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-792">The tangent of <paramref name="a" />.</span>
          </span>
          <span data-ttu-id="cd9fa-793">
            <paramref name="a" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-793">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-794">각도 `a`, 라디안에서 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-794">The angle, `a`, must be in radians.</span></span> <span data-ttu-id="cd9fa-795">곱  <xref:System.Math.PI?displayProperty=nameWithType> /180 라디안으로 각도 변환 하기.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-795">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-796">다음 예제에서는 각도의 탄젠트를 계산 하 고 콘솔에 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-796">The following example demonstrates how to calculate the tangent of an angle and display it to the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static double Tanh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tanh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tanh(double value);" />
      <MemberSignature Language="F#" Value="static member Tanh : double -&gt; double" Usage="System.Math.Tanh value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="cd9fa-797">라디안 단위의 각도입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-797">An angle, measured in radians.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-798">지정된 각도의 하이퍼볼릭 탄젠트를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-798">Returns the hyperbolic tangent of the specified angle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-799">
            <paramref name="value" />의 쌍곡선 접선입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-799">The hyperbolic tangent of <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="cd9fa-800">
            <paramref name="value" />가 <see cref="F:System.Double.NegativeInfinity" />와 같으면 이 메서드는 -1을 반환하고</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-800">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, this method returns -1.</span>
          </span>
          <span data-ttu-id="cd9fa-801">값이 <see cref="F:System.Double.PositiveInfinity" />와 같으면 이 메서드는 1을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-801">If value is equal to <see cref="F:System.Double.PositiveInfinity" />, this method returns 1.</span>
          </span>
          <span data-ttu-id="cd9fa-802">
            <paramref name="value" />가 <see cref="F:System.Double.NaN" />과 같으면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-802">If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.NaN" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-803">각도 `value`, 라디안에서 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-803">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="cd9fa-804">곱  <xref:System.Math.PI?displayProperty=nameWithType> /180 라디안으로 각도 변환 하기.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-804">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-805">다음 예제에서는 <xref:System.Math.Tanh%2A> 하이퍼볼릭 탄젠트 선택한 값에 대 한 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-805">The following example uses <xref:System.Math.Tanh%2A> to evaluate certain hyperbolic tangent identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Tanh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Tanh/CPP/tanh.cpp#1)]
 [!code-csharp[System.Math.Tanh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Tanh/CS/tanh.cs#1)]
 [!code-vb[System.Math.Tanh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Tanh/VB/tanh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Truncate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="cd9fa-806">숫자의 정수 부분을 계산합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-806">Calculates the integral part of a number.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-807">숫자 0에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-807">The number is rounded to the nearest integer towards zero.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static decimal Truncate (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Truncate(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Truncate(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Truncate(System::Decimal d);" />
      <MemberSignature Language="F#" Value="static member Truncate : decimal -&gt; decimal" Usage="System.Math.Truncate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-808">잘라낼 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-808">A number to truncate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-809">지정된 10진수에서 정수 부분을 계산합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-809">Calculates the integral part of a specified decimal number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-810">
            <paramref name="d" />의 정수 부분으로, 소수 자릿수를 삭제한 후 남은 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-810">The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-811"><xref:System.Math.Truncate%2A> 반올림 `d` 를 0으로 가장 가까운 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-811"><xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-812">다음 예제에서는 합니다 <xref:System.Math.Truncate%28System.Decimal%29> 양수와 음수 모두 자를 메서드 <xref:System.Decimal> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-812">The following example calls the <xref:System.Math.Truncate%28System.Decimal%29> method to truncate both a positive and a negative <xref:System.Decimal> value.</span></span>  
  
 [!code-csharp[System.Math.Truncate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#2)]
 [!code-vb[System.Math.Truncate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static double Truncate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Truncate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Truncate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Truncate(double d);" />
      <MemberSignature Language="F#" Value="static member Truncate : double -&gt; double" Usage="System.Math.Truncate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="cd9fa-813">잘라낼 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-813">A number to truncate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="cd9fa-814">지정한 배정밀도 부동 소수점 숫자의 정수 부분을 계산합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-814">Calculates the integral part of a specified double-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="cd9fa-815">
            <paramref name="d" />의 정수 부분으로, 소수 자릿수를 삭제한 후 남은 숫자 또는 다음 테이블에 나열된 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-815">The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.</span>
          </span>
          <span data-ttu-id="cd9fa-816">
            <list type="table">
              <listheader>
                <term>
                  <paramref name="d" />
                </term>
                <description> 반환 값  </description>
              </listheader>
              <item>
                <term>
                  <see cref="F:System.Double.NaN" />
                </term>
                <description>
                  <see cref="F:System.Double.NaN" />
                </description>
              </item>
              <item>
                <term>
                  <see cref="F:System.Double.NegativeInfinity" />
                </term>
                <description>
                  <see cref="F:System.Double.NegativeInfinity" />
                </description>
              </item>
              <item>
                <term>
                  <see cref="F:System.Double.PositiveInfinity" />
                </term>
                <description>
                  <see cref="F:System.Double.PositiveInfinity" />
                </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="cd9fa-816">
              <list type="table">
                <listheader>
                  <term>
                    <paramref name="d" />
                  </term>
                  <description> Return value  </description>
                </listheader>
                <item>
                  <term>
                    <see cref="F:System.Double.NaN" />
                  </term>
                  <description>
                    <see cref="F:System.Double.NaN" />
                  </description>
                </item>
                <item>
                  <term>
                    <see cref="F:System.Double.NegativeInfinity" />
                  </term>
                  <description>
                    <see cref="F:System.Double.NegativeInfinity" />
                  </description>
                </item>
                <item>
                  <term>
                    <see cref="F:System.Double.PositiveInfinity" />
                  </term>
                  <description>
                    <see cref="F:System.Double.PositiveInfinity" />
                  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cd9fa-817"><xref:System.Math.Truncate%2A> 반올림 `d` 를 0으로 가장 가까운 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-817"><xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cd9fa-818">다음 예제에서는 합니다 <xref:System.Math.Truncate%28System.Double%29> 양수와 음수 모두 자를 메서드 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cd9fa-818">The following example calls the <xref:System.Math.Truncate%28System.Double%29> method to truncate both a positive and a negative <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Math.Truncate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#1)]
 [!code-vb[System.Math.Truncate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
      </Docs>
    </Member>
  </Members>
</Type>