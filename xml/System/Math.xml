<Type Name="Math" FullName="System.Math">
  <TypeSignature Language="C#" Value="public static class Math" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Math extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Math" />
  <TypeSignature Language="VB.NET" Value="Public Class Math" />
  <TypeSignature Language="C++ CLI" Value="public ref class Math abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="686b2-101">삼각, 로그 및 기타 일반 수학 함수에 대한 상수 및 정적 메서드를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-101">Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-102">다음 예제에서는에서 몇 가지 수치 연산 및 삼각 함수는 <xref:System.Math> 사다리꼴의 내부 각도 계산 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-102">The following example uses several mathematical and trigonometric functions from the <xref:System.Math> class to calculate the inner angles of a trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Abs">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="686b2-103">지정된 숫자의 절대 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-103">Returns the absolute value of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static decimal Abs (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Abs(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Abs(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-104"><see cref="F:System.Decimal.MinValue" />보다 크거나 같지만 <see cref="F:System.Decimal.MaxValue" />보다 작거나 같은 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-104">A number that is greater than or equal to <see cref="F:System.Decimal.MinValue" />, but less than or equal to <see cref="F:System.Decimal.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="686b2-105"><see cref="T:System.Decimal" /> 숫자의 절대값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-105">Returns the absolute value of a <see cref="T:System.Decimal" /> number.</span></span></summary>
        <returns><span data-ttu-id="686b2-106">0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" /> 범위의 10진수 x입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-106">A decimal number, x, such that 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-107">절대값은 <xref:System.Decimal> 은 값은 부호가 없는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-107">The absolute value of a <xref:System.Decimal> is its numeric value without its sign.</span></span> <span data-ttu-id="686b2-108">예를 들어 1.2와-1.2의 절대값은 1.2입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-108">For example, the absolute value of both 1.2 and -1.2 is 1.2.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-109">다음 예제에서는 <xref:System.Math.Abs%28System.Decimal%29> 의 숫자의 절대 값을 가져오는 메서드를 <xref:System.Decimal> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-109">The following example uses the <xref:System.Math.Abs%28System.Decimal%29> method to get the absolute value of a number of <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/Abs1.cs#1)]
 [!code-vb[System.Math.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/Abs1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static double Abs (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Abs(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Abs(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-110"><see cref="F:System.Double.MinValue" />보다 크거나 같지만 <see cref="F:System.Double.MaxValue" />보다 작거나 같은 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-110">A number that is greater than or equal to <see cref="F:System.Double.MinValue" />, but less than or equal to <see cref="F:System.Double.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="686b2-111">배정밀도 부동 소수점 수의 절대 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-111">Returns the absolute value of a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="686b2-112">0 ≤ x ≤<see cref="F:System.Double.MaxValue" /> 범위의 배정밀도 부동 소수점 숫자 x입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-112">A double-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-113">절대값은 <xref:System.Double> 은 값은 부호가 없는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-113">The absolute value of a <xref:System.Double> is its numeric value without its sign.</span></span> <span data-ttu-id="686b2-114">예를 들어 모두 1.2 e 03 및-1.2 e 03의 절대값은 1.2 e 03 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-114">For example, the absolute value of both 1.2e03 and -1.2e03 is 1.2e03.</span></span>  
  
 <span data-ttu-id="686b2-115">경우 `value` 같으면 <xref:System.Double.NegativeInfinity> 또는 <xref:System.Double.PositiveInfinity>, 반환 값은 <xref:System.Double.PositiveInfinity>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-115">If `value` is equal to <xref:System.Double.NegativeInfinity> or <xref:System.Double.PositiveInfinity>, the return value is <xref:System.Double.PositiveInfinity>.</span></span> <span data-ttu-id="686b2-116">경우 `value` 같으면 <xref:System.Double.NaN>, 반환 값은 <xref:System.Double.NaN>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-116">If `value` is equal to <xref:System.Double.NaN>, the return value is <xref:System.Double.NaN>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-117">다음 예제에서는 <xref:System.Math.Abs%28System.Double%29> 의 숫자의 절대 값을 가져오는 메서드를 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-117">The following example uses the <xref:System.Math.Abs%28System.Double%29> method to get the absolute value of a number of <xref:System.Double> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs2.cs#2)]
 [!code-vb[System.Math.Abs#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static short Abs (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Abs(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Abs(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-118"><see cref="F:System.Int16.MinValue" />보다 크지만 <see cref="F:System.Int16.MaxValue" />보다 작거나 같은 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-118">A number that is greater than <see cref="F:System.Int16.MinValue" />, but less than or equal to <see cref="F:System.Int16.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="686b2-119">16비트 부호 있는 정수의 절대 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-119">Returns the absolute value of a 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="686b2-120">0 ≤ x ≤<see cref="F:System.Int16.MaxValue" /> 범위의 16비트 부호 있는 정수 x입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-120">A 16-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-121">절대값은 <xref:System.Int16> 은 값은 부호가 없는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-121">The absolute value of an <xref:System.Int16> is its numeric value without its sign.</span></span> <span data-ttu-id="686b2-122">예를 들어,-123 및 123의 절대 값은 123입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-122">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-123">다음 예제에서는 <xref:System.Math.Abs%28System.Int16%29> 의 숫자의 절대 값을 가져오는 메서드를 <xref:System.Int16> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-123">The following example uses the <xref:System.Math.Abs%28System.Int16%29> method to get the absolute value of a number of <xref:System.Int16> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs3.cs#3)]
 [!code-vb[System.Math.Abs#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="686b2-124"><paramref name="value" />가 <see cref="F:System.Int16.MinValue" />와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-124"><paramref name="value" /> equals <see cref="F:System.Int16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static int Abs (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Abs(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Abs(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-125"><see cref="F:System.Int32.MinValue" />보다 크지만 <see cref="F:System.Int32.MaxValue" />보다 작거나 같은 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-125">A number that is greater than <see cref="F:System.Int32.MinValue" />, but less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="686b2-126">32비트 부호 있는 정수의 절대 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-126">Returns the absolute value of a 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="686b2-127">0 ≤ x ≤<see cref="F:System.Int32.MaxValue" /> 범위의 32비트 부호 있는 정수 x입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-127">A 32-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-128">절대값은 <xref:System.Int32> 은 값은 부호가 없는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-128">The absolute value of an <xref:System.Int32> is its numeric value without its sign.</span></span> <span data-ttu-id="686b2-129">예를 들어,-123 및 123의 절대 값은 123입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-129">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-130">다음 예제에서는 <xref:System.Math.Abs%28System.Int32%29> 의 숫자의 절대 값을 가져오는 메서드를 <xref:System.Int32> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-130">The following example uses the <xref:System.Math.Abs%28System.Int32%29> method to get the absolute value of a number of <xref:System.Int32> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs4.cs#4)]
 [!code-vb[System.Math.Abs#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="686b2-131"><paramref name="value" />가 <see cref="F:System.Int32.MinValue" />와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-131"><paramref name="value" /> equals <see cref="F:System.Int32.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static long Abs (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Abs(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Abs(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-132"><see cref="F:System.Int64.MinValue" />보다 크지만 <see cref="F:System.Int64.MaxValue" />보다 작거나 같은 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-132">A number that is greater than <see cref="F:System.Int64.MinValue" />, but less than or equal to <see cref="F:System.Int64.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="686b2-133">64비트 부호 있는 정수의 절대 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-133">Returns the absolute value of a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="686b2-134">0 ≤ x ≤<see cref="F:System.Int64.MaxValue" /> 범위의 64비트 부호 있는 정수 x입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-134">A 64-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-135">절대값은 <xref:System.Int64> 은 값은 부호가 없는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-135">The absolute value of an <xref:System.Int64> is its numeric value without its sign.</span></span> <span data-ttu-id="686b2-136">예를 들어,-123 및 123의 절대 값은 123입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-136">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-137">다음 예제에서는 <xref:System.Math.Abs%28System.Int64%29> 의 숫자의 절대 값을 가져오는 메서드를 <xref:System.Int64> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-137">The following example uses the <xref:System.Math.Abs%28System.Int64%29> method to get the absolute value of a number of <xref:System.Int64> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs5.cs#5)]
 [!code-vb[System.Math.Abs#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="686b2-138"><paramref name="value" />가 <see cref="F:System.Int64.MinValue" />와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-138"><paramref name="value" /> equals <see cref="F:System.Int64.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static sbyte Abs (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Abs(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Abs(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-139"><see cref="F:System.SByte.MinValue" />보다 크지만 <see cref="F:System.SByte.MaxValue" />보다 작거나 같은 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-139">A number that is greater than <see cref="F:System.SByte.MinValue" />, but less than or equal to <see cref="F:System.SByte.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="686b2-140">8비트 부호 있는 정수의 절대 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-140">Returns the absolute value of an 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="686b2-141">0 ≤ x ≤<see cref="F:System.SByte.MaxValue" /> 범위의 8비트 부호 있는 정수 x입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-141">An 8-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-142">부호 있는 바이트의 절대 값이 값은 부호가 없는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-142">The absolute value of a signed byte is its numeric value without its sign.</span></span> <span data-ttu-id="686b2-143">예를 들어 12와-12의 절대 값은 12입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-143">For example, the absolute value of both 12 and -12 is 12.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-144">다음 예제에서는 <xref:System.Math.Abs%28System.SByte%29> 의 숫자의 절대 값을 가져오는 메서드를 <xref:System.SByte> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-144">The following example uses the <xref:System.Math.Abs%28System.SByte%29> method to get the absolute value of a number of <xref:System.SByte> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs6.cs#6)]
 [!code-vb[System.Math.Abs#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="686b2-145"><paramref name="value" />가 <see cref="F:System.SByte.MinValue" />와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-145"><paramref name="value" /> equals <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static float Abs (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Abs(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Abs(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-146"><see cref="F:System.Single.MinValue" />보다 크거나 같지만 <see cref="F:System.Single.MaxValue" />보다 작거나 같은 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-146">A number that is greater than or equal to <see cref="F:System.Single.MinValue" />, but less than or equal to <see cref="F:System.Single.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="686b2-147">단정밀도 부동 소수점 수의 절대 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-147">Returns the absolute value of a single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="686b2-148">0 ≤ x ≤<see cref="F:System.Single.MaxValue" /> 범위의 단정밀도 부동 소수점 숫자 x입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-148">A single-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-149">절대값은 <xref:System.Single> 은 값은 부호가 없는 숫자 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-149">The absolute value of a <xref:System.Single> is its numeric value without its sign.</span></span> <span data-ttu-id="686b2-150">예를 들어 두 1.2 e의 절대 값-03과-1.2 e 03은 1.2 e 03 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-150">For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.</span></span>  
  
 <span data-ttu-id="686b2-151">경우 `value` 같으면 <xref:System.Single.NegativeInfinity> 또는 <xref:System.Single.PositiveInfinity>, 반환 값은 <xref:System.Single.PositiveInfinity>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-151">If `value` is equal to <xref:System.Single.NegativeInfinity> or <xref:System.Single.PositiveInfinity>, the return value is <xref:System.Single.PositiveInfinity>.</span></span> <span data-ttu-id="686b2-152">경우 `value` 같으면 <xref:System.Single.NaN>, 반환 값은 <xref:System.Single.NaN>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-152">If `value` is equal to <xref:System.Single.NaN>, the return value is <xref:System.Single.NaN>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-153">다음 예제에서는 <xref:System.Math.Abs%28System.Single%29> 의 숫자의 절대 값을 가져오는 메서드를 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-153">The following example uses the <xref:System.Math.Abs%28System.Single%29> method to get the absolute value of a number of <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs7.cs#7)]
 [!code-vb[System.Math.Abs#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs7.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static double Acos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Acos(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Acos(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-154">코사인을 나타내는 숫자입니다. <c>d</c>는 -1보다 크거나 같지만 1보다 작거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-154">A number representing a cosine, where <c>d</c> must be greater than or equal to -1, but less than or equal to 1.</span></span></param>
        <summary><span data-ttu-id="686b2-155">코사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-155">Returns the angle whose cosine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="686b2-156">0 ≤θ≤π 범위의 각도 θ(라디안)입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-156">An angle, θ, measured in radians, such that 0 ≤θ≤π</span></span>  
  
 <span data-ttu-id="686b2-157">또는</span><span class="sxs-lookup"><span data-stu-id="686b2-157">-or-</span></span>  
  
 <span data-ttu-id="686b2-158"><paramref name="d" /> &lt; -1이거나 <paramref name="d" /> &gt; 1이거나 <paramref name="d" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-158"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-159">반환 값에 180 곱하기 /<xref:System.Math.PI?displayProperty=nameWithType> 을 라디안으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-159">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-160">다음 예제에서는 <xref:System.Math.Acos%2A> 메서드를 지정된 된 사다리꼴의 내부 각도 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-160">The following example uses the <xref:System.Math.Acos%2A> method to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static double Asin (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Asin(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Asin(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-161">사인을 나타내는 숫자입니다. <c>d</c>는 -1보다 크거나 같지만 1보다 작거나 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-161">A number representing a sine, where <c>d</c> must be greater than or equal to -1, but less than or equal to 1.</span></span></param>
        <summary><span data-ttu-id="686b2-162">사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-162">Returns the angle whose sine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="686b2-163">-π/2 ≤θ≤π/2 범위의 각도 θ(라디안)입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-163">An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2</span></span>  
  
 <span data-ttu-id="686b2-164">또는</span><span class="sxs-lookup"><span data-stu-id="686b2-164">-or-</span></span>  
  
 <span data-ttu-id="686b2-165"><paramref name="d" /> &lt; -1이거나 <paramref name="d" /> &gt; 1이거나 <paramref name="d" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-165"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-166">양의 반환 값; x 축에서 시계 반대 방향으로 각도 나타내는 음수 반환 값은 시계 방향으로 회전 각도를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-166">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="686b2-167">반환 값에 180 곱하기 /<xref:System.Math.PI?displayProperty=nameWithType> 을 라디안으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-167">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-168">다음 예제에서는 <xref:System.Math.Asin%2A> 지정된 사다리꼴의 내부 각도의 계산을 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-168">The following example uses <xref:System.Math.Asin%2A> to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static double Atan (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atan(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-169">접선을 나타내는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-169">A number representing a tangent.</span></span></param>
        <summary><span data-ttu-id="686b2-170">탄젠트를 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-170">Returns the angle whose tangent is the specified number.</span></span></summary>
        <returns><span data-ttu-id="686b2-171">-π/2 ≤θ≤π/2 범위의 각도 θ(라디안)입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-171">An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.</span></span>  
  
 <span data-ttu-id="686b2-172">또는</span><span class="sxs-lookup"><span data-stu-id="686b2-172">-or-</span></span>  
  
 <span data-ttu-id="686b2-173"><paramref name="d" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />이고, <paramref name="d" />가 <see cref="F:System.Double.NegativeInfinity" />와 같으면 배정밀도로 반올림된 -π/2(-1.5707963267949)이고, <paramref name="d" />가 <see cref="F:System.Double.PositiveInfinity" />와 같으면 배정밀도로 반올림된 π/2(1.5707963267949)입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-173"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> equals <see cref="F:System.Double.NaN" />, -π/2 rounded to double precision (-1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, or π/2 rounded to double precision (1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.PositiveInfinity" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-174">양의 반환 값; x 축에서 시계 반대 방향으로 각도 나타내는 음수 반환 값은 시계 방향으로 회전 각도를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-174">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="686b2-175">반환 값에 180 곱하기 /<xref:System.Math.PI?displayProperty=nameWithType> 을 라디안으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-175">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-176">다음 예제에서는 콘솔에 표시 하는 값의 아크탄젠트를 계산 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-176">The following example demonstrates how to calculate the arctangent of a value and display it to the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public static double Atan2 (double y, double x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan2(float64 y, float64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2 (y As Double, x As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan2(double y, double x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="y"><span data-ttu-id="686b2-177">점의 y 좌표입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-177">The y coordinate of a point.</span></span></param>
        <param name="x"><span data-ttu-id="686b2-178">점의 x 좌표입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-178">The x coordinate of a point.</span></span></param>
        <summary><span data-ttu-id="686b2-179">탄젠트를 적용했을 때 지정된 두 숫자의 몫이 나오는 각도를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-179">Returns the angle whose tangent is the quotient of two specified numbers.</span></span></summary>
        <returns><span data-ttu-id="686b2-180">-π≤θ≤π 범위의 각도 θ(라디안) 및 tan(θ) = <paramref name="y" /> / <paramref name="x" />입니다(여기서 <paramref name="x" />, <paramref name="y" />는 데카르트 평면 상의 지점임).</span><span class="sxs-lookup"><span data-stu-id="686b2-180">An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <paramref name="y" /> / <paramref name="x" />, where (<paramref name="x" />, <paramref name="y" />) is a point in the Cartesian plane.</span></span> <span data-ttu-id="686b2-181">다음 사항이 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-181">Observe the following:</span></span>  
  
-   <span data-ttu-id="686b2-182">(<paramref name="x" />, <paramref name="y" />)가 1사분면 안에 있으면 1, 0 &lt; θ &lt; π/2입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-182">For (<paramref name="x" />, <paramref name="y" />) in quadrant 1, 0 &lt; θ &lt; π/2.</span></span>  
  
-   <span data-ttu-id="686b2-183">(<paramref name="x" />, <paramref name="y" />)가 2사분면 안에 있으면 2, π/2 &lt; θ≤π입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-183">For (<paramref name="x" />, <paramref name="y" />) in quadrant 2, π/2 &lt; θ≤π.</span></span>  
  
-   <span data-ttu-id="686b2-184">(<paramref name="x" />, <paramref name="y" />)가 3사분면 안에 있으면 3, -π &lt; θ &lt; -π/2입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-184">For (<paramref name="x" />, <paramref name="y" />) in quadrant 3, -π &lt; θ &lt; -π/2.</span></span>  
  
-   <span data-ttu-id="686b2-185">(<paramref name="x" />, <paramref name="y" />)가 4사분면 안에 있으면 -π/2 &lt; θ &lt; 0입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-185">For (<paramref name="x" />, <paramref name="y" />) in quadrant 4, -π/2 &lt; θ &lt; 0.</span></span>  
  
 <span data-ttu-id="686b2-186">점이 사분면의 경계에 있는 경우 반환 값은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-186">For points on the boundaries of the quadrants, the return value is the following:</span></span>  
  
-   <span data-ttu-id="686b2-187">y가 0이고 x가 음수가 아니면 θ = 0입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-187">If y is 0 and x is not negative, θ = 0.</span></span>  
  
-   <span data-ttu-id="686b2-188">y가 0이고 x가 음수이면 θ = π입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-188">If y is 0 and x is negative, θ = π.</span></span>  
  
-   <span data-ttu-id="686b2-189">y가 양수이고 x가 0이면 θ = π/2입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-189">If y is positive and x is 0, θ = π/2.</span></span>  
  
-   <span data-ttu-id="686b2-190">y가 음수이고 x가 0이면 θ = -π/2입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-190">If y is negative and x is 0, θ = -π/2.</span></span>  
  
-   <span data-ttu-id="686b2-191">y가 0이고 x가 0이면 θ = 0입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-191">If y is 0 and x is 0, θ = 0.</span></span>  
  
 <span data-ttu-id="686b2-192"><paramref name="x" /> 또는 <paramref name="y" />가 <see cref="F:System.Double.NaN" />이거나, <paramref name="x" /> 및 <paramref name="y" />가 <see cref="F:System.Double.PositiveInfinity" /> 또는 <see cref="F:System.Double.NegativeInfinity" />이면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-192">If <paramref name="x" /> or <paramref name="y" /> is <see cref="F:System.Double.NaN" />, or if <paramref name="x" /> and <paramref name="y" /> are either <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />, the method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-193">반환 값에는 x 축에 서 벡터 (0, 0), 원점에서 시작 및 종료 지점, (x, y)에서 만들어진는 데카르트 평면에서 단위의 각도입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-193">The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-194">다음 예제에서는 벡터와 각도의 아크탄젠트를 계산 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-194">The following example demonstrates how to calculate the arctangent of an angle and a vector.</span></span> <span data-ttu-id="686b2-195">결과 값은 콘솔에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-195">The resulting value is displayed in the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BigMul">
      <MemberSignature Language="C#" Value="public static long BigMul (int a, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 BigMul(int32 a, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.BigMul(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BigMul (a As Integer, b As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long BigMul(int a, int b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="686b2-196">곱할 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-196">The first number to multiply.</span></span></param>
        <param name="b"><span data-ttu-id="686b2-197">곱할 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-197">The second number to multiply.</span></span></param>
        <summary><span data-ttu-id="686b2-198">32비트 숫자 두 개를 곱합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-198">Produces the full product of two 32-bit numbers.</span></span></summary>
        <returns><span data-ttu-id="686b2-199">지정된 수의 제품을 포함하는 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-199">The number containing the product of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-200">다음 예제에서는 <xref:System.Math.BigMul%2A> 메서드를 두 개의 정수 값의 곱을 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-200">The following example demonstrates the use of the <xref:System.Math.BigMul%2A> method to calculate the product of two integer values.</span></span>  
  
 [!code-cpp[math.bigmul#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.bigmul/CPP/bigmul.cpp#1)]
 [!code-csharp[math.bigmul#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.bigmul/CS/bigmul.cs#1)]
 [!code-vb[math.bigmul#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.bigmul/VB/bigmul.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Ceiling">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="686b2-201">지정된 수보다 크거나 같은 최소 정수 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-201">Returns the smallest integral value greater than or equal to the specified number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-202">이 메서드의 동작은 IEEE 표준 754, 섹션 4 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-202">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="686b2-203">이러한 종류의 반올림이 양의 무한대로 반올림 라고도 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-203">This kind of rounding is sometimes called rounding toward positive infinity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static decimal Ceiling (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Ceiling(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Ceiling(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Ceiling(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-204">10진수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-204">A decimal number.</span></span></param>
        <summary><span data-ttu-id="686b2-205">지정된 10진수보다 크거나 같은 최소 정수 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-205">Returns the smallest integral value that is greater than or equal to the specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="686b2-206"><paramref name="d" />보다 크거나 같은 최소 정수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-206">The smallest integral value that is greater than or equal to <paramref name="d" />.</span></span> <span data-ttu-id="686b2-207">이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Decimal" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-207">Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-208">이 메서드의 동작은 IEEE 표준 754, 섹션 4 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-208">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="686b2-209">이러한 종류의 반올림이 양의 무한대로 반올림 라고도 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-209">This kind of rounding is sometimes called rounding toward positive infinity.</span></span> <span data-ttu-id="686b2-210">즉, 경우 `d` 가 양수 이면 손해 소수 부분이 발생의 존재 여부 `d` 다음 가장 큰 정수로 내림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-210">In other words, if `d` is positive, the presence of any fractional component causes `d` to be rounded to the next highest integer.</span></span> <span data-ttu-id="686b2-211">경우 `d` 가 음수 이면 반올림 작업의 결과로의 소수 부분이 `d` 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-211">If `d` is negative, the rounding operation causes any fractional component of `d` to be discarded.</span></span> <span data-ttu-id="686b2-212">이 메서드의 작업에서 다른는 <xref:System.Math.Floor%28System.Decimal%29> 메서드를 음의 무한대로 반올림을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-212">The operation of this method differs from the <xref:System.Math.Floor%28System.Decimal%29> method, which supports rounding toward negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-213">다음 예제에서는 <xref:System.Math.Ceiling%28System.Decimal%29?displayProperty=nameWithType> 메서드를 사용할 때의 차이점은 <xref:System.Math.Floor%28System.Decimal%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="686b2-213">The following example illustrates the <xref:System.Math.Ceiling%28System.Decimal%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Floor%28System.Decimal%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]
 [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static double Ceiling (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Ceiling(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Ceiling(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Ceiling(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="686b2-214">배정밀도 부동 소수점 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-214">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="686b2-215">지정된 배정밀도 부동 소수점 숫자보다 크거나 같은 최소 정수 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-215">Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="686b2-216"><paramref name="a" />보다 크거나 같은 최소 정수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-216">The smallest integral value that is greater than or equal to <paramref name="a" />.</span></span> <span data-ttu-id="686b2-217"><paramref name="a" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면, 해당 값이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-217">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span> <span data-ttu-id="686b2-218">이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Double" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-218">Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-219">이 메서드의 동작은 IEEE 표준 754, 섹션 4 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-219">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="686b2-220">이러한 종류의 반올림이 양의 무한대로 반올림 라고도 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-220">This kind of rounding is sometimes called rounding toward positive infinity.</span></span> <span data-ttu-id="686b2-221">즉, 경우 `a` 가 양수 이면 손해 소수 부분이 발생의 존재 여부 `a` 다음 가장 큰 정수로 내림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-221">In other words, if `a` is positive, the presence of any fractional component causes `a` to be rounded to the next highest integer.</span></span> <span data-ttu-id="686b2-222">경우 `a` 가 음수 이면 반올림 작업의 결과로의 소수 부분이 `a` 삭제 됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-222">If `a` is negative, the rounding operation causes any fractional component of `a` to be discarded.</span></span> <span data-ttu-id="686b2-223">이 메서드의 작업에서 다른는 <xref:System.Math.Floor%28System.Double%29> 메서드를 음의 무한대로 반올림을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-223">The operation of this method differs from the <xref:System.Math.Floor%28System.Double%29> method, which supports rounding toward negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-224">다음 예제에서는 <xref:System.Math.Ceiling%28System.Double%29?displayProperty=nameWithType> 메서드를 사용할 때의 차이점은 <xref:System.Math.Floor%28System.Double%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="686b2-224">The following example illustrates the <xref:System.Math.Ceiling%28System.Double%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Floor%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]
 [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static byte Clamp (byte value, byte min, byte max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Clamp(unsigned int8 value, unsigned int8 min, unsigned int8 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Byte, min As Byte, max As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Clamp(System::Byte value, System::Byte min, System::Byte max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="min" Type="System.Byte" />
        <Parameter Name="max" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static decimal Clamp (decimal value, decimal min, decimal max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Clamp(valuetype System.Decimal value, valuetype System.Decimal min, valuetype System.Decimal max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Decimal, min As Decimal, max As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Clamp(System::Decimal value, System::Decimal min, System::Decimal max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="min" Type="System.Decimal" />
        <Parameter Name="max" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static double Clamp (double value, double min, double max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Clamp(float64 value, float64 min, float64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Double, min As Double, max As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Clamp(double value, double min, double max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="min" Type="System.Double" />
        <Parameter Name="max" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static short Clamp (short value, short min, short max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Clamp(int16 value, int16 min, int16 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Short, min As Short, max As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Clamp(short value, short min, short max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="min" Type="System.Int16" />
        <Parameter Name="max" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static int Clamp (int value, int min, int max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Clamp(int32 value, int32 min, int32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Integer, min As Integer, max As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Clamp(int value, int min, int max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="max" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static long Clamp (long value, long min, long max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Clamp(int64 value, int64 min, int64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Long, min As Long, max As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Clamp(long value, long min, long max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="min" Type="System.Int64" />
        <Parameter Name="max" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static sbyte Clamp (sbyte value, sbyte min, sbyte max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Clamp(int8 value, int8 min, int8 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As SByte, min As SByte, max As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Clamp(System::SByte value, System::SByte min, System::SByte max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="min" Type="System.SByte" />
        <Parameter Name="max" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static float Clamp (float value, float min, float max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Clamp(float32 value, float32 min, float32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Single, min As Single, max As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Clamp(float value, float min, float max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="min" Type="System.Single" />
        <Parameter Name="max" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static ushort Clamp (ushort value, ushort min, ushort max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Clamp(unsigned int16 value, unsigned int16 min, unsigned int16 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As UShort, min As UShort, max As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Clamp(System::UInt16 value, System::UInt16 min, System::UInt16 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="min" Type="System.UInt16" />
        <Parameter Name="max" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static uint Clamp (uint value, uint min, uint max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Clamp(unsigned int32 value, unsigned int32 min, unsigned int32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As UInteger, min As UInteger, max As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Clamp(System::UInt32 value, System::UInt32 min, System::UInt32 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="min" Type="System.UInt32" />
        <Parameter Name="max" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static ulong Clamp (ulong value, ulong min, ulong max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Clamp(unsigned int64 value, unsigned int64 min, unsigned int64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As ULong, min As ULong, max As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Clamp(System::UInt64 value, System::UInt64 min, System::UInt64 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="min" Type="System.UInt64" />
        <Parameter Name="max" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static double Cos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cos(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cos(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-225">라디안 단위의 각도입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-225">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="686b2-226">지정된 각도의 코사인을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-226">Returns the cosine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="686b2-227"><paramref name="d" />의 코사인입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-227">The cosine of <paramref name="d" />.</span></span> <span data-ttu-id="686b2-228"><paramref name="d" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-228">If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-229">각도 `d`, 라디안에서 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-229">The angle, `d`, must be in radians.</span></span> <span data-ttu-id="686b2-230">곱합니다  <xref:System.Math.PI?displayProperty=nameWithType> /180을 각도를 라디안으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-230">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 <span data-ttu-id="686b2-231">허용 되는 값의 `d` 약-9223372036854775295에서 약 9223372036854775295 까지입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-231">Acceptable values of `d` range from approximately -9223372036854775295 to approximately 9223372036854775295.</span></span> <span data-ttu-id="686b2-232">이 범위를 벗어나는 값에 대 한는 <xref:System.Math.Cos%2A> 메서드 반환 `d` 예외를 throw 하는 대신 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-232">For values outside this range, the <xref:System.Math.Cos%2A> method returns `d` unchanged rather than throwing an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-233">다음 예제에서는 <xref:System.Math.Cos%2A> 선택 된 각도 대 한 삼각 함수를 평가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-233">The following example uses <xref:System.Math.Cos%2A> to evaluate certain trigonometric identities for selected angles.</span></span>  
  
 [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]
 [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]
 [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static double Cosh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cosh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cosh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-234">라디안 단위의 각도입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-234">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="686b2-235">지정된 각도의 하이퍼볼릭 코사인을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-235">Returns the hyperbolic cosine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="686b2-236"><paramref name="value" />의 쌍곡선 코사인입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-236">The hyperbolic cosine of <paramref name="value" />.</span></span> <span data-ttu-id="686b2-237"><paramref name="value" />가 <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면 <see cref="F:System.Double.PositiveInfinity" />가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-237">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> is returned.</span></span> <span data-ttu-id="686b2-238"><paramref name="value" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-238">If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-239">각도 `value`, 라디안에서 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-239">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="686b2-240">곱합니다  <xref:System.Math.PI?displayProperty=nameWithType> /180을 각도를 라디안으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-240">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-241">다음 예제에서는 <xref:System.Math.Cosh%2A> 선택한 값에 대 한 하이퍼볼릭 평가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-241">The following example uses <xref:System.Math.Cosh%2A> to evaluate certain hyperbolic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]
 [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]
 [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DivRem">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="686b2-242">두 수의 몫을 계산하고 나머지를 출력 매개 변수로 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-242">Calculates the quotient of two numbers and also returns the remainder in an output parameter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static int DivRem (int a, int b, out int result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DivRem(int32 a, int32 b, [out] int32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (a As Integer, b As Integer, ByRef result As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DivRem(int a, int b, [Runtime::InteropServices::Out] int % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
        <Parameter Name="result" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="686b2-243">피제수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-243">The dividend.</span></span></param>
        <param name="b"><span data-ttu-id="686b2-244">제수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-244">The divisor.</span></span></param>
        <param name="result"><span data-ttu-id="686b2-245">나머지입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-245">The remainder.</span></span></param>
        <summary><span data-ttu-id="686b2-246">부호 있는 두 32비트 정수의 몫을 계산하고 나머지를 출력 매개 변수로 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-246">Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="686b2-247">지정된 수의 몫입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-247">The quotient of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-248">모듈러스 연산에 사용 하 여 나머지를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-248">The remainder is calculated by using the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-249">다음 예제는 <xref:System.Math.DivRem%28System.Int32%2CSystem.Int32%2CSystem.Int32%40%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="686b2-249">The following example demonstrates the <xref:System.Math.DivRem%28System.Int32%2CSystem.Int32%2CSystem.Int32%40%29> method.</span></span>  
  
 [!code-csharp[System.Math.DivRem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem1.cs#1)]
 [!code-vb[System.Math.DivRem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="686b2-250"><paramref name="b" />가 0입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-250"><paramref name="b" /> is zero.</span></span></exception>
        <altmember cref="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static long DivRem (long a, long b, out long result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 DivRem(int64 a, int64 b, [out] int64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (a As Long, b As Long, ByRef result As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long DivRem(long a, long b, [Runtime::InteropServices::Out] long % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
        <Parameter Name="b" Type="System.Int64" />
        <Parameter Name="result" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="686b2-251">피제수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-251">The dividend.</span></span></param>
        <param name="b"><span data-ttu-id="686b2-252">제수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-252">The divisor.</span></span></param>
        <param name="result"><span data-ttu-id="686b2-253">나머지입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-253">The remainder.</span></span></param>
        <summary><span data-ttu-id="686b2-254">부호 있는 두 64비트 정수의 몫을 계산하고 나머지를 출력 매개 변수로 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-254">Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="686b2-255">지정된 수의 몫입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-255">The quotient of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-256">모듈러스 연산에 사용 하 여 나머지를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-256">The remainder is calculated by using the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-257">다음 예제는 <xref:System.Math.DivRem%28System.Int64%2CSystem.Int64%2CSystem.Int64%40%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="686b2-257">The following example demonstrates the <xref:System.Math.DivRem%28System.Int64%2CSystem.Int64%2CSystem.Int64%40%29> method.</span></span>  
  
 [!code-csharp[System.Math.DivRem#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem2.cs#2)]
 [!code-vb[System.Math.DivRem#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="686b2-258"><paramref name="b" />가 0입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-258"><paramref name="b" /> is zero.</span></span></exception>
        <altmember cref="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="E">
      <MemberSignature Language="C#" Value="public const double E = 2.71828182845905;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 E = (2.71828182845905)" />
      <MemberSignature Language="DocId" Value="F:System.Math.E" />
      <MemberSignature Language="VB.NET" Value="Public Const E As Double  = 2.71828182845905" />
      <MemberSignature Language="C++ CLI" Value="public: double E = 2.71828182845905;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>2.71828182845905</MemberValue>
      <Docs>
        <summary><span data-ttu-id="686b2-259">상수, <see langword="e" />로 지정된 자연 로그의 밑을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-259">Represents the natural logarithmic base, specified by the constant, <see langword="e" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-260">이 필드의 값은 2.7182818284590452354입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-260">The value of this field is 2.7182818284590452354.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-261">다음 예제에서는 비교 <xref:System.Math.E> 전원 계열에서 계산 된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-261">The following example compares <xref:System.Math.E> with the value calculated from a power series.</span></span>  
  
 [!code-cpp[System.Math.E#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.E/CPP/efield.cpp#1)]
 [!code-csharp[System.Math.E#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.E/CS/efield.cs#1)]
 [!code-vb[System.Math.E#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.E/VB/efield.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static double Exp (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Exp(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Exp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Exp(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-262">거듭제곱을 지정하는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-262">A number specifying a power.</span></span></param>
        <summary><span data-ttu-id="686b2-263"><see langword="e" />를 지정된 수만큼 거듭제곱하여 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-263">Returns <see langword="e" /> raised to the specified power.</span></span></summary>
        <returns><span data-ttu-id="686b2-264"><see langword="e" />의 <paramref name="d" />승입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-264">The number <see langword="e" /> raised to the power <paramref name="d" />.</span></span> <span data-ttu-id="686b2-265"><paramref name="d" />가 <see cref="F:System.Double.NaN" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면, 해당 값이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-265">If <paramref name="d" /> equals <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span> <span data-ttu-id="686b2-266"><paramref name="d" />가 <see cref="F:System.Double.NegativeInfinity" />와 같으면 0이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-266">If <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, 0 is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-267">`e` 값은 약 2.71828 수학 상수가입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-267">`e` is a mathematical constant whose value is approximately 2.71828.</span></span>  
  
 <span data-ttu-id="686b2-268">사용 된 <xref:System.Math.Pow%2A> 다른 밑의 거듭제곱을 계산 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="686b2-268">Use the <xref:System.Math.Pow%2A> method to calculate powers of other bases.</span></span>  
  
 <span data-ttu-id="686b2-269"><xref:System.Math.Exp%2A> 역함수 값은 <xref:System.Math.Log%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-269"><xref:System.Math.Exp%2A> is the inverse of <xref:System.Math.Log%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-270">다음 예제에서는 <xref:System.Math.Exp%2A> 에 선택한 값에 대 한 지 수 및 로그 함수를 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-270">The following example uses <xref:System.Math.Exp%2A> to evaluate certain exponential and logarithmic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Exp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Exp/CPP/exp.cpp#1)]
 [!code-csharp[System.Math.Exp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Exp/CS/exp.cs#1)]
 [!code-vb[System.Math.Exp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Exp/VB/exp.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Math.E" />
        <altmember cref="M:System.Math.Pow(System.Double,System.Double)" />
        <altmember cref="M:System.Math.Log(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Floor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="686b2-271">지정된 숫자보다 작거나 같은 최대 정수 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-271">Returns the largest integral value less than or equal to the specified number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-272">이 메서드의 동작은 IEEE 표준 754, 섹션 4 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-272">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="686b2-273">이러한 종류의 반올림이 음의 무한대로 반올림 라고도 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-273">This kind of rounding is sometimes called rounding toward negative infinity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static decimal Floor (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Floor(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Floor(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Floor(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-274">10진수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-274">A decimal number.</span></span></param>
        <summary><span data-ttu-id="686b2-275">지정된 10진수보다 작거나 같은 최대 정수 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-275">Returns the largest integral value less than or equal to the specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="686b2-276"><paramref name="d" />보다 작거나 같은 최대 정수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-276">The largest integral value less than or equal to <paramref name="d" />.</span></span>  <span data-ttu-id="686b2-277">메서드는 형식 <see cref="T:System.Decimal" />의 정수 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-277">Note that the method returns an integral value of type <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-278">이 메서드의 동작은 IEEE 표준 754, 섹션 4 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-278">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="686b2-279">이러한 종류의 반올림이 음의 무한대로 반올림 라고도 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-279">This kind of rounding is sometimes called rounding toward negative infinity.</span></span> <span data-ttu-id="686b2-280">즉, 경우 `d` 이 양수인 경우 소수 부분이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-280">In other words, if `d` is positive, any fractional component is truncated.</span></span> <span data-ttu-id="686b2-281">경우 `d` 가 음수 이면 소수 부분이 있으면 존재 하면 마법사가 더 작은 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-281">If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</span></span> <span data-ttu-id="686b2-282">이 메서드의 작업에서 다른는 <xref:System.Math.Ceiling%2A> 메서드를 양의 무한대로 반올림을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-282">The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-283">다음 예제에서는 <xref:System.Math.Floor%28System.Decimal%29?displayProperty=nameWithType> 메서드를 사용할 때의 차이점은 <xref:System.Math.Ceiling%28System.Decimal%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="686b2-283">The following example illustrates the <xref:System.Math.Floor%28System.Decimal%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Ceiling%28System.Decimal%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]
 [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Decimal.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static double Floor (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Floor(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Floor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Floor(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-284">배정밀도 부동 소수점 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-284">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="686b2-285">지정된 배정밀도 부동 소수점 숫자보다 작거나 같은 최대 정수 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-285">Returns the largest integral value less than or equal to the specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="686b2-286"><paramref name="d" />보다 작거나 같은 최대 정수 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-286">The largest integral value less than or equal to <paramref name="d" />.</span></span> <span data-ttu-id="686b2-287"><paramref name="d" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면, 해당 값이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-287">If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-288">이 메서드의 동작은 IEEE 표준 754, 섹션 4 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-288">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="686b2-289">이러한 종류의 반올림이 음의 무한대로 반올림 라고도 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-289">This kind of rounding is sometimes called rounding toward negative infinity.</span></span> <span data-ttu-id="686b2-290">즉, 경우 `d` 이 양수인 경우 소수 부분이 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-290">In other words, if `d` is positive, any fractional component is truncated.</span></span> <span data-ttu-id="686b2-291">경우 `d` 가 음수 이면 소수 부분이 있으면 존재 하면 마법사가 더 작은 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-291">If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</span></span> <span data-ttu-id="686b2-292">이 메서드의 작업에서 다른는 <xref:System.Math.Ceiling%2A> 메서드를 양의 무한대로 반올림을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-292">The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-293">다음 예제에서는 <xref:System.Math.Floor%28System.Double%29?displayProperty=nameWithType> 메서드를 사용할 때의 차이점은 <xref:System.Math.Ceiling%28System.Double%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="686b2-293">The following example illustrates the <xref:System.Math.Floor%28System.Double%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Ceiling%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]
 [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="IEEERemainder">
      <MemberSignature Language="C#" Value="public static double IEEERemainder (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IEEERemainder(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IEEERemainder (x As Double, y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double IEEERemainder(double x, double y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="686b2-294">피제수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-294">A dividend.</span></span></param>
        <param name="y"><span data-ttu-id="686b2-295">제수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-295">A divisor.</span></span></param>
        <summary><span data-ttu-id="686b2-296">지정된 수를 지정된 다른 수로 나눈 나머지를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-296">Returns the remainder resulting from the division of a specified number by another specified number.</span></span></summary>
        <returns><span data-ttu-id="686b2-297"><paramref name="x" /> - (<paramref name="y" /> Q)와 같은 숫자입니다. 여기서 Q는 가장 가까운 정수로 반올림된 <paramref name="x" /> / <paramref name="y" />의 몫입니다. <paramref name="x" /> / <paramref name="y" />가 두 수의 중간이면, 짝수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-297">A number equal to <paramref name="x" /> - (<paramref name="y" /> Q), where Q is the quotient of <paramref name="x" /> / <paramref name="y" /> rounded to the nearest integer (if <paramref name="x" /> / <paramref name="y" /> falls halfway between two integers, the even integer is returned).</span></span>  
  
 <span data-ttu-id="686b2-298"><paramref name="x" /> - (<paramref name="y" /> Q)가 0인 경우 <paramref name="x" />가 양수이면 값 +0이, <paramref name="x" />가 음수이면 값 -0이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-298">If <paramref name="x" /> - (<paramref name="y" /> Q) is zero, the value +0 is returned if <paramref name="x" /> is positive, or -0 if <paramref name="x" /> is negative.</span></span>  
  
 <span data-ttu-id="686b2-299"><paramref name="y" /> = 0인 경우 <see cref="F:System.Double.NaN" />이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-299">If <paramref name="y" /> = 0, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-300">이 작업의 ANSI/IEEE Std 754-1985; 5.1 섹션에에서 정의 된 나머지 연산을 준수합니다 이진 부동 소수점 산술; IEEE 표준 전기의 institute 및 Electronics Engineers, Inc. 1985 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-300">This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.</span></span>  
  
 <span data-ttu-id="686b2-301"><xref:System.Math.IEEERemainder%2A> 메서드는 연산자와 동일 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-301">The <xref:System.Math.IEEERemainder%2A> method is not the same as the modulus operator.</span></span> <span data-ttu-id="686b2-302">나누기 후 나머지를 반환 둘 다를 사용 하는 수식을 서로 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-302">Although both return the remainder after division, the formulas they use are different.</span></span> <span data-ttu-id="686b2-303">에 대 한 수식은 <xref:System.Math.IEEERemainder%2A> 방법은:</span><span class="sxs-lookup"><span data-stu-id="686b2-303">The formula for the <xref:System.Math.IEEERemainder%2A> method is:</span></span>  
  
```  
IEEERemainder = dividend - (divisor * Math.Round(dividend / divisor))  
```  
  
 <span data-ttu-id="686b2-304">반면, 나머지 연산자에 대 한 수식은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-304">In contrast, the formula for the modulus operator is:</span></span>  
  
```  
Modulus = (Math.Abs(dividend) - (Math.Abs(divisor) *   
          (Math.Floor(Math.Abs(dividend) / Math.Abs(divisor))))) *   
          Math.Sign(dividend)  
```  
  
   
  
## Examples  
 <span data-ttu-id="686b2-305">다음 예제에서 반환 된 나머지를 대조는 <xref:System.Math.IEEERemainder%2A> 모듈러스 나누기 연산자에서 반환 된 나머지 메서드.</span><span class="sxs-lookup"><span data-stu-id="686b2-305">The following example contrasts the remainder returned by the <xref:System.Math.IEEERemainder%2A> method with the remainder returned by the modulus division operator.</span></span>  
  
 [!code-csharp[System.Math.IEEERemainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.ieeeremainder/cs/ieeeremainder1.cs#1)]
 [!code-vb[System.Math.IEEERemainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.ieeeremainder/vb/ieeeremainder1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="686b2-306">지정된 숫자의 로그를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-306">Returns the logarithm of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-307">로그가 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-307">The number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="686b2-308">지정된 숫자의 자연(밑 <see langword="e" />) 로그를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-308">Returns the natural (base <see langword="e" />) logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="686b2-309">다음 표에 나와 있는 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-309">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="686b2-310"><list type="table"><listheader><term><paramref name="d" /> 매개 변수</span><span class="sxs-lookup"><span data-stu-id="686b2-310"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="686b2-311"></term><description> 반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-311"></term><description> Return value</span></span>  
  
 <span data-ttu-id="686b2-312"></description></listheader><item><term> 양수</span><span class="sxs-lookup"><span data-stu-id="686b2-312"></description></listheader><item><term> Positive</span></span>  
  
 <span data-ttu-id="686b2-313"></term><description> <paramref name="d" />의 자연 로그인 ln <paramref name="d" /> 또는 log e <paramref name="d" /></description></item><item><term> Zero입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-313"></term><description> The natural logarithm of <paramref name="d" />; that is, ln <paramref name="d" />, or log e <paramref name="d" /></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="686b2-314"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> 음수</span><span class="sxs-lookup"><span data-stu-id="686b2-314"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="686b2-315"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 같음 <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 같음 <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="686b2-315"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-316">매개 변수 `d` 10 진수로로 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-316">Parameter `d` is specified as a base 10 number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-317">다음 예제는 <xref:System.Math.Log%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="686b2-317">The following example illustrates the <xref:System.Math.Log%2A> method.</span></span>  
  
 [!code-csharp[System.Math.Log_Overloads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/log1.cs#2)]
 [!code-vb[System.Math.Log_Overloads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/log1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Math.E" />
        <altmember cref="M:System.Math.Exp(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (double a, double newBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 a, float64 newBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (a As Double, newBase As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(double a, double newBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="newBase" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="686b2-318">로그가 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-318">The number whose logarithm is to be found.</span></span></param>
        <param name="newBase"><span data-ttu-id="686b2-319">로그의 밑입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-319">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="686b2-320">지정된 밑을 사용하여 지정된 숫자의 로그를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-320">Returns the logarithm of a specified number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="686b2-321">다음 표에 나와 있는 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-321">One of the values in the following table.</span></span> <span data-ttu-id="686b2-322">+Infinity는 <see cref="F:System.Double.PositiveInfinity" />, -Infinity는 <see cref="F:System.Double.NegativeInfinity" />,NaN은 <see cref="F:System.Double.NaN" />을 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-322">(+Infinity denotes <see cref="F:System.Double.PositiveInfinity" />, -Infinity denotes <see cref="F:System.Double.NegativeInfinity" />, and NaN denotes <see cref="F:System.Double.NaN" />.)</span></span>  
  
 <span data-ttu-id="686b2-323"><list type="table"><listheader><term><paramref name="a" /></term><description><paramref name="newBase" /></description><description> 반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-323"><list type="table"><listheader><term><paramref name="a" /></term><description><paramref name="newBase" /></description><description> Return value</span></span>  
  
 <span data-ttu-id="686b2-324"></description></listheader><item><term><paramref name="a" />&gt; 0</span><span class="sxs-lookup"><span data-stu-id="686b2-324"></description></listheader><item><term><paramref name="a" />&gt; 0</span></span>  
  
 <span data-ttu-id="686b2-325"></term><description>(0 &lt;<paramref name="newBase" />&lt; 1) -또는-(<paramref name="newBase" />&gt; 1)</span><span class="sxs-lookup"><span data-stu-id="686b2-325"></term><description> (0 &lt;<paramref name="newBase" />&lt; 1) -or-(<paramref name="newBase" />&gt; 1)</span></span>  
  
 <span data-ttu-id="686b2-326"></description><description> lognewBase(a)</span><span class="sxs-lookup"><span data-stu-id="686b2-326"></description><description> lognewBase(a)</span></span>  
  
 <span data-ttu-id="686b2-327"></description></item><item><term><paramref name="a" />&lt; 0</span><span class="sxs-lookup"><span data-stu-id="686b2-327"></description></item><item><term><paramref name="a" />&lt; 0</span></span>  
  
 <span data-ttu-id="686b2-328"></term><description>(모든 값)</span><span class="sxs-lookup"><span data-stu-id="686b2-328"></term><description> (any value)</span></span>  
  
 <span data-ttu-id="686b2-329"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="686b2-329"></description><description> NaN</span></span>  
  
 <span data-ttu-id="686b2-330"></description></item><item><term>(모든 값)</span><span class="sxs-lookup"><span data-stu-id="686b2-330"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="686b2-331"></term><description><paramref name="newBase" />&lt; 0</span><span class="sxs-lookup"><span data-stu-id="686b2-331"></term><description><paramref name="newBase" />&lt; 0</span></span>  
  
 <span data-ttu-id="686b2-332"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="686b2-332"></description><description> NaN</span></span>  
  
 <span data-ttu-id="686b2-333"></description></item><item><term><paramref name="a" /> != 1</span><span class="sxs-lookup"><span data-stu-id="686b2-333"></description></item><item><term><paramref name="a" /> != 1</span></span>  
  
 <span data-ttu-id="686b2-334"></term><description><paramref name="newBase" /> = 0</span><span class="sxs-lookup"><span data-stu-id="686b2-334"></term><description><paramref name="newBase" /> = 0</span></span>  
  
 <span data-ttu-id="686b2-335"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="686b2-335"></description><description> NaN</span></span>  
  
 <span data-ttu-id="686b2-336"></description></item><item><term><paramref name="a" /> != 1</span><span class="sxs-lookup"><span data-stu-id="686b2-336"></description></item><item><term><paramref name="a" /> != 1</span></span>  
  
 <span data-ttu-id="686b2-337"></term><description><paramref name="newBase" /> = +무한대</span><span class="sxs-lookup"><span data-stu-id="686b2-337"></term><description><paramref name="newBase" /> = +Infinity</span></span>  
  
 <span data-ttu-id="686b2-338"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="686b2-338"></description><description> NaN</span></span>  
  
 <span data-ttu-id="686b2-339"></description></item><item><term><paramref name="a" /> = NaN</span><span class="sxs-lookup"><span data-stu-id="686b2-339"></description></item><item><term><paramref name="a" /> = NaN</span></span>  
  
 <span data-ttu-id="686b2-340"></term><description>(모든 값)</span><span class="sxs-lookup"><span data-stu-id="686b2-340"></term><description> (any value)</span></span>  
  
 <span data-ttu-id="686b2-341"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="686b2-341"></description><description> NaN</span></span>  
  
 <span data-ttu-id="686b2-342"></description></item><item><term>(모든 값)</span><span class="sxs-lookup"><span data-stu-id="686b2-342"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="686b2-343"></term><description><paramref name="newBase" /> = NaN</span><span class="sxs-lookup"><span data-stu-id="686b2-343"></term><description><paramref name="newBase" /> = NaN</span></span>  
  
 <span data-ttu-id="686b2-344"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="686b2-344"></description><description> NaN</span></span>  
  
 <span data-ttu-id="686b2-345"></description></item><item><term>(모든 값)</span><span class="sxs-lookup"><span data-stu-id="686b2-345"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="686b2-346"></term><description><paramref name="newBase" /> = 1</span><span class="sxs-lookup"><span data-stu-id="686b2-346"></term><description><paramref name="newBase" /> = 1</span></span>  
  
 <span data-ttu-id="686b2-347"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="686b2-347"></description><description> NaN</span></span>  
  
 <span data-ttu-id="686b2-348"></description></item><item><term><paramref name="a" /> = 0</span><span class="sxs-lookup"><span data-stu-id="686b2-348"></description></item><item><term><paramref name="a" /> = 0</span></span>  
  
 <span data-ttu-id="686b2-349"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span><span class="sxs-lookup"><span data-stu-id="686b2-349"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span></span>  
  
 <span data-ttu-id="686b2-350"></description><description> +무한대</span><span class="sxs-lookup"><span data-stu-id="686b2-350"></description><description> +Infinity</span></span>  
  
 <span data-ttu-id="686b2-351"></description></item><item><term><paramref name="a" /> = 0</span><span class="sxs-lookup"><span data-stu-id="686b2-351"></description></item><item><term><paramref name="a" /> = 0</span></span>  
  
 <span data-ttu-id="686b2-352"></term><description><paramref name="newBase" />&gt; 1</span><span class="sxs-lookup"><span data-stu-id="686b2-352"></term><description><paramref name="newBase" />&gt; 1</span></span>  
  
 <span data-ttu-id="686b2-353"></description><description> -무한대</span><span class="sxs-lookup"><span data-stu-id="686b2-353"></description><description> -Infinity</span></span>  
  
 <span data-ttu-id="686b2-354"></description></item><item><term><paramref name="a" /> =  +무한대</span><span class="sxs-lookup"><span data-stu-id="686b2-354"></description></item><item><term><paramref name="a" /> =  +Infinity</span></span>  
  
 <span data-ttu-id="686b2-355"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span><span class="sxs-lookup"><span data-stu-id="686b2-355"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span></span>  
  
 <span data-ttu-id="686b2-356"></description><description> -무한대</span><span class="sxs-lookup"><span data-stu-id="686b2-356"></description><description> -Infinity</span></span>  
  
 <span data-ttu-id="686b2-357"></description></item><item><term><paramref name="a" /> =  +무한대</span><span class="sxs-lookup"><span data-stu-id="686b2-357"></description></item><item><term><paramref name="a" /> =  +Infinity</span></span>  
  
 <span data-ttu-id="686b2-358"></term><description><paramref name="newBase" />&gt; 1</span><span class="sxs-lookup"><span data-stu-id="686b2-358"></term><description><paramref name="newBase" />&gt; 1</span></span>  
  
 <span data-ttu-id="686b2-359"></description><description> +무한대</span><span class="sxs-lookup"><span data-stu-id="686b2-359"></description><description> +Infinity</span></span>  
  
 <span data-ttu-id="686b2-360"></description></item><item><term><paramref name="a" /> = 1</span><span class="sxs-lookup"><span data-stu-id="686b2-360"></description></item><item><term><paramref name="a" /> = 1</span></span>  
  
 <span data-ttu-id="686b2-361"></term><description><paramref name="newBase" /> = 0</span><span class="sxs-lookup"><span data-stu-id="686b2-361"></term><description><paramref name="newBase" /> = 0</span></span>  
  
 <span data-ttu-id="686b2-362"></description><description> 0</span><span class="sxs-lookup"><span data-stu-id="686b2-362"></description><description> 0</span></span>  
  
 <span data-ttu-id="686b2-363"></description></item><item><term><paramref name="a" /> = 1</span><span class="sxs-lookup"><span data-stu-id="686b2-363"></description></item><item><term><paramref name="a" /> = 1</span></span>  
  
 <span data-ttu-id="686b2-364"></term><description><paramref name="newBase" /> = +무한대</span><span class="sxs-lookup"><span data-stu-id="686b2-364"></term><description><paramref name="newBase" /> = +Infinity</span></span>  
  
 <span data-ttu-id="686b2-365"></description><description> 0</span><span class="sxs-lookup"><span data-stu-id="686b2-365"></description><description> 0</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-366">다음 예제에서는 <xref:System.Math.Log%2A> 선택한 값에 대 한 특정 한 로그 id를 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-366">The following example uses <xref:System.Math.Log%2A> to evaluate certain logarithmic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Log_Overloads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CPP/loggen.cpp#1)]
 [!code-csharp[System.Math.Log_Overloads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/loggen.cs#1)]
 [!code-vb[System.Math.Log_Overloads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/loggen.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static double Log10 (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log10(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-367">로그가 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-367">A number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="686b2-368">밑을 10으로 사용하여 지정된 숫자의 로그를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-368">Returns the base 10 logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="686b2-369">다음 표에 나와 있는 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-369">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="686b2-370"><list type="table"><listheader><term><paramref name="d" /> 매개 변수</span><span class="sxs-lookup"><span data-stu-id="686b2-370"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="686b2-371"></term><description> 반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-371"></term><description> Return value</span></span>  
  
 <span data-ttu-id="686b2-372"></description></listheader><item><term> 양수</span><span class="sxs-lookup"><span data-stu-id="686b2-372"></description></listheader><item><term> Positive</span></span>  
  
 <span data-ttu-id="686b2-373"></term><description>밑이 10인 <paramref name="d" />의 로그인 log 10<paramref name="d" />입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-373"></term><description> The base 10 log of <paramref name="d" />; that is, log 10<paramref name="d" />.</span></span>  
  
 <span data-ttu-id="686b2-374"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="686b2-374"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="686b2-375"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> 음수</span><span class="sxs-lookup"><span data-stu-id="686b2-375"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="686b2-376"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 같음 <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 같음 <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="686b2-376"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-377">매개 변수 `d` 10 진수로로 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-377">Parameter `d` is specified as a base 10 number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-378">다음 예제에서는 <xref:System.Math.Log10%2A> 메서드를 선택한 값에 대 한 밑수 10을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-378">The following example uses the <xref:System.Math.Log10%2A> method to return the base 10 logarithm for selected values.</span></span>  
  
 [!code-csharp[System.Math.Log10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log10/CS/log10.cs#1)]
 [!code-vb[System.Math.Log10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log10/VB/log10.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Max">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="686b2-379">지정된 두 숫자 중 더 큰 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-379">Returns the larger of two specified numbers.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static byte Max (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Max(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Byte, val2 As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Max(System::Byte val1, System::Byte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-380">비교할 두 개의 8비트 부호 없는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-380">The first of two 8-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-381">비교할 두 개의 8비트 부호 없는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-381">The second of two 8-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-382">두 개의 8비트 부호 없는 정수 중 더 큰 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-382">Returns the larger of two 8-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-383"><paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-383">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-384">다음 예제에서는 사용 하는 <xref:System.Math.Max%2A> 메서드 반환 하 고 두 개의 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-384">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal Max (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Decimal, val2 As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Max(System::Decimal val1, System::Decimal val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-385">비교할 두 개의 10진수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-385">The first of two decimal numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-386">비교할 두 개의 10진수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-386">The second of two decimal numbers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-387">두 개의 10진수 중 더 큰 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-387">Returns the larger of two decimal numbers.</span></span></summary>
        <returns><span data-ttu-id="686b2-388"><paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-388">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-389">다음 예제에서는 사용 하는 <xref:System.Math.Max%2A> 메서드 반환 하 고 두 개의 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-389">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double Max (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(float64 val1, float64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Double, val2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Max(double val1, double val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-390">비교할 두 개의 배정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-390">The first of two double-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-391">비교할 두 개의 배정밀도 부동 소수점 수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-391">The second of two double-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-392">두 개의 배정밀도 부동 소수점 수 중 더 큰 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-392">Returns the larger of two double-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="686b2-393"><paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-393">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span> <span data-ttu-id="686b2-394"><paramref name="val1" />, <paramref name="val2" /> 또는 <paramref name="val1" />과 <paramref name="val2" />가 모두 <see cref="F:System.Double.NaN" />과 같은 경우 <see cref="F:System.Double.NaN" />이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-394">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-395">다음 예제에서는 사용 하는 <xref:System.Math.Max%2A> 메서드 반환 하 고 두 개의 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-395">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static short Max (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Max(int16 val1, int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Short, val2 As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Max(short val1, short val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-396">비교할 두 개의 16비트 부호 있는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-396">The first of two 16-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-397">비교할 두 개의 16비트 부호 있는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-397">The second of two 16-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-398">두 개의 16비트 부호 있는 정수 중 더 큰 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-398">Returns the larger of two 16-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-399"><paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-399">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-400">다음 예제에서는 사용 하는 <xref:System.Math.Max%2A> 메서드 반환 하 고 두 개의 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-400">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int Max (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(int32 val1, int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Integer, val2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Max(int val1, int val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-401">비교할 두 개의 32비트 부호 있는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-401">The first of two 32-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-402">비교할 두 개의 32비트 부호 있는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-402">The second of two 32-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-403">두 개의 32비트 부호 있는 정수 중 더 큰 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-403">Returns the larger of two 32-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-404"><paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-404">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-405">다음 예제에서는 사용 하는 <xref:System.Math.Max%2A> 메서드 반환 하 고 두 개의 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-405">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long Max (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(int64 val1, int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Long, val2 As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Max(long val1, long val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-406">비교할 두 개의 64비트 부호 있는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-406">The first of two 64-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-407">비교할 두 개의 64비트 부호 있는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-407">The second of two 64-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-408">두 개의 64비트 부호 있는 정수 중 더 큰 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-408">Returns the larger of two 64-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-409"><paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-409">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-410">다음 예제에서는 사용 하는 <xref:System.Math.Max%2A> 메서드 반환 하 고 두 개의 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-410">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static sbyte Max (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Max(int8 val1, int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As SByte, val2 As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Max(System::SByte val1, System::SByte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-411">비교할 두 개의 8비트 부호 있는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-411">The first of two 8-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-412">비교할 두 개의 8비트 부호 있는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-412">The second of two 8-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-413">두 개의 8비트 부호 있는 정수 중 더 큰 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-413">Returns the larger of two 8-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-414"><paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-414">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-415">다음 예제에서는 사용 하는 <xref:System.Math.Max%2A> 메서드 반환 하 고 두 개의 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-415">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(float32 val1, float32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Single, val2 As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Max(float val1, float val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-416">비교할 두 개의 단정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-416">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-417">비교할 두 개의 단정밀도 부동 소수점 수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-417">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-418">두 개의 단정밀도 부동 소수점 수 중 더 큰 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-418">Returns the larger of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="686b2-419"><paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-419">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span> <span data-ttu-id="686b2-420"><paramref name="val1" />이나 <paramref name="val2" /> 또는 <paramref name="val1" />과 <paramref name="val2" />가 모두 <see cref="F:System.Single.NaN" />과 같은 경우 <see cref="F:System.Single.NaN" />이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-420">If <paramref name="val1" />, or <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-421">다음 예제에서는 사용 하는 <xref:System.Math.Max%2A> 메서드 반환 하 고 두 개의 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-421">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static ushort Max (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Max(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As UShort, val2 As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Max(System::UInt16 val1, System::UInt16 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-422">비교할 두 개의 16비트 부호 없는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-422">The first of two 16-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-423">비교할 두 개의 16비트 부호 없는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-423">The second of two 16-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-424">두 개의 16비트 부호 없는 정수 중 더 큰 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-424">Returns the larger of two 16-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-425"><paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-425">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-426">다음 예제에서는 사용 하는 <xref:System.Math.Max%2A> 메서드 반환 하 고 두 개의 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-426">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static uint Max (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Max(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As UInteger, val2 As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Max(System::UInt32 val1, System::UInt32 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-427">비교할 두 개의 32비트 부호 없는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-427">The first of two 32-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-428">비교할 두 개의 32비트 부호 없는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-428">The second of two 32-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-429">두 개의 32비트 부호 없는 정수 중 더 큰 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-429">Returns the larger of two 32-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-430"><paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-430">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-431">다음 예제에서는 사용 하는 <xref:System.Math.Max%2A> 메서드 반환 하 고 두 개의 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-431">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static ulong Max (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Max(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As ULong, val2 As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Max(System::UInt64 val1, System::UInt64 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-432">비교할 두 개의 64비트 부호 없는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-432">The first of two 64-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-433">비교할 두 개의 64비트 부호 없는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-433">The second of two 64-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-434">두 개의 64비트 부호 없는 정수 중 더 큰 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-434">Returns the larger of two 64-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-435"><paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-435">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-436">다음 예제에서는 사용 하는 <xref:System.Math.Max%2A> 메서드 반환 하 고 두 개의 변수 중 더 큰 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-436">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Min">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="686b2-437">두 개의 숫자 중 더 작은 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-437">Returns the smaller of two numbers.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static byte Min (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Min(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Byte, val2 As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Min(System::Byte val1, System::Byte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-438">비교할 두 개의 8비트 부호 없는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-438">The first of two 8-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-439">비교할 두 개의 8비트 부호 없는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-439">The second of two 8-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-440">두 개의 8비트 부호 없는 정수 중 더 작은 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-440">Returns the smaller of two 8-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-441"><paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-441">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-442">다음 예제에서는 사용 하는 <xref:System.Math.Min%2A> 메서드 반환 하 고 두 개의 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-442">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal Min (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Decimal, val2 As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Min(System::Decimal val1, System::Decimal val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-443">비교할 두 개의 10진수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-443">The first of two decimal numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-444">비교할 두 개의 10진수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-444">The second of two decimal numbers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-445">두 개의 10진수 중 더 작은 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-445">Returns the smaller of two decimal numbers.</span></span></summary>
        <returns><span data-ttu-id="686b2-446"><paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-446">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-447">다음 예제에서는 사용 하는 <xref:System.Math.Min%2A> 메서드 반환 하 고 두 개의 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-447">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double Min (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(float64 val1, float64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Double, val2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Min(double val1, double val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-448">비교할 두 개의 배정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-448">The first of two double-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-449">비교할 두 개의 배정밀도 부동 소수점 수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-449">The second of two double-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-450">두 개의 배정밀도 부동 소수점 수 중 더 작은 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-450">Returns the smaller of two double-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="686b2-451"><paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-451">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span> <span data-ttu-id="686b2-452"><paramref name="val1" />, <paramref name="val2" /> 또는 <paramref name="val1" />과 <paramref name="val2" />가 모두 <see cref="F:System.Double.NaN" />과 같은 경우 <see cref="F:System.Double.NaN" />이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-452">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-453">다음 예제에서는 사용 하는 <xref:System.Math.Min%2A> 메서드 반환 하 고 두 개의 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-453">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static short Min (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Min(int16 val1, int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Short, val2 As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Min(short val1, short val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-454">비교할 두 개의 16비트 부호 있는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-454">The first of two 16-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-455">비교할 두 개의 16비트 부호 있는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-455">The second of two 16-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-456">두 개의 16비트 부호 있는 정수 중 더 작은 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-456">Returns the smaller of two 16-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-457"><paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-457">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-458">다음 예제에서는 사용 하는 <xref:System.Math.Min%2A> 메서드 반환 하 고 두 개의 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-458">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int Min (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(int32 val1, int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Integer, val2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Min(int val1, int val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-459">비교할 두 개의 32비트 부호 있는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-459">The first of two 32-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-460">비교할 두 개의 32비트 부호 있는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-460">The second of two 32-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-461">두 개의 32비트 부호 있는 정수 중 더 작은 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-461">Returns the smaller of two 32-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-462"><paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-462">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-463">다음 예제에서는 사용 하는 <xref:System.Math.Min%2A> 메서드 반환 하 고 두 개의 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-463">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long Min (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(int64 val1, int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Long, val2 As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Min(long val1, long val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-464">비교할 두 개의 64비트 부호 있는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-464">The first of two 64-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-465">비교할 두 개의 64비트 부호 있는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-465">The second of two 64-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-466">두 개의 64비트 부호 있는 정수 중 더 작은 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-466">Returns the smaller of two 64-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-467"><paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-467">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-468">다음 예제에서는 사용 하는 <xref:System.Math.Min%2A> 메서드 반환 하 고 두 개의 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-468">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static sbyte Min (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Min(int8 val1, int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As SByte, val2 As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Min(System::SByte val1, System::SByte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-469">비교할 두 개의 8비트 부호 있는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-469">The first of two 8-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-470">비교할 두 개의 8비트 부호 있는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-470">The second of two 8-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-471">두 개의 8비트 부호 있는 정수 중 더 작은 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-471">Returns the smaller of two 8-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-472"><paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-472">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-473">다음 예제에서는 사용 하는 <xref:System.Math.Min%2A> 메서드 반환 하 고 두 개의 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-473">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(float32 val1, float32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Single, val2 As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Min(float val1, float val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-474">비교할 두 개의 단정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-474">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-475">비교할 두 개의 단정밀도 부동 소수점 수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-475">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-476">두 개의 단정밀도 부동 소수점 수 중 더 작은 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-476">Returns the smaller of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="686b2-477"><paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-477">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span> <span data-ttu-id="686b2-478"><paramref name="val1" />, <paramref name="val2" /> 또는 <paramref name="val1" />과 <paramref name="val2" />가 모두 <see cref="F:System.Single.NaN" />과 같은 경우 <see cref="F:System.Single.NaN" />이 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-478">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-479">다음 예제에서는 사용 하는 <xref:System.Math.Min%2A> 메서드 반환 하 고 두 개의 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-479">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static ushort Min (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Min(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As UShort, val2 As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Min(System::UInt16 val1, System::UInt16 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-480">비교할 두 개의 16비트 부호 없는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-480">The first of two 16-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-481">비교할 두 개의 16비트 부호 없는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-481">The second of two 16-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-482">두 개의 16비트 부호 없는 정수 중 더 작은 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-482">Returns the smaller of two 16-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-483"><paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-483">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-484">다음 예제에서는 사용 하는 <xref:System.Math.Min%2A> 메서드 반환 하 고 두 개의 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-484">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static uint Min (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Min(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As UInteger, val2 As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Min(System::UInt32 val1, System::UInt32 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-485">비교할 두 개의 32비트 부호 없는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-485">The first of two 32-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-486">비교할 두 개의 32비트 부호 없는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-486">The second of two 32-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-487">두 개의 32비트 부호 없는 정수 중 더 작은 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-487">Returns the smaller of two 32-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-488"><paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-488">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-489">다음 예제에서는 사용 하는 <xref:System.Math.Min%2A> 메서드 반환 하 고 두 개의 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-489">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static ulong Min (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Min(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As ULong, val2 As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Min(System::UInt64 val1, System::UInt64 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="686b2-490">비교할 두 개의 64비트 부호 없는 정수 중 첫 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-490">The first of two 64-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="686b2-491">비교할 두 개의 64비트 부호 없는 정수 중 두 번째 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-491">The second of two 64-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="686b2-492">두 개의 64비트 부호 없는 정수 중 더 작은 숫자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-492">Returns the smaller of two 64-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="686b2-493"><paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-493">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-494">다음 예제에서는 사용 하는 <xref:System.Math.Min%2A> 메서드 반환 하 고 두 개의 변수 중 더 작은 숫자를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-494">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PI">
      <MemberSignature Language="C#" Value="public const double PI = 3.14159265358979;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 PI = (3.14159265358979)" />
      <MemberSignature Language="DocId" Value="F:System.Math.PI" />
      <MemberSignature Language="VB.NET" Value="Public Const PI As Double  = 3.14159265358979" />
      <MemberSignature Language="C++ CLI" Value="public: double PI = 3.14159265358979;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>3.14159265358979</MemberValue>
      <Docs>
        <summary><span data-ttu-id="686b2-495">상수(π)로 지정된 원주율을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-495">Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-496">이 필드의 값은 3.14159265358979323846입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-496">The value of this field is 3.14159265358979323846.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-497">다음 예제에서는 <xref:System.Math.PI> 지정된 사다리꼴의 내부 각도의 계산을 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-497">The following example uses <xref:System.Math.PI> to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static double Pow (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Pow(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Pow(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (x As Double, y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Pow(double x, double y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="686b2-498">거듭제곱할 배정밀도 부동 소수점 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-498">A double-precision floating-point number to be raised to a power.</span></span></param>
        <param name="y"><span data-ttu-id="686b2-499">거듭제곱을 지정하는 배정밀도 부동 소수점 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-499">A double-precision floating-point number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="686b2-500">지정된 숫자의 지정된 거듭제곱을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-500">Returns a specified number raised to the specified power.</span></span></summary>
        <returns><span data-ttu-id="686b2-501"><paramref name="x" />의 <paramref name="y" />승입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-501">The number <paramref name="x" /> raised to the power <paramref name="y" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-502">다음 표에서 반환 값에 대 한 다양 한 값 또는 값의 범위 지정 되 면는 `x` 및 `y` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-502">The following table indicates the return value when various values or ranges of values are specified for the `x` and `y` parameters.</span></span> <span data-ttu-id="686b2-503">자세한 내용은 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 및 <xref:System.Double.NaN?displayProperty=nameWithType>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="686b2-503">For more information, see <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="686b2-504">매개 변수</span><span class="sxs-lookup"><span data-stu-id="686b2-504">Parameters</span></span>|<span data-ttu-id="686b2-505">반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-505">Return value</span></span>|  
|----------------|------------------|  
|<span data-ttu-id="686b2-506">`x` 또는 `y`  =  `NaN`합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-506">`x` or `y` = `NaN`.</span></span>|`NaN`|  
|<span data-ttu-id="686b2-507">`x` = 이외의 값 `NaN`; `y` = 0.</span><span class="sxs-lookup"><span data-stu-id="686b2-507">`x` = Any value except `NaN`; `y` = 0.</span></span>|<span data-ttu-id="686b2-508">1</span><span class="sxs-lookup"><span data-stu-id="686b2-508">1</span></span>|  
|<span data-ttu-id="686b2-509">`x` = `NegativeInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="686b2-509">`x` = `NegativeInfinity`; `y` < 0.</span></span>|<span data-ttu-id="686b2-510">0</span><span class="sxs-lookup"><span data-stu-id="686b2-510">0</span></span>|  
|<span data-ttu-id="686b2-511">`x` = `NegativeInfinity`; `y` 홀수 양수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-511">`x` = `NegativeInfinity`; `y` is a positive odd integer.</span></span>|`NegativeInfinity`|  
|<span data-ttu-id="686b2-512">`x` = `NegativeInfinity`; `y` 양수 건 홀수 정수에 없습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-512">`x` = `NegativeInfinity`; `y` is positive but not an odd integer.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="686b2-513">`x` < 0 아닌 `NegativeInfinity`; `y` 는 정수가 아니므로 `NegativeInfinity`, 또는 `PositiveInfinity`합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-513">`x` < 0 but not `NegativeInfinity`; `y` is not an integer, `NegativeInfinity`, or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="686b2-514">`x` =-1입니다. `y`  =  `NegativeInfinity` 또는 `PositiveInfinity`합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-514">`x` = -1; `y` = `NegativeInfinity` or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="686b2-515">-1 < `x` < 1; `y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="686b2-515">-1 < `x` < 1; `y` = `NegativeInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="686b2-516">-1 < `x` < 1; `y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="686b2-516">-1 < `x` < 1; `y` = `PositiveInfinity`.</span></span>|<span data-ttu-id="686b2-517">0</span><span class="sxs-lookup"><span data-stu-id="686b2-517">0</span></span>|  
|<span data-ttu-id="686b2-518">`x` <-1 또는 `x` > 1; `y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="686b2-518">`x` < -1 or `x` > 1; `y` = `NegativeInfinity`.</span></span>|<span data-ttu-id="686b2-519">0</span><span class="sxs-lookup"><span data-stu-id="686b2-519">0</span></span>|  
|<span data-ttu-id="686b2-520">`x` <-1 또는 `x` > 1; `y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="686b2-520">`x` < -1 or `x` > 1; `y` = `PositiveInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="686b2-521">`x` = 0; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="686b2-521">`x` = 0; `y` < 0.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="686b2-522">`x` = 0; `y` > 0.</span><span class="sxs-lookup"><span data-stu-id="686b2-522">`x` = 0; `y` > 0.</span></span>|<span data-ttu-id="686b2-523">0</span><span class="sxs-lookup"><span data-stu-id="686b2-523">0</span></span>|  
|<span data-ttu-id="686b2-524">`x` = 1; `y` 제외한 모든 값은 `NaN`합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-524">`x` = 1; `y` is any value except `NaN`.</span></span>|<span data-ttu-id="686b2-525">1</span><span class="sxs-lookup"><span data-stu-id="686b2-525">1</span></span>|  
|<span data-ttu-id="686b2-526">`x` = `PositiveInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="686b2-526">`x` = `PositiveInfinity`; `y` < 0.</span></span>|<span data-ttu-id="686b2-527">0</span><span class="sxs-lookup"><span data-stu-id="686b2-527">0</span></span>|  
|<span data-ttu-id="686b2-528">`x` = `PositiveInfinity`; `y` > 0.</span><span class="sxs-lookup"><span data-stu-id="686b2-528">`x` = `PositiveInfinity`; `y` > 0.</span></span>|`PositiveInfinity`|  
  
   
  
## Examples  
 <span data-ttu-id="686b2-529">다음 예제에서는 <xref:System.Math.Pow%2A> 메서드 0에서 32 사이의 거듭제곱을 2 발생의 결과로 생성 되는 값을 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-529">The following example uses the <xref:System.Math.Pow%2A> method to calculate the value that results from raising 2 to a power ranging from 0 to 32.</span></span>  
  
 [!code-csharp[System.Math.Pow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.pow/cs/pow1.cs#1)]
 [!code-vb[System.Math.Pow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.pow/vb/pow1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Sqrt(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Round">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="686b2-530">값을 가장 가까운 정수나 지정된 소수 자릿수로 반올림합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-530">Rounds a value to the nearest integer or to the specified number of fractional digits.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-531">섹션 내용</span><span class="sxs-lookup"><span data-stu-id="686b2-531">In this section:</span></span>  
  
 <span data-ttu-id="686b2-532">[오버 로드 된 메서드 구문](#Syntax) </span><span class="sxs-lookup"><span data-stu-id="686b2-532">[Overloaded method syntax](#Syntax) </span></span>  
 <span data-ttu-id="686b2-533">[매개 변수](#Params) </span><span class="sxs-lookup"><span data-stu-id="686b2-533">[Parameters](#Params) </span></span>  
 <span data-ttu-id="686b2-534">[반환 값](#Returns) </span><span class="sxs-lookup"><span data-stu-id="686b2-534">[Return value](#Returns) </span></span>  
 <span data-ttu-id="686b2-535">[예외](#Exceptions) </span><span class="sxs-lookup"><span data-stu-id="686b2-535">[Exceptions](#Exceptions) </span></span>  
 <span data-ttu-id="686b2-536">[어떤 방법을 호출할 수 있습니까?](#Tasks) </span><span class="sxs-lookup"><span data-stu-id="686b2-536">[Which method do I call?](#Tasks) </span></span>  
 <span data-ttu-id="686b2-537">[중간점 값 및 반올림 규칙](#Midpoint) </span><span class="sxs-lookup"><span data-stu-id="686b2-537">[Midpoint values and rounding conventions](#Midpoint) </span></span>  
 <span data-ttu-id="686b2-538">[반올림 하 고 전체 자릿수](#Precision) </span><span class="sxs-lookup"><span data-stu-id="686b2-538">[Rounding and precision](#Precision) </span></span>  
 <span data-ttu-id="686b2-539">[반올림 및 단 정밀도 부동 소수점 값](#Single) </span><span class="sxs-lookup"><span data-stu-id="686b2-539">[Rounding and single-precision floating-point values](#Single) </span></span>  
 <span data-ttu-id="686b2-540">예를 들면 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-540">Examples:</span></span>   
 [<span data-ttu-id="686b2-541">Math.Round(Decimal)</span><span class="sxs-lookup"><span data-stu-id="686b2-541">Math.Round(Decimal)</span></span>](#Round1_Example)  
 [<span data-ttu-id="686b2-542">Math.Round(Double)</span><span class="sxs-lookup"><span data-stu-id="686b2-542">Math.Round(Double)</span></span>](#Round2_Example)  
 [<span data-ttu-id="686b2-543">Math.Round(Decimal, Int32)</span><span class="sxs-lookup"><span data-stu-id="686b2-543">Math.Round(Decimal, Int32)</span></span>](#Round3_Example)  
 [<span data-ttu-id="686b2-544">Math.Round(Decimal, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="686b2-544">Math.Round(Decimal, MidpointRounding)</span></span>](#Round4_Example)  
 [<span data-ttu-id="686b2-545">Math.Round(Double, Int32)</span><span class="sxs-lookup"><span data-stu-id="686b2-545">Math.Round(Double, Int32)</span></span>](#Round5_Example)  
 [<span data-ttu-id="686b2-546">Math.Round(Double, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="686b2-546">Math.Round(Double, MidpointRounding)</span></span>](#Round6_Example)  
 [<span data-ttu-id="686b2-547">Math.Round(Decimal, Int32, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="686b2-547">Math.Round(Decimal, Int32, MidpointRounding)</span></span>](#Round7_Example)  
 [<span data-ttu-id="686b2-548">Math.Round(Double, Int32, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="686b2-548">Math.Round(Double, Int32, MidpointRounding)</span></span>](#Round8_Example)  
[<span data-ttu-id="686b2-549">버전 정보</span><span class="sxs-lookup"><span data-stu-id="686b2-549">Version information</span></span>](#Round_Versions)  
  
<a name="Syntax"></a>   
## <a name="overloaded-method-syntax"></a><span data-ttu-id="686b2-550">오버 로드 된 메서드 구문</span><span class="sxs-lookup"><span data-stu-id="686b2-550">Overloaded method syntax</span></span>  
 <span data-ttu-id="686b2-551">오버 로드를 선택 하는 방법 추가 지침을 참조 하세요. [방법을 호출 수행 합니까?](#Tasks)</span><span class="sxs-lookup"><span data-stu-id="686b2-551">For additional guidance on choosing an overload, see [Which method do I call?](#Tasks)</span></span>  
  
 <span data-ttu-id="686b2-552">`Decimal Math.Round(Decimal` `d` `)`</span><span class="sxs-lookup"><span data-stu-id="686b2-552">`Decimal Math.Round(Decimal` `d` `)`</span></span>  
 <span data-ttu-id="686b2-553">10 진수 값을 가장 가까운 정수로 반올림 및 중간점 값을 가장 가까운 짝수로 반올림 ([예제](#Round1_Example)).</span><span class="sxs-lookup"><span data-stu-id="686b2-553">Rounds a decimal value to the nearest integer, and rounds midpoint values to the nearest even number ([example](#Round1_Example)).</span></span>  
  
 <span data-ttu-id="686b2-554">`Double Math.Round(Double` `a` `)`</span><span class="sxs-lookup"><span data-stu-id="686b2-554">`Double Math.Round(Double` `a` `)`</span></span>  
 <span data-ttu-id="686b2-555">배정밀도 부동 소수점 값을 가장 가까운 정수로 반올림 및 중간점 값을 가장 가까운 짝수로 반올림 ([예제](#Round2_Example)).</span><span class="sxs-lookup"><span data-stu-id="686b2-555">Rounds a double-precision floating-point value to the nearest integer, and rounds midpoint values to the nearest even number ([example](#Round2_Example)).</span></span>  
  
 <span data-ttu-id="686b2-556">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `)`</span><span class="sxs-lookup"><span data-stu-id="686b2-556">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `)`</span></span>  
 <span data-ttu-id="686b2-557">지정된 된 수의 소수 자릿수를 10 진수 값을 반올림 하 고 중간점 값을 가장 가까운 짝수로 반올림 ([예제](#Round3_Example)).</span><span class="sxs-lookup"><span data-stu-id="686b2-557">Rounds a decimal value to a specified number of fractional digits, and rounds midpoint values to the nearest even number ([example](#Round3_Example)).</span></span>  
  
 <span data-ttu-id="686b2-558">`Double Math.Round(Double` `value` `, Int32`  `digits` `)`</span><span class="sxs-lookup"><span data-stu-id="686b2-558">`Double Math.Round(Double` `value` `, Int32`  `digits` `)`</span></span>  
 <span data-ttu-id="686b2-559">두 자리 부동 소수점 값을 지정된 된 수의 소수 자릿수 반올림 및 중간점 값을 가장 가까운 짝수로 반올림 ([예제](#Round4_Example)).</span><span class="sxs-lookup"><span data-stu-id="686b2-559">Rounds a double-precision floating-point value to a specified number of fractional digits, and rounds midpoint values to the nearest even number ([example](#Round4_Example)).</span></span>  
  
 <span data-ttu-id="686b2-560">`Decimal Math.Round(Decimal` `d` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="686b2-560">`Decimal Math.Round(Decimal` `d` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="686b2-561">10 진수 값을 가장 가까운 정수로 반올림 하 고 중간점 값에 대 한 지정 된 반올림 규칙을 사용 하 여 ([예제](#Round5_Example)).</span><span class="sxs-lookup"><span data-stu-id="686b2-561">Rounds a decimal value to the nearest integer, and uses the specified rounding convention for midpoint values ([example](#Round5_Example)).</span></span>  
  
 <span data-ttu-id="686b2-562">`Double Math.Round(Double` `value` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="686b2-562">`Double Math.Round(Double` `value` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="686b2-563">배정밀도 부동 소수점 값을 가장 가까운 정수로 반올림 하 고 중간점 값에 대 한 지정 된 반올림 규칙을 사용 하 여 ([예제](#Round6_Example)).</span><span class="sxs-lookup"><span data-stu-id="686b2-563">Rounds a double-precision floating-point value to the nearest integer, and uses the specified rounding convention for midpoint values ([example](#Round6_Example)).</span></span>  
  
 <span data-ttu-id="686b2-564">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="686b2-564">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="686b2-565">지정된 된 수의 소수 자릿수를 10 진수 값을 반올림 하 고 중간점 값에 대 한 지정 된 반올림 규칙을 사용 하 여 ([예제](#Round7_Example)).</span><span class="sxs-lookup"><span data-stu-id="686b2-565">Rounds a decimal value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values ([example](#Round7_Example)).</span></span>  
  
 <span data-ttu-id="686b2-566">`Double Math.Round(Double` `value` `, Int32`  `digits` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="686b2-566">`Double Math.Round(Double` `value` `, Int32`  `digits` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="686b2-567">두 자리 부동 소수점 값을 지정된 된 수의 소수 자릿수 반올림 및 중간점 값에 대 한 지정 된 반올림 규칙을 사용 하 여 ([예제](#Round8_Example)).</span><span class="sxs-lookup"><span data-stu-id="686b2-567">Rounds a double-precision floating-point value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values ([example](#Round8_Example)).</span></span>  
  
<a name="Params"></a>   
## <a name="parameters"></a><span data-ttu-id="686b2-568">매개 변수</span><span class="sxs-lookup"><span data-stu-id="686b2-568">Parameters</span></span>  
 <span data-ttu-id="686b2-569">이것은 전체 목록은 대 한 매개 변수는 <xref:System.Math.Round%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="686b2-569">This is a complete list of parameters for the <xref:System.Math.Round%2A> method.</span></span> <span data-ttu-id="686b2-570">각 오버 로드에서 사용 하는 매개 변수를 위 구문 오버 로드를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="686b2-570">For the parameters used by each overload, see the overload syntax above.</span></span>  
  
|<span data-ttu-id="686b2-571">매개 변수</span><span class="sxs-lookup"><span data-stu-id="686b2-571">Parameter</span></span>|<span data-ttu-id="686b2-572">형식</span><span class="sxs-lookup"><span data-stu-id="686b2-572">Type</span></span>|<span data-ttu-id="686b2-573">설명</span><span class="sxs-lookup"><span data-stu-id="686b2-573">Description</span></span>|  
|---------------|----------|-----------------|  
|`d`|<xref:System.Decimal>|<span data-ttu-id="686b2-574">반올림할 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-574">A number to be rounded.</span></span>|  
|`a`<br /><br /> <span data-ttu-id="686b2-575">또는</span><span class="sxs-lookup"><span data-stu-id="686b2-575">-or-</span></span><br /><br /> `value`|<xref:System.Double>|<span data-ttu-id="686b2-576">반올림할 배정밀도 부동 소수점 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-576">A double-precision floating-point number to be rounded.</span></span>|  
|`decimals`<br /><br /> <span data-ttu-id="686b2-577">또는</span><span class="sxs-lookup"><span data-stu-id="686b2-577">-or-</span></span><br /><br /> `digits`|<xref:System.Int32>|<span data-ttu-id="686b2-578">반환 값의 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-578">The number of fractional digits in the return value.</span></span> <span data-ttu-id="686b2-579">에 대 한 <xref:System.Decimal> 값, 것의 범위는 0에서 28 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-579">For <xref:System.Decimal> values, it can range from 0 to 28.</span></span> <span data-ttu-id="686b2-580">에 대 한 <xref:System.Double> 값, 것의 범위는 0에서 15입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-580">For <xref:System.Double> values, it can range from 0 to 15.</span></span> <span data-ttu-id="686b2-581">15에서 지 원하는 정수 부분과 소수 부분 자릿수의 최대 수는는 <xref:System.Double> 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-581">Note that 15 is the maximum number of integral and fractional digits supported by the <xref:System.Double> type.</span></span><br /><br /> <span data-ttu-id="686b2-582">기본 값: 0으로, 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-582">Default value: 0, which rounds to an integer</span></span>|  
|`mode`|<xref:System.MidpointRounding>|<span data-ttu-id="686b2-583">중간점 값을 반올림 하기 위해 사용 하는 규칙을 지정 하는 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-583">A flag that specifies the convention to use for rounding midpoint values.</span></span> <span data-ttu-id="686b2-584">참조 [중간점 값 및 반올림 규칙](#Midpoint)합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-584">See [Midpoint values and rounding conventions](#Midpoint).</span></span><br /><br /> <span data-ttu-id="686b2-585">기본값: <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="686b2-585">Default value: <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType></span></span>|  
  
<a name="Returns"></a>   
## <a name="return-value"></a><span data-ttu-id="686b2-586">반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-586">Return value</span></span>  
 <span data-ttu-id="686b2-587">형식: <xref:System.Decimal> 또는 <xref:System.Double>반올림 되는 값의 형식에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-587">Type: <xref:System.Decimal> or <xref:System.Double>, depending on the type of the value to be rounded.</span></span>   
<span data-ttu-id="686b2-588">숫자 값으로 동일한 형식의 `d`, `a`, 또는 `value`는 정수 또는 10 진수 숫자의 지정 된 수 있지만 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-588">A numeric value of the same type as `d`, `a`, or `value`, but rounded either to an integer or to the specified number of decimal digits.</span></span> <span data-ttu-id="686b2-589">참조 [중간점 값 및 반올림 규칙](#Midpoint) 중간점 값을 포함 하는 숫자를 반올림 하는 방법에 대 한 정보에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-589">See [Midpoint values and rounding conventions](#Midpoint) for information about rounding numbers with midpoint values.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="686b2-590">중간점 값을 반올림 하는 경우 반올림 알고리즘 같음 테스트를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-590">When rounding midpoint values, the rounding algorithm performs an equality test.</span></span> <span data-ttu-id="686b2-591">이진 표현 및 정밀도 부동 소수점 형식에서의 문제 때문에 확장 메서드가 반환한 값 예상 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-591">Because of problems of binary representation and precision in the floating-point format, the value returned by the method can be unexpected.</span></span> <span data-ttu-id="686b2-592">자세한 내용은 참조 [반올림과 정밀도](#Precision)합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-592">For more information, see [Rounding and precision](#Precision).</span></span>  
  
 <span data-ttu-id="686b2-593">경우는 오버 로드와는 <xref:System.Double> 매개 변수를 호출 <xref:System.Double.NaN?displayProperty=nameWithType>, 메서드가 반환 <xref:System.Double.NaN?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-593">If an overload with a <xref:System.Double> parameter is called with <xref:System.Double.NaN?displayProperty=nameWithType>, the method returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="686b2-594">로 호출 되 면 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 또는 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, 메서드가 반환 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> 또는 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>각각.</span><span class="sxs-lookup"><span data-stu-id="686b2-594">If it is called with <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
<a name="Exceptions"></a>   
## <a name="exceptions"></a><span data-ttu-id="686b2-595">예외</span><span class="sxs-lookup"><span data-stu-id="686b2-595">Exceptions</span></span>  
  
|<span data-ttu-id="686b2-596">예외</span><span class="sxs-lookup"><span data-stu-id="686b2-596">Exception</span></span>|<span data-ttu-id="686b2-597">조건</span><span class="sxs-lookup"><span data-stu-id="686b2-597">Condition</span></span>|<span data-ttu-id="686b2-598">throw</span><span class="sxs-lookup"><span data-stu-id="686b2-598">Thrown by</span></span>|  
|---------------|---------------|---------------|  
|<xref:System.OverflowException>|<span data-ttu-id="686b2-599">결과의 범위 밖에 있는는 <xref:System.Decimal> 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-599">The result is outside the range of the <xref:System.Decimal> type.</span></span>|<xref:System.Math.Round%28System.Decimal%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="686b2-600">`decimals`가 0보다 작거나 28보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-600">`decimals` is less than 0 or greater than 28.</span></span><br /><br /> <span data-ttu-id="686b2-601">또는</span><span class="sxs-lookup"><span data-stu-id="686b2-601">-or-</span></span><br /><br /> <span data-ttu-id="686b2-602">`digits`가 0보다 작거나 15보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-602">`digits` is less than 0 or greater than 15.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<xref:System.ArgumentException>|<span data-ttu-id="686b2-603">`mode`가 유효한 <xref:System.MidpointRounding> 값이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-603">`mode` is not a valid value of <xref:System.MidpointRounding>.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
  
<a name="Tasks"></a>   
## <a name="which-method-do-i-call"></a><span data-ttu-id="686b2-604">어떤 방법을 호출할 수 있습니까?</span><span class="sxs-lookup"><span data-stu-id="686b2-604">Which method do I call?</span></span>  
  
|<span data-ttu-id="686b2-605">대상</span><span class="sxs-lookup"><span data-stu-id="686b2-605">To</span></span>|<span data-ttu-id="686b2-606">Call</span><span class="sxs-lookup"><span data-stu-id="686b2-606">Call</span></span>|  
|--------|----------|  
|<span data-ttu-id="686b2-607">반올림 가장 가까운 규칙을 사용 하 여 숫자를 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-607">Round a number to an integer by using the rounding to nearest convention.</span></span>|<xref:System.Math.Round%28System.Decimal%29><br /><br /> <span data-ttu-id="686b2-608">또는</span><span class="sxs-lookup"><span data-stu-id="686b2-608">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%29>|  
|<span data-ttu-id="686b2-609">숫자를 지정 된를 사용 하 여 정수로 내림 규칙을 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-609">Round a number to an integer by using a specified rounding convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <span data-ttu-id="686b2-610">또는</span><span class="sxs-lookup"><span data-stu-id="686b2-610">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>|  
|<span data-ttu-id="686b2-611">반올림 가장 가까운 규칙을 사용 하 여 지정된 된 수의 소수 자리 숫자를 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-611">Round a number to a specified number of fractional digits by using the rounding to nearest convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <span data-ttu-id="686b2-612">또는</span><span class="sxs-lookup"><span data-stu-id="686b2-612">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%29>|  
|<span data-ttu-id="686b2-613">숫자는 소수 자릿수가 지정 된를 사용 하 여 지정된 된 수를 round 규칙을 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-613">Round a number to a specified number of fractional digits by using a specified rounding convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <span data-ttu-id="686b2-614">또는</span><span class="sxs-lookup"><span data-stu-id="686b2-614">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<span data-ttu-id="686b2-615">Round는 <xref:System.Single> 소수 자릿수는 지정 된 규칙 반올림 및 전체 자릿수 손실을 최소화할 것인가 사용 하 여 지정 된 수의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-615">Round a <xref:System.Single> value to a specified number of fractional digits by using a specified rounding convention and minimizing the loss of precision.</span></span>|<span data-ttu-id="686b2-616">변환 된 <xref:System.Single> 에 <xref:System.Decimal> 호출 <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-616">Convert the <xref:System.Single> to a <xref:System.Decimal> and call <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>.</span></span>|  
|<span data-ttu-id="686b2-617">중간점 값을 반올림에서 정밀도의 문제를 최소화 하는 동안 지정된 된 수의 소수 자리 숫자를 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-617">Round a number to a specified number of fractional digits while minimizing problems of precision in rounding midpoint values.</span></span>|<span data-ttu-id="686b2-618">"보다 크거나 약" 비교를 구현 하는 반올림 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-618">Call a rounding method that implements a "greater than or approximately equal to" comparison.</span></span> <span data-ttu-id="686b2-619">참조 [반올림과 정밀도](#Precision)합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-619">See [Rounding and precision](#Precision).</span></span>|  
|<span data-ttu-id="686b2-620">소수 자릿수 값을 정수로 내림 하는 보다 큰 경우 소수 자릿수 값</span><span class="sxs-lookup"><span data-stu-id="686b2-620">Round a fractional value to an integer that is greater than the fractional value.</span></span> <span data-ttu-id="686b2-621">예를 들어 3.1를 4로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-621">For example, round 3.1 to 4.</span></span>|<xref:System.Math.Ceiling%2A>|  
|<span data-ttu-id="686b2-622">소수 자릿수 값을 정수로 내림 하는 보다 작은 경우 소수 자릿수 값</span><span class="sxs-lookup"><span data-stu-id="686b2-622">Round a fractional value to an integer that is less than the fractional value.</span></span> <span data-ttu-id="686b2-623">예를 들어 3.9 ~ 3로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-623">For example, round 3.9 to 3.</span></span>|<xref:System.Math.Floor%2A>|  
  
<a name="Midpoint"></a>   
## <a name="midpoint-values-and-rounding-conventions"></a><span data-ttu-id="686b2-624">중간점 값 및 반올림 규칙</span><span class="sxs-lookup"><span data-stu-id="686b2-624">Midpoint values and rounding conventions</span></span>  
 <span data-ttu-id="686b2-625">반올림 하려면 숫자 값을 지정 된 전체를 낮은 정밀도로 가장 가까운 값으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-625">Rounding involves converting a numeric value with a specified precision to the nearest value with less precision.</span></span> <span data-ttu-id="686b2-626">예를 들어 사용할 수 있습니다는 <xref:System.Math.Round%28System.Double%29> 3.4-3.0의 값을 반올림 하는 메서드 및 <xref:System.Math.Round%28System.Double%2CSystem.Int32%29> 메서드 3.579에 3.58의 값을 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-626">For example, you can use the <xref:System.Math.Round%28System.Double%29> method to round a value of 3.4 to 3.0, and the <xref:System.Math.Round%28System.Double%2CSystem.Int32%29> method to round a value of 3.579 to 3.58.</span></span>  
  
 <span data-ttu-id="686b2-627">중간점 값을 다음 결과에 가장 덜 중요 한 자리 값은 정확 하 게 절반만 두 숫자는 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-627">In a midpoint value, the value after the least significant digit in the result is precisely half way between two numbers.</span></span> <span data-ttu-id="686b2-628">예를 들어, 3.47500 중간값 해야 하면 두 소수 자릿수를 반올림 하 고 7.500는 정수로 반올림 하는 경우 중간점 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-628">For example, 3.47500 is a midpoint value if it is to be rounded two decimal places, and 7.500 is a midpoint value if it is to be rounded to an integer.</span></span> <span data-ttu-id="686b2-629">이러한 경우에 가장 가까운 값 없이 반올림 하는 규칙을 쉽게 식별할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-629">In these cases, the nearest value can't be easily identified without a rounding convention.</span></span>  
  
 <span data-ttu-id="686b2-630"><xref:System.Math.Round%2A> 메서드 중간점 값을 처리 하기 위한 두 가지 반올림 규칙을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-630">The <xref:System.Math.Round%2A> method supports two rounding conventions for handling midpoint values:</span></span>  
  
 <span data-ttu-id="686b2-631">**0에서 멀어지는 쪽으로 반올림**</span><span class="sxs-lookup"><span data-stu-id="686b2-631">**Rounding away from zero**</span></span>  
 <span data-ttu-id="686b2-632">중간점 값은 0에서 멀어지는 쪽 다음 번호로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-632">Midpoint values are rounded to the next number away from zero.</span></span> <span data-ttu-id="686b2-633">3.75 3.8, 예를 들어 반올림-3.8, 3.9 3.85 반올림-3.75 반올림-3.85-3.9를 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-633">For example, 3.75 rounds to 3.8, 3.85 rounds to 3.9, -3.75 rounds to -3.8, and -3.85 rounds to -3.9.</span></span> <span data-ttu-id="686b2-634">이러한 형태의 반올림으로 표시 됩니다는 <xref:System.MidpointRounding.AwayFromZero?displayProperty=nameWithType> 열거형 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-634">This form of rounding is represented by the <xref:System.MidpointRounding.AwayFromZero?displayProperty=nameWithType> enumeration member.</span></span>  
  
 <span data-ttu-id="686b2-635">0에서 멀어지는 쪽으로 반올림 하는 것은 가장 널리 알려진된 형태의 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-635">Rounding away from zero is the most widely known form of rounding.</span></span>  
  
 <span data-ttu-id="686b2-636">**가장 가까운 수로 반올림 또는 은행원의 반올림**</span><span class="sxs-lookup"><span data-stu-id="686b2-636">**Rounding to nearest, or banker's rounding**</span></span>  
 <span data-ttu-id="686b2-637">중간점 값은 가장 가까운 짝수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-637">Midpoint values are rounded to the nearest even number.</span></span> <span data-ttu-id="686b2-638">예를 들어 3.75와 3.85 3.8, 반올림 및-3.75와-3.85-3.8 반내림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-638">For example, both 3.75 and 3.85 round to 3.8, and both -3.75 and -3.85 round to -3.8.</span></span> <span data-ttu-id="686b2-639">이러한 형태의 반올림으로 표시 됩니다는 <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType> 열거형 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-639">This form of rounding is represented by the <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType> enumeration member.</span></span>  
  
 <span data-ttu-id="686b2-640">가장 가까운 수로 반올림는 반올림 재무 및 통계 작업에 사용 하 여 표준 형식의 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-640">Rounding to nearest is the standard form of rounding used in financial and statistical operations.</span></span> <span data-ttu-id="686b2-641">IEEE 표준 754, 섹션 4 준수합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-641">It conforms to IEEE Standard 754, section 4.</span></span> <span data-ttu-id="686b2-642">여러 반올림 연산에 사용 하는 경우에 일관 되 게 한 방향 중간점 값을 반올림 하 여 발생 하는 반올림 오류가 줄어듭니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-642">When used in multiple rounding operations, it reduces the rounding error that is caused by consistently rounding midpoint values in a single direction.</span></span> <span data-ttu-id="686b2-643">경우에 따라이 반올림 오류가 중요할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-643">In some cases, this rounding error can be significant.</span></span>  
  
 <span data-ttu-id="686b2-644">다음 예제 중간점 값을 한 방향에서으로 계속 반올림할 발생할 수 있는 편차입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-644">The following example illustrates the bias that can result from consistently rounding midpoint values in a single direction.</span></span> <span data-ttu-id="686b2-645">이 예제에서는 배열의 true 평균을 계산 <xref:System.Decimal> 값, 및 두 개의 규칙을 사용 하 여 배열에 값이 반올림 하는 경우 다음 평균을 계산 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-645">The example computes the true mean of an array of <xref:System.Decimal> values, and then computes the mean when the values in the array are rounded by using the two conventions.</span></span> <span data-ttu-id="686b2-646">이 예제에서는 true 평균과 가장 가까운 수로 반올림 때 발생 하 고 평균 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-646">In this example, the true mean and the mean that results when rounding to nearest are the same.</span></span> <span data-ttu-id="686b2-647">그러나 0에서 멀어지는 쪽으로 반올림 하는 경우 발생 하는 평균 true 평균값과에서.05 (또는 3.6%) 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-647">However, the mean that results when rounding away from zero differs by .05 (or by 3.6%) from the true mean.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/mean1.cs#2)]
 [!code-vb[System.Math.Round.Overload#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/mean1.vb#2)]  
  
 <span data-ttu-id="686b2-648">기본적으로는 <xref:System.Math.Round%2A> 메서드는 가장 가까운 규칙 수로 반올림을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-648">By default, the <xref:System.Math.Round%2A> method uses the rounding to nearest convention.</span></span> <span data-ttu-id="686b2-649">다음 표에서 오버 로드는 <xref:System.Math.Round%2A> 메서드 및 반올림 규칙 각각 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-649">The following table lists the overloads of the <xref:System.Math.Round%2A> method and the rounding convention that each uses.</span></span>  
  
|<span data-ttu-id="686b2-650">오버로드</span><span class="sxs-lookup"><span data-stu-id="686b2-650">Overload</span></span>|<span data-ttu-id="686b2-651">규칙 반올림</span><span class="sxs-lookup"><span data-stu-id="686b2-651">Rounding convention</span></span>|  
|--------------|-------------------------|  
|<xref:System.Math.Round%28System.Decimal%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Double%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Double%2CSystem.Int32%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29>|<span data-ttu-id="686b2-652">에 의해 결정 `mode` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-652">Determined by `mode` parameter.</span></span>|  
|<xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>|<span data-ttu-id="686b2-653">에 의해 결정 `mode` 매개 변수</span><span class="sxs-lookup"><span data-stu-id="686b2-653">Determined by `mode` parameter</span></span>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>|<span data-ttu-id="686b2-654">에 의해 결정 `mode` 매개 변수</span><span class="sxs-lookup"><span data-stu-id="686b2-654">Determined by `mode` parameter</span></span>|  
|<xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|<span data-ttu-id="686b2-655">에 의해 결정 `mode` 매개 변수</span><span class="sxs-lookup"><span data-stu-id="686b2-655">Determined by `mode` parameter</span></span>|  
  
<a name="Precision"></a>   
## <a name="rounding-and-precision"></a><span data-ttu-id="686b2-656">반올림 하 고 전체 자릿수</span><span class="sxs-lookup"><span data-stu-id="686b2-656">Rounding and precision</span></span>  
 <span data-ttu-id="686b2-657">반올림 연산을 중간점 값을 수행 하는지 여부를 확인 하기 위해는 <xref:System.Math.Round%2A> 메서드는 원래 값이 10으로 곱합니다<sup>n</sup>여기서 *n* 원하는 수의 소수 자릿수 반환 값의 자릿수 다음 지 여부를 결정 된 값의 나머지 소수 부분.5 보다 크거나 같은 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-657">In order to determine whether a rounding operation involves a midpoint value, the <xref:System.Math.Round%2A> method multiplies the original value to be rounded by 10<sup>n</sup>, where *n* is the desired number of fractional digits in the return value, and then determines whether the remaining fractional portion of the value is greater than or equal to .5.</span></span> <span data-ttu-id="686b2-658">이 테스트, 동등 여부에 대 한 설명 했 듯이 "같음 테스트" 섹션에는 약간 변형 하는 <xref:System.Double> 참조 항목 이진과 부동 소수점 형식의 문제로 인해 부동 소수점 값이 같은지 테스트 문제가 되는 표현과 정밀도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-658">This is a slight variation on a test for equality, and as discussed in the "Testing for Equality" section of the <xref:System.Double> reference topic, tests for equality with floating-point values are problematic because of the floating-point format's issues with binary representation and precision.</span></span> <span data-ttu-id="686b2-659">이 (때문에 전체 자릿수 손실) 보다 약간 작습니다. 5는 숫자의 소수 부분은 모두는 반올림 되지 위쪽으로 의미 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-659">This means that any fractional portion of a number that is slightly less than .5 (because of a loss of precision) will not be rounded upward.</span></span>  
  
 <span data-ttu-id="686b2-660">다음 예제에서 이 문제를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-660">The following example illustrates the problem.</span></span> <span data-ttu-id="686b2-661">반복 해 서 11.0을 순서 대로.1을 추가 하 고 결과를 가장 가까운 정수로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-661">It repeatedly adds .1 to 11.0 and rounds the result to the nearest integer.</span></span> <span data-ttu-id="686b2-662">반올림 규칙에 관계 없이 11.5 12로 반올림 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-662">Regardless of the rounding convention, 11.5 should round to 12.</span></span> <span data-ttu-id="686b2-663">그러나 예제의 출력으로 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-663">However, as the output from the example shows, it does not.</span></span> <span data-ttu-id="686b2-664">이 예제에서는 "R"을 사용 하 여 [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 표시 하는 부동 소수점 값의 전체 자릿수 및 값으로 반복 된 추가 하는 동안 정밀도 끊어졌습니다 있는지 표시 하 고 그 값이 실제로 11.499999999999998 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-664">The example uses the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) to display the floating point value's full precision, and shows that the value to be rounded has lost precision during repeated additions, and its value is actually 11.499999999999998.</span></span> <span data-ttu-id="686b2-665">.499999999999998.5 미만인 이기 때문에 값 하지는 다음으로 큰 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-665">Because .499999999999998 is less than .5, the value is not rounded to the next highest integer.</span></span> <span data-ttu-id="686b2-666">또한 예와 같이 상수 값 11.5을 할당 하는 경우이 문제가 발생 하지 않습니다는 <xref:System.Double> 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-666">As the example also shows, this problem does not occur if we simply assign the constant value 11.5 to a <xref:System.Double> variable.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/precision1.cs#7)]
 [!code-vb[System.Math.Round.Overload#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/precision1.vb#7)]  
  
 <span data-ttu-id="686b2-667">중간점 값을 반올림에서 정밀도의 문제는 다음 조건에서 발생할 가능성이 가장 높은:</span><span class="sxs-lookup"><span data-stu-id="686b2-667">Problems of precision in rounding midpoint values are most likely to arise in the following conditions:</span></span>  
  
-   <span data-ttu-id="686b2-668">경우 소수 자릿수 값은 부동 소수점 형식의 이진 형식에서 정확 하 게 표현할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-668">When a fractional value cannot be expressed precisely in the floating-point type's binary format.</span></span>  
  
-   <span data-ttu-id="686b2-669">때 하나 이상의 부동 소수점 연산에서 값으로 계산 됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-669">When the value to be rounded is calculated from one or more floating-point operations.</span></span>  
  
-   <span data-ttu-id="686b2-670">반올림할 값이 한 <xref:System.Single> 아닌 <xref:System.Double> 또는 <xref:System.Decimal>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-670">When the value to be rounded is a <xref:System.Single> rather than a <xref:System.Double> or <xref:System.Decimal>.</span></span> <span data-ttu-id="686b2-671">자세한 내용은 다음 섹션을 참조 하십시오. [반올림 및 단 정밀도 부동 소수점 값](#Single)합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-671">For more information, see the next section, [Rounding and single-precision floating-point values](#Single).</span></span>  
  
 <span data-ttu-id="686b2-672">작업 반올림에서 정밀도 부족 문제가 있는 경우에는 다음을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-672">In cases where the lack of precision in rounding operations is problematic, you can do the following:</span></span>  
  
-   <span data-ttu-id="686b2-673">반올림 연산을 반올림 하는 오버 로드를 호출 하는 경우는 <xref:System.Double> 값을 변경할 수 있습니다는 <xref:System.Double> 에 <xref:System.Decimal> 값 및 반올림 하는 오버 로드를 호출는 <xref:System.Decimal> 값을 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-673">If the rounding operation calls an overload that rounds a <xref:System.Double> value, you can change the <xref:System.Double> to a <xref:System.Decimal> value and call an overload that rounds a <xref:System.Decimal> value instead.</span></span> <span data-ttu-id="686b2-674">하지만 <xref:System.Decimal> 표현의 문제와 정밀도의 손실에도 데이터 형식에, 이러한 문제는 훨씬 덜 일반적인 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-674">Although the <xref:System.Decimal> data type also has problems of representation and loss of precision, these issues are far less common.</span></span>  
  
-   <span data-ttu-id="686b2-675">중간 값에 가까운 값으로 만족 스럽게 인지 여부를 확인 "거의 같은" 테스트를 수행 하는 사용자 지정 반올림 알고리즘을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-675">Define a custom rounding algorithm that performs a "nearly equal" test to determine whether the value to be rounded is acceptably close to a midpoint value.</span></span> <span data-ttu-id="686b2-676">다음 예제에서는 정의 `RoundApproximate` 소수 자릿수 값은 중간점 값 중간점 반올림이 적용 되도록 가까이 충분히 있는지 여부를 검사 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-676">The following example defines a `RoundApproximate` method that examines whether a fractional value is sufficiently near to a midpoint value to be subject to midpoint rounding.</span></span> <span data-ttu-id="686b2-677">예제의 출력에서 볼 수 있듯이 이전 예에서 같이 반올림 문제를 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-677">As the output from the example shows, it corrects the rounding problem shown in the previous example.</span></span>  
  
     [!code-csharp[System.Math.Round.Overload#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/precision2.cs#8)]
     [!code-vb[System.Math.Round.Overload#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/precision2.vb#8)]  
  
<a name="Single"></a>   
## <a name="rounding-and-single-precision-floating-point-values"></a><span data-ttu-id="686b2-678">반올림 및 단 정밀도 부동 소수점 값</span><span class="sxs-lookup"><span data-stu-id="686b2-678">Rounding and single-precision floating-point values</span></span>  
 <span data-ttu-id="686b2-679"><xref:System.Math.Round%2A> 형식의 인수를 받아들이는 오버 로드를 포함 하는 메서드 <xref:System.Decimal> 및 <xref:System.Double>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-679">The <xref:System.Math.Round%2A> method includes overloads that accept arguments of type <xref:System.Decimal> and <xref:System.Double>.</span></span> <span data-ttu-id="686b2-680">형식의 값을 반올림 하는 메서드가 없습니다 <xref:System.Single>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-680">There are no methods that round values of type <xref:System.Single>.</span></span> <span data-ttu-id="686b2-681">전달 하는 경우는 <xref:System.Single> 값의 오버 로드 중 하나에 <xref:System.Math.Round%2A> 메서드를 캐스팅 (C#) 인지 변환 (Visual Basic)에서는 <xref:System.Double>, 및 해당 <xref:System.Math.Round%2A> 오버 로드는 <xref:System.Double> 매개 변수 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-681">If you pass a <xref:System.Single> value to one of the overloads of the <xref:System.Math.Round%2A> method, it is cast (in C#) or converted (in Visual Basic) to a <xref:System.Double>, and the corresponding <xref:System.Math.Round%2A> overload with a <xref:System.Double> parameter is called.</span></span> <span data-ttu-id="686b2-682">확대 변환 이지만, 대체로의 전체 자릿수 손실이 다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-682">Although this is a widening conversion, it often involves a loss of precision, as the following example illustrates.</span></span> <span data-ttu-id="686b2-683">경우는 <xref:System.Single> 16.325의 값이 전달는 <xref:System.Math.Round%2A> 메서드 결과 16.32의 16.33와 하지 예상 결과 반올림 가장 가까운 규칙을 사용 하 여 두 자리로 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-683">When a <xref:System.Single> value of 16.325 is passed to the <xref:System.Math.Round%2A> method and rounded to two decimal places using the rounding to nearest convention, the result is 16.33 and not the expected result of 16.32.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/single1.cs#1)]
 [!code-vb[System.Math.Round.Overload#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/single1.vb#1)]  
  
 <span data-ttu-id="686b2-684">이 예기치 않은 결과 변환의 전체 자릿수 손실 된 <xref:System.Single> 값을 한 <xref:System.Double>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-684">This unexpected result is due to a loss of precision in the conversion of the <xref:System.Single> value to a <xref:System.Double>.</span></span> <span data-ttu-id="686b2-685">때문에 결과 <xref:System.Double> 16.325000762939453 값 중간점 값 되며 16.325 보다 크면, 항상 반올림 규모를 증가 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-685">Because the resulting <xref:System.Double> value of 16.325000762939453 is not a midpoint value and is greater than 16.325, it is always rounded upward.</span></span>  
  
 <span data-ttu-id="686b2-686">대부분의 경우에서 예제와 같이 정밀도 손실을 최소화 하거나 수 캐스팅 또는 변환에 의해 제거 되었습니다는 <xref:System.Single> 값을 한 <xref:System.Decimal>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-686">In many cases, as the example illustrates, the loss of precision can be minimized or eliminated by casting or converting the <xref:System.Single> value to a <xref:System.Decimal>.</span></span> <span data-ttu-id="686b2-687">참고, 축소 변환 이므로 필요 하다는 캐스트 연산자를 사용 하 여 또는 변환 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-687">Note that, because this is a narrowing conversion, it requires using a cast operator or calling a conversion method.</span></span>  
  
<a name="Round1_Example"></a>   
## <a name="mathrounddecimal-example"></a><span data-ttu-id="686b2-688">Math.Round(Decimal) 예제</span><span class="sxs-lookup"><span data-stu-id="686b2-688">Math.Round(Decimal) example</span></span>  
 <span data-ttu-id="686b2-689">다음 예제는 <xref:System.Math.Round%28System.Decimal%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="686b2-689">The following example demonstrates the <xref:System.Math.Round%28System.Decimal%29> method.</span></span> <span data-ttu-id="686b2-690"><xref:System.Decimal> 4.5의 값이 오버이 로드는 기본값을 사용 하기 때문에 5, 아닌 4에 반올림 <xref:System.MidpointRounding.ToEven> 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-690">Note that the <xref:System.Decimal> value of 4.5 rounds to 4 rather than 5, because this overload uses the default <xref:System.MidpointRounding.ToEven> convention.</span></span>  
  
 [!code-csharp[System.Math.Round#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/rounddecimal1.cs#6)]
 [!code-vb[System.Math.Round#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/rounddecimal1.vb#6)]  
  
<a name="Round2_Example"></a>   
## <a name="mathrounddouble-example"></a><span data-ttu-id="686b2-691">Math.Round(Double) 예제</span><span class="sxs-lookup"><span data-stu-id="686b2-691">Math.Round(Double) example</span></span>  
 <span data-ttu-id="686b2-692">다음 예제에서는 가장 가까운 정수 값으로 반올림 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-692">The following example demonstrates rounding to the nearest integer value.</span></span>  
  
 [!code-cpp[Classic Math.Round Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Math.Round Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Math.Round Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Math.Round Example/CS/source.cs#1)]
 [!code-vb[Classic Math.Round Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Math.Round Example/VB/source.vb#1)]  
  
<a name="Round3_Example"></a>   
## <a name="mathrounddecimal-int32-example"></a><span data-ttu-id="686b2-693">Math.Round (10 진수, Int32) 예제</span><span class="sxs-lookup"><span data-stu-id="686b2-693">Math.Round(Decimal, Int32) example</span></span>  
 <span data-ttu-id="686b2-694">다음 예에서는 2 자리의 소수 자리에 있는 값에 10 진수 값을 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-694">The following example rounds decimal values with two fractional digits to values that have a single fractional digit.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/source.cs#3)]
 [!code-vb[System.Math.Round.Overload#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/source.vb#3)]  
  
<a name="Round4_Example"></a>   
## <a name="mathrounddouble-int32-example"></a><span data-ttu-id="686b2-695">Math.Round (Int32 Double) 예제</span><span class="sxs-lookup"><span data-stu-id="686b2-695">Math.Round(Double, Int32) example</span></span>  
 <span data-ttu-id="686b2-696">다음 예에서는 2 자리의 소수 자리를가 하는 double 값을 double 값을 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-696">The following example rounds double values with two fractional digits to doubles that have a single fractional digit.</span></span>  
  
 [!code-cpp[Classic Math.Round2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Math.Round2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Math.Round2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Math.Round2 Example/CS/source.cs#1)]
 [!code-vb[Classic Math.Round2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Math.Round2 Example/VB/source.vb#1)]  
  
<a name="Round5_Example"></a>   
## <a name="mathrounddecimal-midpointrounding-example"></a><span data-ttu-id="686b2-697">Math.Round (10 진수, MidpointRounding) 예제</span><span class="sxs-lookup"><span data-stu-id="686b2-697">Math.Round(Decimal, MidpointRounding) example</span></span>  
 <span data-ttu-id="686b2-698">반환 된 값을 표시 하는 다음 예제는 <xref:System.Math.Round%28System.Decimal%29> 메서드를는 <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> 메서드는 `mode` 의 인수 <xref:System.MidpointRounding.ToEven>, 및 <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> 사용 하 여 메서드는 `mode` 의 인수 <xref:System.MidpointRounding.AwayFromZero>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-698">The following example displays values returned by the <xref:System.Math.Round%28System.Decimal%29> method, the <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.ToEven>, and the <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.AwayFromZero>.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/midpoint1.cs#5)]
 [!code-vb[System.Math.Round.Overload#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/midpoint1.vb#5)]  
  
<a name="Round6_Example"></a>   
## <a name="mathrounddouble-midpointrounding-example"></a><span data-ttu-id="686b2-699">Math.Round (Double MidpointRounding) 예제</span><span class="sxs-lookup"><span data-stu-id="686b2-699">Math.Round(Double, MidpointRounding) example</span></span>  
 <span data-ttu-id="686b2-700">반환 된 값을 표시 하는 다음 예제는 <xref:System.Math.Round%28System.Double%29> 메서드를는 <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> 메서드는 `mode` 의 인수 <xref:System.MidpointRounding.ToEven>, 및 <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> 사용 하 여 메서드는 `mode` 의 인수 <xref:System.MidpointRounding.AwayFromZero>합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-700">The following example displays values returned by the <xref:System.Math.Round%28System.Double%29> method, the <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.ToEven>, and the <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.AwayFromZero>.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/midpoint2.cs#6)]
 [!code-vb[System.Math.Round.Overload#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/midpoint2.vb#6)]  
  
<a name="Round7_Example"></a>   
## <a name="mathrounddecimal-int32-midpointrounding-example"></a><span data-ttu-id="686b2-701">Math.Round (Int32, Decimal, MidpointRounding) 예제</span><span class="sxs-lookup"><span data-stu-id="686b2-701">Math.Round(Decimal, Int32, MidpointRounding) example</span></span>  
 <span data-ttu-id="686b2-702">다음 예제에서는 사용 하는 방법을 <xref:System.Math.Round%2A> 메서드는 <xref:System.MidpointRounding> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-702">The following example demonstrates how to use the <xref:System.Math.Round%2A> method with the <xref:System.MidpointRounding> enumeration.</span></span>  
  
 [!code-cpp[math.midpointrounding#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.midpointrounding/cpp/mpr.cpp#1)]
 [!code-csharp[math.midpointrounding#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.midpointrounding/CS/mpr.cs#1)]
 [!code-vb[math.midpointrounding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.midpointrounding/VB/mpr.vb#1)]  
  
<a name="Round8_Example"></a>   
## <a name="mathrounddouble-int32-midpointrounding-example"></a><span data-ttu-id="686b2-703">Math.Round (Int32, Double MidpointRounding) 예제</span><span class="sxs-lookup"><span data-stu-id="686b2-703">Math.Round(Double, Int32, MidpointRounding) example</span></span>  
 <span data-ttu-id="686b2-704">다음 예제에서는 사용 하는 방법을 <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29> 메서드는 <xref:System.MidpointRounding> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-704">The following example demonstrates how to use the <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29> method with the <xref:System.MidpointRounding> enumeration.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/mpr.cs#4)]
 [!code-vb[System.Math.Round.Overload#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/mpr.vb#4)]  
  
<a name="Round_Versions"></a>   
## <a name="version-information"></a><span data-ttu-id="686b2-705">버전 정보</span><span class="sxs-lookup"><span data-stu-id="686b2-705">Version information</span></span>  
 <span data-ttu-id="686b2-706">.NET Framework</span><span class="sxs-lookup"><span data-stu-id="686b2-706">.NET Framework</span></span>  
 <span data-ttu-id="686b2-707">없이 오버 로드는 <xref:System.MidpointRounding> 매개 변수에서 지원 됩니다: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span><span class="sxs-lookup"><span data-stu-id="686b2-707">Overloads without a <xref:System.MidpointRounding> parameter are supported in: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span></span>  
<span data-ttu-id="686b2-708">사용 하는 오버 로드는 <xref:System.MidpointRounding> 매개 변수에서 지원 됩니다: 4.5, 4, 3.5, 3.0, 2.0</span><span class="sxs-lookup"><span data-stu-id="686b2-708">Overloads with a <xref:System.MidpointRounding> parameter are supported in: 4.5, 4, 3.5, 3.0, 2.0</span></span>  
  
 <span data-ttu-id="686b2-709">.NET Framework Client Profile</span><span class="sxs-lookup"><span data-stu-id="686b2-709">.NET Framework Client Profile</span></span>  
 <span data-ttu-id="686b2-710">모든 오버 로드에서 지원 됩니다: 4, 3.5 SP1</span><span class="sxs-lookup"><span data-stu-id="686b2-710">All overloads are supported in: 4, 3.5 SP1</span></span>  
  
 <span data-ttu-id="686b2-711">이식 가능한 클래스 라이브러리</span><span class="sxs-lookup"><span data-stu-id="686b2-711">Portable Class Library</span></span>  
 <span data-ttu-id="686b2-712">모든 오버 로드 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-712">All overloads are supported</span></span>  
  
 <span data-ttu-id="686b2-713">Windows 스토어 앱용 .NET</span><span class="sxs-lookup"><span data-stu-id="686b2-713">.NET for Windows Store apps</span></span>  
 <span data-ttu-id="686b2-714">모든 오버 로드에서 지원 됩니다: Windows 8</span><span class="sxs-lookup"><span data-stu-id="686b2-714">All overloads are supported in: Windows 8</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
        <altmember cref="M:System.Math.Truncate(System.Decimal)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-715">반올림할 10진수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-715">A decimal number to be rounded.</span></span></param>
        <summary><span data-ttu-id="686b2-716">10진수 값을 가장 가까운 정수 값으로 반올림합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-716">Rounds a decimal value to the nearest integral value.</span></span></summary>
        <returns><span data-ttu-id="686b2-717">매개 변수 <paramref name="d" />에 가장 가까운 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-717">The integer nearest parameter <paramref name="d" />.</span></span> <span data-ttu-id="686b2-718"><paramref name="d" />의 소수 부분이 하나는 짝수이고 다른 하나는 홀수인 두 정수의 중간인 경우에는 짝수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-718">If the fractional component of <paramref name="d" /> is halfway between two integers, one of which is even and the other odd, the even number is returned.</span></span> <span data-ttu-id="686b2-719">이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Decimal" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-719">Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="686b2-720">예제 및이 및 다른 오버 로드에 대 한 포괄적인 사용 정보는 `Round` 메서드를 참조는 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-720">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="686b2-721">결과가 <see cref="T:System.Decimal" /> 범위를 벗어나는 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-721">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="686b2-722">반올림할 배정밀도 부동 소수점 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-722">A double-precision floating-point number to be rounded.</span></span></param>
        <summary><span data-ttu-id="686b2-723">배정밀도 부동 소수점 값을 가장 가까운 정수 값으로 반올림합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-723">Rounds a double-precision floating-point value to the nearest integral value.</span></span></summary>
        <returns><span data-ttu-id="686b2-724"><paramref name="a" />에 가장 가까운 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-724">The integer nearest <paramref name="a" />.</span></span> <span data-ttu-id="686b2-725"><paramref name="a" />의 소수 부분이 하나는 짝수이고 다른 하나는 홀수인 두 정수의 중간인 경우에는 짝수가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-725">If the fractional component of <paramref name="a" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned.</span></span> <span data-ttu-id="686b2-726">이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Double" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-726">Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="686b2-727">예제 및이 및 다른 오버 로드에 대 한 포괄적인 사용 정보는 `Round` 메서드를 참조는 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-727">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="686b2-728">부동 소수점 수로 10 진 값 또는 부동 소수점 값에 산술 연산을 수행 하는 일부 경우에 발생할 수 있는 정밀도의 손실 때문에 <see cref="M:System.Math.Round(System.Double)" /> 메서드 나타날 수 없습니다. 중간점 값을 반올림 하는 가장 근사한 짝수 정수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-728">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double)" /> method may not appear to round midpoint values to the nearest even integer.</span></span> <span data-ttu-id="686b2-729">다음 예제에서는 부동 소수점 값 순서 대로.1에 유한 이진 표현이 없기 때문에 첫 번째 호출 하는 <see cref="M:System.Math.Round(System.Double)" /> 11.5의 값으로 메서드는 12가 아닌 11을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-729">In the following example, because the floating-point value .1 has no finite binary representation, the first call to the <see cref="M:System.Math.Round(System.Double)" /> method with a value of 11.5 returns 11 instead of 12.</span></span>  
  
 [!code-csharp[System.Math.Round#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round2.cs#1)]
 [!code-vb[System.Math.Round#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round2.vb#1)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, decimals As Integer) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, int decimals);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-730">반올림할 10진수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-730">A decimal number to be rounded.</span></span></param>
        <param name="decimals"><span data-ttu-id="686b2-731">반환 값의 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-731">The number of decimal places in the return value.</span></span></param>
        <summary><span data-ttu-id="686b2-732">10진수 값을 지정된 소수 자릿수로 반올림합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-732">Rounds a decimal value to a specified number of fractional digits.</span></span></summary>
        <returns><span data-ttu-id="686b2-733"><paramref name="d" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="decimals" />에 가장 가까운 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-733">The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="686b2-734">예제 및이 및 다른 오버 로드에 대 한 포괄적인 사용 정보는 `Round` 메서드를 참조는 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-734">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="686b2-735"><paramref name="decimals" />가 0보다 작거나 28보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-735"><paramref name="decimals" /> is less than 0 or greater than 28.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="686b2-736">결과가 <see cref="T:System.Decimal" /> 범위를 벗어나는 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-736">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, mode As MidpointRounding) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-737">반올림할 10진수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-737">A decimal number to be rounded.</span></span></param>
        <param name="mode"><span data-ttu-id="686b2-738">서로 다른 두 숫자 중간에 있는 <c>d</c>의 반올림 방법에 대한 사양입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-738">Specification for how to round <c>d</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="686b2-739">10진 값을 가장 가까운 정수로 반올림합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-739">Rounds a decimal value to the nearest integer.</span></span> <span data-ttu-id="686b2-740">두 숫자의 중간에 있는 값을 반올림하는 방법을 지정하는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-740">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="686b2-741"><paramref name="d" />에 가장 가까운 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-741">The integer nearest <paramref name="d" />.</span></span> <span data-ttu-id="686b2-742"><paramref name="d" />가 두 숫자의 중간이고, 이 숫자 중 하나는 짝수이고 다른 하나는 홀수이면, <paramref name="mode" />에 의해 두 숫자 중 하나가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-742">If <paramref name="d" /> is halfway between two numbers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="686b2-743">예제 및이 및 다른 오버 로드에 대 한 포괄적인 사용 정보는 `Round` 메서드를 참조는 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-743">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="686b2-744"><paramref name="mode" />가 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-744"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="686b2-745">결과가 <see cref="T:System.Decimal" /> 범위를 벗어나는 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-745">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, digits As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, int digits);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-746">반올림할 배정밀도 부동 소수점 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-746">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="digits"><span data-ttu-id="686b2-747">반환 값의 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-747">The number of fractional digits in the return value.</span></span></param>
        <summary><span data-ttu-id="686b2-748">배정밀도 부동 소수점 값을 지정된 소수 자릿수로 반올림합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-748">Rounds a double-precision floating-point value to a specified number of fractional digits.</span></span></summary>
        <returns><span data-ttu-id="686b2-749"><paramref name="value" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="digits" />에 가장 가까운 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-749">The number nearest to <paramref name="value" /> that contains a number of fractional digits equal to <paramref name="digits" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="686b2-750">예제 및이 및 다른 오버 로드에 대 한 포괄적인 사용 정보는 `Round` 메서드를 참조는 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-750">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="686b2-751"><paramref name="digits" />가 0보다 작거나 15보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-751"><paramref name="digits" /> is less than 0 or greater than 15.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="686b2-752">부동 소수점 수로 10 진 값 또는 부동 소수점 값에 산술 연산을 수행 하는 일부 경우에 발생할 수 있는 정밀도의 손실 때문에 <see cref="M:System.Math.Round(System.Double,System.Int32)" /> 메서드 나타날 수 없습니다. 중간점 값을 반올림 하는 가장 가까운 짝수 값에는 <paramref name="digits" /> 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-752">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.Int32)" /> method may not appear to round midpoint values to the nearest even value in the <paramref name="digits" /> decimal position.</span></span> <span data-ttu-id="686b2-753">이 다음 예에서 2.135 2.14 대신 2.13의 반올림 여기서 나와 있습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-753">This is illustrated in the following example, where 2.135 is rounded to 2.13 instead of 2.14.</span></span> <span data-ttu-id="686b2-754">이 메서드를 내부적으로 곱합니다 때문에 발생 <paramref name="value" /> 10<sup>자릿수</sup>, 곱하기 연산을 경우 전체 자릿수 손실이 발생 하지 않도록에서 있고 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-754">This occurs because internally the method multiplies <paramref name="value" /> by 10<sup>digits</sup>, and the multiplication operation in this case suffers from a loss of precision.</span></span>  
  
 [!code-csharp[System.Math.Round#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round3.cs#2)]
 [!code-vb[System.Math.Round#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round3.vb#2)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, mode As MidpointRounding) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-755">반올림할 배정밀도 부동 소수점 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-755">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="mode"><span data-ttu-id="686b2-756">서로 다른 두 숫자 중간에 있는 <c>value</c>의 반올림 방법에 대한 사양입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-756">Specification for how to round <c>value</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="686b2-757">배정밀도 부동 소수점 값을 가장 가까운 정수로 반올림합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-757">Rounds a double-precision floating-point value to the nearest integer.</span></span> <span data-ttu-id="686b2-758">두 숫자의 중간에 있는 값을 반올림하는 방법을 지정하는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-758">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="686b2-759"><paramref name="value" />에 가장 가까운 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-759">The integer nearest <paramref name="value" />.</span></span> <span data-ttu-id="686b2-760"><paramref name="value" />가 두 정수의 중간이고, 이 숫자 중 하나는 짝수이고 다른 하나는 홀수이면, <paramref name="mode" />에 의해 두 숫자 중 하나가 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-760">If <paramref name="value" /> is halfway between two integers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="686b2-761">예제 및이 및 다른 오버 로드에 대 한 포괄적인 사용 정보는 `Round` 메서드를 참조는 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-761">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="686b2-762"><paramref name="mode" />가 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-762"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="686b2-763">부동 소수점 수로 10 진 값 또는 부동 소수점 값에 산술 연산을 수행 하는 일부 경우에 발생할 수 있는 정밀도의 손실 때문에 <see cref="M:System.Math.Round(System.Double,System.MidpointRounding)" /> 메서드 나타날 수 없습니다. 중간점 값을 반올림 하는 가장 근사한 짝수 정수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-763">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.MidpointRounding)" /> method may not appear to round midpoint values to the nearest even integer.</span></span> <span data-ttu-id="686b2-764">다음 예제에서는 부동 소수점 값 순서 대로.1에 유한 이진 표현이 없기 때문에 첫 번째 호출 하는 <see cref="M:System.Math.Round(System.Double)" /> 11.5의 값으로 메서드는 12가 아닌 11을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-764">In the following example, because the floating-point value .1 has no finite binary representation, the first call to the <see cref="M:System.Math.Round(System.Double)" /> method with a value of 11.5 returns 11 instead of 12.</span></span>  
  
 [!code-csharp[System.Math.Round#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round5.cs#4)]
 [!code-vb[System.Math.Round#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round5.vb#4)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, decimals As Integer, mode As MidpointRounding) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, int decimals, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-765">반올림할 10진수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-765">A decimal number to be rounded.</span></span></param>
        <param name="decimals"><span data-ttu-id="686b2-766">반환 값의 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-766">The number of decimal places in the return value.</span></span></param>
        <param name="mode"><span data-ttu-id="686b2-767">서로 다른 두 숫자 중간에 있는 <c>d</c>의 반올림 방법에 대한 사양입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-767">Specification for how to round <c>d</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="686b2-768">10진수 값을 지정된 소수 자릿수로 반올림합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-768">Rounds a decimal value to a specified number of fractional digits.</span></span> <span data-ttu-id="686b2-769">두 숫자의 중간에 있는 값을 반올림하는 방법을 지정하는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-769">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="686b2-770"><paramref name="d" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="decimals" />에 가장 가까운 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-770">The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />.</span></span> <span data-ttu-id="686b2-771"><paramref name="d" />의 소수 자릿수가 <paramref name="decimals" />보다 작은 경우, <paramref name="d" />가 변경되지 않은 상태로 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-771">If <paramref name="d" /> has fewer fractional digits than <paramref name="decimals" />, <paramref name="d" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="686b2-772">예제 및이 및 다른 오버 로드에 대 한 포괄적인 사용 정보는 `Round` 메서드를 참조는 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-772">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="686b2-773"><paramref name="decimals" />가 0보다 작거나 28보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-773"><paramref name="decimals" /> is less than 0 or greater than 28.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="686b2-774"><paramref name="mode" />가 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-774"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="686b2-775">결과가 <see cref="T:System.Decimal" /> 범위를 벗어나는 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-775">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, digits As Integer, mode As MidpointRounding) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, int digits, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-776">반올림할 배정밀도 부동 소수점 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-776">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="digits"><span data-ttu-id="686b2-777">반환 값의 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-777">The number of fractional digits in the return value.</span></span></param>
        <param name="mode"><span data-ttu-id="686b2-778">서로 다른 두 숫자 중간에 있는 <c>value</c>의 반올림 방법에 대한 사양입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-778">Specification for how to round <c>value</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="686b2-779">배정밀도 부동 소수점 값을 지정된 소수 자릿수로 반올림합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-779">Rounds a double-precision floating-point value to a specified number of fractional digits.</span></span> <span data-ttu-id="686b2-780">두 숫자의 중간에 있는 값을 반올림하는 방법을 지정하는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-780">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="686b2-781"><paramref name="digits" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="value" />에 가장 가까운 수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-781">The number nearest to <paramref name="value" /> that has a number of fractional digits equal to <paramref name="digits" />.</span></span> <span data-ttu-id="686b2-782"><paramref name="value" />의 소수 자릿수가 <paramref name="digits" />보다 작은 경우, <paramref name="value" />가 변경되지 않은 상태로 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-782">If <paramref name="value" /> has fewer fractional digits than <paramref name="digits" />, <paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="686b2-783">예제 및이 및 다른 오버 로드에 대 한 포괄적인 사용 정보는 `Round` 메서드를 참조는 <xref:System.Math.Round%2A> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-783">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="686b2-784"><paramref name="digits" />가 0보다 작거나 15보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-784"><paramref name="digits" /> is less than 0 or greater than 15.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="686b2-785"><paramref name="mode" />가 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-785"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="686b2-786">부동 소수점 수로 10 진 값 또는 부동 소수점 값에 산술 연산을 수행 하는 일부 경우에 발생할 수 있는 전체 자릿수 손실을 인해는 <see cref="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" /> 메서드를 지정 된 대로 중간점 값을 반올림할 나타나지 않을 수 있습니다 여는 <paramref name="mode" /> 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-786">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" /> method may not appear to round midpoint values as specified by the <paramref name="mode" /> parameter.</span></span> <span data-ttu-id="686b2-787">이 다음 예에서 2.135 2.14 대신 2.13의 반올림 여기서 나와 있습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-787">This is illustrated in the following example, where 2.135 is rounded to 2.13 instead of 2.14.</span></span> <span data-ttu-id="686b2-788">이 메서드를 내부적으로 곱합니다 때문에 발생 <paramref name="value" /> 10<sup>자릿수</sup>, 곱하기 연산을 경우 전체 자릿수 손실이 발생 하지 않도록에서 있고 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-788">This occurs because internally the method multiplies <paramref name="value" /> by 10<sup>digits</sup>, and the multiplication operation in this case suffers from a loss of precision.</span></span>  
  
 [!code-csharp[System.Math.Round#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round4.cs#3)]
 [!code-vb[System.Math.Round#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round4.vb#3)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Sign">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="686b2-789">숫자의 부호를 나타내는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-789">Returns an integer that indicates the sign of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-790">부호 있는 10진수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-790">A signed decimal number.</span></span></param>
        <summary><span data-ttu-id="686b2-791">10진수의 부호를 나타내는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-791">Returns an integer that indicates the sign of a decimal number.</span></span></summary>
        <returns><span data-ttu-id="686b2-792">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-792">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="686b2-793"><list type="table"><listheader><term> 반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-793"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="686b2-794"></term><description> 평균</span><span class="sxs-lookup"><span data-stu-id="686b2-794"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="686b2-795"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="686b2-795"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="686b2-796"></term><description><paramref name="value" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-796"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="686b2-797"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="686b2-797"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="686b2-798"></term><description><paramref name="value" />가 0과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-798"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="686b2-799"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="686b2-799"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="686b2-800"></term><description><paramref name="value" />가 0보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-800"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-801">다음 예제에서는 사용 하는 방법을 <xref:System.Math.Sign%28System.Decimal%29> 의 부호를 확인 하는 메서드는 <xref:System.Decimal> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-801">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Decimal%29> method to determine the sign of a <xref:System.Decimal> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-802">부호 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-802">A signed number.</span></span></param>
        <summary><span data-ttu-id="686b2-803">배정밀도 부동 소수점 수의 부호를 나타내는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-803">Returns an integer that indicates the sign of a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="686b2-804">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-804">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="686b2-805"><list type="table"><listheader><term> 반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-805"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="686b2-806"></term><description> 평균</span><span class="sxs-lookup"><span data-stu-id="686b2-806"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="686b2-807"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="686b2-807"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="686b2-808"></term><description><paramref name="value" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-808"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="686b2-809"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="686b2-809"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="686b2-810"></term><description><paramref name="value" />가 0과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-810"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="686b2-811"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="686b2-811"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="686b2-812"></term><description><paramref name="value" />가 0보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-812"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-813">다음 예제에서는 사용 하는 방법을 <xref:System.Math.Sign%28System.Double%29> 의 부호를 확인 하는 메서드는 <xref:System.Double> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-813">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Double%29> method to determine the sign of a <xref:System.Double> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArithmeticException">
          <span data-ttu-id="686b2-814"><paramref name="value" />가 <see cref="F:System.Double.NaN" />와 같은 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-814"><paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-815">부호 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-815">A signed number.</span></span></param>
        <summary><span data-ttu-id="686b2-816">16비트 부호 있는 정수의 부호를 나타내는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-816">Returns an integer that indicates the sign of a 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="686b2-817">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-817">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="686b2-818"><list type="table"><listheader><term> 반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-818"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="686b2-819"></term><description> 평균</span><span class="sxs-lookup"><span data-stu-id="686b2-819"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="686b2-820"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="686b2-820"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="686b2-821"></term><description><paramref name="value" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-821"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="686b2-822"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="686b2-822"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="686b2-823"></term><description><paramref name="value" />가 0과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-823"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="686b2-824"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="686b2-824"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="686b2-825"></term><description><paramref name="value" />가 0보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-825"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-826">다음 예제에서는 사용 하는 방법을 <xref:System.Math.Sign%28System.Int16%29> 의 부호를 확인 하는 메서드는 <xref:System.Int16> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-826">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int16%29> method to determine the sign of an <xref:System.Int16> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-827">부호 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-827">A signed number.</span></span></param>
        <summary><span data-ttu-id="686b2-828">32비트 부호 있는 정수의 부호를 나타내는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-828">Returns an integer that indicates the sign of a 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="686b2-829">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-829">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="686b2-830"><list type="table"><listheader><term> 반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-830"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="686b2-831"></term><description> 평균</span><span class="sxs-lookup"><span data-stu-id="686b2-831"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="686b2-832"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="686b2-832"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="686b2-833"></term><description><paramref name="value" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-833"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="686b2-834"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="686b2-834"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="686b2-835"></term><description><paramref name="value" />가 0과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-835"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="686b2-836"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="686b2-836"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="686b2-837"></term><description><paramref name="value" />가 0보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-837"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-838">다음 예제에서는 사용 하는 방법을 <xref:System.Math.Sign%28System.Int32%29> 의 부호를 확인 하는 메서드는 <xref:System.Int32> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-838">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int32%29> method to determine the sign of an <xref:System.Int32> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-839">부호 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-839">A signed number.</span></span></param>
        <summary><span data-ttu-id="686b2-840">64비트 부호 있는 정수의 부호를 나타내는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-840">Returns an integer that indicates the sign of a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="686b2-841">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-841">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="686b2-842"><list type="table"><listheader><term> 반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-842"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="686b2-843"></term><description> 평균</span><span class="sxs-lookup"><span data-stu-id="686b2-843"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="686b2-844"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="686b2-844"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="686b2-845"></term><description><paramref name="value" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-845"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="686b2-846"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="686b2-846"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="686b2-847"></term><description><paramref name="value" />가 0과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-847"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="686b2-848"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="686b2-848"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="686b2-849"></term><description><paramref name="value" />가 0보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-849"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-850">다음 예제에서는 사용 하는 방법을 <xref:System.Math.Sign%28System.Int64%29> 의 부호를 확인 하는 메서드는 <xref:System.Int64> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-850">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int64%29> method to determine the sign of an <xref:System.Int64> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-851">부호 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-851">A signed number.</span></span></param>
        <summary><span data-ttu-id="686b2-852">8비트 부호 있는 정수의 부호를 나타내는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-852">Returns an integer that indicates the sign of an 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="686b2-853">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-853">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="686b2-854"><list type="table"><listheader><term> 반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-854"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="686b2-855"></term><description> 평균</span><span class="sxs-lookup"><span data-stu-id="686b2-855"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="686b2-856"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="686b2-856"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="686b2-857"></term><description><paramref name="value" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-857"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="686b2-858"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="686b2-858"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="686b2-859"></term><description><paramref name="value" />가 0과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-859"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="686b2-860"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="686b2-860"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="686b2-861"></term><description><paramref name="value" />가 0보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-861"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-862">다음 예제에서는 사용 하는 방법을 <xref:System.Math.Sign%28System.SByte%29> 의 부호를 확인 하는 메서드는 <xref:System.SByte> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-862">The following example demonstrates how to use the <xref:System.Math.Sign%28System.SByte%29> method to determine the sign of an <xref:System.SByte> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-863">부호 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-863">A signed number.</span></span></param>
        <summary><span data-ttu-id="686b2-864">단정밀도 부동 소수점 숫자의 부호를 나타내는 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-864">Returns an integer that indicates the sign of a single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="686b2-865">다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-865">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="686b2-866"><list type="table"><listheader><term> 반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-866"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="686b2-867"></term><description> 평균</span><span class="sxs-lookup"><span data-stu-id="686b2-867"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="686b2-868"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="686b2-868"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="686b2-869"></term><description><paramref name="value" />가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-869"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="686b2-870"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="686b2-870"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="686b2-871"></term><description><paramref name="value" />가 0과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-871"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="686b2-872"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="686b2-872"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="686b2-873"></term><description><paramref name="value" />가 0보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-873"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-874">다음 예제에서는 사용 하는 방법을 <xref:System.Math.Sign%28System.Single%29> 의 부호를 확인 하는 메서드는 <xref:System.Single> 값 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-874">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Single%29> method to determine the sign of a <xref:System.Single> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArithmeticException">
          <span data-ttu-id="686b2-875"><paramref name="value" />가 <see cref="F:System.Single.NaN" />와 같은 경우</span><span class="sxs-lookup"><span data-stu-id="686b2-875"><paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static double Sin (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sin(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sin(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="686b2-876">라디안 단위의 각도입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-876">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="686b2-877">지정된 각도의 사인을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-877">Returns the sine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="686b2-878"><paramref name="a" />의 사인입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-878">The sine of <paramref name="a" />.</span></span> <span data-ttu-id="686b2-879"><paramref name="a" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-879">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-880">각도 `a`, 라디안에서 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-880">The angle, `a`, must be in radians.</span></span> <span data-ttu-id="686b2-881">곱합니다  <xref:System.Math.PI?displayProperty=nameWithType> /180을 각도를 라디안으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-881">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 <span data-ttu-id="686b2-882">허용 되는 값의 `a` 약-9223372036854775295에서 약 9223372036854775295 까지입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-882">Acceptable values of `a` range from approximately -9223372036854775295 to approximately 9223372036854775295.</span></span> <span data-ttu-id="686b2-883">이 범위 밖의 값에 대 한는 <xref:System.Math.Sin%2A> 메서드 반환 `a` 예외를 throw 하는 대신 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-883">For values outside of this range, the <xref:System.Math.Sin%2A> method returns `a` unchanged rather than throwing an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-884">다음 예제에서는 <xref:System.Math.Sin%2A> 선택 된 각도 대 한 삼각 함수를 평가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-884">The following example uses <xref:System.Math.Sin%2A> to evaluate certain trigonometric identities for selected angles.</span></span>  
  
 [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]
 [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]
 [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static double Sinh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sinh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sinh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-885">라디안 단위의 각도입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-885">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="686b2-886">지정된 각도의 하이퍼볼릭 사인을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-886">Returns the hyperbolic sine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="686b2-887"><paramref name="value" />의 쌍곡선 사인입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-887">The hyperbolic sine of <paramref name="value" />.</span></span> <span data-ttu-id="686b2-888"><paramref name="value" />가 <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> 또는 <see cref="F:System.Double.NaN" />과 같으면 이 메서드는 <paramref name="value" />와 같은 <see cref="T:System.Double" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-888">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns a <see cref="T:System.Double" /> equal to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-889">각도 `value`, 라디안에서 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-889">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="686b2-890">곱합니다  <xref:System.Math.PI?displayProperty=nameWithType> /180을 각도를 라디안으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-890">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-891">다음 예제에서는 <xref:System.Math.Sinh%2A> 선택한 값에 대 한 하이퍼볼릭 평가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-891">The following example uses <xref:System.Math.Sinh%2A> to evaluate certain hyperbolic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]
 [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]
 [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static double Sqrt (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sqrt(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sqrt(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sqrt(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-892">제곱근을 구할 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-892">The number whose square root is to be found.</span></span></param>
        <summary><span data-ttu-id="686b2-893">지정된 숫자의 제곱근을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-893">Returns the square root of a specified number.</span></span></summary>
        <returns><span data-ttu-id="686b2-894">다음 표에 나와 있는 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-894">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="686b2-895"><list type="table"><listheader><term><paramref name="d" /> 매개 변수</span><span class="sxs-lookup"><span data-stu-id="686b2-895"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="686b2-896"></term><description> 반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-896"></term><description> Return value</span></span>  
  
 <span data-ttu-id="686b2-897"></description></listheader><item><term> 0 또는 양수</span><span class="sxs-lookup"><span data-stu-id="686b2-897"></description></listheader><item><term> Zero or positive</span></span>  
  
 <span data-ttu-id="686b2-898"></term><description> <paramref name="d" />의 양의 제곱근</span><span class="sxs-lookup"><span data-stu-id="686b2-898"></term><description> The positive square root of <paramref name="d" />.</span></span>  
  
 <span data-ttu-id="686b2-899"></description></item><item><term> 음수</span><span class="sxs-lookup"><span data-stu-id="686b2-899"></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="686b2-900"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 같음 <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 같음 <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="686b2-900"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equals <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equals <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="686b2-901">사각형의 영역의 제곱근 제곱 변의 길이 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-901">The square root of the area of a square represents the length of any side of the square.</span></span> <span data-ttu-id="686b2-902">다음 예제에서는 미국에서 일부 도시 영역을 표시 하 고 사각형으로 표시 된 경우 각 도시 크기를 느낄 수 있도록 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-902">The following example displays the area of some cities in the United States and gives an impression of each city's size if it were represented by a square.</span></span>  
  
 [!code-csharp[System.Math.Sqrt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.sqrt/cs/sqrt1.cs#1)]
 [!code-vb[System.Math.Sqrt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.sqrt/vb/sqrt1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Pow(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static double Tan (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tan(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Tan(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tan(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="686b2-903">라디안 단위의 각도입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-903">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="686b2-904">지정된 각도의 탄젠트를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-904">Returns the tangent of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="686b2-905"><paramref name="a" />의 접선입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-905">The tangent of <paramref name="a" />.</span></span> <span data-ttu-id="686b2-906"><paramref name="a" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-906">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-907">각도 `a`, 라디안에서 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-907">The angle, `a`, must be in radians.</span></span> <span data-ttu-id="686b2-908">곱합니다  <xref:System.Math.PI?displayProperty=nameWithType> /180을 각도를 라디안으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-908">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-909">다음 예제에서는 각도의 탄젠트를 계산 하는 콘솔에 표시 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-909">The following example demonstrates how to calculate the tangent of an angle and display it to the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static double Tanh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tanh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tanh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="686b2-910">라디안 단위의 각도입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-910">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="686b2-911">지정된 각도의 하이퍼볼릭 탄젠트를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-911">Returns the hyperbolic tangent of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="686b2-912"><paramref name="value" />의 쌍곡선 접선입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-912">The hyperbolic tangent of <paramref name="value" />.</span></span> <span data-ttu-id="686b2-913"><paramref name="value" />가 <see cref="F:System.Double.NegativeInfinity" />와 같으면 이 메서드는 -1을 반환하고</span><span class="sxs-lookup"><span data-stu-id="686b2-913">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, this method returns -1.</span></span> <span data-ttu-id="686b2-914">값이 <see cref="F:System.Double.PositiveInfinity" />와 같으면 이 메서드는 1을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-914">If value is equal to <see cref="F:System.Double.PositiveInfinity" />, this method returns 1.</span></span> <span data-ttu-id="686b2-915"><paramref name="value" />가 <see cref="F:System.Double.NaN" />과 같으면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-915">If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-916">각도 `value`, 라디안에서 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-916">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="686b2-917">곱합니다  <xref:System.Math.PI?displayProperty=nameWithType> /180을 각도를 라디안으로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-917">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-918">다음 예제에서는 <xref:System.Math.Tanh%2A> 하이퍼볼릭 탄젠트 선택한 값에 대 한 평가 합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-918">The following example uses <xref:System.Math.Tanh%2A> to evaluate certain hyperbolic tangent identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Tanh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Tanh/CPP/tanh.cpp#1)]
 [!code-csharp[System.Math.Tanh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Tanh/CS/tanh.cs#1)]
 [!code-vb[System.Math.Tanh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Tanh/VB/tanh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Truncate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="686b2-919">숫자의 정수 부분을 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-919">Calculates the integral part of a number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-920">숫자 0에 가장 가까운 정수로 반올림 됩니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-920">The number is rounded to the nearest integer towards zero.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static decimal Truncate (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Truncate(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Truncate(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Truncate(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-921">잘라낼 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-921">A number to truncate.</span></span></param>
        <summary><span data-ttu-id="686b2-922">지정된 10진수에서 정수 부분을 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-922">Calculates the integral part of a specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="686b2-923"><paramref name="d" />의 정수 부분으로, 소수 자릿수를 삭제한 후 남은 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-923">The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-924"><xref:System.Math.Truncate%2A> 반올림 `d` 를 0으로 가장 가까운 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-924"><xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-925">다음 예제에서는 <xref:System.Math.Truncate%28System.Decimal%29> 메서드를 양수와 음수 모두 자를 <xref:System.Decimal> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-925">The following example calls the <xref:System.Math.Truncate%28System.Decimal%29> method to truncate both a positive and a negative <xref:System.Decimal> value.</span></span>  
  
 [!code-csharp[System.Math.Truncate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#2)]
 [!code-vb[System.Math.Truncate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static double Truncate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Truncate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Truncate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Truncate(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="686b2-926">잘라낼 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-926">A number to truncate.</span></span></param>
        <summary><span data-ttu-id="686b2-927">지정한 배정밀도 부동 소수점 숫자의 정수 부분을 계산합니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-927">Calculates the integral part of a specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="686b2-928"><paramref name="d" />의 정수 부분으로, 소수 자릿수를 삭제한 후 남은 숫자 또는 다음 테이블에 나열된 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-928">The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.</span></span>  
  
 <span data-ttu-id="686b2-929"><list type="table"><listheader><term><paramref name="d" /></term><description> 반환 값</span><span class="sxs-lookup"><span data-stu-id="686b2-929"><list type="table"><listheader><term><paramref name="d" /></term><description> Return value</span></span>  
  
 </description></listheader><item><term><see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term><see cref="F:System.Double.NegativeInfinity" /></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term><see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="686b2-930"><xref:System.Math.Truncate%2A> 반올림 `d` 를 0으로 가장 가까운 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-930"><xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="686b2-931">다음 예제에서는 <xref:System.Math.Truncate%28System.Double%29> 메서드를 양수와 음수 모두 자를 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="686b2-931">The following example calls the <xref:System.Math.Truncate%28System.Double%29> method to truncate both a positive and a negative <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Math.Truncate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#1)]
 [!code-vb[System.Math.Truncate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
      </Docs>
    </Member>
  </Members>
</Type>