<Type Name="ICloneable" FullName="System.ICloneable">
  <TypeSignature Language="C#" Value="public interface ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.ICloneable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICloneable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="64c02-101">복제(클래스에서 기존 인스턴스와 같은 값을 갖는 새 인스턴스를 만듦)를 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-101">Supports cloning, which creates a new instance of a class with the same value as an existing instance.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64c02-102"><xref:System.ICloneable> 인터페이스를 사용 하면 기존 개체의 복사본을 만드는 사용자 지정된 구현을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-102">The <xref:System.ICloneable> interface enables you to provide a customized implementation that creates a copy of an existing object.</span></span> <span data-ttu-id="64c02-103"><xref:System.ICloneable> 한 멤버를 포함 하는 인터페이스는 <xref:System.ICloneable.Clone%2A> 에서 제공 하는 것 이상의 복제 지원을 제공 하기 위한 메서드를 <xref:System.Object.MemberwiseClone%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-103">The <xref:System.ICloneable> interface contains one member, the <xref:System.ICloneable.Clone%2A> method, which is intended to provide cloning support beyond that supplied by <xref:System.Object.MemberwiseClone%2A?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="64c02-104">전체 단순 복사본 및 예제 복사본 및, 복제에 대 한 자세한 내용은 참조는 <xref:System.Object.MemberwiseClone%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="64c02-104">For more information about cloning, deep versus shallow copies, and examples, see the <xref:System.Object.MemberwiseClone%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="64c02-105"><see cref="T:System.ICloneable" /> 인터페이스 하기만 하는의 구현에서 <see cref="M:System.ICloneable.Clone" /> 메서드는 현재 개체의 복사본을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-105">The <see cref="T:System.ICloneable" /> interface simply requires that your implementation of the <see cref="M:System.ICloneable.Clone" /> method return a copy of the current object instance.</span></span> <span data-ttu-id="64c02-106">복제 작업 전체 복사본을, 단순 복사본 또는 사이 이와 수행 하는지 여부를 지정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-106">It does not specify whether the cloning operation performs a deep copy, a shallow copy, or something in between.</span></span> <span data-ttu-id="64c02-107">요구 하지도 않습니다 원래 인스턴스를 새 인스턴스로 복사 하는 모든 속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-107">Nor does it require all property values of the original instance to be copied to the new instance.</span></span> <span data-ttu-id="64c02-108">예를 들어는 <see cref="M:System.Globalization.NumberFormatInfo.Clone" /> 메서드를 제외한 모든 속성의 단순 복사본을 수행는 <see cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" /> 속성; 항상이 속성 값을 설정 <see langword="false" /> 복제 된 개체에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-108">For example, the <see cref="M:System.Globalization.NumberFormatInfo.Clone" /> method performs a shallow copy of all properties except the <see cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" /> property; it always sets this property value to <see langword="false" /> in the cloned object.</span></span> <span data-ttu-id="64c02-109">때문에 호출자에 <see cref="M:System.ICloneable.Clone" /> 예측 가능 하 고 수행 하는 방법에 종속 될 수 없습니다 복제 작업을 권장 하는 <see cref="T:System.ICloneable" /> 공용 Api에서 구현 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-109">Because callers of <see cref="M:System.ICloneable.Clone" /> cannot depend on the method performing a predictable cloning operation, we recommend that <see cref="T:System.ICloneable" /> not be implemented in public APIs.</span></span></para>
    </block>
    <altmember cref="M:System.Object.MemberwiseClone" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICloneable.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="64c02-110">현재 인스턴스의 복사본인 새 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-110">Creates a new object that is a copy of the current instance.</span></span></summary>
        <returns><span data-ttu-id="64c02-111">이 인스턴스의 복사본인 새 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-111">A new object that is a copy of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64c02-112">생성 되는 복제본, 호환 되거나, 원래 인스턴스에 동일한 형식 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-112">The resulting clone must be of the same type as, or compatible with, the original instance.</span></span>  
  
 <span data-ttu-id="64c02-113">구현 <xref:System.ICloneable.Clone%2A> 전체 복사본 또는 단순 복사본을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-113">An implementation of <xref:System.ICloneable.Clone%2A> can perform either a deep copy or a shallow copy.</span></span> <span data-ttu-id="64c02-114">전체 복사본을 개체를 모두 복제 됩니다. 단순 복사는 최상위 개체에 대해서만 복제 됩니다 하 고 하위 수준에 대 한 참조가 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-114">In a deep copy, all objects are duplicated; in a shallow copy, only the top-level objects are duplicated and the lower levels contain references.</span></span> <span data-ttu-id="64c02-115">때문에 호출자에 <xref:System.ICloneable.Clone%2A> 예측 가능 하 고 수행 하는 방법에 종속 될 수 없습니다 복제 작업을 권장 하는 <xref:System.ICloneable> 공용 Api에서 구현 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-115">Because callers of <xref:System.ICloneable.Clone%2A> cannot depend on the method performing a predictable cloning operation, we recommend that <xref:System.ICloneable> not be implemented in public APIs.</span></span>  
  
 <span data-ttu-id="64c02-116">참조 <xref:System.Object.MemberwiseClone%2A?displayProperty=nameWithType> 에 복제, 전체 단순 복사본 및 예제 복사본 및 자세한 내용은 합니다.</span><span class="sxs-lookup"><span data-stu-id="64c02-116">See <xref:System.Object.MemberwiseClone%2A?displayProperty=nameWithType> for more information on cloning, deep versus shallow copies, and examples.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.MemberwiseClone" />
      </Docs>
    </Member>
  </Members>
</Type>