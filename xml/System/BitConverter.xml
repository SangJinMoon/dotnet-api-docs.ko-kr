<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BitConverter.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5634043b141f292fdef3d261c90aaf9f4bcb41a62.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">634043b141f292fdef3d261c90aaf9f4bcb41a62</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.BitConverter">
          <source>Converts base data types to an array of bytes, and an array of bytes to base data types.</source>
          <target state="translated">기본 데이터 형식을 바이트의 배열로, 바이트의 배열을 기본 데이터 형식으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class helps manipulate value types in their fundamental form, as a series of bytes.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> 클래스에 기본 형식으로 값 형식으로 일련의 바이트로 조작 하는 데 도움이 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>A byte is defined as an 8-bit unsigned integer.</source>
          <target state="translated">바이트는 8 비트 부호 없는 정수로 정의 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class includes static methods to convert each of the primitive types to and from an array of bytes, as the following table illustrates.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> 다음 표에서 같이 클래스와, 바이트의 배열에서 각 기본 형식을 변환 하는 정적 메서드를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>Type</source>
          <target state="translated">형식</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>To byte conversion</source>
          <target state="translated">바이트 변환 하려면</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>From byte conversion</source>
          <target state="translated">바이트 변환에서</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>If you use <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> methods to round-trip data, make sure that the <ph id="ph2">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> overload and the <ph id="ph3">`To`</ph><bpt id="p1">*</bpt>Type<ept id="p1">*</ept> method specify the same type.</source>
          <target state="translated">사용 하는 경우 <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> 메서드 왕복 데이터에 있는지 확인은 <ph id="ph2">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> 오버 로드와 <ph id="ph3">`To`</ph> <bpt id="p1">*</bpt>형식<ept id="p1">*</ept> 메서드 같은 유형을 지정 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>As the following example illustrates, restoring an array that represents a signed integer by calling the <ph id="ph1">&lt;xref:System.BitConverter.ToUInt32%2A&gt;</ph> method can result in a value that is different from the original.</source>
          <target state="translated">다음 예제와 같이 호출 하 여는 부호 있는 정수를 나타내는 배열을 복원는 <ph id="ph1">&lt;xref:System.BitConverter.ToUInt32%2A&gt;</ph> 메서드 원래 값에서 발생할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>For more information, see the entry <bpt id="p1">[</bpt>Working with Signed Non-Decimal and Bitwise Values<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=186999)</ept> in the BCL Team Blog.</source>
          <target state="translated">자세한 내용은 항목을 참조 하십시오. <bpt id="p1">[</bpt>소수가 아닌 서명 및 비트 값 사용<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=186999)</ept> BCL 팀 블로그의 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method overloads (as well as the order of bits in the integer returned by the <ph id="ph2">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> method and the order of hexadecimal strings returned by the <ph id="ph3">&lt;xref:System.BitConverter.ToString%28System.Byte%5B%5D%29&gt;</ph> method) depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환 된 배열에서 바이트의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> 메서드 오버 로드 (에서 반환한 정수 비트의 순서와는 <ph id="ph2">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> 메서드와에서 반환 하는 16 진수 문자열의 순서는 <ph id="ph3">&lt;xref:System.BitConverter.ToString%28System.Byte%5B%5D%29&gt;</ph> 메서드) 인지 여부에 따라 달라 집니다는 컴퓨터 아키텍처에 little endian 인지 big endian 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>Similarly, the order of bytes in the array and returned by the <ph id="ph1">`To`</ph><bpt id="p1">*</bpt>IntegerValue<ept id="p1">*</ept> methods and the <ph id="ph2">&lt;xref:System.BitConverter.ToChar%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">마찬가지로, 배열의 바이트의 순서에 의해 반환는 <ph id="ph1">`To`</ph> <bpt id="p1">*</bpt>IntegerValue<ept id="p1">*</ept> 메서드 및 <ph id="ph2">&lt;xref:System.BitConverter.ToChar%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The endianness of an architecture is indicated by the <ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian&gt;</ph> property, which returns <ph id="ph2">`true`</ph> on little-endian systems and <ph id="ph3">`false`</ph> on big-endian systems.</source>
          <target state="translated">아키텍처는 엔디안 (endianness)으로 표시 됩니다는 <ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian&gt;</ph> 반환 하는 속성 <ph id="ph2">`true`</ph> little endian 시스템에서 및 <ph id="ph3">`false`</ph> big endian 시스템에 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>On little-endian systems, lower-order bytes precede higher-order bytes.</source>
          <target state="translated">하위 바이트 little endian 시스템에서 상위 바이트 앞에 야 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>On big-endian system, higher-order bytes precede lower-order bytes.</source>
          <target state="translated">Big endian 시스템에서 더 높은 바이트 앞 하위 바이트를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The following table illustrates the difference in the byte arrays that result from passing the integer 1,234,567,890 (0x499602D2) to the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29&gt;</ph> method.</source>
          <target state="translated">다음 표에서 하는 정수 (0x499602D2) 1234567890 여 발생 하는 바이트 배열에 있는 차이 보여 줍니다.는 <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The bytes are listed in order from the byte at index 0 to the byte at index 3.</source>
          <target state="translated">바이트는 인덱스 0에 바이트 바이트에서 인덱스 3 순서 대로 나열 됩니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>Little-endian</source>
          <target state="translated">Little endian</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>D2-02-96-49</source>
          <target state="translated">D2-02-96-49</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>Big-endian</source>
          <target state="translated">Big endian</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>49-96-02-D2</source>
          <target state="translated">49-96-02-D2</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>Because the return value of some methods depends on system architecture, be careful when transmitting byte data beyond machine boundaries:</source>
          <target state="translated">일부 메서드 반환 값은 시스템 아키텍처에 따라 달라 집니다, 컴퓨터 경계를 벗어나 바이트 데이터를 전송할 때 주의 해야 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>If all systems sending and receiving data are guaranteed to have the same endianness, nothing has be done to the data.</source>
          <target state="translated">모든 시스템 데이터 보내기 및 받기 동일한 endianness 있어야 하도록 보장 된다면, 아무 작업도 데이터에 수행 했습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>If systems sending and receiving data can have different endianness, always transmit data in a particular order.</source>
          <target state="translated">시스템 데이터 보내기 및 받기 다른 엔디안 (endianness) 수 있으면 항상 특정 한 순서로 데이터를 전송 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>This means that the order of bytes in the array may have to be reversed either before sending them or after receiving them.</source>
          <target state="translated">즉, 배열의 바이트 순서 보내기 전에 또는 수신한 되돌려야 할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>A common convention is to transmit data in network byte order (big-endian order).</source>
          <target state="translated">일반적인 규칙 네트워크 바이트 순서 (big endian 순서)는 데이터를 전송 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The following example provides an implementation for sending an integer value in network byte order.</source>
          <target state="translated">다음 예에서는 정수 값을 보내면 네트워크 바이트 순서에 대 한 구현을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>If systems sending and receiving data can have different endianness and the data to be transmitted consists of signed integers, call the <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=nameWithType&gt;</ph> method to convert the data to network byte order and the <ph id="ph2">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A?displayProperty=nameWithType&gt;</ph> method to convert it to the order required by the recipient.</source>
          <target state="translated">부호 있는 정수 데이터를 전송 하려면 구성 변수와 다른 엔디안 (endianness), 호출 시스템 데이터 보내기 및 받기 수 있는 경우는 <ph id="ph1">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=nameWithType&gt;</ph> 네트워크 바이트 순서로 데이터를 변환 하는 메서드 및 <ph id="ph2">&lt;xref:System.Net.IPAddress.NetworkToHostOrder%2A?displayProperty=nameWithType&gt;</ph> 요구 하는 순서를 변환 하는 메서드 받는 사람이 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.BitConverter">
          <source>The following code example illustrates the use of several <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class methods.</source>
          <target state="translated">다음 코드 예제에서는 여러 <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> 클래스 메서드.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
          <source>The number to convert.</source>
          <target state="translated">변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
          <source>Converts the specified double-precision floating point number to a 64-bit signed integer.</source>
          <target state="translated">지정된 배정밀도 부동 소수점 숫자를 64비트 부호 있는 정수로 변환합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
          <source>A 64-bit signed integer whose value is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>의 값에 해당하는 64비트 부호 있는 정수입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
          <source>The order of bits in the integer returned by the <ph id="ph1">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환한 정수 비트의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
          <source>The following code example converts the bit patterns of several <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to <ph id="ph2">&lt;xref:System.Int64&gt;</ph> values with the <ph id="ph3">`DoubleToInt64Bits`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 변환의 여러 비트 패턴 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값을 <ph id="ph2">&lt;xref:System.Int64&gt;</ph> 있는 값은 <ph id="ph3">`DoubleToInt64Bits`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="T:System.BitConverter">
          <source>Converts the specified data to an array of bytes.</source>
          <target state="translated">지정된 데이터를 바이트 배열로 변환합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Boolean)">
          <source>A Boolean value.</source>
          <target state="translated">부울 값입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Boolean)">
          <source>Returns the specified Boolean value as a byte array.</source>
          <target state="translated">지정된 부울 값을 바이트 배열로 반환합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Boolean)">
          <source>A byte array with length 1.</source>
          <target state="translated">길이가 1 인 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Boolean)">
          <source>You can convert a byte array back to a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value by calling the <ph id="ph2">&lt;xref:System.BitConverter.ToBoolean%2A&gt;</ph> method.</source>
          <target state="translated">바이트 배열로 변환할 수 있습니다에 다시 한 <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> 호출 하 여 값의 <ph id="ph2">&lt;xref:System.BitConverter.ToBoolean%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Boolean)">
          <source>The following example converts the bit patterns of <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">다음 예제에서는 변환의 비트 패턴 <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> 값을 <ph id="ph2">&lt;xref:System.Byte&gt;</ph> 와 배열은 <ph id="ph3">`GetBytes`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Char)">
          <source>A character to convert.</source>
          <target state="translated">변환할 문자입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Char)">
          <source>Returns the specified Unicode character value as an array of bytes.</source>
          <target state="translated">지정된 유니코드 문자 값을 바이트 배열로 반환합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Char)">
          <source>An array of bytes with length 2.</source>
          <target state="translated">길이가 2인 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Char)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환 된 배열에서 바이트의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Char)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.Char&gt;</ph> values (Unicode characters) to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 변환의 비트 패턴 <ph id="ph1">&lt;xref:System.Char&gt;</ph> 값 (유니코드 문자)을 <ph id="ph2">&lt;xref:System.Byte&gt;</ph> 와 배열은 <ph id="ph3">`GetBytes`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Double)">
          <source>The number to convert.</source>
          <target state="translated">변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Double)">
          <source>Returns the specified double-precision floating point value as an array of bytes.</source>
          <target state="translated">지정된 배정밀도 부동 소수점 값을 바이트 배열로 반환합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Double)">
          <source>An array of bytes with length 8.</source>
          <target state="translated">길이가 8인 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Double)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환 된 배열에서 바이트의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Double)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.Double&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 변환의 비트 패턴 <ph id="ph1">&lt;xref:System.Double&gt;</ph> 값을 <ph id="ph2">&lt;xref:System.Byte&gt;</ph> 와 배열은 <ph id="ph3">`GetBytes`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int16)">
          <source>The number to convert.</source>
          <target state="translated">변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int16)">
          <source>Returns the specified 16-bit signed integer value as an array of bytes.</source>
          <target state="translated">지정된 16비트 부호 있는 정수 값을 바이트 배열로 반환합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int16)">
          <source>An array of bytes with length 2.</source>
          <target state="translated">길이가 2인 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Int16)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환 된 배열에서 바이트의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Int16)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.Int16&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 변환의 비트 패턴 <ph id="ph1">&lt;xref:System.Int16&gt;</ph> 값을 <ph id="ph2">&lt;xref:System.Byte&gt;</ph> 와 배열은 <ph id="ph3">`GetBytes`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int32)">
          <source>The number to convert.</source>
          <target state="translated">변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int32)">
          <source>Returns the specified 32-bit signed integer value as an array of bytes.</source>
          <target state="translated">지정된 32비트 부호 있는 정수 값을 바이트 배열로 반환합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int32)">
          <source>An array of bytes with length 4.</source>
          <target state="translated">길이가 4인 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Int32)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환 된 배열에서 바이트의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Int32)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.Int32&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 변환의 비트 패턴 <ph id="ph1">&lt;xref:System.Int32&gt;</ph> 값을 <ph id="ph2">&lt;xref:System.Byte&gt;</ph> 와 배열은 <ph id="ph3">`GetBytes`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int64)">
          <source>The number to convert.</source>
          <target state="translated">변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int64)">
          <source>Returns the specified 64-bit signed integer value as an array of bytes.</source>
          <target state="translated">지정된 64비트 부호 있는 정수 값을 바이트 배열로 반환합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Int64)">
          <source>An array of bytes with length 8.</source>
          <target state="translated">길이가 8인 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Int64)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환 된 배열에서 바이트의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Int64)">
          <source>The following example calls the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method to convert each element in an <ph id="ph2">&lt;xref:System.Int64&gt;</ph> array to a <ph id="ph3">&lt;xref:System.Byte&gt;</ph> arrays.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> 의 각 요소를 변환 하는 메서드는 <ph id="ph2">&lt;xref:System.Int64&gt;</ph> 배열을 <ph id="ph3">&lt;xref:System.Byte&gt;</ph> 배열입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Single)">
          <source>The number to convert.</source>
          <target state="translated">변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Single)">
          <source>Returns the specified single-precision floating point value as an array of bytes.</source>
          <target state="translated">지정된 단정밀도 부동 소수점 값을 바이트 배열로 반환합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.Single)">
          <source>An array of bytes with length 4.</source>
          <target state="translated">길이가 4인 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Single)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환 된 배열에서 바이트의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.Single)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.Single&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 변환의 비트 패턴 <ph id="ph1">&lt;xref:System.Single&gt;</ph> 값을 <ph id="ph2">&lt;xref:System.Byte&gt;</ph> 와 배열은 <ph id="ph3">`GetBytes`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt16)">
          <source>The number to convert.</source>
          <target state="translated">변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt16)">
          <source>Returns the specified 16-bit unsigned integer value as an array of bytes.</source>
          <target state="translated">지정된 16비트 부호 없는 정수 값을 바이트 배열로 반환합니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt16)">
          <source>An array of bytes with length 2.</source>
          <target state="translated">길이가 2인 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.UInt16)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환 된 배열에서 바이트의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.UInt16)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 변환의 비트 패턴 <ph id="ph1">&lt;xref:System.UInt16&gt;</ph> 값을 <ph id="ph2">&lt;xref:System.Byte&gt;</ph> 와 배열은 <ph id="ph3">`GetBytes`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt32)">
          <source>The number to convert.</source>
          <target state="translated">변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt32)">
          <source>Returns the specified 32-bit unsigned integer value as an array of bytes.</source>
          <target state="translated">지정된 32비트 부호 없는 정수 값을 바이트 배열로 반환합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt32)">
          <source>An array of bytes with length 4.</source>
          <target state="translated">길이가 4인 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.UInt32)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환 된 배열에서 바이트의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.UInt32)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 변환의 비트 패턴 <ph id="ph1">&lt;xref:System.UInt32&gt;</ph> 값을 <ph id="ph2">&lt;xref:System.Byte&gt;</ph> 와 배열은 <ph id="ph3">`GetBytes`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt64)">
          <source>The number to convert.</source>
          <target state="translated">변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt64)">
          <source>Returns the specified 64-bit unsigned integer value as an array of bytes.</source>
          <target state="translated">지정된 64비트 부호 없는 정수 값을 바이트 배열로 반환합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.BitConverter.GetBytes(System.UInt64)">
          <source>An array of bytes with length 8.</source>
          <target state="translated">길이가 8인 바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.UInt64)">
          <source>The order of bytes in the array returned by the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환 된 배열에서 바이트의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.GetBytes(System.UInt64)">
          <source>The following code example converts the bit patterns of <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> values to <ph id="ph2">&lt;xref:System.Byte&gt;</ph> arrays with the <ph id="ph3">`GetBytes`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 변환의 비트 패턴 <ph id="ph1">&lt;xref:System.UInt64&gt;</ph> 값을 <ph id="ph2">&lt;xref:System.Byte&gt;</ph> 와 배열은 <ph id="ph3">`GetBytes`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
          <source>The number to convert.</source>
          <target state="translated">변환할 숫자입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
          <source>Converts the specified 64-bit signed integer to a double-precision floating point number.</source>
          <target state="translated">지정된 64비트 부호 있는 정수를 배정밀도 부동 소수점 숫자로 변환합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
          <source>A double-precision floating point number whose value is equivalent to <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>에 해당하는 배정밀도 부동 소수점 수입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
          <source>Typically, <ph id="ph1">`value`</ph> is an integer that is returned by the <ph id="ph2">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> method.</source>
          <target state="translated">일반적으로 <ph id="ph1">`value`</ph> 에서 반환 하는 정수는 <ph id="ph2">&lt;xref:System.BitConverter.DoubleToInt64Bits%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
          <source>The following code example converts the bit patterns of several <ph id="ph1">&lt;xref:System.Int64&gt;</ph> values to <ph id="ph2">&lt;xref:System.Double&gt;</ph> values with the <ph id="ph3">`Int64BitsToDouble`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 변환의 여러 비트 패턴 <ph id="ph1">&lt;xref:System.Int64&gt;</ph> 값을 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 있는 값은 <ph id="ph3">`Int64BitsToDouble`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="F:System.BitConverter.IsLittleEndian">
          <source>Indicates the byte order ("endianness") in which data is stored in this computer architecture.</source>
          <target state="translated">이 컴퓨터 아키텍처에서 데이터가 저장되는 바이트 순서("endian")를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.BitConverter.IsLittleEndian">
          <source>Different computer architectures store data using different byte orders.</source>
          <target state="translated">다른 컴퓨터 아키텍처는 서로 다른 바이트 순서를 사용 하 여 데이터를 저장 합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.BitConverter.IsLittleEndian">
          <source>"Big-endian" means the most significant byte is on the left end of a word.</source>
          <target state="translated">"Big-endian" 단어의 왼쪽된 끝에 가장 중요 한 바이트를 의미 합니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.BitConverter.IsLittleEndian">
          <source>"Little-endian" means the most significant byte is on the right end of a word.</source>
          <target state="translated">"Little-endian" 단어의 오른쪽 끝에 가장 중요 한 바이트를 의미 합니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.BitConverter.IsLittleEndian">
          <source>You can convert from network byte order to the byte order of the host computer without retrieving  the value of the <ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType&gt;</ph> field by passing a 16-bit, 32-bit, or 64 bit integer to the <ph id="ph2">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">값을 검색 하지 않고도 바이트 순서로 호스트 컴퓨터의 네트워크 바이트 순서에서 변환할 수는 <ph id="ph1">&lt;xref:System.BitConverter.IsLittleEndian?displayProperty=nameWithType&gt;</ph> 16 비트, 32 비트 또는 64 비트 정수를 전달 하 여 필드는 <ph id="ph2">&lt;xref:System.Net.IPAddress.HostToNetworkOrder%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.BitConverter.IsLittleEndian">
          <source>The following code example illustrates the use of the <ph id="ph1">`IsLittleEndian`</ph> field.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">`IsLittleEndian`</ph> 필드입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source>A byte array.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source>The index of the byte within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept> 내에 있는 바이트의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source>Returns a Boolean value converted from the byte at a specified position in a byte array.</source>
          <target state="translated">바이트에서 변환된 부울 값을 바이트 배열의 지정된 위치에 반환합니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the byte at <ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph> in <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is nonzero; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="startIndex" /&gt;</ph>의 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>에 있는 바이트가 0이 아니면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source>To convert a <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> value to its byte representation, call the <ph id="ph2">&lt;xref:System.BitConverter.ToBoolean%2A&gt;</ph> method.</source>
          <target state="translated">변환 하는 <ph id="ph1">&lt;xref:System.Boolean&gt;</ph> 값을 바이트 표현, 호출 된 <ph id="ph2">&lt;xref:System.BitConverter.ToBoolean%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> values with the <ph id="ph3">`ToBoolean`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는의 요소를 변환 합니다. <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 배열의 <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> 있는 값은 <ph id="ph3">`ToBoolean`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 0보다 작거나 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> - 1의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>An array.</source>
          <target state="translated">배열입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept> 내의 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>Returns a Unicode character converted from two bytes at a specified position in a byte array.</source>
          <target state="translated">2바이트에서 변환된 유니코드 문자를 바이트 배열의 지정된 위치에 반환합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>A character formed by two bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>에서 시작하고 2바이트로 형성된 문자입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToChar%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 1 to a <ph id="ph4">&lt;xref:System.Char&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.BitConverter.ToChar%2A&gt;</ph> 메서드 인덱스에서 바이트를 변환 <ph id="ph2">`startIndex`</ph> 를 <ph id="ph3">`startIndex`</ph> + 1에는 <ph id="ph4">&lt;xref:System.Char&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">바이트 배열에서의 순서는 컴퓨터 시스템의 아키텍처; endianness 반영 해야 자세한 내용은 설명 부분을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> 클래스 항목입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.Char&gt;</ph> values (Unicode characters) with the <ph id="ph3">`ToChar`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는의 요소를 변환 합니다. <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 배열의 <ph id="ph2">&lt;xref:System.Char&gt;</ph> 값 (유니코드 문자)와 <ph id="ph3">`ToChar`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> equals the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>의 길이에서 1을 뺀 값과 같은 경우</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 0보다 작거나 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> - 1의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept> 내의 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.</source>
          <target state="translated">8바이트에서 변환된 배정밀도 부동 소수점 숫자를 바이트 배열의 지정된 위치에 반환합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>A double precision floating point number formed by eight bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>에서 시작하고 8바이트로 형성된 배정밀도 부동 소수점 숫자입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToDouble%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 7 to a <ph id="ph4">&lt;xref:System.Double&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.BitConverter.ToDouble%2A&gt;</ph> 메서드 인덱스에서 바이트를 변환 <ph id="ph2">`startIndex`</ph> 를 <ph id="ph3">`startIndex`</ph> + 7에는 <ph id="ph4">&lt;xref:System.Double&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">바이트 배열에서의 순서는 컴퓨터 시스템의 아키텍처; endianness 반영 해야 자세한 내용은 설명 부분을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> 클래스 항목입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.Double&gt;</ph> values with the <ph id="ph3">`ToDouble`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는의 요소를 변환 합니다. <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 배열의 <ph id="ph2">&lt;xref:System.Double&gt;</ph> 있는 값은 <ph id="ph3">`ToDouble`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 7, and is less than or equal to the length of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>의 길이에서 7을 뺀 값보다 크거나 같고 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>의 길이에서 1을 뺀 값보다 작거나 같은 경우</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 0보다 작거나 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> - 1의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept> 내의 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.</source>
          <target state="translated">2바이트에서 변환된 16비트 부호 있는 정수를 바이트 배열의 지정된 위치에 반환합니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>A 16-bit signed integer formed by two bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>에서 시작하고 2바이트로 형성된 16비트 부호 있는 정수입니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToInt16%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 1 to an <ph id="ph4">&lt;xref:System.Int16&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.BitConverter.ToInt16%2A&gt;</ph> 메서드 인덱스에서 바이트를 변환 <ph id="ph2">`startIndex`</ph> 를 <ph id="ph3">`startIndex`</ph> + 1에는 <ph id="ph4">&lt;xref:System.Int16&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">바이트 배열에서의 순서는 컴퓨터 시스템의 아키텍처; endianness 반영 해야 자세한 내용은 설명 부분을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> 클래스 항목입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.Int16&gt;</ph> values with the <ph id="ph3">`ToInt16`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는의 요소를 변환 합니다. <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 배열의 <ph id="ph2">&lt;xref:System.Int16&gt;</ph> 있는 값은 <ph id="ph3">`ToInt16`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> equals the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>의 길이에서 1을 뺀 값과 같은 경우</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 0보다 작거나 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> - 1의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept> 내의 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</source>
          <target state="translated">4바이트에서 변환된 32비트 부호 있는 정수를 바이트 배열의 지정된 위치에 반환합니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>A 32-bit signed integer formed by four bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>에서 시작하고 4바이트로 형성된 32비트 부호 있는 정수입니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 3 to an <ph id="ph4">&lt;xref:System.Int32&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> 메서드 인덱스에서 바이트를 변환 <ph id="ph2">`startIndex`</ph> 를 <ph id="ph3">`startIndex`</ph> + 3에는 <ph id="ph4">&lt;xref:System.Int32&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph>.</source>
          <target state="translated">바이트 배열에서의 순서는 컴퓨터 시스템의 아키텍처; endianness 반영 해야 자세한 내용은 설명 부분을 참조 하십시오. <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> method to create <ph id="ph2">&lt;xref:System.Int32&gt;</ph> values from a four-byte array and from the upper four bytes of an eight-byte array.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> 를 만들 방법을 <ph id="ph2">&lt;xref:System.Int32&gt;</ph> 8 바이트 배열 위쪽 4 바이트에서 4 바이트 배열에서 값입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source>It also uses the <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29&gt;</ph> and <ph id="ph2">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> methods to round-trip an <ph id="ph3">&lt;xref:System.Int32&gt;</ph> value.</source>
          <target state="translated">또한 사용 하 여는 <ph id="ph1">&lt;xref:System.BitConverter.GetBytes%28System.Int32%29&gt;</ph> 및 <ph id="ph2">&lt;xref:System.BitConverter.ToInt32%2A&gt;</ph> 왕복 하는 메서드는 <ph id="ph3">&lt;xref:System.Int32&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 3, and is less than or equal to the length of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>의 길이에서 3을 뺀 값보다 크거나 같고 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>의 길이에서 1을 뺀 값보다 작거나 같은 경우</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 0보다 작거나 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> - 1의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept> 내의 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.</source>
          <target state="translated">8바이트에서 변환된 64비트 부호 있는 정수를 바이트 배열의 지정된 위치에 반환합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>A 64-bit signed integer formed by eight bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>에서 시작하고 8바이트로 형성된 64비트 부호 있는 정수입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToInt64%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 7 to a <ph id="ph4">&lt;xref:System.Int64&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.BitConverter.ToInt64%2A&gt;</ph> 메서드 인덱스에서 바이트를 변환 <ph id="ph2">`startIndex`</ph> 를 <ph id="ph3">`startIndex`</ph> + 7에는 <ph id="ph4">&lt;xref:System.Int64&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">바이트 배열에서의 순서는 컴퓨터 시스템의 아키텍처; endianness 반영 해야 자세한 내용은 설명 부분을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> 클래스 항목입니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.Int64&gt;</ph> values with the <ph id="ph3">`ToInt64`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는의 요소를 변환 합니다. <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 배열의 <ph id="ph2">&lt;xref:System.Int64&gt;</ph> 있는 값은 <ph id="ph3">`ToInt64`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 7, and is less than or equal to the length of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>의 길이에서 7을 뺀 값보다 크거나 같고 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>의 길이에서 1을 뺀 값보다 작거나 같은 경우</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 0보다 작거나 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> - 1의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept> 내의 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.</source>
          <target state="translated">4바이트에서 변환된 단정밀도 부동 소수점 숫자를 바이트 배열의 지정된 위치에 반환합니다.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>A single-precision floating point number formed by four bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>에서 시작하고 4바이트로 형성된 단정밀도 부동 소수점 숫자입니다.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToSingle%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 3 to a <ph id="ph4">&lt;xref:System.Single&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.BitConverter.ToSingle%2A&gt;</ph> 메서드 인덱스에서 바이트를 변환 <ph id="ph2">`startIndex`</ph> 를 <ph id="ph3">`startIndex`</ph> + 3에는 <ph id="ph4">&lt;xref:System.Single&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph>.</source>
          <target state="translated">바이트 배열에서의 순서는 컴퓨터 시스템의 아키텍처; endianness 반영 해야 자세한 내용은 설명 부분을 참조 하십시오. <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.Single&gt;</ph> values with the <ph id="ph3">`ToSingle`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는의 요소를 변환 합니다. <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 배열의 <ph id="ph2">&lt;xref:System.Single&gt;</ph> 있는 값은 <ph id="ph3">`ToSingle`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 3, and is less than or equal to the length of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>의 길이에서 3을 뺀 값보다 크거나 같고 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>의 길이에서 1을 뺀 값보다 작거나 같은 경우</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 0보다 작거나 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> - 1의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="T:System.BitConverter">
          <source>Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</source>
          <target state="translated">지정된 바이트 배열의 각 요소 숫자 값을 해당하는 16진수 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source>An array of bytes.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source>Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</source>
          <target state="translated">지정된 바이트 배열의 각 요소 숫자 값을 해당하는 16진수 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in <ph id="ph1">&lt;paramref name="value" /&gt;</ph>; for example, "7F-2C-4A-00".</source>
          <target state="translated">하이픈으로 구분된 16진수 쌍의 문자열이며 여기에서 각 쌍은 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>;의 해당 요소(예: "7F-2C-4A-00")를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source>All the elements of <ph id="ph1">`value`</ph> are converted.</source>
          <target state="translated">모든 요소 <ph id="ph1">`value`</ph> 변환 됩니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source>The order of hexadecimal strings returned by the <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환 하는 16 진수 문자열의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source>The following code example converts <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.String&gt;</ph> objects with the <ph id="ph3">`ToString`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 배열의 <ph id="ph2">&lt;xref:System.String&gt;</ph> 개체와 <ph id="ph3">`ToString`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[])">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept> 내의 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</source>
          <target state="translated">지정된 바이트 하위 배열의 각 요소 숫자 값을 해당하는 16진수 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>; for example, "7F-2C-4A-00".</source>
          <target state="translated">하이픈으로 구분된 16진수 쌍의 문자열이며 여기에서 각 쌍은 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>;의 하위 배열에서 해당 요소(예: "7F-2C-4A-00")를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>The elements from array position <ph id="ph1">`startIndex`</ph> to the end of the array are converted.</source>
          <target state="translated">배열 위치에서 요소 <ph id="ph1">`startIndex`</ph> 배열의 끝에 변환 됩니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>The order of hexadecimal strings returned by the <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환 하는 16 진수 문자열의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source>The following code example converts the part of a <ph id="ph1">&lt;xref:System.Byte&gt;</ph> array starting at the specified <ph id="ph2">`startIndex`</ph> to a <ph id="ph3">&lt;xref:System.String&gt;</ph> with the <ph id="ph4">`ToString`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 변환의 일부는 <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 배열의 지정 된 위치에서 시작 하는 <ph id="ph2">`startIndex`</ph> 에 <ph id="ph3">&lt;xref:System.String&gt;</ph> 와 <ph id="ph4">`ToString`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 0보다 작거나 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> - 1의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept> 내의 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>The number of array elements in <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> to convert.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept>의 배열 요소 중에서 변환할 배열 요소의 수입니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</source>
          <target state="translated">지정된 바이트 하위 배열의 각 요소 숫자 값을 해당하는 16진수 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>A string of hexadecimal pairs separated by hyphens, where each pair represents the corresponding element in a subarray of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>; for example, "7F-2C-4A-00".</source>
          <target state="translated">하이픈으로 구분된 16진수 쌍의 문자열이며 여기에서 각 쌍은 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>;의 하위 배열에서 해당 요소(예: "7F-2C-4A-00")를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`length`</ph> elements from array position <ph id="ph2">`startIndex`</ph> are converted.</source>
          <target state="translated"><ph id="ph1">`length`</ph> 배열 위치에서 요소를 <ph id="ph2">`startIndex`</ph> 변환 됩니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>If <ph id="ph1">`length`</ph> equals zero, the method returns <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">경우 <ph id="ph1">`length`</ph> 가 0 이면 메서드는 반환 <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>The order of hexadecimal strings returned by the <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method depends on whether the computer architecture is little-endian or big-endian.</source>
          <target state="translated">반환 하는 16 진수 문자열의 순서는 <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> 방법은 컴퓨터 아키텍처 little endian 인지 big endian 인지에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> method to convert part of a byte array, starting at the specified <ph id="ph2">`startIndex`</ph> and with the specified <ph id="ph3">`length`</ph>, to a string.</source>
          <target state="translated">사용 하 여 다음 예제는 <ph id="ph1">&lt;xref:System.BitConverter.ToString%2A&gt;</ph> 메서드를 지정 된 위치에서 시작 하 여 바이트 배열 부분의 <ph id="ph2">`startIndex`</ph> 및 지정 된 <ph id="ph3">`length`</ph>, 문자열로 합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> or <ph id="ph2">&lt;paramref name="length" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="length" /&gt;</ph>가 0보다 작습니다.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than zero and is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 0보다 크고 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>의 길이보다 크거나 같은 경우</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
          <source>The combination of <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> and <ph id="ph2">&lt;paramref name="length" /&gt;</ph> does not specify a position within <ph id="ph3">&lt;paramref name="value" /&gt;</ph>; that is, the <ph id="ph4">&lt;paramref name="startIndex" /&gt;</ph> parameter is greater than the length of <ph id="ph5">&lt;paramref name="value" /&gt;</ph> minus the <ph id="ph6">&lt;paramref name="length" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>와 <ph id="ph2">&lt;paramref name="length" /&gt;</ph>를 합하면 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 내에 위치를 지정할 수 없는 경우. 즉, <ph id="ph4">&lt;paramref name="startIndex" /&gt;</ph> 매개 변수가 <ph id="ph5">&lt;paramref name="value" /&gt;</ph>의 길이에서 <ph id="ph6">&lt;paramref name="length" /&gt;</ph> 매개 변수를 뺀 값보다 큰 경우입니다.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>The array of bytes.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept> 내의 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.</source>
          <target state="translated">2바이트에서 변환된 16비트 부호 없는 정수를 바이트 배열의 지정된 위치에 반환합니다.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>A 16-bit unsigned integer formed by two bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>에서 시작하고 2바이트로 형성된 16비트 부호 없는 정수입니다.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToUInt16%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 1 to a <ph id="ph4">&lt;xref:System.UInt16&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.BitConverter.ToUInt16%2A&gt;</ph> 메서드 인덱스에서 바이트를 변환 <ph id="ph2">`startIndex`</ph> 를 <ph id="ph3">`startIndex`</ph> + 1에는 <ph id="ph4">&lt;xref:System.UInt16&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">바이트 배열에서의 순서는 컴퓨터 시스템의 아키텍처; endianness 반영 해야 자세한 내용은 설명 부분을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> 클래스 항목입니다.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.UInt16&gt;</ph> values with the <ph id="ph3">`ToUInt16`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는의 요소를 변환 합니다. <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 배열의 <ph id="ph2">&lt;xref:System.UInt16&gt;</ph> 있는 값은 <ph id="ph3">`ToUInt16`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> equals the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>의 길이에서 1을 뺀 값과 같은 경우</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 0보다 작거나 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> - 1의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept> 내의 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.</source>
          <target state="translated">4바이트에서 변환된 32비트 부호 없는 정수를 바이트 배열의 지정된 위치에 반환합니다.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>A 32-bit unsigned integer formed by four bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>에서 시작하고 4바이트로 형성된 32비트 부호 없는 정수입니다.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToUInt32%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 3 to a <ph id="ph4">&lt;xref:System.UInt32&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.BitConverter.ToUInt32%2A&gt;</ph> 메서드 인덱스에서 바이트를 변환 <ph id="ph2">`startIndex`</ph> 를 <ph id="ph3">`startIndex`</ph> + 3에는 <ph id="ph4">&lt;xref:System.UInt32&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">바이트 배열에서의 순서는 컴퓨터 시스템의 아키텍처; endianness 반영 해야 자세한 내용은 설명 부분을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> 클래스 항목입니다.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.UInt32&gt;</ph> values with the <ph id="ph3">`ToUInt32`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는의 요소를 변환 합니다. <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 배열의 <ph id="ph2">&lt;xref:System.UInt32&gt;</ph> 있는 값은 <ph id="ph3">`ToUInt32`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 3, and is less than or equal to the length of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>의 길이에서 3을 뺀 값보다 크거나 같고 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>의 길이에서 1을 뺀 값보다 작거나 같은 경우</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 0보다 작거나 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> - 1의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>An array of bytes.</source>
          <target state="translated">바이트 배열입니다.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>The starting position within <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>값<ept id="p1">&lt;/c&gt;</ept> 내의 시작 위치입니다.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.</source>
          <target state="translated">8바이트에서 변환된 64비트 부호 없는 정수를 바이트 배열의 지정된 위치에 반환합니다.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>A 64-bit unsigned integer formed by the eight bytes beginning at <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>에서 시작하고 8바이트로 형성된 64비트 부호 없는 정수입니다.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.BitConverter.ToUInt64%2A&gt;</ph> method converts the bytes from index <ph id="ph2">`startIndex`</ph> to <ph id="ph3">`startIndex`</ph> + 7 to a <ph id="ph4">&lt;xref:System.UInt64&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.BitConverter.ToUInt64%2A&gt;</ph> 메서드 인덱스에서 바이트를 변환 <ph id="ph2">`startIndex`</ph> 를 <ph id="ph3">`startIndex`</ph> + 7에는 <ph id="ph4">&lt;xref:System.UInt64&gt;</ph> 값입니다.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> class topic.</source>
          <target state="translated">바이트 배열에서의 순서는 컴퓨터 시스템의 아키텍처; endianness 반영 해야 자세한 내용은 설명 부분을 참조 하십시오.는 <ph id="ph1">&lt;xref:System.BitConverter&gt;</ph> 클래스 항목입니다.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source>The following code example converts elements of <ph id="ph1">&lt;xref:System.Byte&gt;</ph> arrays to <ph id="ph2">&lt;xref:System.UInt64&gt;</ph> values with the <ph id="ph3">`ToUInt64`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는의 요소를 변환 합니다. <ph id="ph1">&lt;xref:System.Byte&gt;</ph> 배열의 <ph id="ph2">&lt;xref:System.UInt64&gt;</ph> 있는 값은 <ph id="ph3">`ToUInt64`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is greater than or equal to the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 7, and is less than or equal to the length of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>의 길이에서 7을 뺀 값보다 크거나 같고 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>의 길이에서 1을 뺀 값보다 작거나 같은 경우</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> is less than zero or greater than the length of <ph id="ph2">&lt;paramref name="value" /&gt;</ph> minus 1.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph>가 0보다 작거나 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> - 1의 길이보다 큰 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>