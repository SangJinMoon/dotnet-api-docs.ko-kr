<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Predicate`1.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54d5c7551e524b5bca53c8809fe4a5d86b71bc330.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d5c7551e524b5bca53c8809fe4a5d86b71bc330</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Predicate`1">
          <source>The type of the object to compare.</source>
          <target state="translated">비교할 개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Predicate`1">
          <source>The object to compare against the criteria defined within the method represented by this delegate.</source>
          <target state="translated">이 대리자가 나타내는 메서드에 정의된 조건과 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Predicate`1">
          <source>Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.</source>
          <target state="translated">조건 집합을 정의하고 지정된 개체가 이러한 조건을 충족하는지 여부를 결정하는 메서드를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Predicate`1">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> meets the criteria defined within the method represented by this delegate; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="obj" /&gt;</ph>가 이 대리자가 나타내는 메서드에 정의된 조건을 충족하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Predicate`1">
          <source>This delegate is used by several methods of the <ph id="ph1">&lt;xref:System.Array&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> classes to search for elements in the collection.</source>
          <target state="translated">이 대리자는 여러 가지 방법을 통해 사용 되는 <ph id="ph1">&lt;xref:System.Array&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 컬렉션의 요소를 검색 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Predicate`1">
          <source>Typically, the <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> delegate is represented by a lambda expression.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> 대리자 람다 식을 사용 하 여 표현 됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Predicate`1">
          <source>Because locally scoped variables are available to the lambda expression, it is easy to test for a condition that is not precisely known at compile time.</source>
          <target state="translated">로컬 범위 변수를 람다 식에 사용할 수 있는 때문에 정확 하 게 컴파일 타임에 알려지지 않은 조건을 테스트 하기 쉽습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Predicate`1">
          <source>This is simulated in the following example, which defines a <ph id="ph1">`HockeyTeam`</ph> class that contains information about a National Hockey League team and the year in which it was founded.</source>
          <target state="translated">다음 예제를 정의 하는 동작을 시뮬레이션 한 <ph id="ph1">`HockeyTeam`</ph> National 쿼리 League 팀과 설립 된 연도 대 한 정보를 포함 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Predicate`1">
          <source>The example defines an array of integer values that represent years, and randomly assigns one element of the array to <ph id="ph1">`foundedBeforeYear`</ph>, which is a variable that is locally scoped to the example's <ph id="ph2">`Main`</ph> method.</source>
          <target state="translated">이 예에서는 몇 년 동안 표시 하는 정수 값의 배열을 정의 한 배열의 요소가 하나를 임의로 할당 <ph id="ph1">`foundedBeforeYear`</ph>, 하는 예에 나오는 로컬로 범위 지정 된 변수 <ph id="ph2">`Main`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Predicate`1">
          <source>Because locally scoped variables are available to a lambda expression, the lambda expression passed to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType&gt;</ph> method is able to return a <ph id="ph2">`HockeyTeam`</ph> object for each team founded on or before that year.</source>
          <target state="translated">람다 식에 전달 된 로컬 범위 변수는 람다 식에 사용할 수 있으므로는 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType&gt;</ph> 메서드는 반환 될 수는 <ph id="ph2">`HockeyTeam`</ph> 또는 해당 연도의 이전 기초로 하는 각 팀에 대 한 개체입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Predicate`1">
          <source>The following code example uses a <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> delegate with the <ph id="ph2">&lt;xref:System.Array.Find%2A?displayProperty=nameWithType&gt;</ph> method to search an array of <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> structures.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> 대리자는 <ph id="ph2">&lt;xref:System.Array.Find%2A?displayProperty=nameWithType&gt;</ph> 의 배열을 검색 하는 메서드 <ph id="ph3">&lt;xref:System.Drawing.Point&gt;</ph> 구조입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Predicate`1">
          <source>The example explicitly defines a <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> delegate named <ph id="ph2">`predicate`</ph> and assigns it a method named <ph id="ph3">`FindPoints`</ph> that returns <ph id="ph4">`true`</ph> if the product of the <ph id="ph5">&lt;xref:System.Drawing.Point.X%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph6">&lt;xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType&gt;</ph> fields is greater than 100,000.</source>
          <target state="translated">이 예제에서는 명시적으로 정의 <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> 라는 대리자 <ph id="ph2">`predicate`</ph> 라는 메서드를 할당 하 고 <ph id="ph3">`FindPoints`</ph> 반환 하는 <ph id="ph4">`true`</ph> 경우의 제품은 <ph id="ph5">&lt;xref:System.Drawing.Point.X%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph6">&lt;xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType&gt;</ph> 필드 100, 000 보다 큽니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Predicate`1">
          <source>Note that it is customary to use a lambda expression rather than to explicitly define a delegate of type <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>, as the second example illustrates.</source>
          <target state="translated">일반적인 형식의 대리자를 명시적으로 정의 하는 것 보다는 람다 식을 사용 하는 <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph>두 번째 예제와 같이 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Predicate`1">
          <source>The following example is identical to the previous example, except that it uses a lambda expression to represent the <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> delegate.</source>
          <target state="translated">다음 예제는 람다 식을 나타내는 데 사용 하 여 이전 예제와 동일한는 <ph id="ph1">&lt;xref:System.Predicate%601&gt;</ph> 위임 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Predicate`1">
          <source>Each element of the <ph id="ph1">`points`</ph> array is passed to the lambda expression until the expression finds an element that meets the search criteria.</source>
          <target state="translated">각 요소는 <ph id="ph1">`points`</ph> 식을 검색 기준과 일치 하는 요소를 찾을 때까지 배열은 람다 식에 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Predicate`1">
          <source>In this case, the lambda expression returns <ph id="ph1">`true`</ph> if the product of the X and Y fields is greater than 100,000.</source>
          <target state="translated">이 경우 람다 식을 반환 <ph id="ph1">`true`</ph> X 및 Y 필드 제품 100, 000 보다 큰 경우.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>