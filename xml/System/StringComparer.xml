<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="StringComparer.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac557e1b0b735d24c6f07b98ddefb13d0704094c2a4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">57e1b0b735d24c6f07b98ddefb13d0704094c2a4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.StringComparer">
          <source>Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</source>
          <target state="translated">특정 대/소문자 및 문화권 기반 또는 서수 비교 규칙을 사용하는 문자열 비교 연산을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>An object derived from the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.</source>
          <target state="translated">파생 된 개체는 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 문자열 기반 비교, 같음 및 해시 코드 작업 모두 소문자 및 문화권 관련 비교 규칙을 고려 하는 클래스를 구현 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>You can use the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class to create a type-specific comparison to sort the elements in a generic collection.</source>
          <target state="translated">사용할 수는 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 클래스를 만드는 제네릭 컬렉션에 요소를 정렬 하는 형식별 비교 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>Classes such as <ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> use the <ph id="ph5">&lt;xref:System.StringComparer&gt;</ph> class for sorting purposes.</source>
          <target state="translated">와 같은 클래스 <ph id="ph1">&lt;xref:System.Collections.Hashtable&gt;</ph>, <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> 사용은 <ph id="ph5">&lt;xref:System.StringComparer&gt;</ph> 가나가 클래스입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>A comparison operation that is represented by the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.</source>
          <target state="translated">으로 표시 되는 비교 연산을 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 클래스가를 대/소문자 구분 또는 대/소문자 구분, 고 단어 (문화권 구분)를 사용 하도록 정의 된 또는 서 수 (문화권을 구분 하지 않는) 비교 규칙입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>For more information about word and ordinal comparison rules, see <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Word 및 서 수 비교 규칙에 대 한 자세한 내용은 참조 <ph id="ph1">&lt;xref:System.Globalization.CompareOptions?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>Implemented Properties</source>
          <target state="translated">구현 된 속성</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>You might be confused about how to use the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class properties because of a seeming contradiction.</source>
          <target state="translated">사용 하는 방법에 대 한 혼동 될 수 있습니다는 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 모순 처럼 보이기 때문에 클래스 속성입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class is declared <ph id="ph2">`abstract`</ph> (<ph id="ph3">`MustInherit`</ph> in Visual Basic), which means its members can be invoked only on an object of a class derived from the <ph id="ph4">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 클래스가 선언 되 <ph id="ph2">`abstract`</ph> (<ph id="ph3">`MustInherit`</ph> Visual basic에서), 즉, 해당 멤버에서 파생 된 클래스의 개체에 대해서만 호출할 수 있습니다는 <ph id="ph4">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>The contradiction is that each property of the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class is declared <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> in Visual Basic), which means the property can be invoked without first creating a derived class.</source>
          <target state="translated">상충 되는 각 속성에는 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 클래스가 선언 되 <ph id="ph2">`static`</ph> (<ph id="ph3">`Shared`</ph> Visual basic에서), 속성을 의미 하는 파생된 클래스를 먼저 만들지 않고 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>You can call a <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> property directly because each property actually returns an instance of an anonymous class that is derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 속성을 직접 각 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 하기 때문에 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>Consequently, the type of each property value is <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>, which is the base class of the anonymous class, not the type of the anonymous class itself.</source>
          <target state="translated">따라서 각 속성 값의 형식이 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph>, 익명 클래스의 기본 클래스를 되지 않는 익명 형식의 클래스 자체입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>Each <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> class property returns a <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> object that supports predefined case and comparison rules.</source>
          <target state="translated">각 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 클래스 속성에서 반환 된 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 미리 정의 된 대/소문자 및 비교 규칙을 지 원하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>The following example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">다음 예제에서는 속성 및 <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> 의 메서드는 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.StringComparer">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">이 예제에서는 서로 어떻게 다른 지 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 개체 정렬 세 가지 버전의 라틴 문자 I.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.StringComparer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.StringComparer">
          <source>Compares two objects or strings and returns an indication of their relative sort order.</source>
          <target state="translated">두 개체나 문자열을 비교하고 상대적 정렬 순서를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>An object to compare to <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">비교할 개체 또는 <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>An object to compare to <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">비교할 개체 또는 <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 두 개체를 비교하고 상대적 정렬 순서를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>A signed integer that indicates the relative values of <ph id="ph1">&lt;paramref name="x" /&gt;</ph> and <ph id="ph2">&lt;paramref name="y" /&gt;</ph>, as shown in the following table.</source>
          <target state="translated">다음 표와 같이 <ph id="ph1">&lt;paramref name="x" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="y" /&gt;</ph>의 상대 값을 나타내는 부호 있는 정수입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 값</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 의미</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0보다 작음</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> precedes  <ph id="ph4">&lt;paramref name="y" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph>가 정렬 순서에서 <ph id="ph4">&lt;paramref name="y" /&gt;</ph> 앞에 오는 경우</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="x" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="y" /&gt;</ph> is not <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이고 <ph id="ph3">&lt;paramref name="y" /&gt;</ph>가 <ph id="ph4">&lt;see langword="null" /&gt;</ph>이 아닌 경우</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> is equal to <ph id="ph4">&lt;paramref name="y" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph>이(가) <ph id="ph4">&lt;paramref name="y" /&gt;</ph>과(와) 같습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="x" /&gt;</ph> and <ph id="ph2">&lt;paramref name="y" /&gt;</ph> are both <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph>와 <ph id="ph2">&lt;paramref name="y" /&gt;</ph>가 둘 다 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0보다 큼</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> follows <ph id="ph4">&lt;paramref name="y" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph>가 정렬 순서에서 <ph id="ph4">&lt;paramref name="y" /&gt;</ph> 뒤에 오는 경우</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source><ph id="ph1">&lt;paramref name="y" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="x" /&gt;</ph> is not <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="y" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이고 <ph id="ph3">&lt;paramref name="x" /&gt;</ph>가 <ph id="ph4">&lt;see langword="null" /&gt;</ph>이 아닌 경우</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method is slightly more efficient than the <ph id="ph2">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method because no conversion of the <ph id="ph3">`x`</ph> and <ph id="ph4">`y`</ph> arguments is needed to perform the comparison.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> 메서드는 보다 약간 더 효율적는 <ph id="ph2">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> 메서드 때문에의 변환 작업 없이 <ph id="ph3">`x`</ph> 및 <ph id="ph4">`y`</ph> 비교를 수행 하는 데 필요한 인수입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.Object,System.Object)">
          <source>Neither <ph id="ph1">&lt;paramref name="x" /&gt;</ph> nor <ph id="ph2">&lt;paramref name="y" /&gt;</ph> is a <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph> object, and neither <ph id="ph4">&lt;paramref name="x" /&gt;</ph> nor <ph id="ph5">&lt;paramref name="y" /&gt;</ph> implements the <ph id="ph6">&lt;see cref="T:System.IComparable" /&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="y" /&gt;</ph>가 <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph> 개체가 아니고 <ph id="ph4">&lt;paramref name="x" /&gt;</ph> 또는 <ph id="ph5">&lt;paramref name="y" /&gt;</ph>가 <ph id="ph6">&lt;see cref="T:System.IComparable" /&gt;</ph> 인터페이스를 구현하지 않는 경우</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>A string to compare to <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>와 비교할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>A string to compare to <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>와 비교할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 두 문자열을 비교하고 상대적 정렬 순서를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>A signed integer that indicates the relative values of <ph id="ph1">&lt;paramref name="x" /&gt;</ph> and <ph id="ph2">&lt;paramref name="y" /&gt;</ph>, as shown in the following table.</source>
          <target state="translated">다음 표와 같이 <ph id="ph1">&lt;paramref name="x" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="y" /&gt;</ph>의 상대 값을 나타내는 부호 있는 정수입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 값</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 의미</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Less than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0보다 작음</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> precedes <ph id="ph4">&lt;paramref name="y" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph>가 정렬 순서에서 <ph id="ph4">&lt;paramref name="y" /&gt;</ph> 앞에 오는 경우</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="x" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="y" /&gt;</ph> is not <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이고 <ph id="ph3">&lt;paramref name="y" /&gt;</ph>가 <ph id="ph4">&lt;see langword="null" /&gt;</ph>이 아닌 경우</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> is equal to <ph id="ph4">&lt;paramref name="y" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph>이(가) <ph id="ph4">&lt;paramref name="y" /&gt;</ph>과(와) 같습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="x" /&gt;</ph> and <ph id="ph2">&lt;paramref name="y" /&gt;</ph> are both <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="x" /&gt;</ph>와 <ph id="ph2">&lt;paramref name="y" /&gt;</ph>가 둘 다 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Greater than zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0보다 큼</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph> follows <ph id="ph4">&lt;paramref name="y" /&gt;</ph> in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph><ph id="ph3">&lt;paramref name="x" /&gt;</ph>가 정렬 순서에서 <ph id="ph4">&lt;paramref name="y" /&gt;</ph> 뒤에 오는 경우</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="y" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> and <ph id="ph3">&lt;paramref name="x" /&gt;</ph> is not <ph id="ph4">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="y" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>이고 <ph id="ph3">&lt;paramref name="x" /&gt;</ph>가 <ph id="ph4">&lt;see langword="null" /&gt;</ph>이 아닌 경우</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Compare(System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method is slightly more efficient than the <ph id="ph2">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method because no conversion of the <ph id="ph3">`x`</ph> and <ph id="ph4">`y`</ph> arguments is needed to perform the comparison.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> 메서드는 보다 약간 더 효율적는 <ph id="ph2">&lt;xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> 메서드 때문에의 변환 작업 없이 <ph id="ph3">`x`</ph> 및 <ph id="ph4">`y`</ph> 비교를 수행 하는 데 필요한 인수입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>A culture whose linguistic rules are used to perform a string comparison.</source>
          <target state="translated">문자열 비교를 수행하는 데 사용되는 언어적 규칙의 문화권입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to specify that comparison operations be case-insensitive; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to specify that comparison operations be case-sensitive.</source>
          <target state="translated">비교 연산이 대/소문자를 구분하지 않도록 지정하면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 비교 연산이 대/소문자를 구분하도록 지정하면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>Creates a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that compares strings according to the rules of a specified culture.</source>
          <target state="translated">지정된 문화권의 규칙에 따라 문자열을 비교하는 <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs string comparisons according to the comparison rules used by the <ph id="ph2">&lt;paramref name="culture" /&gt;</ph> parameter and the case rule specified by the <ph id="ph3">&lt;paramref name="ignoreCase" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 매개 변수에서 사용하는 비교 규칙과 <ph id="ph2">&lt;paramref name="culture" /&gt;</ph> 매개 변수에서 지정하는 대/소문자 규칙에 따라 문자열 비교를 수행하는 새 <ph id="ph3">&lt;paramref name="ignoreCase" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 속성 및 <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> 의 메서드는 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">이 예제에서는 서로 어떻게 다른 지 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 개체 정렬 세 가지 버전의 라틴 문자 I.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="culture" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="culture" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.StringComparer.CurrentCulture">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</source>
          <target state="translated">현재 문화권의 단어 비교 규칙을 사용하여 대/소문자를 구분하는 문자열을 비교하는 <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property can be used when strings are linguistically relevant.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 에서 반환 되는 <ph id="ph2">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> 문자열은 언어적으로 관련 된 경우 속성을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</source>
          <target state="translated">예를 들어 문자열은 사용자에 게 표시 하거나 사용자 상호 작용의 결과 문자열이 경우 문자열 데이터를 정렬 하 문화권 구분 문자열 비교를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The current culture is the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object associated with the current thread.</source>
          <target state="translated">현재 문화권이 <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 현재 스레드와 연결 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 된 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>Each call to the <ph id="ph1">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property <ph id="ph2">`get`</ph> accessor returns a new <ph id="ph3">&lt;xref:System.StringComparer&gt;</ph> object, as the following code shows.</source>
          <target state="translated">호출할 때마다는 <ph id="ph1">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> 속성 <ph id="ph2">`get`</ph> 접근자 반환 새 <ph id="ph3">&lt;xref:System.StringComparer&gt;</ph> 다음 코드와 같이 개체입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>To improve performance, you can store the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> object in a local variable rather than retrieve the value of the <ph id="ph2">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> property multiple times.</source>
          <target state="translated">성능 향상을 위해 저장할 수 있습니다는 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 의 값을 검색 하는 것이 아니라 지역 변수에 개체는 <ph id="ph2">&lt;xref:System.StringComparer.CurrentCulture%2A&gt;</ph> 속성을 여러 번입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 속성 및 <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> 의 메서드는 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCulture">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">이 예제에서는 서로 어떻게 다른 지 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 개체 정렬 세 가지 버전의 라틴 문자 I.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</source>
          <target state="translated">현재 문화권의 단어 비교 규칙을 사용하여 대/소문자를 구분하지 않는 문자열을 비교하는 <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>The current culture is the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object associated with the current thread.</source>
          <target state="translated">현재 문화권이 <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 현재 스레드와 연결 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property can be used when strings are linguistically relevant but their case is not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 에서 반환 되는 <ph id="ph2">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> 속성 문자열은 언어적으로 관련 된 소문자 때 없는 경우 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</source>
          <target state="translated">예를 들어 문자열은 사용자에 게 표시 하는 경우 대/소문자는 중요 하지 않은 경우 문화권 구분 문자열 데이터를 정렬 하 여 대/소문자 구분 문자열 비교를 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 된 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>Each call to the <ph id="ph1">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property <ph id="ph2">`get`</ph> accessor returns a new <ph id="ph3">&lt;xref:System.StringComparer&gt;</ph> object, as the following code shows.</source>
          <target state="translated">호출할 때마다는 <ph id="ph1">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> 속성 <ph id="ph2">`get`</ph> 접근자 반환 새 <ph id="ph3">&lt;xref:System.StringComparer&gt;</ph> 다음 코드와 같이 개체입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.CurrentCultureIgnoreCase">
          <source>To improve performance, you can store the <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> object in a local variable rather than retrieve the value of the <ph id="ph2">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> property multiple times.</source>
          <target state="translated">성능 향상을 위해 저장할 수 있습니다는 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 의 값을 검색 하는 것이 아니라 지역 변수에 개체는 <ph id="ph2">&lt;xref:System.StringComparer.CurrentCultureIgnoreCase%2A&gt;</ph> 속성을 여러 번입니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="T:System.StringComparer">
          <source>When overridden in a derived class, indicates whether two objects or strings are equal.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 두 개체나 문자열이 같은지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source>An object to compare to <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">비교할 개체 또는 <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>입니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source>An object to compare to <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">비교할 개체 또는 <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source>When overridden in a derived class, indicates whether two objects are equal.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 두 개체가 같은지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="x" /&gt;</ph> and <ph id="ph3">&lt;paramref name="y" /&gt;</ph> refer to the same object, or <ph id="ph4">&lt;paramref name="x" /&gt;</ph> and <ph id="ph5">&lt;paramref name="y" /&gt;</ph> are both the same type of object and those objects are equal, or both <ph id="ph6">&lt;paramref name="x" /&gt;</ph> and <ph id="ph7">&lt;paramref name="y" /&gt;</ph> are <ph id="ph8">&lt;see langword="null" /&gt;</ph>; otherwise, <ph id="ph9">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>와 <ph id="ph2">&lt;paramref name="x" /&gt;</ph>가 같은 개체를 참조하거나, <ph id="ph3">&lt;paramref name="y" /&gt;</ph>와 <ph id="ph4">&lt;paramref name="x" /&gt;</ph>가 모두 같은 형식의 개체이고 두 개체가 같거나, <ph id="ph5">&lt;paramref name="y" /&gt;</ph>와 <ph id="ph6">&lt;paramref name="x" /&gt;</ph>가 모두 <ph id="ph7">&lt;paramref name="y" /&gt;</ph>이면 <ph id="ph8">&lt;see langword="null" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph9">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Equals(System.Object,System.Object)">
          <source>Because the runtime does not have to unbox <ph id="ph1">`x`</ph> or <ph id="ph2">`y`</ph> if they are value types or attempt to downcast <ph id="ph3">`x`</ph> or <ph id="ph4">`y`</ph> to strings if they are reference types, the <ph id="ph5">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph> method may be slightly more efficient than the <ph id="ph6">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">런타임에서 unbox 필요가 없기 때문에 <ph id="ph1">`x`</ph> 또는 <ph id="ph2">`y`</ph> 값 형식 인지에 다운 캐스팅을 시도 하는 경우 <ph id="ph3">`x`</ph> 또는 <ph id="ph4">`y`</ph> 는 참조 형식인 경우 문자열에는 <ph id="ph5">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph> 보다 약간 더 효율적일 수 있는 메서드는 <ph id="ph6">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source>A string to compare to <bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>y<ept id="p1">&lt;/c&gt;</ept>와 비교할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source>A string to compare to <bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>x<ept id="p1">&lt;/c&gt;</ept>와 비교할 문자열입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source>When overridden in a derived class, indicates whether two strings are equal.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 두 문자열이 같은지를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="x" /&gt;</ph> and <ph id="ph3">&lt;paramref name="y" /&gt;</ph> refer to the same object, or <ph id="ph4">&lt;paramref name="x" /&gt;</ph> and <ph id="ph5">&lt;paramref name="y" /&gt;</ph> are equal, or <ph id="ph6">&lt;paramref name="x" /&gt;</ph> and <ph id="ph7">&lt;paramref name="y" /&gt;</ph> are <ph id="ph8">&lt;see langword="null" /&gt;</ph>; otherwise, <ph id="ph9">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>와 <ph id="ph2">&lt;paramref name="x" /&gt;</ph>가 같은 개체를 참조하거나, <ph id="ph3">&lt;paramref name="y" /&gt;</ph>와 <ph id="ph4">&lt;paramref name="x" /&gt;</ph>가 같거나, <ph id="ph5">&lt;paramref name="y" /&gt;</ph>와 <ph id="ph6">&lt;paramref name="x" /&gt;</ph>가 <ph id="ph7">&lt;paramref name="y" /&gt;</ph>이면 <ph id="ph8">&lt;see langword="null" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph9">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.Equals(System.String,System.String)">
          <source>Because the runtime does not have to unbox <ph id="ph1">`x`</ph> or <ph id="ph2">`y`</ph> if they are value types or attempt to downcast <ph id="ph3">`x`</ph> or <ph id="ph4">`y`</ph> to strings if they are reference types, the <ph id="ph5">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph> method may be slightly more efficient than the <ph id="ph6">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">런타임에서 unbox 필요가 없기 때문에 <ph id="ph1">`x`</ph> 또는 <ph id="ph2">`y`</ph> 값 형식 인지에 다운 캐스팅을 시도 하는 경우 <ph id="ph3">`x`</ph> 또는 <ph id="ph4">`y`</ph> 는 참조 형식인 경우 문자열에는 <ph id="ph5">&lt;xref:System.StringComparer.Equals%28System.String%2CSystem.String%29&gt;</ph> 보다 약간 더 효율적일 수 있는 메서드는 <ph id="ph6">&lt;xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="T:System.StringComparer">
          <source>When overridden in a derived class, gets the hash code for the current <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 현재<ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체의 해시 코드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>An object.</source>
          <target state="translated">개체입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>When overridden in a derived class, gets the hash code for the specified object.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 지정된 개체의 해시 코드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>A 32-bit signed hash code calculated from the value of the <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 매개 변수의 값에서 계산된 32비트 부호 있는 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> method is more efficient than the <ph id="ph2">&lt;xref:System.StringComparer.GetHashCode%2A&gt;</ph> method because the <ph id="ph3">`obj`</ph> parameter does not have to be unboxed to perform the operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> 메서드 보다 더 효율적입니다.는 <ph id="ph2">&lt;xref:System.StringComparer.GetHashCode%2A&gt;</ph> 메서드 때문에 <ph id="ph3">`obj`</ph> 매개 변수는 작업을 수행 하려면 unboxed 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph> method allocates an amount of memory that is proportional to the size of <ph id="ph2">`obj`</ph> to calculate the hash code of <ph id="ph3">`obj`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph> 메서드가 할당의 크기에 비례 하는 메모리 양을 <ph id="ph2">`obj`</ph> 의 해시 코드를 계산 하려면 <ph id="ph3">`obj`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>In the case of large strings, trying to retrieve the hash code can throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">큰 문자열 등의 경우 해시 코드를 검색 하는 동안 발생 시킬 수는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</source>
          <target state="translated">대신, 해시 코드를 계산할 때 고정된 된 양의 메모리를 할당 하는 대체 알고리즘을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>To use this algorithm, add the <bpt id="p1">[</bpt>&lt;NetFx45_CultureAwareComparerGetHashCode_LongStrings&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept> element to the <bpt id="p2">[</bpt><ph id="ph1">\&lt;</ph>runtime&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of your application's configuration file.</source>
          <target state="translated">이 알고리즘을 사용 하려면 추가 <bpt id="p1">[</bpt>&lt; NetFx45_CultureAwareComparerGetHashCode_LongStrings &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept> 요소는 <bpt id="p2">[</bpt> <ph id="ph1">\&lt;</ph>런타임 &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> 응용 프로그램의 구성 파일의 섹션입니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>Not enough memory is available to allocate the buffer that is required to compute the hash code.</source>
          <target state="translated">해시 코드를 계산하는 데 필요한 버퍼를 할당할 수 있는 메모리가 부족합니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.Object)">
          <source>Not enough memory is available to allocate the buffer that is required to compute the hash code.</source>
          <target state="translated">해시 코드를 계산하는 데 필요한 버퍼를 할당할 수 있는 메모리가 부족합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>A string.</source>
          <target state="translated">문자열</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>When overridden in a derived class, gets the hash code for the specified string.</source>
          <target state="translated">파생 클래스에서 재정의된 경우 지정된 문자열의 해시 코드를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>A 32-bit signed hash code calculated from the value of the <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 매개 변수의 값에서 계산된 32비트 부호 있는 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> method is more efficient than the <ph id="ph2">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph> method because the <ph id="ph3">`obj`</ph> parameter does not have to be unboxed to perform the operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> 메서드 보다 더 효율적입니다.는 <ph id="ph2">&lt;xref:System.StringComparer.GetHashCode%28System.Object%29&gt;</ph> 메서드 때문에 <ph id="ph3">`obj`</ph> 매개 변수는 작업을 수행 하려면 unboxed 필요는 없습니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> method allocates an amount of memory that is proportional to the size of <ph id="ph2">`obj`</ph> to calculate the hash code of <ph id="ph3">`obj`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.GetHashCode%28System.String%29&gt;</ph> 메서드가 할당의 크기에 비례 하는 메모리 양을 <ph id="ph2">`obj`</ph> 의 해시 코드를 계산 하려면 <ph id="ph3">`obj`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>In the case of large strings, trying to retrieve the hash code can throw an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">큰 문자열 등의 경우 해시 코드를 검색 하는 동안 발생 시킬 수는 <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</source>
          <target state="translated">대신, 해시 코드를 계산할 때 고정된 된 양의 메모리를 할당 하는 대체 알고리즘을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>To use this algorithm, add the <bpt id="p1">[</bpt>&lt;NetFx45_CultureAwareComparerGetHashCode_LongStrings&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept> element to the <bpt id="p2">[</bpt><ph id="ph1">\&lt;</ph>runtime&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of your application's configuration file.</source>
          <target state="translated">이 알고리즘을 사용 하려면 추가 <bpt id="p1">[</bpt>&lt; NetFx45_CultureAwareComparerGetHashCode_LongStrings &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)</ept> 요소는 <bpt id="p2">[</bpt> <ph id="ph1">\&lt;</ph>런타임 &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> 응용 프로그램의 구성 파일의 섹션입니다.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>Not enough memory is available to allocate the buffer that is required to compute the hash code.</source>
          <target state="translated">해시 코드를 계산하는 데 필요한 버퍼를 할당할 수 있는 메모리가 부족합니다.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.StringComparer.GetHashCode(System.String)">
          <source>Not enough memory is available to allocate the buffer that is required to compute the hash code.</source>
          <target state="translated">해시 코드를 계산하는 데 필요한 버퍼를 할당할 수 있는 메모리가 부족합니다.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="P:System.StringComparer.InvariantCulture">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</source>
          <target state="translated">고정 문화권의 단어 비교 규칙을 사용하여 대/소문자를 구분하는 문자열을 비교하는 <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 에서 반환 되는 <ph id="ph2">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph> 언어적으로 관련 된 방식으로 문자열을 비교 하는 속성 이지만 특정 문화권에서 표시 하기 위해 적합 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>Its major application is to order strings in a way that will be identical across cultures.</source>
          <target state="translated">주요 응용 프로그램 방식으로 문화권에 걸쳐 동일 될 순서 문자열 되려고 합니다.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The invariant culture is the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property.</source>
          <target state="translated">고정 문화권은는 <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 에서 반환 된 개체는 <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.InvariantCulture%2A&gt;</ph> 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 된 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 속성 및 <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> 의 메서드는 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCulture">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">이 예제에서는 서로 어떻게 다른 지 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 개체 정렬 세 가지 버전의 라틴 문자 I.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</source>
          <target state="translated">고정 문화권의 단어 비교 규칙을 사용하여 대/소문자를 구분하지 않는 문자열을 비교하는 <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>A new <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 에서 반환 되는 <ph id="ph2">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph> 대/소문자를 무시 하는 언어적으로 관련 된 방식으로 문자열을 비교 하는 속성 이지만 특정 문화권에서 표시 하기 위해 적합 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>Its major application is to order strings in a way that will be identical across cultures.</source>
          <target state="translated">주요 응용 프로그램 방식으로 문화권에 걸쳐 동일 될 순서 문자열 되려고 합니다.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>The invariant culture is the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object returned by the <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property.</source>
          <target state="translated">고정 문화권은는 <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 에서 반환 된 개체는 <ph id="ph2">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.InvariantCultureIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.InvariantCultureIgnoreCase%2A&gt;</ph> 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 된 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.StringComparer.Ordinal">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-sensitive ordinal string comparison.</source>
          <target state="translated">대/소문자를 구분하는 서수 문자열을 비교하는 <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>A <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph> property performs a simple byte comparison that is independent of language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 에서 반환 되는 <ph id="ph2">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph> 속성 언어와 독립적 간단한 바이트 비교를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.</source>
          <target state="translated">이것은 프로그래밍 방식으로 하거나 비교할 때 대/소문자 구분 주고받는 암호 생성 되는 문자열을 비교에 가장 적합 합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.Ordinal%2A&gt;</ph> 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 된 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 속성 및 <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> 의 메서드는 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.Ordinal">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">이 예제에서는 서로 어떻게 다른 지 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 개체 정렬 세 가지 버전의 라틴 문자 I.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object that performs a case-insensitive ordinal string comparison.</source>
          <target state="translated">대/소문자를 구분하지 않는 서수 문자열을 비교하는 <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>A <ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.StringComparer" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> returned by the <ph id="ph2">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 에서 반환 되는 <ph id="ph2">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph> 속성을 고정 문화권의 규칙을 사용 하 여 대문자로 변환 된 것 처럼 비교할 문자열의 문자를 취급 하 고 다음 관계 간단한 바이트 비교를 수행 언어입니다.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.</source>
          <target state="translated">이것은 프로그래밍 방식으로 하거나 비교할 때 대/소문자 구분 주고받는 경로 및 파일 이름을 생성 되는 문자열을 비교에 가장 적합 합니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>The <ph id="ph1">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph> property actually returns an instance of an anonymous class derived from the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.StringComparer.OrdinalIgnoreCase%2A&gt;</ph> 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 된 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>The following code example demonstrates the properties and the <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> class.</source>
          <target state="translated">다음 코드 예제에서는 속성 및 <ph id="ph1">&lt;xref:System.StringComparer.Create%2A&gt;</ph> 의 메서드는 <ph id="ph2">&lt;xref:System.StringComparer&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.StringComparer.OrdinalIgnoreCase">
          <source>The example illustrates how different <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> objects sort three versions of the Latin letter I.</source>
          <target state="translated">이 예제에서는 서로 어떻게 다른 지 <ph id="ph1">&lt;xref:System.StringComparer&gt;</ph> 개체 정렬 세 가지 버전의 라틴 문자 I.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>