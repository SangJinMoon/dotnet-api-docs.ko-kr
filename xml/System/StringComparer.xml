<Type Name="StringComparer" FullName="System.StringComparer">
  <TypeSignature Language="C#" Value="public abstract class StringComparer : System.Collections.Generic.IComparer&lt;string&gt;, System.Collections.Generic.IEqualityComparer&lt;string&gt;, System.Collections.IComparer, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit StringComparer extends System.Object implements class System.Collections.Generic.IComparer`1&lt;string&gt;, class System.Collections.Generic.IEqualityComparer`1&lt;string&gt;, class System.Collections.IComparer, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.StringComparer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class StringComparer&#xA;Implements IComparer, IComparer(Of String), IEqualityComparer, IEqualityComparer(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringComparer abstract : System::Collections::Generic::IComparer&lt;System::String ^&gt;, System::Collections::Generic::IEqualityComparer&lt;System::String ^&gt;, System::Collections::IComparer, System::Collections::IEqualityComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ab06a-101">특정 대/소문자 및 문화권 기반 또는 서수 비교 규칙을 사용하는 문자열 비교 연산을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-101">Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab06a-102">파생 된 개체는 <xref:System.StringComparer> 문자열 기반 비교, 같음 및 해시 코드 작업 모두 소문자 및 문화권 관련 비교 규칙을 고려 하는 클래스를 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-102">An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.</span></span> <span data-ttu-id="ab06a-103">사용할 수는 <xref:System.StringComparer> 클래스를 만드는 제네릭 컬렉션에 요소를 정렬 하는 형식별 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-103">You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection.</span></span> <span data-ttu-id="ab06a-104">와 같은 클래스 <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, 및 <xref:System.Collections.Generic.SortedList%602> 사용은 <xref:System.StringComparer> 가나가 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-104">Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.</span></span>  
  
 <span data-ttu-id="ab06a-105">으로 표시 되는 비교 연산을 <xref:System.StringComparer> 클래스가를 대/소문자 구분 또는 대/소문자 구분, 고 단어 (문화권 구분)를 사용 하도록 정의 된 또는 서 수 (문화권을 구분 하지 않는) 비교 규칙입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-105">A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.</span></span> <span data-ttu-id="ab06a-106">Word 및 서 수 비교 규칙에 대 한 자세한 내용은 참조 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-106">For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
## <a name="implemented-properties"></a><span data-ttu-id="ab06a-107">구현 된 속성</span><span class="sxs-lookup"><span data-stu-id="ab06a-107">Implemented Properties</span></span>  
 <span data-ttu-id="ab06a-108">사용 하는 방법에 대 한 혼동 될 수 있습니다는 <xref:System.StringComparer> 모순 처럼 보이기 때문에 클래스 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-108">You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction.</span></span> <span data-ttu-id="ab06a-109"><xref:System.StringComparer> 클래스가 선언 되 `abstract` (`MustInherit` Visual basic에서), 즉, 해당 멤버에서 파생 된 클래스의 개체에 대해서만 호출할 수 있습니다는 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-109">The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="ab06a-110">상충 되는 각 속성에는 <xref:System.StringComparer> 클래스가 선언 되 `static` (`Shared` Visual basic에서), 속성을 의미 하는 파생된 클래스를 먼저 만들지 않고 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-110">The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.</span></span>  
  
 <span data-ttu-id="ab06a-111">호출할 수 있습니다는 <xref:System.StringComparer> 속성을 직접 각 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 하기 때문에 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-111">You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="ab06a-112">따라서 각 속성 값의 형식이 <xref:System.StringComparer>, 익명 클래스의 기본 클래스를 되지 않는 익명 형식의 클래스 자체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-112">Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself.</span></span> <span data-ttu-id="ab06a-113">각 <xref:System.StringComparer> 클래스 속성에서 반환 된 <xref:System.StringComparer> 미리 정의 된 대/소문자 및 비교 규칙을 지 원하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-113">Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab06a-114">다음 예제에서는 속성 및 <xref:System.StringComparer.Create%2A> 의 메서드는 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-114">The following example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="ab06a-115">이 예제에서는 서로 어떻게 다른 지 <xref:System.StringComparer> 개체 정렬 세 가지 버전의 라틴 문자 I.</span><span class="sxs-lookup"><span data-stu-id="ab06a-115">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Globalization.CompareOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StringComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; StringComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ab06a-116"><see cref="T:System.StringComparer" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-116">Initializes a new instance of the <see cref="T:System.StringComparer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ab06a-117">두 개체나 문자열을 비교하고 상대적 정렬 순서를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-117">Compares two objects or strings and returns an indication of their relative sort order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As Object, y As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="ab06a-118">비교할 개체 또는 <c>y</c>입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-118">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="ab06a-119">비교할 개체 또는 <c>x</c>입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-119">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="ab06a-120">파생 클래스에서 재정의된 경우 두 개체를 비교하고 상대적 정렬 순서를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-120">When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="ab06a-121">다음 표와 같이 <paramref name="x" /> 및 <paramref name="y" />의 상대 값을 나타내는 부호 있는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-121">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="ab06a-122"><list type="table"><listheader><term> 값</span><span class="sxs-lookup"><span data-stu-id="ab06a-122"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="ab06a-123"></term><description> 의미</span><span class="sxs-lookup"><span data-stu-id="ab06a-123"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="ab06a-124"></description></listheader><item><term> 0보다 작음</span><span class="sxs-lookup"><span data-stu-id="ab06a-124"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="ab06a-125"></term><description><paramref name="x" />가 정렬 순서에서 <paramref name="y" /> 앞에 오는 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-125"></term><description><paramref name="x" /> precedes  <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="ab06a-126">또는</span><span class="sxs-lookup"><span data-stu-id="ab06a-126">-or-</span></span>  
  
 <span data-ttu-id="ab06a-127"><paramref name="x" />가 <see langword="null" />이고 <paramref name="y" />가 <see langword="null" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-127"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="ab06a-128"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="ab06a-128"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="ab06a-129"></term><description><paramref name="x" />이(가) <paramref name="y" />과(와) 같습니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-129"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="ab06a-130">또는</span><span class="sxs-lookup"><span data-stu-id="ab06a-130">-or-</span></span>  
  
 <span data-ttu-id="ab06a-131"><paramref name="x" />와 <paramref name="y" />가 둘 다 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-131"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="ab06a-132"></description></item><item><term> 0보다 큼</span><span class="sxs-lookup"><span data-stu-id="ab06a-132"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="ab06a-133"></term><description><paramref name="x" />가 정렬 순서에서 <paramref name="y" /> 뒤에 오는 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-133"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="ab06a-134">또는</span><span class="sxs-lookup"><span data-stu-id="ab06a-134">-or-</span></span>  
  
 <span data-ttu-id="ab06a-135"><paramref name="y" />가 <see langword="null" />이고 <paramref name="x" />가 <see langword="null" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-135"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab06a-136"><xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> 메서드는 보다 약간 더 효율적는 <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> 메서드 때문에의 변환 작업 없이 `x` 및 `y` 비교를 수행 하는 데 필요한 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-136">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ab06a-137"><paramref name="x" /> 또는 <paramref name="y" />가 <see cref="T:System.String" /> 개체가 아니고 <paramref name="x" /> 또는 <paramref name="y" />가 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-137">Neither <paramref name="x" /> nor <paramref name="y" /> is a <see cref="T:System.String" /> object, and neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As String, y As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="ab06a-138"><c>y</c>와 비교할 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-138">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="ab06a-139"><c>x</c>와 비교할 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-139">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="ab06a-140">파생 클래스에서 재정의된 경우 두 문자열을 비교하고 상대적 정렬 순서를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-140">When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="ab06a-141">다음 표와 같이 <paramref name="x" /> 및 <paramref name="y" />의 상대 값을 나타내는 부호 있는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-141">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="ab06a-142"><list type="table"><listheader><term> 값</span><span class="sxs-lookup"><span data-stu-id="ab06a-142"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="ab06a-143"></term><description> 의미</span><span class="sxs-lookup"><span data-stu-id="ab06a-143"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="ab06a-144"></description></listheader><item><term> 0보다 작음</span><span class="sxs-lookup"><span data-stu-id="ab06a-144"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="ab06a-145"></term><description><paramref name="x" />가 정렬 순서에서 <paramref name="y" /> 앞에 오는 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-145"></term><description><paramref name="x" /> precedes <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="ab06a-146">또는</span><span class="sxs-lookup"><span data-stu-id="ab06a-146">-or-</span></span>  
  
 <span data-ttu-id="ab06a-147"><paramref name="x" />가 <see langword="null" />이고 <paramref name="y" />가 <see langword="null" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-147"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="ab06a-148"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="ab06a-148"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="ab06a-149"></term><description><paramref name="x" />이(가) <paramref name="y" />과(와) 같습니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-149"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="ab06a-150">또는</span><span class="sxs-lookup"><span data-stu-id="ab06a-150">-or-</span></span>  
  
 <span data-ttu-id="ab06a-151"><paramref name="x" />와 <paramref name="y" />가 둘 다 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-151"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="ab06a-152"></description></item><item><term> 0보다 큼</span><span class="sxs-lookup"><span data-stu-id="ab06a-152"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="ab06a-153"></term><description><paramref name="x" />가 정렬 순서에서 <paramref name="y" /> 뒤에 오는 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-153"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="ab06a-154">또는</span><span class="sxs-lookup"><span data-stu-id="ab06a-154">-or-</span></span>  
  
 <span data-ttu-id="ab06a-155"><paramref name="y" />가 <see langword="null" />이고 <paramref name="x" />가 <see langword="null" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-155"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab06a-156"><xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> 메서드는 보다 약간 더 효율적는 <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> 메서드 때문에의 변환 작업 없이 `x` 및 `y` 비교를 수행 하는 데 필요한 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-156">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, ignoreCase As Boolean) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="ab06a-157">문자열 비교를 수행하는 데 사용되는 언어적 규칙의 문화권입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-157">A culture whose linguistic rules are used to perform a string comparison.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="ab06a-158">비교 연산이 대/소문자를 구분하지 않도록 지정하면 <see langword="true" />이고, 비교 연산이 대/소문자를 구분하도록 지정하면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-158"><see langword="true" /> to specify that comparison operations be case-insensitive; <see langword="false" /> to specify that comparison operations be case-sensitive.</span></span></param>
        <summary><span data-ttu-id="ab06a-159">지정된 문화권의 규칙에 따라 문자열을 비교하는 <see cref="T:System.StringComparer" /> 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-159">Creates a <see cref="T:System.StringComparer" /> object that compares strings according to the rules of a specified culture.</span></span></summary>
        <returns><span data-ttu-id="ab06a-160"><see cref="T:System.StringComparer" /> 매개 변수에서 사용하는 비교 규칙과 <paramref name="culture" /> 매개 변수에서 지정하는 대/소문자 규칙에 따라 문자열 비교를 수행하는 새 <paramref name="ignoreCase" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-160">A new <see cref="T:System.StringComparer" /> object that performs string comparisons according to the comparison rules used by the <paramref name="culture" /> parameter and the case rule specified by the <paramref name="ignoreCase" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ab06a-161">다음 코드 예제에서는 속성 및 <xref:System.StringComparer.Create%2A> 의 메서드는 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-161">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="ab06a-162">이 예제에서는 서로 어떻게 다른 지 <xref:System.StringComparer> 개체 정렬 세 가지 버전의 라틴 문자 I.</span><span class="sxs-lookup"><span data-stu-id="ab06a-162">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ab06a-163"><paramref name="culture" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-163"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ab06a-164">현재 문화권의 단어 비교 규칙을 사용하여 대/소문자를 구분하는 문자열을 비교하는 <see cref="T:System.StringComparer" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-164">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="ab06a-165">새 <see cref="T:System.StringComparer" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-165">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab06a-166"><xref:System.StringComparer> 에서 반환 되는 <xref:System.StringComparer.CurrentCulture%2A> 문자열은 언어적으로 관련 된 경우 속성을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-166">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant.</span></span> <span data-ttu-id="ab06a-167">예를 들어 문자열은 사용자에 게 표시 하거나 사용자 상호 작용의 결과 문자열이 경우 문자열 데이터를 정렬 하 문화권 구분 문자열 비교를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-167">For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="ab06a-168">현재 문화권이 <xref:System.Globalization.CultureInfo> 현재 스레드와 연결 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-168">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="ab06a-169"><xref:System.StringComparer.CurrentCulture%2A> 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 된 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-169">The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="ab06a-170">호출할 때마다는 <xref:System.StringComparer.CurrentCulture%2A> 속성 `get` 접근자 반환 새 <xref:System.StringComparer> 다음 코드와 같이 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-170">Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]
 [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  
  
 <span data-ttu-id="ab06a-171">성능 향상을 위해 저장할 수 있습니다는 <xref:System.StringComparer> 의 값을 검색 하는 것이 아니라 지역 변수에 개체는 <xref:System.StringComparer.CurrentCulture%2A> 속성을 여러 번입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-171">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab06a-172">다음 코드 예제에서는 속성 및 <xref:System.StringComparer.Create%2A> 의 메서드는 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-172">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="ab06a-173">이 예제에서는 서로 어떻게 다른 지 <xref:System.StringComparer> 개체 정렬 세 가지 버전의 라틴 문자 I.</span><span class="sxs-lookup"><span data-stu-id="ab06a-173">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ab06a-174">현재 문화권의 단어 비교 규칙을 사용하여 대/소문자를 구분하지 않는 문자열을 비교하는 <see cref="T:System.StringComparer" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-174">Gets a <see cref="T:System.StringComparer" /> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="ab06a-175">새 <see cref="T:System.StringComparer" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-175">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab06a-176">현재 문화권이 <xref:System.Globalization.CultureInfo> 현재 스레드와 연결 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-176">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="ab06a-177"><xref:System.StringComparer> 에서 반환 되는 <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> 속성 문자열은 언어적으로 관련 된 소문자 때 없는 경우 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-177">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not.</span></span> <span data-ttu-id="ab06a-178">예를 들어 문자열은 사용자에 게 표시 하는 경우 대/소문자는 중요 하지 않은 경우 문화권 구분 문자열 데이터를 정렬 하 여 대/소문자 구분 문자열 비교를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-178">For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="ab06a-179"><xref:System.StringComparer.CurrentCultureIgnoreCase%2A> 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 된 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-179">The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="ab06a-180">호출할 때마다는 <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> 속성 `get` 접근자 반환 새 <xref:System.StringComparer> 다음 코드와 같이 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-180">Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]
 [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  
  
 <span data-ttu-id="ab06a-181">성능 향상을 위해 저장할 수 있습니다는 <xref:System.StringComparer> 의 값을 검색 하는 것이 아니라 지역 변수에 개체는 <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> 속성을 여러 번입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-181">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ab06a-182">파생 클래스에서 재정의된 경우 두 개체나 문자열이 같은지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-182">When overridden in a derived class, indicates whether two objects or strings are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As Object, y As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="ab06a-183">비교할 개체 또는 <c>y</c>입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-183">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="ab06a-184">비교할 개체 또는 <c>x</c>입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-184">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="ab06a-185">파생 클래스에서 재정의된 경우 두 개체가 같은지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-185">When overridden in a derived class, indicates whether two objects are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="ab06a-186"><see langword="true" />와 <paramref name="x" />가 같은 개체를 참조하거나, <paramref name="y" />와 <paramref name="x" />가 모두 같은 형식의 개체이고 두 개체가 같거나, <paramref name="y" />와 <paramref name="x" />가 모두 <paramref name="y" />이면 <see langword="null" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-186"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are both the same type of object and those objects are equal, or both <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab06a-187">런타임에서 unbox 필요가 없기 때문에 `x` 또는 `y` 값 형식 인지에 다운 캐스팅을 시도 하는 경우 `x` 또는 `y` 는 참조 형식인 경우 문자열에는 <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> 보다 약간 더 효율적일 수 있는 메서드는 <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab06a-187">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (x As String, y As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="ab06a-188"><c>y</c>와 비교할 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-188">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="ab06a-189"><c>x</c>와 비교할 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-189">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="ab06a-190">파생 클래스에서 재정의된 경우 두 문자열이 같은지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-190">When overridden in a derived class, indicates whether two strings are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="ab06a-191"><see langword="true" />와 <paramref name="x" />가 같은 개체를 참조하거나, <paramref name="y" />와 <paramref name="x" />가 같거나, <paramref name="y" />와 <paramref name="x" />가 <paramref name="y" />이면 <see langword="null" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-191"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal, or <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab06a-192">런타임에서 unbox 필요가 없기 때문에 `x` 또는 `y` 값 형식 인지에 다운 캐스팅을 시도 하는 경우 `x` 또는 `y` 는 참조 형식인 경우 문자열에는 <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> 보다 약간 더 효율적일 수 있는 메서드는 <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ab06a-192">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComparison">
      <MemberSignature Language="C#" Value="public static StringComparer FromComparison (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer FromComparison(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.FromComparison(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromComparison (comparisonType As StringComparison) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ FromComparison(StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ab06a-193">파생 클래스에서 재정의된 경우 현재<see cref="T:System.StringComparer" /> 개체의 해시 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-193">When overridden in a derived class, gets the hash code for the current <see cref="T:System.StringComparer" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="ab06a-194">개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-194">An object.</span></span></param>
        <summary><span data-ttu-id="ab06a-195">파생 클래스에서 재정의된 경우 지정된 개체의 해시 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-195">When overridden in a derived class, gets the hash code for the specified object.</span></span></summary>
        <returns><span data-ttu-id="ab06a-196"><paramref name="obj" /> 매개 변수의 값에서 계산된 32비트 부호 있는 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-196">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab06a-197"><xref:System.StringComparer.GetHashCode%28System.String%29> 메서드 보다 더 효율적입니다.는 <xref:System.StringComparer.GetHashCode%2A> 메서드 때문에 `obj` 매개 변수는 작업을 수행 하려면 unboxed 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-197">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="ab06a-198"><xref:System.StringComparer.GetHashCode%28System.Object%29> 메서드가 할당의 크기에 비례 하는 메모리 양을 `obj` 의 해시 코드를 계산 하려면 `obj`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-198">The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="ab06a-199">큰 문자열 등의 경우 해시 코드를 검색 하는 동안 발생 시킬 수는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-199">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="ab06a-200">대신, 해시 코드를 계산할 때 고정된 된 양의 메모리를 할당 하는 대체 알고리즘을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-200">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="ab06a-201">이 알고리즘을 사용 하려면 추가 [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) 요소는 [ \<런타임 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) 응용 프로그램의 구성 파일의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-201">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ab06a-202">해시 코드를 계산하는 데 필요한 버퍼를 할당할 수 있는 메모리가 부족합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-202">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ab06a-203"><paramref name="obj" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-203"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="ab06a-204">해시 코드를 계산하는 데 필요한 버퍼를 할당할 수 있는 메모리가 부족합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-204">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (string obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (obj As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode(System::String ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="ab06a-205">문자열</span><span class="sxs-lookup"><span data-stu-id="ab06a-205">A string.</span></span></param>
        <summary><span data-ttu-id="ab06a-206">파생 클래스에서 재정의된 경우 지정된 문자열의 해시 코드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-206">When overridden in a derived class, gets the hash code for the specified string.</span></span></summary>
        <returns><span data-ttu-id="ab06a-207"><paramref name="obj" /> 매개 변수의 값에서 계산된 32비트 부호 있는 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-207">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab06a-208"><xref:System.StringComparer.GetHashCode%28System.String%29> 메서드 보다 더 효율적입니다.는 <xref:System.StringComparer.GetHashCode%28System.Object%29> 메서드 때문에 `obj` 매개 변수는 작업을 수행 하려면 unboxed 필요는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-208">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="ab06a-209"><xref:System.StringComparer.GetHashCode%28System.String%29> 메서드가 할당의 크기에 비례 하는 메모리 양을 `obj` 의 해시 코드를 계산 하려면 `obj`합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-209">The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="ab06a-210">큰 문자열 등의 경우 해시 코드를 검색 하는 동안 발생 시킬 수는 <xref:System.ArgumentException>합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-210">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="ab06a-211">대신, 해시 코드를 계산할 때 고정된 된 양의 메모리를 할당 하는 대체 알고리즘을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-211">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="ab06a-212">이 알고리즘을 사용 하려면 추가 [< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) 요소는 [ \<런타임 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) 응용 프로그램의 구성 파일의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-212">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ab06a-213">해시 코드를 계산하는 데 필요한 버퍼를 할당할 수 있는 메모리가 부족합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-213">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ab06a-214"><paramref name="obj" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ab06a-214"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="ab06a-215">해시 코드를 계산하는 데 필요한 버퍼를 할당할 수 있는 메모리가 부족합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-215">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ab06a-216">고정 문화권의 단어 비교 규칙을 사용하여 대/소문자를 구분하는 문자열을 비교하는 <see cref="T:System.StringComparer" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-216">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="ab06a-217">새 <see cref="T:System.StringComparer" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-217">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab06a-218"><xref:System.StringComparer> 에서 반환 되는 <xref:System.StringComparer.InvariantCulture%2A> 언어적으로 관련 된 방식으로 문자열을 비교 하는 속성 이지만 특정 문화권에서 표시 하기 위해 적합 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-218">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="ab06a-219">주요 응용 프로그램 방식으로 문화권에 걸쳐 동일 될 순서 문자열 되려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-219">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="ab06a-220">고정 문화권은는 <xref:System.Globalization.CultureInfo> 에서 반환 된 개체는 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-220">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="ab06a-221"><xref:System.StringComparer.InvariantCulture%2A> 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 된 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-221">The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab06a-222">다음 코드 예제에서는 속성 및 <xref:System.StringComparer.Create%2A> 의 메서드는 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-222">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="ab06a-223">이 예제에서는 서로 어떻게 다른 지 <xref:System.StringComparer> 개체 정렬 세 가지 버전의 라틴 문자 I.</span><span class="sxs-lookup"><span data-stu-id="ab06a-223">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvariantCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ab06a-224">고정 문화권의 단어 비교 규칙을 사용하여 대/소문자를 구분하지 않는 문자열을 비교하는 <see cref="T:System.StringComparer" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-224">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="ab06a-225">새 <see cref="T:System.StringComparer" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-225">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab06a-226"><xref:System.StringComparer> 에서 반환 되는 <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> 대/소문자를 무시 하는 언어적으로 관련 된 방식으로 문자열을 비교 하는 속성 이지만 특정 문화권에서 표시 하기 위해 적합 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-226">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="ab06a-227">주요 응용 프로그램 방식으로 문화권에 걸쳐 동일 될 순서 문자열 되려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-227">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="ab06a-228">고정 문화권은는 <xref:System.Globalization.CultureInfo> 에서 반환 된 개체는 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-228">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="ab06a-229"><xref:System.StringComparer.InvariantCultureIgnoreCase%2A> 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 된 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-229">The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public static StringComparer Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Ordinal As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ Ordinal { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ab06a-230">대/소문자를 구분하는 서수 문자열을 비교하는 <see cref="T:System.StringComparer" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-230">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="ab06a-231"><see cref="T:System.StringComparer" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-231">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab06a-232"><xref:System.StringComparer> 에서 반환 되는 <xref:System.StringComparer.Ordinal%2A> 속성 언어와 독립적 간단한 바이트 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-232">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="ab06a-233">이것은 프로그래밍 방식으로 하거나 비교할 때 대/소문자 구분 주고받는 암호 생성 되는 문자열을 비교에 가장 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-233">This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.</span></span>  
  
 <span data-ttu-id="ab06a-234"><xref:System.StringComparer.Ordinal%2A> 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 된 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-234">The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab06a-235">다음 코드 예제에서는 속성 및 <xref:System.StringComparer.Create%2A> 의 메서드는 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-235">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="ab06a-236">이 예제에서는 서로 어떻게 다른 지 <xref:System.StringComparer> 개체 정렬 세 가지 버전의 라틴 문자 I.</span><span class="sxs-lookup"><span data-stu-id="ab06a-236">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrdinalIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer OrdinalIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer OrdinalIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.OrdinalIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ OrdinalIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ab06a-237">대/소문자를 구분하지 않는 서수 문자열을 비교하는 <see cref="T:System.StringComparer" /> 개체를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-237">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="ab06a-238"><see cref="T:System.StringComparer" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-238">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ab06a-239"><xref:System.StringComparer> 에서 반환 되는 <xref:System.StringComparer.OrdinalIgnoreCase%2A> 속성을 고정 문화권의 규칙을 사용 하 여 대문자로 변환 된 것 처럼 비교할 문자열의 문자를 취급 하 고 다음 관계 간단한 바이트 비교를 수행 언어입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-239">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="ab06a-240">이것은 프로그래밍 방식으로 하거나 비교할 때 대/소문자 구분 주고받는 경로 및 파일 이름을 생성 되는 문자열을 비교에 가장 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-240">This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.</span></span>  
  
 <span data-ttu-id="ab06a-241"><xref:System.StringComparer.OrdinalIgnoreCase%2A> 속성에서 파생 된 익명 클래스의 인스턴스를 실제로 반환 된 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-241">The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ab06a-242">다음 코드 예제에서는 속성 및 <xref:System.StringComparer.Create%2A> 의 메서드는 <xref:System.StringComparer> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ab06a-242">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="ab06a-243">이 예제에서는 서로 어떻게 다른 지 <xref:System.StringComparer> 개체 정렬 세 가지 버전의 라틴 문자 I.</span><span class="sxs-lookup"><span data-stu-id="ab06a-243">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>