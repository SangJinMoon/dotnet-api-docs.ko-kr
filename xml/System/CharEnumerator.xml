<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0570f4e2dd53178598e0e6fbf7b325d2cd252378" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728377" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.String" /> 개체의 반복 및 개별 문자 읽기를 지원합니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.CharEnumerator> 문자에 참조 된 읽기 전용 액세스를 제공 <xref:System.String> 개체입니다. 예를 들어는 `foreach` 컬렉션의 요소를 반복 하는 Microsoft Visual Basic 및 C# 프로그래밍 언어의 문은 검색 된 <xref:System.CharEnumerator> 에서 <xref:System.String> 하의 문자를 반복 하는 개체 개체입니다.  
  
 에 대 한 없는 공용 생성자는 <xref:System.CharEnumerator>합니다. 대신, 호출는 <xref:System.String> 개체의 <xref:System.String.GetEnumerator%2A> 를 얻는 메서드를 한 <xref:System.CharEnumerator> 문자열을 참조 하도록 하 여 초기화 합니다.  
  
 A <xref:System.CharEnumerator> 문자열의 문자에 대 한 내부 인덱스 유지 관리는 <xref:System.CharEnumerator> 참조 합니다. 인덱스의 상태가 하 고 문자열에서 문자 위치 논리적으로 첫 번째 문자 앞 또는 마지막 문자 뒤를 참조할 때 잘못 된 문자열 내의 문자를 참조 하는 것입니다. 인덱스를 첫 번째 문자 앞에 논리적으로 초기화 되 고 반복 완료 되 면 마지막 문자 뒤는 위치로 설정 됩니다. 인덱스가 잘못 된 문자에 액세스 하려고 하면 예외가 throw 됩니다.  
  
 <xref:System.CharEnumerator.MoveNext%2A> 메서드 인덱스를 하나 증가 시킴을 첫 번째 및 이후의 문자에 액세스 하도록 합니다. <xref:System.CharEnumerator.Reset%2A> 메서드를 논리적으로 첫 번째 문자 앞으로 인덱스를 설정 합니다. <xref:System.CharEnumerator.Current%2A> 속성 인덱스에 의해 현재 참조 하는 문자를 검색 합니다. <xref:System.CharEnumerator.Clone%2A> 메서드의 복사본을 만듭니다는 <xref:System.CharEnumerator>합니다.  
  
> [!NOTE]
>  여러 독립적인 인스턴스 <xref:System.CharEnumerator> 의 단일 인스턴스에 대 한 액세스를 가질 수 있습니다 하나 이상의 스레드 간에 <xref:System.String>합니다. 이 클래스는 지원 하기 위해 구현 되는 <xref:System.Collections.IEnumerator> 인터페이스입니다. 열거자의 사용과 관련 된 자세한 내용은 참조는 <xref:System.Collections.IEnumerator> 항목입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.CharEnumerator> 문자열의 개별 문자를 열거 하는 클래스입니다. 인스턴스화하여는 <xref:System.CharEnumerator> 호출 하 여 개체는 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> 메서드를 한 문자에서으로 이동 다음 호출 하 여는 <xref:System.CharEnumerator.MoveNext%2A> 메서드를의 값을 검색 하 여 현재 문자를 표시 하 고는 <xref:System.CharEnumerator.Current%2A> 속성입니다.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 단, 사용 하 여 동일한 작업을 좀 더 직관적으로 수행할 수 있도록 `foreach` (C#에서) 또는 `For Each` (Visual Basic의 경우)의 다음 예제와 같이 보여 줍니다.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.CharEnumerator" /> 개체의 복사본을 만듭니다.</summary>
        <returns>현재 <see cref="T:System.Object" /> 개체의 복사본인 <see cref="T:System.CharEnumerator" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 반환 값의이 인스턴스에 대 한 복사본은 <xref:System.CharEnumerator> 및 현재 상태에 있습니다. 이 반복 하는 동안 상태를 저장 하는 데 유용는 <xref:System.String> 개체입니다.  
  
 예를 들어 응용 프로그램에 사용의 원본 인스턴스 <xref:System.CharEnumerator> 의 각 문자에서 반복 하는 <xref:System.String>합니다. 고유 문자에 오류가 발생 하면 응용 프로그램 처리를 중지 하 고 호출에서 <xref:System.CharEnumerator.Clone%2A> 메서드. 이렇게 하면 실제로 <xref:System.CharEnumerator> 에서 개체의 인덱스는 <xref:System.String>합니다.  
  
 응용 프로그램의 다른 부분으로 이동 하는 복제를 사용 하 여 `String` 일부 보조 처리를 수행 합니다. 이 탐색의 부작용은 복제본에서 처리가 중지 된 위치의 추적 하지 않게 합니다. 그러나 보조 처리가 완료 되 면 응용 프로그램은 복제본을 삭제 하 고 원래를 사용 하 여 <xref:System.CharEnumerator> 인스턴스 작업을 다시 시작 하는 <xref:System.String> 원래 처리가 중지 되었습니다.  
  
> [!NOTE]
>  이 메서드는 지원 하도록 구현 된 <xref:System.ICloneable> 인터페이스입니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.CharEnumerator" /> 개체에서 열거한 문자열의 현재 참조되는 문자를 가져옵니다.</summary>
        <value>이 <see cref="T:System.CharEnumerator" /> 개체에서 현재 참조하는 유니코드 문자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator> 클래스를 열거 하는 문자열에 대 한 내부 인덱스 유지 관리 및 <xref:System.CharEnumerator.Current%2A> 속성 인덱스에서 현재 참조 하는 문자를 반환 합니다. 인덱스가 유효 하는 경우에이 속성을 호출 해야 그렇지 않으면 예외가 throw 됩니다.  
  
 인덱스는 항상 빈 문자열에 대 한 유효한 (""). 또한 인덱스는 유효 기간이 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> 또는 <xref:System.CharEnumerator.Reset%2A> 메서드를 호출 합니다. 이러한 방법 중 하나를 호출한 다음 호출에서 <xref:System.CharEnumerator.MoveNext%2A> 열거형된 문자열의 첫 번째 문자 인덱스를 조정 하는 메서드. 인덱스가 유효 때마다는 <xref:System.CharEnumerator.MoveNext%2A> 메서드 반환 `true`합니다.  
  
 <xref:System.CharEnumerator.Current%2A> 인덱스 및 연속 해 서 호출할 이동 하지 않습니다 <xref:System.CharEnumerator.Current%2A> 반환 될 때까지 동일한 문자 <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, 또는 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> 라고 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.CharEnumerator> 문자열의 개별 문자를 열거 하는 클래스입니다. 인스턴스화하여는 <xref:System.CharEnumerator> 호출 하 여 개체는 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> 메서드를 한 문자에서으로 이동 다음 호출 하 여는 <xref:System.CharEnumerator.MoveNext%2A> 메서드를의 값을 검색 하 여 현재 문자를 표시 하 고는 <xref:System.CharEnumerator.Current%2A> 속성입니다.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 단, 사용 하 여 동일한 작업을 좀 더 직관적으로 수행할 수 있도록 `foreach` (C#에서) 또는 `For Each` (Visual Basic의 경우)의 다음 예제와 같이 보여 줍니다.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">인덱스가 유효하지 않는 경우. 즉, 인덱스가 열거형 문자열의 첫 번째 문자 앞이나 마지막 문자 뒤의 위치입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.CharEnumerator" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator.Dispose%2A> 사용을 마치면 <xref:System.CharEnumerator>를 호출합니다. <xref:System.CharEnumerator.Dispose%2A> 메서드를 사용하면 <xref:System.CharEnumerator>를 사용할 수 없게 됩니다. 호출한 후 <xref:System.CharEnumerator.Dispose%2A>에 대 한 모든 참조를 해제 해야는 <xref:System.CharEnumerator> 가비지 수집기는 메모리를 회수할 수 있도록 하는 <xref:System.CharEnumerator> 차지한 합니다.  
  
 자세한 내용은 참조 [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md) 및 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md)합니다.  
  
> [!NOTE]
>  <xref:System.CharEnumerator.Dispose%2A>에 대한 마지막 참조를 해제하기 전에 반드시 <xref:System.CharEnumerator>를 호출하십시오. 이렇게 하지 않으면 가비지 수집기가 <xref:System.CharEnumerator> 개체의 `Finalize` 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>현재 <see cref="T:System.CharEnumerator" /> 개체의 내부 인덱스를 열거된 문자열의 다음 문자로 증가시킵니다.</summary>
        <returns>
          인덱스가 성공적으로 증가하고 열거형 문자 내에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator> 클래스를 열거 하는 문자열에 대 한 내부 인덱스 유지 관리 및 <xref:System.CharEnumerator.MoveNext%2A> 메서드 인덱스를 하나 증가 시킴 합니다. 호출 <xref:System.CharEnumerator.MoveNext%2A> 호출한 후 <xref:System.String.GetEnumerator%2A> 또는 <xref:System.CharEnumerator.Reset%2A> 열거형된 문자열의 첫 번째 문자를 현재 문자 위치를 증가 합니다. 반환 값은 검사 `true` 현재 문자 위치가 유효한 지 확인 합니다.  
  
 이면 인덱스가 이미 열거형된 문자열의 마지막 문자 뒤의 인덱스가 변경 되지 않습니다 및 `false` 반환 됩니다.  
  
 열거 된 문자열이 비어 있으면 다음에 유의 ("")의 상태는 <xref:System.CharEnumerator> 항상 유효 하지 않은 합니다. ¿¡´에 대 한 내부 인덱스는 <xref:System.CharEnumerator> 처음 열거형된 문자열의 첫 번째 문자 앞 이며 따라서 올바르지 않습니다. <xref:System.CharEnumerator.MoveNext%2A> 또한 유효 하지 않은 열거형된 문자열의 마지막 (존재 하지 않음) 문자 다음 인덱스를 논리적으로 설정 합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.CharEnumerator> 문자열의 개별 문자를 열거 하는 클래스입니다. 인스턴스화하여는 <xref:System.CharEnumerator> 호출 하 여 개체는 <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> 메서드를 한 문자에서으로 이동 다음 호출 하 여는 <xref:System.CharEnumerator.MoveNext%2A> 메서드를의 값을 검색 하 여 현재 문자를 표시 하 고는 <xref:System.CharEnumerator.Current%2A> 속성입니다.  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 단, 사용 하 여 동일한 작업을 좀 더 직관적으로 수행할 수 있도록 `foreach` (C#에서) 또는 `For Each` (Visual Basic의 경우)의 다음 예제와 같이 보여 줍니다.  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>인덱스를 논리적으로 열거형 문자열의 첫째 문자 앞으로 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CharEnumerator> 클래스를 열거 하는 문자열에 대 한 내부 인덱스 유지 관리 및 <xref:System.CharEnumerator.Reset%2A> 메서드 유효 하지 않은 상태로 인덱스를 설정 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>이 <see cref="T:System.CharEnumerator" /> 개체에서 열거한 문자열의 현재 참조되는 문자를 가져옵니다. 이 멤버에 대한 설명은 <see cref="P:System.Collections.IEnumerator.Current" />를 참조하세요.</summary>
        <value>이 <see cref="T:System.CharEnumerator" /> 개체에서 현재 참조하는 boxing된 유니코드 문자입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 멤버는 명시적 인터페이스 멤버 구현이며, <xref:System.CharEnumerator> 인스턴스가 <xref:System.Collections.IEnumerator> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">열거가 시작되지 않았습니다.  
  
 또는  
  
 열거형이 끝났습니다.</exception>
      </Docs>
    </Member>
  </Members>
</Type>