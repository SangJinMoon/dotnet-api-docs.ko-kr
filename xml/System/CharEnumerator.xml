<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CharEnumerator.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50570f4e2dd53178598e0e6fbf7b325d2cd252378.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0570f4e2dd53178598e0e6fbf7b325d2cd252378</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CharEnumerator">
          <source>Supports iterating over a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> object and reading its individual characters.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> 개체의 반복 및 개별 문자 읽기를 지원합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.CharEnumerator">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>A <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> provides read-only access to the characters in a referenced <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 문자에 참조 된 읽기 전용 액세스를 제공 <ph id="ph2">&lt;xref:System.String&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>For example, the <ph id="ph1">`foreach`</ph> statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> from a <ph id="ph3">&lt;xref:System.String&gt;</ph> object in order to iterate through the characters in that object.</source>
          <target state="translated">예를 들어는 <ph id="ph1">`foreach`</ph> 컬렉션의 요소를 반복 하는 Microsoft Visual Basic 및 C# 프로그래밍 언어의 문은 검색 된 <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> 에서 <ph id="ph3">&lt;xref:System.String&gt;</ph> 하의 문자를 반복 하는 개체 개체입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>There is no public constructor for <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated">에 대 한 없는 공용 생성자는 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>Instead, call a <ph id="ph1">&lt;xref:System.String&gt;</ph> object's <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> method to obtain a <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> that is initialized to reference the string.</source>
          <target state="translated">대신, 호출는 <ph id="ph1">&lt;xref:System.String&gt;</ph> 개체의 <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> 를 얻는 메서드를 한 <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> 문자열을 참조 하도록 하 여 초기화 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>A <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> maintains an internal index to the characters in the string the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> references.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 문자열의 문자에 대 한 내부 인덱스 유지 관리는 <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> 참조 합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</source>
          <target state="translated">인덱스의 상태가 하 고 문자열에서 문자 위치 논리적으로 첫 번째 문자 앞 또는 마지막 문자 뒤를 참조할 때 잘못 된 문자열 내의 문자를 참조 하는 것입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</source>
          <target state="translated">인덱스를 첫 번째 문자 앞에 논리적으로 초기화 되 고 반복 완료 되 면 마지막 문자 뒤는 위치로 설정 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>An exception is thrown if you attempt to access a character while the index is invalid.</source>
          <target state="translated">인덱스가 잘못 된 문자에 액세스 하려고 하면 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method increments the index by one, so the first and subsequent characters are accessed in turn.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> 메서드 인덱스를 하나 증가 시킴을 첫 번째 및 이후의 문자에 액세스 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> method sets the index to a position logically before the first character.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> 메서드를 논리적으로 첫 번째 문자 앞으로 인덱스를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property retrieves the character currently referenced by index.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> 속성 인덱스에 의해 현재 참조 하는 문자를 검색 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> method creates a copy of the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> 메서드의 복사본을 만듭니다는 <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>Several independent instances of <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> across one or more threads can have access to a single instance of <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">여러 독립적인 인스턴스 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 의 단일 인스턴스에 대 한 액세스를 가질 수 있습니다 하나 이상의 스레드 간에 <ph id="ph2">&lt;xref:System.String&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>This class is implemented to support the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.</source>
          <target state="translated">이 클래스는 지원 하기 위해 구현 되는 <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>For more information regarding the use of an enumerator, see the <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> topic.</source>
          <target state="translated">열거자의 사용과 관련 된 자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.Collections.IEnumerator&gt;</ph> 항목입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class to enumerate the individual characters in a string.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 문자열의 개별 문자를 열거 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>It instantiates a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, moves from one character to the next by calling the <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method, and displays the current character by retrieving the value of the <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property.</source>
          <target state="translated">인스턴스화하여는 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 호출 하 여 개체는 <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> 메서드를 한 문자에서으로 이동 다음 호출 하 여는 <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> 메서드를의 값을 검색 하 여 현재 문자를 표시 하 고는 <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CharEnumerator">
          <source>Note, however, that the same operation can be performed somewhat more intuitively by using <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each`</ph> (in Visual Basic), as the following example shows.</source>
          <target state="translated">단, 사용 하 여 동일한 작업을 좀 더 직관적으로 수행할 수 있도록 <ph id="ph1">`foreach`</ph> (C#에서) 또는 <ph id="ph2">`For Each`</ph> (Visual Basic의 경우)의 다음 예제와 같이 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Clone">
          <source>Creates a copy of the current <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> 개체의 복사본을 만듭니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Clone">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that is a copy of the current <ph id="ph2">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> 개체의 복사본인 <ph id="ph2">&lt;see cref="T:System.CharEnumerator" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>The return value is a copy of this instance of <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> and its current state.</source>
          <target state="translated">반환 값의이 인스턴스에 대 한 복사본은 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 및 현재 상태에 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>This is useful for saving your state while iterating through a <ph id="ph1">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">이 반복 하는 동안 상태를 저장 하는 데 유용는 <ph id="ph1">&lt;xref:System.String&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>For example, suppose your application uses an original instance of <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> to iterate through each character in a <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">예를 들어 응용 프로그램에 사용의 원본 인스턴스 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 의 각 문자에서 반복 하는 <ph id="ph2">&lt;xref:System.String&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>When some unique character is encountered, your application pauses processing and invokes the <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> method.</source>
          <target state="translated">고유 문자에 오류가 발생 하면 응용 프로그램 처리를 중지 하 고 호출에서 <ph id="ph1">&lt;xref:System.CharEnumerator.Clone%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>In effect, this saves the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object's index in the <ph id="ph2">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">이렇게 하면 실제로 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 에서 개체의 인덱스는 <ph id="ph2">&lt;xref:System.String&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>Your application uses the clone to navigate to another part of the <ph id="ph1">`String`</ph> to perform some auxiliary processing.</source>
          <target state="translated">응용 프로그램의 다른 부분으로 이동 하는 복제를 사용 하 여 <ph id="ph1">`String`</ph> 일부 보조 처리를 수행 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>The side-effect of this navigation is the clone loses track of the position where processing stopped.</source>
          <target state="translated">이 탐색의 부작용은 복제본에서 처리가 중지 된 위치의 추적 하지 않게 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>However, when the auxiliary processing is complete, your application discards the clone and uses the original <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> instance to resume working on the <ph id="ph2">&lt;xref:System.String&gt;</ph> where the original processing stopped.</source>
          <target state="translated">그러나 보조 처리가 완료 되 면 응용 프로그램은 복제본을 삭제 하 고 원래를 사용 하 여 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 인스턴스 작업을 다시 시작 하는 <ph id="ph2">&lt;xref:System.String&gt;</ph> 원래 처리가 중지 되었습니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Clone">
          <source>This method is implemented to support the <ph id="ph1">&lt;xref:System.ICloneable&gt;</ph> interface.</source>
          <target state="translated">이 메서드는 지원 하도록 구현 된 <ph id="ph1">&lt;xref:System.ICloneable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.Current">
          <source>Gets the currently referenced character in the string enumerated by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> 개체에서 열거한 문자열의 현재 참조되는 문자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The Unicode character currently referenced by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> 개체에서 현재 참조하는 유니코드 문자입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class maintains an internal index to the enumerated string, and the <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property returns the character that is currently referenced by the index.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 클래스를 열거 하는 문자열에 대 한 내부 인덱스 유지 관리 및 <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> 속성 인덱스에서 현재 참조 하는 문자를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>This property should be invoked only when the index is valid; otherwise, an exception is thrown.</source>
          <target state="translated">인덱스가 유효 하는 경우에이 속성을 호출 해야 그렇지 않으면 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The index is always invalid for an empty string ("").</source>
          <target state="translated">인덱스는 항상 빈 문자열에 대 한 유효한 ("").</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The index is also invalid after the <ph id="ph1">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> method is called.</source>
          <target state="translated">또한 인덱스는 유효 기간이 <ph id="ph1">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>After either of these methods is called, invoke the <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method to adjust the index to the first character in the enumerated string.</source>
          <target state="translated">이러한 방법 중 하나를 호출한 다음 호출에서 <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> 열거형된 문자열의 첫 번째 문자 인덱스를 조정 하는 메서드.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The index is valid whenever the <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">인덱스가 유효 때마다는 <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> 메서드 반환 <ph id="ph2">`true`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source><ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> does not move the index, and consecutive calls to <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> return the same character until <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph>, or <ph id="ph5">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> 인덱스 및 연속 해 서 호출할 이동 하지 않습니다 <ph id="ph2">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> 반환 될 때까지 동일한 문자 <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph>, 또는 <ph id="ph5">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> 라고 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class to enumerate the individual characters in a string.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 문자열의 개별 문자를 열거 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>It instantiates a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, moves from one character to the next by calling the <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method, and displays the current character by retrieving the value of the <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property.</source>
          <target state="translated">인스턴스화하여는 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 호출 하 여 개체는 <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> 메서드를 한 문자에서으로 이동 다음 호출 하 여는 <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> 메서드를의 값을 검색 하 여 현재 문자를 표시 하 고는 <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.Current">
          <source>Note, however, that the same operation can be performed somewhat more intuitively by using <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each`</ph> (in Visual Basic), as the following example shows.</source>
          <target state="translated">단, 사용 하 여 동일한 작업을 좀 더 직관적으로 수행할 수 있도록 <ph id="ph1">`foreach`</ph> (C#에서) 또는 <ph id="ph2">`For Each`</ph> (Visual Basic의 경우)의 다음 예제와 같이 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.Current">
          <source>The index is invalid; that is, it is before the first or after the last character of the enumerated string.</source>
          <target state="translated">인덱스가 유효하지 않는 경우. 즉, 인덱스가 열거형 문자열의 첫 번째 문자 앞이나 마지막 문자 뒤의 위치입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>Call <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> when you are finished using the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> 사용을 마치면 <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>를 호출합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> method leaves the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> in an unusable state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> 메서드를 사용하면 <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>를 사용할 수 없게 됩니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>After calling <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> was occupying.</source>
          <target state="translated">호출한 후 <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph>에 대 한 모든 참조를 해제 해야는 <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph> 가비지 수집기는 메모리를 회수할 수 있도록 하는 <ph id="ph3">&lt;xref:System.CharEnumerator&gt;</ph> 차지한 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">자세한 내용은 참조 <bpt id="p1">[</bpt>관리 되지 않는 리소스 정리<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> 및 <bpt id="p2">[</bpt>Dispose 메서드를 구현<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>Always call <ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.Dispose%2A&gt;</ph>에 대한 마지막 참조를 해제하기 전에 반드시 <ph id="ph2">&lt;xref:System.CharEnumerator&gt;</ph>를 호출하십시오.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Dispose">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
          <target state="translated">이렇게 하지 않으면 가비지 수집기가 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 개체의 <ph id="ph2">`Finalize`</ph> 메서드를 호출할 때까지 사용 중인 리소스가 해제되지 않습니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.MoveNext">
          <source>Increments the internal index of the current <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object to the next character of the enumerated string.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> 개체의 내부 인덱스를 열거된 문자열의 다음 문자로 증가시킵니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.MoveNext">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the index is successfully incremented and within the enumerated string; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">인덱스가 성공적으로 증가하고 열거형 문자 내에 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class maintains an internal index to the enumerated string, and the <ph id="ph2">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method increments the index by one.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 클래스를 열거 하는 문자열에 대 한 내부 인덱스 유지 관리 및 <ph id="ph2">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> 메서드 인덱스를 하나 증가 시킴 합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Call <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> to increment the current character position to the first character in the enumerated string.</source>
          <target state="translated">호출 <ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> 호출한 후 <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> 열거형된 문자열의 첫 번째 문자를 현재 문자 위치를 증가 합니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Check that the return value is <ph id="ph1">`true`</ph> to determine that the current character position is valid.</source>
          <target state="translated">반환 값은 검사 <ph id="ph1">`true`</ph> 현재 문자 위치가 유효한 지 확인 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>If the index is already beyond the last character of the enumerated string, the index is not changed and <ph id="ph1">`false`</ph> is returned.</source>
          <target state="translated">이면 인덱스가 이미 열거형된 문자열의 마지막 문자 뒤의 인덱스가 변경 되지 않습니다 및 <ph id="ph1">`false`</ph> 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Notice that if the enumerated string is empty (""), the state of the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> is always invalid.</source>
          <target state="translated">열거 된 문자열이 비어 있으면 다음에 유의 ("")의 상태는 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 항상 유효 하지 않은 합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>This is because the internal index for the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> is initially before the first character of the enumerated string and is therefore invalid.</source>
          <target state="translated">¿¡´에 대 한 내부 인덱스는 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 처음 열거형된 문자열의 첫 번째 문자 앞 이며 따라서 올바르지 않습니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source><ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> 또한 유효 하지 않은 열거형된 문자열의 마지막 (존재 하지 않음) 문자 다음 인덱스를 논리적으로 설정 합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class to enumerate the individual characters in a string.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 문자열의 개별 문자를 열거 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>It instantiates a <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> object by calling the <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, moves from one character to the next by calling the <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> method, and displays the current character by retrieving the value of the <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> property.</source>
          <target state="translated">인스턴스화하여는 <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 호출 하 여 개체는 <ph id="ph2">&lt;xref:System.String.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> 메서드를 한 문자에서으로 이동 다음 호출 하 여는 <ph id="ph3">&lt;xref:System.CharEnumerator.MoveNext%2A&gt;</ph> 메서드를의 값을 검색 하 여 현재 문자를 표시 하 고는 <ph id="ph4">&lt;xref:System.CharEnumerator.Current%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.MoveNext">
          <source>Note, however, that the same operation can be performed somewhat more intuitively by using <ph id="ph1">`foreach`</ph> (in C#) or <ph id="ph2">`For Each`</ph> (in Visual Basic), as the following example shows.</source>
          <target state="translated">단, 사용 하 여 동일한 작업을 좀 더 직관적으로 수행할 수 있도록 <ph id="ph1">`foreach`</ph> (C#에서) 또는 <ph id="ph2">`For Each`</ph> (Visual Basic의 경우)의 다음 예제와 같이 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.CharEnumerator.Reset">
          <source>Initializes the index to a position logically before the first character of the enumerated string.</source>
          <target state="translated">인덱스를 논리적으로 열거형 문자열의 첫째 문자 앞으로 초기화합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CharEnumerator.Reset">
          <source>The <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> class maintains an internal index to the enumerated string, and the <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> method sets the index to the invalid state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 클래스를 열거 하는 문자열에 대 한 내부 인덱스 유지 관리 및 <ph id="ph2">&lt;xref:System.CharEnumerator.Reset%2A&gt;</ph> 메서드 유효 하지 않은 상태로 인덱스를 설정 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>Gets the currently referenced character in the string enumerated by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> 개체에서 열거한 문자열의 현재 참조되는 문자를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>For a description of this member, see <ph id="ph1">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph>.</source>
          <target state="translated">이 멤버에 대한 설명은 <ph id="ph1">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph>를 참조하세요.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>The boxed Unicode character currently referenced by this <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.CharEnumerator" /&gt;</ph> 개체에서 현재 참조하는 boxing된 유니코드 문자입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CharEnumerator&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>Enumeration has not started.</source>
          <target state="translated">열거가 시작되지 않았습니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
          <source>Enumeration has ended.</source>
          <target state="translated">열거형이 끝났습니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>