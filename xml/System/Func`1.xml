<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="32bfd87c717460eeca143861ae42f3f64042f133" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30729727" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">이 대리자로 캡슐화되는 메서드의 반환 값 형식입니다.</typeparam>
    <summary>매개 변수가 없고 <typeparamref name="TResult" /> 매개 변수에 지정된 형식의 값을 반환하는 메서드를 캡슐화합니다.</summary>
    <returns>이 대리자로 캡슐화되는 메서드의 반환 값입니다.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 지정 대리자를 명시적으로 선언 하지 않고 매개 변수로 전달 될 수 있는 메서드를 나타내는이 대리자를 사용할 수 있습니다. 캡슐화 된 메서드에이 대리자에 의해 정의 되는 메서드 시그니처와 일치 해야 합니다. 즉, 캡슐화 된 메서드에 매개 변수가 없어야 하 고 값을 반환 해야 합니다.  
  
> [!NOTE]
>  매개 변수가 없는 반환 하는 메서드를 참조 하려면 `void` (로 선언 됨 Visual basic에서는 `Sub` 아니라는 `Function`)를 사용 하 여는 <xref:System.Action> 대리자를 대신 합니다.  
  
 사용 하는 경우는 <xref:System.Func%601> 대리자를 않아도를 명시적으로 매개 변수가 없는 메서드를 캡슐화 하는 대리자를 정의 합니다. 예를 들어 다음 코드 라는 대리자를 명시적으로 선언 `WriteMethod` 할당에 대 한 참조는 `OutputTarget.SendToFile` 메서드는 대리자 인스턴스를 인스턴스.  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 다음 예제에서는이 코드를 인스턴스화하여 간소화는 <xref:System.Func%601> 명시적으로 새 대리자를 정의 하 고 명명 된 메서드를 할당 하는 대신 대리자입니다.  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 사용할 수는 <xref:System.Func%601> 다음 예제와 같이 C# 무명 메서드와 함께 위임 합니다. (무명 메서드에 대 한 소개를 참조 하십시오. [무명 메서드](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 람다 식을 지정할 수도 있습니다는 <xref:System.Func%602> 다음 예제와 같이 위임 합니다. (람다 식에 대 한 소개를 참조 하십시오. [람다 식](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) 및 [람다 식](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 내부 람다 식의 형식이 제네릭 중 `Func` 대리자입니다. 따라서 명시적으로 대리자를 할당 하지 않고 람다 식을 매개 변수로 전달할 수 있습니다. 특히, 때문에 형식에서의 많은 메서드에서 <xref:System.Linq> 네임 스페이스에 있어야 `Func` 매개 변수를 전달할 수 있습니다 이러한 메서드는 람다 식을 명시적으로 인스턴스화하지 않고도 `Func` 위임 합니다.  
  
 함수를 할당할 수는 비용이 많이 드는 계산 결과 실제로 필요한 경우에 실행 하려는 경우는 <xref:System.Func%601> 위임 합니다. 값에 액세스 하는 속성 식에 사용 될 때까지 함수 실행을 지연할 수 있습니다. 다음 섹션의 예제에서는이 작업을 수행 하는 방법을 보여 줍니다.  
  
   
  
## Examples  
 다음 예제에서는 매개 변수를 사용 하는 대리자를 사용 하는 방법을 보여 줍니다. 이 코드에서는 제네릭 클래스 `LazyValue` 형식의 필드가 있는 <xref:System.Func%601>합니다. 이 대리자 필드의 형식 매개 변수에 해당 하는 형식의 값을 반환 하는 함수에 대 한 참조를 저장할 수는 `LazyValue` 개체입니다. `LazyValue` 형식는 `Value` 속성 (하지 이미 실행) 하는 경우에 함수를 실행 하는 결과 값을 반환 합니다.  
  
 이 예제에서는 두 개의 메서드를 만들고 두 개를 인스턴스화하고 `LazyValue` 이러한 메서드를 호출 하는 람다 식 사용 하 여 개체입니다. 메서드를 호출 하기만 하므로 람다 식 매개 변수를 사용 하지 않습니다. 두 메서드는 실행 결과 같이 경우에만 각 값 `LazyValue` 개체가 검색 됩니다.  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>