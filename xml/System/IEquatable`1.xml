<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6cf9514e878010f1710a9517414d04169c8524bc" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431074" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="b82ca-101">비교할 개체의 형식입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b82ca-101">The type of objects to compare.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="b82ca-102">값 형식 또는 클래스에서 인스턴스의 같음을 결정하는 형식별 메서드를 만들기 위해 구현하는 일반화된 메서드를 정의합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b82ca-102">Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b82ca-103">이 인터페이스는 형식 (예, 숫자 및 문자열 클래스)에 대 한 값을 가진를 동일시 수에 의해 구현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-103">This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</span></span> <span data-ttu-id="b82ca-104">값 형식 또는 클래스에서 구현 하는 <xref:System.IEquatable%601.Equals%2A> 메서드는 메서드를 만드는 유형별 인스턴스의 같음을 결정 하는 데 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-104">A value type or class implements the <xref:System.IEquatable%601.Equals%2A> method to create a type-specific method suitable for determining equality of instances.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b82ca-105"><xref:System.IComparable%601> 인터페이스 정의 <xref:System.IComparable%601.CompareTo%2A> 메서드를 구현 하는 형식 인스턴스의 정렬 순서를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-105">The <xref:System.IComparable%601> interface defines the <xref:System.IComparable%601.CompareTo%2A> method, which determines the sort order of instances of the implementing type.</span></span> <span data-ttu-id="b82ca-106"><xref:System.IEquatable%601> 인터페이스 정의 <xref:System.IEquatable%601.Equals%2A> 메서드를 구현 하는 형식의 인스턴스의 같음을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-106">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="b82ca-107"><xref:System.IEquatable%601> 인터페이스와 같은 제네릭 컬렉션 개체에서 사용 됩니다 <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, 및 <xref:System.Collections.Generic.LinkedList%601> 등의 메서드에서 같은지 테스트할 때 `Contains`, `IndexOf`, `LastIndexOf`, 및 `Remove`합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-107">The <xref:System.IEquatable%601> interface is used by generic collection objects such as <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, and <xref:System.Collections.Generic.LinkedList%601> when testing for equality in such methods as `Contains`, `IndexOf`, `LastIndexOf`, and `Remove`.</span></span> <span data-ttu-id="b82ca-108">제네릭 컬렉션에 저장 될 수 있는 모든 개체에 대 한 구현 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-108">It should be implemented for any object that might be stored in a generic collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b82ca-109">예를 참조는 <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="b82ca-109">See the example for the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="b82ca-110">
        <para>형식 매개 변수 대체는 <see cref="T:System.IEquatable`1" /> 이 인터페이스를 구현 하는 형식과 인터페이스입니다.  구현 하는 경우 <see cref="T:System.IEquatable`1" />의 기본 클래스 구현 재정의 해야 <see cref="M:System.Object.Equals(System.Object)" /> 및 <see cref="M:System.Object.GetHashCode" /> 동작은의 해당 값과 일치 하는 <see cref="M:System.IEquatable`1.Equals(`0)" /> 메서드. 재정의 하는 경우 <see cref="M:System.Object.Equals(System.Object)" />, 정적에 대 한 호출에서 재정의 된 구현이 라고도 <see langword="Equals(System.Object, System.Object)" /> 클래스에 메서드. 오버 로드 해야 또한는 <see langword="op_Equality" /> 및 <see langword="op_Inequality" /> 연산자입니다. 이렇게 하면 모든 테스트 같음에 대 한 일관 된 결과 반환 합니다.  <block subset="none" type="note"><para> 재정의에 대 한 내용은 <see cref="M:System.Object.Equals(System.Object)" />, 참조는 <see cref="M:System.Object.Equals(System.Object)" /> 문서.  </para></block>  값 형식에 대 한 구현 항상 해야 <see cref="T:System.IEquatable`1" /> 재정의 <see cref="M:System.Object.Equals(System.Object)" /> 성능 향상을 위해 합니다. <see cref="M:System.Object.Equals(System.Object)" /> 값 형식 상자 및 두 개의 값이 같은지를 비교 하기 위해 리플렉션을 사용 합니다. 두 구현 <see cref="M:System.IEquatable`1.Equals(`0)" /> 및 재정의가 <see cref="M:System.Object.Equals(System.Object)" /> 일관 된 결과 반환 해야 합니다.  구현 하는 경우 <see cref="T:System.IEquatable`1" />를 구현 해야 <see cref="T:System.IComparable`1" /> 경우 여의 인스턴스를 정렬 하거나 정렬할 수 있습니다. 형식을 구현 하는 경우 <see cref="T:System.IComparable`1" />를 구현할 수도 거의 항상 <see cref="T:System.IEquatable`1" />합니다.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="b82ca-110">
          <para>Replace the type parameter of the <see cref="T:System.IEquatable`1" /> interface with the type that is implementing this interface.  If you implement <see cref="T:System.IEquatable`1" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method. If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class. In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators. This ensures that all tests for equality return consistent results.  <block subset="none" type="note"><para> For information on overriding <see cref="M:System.Object.Equals(System.Object)" />, see the <see cref="M:System.Object.Equals(System.Object)" /> article.  </para></block>  For a value type, you should always implement <see cref="T:System.IEquatable`1" /> and override <see cref="M:System.Object.Equals(System.Object)" /> for better performance. <see cref="M:System.Object.Equals(System.Object)" /> boxes value types and relies on reflection to compare two values for equality. Both your implementation of <see cref="M:System.IEquatable`1.Equals(`0)" /> and your override of <see cref="M:System.Object.Equals(System.Object)" /> should return consistent results.  If you implement <see cref="T:System.IEquatable`1" />, you should also implement <see cref="T:System.IComparable`1" /> if instances of your type can be ordered or sorted. If your type implements <see cref="T:System.IComparable`1" />, you almost always also implement <see cref="T:System.IEquatable`1" />.</para>
        </span>
      </span>
      <span data-ttu-id="b82ca-111">
        <para>일부 디자인 순서 관계를 원하는 한 종류 하지만 같음 정렬 관계에서 다 수 있습니다. 사전순으로 정렬할 수 있는 '개인' 클래스를 것이 좋습니다. 같은 이름의 두 사람이 정렬 동일 하지만 동일인일 되지 않습니다.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="b82ca-111">
          <para>Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation. Consider a `Person` class where you sort alphabetically. Two people with the same name sort the same, but are not the same person.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="b82ca-112">이 개체와 비교할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b82ca-112">An object to compare with this object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b82ca-113">현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b82ca-113">Indicates whether the current object is equal to another object of the same type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b82ca-114">현재 개체가 <see langword="true" /> 매개 변수와 같으면 <paramref name="other" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b82ca-114">
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b82ca-115">구현에서 <xref:System.IEquatable%601.Equals%2A> 메서드가 형식의 다른 개체와 같은지 테스트를 수행 하기 위한 `T`, 현재 개체와 동일한 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-115">The implementation of the <xref:System.IEquatable%601.Equals%2A> method is intended to perform a test for equality with another object of type `T`, the same type as the current object.</span></span> <span data-ttu-id="b82ca-116"><xref:System.IEquatable%601.Equals(%600)> 메서드는 다음과 같은 경우:</span><span class="sxs-lookup"><span data-stu-id="b82ca-116">The <xref:System.IEquatable%601.Equals(%600)> method is called in the following circumstances:</span></span>  
  
-   <span data-ttu-id="b82ca-117">경우는 `Equals` 메서드는 및 `other` 인수는 형식의 강력한 형식의 개체를 사용 하 여 `T`합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-117">When the `Equals` method is called and the `other` argument is a strongly-typed object of type `T`.</span></span> <span data-ttu-id="b82ca-118">(경우 `other` 다른 형식의 `T`, 기본 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-118">(If `other` is not of type `T`, the base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="b82ca-119">두 가지 방법 중 <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> 성능이 약간 더 높습니다.)</span><span class="sxs-lookup"><span data-stu-id="b82ca-119">Of the two methods, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> offers slightly better performance.)</span></span>  
  
-   <span data-ttu-id="b82ca-120">많은 제네릭 컬렉션 개체의 검색 메서드가 호출 될 때를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-120">When the search methods of a number of generic collection objects are called.</span></span> <span data-ttu-id="b82ca-121">이러한 형식 및 해당 메서드 중 일부는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-121">Some of these types and their methods include the following:</span></span>  
  
    -   <span data-ttu-id="b82ca-122">제네릭 오버 로드 중 일부는 <xref:System.Array.BinarySearch%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="b82ca-122">Some of the generic overloads of the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
    -   <span data-ttu-id="b82ca-123">검색 메서드는 <xref:System.Collections.Generic.List%601> 클래스를 포함 하 여 <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, 및 <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-123">The search methods of the <xref:System.Collections.Generic.List%601> class, including <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, and <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.</span></span>  
  
    -   <span data-ttu-id="b82ca-124">검색 메서드는 <xref:System.Collections.Generic.Dictionary%602> 클래스를 포함 하 여 <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> 및 <xref:System.Collections.Generic.IDictionary%602.Remove%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-124">The search methods of the <xref:System.Collections.Generic.Dictionary%602> class, including <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> and <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.</span></span>  
  
    -   <span data-ttu-id="b82ca-125">제네릭의 검색 방법을 <xref:System.Collections.Generic.LinkedList%601> 클래스를 포함 하 여 <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> 및 <xref:System.Collections.Generic.LinkedList%601.Remove%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-125">The search methods of the generic <xref:System.Collections.Generic.LinkedList%601> class, including <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> and <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.</span></span>  
  
 <span data-ttu-id="b82ca-126">즉, 배열 또는 제네릭 컬렉션 개체에는 클래스의 개체를 저장할 수는 가능성을 처리를 구현 하는 것이 좋습니다 <xref:System.IEquatable%601> 개체를 쉽게 식별 하 고 조작할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-126">In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <xref:System.IEquatable%601> so that the object can be easily identified and manipulated.</span></span>  
  
 <span data-ttu-id="b82ca-127">구현 하는 경우는 <xref:System.IEquatable%601.Equals%2A> 메서드를 제네릭 형식 인수에 지정 된 형식에 대 한 적절 하 게 일치 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-127">When implementing the <xref:System.IEquatable%601.Equals%2A> method, define equality appropriately for the type specified by the generic type argument.</span></span> <span data-ttu-id="b82ca-128">예를 들어, 형식 인수는 <xref:System.Int32>, 두 개의 32 비트 부호 있는 정수 비교를 위해 적절 하 게 일치 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-128">For example, if the type argument is <xref:System.Int32>, define equality appropriately for the comparison of two 32-bit signed integers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b82ca-129">다음 예제에서는 구현 중 일부는 `Person` 구현 하는 클래스 <xref:System.IEquatable%601> 다음 두 가지 속성이 고 `LastName` 및 `SSN`합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-129">The following example shows the partial implementation of a `Person` class that implements <xref:System.IEquatable%601> and has two properties, `LastName` and `SSN`.</span></span> <span data-ttu-id="b82ca-130"><xref:System.IEquatable%601.Equals%2A> 메서드 반환 `True` 경우는 `SSN` 두 개의 속성 `Person` 개체는 동일; 그렇지 않으면 반환 `False`합니다.</span><span class="sxs-lookup"><span data-stu-id="b82ca-130">The <xref:System.IEquatable%601.Equals%2A> method returns `True` if the `SSN` property of two `Person` objects is identical; otherwise, it returns `False`.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 <span data-ttu-id="b82ca-131">`Person` 개체에 저장할 수 있습니다는 <xref:System.Collections.Generic.List%601> 개체를 식별할 수 있습니다는 `Contains` 다음 예제와 같이 메서드.</span><span class="sxs-lookup"><span data-stu-id="b82ca-131">`Person` objects can then be stored in a <xref:System.Collections.Generic.List%601> object and can be identified by the `Contains` method, as the following example shows.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="b82ca-132">
            <para>구현 하는 경우 <see cref="M:System.IEquatable`1.Equals(`0)" />의 기본 클래스 구현 재정의 해야 <see cref="M:System.Object.Equals(System.Object)" /> 및 <see cref="M:System.Object.GetHashCode" /> 동작은의 해당 값과 일치 하는 <see cref="M:System.IEquatable`1.Equals(`0)" /> 메서드. 재정의 하는 경우 <see cref="M:System.Object.Equals(System.Object)" />, 정적에 대 한 호출에서 재정의 된 구현이 라고도 <see langword="Equals(System.Object, System.Object)" /> 클래스에 메서드. 오버 로드 해야 또한는 <see langword="op_Equality" /> 및 <see langword="op_Inequality" /> 연산자입니다. 이렇게 하면 같음에 대 한 모든 테스트 예제는 일관 된 결과 반환 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="b82ca-132">
              <para>If you implement <see cref="M:System.IEquatable`1.Equals(`0)" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method. If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class. In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators. This ensures that all tests for equality return consistent results, which the example illustrates.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>