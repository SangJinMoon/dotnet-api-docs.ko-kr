<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IEquatable`1.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac519bc49f94beee1a3c075a5ffa5eaa52f9c90027f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19bc49f94beee1a3c075a5ffa5eaa52f9c90027f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The type of objects to compare.</source>
          <target state="translated">비교할 개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IEquatable`1">
          <source>Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</source>
          <target state="translated">값 형식 또는 클래스에서 인스턴스의 같음을 결정하는 형식별 메서드를 만들기 위해 구현하는 일반화된 메서드를 정의합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</source>
          <target state="translated">이 인터페이스는 형식 (예, 숫자 및 문자열 클래스)에 대 한 값을 가진를 동일시 수에 의해 구현 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>A value type or class implements the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method to create a type-specific method suitable for determining equality of instances.</source>
          <target state="translated">값 형식 또는 클래스에서 구현 하는 <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> 메서드는 메서드를 만드는 유형별 인스턴스의 같음을 결정 하는 데 적합 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The <ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> interface defines the <ph id="ph2">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> method, which determines the sort order of instances of the implementing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IComparable%601&gt;</ph> 인터페이스 정의 <ph id="ph2">&lt;xref:System.IComparable%601.CompareTo%2A&gt;</ph> 메서드를 구현 하는 형식 인스턴스의 정렬 순서를 결정 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface defines the <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method, which determines the equality of instances of the implementing type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> 인터페이스 정의 <ph id="ph2">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> 메서드를 구현 하는 형식의 인스턴스의 같음을 결정 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> interface is used by generic collection objects such as <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, and <ph id="ph4">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> when testing for equality in such methods as <ph id="ph5">`Contains`</ph>, <ph id="ph6">`IndexOf`</ph>, <ph id="ph7">`LastIndexOf`</ph>, and <ph id="ph8">`Remove`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> 인터페이스와 같은 제네릭 컬렉션 개체에서 사용 됩니다 <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, 및 <ph id="ph4">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 등의 메서드에서 같은지 테스트할 때 <ph id="ph5">`Contains`</ph>, <ph id="ph6">`IndexOf`</ph>, <ph id="ph7">`LastIndexOf`</ph>, 및 <ph id="ph8">`Remove`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>It should be implemented for any object that might be stored in a generic collection.</source>
          <target state="translated">제네릭 컬렉션에 저장 될 수 있는 모든 개체에 대 한 구현 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>See the example for the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">예를 참조는 <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Replace the type parameter of the <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> interface with the type that is implementing this interface.</source>
          <target state="translated">형식 매개 변수 대체는 <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> 이 인터페이스를 구현 하는 형식과 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If you implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>, you should also override the base class implementations of <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> so that their behavior is consistent with that of the <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> method.</source>
          <target state="translated">구현 하는 경우 <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>의 기본 클래스 구현 재정의 해야 <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> 및 <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> 동작은의 해당 값과 일치 하는 <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If you do override <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, your overridden implementation is also called in calls to the static <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> method on your class.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, 정적에 대 한 호출에서 재정의 된 구현이 라고도 <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> 클래스에 메서드.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>In addition, you should overload the <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> and <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> operators.</source>
          <target state="translated">오버 로드 해야 또한는 <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> 연산자입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>This ensures that all tests for equality return consistent results.</source>
          <target state="translated">이렇게 하면 모든 테스트 같음에 대 한 일관 된 결과 반환 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>For information on overriding <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, see the <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> article.</source>
          <target state="translated">재정의에 대 한 내용은 <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, 참조는 <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> 문서.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>For a value type, you should always implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> and override <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> for better performance.</source>
          <target state="translated">값 형식에 대 한 구현 항상 해야 <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph> 재정의 <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> 성능 향상을 위해 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source><ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> boxes value types and relies on reflection to compare two values for equality.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> 상자 값 형식 및 두 개의 값이 같은지를 비교 하기 위해 리플렉션을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Both your implementation of <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> and your override of <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> should return consistent results.</source>
          <target state="translated">두 구현 <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> 및 재정의가 <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> 일관 된 결과 반환 해야 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If you implement <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>, you should also implement <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> if instances of your type can be ordered or sorted.</source>
          <target state="translated">구현 하는 경우 <ph id="ph1">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>를 구현 해야 <ph id="ph2">&lt;see cref="T:System.IComparable`1" /&gt;</ph> 경우 여의 인스턴스를 정렬 하거나 정렬할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>If your type implements <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph>, you almost always also implement <ph id="ph2">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>.</source>
          <target state="translated">형식을 구현 하는 경우 <ph id="ph1">&lt;see cref="T:System.IComparable`1" /&gt;</ph>를 구현할 수도 거의 항상 <ph id="ph2">&lt;see cref="T:System.IEquatable`1" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation.</source>
          <target state="translated">일부 디자인 순서 관계를 원하는 한 종류 하지만 같음 정렬 관계에서 다 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Consider a <ph id="ph1">`Person`</ph> class where you sort alphabetically.</source>
          <target state="translated">고려는 <ph id="ph1">`Person`</ph> 사전순으로 정렬할 수 있는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IEquatable`1">
          <source>Two people with the same name sort the same, but are not the same person.</source>
          <target state="translated">같은 이름의 두 사람이 정렬 동일 하지만 동일인일 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IEquatable`1.Equals(`0)">
          <source>An object to compare with this object.</source>
          <target state="translated">이 개체와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Indicates whether the current object is equal to another object of the same type.</source>
          <target state="translated">현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IEquatable`1.Equals(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current object is equal to the <ph id="ph2">&lt;paramref name="other" /&gt;</ph> parameter; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 개체가 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 매개 변수와 같으면 <ph id="ph2">&lt;paramref name="other" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method is intended to perform a test for equality with another object of type <ph id="ph2">`T`</ph>, the same type as the current object.</source>
          <target state="translated">구현에서 <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> 메서드가 형식의 다른 개체와 같은지 테스트를 수행 하기 위한 <ph id="ph2">`T`</ph>, 현재 개체와 동일한 형식입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601.Equals(%600)&gt;</ph> method is called in the following circumstances:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IEquatable%601.Equals(%600)&gt;</ph> 메서드는 다음과 같은 경우:</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>When the <ph id="ph1">`Equals`</ph> method is called and the <ph id="ph2">`other`</ph> argument is a strongly-typed object of type <ph id="ph3">`T`</ph>.</source>
          <target state="translated">경우는 <ph id="ph1">`Equals`</ph> 메서드는 및 <ph id="ph2">`other`</ph> 인수는 형식의 강력한 형식의 개체를 사용 하 여 <ph id="ph3">`T`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>(If <ph id="ph1">`other`</ph> is not of type <ph id="ph2">`T`</ph>, the base <ph id="ph3">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method is called.</source>
          <target state="translated">(경우 <ph id="ph1">`other`</ph> 다른 형식의 <ph id="ph2">`T`</ph>, 기본 <ph id="ph3">&lt;xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> 메서드를 호출 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Of the two methods, <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> offers slightly better performance.)</source>
          <target state="translated">두 가지 방법 중 <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType&gt;</ph> 성능이 약간 더 높습니다.)</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>When the search methods of a number of generic collection objects are called.</source>
          <target state="translated">많은 제네릭 컬렉션 개체의 검색 메서드가 호출 될 때를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Some of these types and their methods include the following:</source>
          <target state="translated">이러한 형식 및 해당 메서드 중 일부는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>Some of the generic overloads of the <ph id="ph1">&lt;xref:System.Array.BinarySearch%2A&gt;</ph> method.</source>
          <target state="translated">제네릭 오버 로드 중 일부는 <ph id="ph1">&lt;xref:System.Array.BinarySearch%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The search methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">검색 메서드는 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 클래스를 포함 하 여 <ph id="ph2">&lt;xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType&gt;</ph>, 및 <ph id="ph5">&lt;xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The search methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph>.</source>
          <target state="translated">검색 메서드는 <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> 클래스를 포함 하 여 <ph id="ph2">&lt;xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The search methods of the generic <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class, including <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Remove%2A&gt;</ph>.</source>
          <target state="translated">제네릭의 검색 방법을 <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 클래스를 포함 하 여 <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Remove%2A&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> so that the object can be easily identified and manipulated.</source>
          <target state="translated">즉, 배열 또는 제네릭 컬렉션 개체에는 클래스의 개체를 저장할 수는 가능성을 처리를 구현 하는 것이 좋습니다 <ph id="ph1">&lt;xref:System.IEquatable%601&gt;</ph> 개체를 쉽게 식별 하 고 조작할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>When implementing the <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method, define equality appropriately for the type specified by the generic type argument.</source>
          <target state="translated">구현 하는 경우는 <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> 메서드를 제네릭 형식 인수에 지정 된 형식에 대 한 적절 하 게 일치 정의 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>For example, if the type argument is <ph id="ph1">&lt;xref:System.Int32&gt;</ph>, define equality appropriately for the comparison of two 32-bit signed integers.</source>
          <target state="translated">예를 들어, 형식 인수는 <ph id="ph1">&lt;xref:System.Int32&gt;</ph>, 두 개의 32 비트 부호 있는 정수 비교를 위해 적절 하 게 일치 정의 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The following example shows the partial implementation of a <ph id="ph1">`Person`</ph> class that implements <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> and has two properties, <ph id="ph3">`LastName`</ph> and <ph id="ph4">`SSN`</ph>.</source>
          <target state="translated">다음 예제에서는 구현 중 일부는 <ph id="ph1">`Person`</ph> 구현 하는 클래스 <ph id="ph2">&lt;xref:System.IEquatable%601&gt;</ph> 다음 두 가지 속성이 고 <ph id="ph3">`LastName`</ph> 및 <ph id="ph4">`SSN`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>The <ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> method returns <ph id="ph2">`True`</ph> if the <ph id="ph3">`SSN`</ph> property of two <ph id="ph4">`Person`</ph> objects is identical; otherwise, it returns <ph id="ph5">`False`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IEquatable%601.Equals%2A&gt;</ph> 메서드 반환 <ph id="ph2">`True`</ph> 경우는 <ph id="ph3">`SSN`</ph> 두 개의 속성 <ph id="ph4">`Person`</ph> 개체는 동일; 그렇지 않으면 반환 <ph id="ph5">`False`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source><ph id="ph1">`Person`</ph> objects can then be stored in a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object and can be identified by the <ph id="ph3">`Contains`</ph> method, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`Person`</ph> 개체에 저장할 수 있습니다는 <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> 개체를 식별할 수 있습니다는 <ph id="ph3">`Contains`</ph> 다음 예제와 같이 메서드.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>If you implement <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph>, you should also override the base class implementations of <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> and <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> so that their behavior is consistent with that of the <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> method.</source>
          <target state="translated">구현 하는 경우 <ph id="ph1">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph>의 기본 클래스 구현 재정의 해야 <ph id="ph2">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph> 및 <ph id="ph3">&lt;see cref="M:System.Object.GetHashCode" /&gt;</ph> 동작은의 해당 값과 일치 하는 <ph id="ph4">&lt;see cref="M:System.IEquatable`1.Equals(`0)" /&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>If you do override <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, your overridden implementation is also called in calls to the static <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> method on your class.</source>
          <target state="translated">재정의 하는 경우 <ph id="ph1">&lt;see cref="M:System.Object.Equals(System.Object)" /&gt;</ph>, 정적에 대 한 호출에서 재정의 된 구현이 라고도 <ph id="ph2">&lt;see langword="Equals(System.Object, System.Object)" /&gt;</ph> 클래스에 메서드.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>In addition, you should overload the <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> and <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> operators.</source>
          <target state="translated">오버 로드 해야 또한는 <ph id="ph1">&lt;see langword="op_Equality" /&gt;</ph> 및 <ph id="ph2">&lt;see langword="op_Inequality" /&gt;</ph> 연산자입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IEquatable`1.Equals(`0)">
          <source>This ensures that all tests for equality return consistent results, which the example illustrates.</source>
          <target state="translated">이렇게 하면 같음에 대 한 모든 테스트 예제는 일관 된 결과 반환 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>