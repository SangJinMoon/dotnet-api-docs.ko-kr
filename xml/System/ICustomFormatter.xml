<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6002c7bffa27e626bfd04916c139d411974b86fc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728677" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>개체 값의 사용자 지정 형식을 지원하는 메서드를 정의합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter> 단일 메서드를 포함 하는 인터페이스 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>합니다. 이 인터페이스는 참조 또는 값 형식에 의해 구현 되는 <xref:System.ICustomFormatter.Format%2A> 메서드는 개체의 값의 사용자 지정 형식 문자열 표현을 반환 합니다.  
  
 일반적으로 <xref:System.ICustomFormatter> 인터페이스와 구현 됩니다는 <xref:System.IFormatProvider> 두.NET Framework 복합 문자열 형식 지정 메서드를 포함 하는 동작을 사용자 지정에 대 한 인터페이스는 <xref:System.IFormatProvider> 매개 변수입니다. 특히,는 <xref:System.ICustomFormatter> 인터페이스에 전달 된 개체의 값의 사용자 지정 형식을 제공할 수는 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 및 <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 메서드.  
  
 개체의 값을 사용자 지정 표시를 제공 하는 다음을 수행 해야 합니다.  
  
1.  구현 하는 클래스 정의 <xref:System.ICustomFormatter> 인터페이스와 해당 단일 멤버의 <xref:System.ICustomFormatter.Format%2A> 메서드.  
  
2.  구현 하는 클래스 정의 <xref:System.IFormatProvider> 인터페이스와 해당 단일 멤버의 <xref:System.IFormatProvider.GetFormat%2A> 메서드. <xref:System.IFormatProvider.GetFormat%2A> 메서드의 인스턴스를 반환 하면 <xref:System.ICustomFormatter> 구현 합니다. 단일 클래스 둘 다 구현 종종 <xref:System.ICustomFormatter> 및 <xref:System.IFormatProvider>합니다. 그러면 클래스의 `GetFormat` 구현만 자체의 인스턴스를 반환 합니다.  
  
3.  전달 된 <xref:System.IFormatProvider> 구현을으로 `provider` 의 인수는 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 메서드 또는 비교 가능한 메서드 합니다.  
  
 .NET Framework 메서드는 자체 대신 사용자 지정 형식을 사용 합니다.  
  
   
  
## Examples  
 다음 예제에서는 구현 <xref:System.ICustomFormatter> 이진, 8 진수 및 16 진수 정수 계열 값의 서식 지정을 허용 하도록 합니다. 이 예제에서는 하나의 클래스에서에서 `IBinaryFormatter`, 둘 다 구현 <xref:System.ICustomFormatter> 및 <xref:System.IFormatProvider>합니다. 해당 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 메서드 확인 여부는 `formatType` 매개 변수를 나타냅니다는 <xref:System.ICustomFormatter> 유형입니다. 그렇지 않으면 `BinaryFormatter` 의 인스턴스를 반환 합니다. 그렇지 않으면 반환 `null`합니다. 해당 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 구현 형식 매개 변수가 세 가지 지원 되는 형식 문자열 중 하나 인지를 결정 ("O"에 대 한 이진 파일에 대 한 "B", 8 진수 및 16 진수에 대 한 "H") 하 고 서식을 지정는 `arg` 매개 변수 적절 하 게 합니다. 그렇지 않은 경우, `arg` 않습니다 `null`, 호출 된 `arg` 매개 변수의 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 있을 경우 구현 또는 해당 매개 변수가 없는 `ToString` 메서드, 하나는 그렇지 않습니다. `arg`가 `null`이면 메서드에서 <xref:System.String.Empty?displayProperty=nameWithType>을 반환합니다.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` 전달 하 여 사용자 지정 서식을 제공을 사용할 수 있습니다는 `BinaryFormatter` 개체로 `provider` 의 매개 변수는 <xref:System.String.Format%2A> 다음 예제와 같이 메서드.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>공용 언어 런타임 사용 하려고 시도 하면 <see cref="T:System.ICustomFormatter" /> 합성 형식 문자열에 있는 모든 형식 항목에 대 한 구현 합니다. 결과적으로, 하시면 하 여 <see cref="T:System.ICustomFormatter" /> 처리 하도록 설계 되지는 값 또는 구현 서식 지정 서비스 개체를 제공 하도록 호출 됩니다. 이러한 경우 프로그램 <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> 메서드 해당 개체 또는 값에 대 한 적절 한 형식 지정 메서드를 호출 해야 합니다.  
  
 다음 두 종류의 <see cref="T:System.ICustomFormatter" /> 구현: 내장 함수 및 확장 합니다.  
  
 내장 함수 구현 하는 구현 응용 프로그램 정의 개체에 대 한 사용자 지정 서식을 제공 합니다. 이 경우 구현은 다음 포함 되어야 합니다.  
  
-   정의 개체의 서식을 정의 하는 서식 문자열입니다. 형식 문자열은 선택적입니다. 일반적으로 "G" 또는 "g" 형식 문자열에는 일반 (또는 가장 일반적으로 사용) 형식을 정의합니다. 그러나 사용자가 선택한 형식 문자열을 정의 하는 무료 됩니다. 대/소문자 구분 또는 대/소문자 구분 지 여부를 결정할 수도 있습니다.  
  
-   개체의 형식에 전달 하는 테스트 프로그램 <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> 메서드는 사용자 응용 프로그램 정의 형식입니다. 없는 경우 개체의 호출 해야 <see cref="T:System.IFormattable" /> 있을 경우 구현 또는 해당 <see cref="M:System.Object.ToString" /> 메서드, 그렇지 않은 경우. 모든 예외는 throw 될 수 있습니다 이러한 메서드 호출을 처리 하도록 준비 해야 합니다.  
  
-   구현 형식 문자열을 지 원하는 경우 null 형식 문자열을 처리 하는 코드입니다. 일반 형식 지정자와 함께 null 형식 문자열을 대체 하는 가장 일반적인 방법이입니다.  
  
-   구현이 지 원하는 형식 문자열을 처리 하는 코드입니다.  
  
-   지원 하지 않는 형식 문자열을 처리 하는 코드입니다. 가장 일반적인 방법은 throw 하는 <see cref="T:System.FormatException" />기본 형식을 제공할 수 있지만, 합니다.  
  
 확장 구현 하는 구현이 이미 있는 서식 지원 형식에 대 한 사용자 지정 서식을 제공 합니다. 예를 들어 정의할 수 있습니다는 <c>CustomerNumberFormatter</c> 특정 숫자 사이가 하이픈으로 구분 하는 정수 계열 형식을 형식입니다. 이 경우 구현은 다음 포함 되어야 합니다.  
  
-   정의 개체의 서식을 확장 하는 형식 문자열입니다. 이러한 형식 문자열은 필요 하지만 기존 형식 문자열 형식의와 충돌 하지 않아야 합니다. 예를 들어, 확장 하는 경우에 대 한 서식 지정은 <see cref="T:System.Int32" /> 형식, "C", "D", "E", "F" 및 "G" 형식 지정자 중 일부를 구현 하지 않아야 합니다.  
  
-   개체의 형식에 전달 하는 테스트 프로그램 <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> 메서드는 해당 확장의 형식 지정 하는 형식입니다. 그렇지 않은 경우 호출 개체의 <see cref="T:System.IFormattable" /> 남아 있을 경우 또는 개체의 매개 변수가 없는 경우 구현 <see cref="M:System.Object.ToString" /> 메서드, 그렇지 않은 경우. 모든 예외는 throw 될 수 있습니다 이러한 메서드 호출을 처리 하도록 준비 해야 합니다.  
  
-   확장명이 지 원하는 형식 문자열을 처리 하는 코드입니다.  
  
-   확장 프로그램을 지원 하지 않는 형식 문자열을 처리 하는 코드입니다. 이러한 형식의에 전달 되어야 <see cref="T:System.IFormattable" /> 구현 합니다. 모든 예외는 throw 될 수 있습니다 이러한 메서드 호출을 처리 하도록 준비 해야 합니다.</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">서식 사양을 포함하는 형식 문자열입니다.</param>
        <param name="arg">서식을 지정할 개체입니다.</param>
        <param name="formatProvider">현재 인스턴스에 대한 형식 정보를 제공하는 개체입니다.</param>
        <summary>지정된 형식 및 문화권별 형식 지정 정보를 사용하여 지정된 개체의 값을 해당 문자열 표현으로 변환합니다.</summary>
        <returns>
          <paramref name="arg" /> 및 <paramref name="format" />에서 지정한 대로 형식이 지정된 <paramref name="formatProvider" /> 값을 문자열로 나타낸 것입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>은 콜백 메서드입니다. 와 같은 사용자 지정 서식을 지원 하는 메서드에서 라고 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 또는 <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>합니다. 구현에서 각 형식 항목에 대해 한 번씩 호출 됩니다는 [합성 형식 문자열](~/docs/standard/base-types/composite-formatting.md)합니다. 예를 들어 다음 문에서 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 메서드 세 번 호출 됩니다.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg` 매개 변수는 특정 형식 항목의 인덱스에 따라 0부터 시작 위치가 개체 목록에서 개체입니다.  
  
 `format` 는 형식 문자열을 포함 하는 매개 변수는 `formatString` 형식 항목의 구성 요소입니다. 형식 항목에 없는 경우 `formatString` 의 값, 구성, `format` 은 `null`합니다. 경우 `format` 은 `null`의 유형에 따라 `arg`, 선택한 기본 형식 지정을 사용할 수 있습니다.  
  
 `formatProvider` 매개 변수는는 <xref:System.IFormatProvider> 구현에 대 한 형식을 제공 하는 `arg`합니다. 인스턴스는 일반적으로 프로그램 <xref:System.ICustomFormatter> 구현 합니다. 경우 `formatProvider` 은 `null`, 매개 변수를 무시 합니다.  
  
 구현에서 <xref:System.ICustomFormatter.Format%2A> 메서드에.NET Framework를 지원 하지 않는 서식을 제공할 수 있도록 다음과 같은 기능을 포함 해야 합니다. Format 메서드는 형식을 지원 하지 않는 경우 결정 되는 개체 구현 포맷 되었는지는 <xref:System.IFormattable> 인터페이스입니다. 호출 하는 경우는 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 해당 인터페이스의 메서드입니다. 그렇지 않으면 기본값을 호출할 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 내부 개체의 메서드. 다음 코드에서는이 패턴을 보여 줍니다.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 다음 예제에서는 구현 <xref:System.ICustomFormatter> 이진, 8 진수 및 16 진수 정수 계열 값의 서식 지정을 허용 하도록 합니다. 해당 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 구현 형식 매개 변수가 세 가지 지원 되는 형식 문자열 중 하나 인지를 결정 ("O"에 대 한 이진 파일에 대 한 "B", 8 진수 및 16 진수에 대 한 "H") 하 고 서식을 지정는 `arg` 매개 변수 적절 하 게 합니다. 그렇지 않은 경우, `arg` 않습니다 `null`, 호출 된 `arg` 매개 변수의 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 있을 경우 구현 또는 해당 매개 변수가 없는 `ToString` 메서드, 하나는 그렇지 않습니다. `arg`가 `null`이면 메서드에서 <xref:System.String.Empty?displayProperty=nameWithType>을 반환합니다.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` 전달 하 여 사용자 지정 서식을 제공을 사용할 수 있습니다는 `BinaryFormatter` 개체로 `provider` 의 매개 변수는 <xref:System.String.Format%2A> 다음 예제와 같이 메서드.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
  </Members>
</Type>