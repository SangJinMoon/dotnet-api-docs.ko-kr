<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ICustomFormatter.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56002c7bffa27e626bfd04916c139d411974b86fc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6002c7bffa27e626bfd04916c139d411974b86fc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ICustomFormatter">
          <source>Defines a method that supports custom formatting of the value of an object.</source>
          <target state="translated">개체 값의 사용자 지정 형식을 지원하는 메서드를 정의합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface includes a single method, <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> 단일 메서드를 포함 하는 인터페이스 <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>When this interface is implemented by a reference or value type, the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method returns a custom-formatted string representation of an object's value.</source>
          <target state="translated">이 인터페이스는 참조 또는 값 형식에 의해 구현 되는 <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> 메서드는 개체의 값의 사용자 지정 형식 문자열 표현을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Typically, the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface is implemented with the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> interface to customize the behavior of two .NET Framework composite string formatting methods that include an <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> parameter.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> 인터페이스와 구현 됩니다는 <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> 두.NET Framework 복합 문자열 형식 지정 메서드를 포함 하는 동작을 사용자 지정에 대 한 인터페이스는 <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Specifically, the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface can provide custom formatting of the value of an object passed to the <ph id="ph2">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">특히,는 <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> 인터페이스에 전달 된 개체의 값의 사용자 지정 형식을 제공할 수는 <ph id="ph2">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Providing a custom representation of an object's value requires that you do the following:</source>
          <target state="translated">개체의 값을 사용자 지정 표시를 제공 하는 다음을 수행 해야 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Define a class that implements the <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> interface and its single member, the <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method.</source>
          <target state="translated">구현 하는 클래스 정의 <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> 인터페이스와 해당 단일 멤버의 <ph id="ph2">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Define a class that implements the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> interface and its single member, the <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method.</source>
          <target state="translated">구현 하는 클래스 정의 <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> 인터페이스와 해당 단일 멤버의 <ph id="ph2">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> method returns an instance of your <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A&gt;</ph> 메서드의 인스턴스를 반환 하면 <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Often, a single class implements both <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> and <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">단일 클래스 둘 다 구현 종종 <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> 및 <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In that case, the class's <ph id="ph1">`GetFormat`</ph> implementation just returns an instance of itself.</source>
          <target state="translated">그러면 클래스의 <ph id="ph1">`GetFormat`</ph> 구현만 자체의 인스턴스를 반환 합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Pass the <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> implementation as the <ph id="ph2">`provider`</ph> argument of the <ph id="ph3">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> method or a comparable method.</source>
          <target state="translated">전달 된 <ph id="ph1">&lt;xref:System.IFormatProvider&gt;</ph> 구현을으로 <ph id="ph2">`provider`</ph> 의 인수는 <ph id="ph3">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> 메서드 또는 비교 가능한 메서드 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The .NET Framework method will then use your custom formatting instead of its own.</source>
          <target state="translated">.NET Framework 메서드는 자체 대신 사용자 지정 형식을 사용 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The following example implements <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> to allow binary, octal, and hexadecimal formatting of integral values.</source>
          <target state="translated">다음 예제에서는 구현 <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> 이진, 8 진수 및 16 진수 정수 계열 값의 서식 지정을 허용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In this example, a single class, <ph id="ph1">`IBinaryFormatter`</ph>, implements both <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> and <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>.</source>
          <target state="translated">이 예제에서는 하나의 클래스에서에서 <ph id="ph1">`IBinaryFormatter`</ph>, 둘 다 구현 <ph id="ph2">&lt;xref:System.ICustomFormatter&gt;</ph> 및 <ph id="ph3">&lt;xref:System.IFormatProvider&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Its <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> method determines whether the <ph id="ph2">`formatType`</ph> parameter represents an <ph id="ph3">&lt;xref:System.ICustomFormatter&gt;</ph> type.</source>
          <target state="translated">해당 <ph id="ph1">&lt;xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType&gt;</ph> 메서드 확인 여부는 <ph id="ph2">`formatType`</ph> 매개 변수를 나타냅니다는 <ph id="ph3">&lt;xref:System.ICustomFormatter&gt;</ph> 유형입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If it does, <ph id="ph1">`BinaryFormatter`</ph> returns an instance of itself; otherwise, it returns <ph id="ph2">`null`</ph>.</source>
          <target state="translated">그렇지 않으면 <ph id="ph1">`BinaryFormatter`</ph> 의 인스턴스를 반환 합니다. 그렇지 않으면 반환 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Its <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the <ph id="ph2">`arg`</ph> parameter appropriately.</source>
          <target state="translated">해당 <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> 구현 형식 매개 변수가 세 가지 지원 되는 형식 문자열 중 하나 인지를 결정 ("O"에 대 한 이진 파일에 대 한 "B", 8 진수 및 16 진수에 대 한 "H") 하 고 서식을 지정는 <ph id="ph2">`arg`</ph> 매개 변수 적절 하 게 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Otherwise, if <ph id="ph1">`arg`</ph> is not <ph id="ph2">`null`</ph>, it calls the <ph id="ph3">`arg`</ph> parameter's <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation, if one exists, or its parameterless <ph id="ph5">`ToString`</ph> method, if one does not.</source>
          <target state="translated">그렇지 않은 경우, <ph id="ph1">`arg`</ph> 않습니다 <ph id="ph2">`null`</ph>, 호출 된 <ph id="ph3">`arg`</ph> 매개 변수의 <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> 있을 경우 구현 또는 해당 매개 변수가 없는 <ph id="ph5">`ToString`</ph> 메서드, 하나는 그렇지 않습니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If <ph id="ph1">`arg`</ph> is <ph id="ph2">`null`</ph>, the method returns <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`arg`</ph>가 <ph id="ph2">`null`</ph>이면 메서드에서 <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source><ph id="ph1">`BinaryFormatter`</ph> can then be used to provide custom formatting by passing a <ph id="ph2">`BinaryFormatter`</ph> object as the <ph id="ph3">`provider`</ph> parameter of the <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> method, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`BinaryFormatter`</ph> 전달 하 여 사용자 지정 서식을 제공을 사용할 수 있습니다는 <ph id="ph2">`BinaryFormatter`</ph> 개체로 <ph id="ph3">`provider`</ph> 의 매개 변수는 <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> 다음 예제와 같이 메서드.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The common language runtime attempts to use your <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementation for every format item in a composite format string.</source>
          <target state="translated">공용 언어 런타임 사용 하려고 시도 하면 <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> 합성 형식 문자열에 있는 모든 형식 항목에 대 한 구현 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>As a result, you should expect that your <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementation will be called to provide formatting services to objects or values that it is not designed to handle.</source>
          <target state="translated">결과적으로, 하시면 하 여 <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> 처리 하도록 설계 되지는 값 또는 구현 서식 지정 서비스 개체를 제공 하도록 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In these cases, your <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> method must call the appropriate formatting method for that object or value.</source>
          <target state="translated">이러한 경우 프로그램 <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> 메서드 해당 개체 또는 값에 대 한 적절 한 형식 지정 메서드를 호출 해야 합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>There are two kinds of <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> implementations: intrinsic and extension.</source>
          <target state="translated">다음 두 종류의 <ph id="ph1">&lt;see cref="T:System.ICustomFormatter" /&gt;</ph> 구현: 내장 함수 및 확장 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Intrinsic implementations are implementations that provide custom formatting for an application-defined object.</source>
          <target state="translated">내장 함수 구현 하는 구현 응용 프로그램 정의 개체에 대 한 사용자 지정 서식을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In this case, your implementation should include the following:</source>
          <target state="translated">이 경우 구현은 다음 포함 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A definition of format strings that define the formatting of the object.</source>
          <target state="translated">정의 개체의 서식을 정의 하는 서식 문자열입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Format strings are optional.</source>
          <target state="translated">형식 문자열은 선택적입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Typically, a "G" or "g" format string defines the general (or most commonly used) format.</source>
          <target state="translated">일반적으로 "G" 또는 "g" 형식 문자열에는 일반 (또는 가장 일반적으로 사용) 형식을 정의합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>However, you are free to define any format strings that you choose.</source>
          <target state="translated">그러나 사용자가 선택한 형식 문자열을 정의 하는 무료 됩니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You are also free to decide whether they are case-sensitive or case-insensitive.</source>
          <target state="translated">대/소문자 구분 또는 대/소문자 구분 지 여부를 결정할 수도 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A test to ensure that the type of the object passed to your <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> method is your application-defined type.</source>
          <target state="translated">개체의 형식에 전달 하는 테스트 프로그램 <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> 메서드는 사용자 응용 프로그램 정의 형식입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If it is not, you should call the object's <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementation, if one exists, or its <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> method, if it does not.</source>
          <target state="translated">없는 경우 개체의 호출 해야 <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> 있을 경우 구현 또는 해당 <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> 메서드, 그렇지 않은 경우.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You should be prepared to handle any exceptions these method calls might throw.</source>
          <target state="translated">모든 예외는 throw 될 수 있습니다 이러한 메서드 호출을 처리 하도록 준비 해야 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle a null format string, if your implementation supports format strings.</source>
          <target state="translated">구현 형식 문자열을 지 원하는 경우 null 형식 문자열을 처리 하는 코드입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The most common approach is to replace a null format string with the general format specifier.</source>
          <target state="translated">일반 형식 지정자와 함께 null 형식 문자열을 대체 하는 가장 일반적인 방법이입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle any format strings that your implementation supports.</source>
          <target state="translated">구현이 지 원하는 형식 문자열을 처리 하는 코드입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle format strings that you do not support.</source>
          <target state="translated">지원 하지 않는 형식 문자열을 처리 하는 코드입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>The most common approach is to throw a <ph id="ph1">&lt;see cref="T:System.FormatException" /&gt;</ph>, although you can provide default formatting.</source>
          <target state="translated">가장 일반적인 방법은 throw 하는 <ph id="ph1">&lt;see cref="T:System.FormatException" /&gt;</ph>기본 형식을 제공할 수 있지만, 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Extension implementations are implementations that provide custom formatting for a type that already has formatting support.</source>
          <target state="translated">확장 구현 하는 구현이 이미 있는 서식 지원 형식에 대 한 사용자 지정 서식을 제공 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>For example, you could define a <bpt id="p1">&lt;c&gt;</bpt>CustomerNumberFormatter<ept id="p1">&lt;/c&gt;</ept> that formats an integral type with hyphens between specific digits.</source>
          <target state="translated">예를 들어 정의할 수 있습니다는 <bpt id="p1">&lt;c&gt;</bpt>CustomerNumberFormatter<ept id="p1">&lt;/c&gt;</ept> 특정 숫자 사이가 하이픈으로 구분 하는 정수 계열 형식을 형식입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>In this case, your implementation should include the following:</source>
          <target state="translated">이 경우 구현은 다음 포함 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A definition of format strings that extend the formatting of the object.</source>
          <target state="translated">정의 개체의 서식을 확장 하는 형식 문자열입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>These format strings are required, but they must not conflict with the type's existing format strings.</source>
          <target state="translated">이러한 형식 문자열은 필요 하지만 기존 형식 문자열 형식의와 충돌 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>For example, if you are extending formatting for the <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> type, you should not implement the "C", "D", "E", "F", and "G" format specifiers, among others.</source>
          <target state="translated">예를 들어, 확장 하는 경우에 대 한 서식 지정은 <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> 형식, "C", "D", "E", "F" 및 "G" 형식 지정자 중 일부를 구현 하지 않아야 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>A test that the type of the object passed to your <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> method is a type whose formatting your extension supports.</source>
          <target state="translated">개체의 형식에 전달 하는 테스트 프로그램 <ph id="ph1">&lt;see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /&gt;</ph> 메서드는 해당 확장의 형식 지정 하는 형식입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>If it is not, call the object's <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementation, if one exists, or the object's parameterless <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> method, if it does not.</source>
          <target state="translated">그렇지 않은 경우 호출 개체의 <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> 남아 있을 경우 또는 개체의 매개 변수가 없는 경우 구현 <ph id="ph2">&lt;see cref="M:System.Object.ToString" /&gt;</ph> 메서드, 그렇지 않은 경우.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You should be prepared to handle any exceptions these method calls might throw.</source>
          <target state="translated">모든 예외는 throw 될 수 있습니다 이러한 메서드 호출을 처리 하도록 준비 해야 합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle any format strings that your extension supports.</source>
          <target state="translated">확장명이 지 원하는 형식 문자열을 처리 하는 코드입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>Code to handle any format strings that your extension does not support.</source>
          <target state="translated">확장 프로그램을 지원 하지 않는 형식 문자열을 처리 하는 코드입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>These should be passed on to the type's <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> implementation.</source>
          <target state="translated">이러한 형식의에 전달 되어야 <ph id="ph1">&lt;see cref="T:System.IFormattable" /&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ICustomFormatter">
          <source>You should be prepared to handle any exceptions these method calls might throw.</source>
          <target state="translated">모든 예외는 throw 될 수 있습니다 이러한 메서드 호출을 처리 하도록 준비 해야 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>A format string containing formatting specifications.</source>
          <target state="translated">서식 사양을 포함하는 형식 문자열입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>An object to format.</source>
          <target state="translated">서식을 지정할 개체입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>An object that supplies format information about the current instance.</source>
          <target state="translated">현재 인스턴스에 대한 형식 정보를 제공하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Converts the value of a specified object to an equivalent string representation using specified format and culture-specific formatting information.</source>
          <target state="translated">지정된 형식 및 문화권별 형식 지정 정보를 사용하여 지정된 개체의 값을 해당 문자열 표현으로 변환합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The string representation of the value of <ph id="ph1">&lt;paramref name="arg" /&gt;</ph>, formatted as specified by <ph id="ph2">&lt;paramref name="format" /&gt;</ph> and <ph id="ph3">&lt;paramref name="formatProvider" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arg" /&gt;</ph> 및 <ph id="ph2">&lt;paramref name="format" /&gt;</ph>에서 지정한 대로 형식이 지정된 <ph id="ph3">&lt;paramref name="formatProvider" /&gt;</ph> 값을 문자열로 나타낸 것입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source><ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> is a callback method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph>은 콜백 메서드입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>It is called by a method that supports custom formatting, such as <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">와 같은 사용자 지정 서식을 지원 하는 메서드에서 라고 <ph id="ph1">&lt;xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph> 또는 <ph id="ph2">&lt;xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The implementation is called once for each format item in a <bpt id="p1">[</bpt>composite format string<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>.</source>
          <target state="translated">구현에서 각 형식 항목에 대해 한 번씩 호출 됩니다는 <bpt id="p1">[</bpt>합성 형식 문자열<ept id="p1">](~/docs/standard/base-types/composite-formatting.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>For example, in the following statement, the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> method is called three times.</source>
          <target state="translated">예를 들어 다음 문에서 <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> 메서드 세 번 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`arg`</ph> parameter is the object in the object list whose zero-based position corresponds to the index of a particular format item.</source>
          <target state="translated"><ph id="ph1">`arg`</ph> 매개 변수는 특정 형식 항목의 인덱스에 따라 0부터 시작 위치가 개체 목록에서 개체입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`format`</ph> parameter contains a format string, which is the <ph id="ph2">`formatString`</ph> component of a format item.</source>
          <target state="translated"><ph id="ph1">`format`</ph> 는 형식 문자열을 포함 하는 매개 변수는 <ph id="ph2">`formatString`</ph> 형식 항목의 구성 요소입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If the format item has no <ph id="ph1">`formatString`</ph> component, the value of <ph id="ph2">`format`</ph> is <ph id="ph3">`null`</ph>.</source>
          <target state="translated">형식 항목에 없는 경우 <ph id="ph1">`formatString`</ph> 의 값, 구성, <ph id="ph2">`format`</ph> 은 <ph id="ph3">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`format`</ph> is <ph id="ph2">`null`</ph>, depending on the type of <ph id="ph3">`arg`</ph>, you may be able to use the default format specification of your choice.</source>
          <target state="translated">경우 <ph id="ph1">`format`</ph> 은 <ph id="ph2">`null`</ph>의 유형에 따라 <ph id="ph3">`arg`</ph>, 선택한 기본 형식 지정을 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The <ph id="ph1">`formatProvider`</ph> parameter is the <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> implementation that provides formatting for <ph id="ph3">`arg`</ph>.</source>
          <target state="translated"><ph id="ph1">`formatProvider`</ph> 매개 변수는는 <ph id="ph2">&lt;xref:System.IFormatProvider&gt;</ph> 구현에 대 한 형식을 제공 하는 <ph id="ph3">`arg`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Typically, it is an instance of your <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> implementation.</source>
          <target state="translated">인스턴스는 일반적으로 프로그램 <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`formatProvider`</ph> is <ph id="ph2">`null`</ph>, ignore that parameter.</source>
          <target state="translated">경우 <ph id="ph1">`formatProvider`</ph> 은 <ph id="ph2">`null`</ph>, 매개 변수를 무시 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Your implementation of the <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> method must include the following functionality so the .NET Framework can provide formatting you do not support.</source>
          <target state="translated">구현에서 <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A&gt;</ph> 메서드에.NET Framework를 지원 하지 않는 서식을 제공할 수 있도록 다음과 같은 기능을 포함 해야 합니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If your format method does not support a format, determine whether the object being formatted implements the <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> interface.</source>
          <target state="translated">Format 메서드는 형식을 지원 하지 않는 경우 결정 되는 개체 구현 포맷 되었는지는 <ph id="ph1">&lt;xref:System.IFormattable&gt;</ph> 인터페이스입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If it does, invoke the <ph id="ph1">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> method of that interface.</source>
          <target state="translated">호출 하는 경우는 <ph id="ph1">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> 해당 인터페이스의 메서드입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Otherwise, invoke the default <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> method of the underlying object.</source>
          <target state="translated">그렇지 않으면 기본값을 호출할 <ph id="ph1">&lt;xref:System.Object.ToString%2A?displayProperty=nameWithType&gt;</ph> 내부 개체의 메서드.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The following code illustrates this pattern.</source>
          <target state="translated">다음 코드에서는이 패턴을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>The following example implements <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> to allow binary, octal, and hexadecimal formatting of integral values.</source>
          <target state="translated">다음 예제에서는 구현 <ph id="ph1">&lt;xref:System.ICustomFormatter&gt;</ph> 이진, 8 진수 및 16 진수 정수 계열 값의 서식 지정을 허용 하도록 합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Its <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> implementation determines whether the format parameter is one of the three supported format strings ("B" for binary, "O" for octal, and "H" for hexadecimal) and formats the <ph id="ph2">`arg`</ph> parameter appropriately.</source>
          <target state="translated">해당 <ph id="ph1">&lt;xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType&gt;</ph> 구현 형식 매개 변수가 세 가지 지원 되는 형식 문자열 중 하나 인지를 결정 ("O"에 대 한 이진 파일에 대 한 "B", 8 진수 및 16 진수에 대 한 "H") 하 고 서식을 지정는 <ph id="ph2">`arg`</ph> 매개 변수 적절 하 게 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>Otherwise, if <ph id="ph1">`arg`</ph> is not <ph id="ph2">`null`</ph>, it calls the <ph id="ph3">`arg`</ph> parameter's <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> implementation, if one exists, or its parameterless <ph id="ph5">`ToString`</ph> method, if one does not.</source>
          <target state="translated">그렇지 않은 경우, <ph id="ph1">`arg`</ph> 않습니다 <ph id="ph2">`null`</ph>, 호출 된 <ph id="ph3">`arg`</ph> 매개 변수의 <ph id="ph4">&lt;xref:System.IFormattable.ToString%2A?displayProperty=nameWithType&gt;</ph> 있을 경우 구현 또는 해당 매개 변수가 없는 <ph id="ph5">`ToString`</ph> 메서드, 하나는 그렇지 않습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source>If <ph id="ph1">`arg`</ph> is <ph id="ph2">`null`</ph>, the method returns <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`arg`</ph>가 <ph id="ph2">`null`</ph>이면 메서드에서 <ph id="ph3">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>을 반환합니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
          <source><ph id="ph1">`BinaryFormatter`</ph> can then be used to provide custom formatting by passing a <ph id="ph2">`BinaryFormatter`</ph> object as the <ph id="ph3">`provider`</ph> parameter of the <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> method, as the following example shows.</source>
          <target state="translated"><ph id="ph1">`BinaryFormatter`</ph> 전달 하 여 사용자 지정 서식을 제공을 사용할 수 있습니다는 <ph id="ph2">`BinaryFormatter`</ph> 개체로 <ph id="ph3">`provider`</ph> 의 매개 변수는 <ph id="ph4">&lt;xref:System.String.Format%2A&gt;</ph> 다음 예제와 같이 메서드.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>