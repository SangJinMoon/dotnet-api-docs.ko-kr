<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Buffer.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55e1d29e63ded4bec7a4b24dc14f7a73639dec8d5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e1d29e63ded4bec7a4b24dc14f7a73639dec8d5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Buffer">
          <source>Manipulates arrays of primitive types.</source>
          <target state="translated">기본 형식의 배열을 조작합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> only affects arrays of primitive types; this class does not apply to objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> 기본 형식의; 배열에만 적용 이 클래스는 개체에는 적용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source>Each primitive type is treated as a series of bytes without regard to any behavior or limitation associated with the primitive type.</source>
          <target state="translated">각 기본 형식의 일련의 동작이 나 기본 형식과 관련 된 제한에 관계 없이 바이트로 처리 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> provides methods to copy bytes from one array of primitive types to another array of primitive types, get a byte from an array, set a byte in an array, and obtain the length of an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> 바이트 배열에서 가져올, 바이트 배열에 설정 및 배열 길이 가져올 배열을 다른 기본 형식, 기본 형식의 배열 바이트를 복사 하는 메서드를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source>This class provides better performance for manipulating primitive types than similar methods in the <ph id="ph1">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">이 클래스는 기본 형식에서 비슷한 메서드보다 조작 하기 위한 더 나은 성능을 제공는 <ph id="ph1">&lt;xref:System.Array?displayProperty=nameWithType&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> is applicable to the following primitive types: <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.SByte&gt;</ph>, <ph id="ph5">&lt;xref:System.Byte&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph8">&lt;xref:System.Int32&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph10">&lt;xref:System.Int64&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt64&gt;</ph>, <ph id="ph12">&lt;xref:System.IntPtr&gt;</ph>, <ph id="ph13">&lt;xref:System.UIntPtr&gt;</ph>, <ph id="ph14">&lt;xref:System.Single&gt;</ph>, and <ph id="ph15">&lt;xref:System.Double&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Buffer&gt;</ph> 기본 형식에 적용 됩니다: <ph id="ph2">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.SByte&gt;</ph>, <ph id="ph5">&lt;xref:System.Byte&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph8">&lt;xref:System.Int32&gt;</ph>, <ph id="ph9">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph10">&lt;xref:System.Int64&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt64&gt;</ph>, <ph id="ph12">&lt;xref:System.IntPtr&gt;</ph>, <ph id="ph13">&lt;xref:System.UIntPtr&gt;</ph>, <ph id="ph14">&lt;xref:System.Single&gt;</ph>, 및 <ph id="ph15">&lt;xref:System.Double&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Buffer">
          <source>The following code example illustrates the use of several <ph id="ph1">`Buffer`</ph> class methods.</source>
          <target state="translated">다음 코드 예제에서는 여러 <ph id="ph1">`Buffer`</ph> 클래스 메서드.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The source buffer.</source>
          <target state="translated">소스 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The zero-based byte offset into <bpt id="p1">&lt;c&gt;</bpt>src<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>src<ept id="p1">&lt;/c&gt;</ept>에 대한 바이트 오프셋입니다(0부터 시작).</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The destination buffer.</source>
          <target state="translated">대상 버퍼입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The zero-based byte offset into <bpt id="p1">&lt;c&gt;</bpt>dst<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>dst<ept id="p1">&lt;/c&gt;</ept>에 대한 바이트 오프셋입니다(0부터 시작).</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The number of bytes to copy.</source>
          <target state="translated">복사할 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.</source>
          <target state="translated">특정 오프셋에서 시작하는 소스 배열에서 특정 오프셋에서 시작하는 대상 배열로 지정된 바이트 수를 복사합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>This method copies <ph id="ph1">`count`</ph> bytes from <ph id="ph2">`src`</ph>, beginning at <ph id="ph3">`srcOffset`</ph>, to <ph id="ph4">`dst`</ph>, beginning at <ph id="ph5">`dstOffset`</ph>.</source>
          <target state="translated">이 메서드는 복사 <ph id="ph1">`count`</ph> 바이트 <ph id="ph2">`src`</ph>인스턴스에서 시작 <ph id="ph3">`srcOffset`</ph>을 <ph id="ph4">`dst`</ph>인스턴스에서 시작 <ph id="ph5">`dstOffset`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Both <ph id="ph1">`srcOffset`</ph> and <ph id="ph2">`dstOffset`</ph> are zero-based; that is, the first byte in each buffer is at position 0, not position 1.</source>
          <target state="translated">둘 다 <ph id="ph1">`srcOffset`</ph> 및 <ph id="ph2">`dstOffset`</ph> 는 0부터 시작 즉, 각 버퍼의 첫 번째 바이트는 위치 0, 1 위치를 지정 하지 않으면 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method accesses the bytes in the <ph id="ph2">`src`</ph> parameter array using offsets into memory, not programming constructs such as indexes or upper and lower array bounds.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> 의 바이트를 액세스 하는 메서드는 <ph id="ph2">`src`</ph> 오프셋을 사용 하 여 메모리에, 인덱스 또는 상한 및 하 한 배열 범위와 같은 구문을 프로그래밍 하지 않고 매개 변수 배열입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>For example, if in the programming language of your application you declare an <ph id="ph1">&lt;xref:System.Int32&gt;</ph> array with a zero-based lower bound of -50, and then pass the array and an offset of 5 to the <ph id="ph2">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method, the first array element the method will access is the second element of the array, which is at index -49.</source>
          <target state="translated">예를 들어, 응용 프로그램의 프로그래밍 언어의 선언 하는 경우는 <ph id="ph1">&lt;xref:System.Int32&gt;</ph> -50, 0부터 시작 하 한으로 배열 하 고 그런 다음 배열 및 오프셋에 5는 <ph id="ph2">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> 메서드, 메서드가 액세스 하는 첫 번째 배열 요소는 두 번째 인덱스-49 배열의 요소입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Furthermore, which byte of array element -49 is accessed first depends on the endianness of the computer that is executing your application.</source>
          <target state="translated">또한 배열 요소-49 바이트는에 액세스 하는 처음에 따라 달라 집니다 응용 프로그램을 실행 하는 컴퓨터의 엔디안 (endianness)는입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>As its name suggests, the <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method copies a block of bytes as a whole, rather than copying one byte at a time.</source>
          <target state="translated">해당 이름에서 알 수 있듯이 <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> 메서드는 한 번에 1 바이트를 복사 하지 않고 전체에 바이트 블록을 복사 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Therefore, if <ph id="ph1">`src`</ph> and <ph id="ph2">`dst`</ph> reference the same array, and the range from <ph id="ph3">`srcOffset`</ph><ph id="ph4"> + </ph><ph id="ph5">`count`</ph> -1 overlaps the range from <ph id="ph6">`dstOffset`</ph><ph id="ph7"> + </ph><ph id="ph8">`count`</ph> - 1, the values of the overlapping bytes are not overwritten before they are copied to the destination.</source>
          <target state="translated">따라서 경우 <ph id="ph1">`src`</ph> 및 <ph id="ph2">`dst`</ph> 같은 배열 및 범위에서 참조할 <ph id="ph3">`srcOffset`</ph> <ph id="ph4"> + </ph> <ph id="ph5">`count`</ph> -1에서 범위와 겹칩니다. <ph id="ph6">`dstOffset`</ph> <ph id="ph7"> + </ph> <ph id="ph8">`count`</ph> -1은 겹치는 값 대상에 복사 하기 전에 바이트를 덮어쓰지 않습니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>In the following example, the values of bytes 0-16 in an array named <ph id="ph1">`arr`</ph> are copied to bytes 12-28.</source>
          <target state="translated">다음 예에서는 이라는 배열의 0-16 바이트 값에에서 <ph id="ph1">`arr`</ph> 12-28 바이트로 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Despite the overlapping range, the values of the source bytes are successfully copied.</source>
          <target state="translated">겹치는 범위 불구 하 고 원본 바이트의 값 성공적으로 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>In the following example, the values of bytes 12-28 in an array named <ph id="ph1">`arr`</ph> are copied to bytes 0-16.</source>
          <target state="translated">다음 예에서는 이라는 배열의 12-28 바이트 값에에서 <ph id="ph1">`arr`</ph> 바이트 0-16으로 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>Again, despite the overlapping range, the values of the source bytes are successfully copied.</source>
          <target state="translated">다시, 겹치는 범위 불구 하 고 원본 바이트의 값 성공적으로 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The following example copies regions of arrays by using the <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method.</source>
          <target state="translated">다음 예제에서는 배열의 영역을 사용 하 여 복사 된 <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>For each <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> operation, it lists the source and destination arrays as both an array of values and as a sequence of bytes.</source>
          <target state="translated">각 <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> 작업을 나열 원본 및 대상 배열을 둘 다로 배열 값을 바이트의 시퀀스로 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The example illustrates the importance of considering a system's endianness when working with the <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> method: Because Windows systems are little-endian, the lower-order bytes of a primitive data type's value precede the higher-order bytes.</source>
          <target state="translated">이 예제에서는 작업할 때 시스템의 엔디안 (endianness)를 고려의 중요성을 보여 줍니다.는 <ph id="ph1">&lt;xref:System.Buffer.BlockCopy%2A&gt;</ph> 메서드: 하므로 Windows 시스템은 little endian, 상위 바이트 앞에 하위 바이트의 기본 데이터 형식의 값입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="src" /&gt;</ph> or <ph id="ph2">&lt;paramref name="dst" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="src" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="dst" /&gt;</ph>가 <ph id="ph3">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="src" /&gt;</ph> or <ph id="ph2">&lt;paramref name="dst" /&gt;</ph> is not an array of primitives.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="src" /&gt;</ph> 또는 <ph id="ph2">&lt;paramref name="dst" /&gt;</ph>가 기본 형식의 배열이 아닌 경우</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The number of bytes in <ph id="ph1">&lt;paramref name="src" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="srcOffset" /&gt;</ph> plus <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="src" /&gt;</ph>의 바이트 수가 <ph id="ph2">&lt;paramref name="srcOffset" /&gt;</ph>에 <ph id="ph3">&lt;paramref name="count" /&gt;</ph>를 더한 값보다 작은 경우</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">또는</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source>The number of bytes in <ph id="ph1">&lt;paramref name="dst" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="dstOffset" /&gt;</ph> plus <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="dst" /&gt;</ph>의 바이트 수가 <ph id="ph2">&lt;paramref name="dstOffset" /&gt;</ph>에 <ph id="ph3">&lt;paramref name="count" /&gt;</ph>를 더한 값보다 작은 경우</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="srcOffset" /&gt;</ph>, <ph id="ph2">&lt;paramref name="dstOffset" /&gt;</ph>, or <ph id="ph3">&lt;paramref name="count" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="srcOffset" /&gt;</ph>, <ph id="ph2">&lt;paramref name="dstOffset" /&gt;</ph> 또는 <ph id="ph3">&lt;paramref name="count" /&gt;</ph>가 0 미만입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source>An array.</source>
          <target state="translated">배열입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source>Returns the number of bytes in the specified array.</source>
          <target state="translated">지정된 배열의 바이트 수를 반환합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source>The number of bytes in the array.</source>
          <target state="translated">배열의 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.ByteLength(System.Array)">
          <source>The following code example illustrates the use of the <ph id="ph1">`ByteLength`</ph> method to return the number of bytes in an array.</source>
          <target state="translated">다음 코드 예제에서는 <ph id="ph1">`ByteLength`</ph> 배열의 바이트 수를 반환 하는 메서드.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is not a primitive.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 기본 형식이 아닌 경우</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Buffer.ByteLength(System.Array)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is larger than 2 gigabytes (GB).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 2GB보다 큰 경우</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>An array.</source>
          <target state="translated">배열입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>A location in the array.</source>
          <target state="translated">배열 내의 위치입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>Retrieves the byte at a specified location in a specified array.</source>
          <target state="translated">지정된 배열의 지정된 위치에 있는 바이트를 검색합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>Returns the <ph id="ph1">&lt;paramref name="index" /&gt;</ph> byte in the array.</source>
          <target state="translated">배열의 <ph id="ph1">&lt;paramref name="index" /&gt;</ph> 바이트를 반환합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>The <ph id="ph1">`GetByte`</ph> method gets a particular byte out of the array.</source>
          <target state="translated"><ph id="ph1">`GetByte`</ph> 메서드는 배열에서 특정 바이트를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>The array must be an array of primitives.</source>
          <target state="translated">배열의 기본 배열 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source>The following code example displays the byte values at specified locations within arrays using the <ph id="ph1">`GetByte`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 바이트 값을 사용 하 여 배열에서 지정 된 위치의 표시는 <ph id="ph1">`GetByte`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is not a primitive.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 기본 형식이 아닌 경우</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is negative or greater than the length of <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 음수이거나 <ph id="ph2">&lt;paramref name="array" /&gt;</ph>의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Buffer.GetByte(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is larger than 2 gigabytes (GB).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 2GB보다 큰 경우</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.Buffer">
          <source>Copies a block of memory.</source>
          <target state="translated">메모리 블록을 복사합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>The address of the bytes to copy.</source>
          <target state="translated">복사할 바이트 주소입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>The target address.</source>
          <target state="translated">대상 주소입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>The number of bytes available in the destination memory block.</source>
          <target state="translated">대상 메모리 블록에서 사용할 수 있는 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>The number of bytes to copy.</source>
          <target state="translated">복사할 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>Copies a number of bytes specified as a long integer value from one address in memory to another.</source>
          <target state="translated">메모리에 있는 하나의 주소에서 다른 주소에 정수(Long) 값으로 지정된 바이트 수를 복사합니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>This API is not CLS-compliant.</source>
          <target state="translated">이 API는 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>This method copies <ph id="ph1">`sourceBytesToCopy`</ph> bytes from the address specified by <ph id="ph2">`source`</ph> to the address specified by <ph id="ph3">`destination`</ph>.</source>
          <target state="translated">이 메서드는 복사 <ph id="ph1">`sourceBytesToCopy`</ph> 으로 지정 된 주소에서 바이트 <ph id="ph2">`source`</ph> 하 여 지정 된 주소로 <ph id="ph3">`destination`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source>If the buffers overlap and the difference between <ph id="ph1">`destination`</ph> minus <ph id="ph2">`source`</ph> is less than <ph id="ph3">`sourceBytesToCopy`</ph>, the source block is copied to the destination block in reverse order.</source>
          <target state="translated">버퍼 겹치는 경우 및 간의 차이 <ph id="ph1">`destination`</ph> 뺀 <ph id="ph2">`source`</ph> 는 보다 작은 <ph id="ph3">`sourceBytesToCopy`</ph>, 반대 순서로 소스 블록에는 대상 블록에 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
          <source><ph id="ph1">&lt;paramref name="sourceBytesToCopy" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="destinationSizeInBytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceBytesToCopy" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="destinationSizeInBytes" /&gt;</ph>보다 큰 경우</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>The address of the bytes to copy.</source>
          <target state="translated">복사할 바이트 주소입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>The target address.</source>
          <target state="translated">대상 주소입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>The number of bytes available in the destination memory block.</source>
          <target state="translated">대상 메모리 블록에서 사용할 수 있는 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>The number of bytes to copy.</source>
          <target state="translated">복사할 바이트 수입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>Copies a number of bytes specified as an unsigned long integer value from one address in memory to another.</source>
          <target state="translated">메모리에 있는 하나의 주소에서 다른 주소에 부호 없는 정수(Long) 값으로 지정된 바이트 수를 복사합니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>This API is not CLS-compliant.</source>
          <target state="translated">이 API는 CLS 규격이 아닙니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>This method copies <ph id="ph1">`sourceBytesToCopy`</ph> bytes from the address specified by <ph id="ph2">`source`</ph> to the address specified by <ph id="ph3">`destination`</ph>.</source>
          <target state="translated">이 메서드는 복사 <ph id="ph1">`sourceBytesToCopy`</ph> 으로 지정 된 주소에서 바이트 <ph id="ph2">`source`</ph> 하 여 지정 된 주소로 <ph id="ph3">`destination`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source>If the buffers overlap and the difference between <ph id="ph1">`destination`</ph> minus <ph id="ph2">`source`</ph> is less than <ph id="ph3">`sourceBytesToCopy`</ph>, the source block is copied to the destination block in reverse order.</source>
          <target state="translated">버퍼 겹치는 경우 및 간의 차이 <ph id="ph1">`destination`</ph> 뺀 <ph id="ph2">`source`</ph> 는 보다 작은 <ph id="ph3">`sourceBytesToCopy`</ph>, 반대 순서로 소스 블록에는 대상 블록에 복사 됩니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
          <source><ph id="ph1">&lt;paramref name="sourceBytesToCopy" /&gt;</ph> is greater than <ph id="ph2">&lt;paramref name="destinationSizeInBytes" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="sourceBytesToCopy" /&gt;</ph>가 <ph id="ph2">&lt;paramref name="destinationSizeInBytes" /&gt;</ph>보다 큰 경우</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>An array.</source>
          <target state="translated">배열입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>A location in the array.</source>
          <target state="translated">배열 내의 위치입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>A value to assign.</source>
          <target state="translated">할당할 값입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>Assigns a specified value to a byte at a particular location in a specified array.</source>
          <target state="translated">지정된 배열의 특정 위치에 있는 바이트에 지정된 값을 할당합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">`array`</ph> must be an array of primitives.</source>
          <target state="translated"><ph id="ph1">`array`</ph> 기본 형식의 배열 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source>The following code example assigns values to bytes at particular locations within arrays using the <ph id="ph1">`SetByte`</ph> method.</source>
          <target state="translated">다음 코드 예제에서는 값을 사용 하 여 배열의 특정 위치에 있는 바이트에 할당 된 <ph id="ph1">`SetByte`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is not a primitive.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 기본 형식이 아닌 경우</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is negative or greater than the length of <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 음수이거나 <ph id="ph2">&lt;paramref name="array" /&gt;</ph>의 길이보다 큰 경우</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is larger than 2 gigabytes (GB).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph>가 2GB보다 큰 경우</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>