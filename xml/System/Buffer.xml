<Type Name="Buffer" FullName="System.Buffer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="69044c3aac6d95a5054b4b883f46c525283823a6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37481243" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Buffer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Buffer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Buffer" />
  <TypeSignature Language="VB.NET" Value="Public Class Buffer" />
  <TypeSignature Language="C++ CLI" Value="public ref class Buffer abstract sealed" />
  <TypeSignature Language="F#" Value="type Buffer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manipulates arrays of primitive types.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Buffer> 기본 형식의 배열에만 적용 이 클래스는 개체에는 적용 되지 않습니다. 각 기본 형식의 일련의 모든 동작 또는 기본 형식과 연결 된 제한에 관계 없이 바이트로 처리 됩니다.  
  
 <xref:System.Buffer> 배열에서 바이트를 가져오기, 바이트 배열에 있는 설정 및 배열의 길이 가져오려면 배열을 다른 기본 형식과 기본 형식의 배열 바이트를 복사 하는 방법 제공 합니다. 이 클래스는 기본 형식에서 이와 유사한 메서드를 조작 하기 위한 더 나은 성능을 제공 합니다 <xref:System.Array?displayProperty=nameWithType> 클래스입니다.  
  
 <xref:System.Buffer> 기본 형식에 적용 됩니다: <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>를 <xref:System.UInt16>, <xref:System.Int32>를 <xref:System.UInt32>, <xref:System.Int64>를 <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>하십시오 <xref:System.Single>, 및 <xref:System.Double>합니다.  
  
   
  
## Examples  
 다음 코드 예제에는 일부의 사용 방법을 보여 줍니다. `Buffer` 메서드 클래스입니다.  
  
 [!code-cpp[System.Buffer.BlockCopy#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/buffer.cpp#1)]
 [!code-csharp[System.Buffer.BlockCopy#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/buffer.cs#1)]
 [!code-vb[System.Buffer.BlockCopy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/buffer.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BlockCopy">
      <MemberSignature Language="C#" Value="public static void BlockCopy (Array src, int srcOffset, Array dst, int dstOffset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BlockCopy(class System.Array src, int32 srcOffset, class System.Array dst, int32 dstOffset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BlockCopy (src As Array, srcOffset As Integer, dst As Array, dstOffset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BlockCopy(Array ^ src, int srcOffset, Array ^ dst, int dstOffset, int count);" />
      <MemberSignature Language="F#" Value="static member BlockCopy : Array * int * Array * int * int -&gt; unit" Usage="System.Buffer.BlockCopy (src, srcOffset, dst, dstOffset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.Array" />
        <Parameter Name="srcOffset" Type="System.Int32" />
        <Parameter Name="dst" Type="System.Array" />
        <Parameter Name="dstOffset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="src">The source buffer.</param>
        <param name="srcOffset">The zero-based byte offset into <c>src</c>.</param>
        <param name="dst">The destination buffer.</param>
        <param name="dstOffset">The zero-based byte offset into <c>dst</c>.</param>
        <param name="count">The number of bytes to copy.</param>
        <summary>Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 복사 `count` 바이트 `src`부터 `srcOffset`를 `dst`부터 `dstOffset`합니다. 둘 다 `srcOffset` 및 `dstOffset` 0부터 시작 하는 각 버퍼의 첫 번째 바이트는 0 위치 즉,이 고, 1을 배치 하지 않으면.  
  
 합니다 <xref:System.Buffer.BlockCopy%2A> 바이트를 액세스 하는 메서드는 `src` 메모리로 오프셋을 사용 하 여, 인덱스 또는 상한 및 하 한 배열 범위와 같은 구문을 프로그래밍 하지 않고 매개 변수 배열입니다. 예를 들어, 응용 프로그램의 프로그래밍 언어에서 선언 하는 경우는 <xref:System.Int32> 인 0부터 시작-50, 배열 및 배열 및 오프셋을 5로 전달 된 <xref:System.Buffer.BlockCopy%2A> 메서드, 메서드에 액세스 하는 첫 번째 배열 요소는 두 번째 -49 인덱스에는 배열의 요소입니다. 또한는 바이트 배열 요소의-49 액세스 하는 먼저 종속 응용 프로그램을 실행 하는 컴퓨터의 엔디언.  
  
 해당 이름에서 알 수 있듯이는 <xref:System.Buffer.BlockCopy%2A> 메서드는 바이트 블록을 한 번에 1 바이트를 복사 하는 것이 아니라 전체로 복사 합니다. 따라서 경우 `src` 하 고 `dst` 같은 배열 및 범위를 참조할 `srcOffset`  +  `count` -1의 범위와 겹칩니다 `dstOffset`  +  `count` -1 겹침은 적어 지의 값 대상에 복사 되기 전에 바이트를 덮어쓰지 않습니다. 다음 예제에서는 라는 배열에서 0-16 바이트 값의에서 `arr` 바이트 12 월 28 일에 복사 됩니다. 겹치는 범위에도 불구 하 고 원본 바이트 값이 성공적으로 복사 됩니다.  
  
 [!code-cpp[System.Buffer.BlockCopy#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#3)]
 [!code-csharp[System.Buffer.BlockCopy#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#3)]
 [!code-vb[System.Buffer.BlockCopy#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#3)]  
  
 다음 예제에서는 라는 배열에 월 28 일 12 바이트 값의에서 `arr` 바이트 0-16으로 복사 됩니다. 마찬가지로 겹치는 범위에도 불구 하 고 원본 바이트 값이 성공적으로 복사 됩니다.  
  
 [!code-cpp[System.Buffer.BlockCopy#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/overlap1.cpp#4)]
 [!code-csharp[System.Buffer.BlockCopy#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/overlap1.cs#4)]
 [!code-vb[System.Buffer.BlockCopy#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/overlap1.vb#4)]  
  
   
  
## Examples  
 다음 예제에서는 배열 영역을 사용 하 여 복사를 <xref:System.Buffer.BlockCopy%2A> 메서드. 각각에 대해 <xref:System.Buffer.BlockCopy%2A> 작업을 여기에 나열 된 원본 및 대상 둘 다로 배열 바이트 시퀀스와 값의 배열입니다. 이 예제에서는 시스템의 엔디언을 고려 하 여 작업할 때의 중요성을 보여 줍니다.는 <xref:System.Buffer.BlockCopy%2A> 메서드: 때문에 Windows 시스템은 little endian, 기본 데이터 형식의 값의 낮은 순서 바이트 고차 바이트 앞에 야 합니다.  
  
 [!code-cpp[System.Buffer.BlockCopy#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CPP/bcopy.cpp#2)]
 [!code-csharp[System.Buffer.BlockCopy#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.BlockCopy/CS/bcopy.cs#2)]
 [!code-vb[System.Buffer.BlockCopy#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.BlockCopy/VB/bcopy.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="src" /> or <paramref name="dst" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="src" /> or <paramref name="dst" /> is not an array of primitives.  -or-  The number of bytes in <paramref name="src" /> is less than <paramref name="srcOffset" /> plus <paramref name="count" />.  -or-  The number of bytes in <paramref name="dst" /> is less than <paramref name="dstOffset" /> plus <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="srcOffset" />, <paramref name="dstOffset" />, or <paramref name="count" /> is less than 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="ByteLength">
      <MemberSignature Language="C#" Value="public static int ByteLength (Array array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ByteLength(class System.Array array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffer.ByteLength(System.Array)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ByteLength(Array ^ array);" />
      <MemberSignature Language="F#" Value="static member ByteLength : Array -&gt; int" Usage="System.Buffer.ByteLength array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
      </Parameters>
      <Docs>
        <param name="array">An array.</param>
        <summary>Returns the number of bytes in the specified array.</summary>
        <returns>The number of bytes in the array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 코드 예제에서는 `ByteLength` 배열의 바이트 수를 반환 하는 방법입니다.  
  
 [!code-cpp[System.Buffer.Bytes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.Bytes/CPP/bytelength.cpp#1)]
 [!code-csharp[System.Buffer.Bytes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.Bytes/CS/bytelength.cs#1)]
 [!code-vb[System.Buffer.Bytes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.Bytes/VB/bytelength.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> is not a primitive.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="array" /> is larger than 2 gigabytes (GB).</exception>
      </Docs>
    </Member>
    <Member MemberName="GetByte">
      <MemberSignature Language="C#" Value="public static byte GetByte (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 GetByte(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffer.GetByte(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte GetByte(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="static member GetByte : Array * int -&gt; byte" Usage="System.Buffer.GetByte (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">An array.</param>
        <param name="index">A location in the array.</param>
        <summary>Retrieves the byte at a specified location in a specified array.</summary>
        <returns>Returns the <paramref name="index" /> byte in the array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `GetByte` 메서드는 배열에서 특정 바이트를 가져옵니다. 배열에는 기본 형식의 배열 이어야 합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하 여 배열의 지정 된 위치에 바이트 값을 표시 합니다 `GetByte` 메서드.  
  
 [!code-cpp[System.Buffer.Bytes#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.Bytes/CPP/getbyte.cpp#3)]
 [!code-csharp[System.Buffer.Bytes#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.Bytes/CS/getbyte.cs#3)]
 [!code-vb[System.Buffer.Bytes#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.Bytes/VB/getbyte.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> is not a primitive.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is negative or greater than the length of <paramref name="array" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="array" /> is larger than 2 gigabytes (GB).</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemoryCopy">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Copies a block of memory.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemoryCopy">
      <MemberSignature Language="C#" Value="public static void MemoryCopy (void* source, void* destination, long destinationSizeInBytes, long sourceBytesToCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryCopy(void* source, void* destination, int64 destinationSizeInBytes, int64 sourceBytesToCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryCopy(void* source, void* destination, long destinationSizeInBytes, long sourceBytesToCopy);" />
      <MemberSignature Language="F#" Value="static member MemoryCopy : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * int64 * int64 -&gt; unit" Usage="System.Buffer.MemoryCopy (source, destination, destinationSizeInBytes, sourceBytesToCopy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="destinationSizeInBytes" Type="System.Int64" />
        <Parameter Name="sourceBytesToCopy" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="source">The address of the bytes to copy.</param>
        <param name="destination">The target address.</param>
        <param name="destinationSizeInBytes">The number of bytes available in the destination memory block.</param>
        <param name="sourceBytesToCopy">The number of bytes to copy.</param>
        <summary>Copies a number of bytes specified as a long integer value from one address in memory to another.  This API is not CLS-compliant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 복사 `sourceBytesToCopy` 으로 지정 된 주소에서 바이트 `source` 하 여 지정 된 주소로 `destination`합니다. 버퍼 겹치는 경우의 차이점 `destination` 빼기 `source` 는 보다 작은 `sourceBytesToCopy`, 소스 블록은 반대 순서로 대상 블록에 복사 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="sourceBytesToCopy" /> is greater than <paramref name="destinationSizeInBytes" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="MemoryCopy">
      <MemberSignature Language="C#" Value="public static void MemoryCopy (void* source, void* destination, ulong destinationSizeInBytes, ulong sourceBytesToCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MemoryCopy(void* source, void* destination, unsigned int64 destinationSizeInBytes, unsigned int64 sourceBytesToCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MemoryCopy(void* source, void* destination, System::UInt64 destinationSizeInBytes, System::UInt64 sourceBytesToCopy);" />
      <MemberSignature Language="F#" Value="static member MemoryCopy : nativeptr&lt;unit&gt; * nativeptr&lt;unit&gt; * uint64 * uint64 -&gt; unit" Usage="System.Buffer.MemoryCopy (source, destination, destinationSizeInBytes, sourceBytesToCopy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="destinationSizeInBytes" Type="System.UInt64" />
        <Parameter Name="sourceBytesToCopy" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="source">The address of the bytes to copy.</param>
        <param name="destination">The target address.</param>
        <param name="destinationSizeInBytes">The number of bytes available in the destination memory block.</param>
        <param name="sourceBytesToCopy">The number of bytes to copy.</param>
        <summary>Copies a number of bytes specified as an unsigned long integer value from one address in memory to another.  This API is not CLS-compliant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 복사 `sourceBytesToCopy` 으로 지정 된 주소에서 바이트 `source` 하 여 지정 된 주소로 `destination`합니다. 버퍼 겹치는 경우의 차이점 `destination` 빼기 `source` 는 보다 작은 `sourceBytesToCopy`, 소스 블록은 반대 순서로 대상 블록에 복사 됩니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="sourceBytesToCopy" /> is greater than <paramref name="destinationSizeInBytes" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetByte">
      <MemberSignature Language="C#" Value="public static void SetByte (Array array, int index, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetByte(class System.Array array, int32 index, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetByte(Array ^ array, int index, System::Byte value);" />
      <MemberSignature Language="F#" Value="static member SetByte : Array * int * byte -&gt; unit" Usage="System.Buffer.SetByte (array, index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="array">An array.</param>
        <param name="index">A location in the array.</param>
        <param name="value">A value to assign.</param>
        <summary>Assigns a specified value to a byte at a particular location in a specified array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `array` 기본 형식의 배열 이어야 합니다.  
  
   
  
## Examples  
 다음 코드 예제를 사용 하 여 배열의 특정 위치에 있는 바이트 값을 할당 합니다 `SetByte` 메서드.  
  
 [!code-cpp[System.Buffer.Bytes#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Buffer.Bytes/CPP/setbyte.cpp#2)]
 [!code-csharp[System.Buffer.Bytes#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Buffer.Bytes/CS/setbyte.cs#2)]
 [!code-vb[System.Buffer.Bytes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Buffer.Bytes/VB/setbyte.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> is not a primitive.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is negative or greater than the length of <paramref name="array" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="array" /> is larger than 2 gigabytes (GB).</exception>
      </Docs>
    </Member>
  </Members>
</Type>