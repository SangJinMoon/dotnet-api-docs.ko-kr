<Type Name="ValueType" FullName="System.ValueType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="33378379d2e91ec17aa2980f5a53aa8e59d1b2bd" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36427337" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>값 형식에 대한 기본 클래스를 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> 가상 메서드를 재정의 <xref:System.Object> 값 형식에 대 한 보다 적절 한 구현을 사용 합니다. 참고 항목 <xref:System.Enum>에서 상속한 <xref:System.ValueType>합니다.  
  
 데이터 형식 값 형식과 참조 형식으로 나뉩니다. 값 형식 스택 할당 되거나 인라인으로 구조에 할당 합니다. 참조 유형은 힙 할당입니다. 참조 및 값을 모두 형식은 기본적인 기본 클래스에서 파생 됩니다 <xref:System.Object>합니다. 에 값 형식을 개체 처럼 동작 해야 하는 경우에 래퍼 지도록 참조 방식 개체를 힙에 할당 되 고 값 형식의 값 복사할 처럼 보이지만 값 형식입니다. 래퍼에 시스템 값 형식이 포함 되어 있는 것을 알 수 있도록 표시 됩니다. 이 프로세스를 boxing 이라고 하 고 역 프로세스를 unboxing 라고 합니다. Boxing 및 unboxing과 개체로 처리 되도록 하려면 모든 형식을 허용 합니다.  
  
 하지만 <xref:System.ValueType> 암시적 기본 클래스에서 상속 되는 클래스를 만들 수 없습니다 값 형식에 대 한 <xref:System.ValueType> 직접 합니다. 대신 개별 컴파일러 언어 키워드를 제공 하거나 생성 (예: `struct` C# 및 `Structure`...`End Structure` Visual Basic) 값 형식 만들기를 지원 합니다.  
  
 .NET Framework의 값 형식에 대 한 기본 클래스 역할을 수행 하는 것 외의 <xref:System.ValueType> 구조는 일반적으로 코드에서 직접 사용 되지 않습니다. 그러나 사용할 수 있습니다 메서드 호출에 매개 변수로 모든 개체 대신 값 형식에 가능한 인수를 제한 하거나 서로 다른 값 형식의 수를 처리 하는 메서드를 허용 하도록 합니다. 다음 예제에서는 어떻게 <xref:System.ValueType> 참조 형식을 메서드에 전달 되지 않도록 합니다. 클래스를 정의 `Utility` 4 개의 메서드가 들어 있는: `IsNumeric`, 해당 인수가 숫자 인지 여부를 나타냅니다 `IsInteger`, 해당 인수는 정수 이며 있는지 여부를 나타냅니다 `IsFloat`, 해당 인수가 부동 소수점 숫자 인지를 나타내는 및 `Compare`, 두 개의 숫자 값 간의 관계를 나타내는입니다. 형식의 메서드 매개 변수는 각각의 경우에서 <xref:System.ValueType>, 되 고 참조 형식을 메서드에 전달 되 고 없게 됩니다.  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 다음 예제에서는의 메서드를 호출 하는 `Utility` 클래스입니다.  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ValueType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
        <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타냅니다.</summary>
        <returns>
          <see langword="true" />와 이 인스턴스가 동일한 형식이고 동일한 값을 나타내면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> 메서드 재정의 <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> .NET Framework의 모든 값 형식에 대 한 값이 같으면의 기본 구현을 제공 합니다.  
  
 현재 인스턴스의 필드 하는 경우 및 `obj` 참조 형식는 <xref:System.ValueType.Equals%2A> 메서드 메모리에 두 개체의 바이트 단위 비교를 수행 합니다. 그렇지 않은 경우 사용 하 여 리플렉션을의 해당 필드를 비교할 `obj` 와이 인스턴스.  
  
> [!TIP]
>  값 형식이 참조 형식인 필드가 있는 경우에 특히를 재정의 해야는 <xref:System.ValueType.Equals%28System.Object%29> 메서드. 성능이 향상 되 고 더욱 긴밀 하 게 유형에 대 한 같음 의미를 나타낼 수 있도록이 있습니다.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>에 대 한 정보는 [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 호출 하는 경우는 <xref:System.ValueType.Equals%2A> 에서 메서드는 [!INCLUDE[wrt](~/includes/wrt-md.md)] 재정의 하지 않는 값 형식에 대 한 기본 동작을 제공 구조, <xref:System.ValueType.Equals%2A>합니다. 이것은.NET Framework에 대 한 제공 하는 지원의 일부는 [!INCLUDE[wrt](~/includes/wrt-md.md)] (참조 [.NET Framework 지원에 대 한 Windows 스토어 앱 및 Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] 구조 재정의할 수 없습니다. <xref:System.ValueType.Equals%2A>메서드 없습니다 했기 때문에 C# 또는 Visual Basic로 작성 하는 경우에 합니다. (또한 구조체에 [!INCLUDE[wrt](~/includes/wrt-md.md)] 상속 받지 않습니다 자체 <xref:System.ValueType>.) 그러나 하기로 표시 <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, 및 <xref:System.ValueType.GetHashCode%2A> 메서드 C# 또는 Visual Basic 코드에서 사용 하 고.NET Framework에서는 이러한 방법에 대 한 기본 동작을 제공 하는 경우.  
  
   
  
## Examples  
 다음 예제에서는 방법을 <xref:System.ValueType.Equals%2A> 파생된 값 형식에서 메서드를 재정의할 수 있습니다.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
        <returns>이 인스턴스의 해시 코드인 32비트 부호 있는 정수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.GetHashCode%2A> 메서드에서 파생 된 형식에 적용 됩니다 <xref:System.ValueType>합니다. 파생 된 형식의 하나 이상의 필드는 반환 값 계산에 사용 됩니다. 파생된 된 형식의 호출 하는 경우 `GetHashCode` 메서드 반환 값은 해시 테이블에서 키로 사용 하기에 적합 한 것으로 가능성이 있습니다. 또한 이러한 필드의 하나 이상의 값이 변경 되 면 반환 값은 해시 테이블에서 키로 사용 하기에 적합 하지 않습니다. 될 수 있습니다. 두 경우 모두의 사용자 지정 구현을 작성 것을 고려할는 <xref:System.ValueType.GetHashCode%2A> 유형에 대 한 해시 코드의 개념을 더욱 긴밀 하 게 나타내는 메서드입니다.  
  
 자세한 내용은 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 및 <xref:System.Collections.Hashtable?displayProperty=nameWithType>을 참조하십시오.  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>에 대 한 정보는 [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 호출 하는 경우는 <xref:System.ValueType.GetHashCode%2A> 에서 메서드는 [!INCLUDE[wrt](~/includes/wrt-md.md)] 재정의 하지 않는 값 형식에 대 한 기본 동작을 제공 구조, <xref:System.ValueType.GetHashCode%2A>합니다. 이것은.NET Framework에 대 한 제공 하는 지원의 일부는 [!INCLUDE[wrt](~/includes/wrt-md.md)] (참조 [.NET Framework 지원에 대 한 Windows 스토어 앱 및 Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] 구조 재정의할 수 없습니다. <xref:System.ValueType.GetHashCode%2A>메서드 없습니다 했기 때문에 C# 또는 Visual Basic로 작성 하는 경우에 합니다. (또한 구조체에 [!INCLUDE[wrt](~/includes/wrt-md.md)] 상속 받지 않습니다 자체 <xref:System.ValueType>.) 그러나 하기로 표시 <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, 및 <xref:System.ValueType.GetHashCode%2A> 메서드 C# 또는 Visual Basic 코드에서 사용 하 고.NET Framework에서는 이러한 방법에 대 한 기본 동작을 제공 하는 경우.  
  
   
  
## Examples  
 다음 예제에서는 방법을 <xref:System.ValueType.GetHashCode%2A> 파생된 값 형식에서 메서드를 재정의할 수 있습니다.  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 인스턴스의 정규화된 형식 이름을 반환합니다.</summary>
        <returns>정규화된 형식 이름입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> 메서드 재정의 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 메서드의 기본 구현을 제공 하 고는 `ToString` 값 형식에 대 한 메서드. (값 형식을 정의 하는 형식으로는 `struct` 및 C# 키워드는 `Structure`... `End Structure` Visual Basic에서 구성 합니다.) 그러나 기능적으로 구현은과 같은 즉 <xref:System.Object.ToString%2A?displayProperty=nameWithType>: 메서드는 정규화 된 형식 이름을 반환 합니다.  
  
 값 형식에 정의 된는 `struct` C# 키워드 및 `Structure`... `End Structure` Visual Basic의 구문을 일반적으로 재정의 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> 메서드를 값 형식 보다 의미 있는 문자열 표현을 제공 합니다. 다음 예제에서 차이점을 보여 줍니다. 두 값 형식을 정의 `EmployeeA` 및 `EmployeeB`, 각각의 인스턴스를 만들고 호출 해당 `ToString` 메서드. 때문에 `EmployeeA` 구조를 재정의 하지 않습니다는 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> 메서드를 정규화 된 유형 이름만 표시 됩니다. `EmployeeB.ToString` 메서드, 반면에 개체에 대 한 의미 있는 정보를 제공 합니다.  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 열거형 형식 옵션은 또한 값 형식에에서 파생 되는지 확인은 <xref:System.Enum> 재정의 하 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>합니다.  
  
## <a name="notes-for-the-windows-runtime"></a>Windows 런타임에 대 한 참고 사항  
 호출 하는 경우는 <xref:System.ValueType.ToString%2A> 에서 메서드는 [!INCLUDE[wrt](~/includes/wrt-md.md)] 재정의 하지 않는 값 형식에 대 한 기본 동작을 제공 구조, <xref:System.ValueType.ToString%2A>합니다. 이것은.NET Framework에 대 한 제공 하는 지원의 일부는 [!INCLUDE[wrt](~/includes/wrt-md.md)] (참조 [.NET Framework 지원에 대 한 Windows 스토어 앱 및 Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)). [!INCLUDE[wrt](~/includes/wrt-md.md)] 구조 재정의할 수 없습니다. <xref:System.ValueType.ToString%2A>메서드 없습니다 했기 때문에 C# 또는 Visual Basic로 작성 하는 경우에 합니다. (또한 구조체에 [!INCLUDE[wrt](~/includes/wrt-md.md)] 상속 받지 않습니다 자체 <xref:System.ValueType>.) 그러나 하기로 표시 <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, 및 <xref:System.ValueType.GetHashCode%2A> 메서드 C# 또는 Visual Basic 코드에서 사용 하 고.NET Framework에서는 이러한 방법에 대 한 기본 동작을 제공 하는 경우.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>