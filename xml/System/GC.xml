<Type Name="GC" FullName="System.GC">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="11996d97bef6121bce982a8368bef5e8197c8a44" />
    <Meta Name="ms.sourcegitcommit" Value="1465f1a9bce3970cd9e95769eaa641b92a0a22d5" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/18/2018" />
    <Meta Name="ms.locfileid" Value="31469401" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class GC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit GC extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.GC" />
  <TypeSignature Language="VB.NET" Value="Public Class GC" />
  <TypeSignature Language="C++ CLI" Value="public ref class GC abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>사용하지 않는 메모리를 자동적으로 회수하는 서비스인 시스템 가비지 수집기를 제어합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가비지 수집기가 할당 하 고 관리 되는 메모리 해제를 제어 하는 공용 언어 런타임 구성 요소입니다. 이 클래스의 메서드는 개체와 개체에 의해 할당 된 리소스를 해제 하는 경우 가비지 컬렉션이 수행 될 때 영향을 줍니다. 이 클래스의 속성 시스템 연령 범주 또는 개체에 할당 된 메모리의 생성에 사용할 수 있는 메모리의 총 금액에 대 한 정보를 제공 합니다.  
  
 가비지 수집기를 추적 하 고 관리 되는 메모리에 할당 된 개체를 회수 합니다. 정기적으로 가비지 수집기는 참조가 유효 하지 않은 개체에 할당 된 메모리를 회수할 가비지 수집을 수행 합니다. 가비지 수집 사용 가능한 메모리를 사용 하 여 메모리에 대 한 요청을 충족할 수 없는 때 자동으로 발생 합니다. 또는 응용 프로그램 사용 하 여 가비지 컬렉션 강제로 수는 <xref:System.GC.Collect%2A> 메서드.  
  
 가비지 수집은 다음 단계로 구성 됩니다.  
  
1.  가비지 수집기는 관리 코드에서 참조 되는 관리 되는 개체를 검색 합니다.  
  
2.  가비지 수집기는 참조 되지 않는 개체를 종료 하려고 합니다.  
  
3.  가비지 수집기가 참조 되지 않는 개체 및 해당 메모리를 회수 합니다.  
  
 이 항목은 다음 섹션으로 구성되어 있습니다.  
  
 [가비지 수집기와 관리 되지 않는 리소스](#unmanaged)   
 [개체 에이징 및 세대](#generations)   
 [가비지 수집을 허용 하지 않습니다.](#NoGCRegion)  
  
<a name="unmanaged"></a>   
## <a name="the-garbage-collector-and-unmanaged-resources"></a>가비지 수집기와 관리 되지 않는 리소스  
 컬렉션 중 하나 이상의 참조 된 개체에 관리 코드에서 발견 되 면 가비지 수집기는 개체를 해제 합니다. 그러나 가비지 수집기 비관리 코드에서 개체에 대 한 참조를 인식 하지 못하고 이렇게에서 명시적으로 금지 하지 않는 한 비관리 코드에서 단독으로 사용 하는 개체를 해제할 수도 있습니다. <xref:System.GC.KeepAlive%2A> 메서드는 가비지 수집기에서 여전히 사용 비관리 코드에 있는 개체를 수집 하지 않도록 설정 하는 메커니즘을 제공 합니다.  
  
 관리 되는 메모리 할당 하는 것 외 가비지 수집기의 구현 파일 핸들 또는 데이터베이스 연결 등의 개체에서 보유 한 리소스에 대 한 정보를 유지 하지 않습니다. 형식이 형식 인스턴스의 메모리가 회수 되기 전에 해제 해야 하는 관리 되지 않는 리소스를 사용 하면 형식 종료자를 구현할 수 있습니다.  
  
 대부분의 경우 종료자를 재정의 하 여 구현 되는 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드; 작성 된 C# 또는 c + + 형식에서 소멸자를 하는데 컴파일러의 재정의로 변경를 구현 하는 반면 <xref:System.Object.Finalize%2A?displayProperty=nameWithType>합니다. 대부분의 경우에서 개체가 종료자를 사용 하면 가비지 수집기가 호출 된 개체를 해제 하기 전에 합니다. 하지만 가비지 수집기는 모든 상황에서 종료자를 호출 하는 데 필요 예를 들어는 <xref:System.GC.SuppressFinalize%2A> 메서드를 호출할 개체의 종료자를 명시적으로 않도록 합니다. 또한 가비지 수집기는 특정 스레드를 사용 하 여 개체를 종료 하거나 그렇지 않은 가비지 수집을 사용할 수 있지만 서로 참조 하는 개체에 대 한 종료자가 호출 되는 순서가 확정 되어 필요가 없습니다.  
  
 특정 시간에 리소스를 해제 해야 합니다는 여기서 시나리오에서는 클래스에서 구현할 수는 <xref:System.IDisposable> 를 포함 하는 인터페이스는 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 리소스 관리 및 정리 작업을 수행 하는 메서드입니다. 구현 하는 클래스 <xref:System.IDisposable.Dispose%2A> 일부로 지정 해야, 클래스 계약의 경우 소비자 클래스 개체를 정리 하려면 메서드를 호출 합니다. 가비지 수집기 호출 하지 않으며, 기본적으로는 <xref:System.IDisposable.Dispose%2A> 메서드 소비량이 적어지지만 구현의 <xref:System.IDisposable.Dispose%2A> 메서드의 메서드를 호출할 수는 <xref:System.GC> 가비지 수집기의 종료 동작 사용자 지정 하는 클래스입니다.  
  
 개체를 종료 하 고 dispose 패턴에 대 한 자세한 내용은 참조 하십시오. [관리 되지 않는 리소스 정리](~/docs/standard/garbage-collection/unmanaged.md)합니다.  
  
<a name="generations"></a>   
## <a name="object-aging-and-generations"></a>개체 에이징 및 세대  
 공용 언어 런타임의 가비지 수집기는 세대를 사용 하 여 개체 에이징을 지원 합니다. 생성은 메모리에 개체의 상대적 기간의 측정 단위입니다. 생성 번호 또는 개체의 보존 기간 개체 속해 있는 생성을 나타냅니다. 만든 개체 더 최근에 새로운 세대의 일부인 하며 응용 프로그램 수명 앞부분에서 만든 개체 주기 보다 더 낮은 세대 번호입니다. 가장 최근 세대 개체는 0 세대에서입니다. 이 구현은 가비지 수집기의 세 가지 개체 세대가, 0, 1 및 2 세대를 지원합니다. 값을 검색할 수 있습니다는 <xref:System.GC.MaxGeneration%2A> 속성을 시스템에서 지 원하는 가장 큰 세대 번호를 확인 합니다.  
  
 개체 에이징 가비지 수집기가 모든 세대를 평가 하는 것이 아니라 세대 특정 집합에 대상 가비지 컬렉션에 응용 프로그램을 있습니다. 오버 로드는 <xref:System.GC.Collect%2A> 포함 하는 메서드는 `generation` 매개 변수를 사용 하면 가장 오래 된 세대 가비지 수집을 지정할 수 있습니다.  
  
<a name="NoGCRegion"></a>   
## <a name="disallowing-garbage-collection"></a>가비지 수집을 허용 하지 않습니다.  
 부터는 [!INCLUDE[net_v46](~/includes/net-v46-md.md)], 가비지 수집기를 비 GC 지역 대기 시간 모드는 가비지 컬렉션 수는 응용 프로그램의 성능이 저하 되는 중요 한 경로 실행 하는 동안 사용할 수 있는 지원 합니다. 비 GC 지역 대기 시간 모드 방해를 받지 않고 가비지 수집기에서 할당 될 수 있는 메모리 양을 지정 하는 필요 합니다. 런타임에서 해당 메모리를 할당할 수, 런타임에서 수행 하지 않습니다 가비지 수집을 요주의 경로에 코드 실행 하는 동안 합니다.  
  
 오버 로드 중 하나를 호출 하 여 중요 한 경로 없음 GC 영역의 시작 부분 정의 <xref:System.GC.TryStartNoGCRegion%2A>합니다. 중요 한 경로 끝에 호출 하 여 지정 된 <xref:System.GC.EndNoGCRegion%2A> 메서드.  
  
 에 대 한 호출을 중첩 시킬 수 없습니다는 <xref:System.GC.TryStartNoGCRegion%2A> 메서드를 호출 해야 합니다.는 <xref:System.GC.EndNoGCRegion%2A> 메서드는 런타임에서 현재 비 GC 지역 대기 시간 모드 경우. 즉, 호출 하면 안 <xref:System.GC.TryStartNoGCRegion%2A> 여러 번 (첫 번째 메서드 호출 후 후속 호출은 성공 하지 것입니다), 호출을 기대할 수 없습니다 및 <xref:System.GC.EndNoGCRegion%2A> 해 서 첫 번째 호출에 성공 하려면 <xref:System.GC.TryStartNoGCRegion%2A> 성공 합니다.  
  
   
  
## Examples  
 다음 예제에서는 생성 및 사용 하지 않는 개체의 블록에 대 한 메모리 정보를 콘솔에 인쇄 GC는 여러 가지 방법을 사용 합니다. 사용 되지 않은 개체는 다음 모두 수집 하 고 총 메모리 표시 됩니다.  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.GCSettings" />
  </Docs>
  <Members>
    <Member MemberName="AddMemoryPressure">
      <MemberSignature Language="C#" Value="public static void AddMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.AddMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMemoryPressure(long bytesAllocated);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated">할당된 관리되지 않는 메모리의 증가량입니다.</param>
        <summary>가비지 컬렉션을 예약할 때 고려해야 할 많은 양의 관리되지 않는 메모리 할당을 런타임에 알립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가비지 수집을 예약 하는 시기를 결정할 때, 런타임에 고려 얼마나 많은 관리 되는 메모리를 할당 합니다. 관리 되는 작은 개체는 많은 양의 관리 되지 않는 메모리를 할당 하면 런타임에서 관리 되는 메모리만 고려 하 고 가비지 수집을 예약 하는 긴급도 따라서에서는 합니다. <xref:System.GC.AddMemoryPressure%2A> 메서드 시스템 메모리의 추가 사용을 런타임에 알립니다.  
  
 가장 간단한 사용 패턴에 관리 되는 개체 생성자에 관리 되지 않는 메모리를 할당 및 해제는 `Dispose` 또는 `Finalize` 메서드. 호출의 <xref:System.GC.AddMemoryPressure%2A> 관리 되지 않는 메모리를 할당 한 후 메서드를 호출 하 고는 <xref:System.GC.RemoveMemoryPressure%2A> 해제 한 후 메서드.  
  
 여기서는 관리 되지 않는 메모리 할당 크게 변경 되는 관리 되는 개체의 수명 동안, 더 복잡 한 시나리오에서 호출할 수 있습니다는 <xref:System.GC.AddMemoryPressure%2A> 및 <xref:System.GC.RemoveMemoryPressure%2A> 런타임에 이러한 증분 변경 내용을 통신 하는 방법입니다.  
  
> [!CAUTION]
>  추가한 압력 양은 정확 하 게 제거 하는 확인 해야 합니다. 이렇게 정의 하면 오랜 시간 동안 실행 되는 응용 프로그램에서 시스템의 성능이 저하 될 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bytesAllocated" />가 0보다 작거나 같은 경우  
  
 또는  
  
 32비트 컴퓨터에서 <paramref name="bytesAllocated" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">가비지 수집 우선 순위를 조작할 때 비관리 코드를 호출 하는 기능입니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="CancelFullGCNotification">
      <MemberSignature Language="C#" Value="public static void CancelFullGCNotification ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelFullGCNotification() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CancelFullGCNotification" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CancelFullGCNotification ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CancelFullGCNotification();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>가비지 컬렉션 알림의 등록을 취소합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 등록 된 가비지 수집 알림의 취소는 <xref:System.GC.RegisterForFullGCNotification%2A> 메서드. 매개 변수 값에 대 한 후속 호출에 임계값을 조정 하기 전에이 메서드를 호출할 필요가 없습니다는 <xref:System.GC.RegisterForFullGCNotification%2A> 메서드.  
  
   
  
## Examples  
 다음 예에서는 가비지 수집 등록을 취소합니다. 이 예제는에 대해 제공 된 큰 예제의 일부는 [가비지 수집 알림](~/docs/standard/garbage-collection/notifications.md) 항목입니다.  
  
 [!code-cpp[GCNotification#7](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#7)]
 [!code-csharp[GCNotification#7](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#7)]
 [!code-vb[GCNotification#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">동시 가비지 컬렉션이 사용되는 경우 이 멤버를 사용할 수 없습니다. 동시 가비지 수집을 사용하지 않도록 설정하는 방법에 대한 자세한 내용은 [&lt;gcConcurrent&gt;](~/docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md) 런타임 설정을 참조하세요.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Collect">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>가비지 컬렉션을 수행하도록 합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>모든 세대의 가비지 수집을 즉시 수행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 액세스할 수 있는 모든 메모리를 회수할 수 있습니다. 모든 세대의 차단 가비지 수집을 수행합니다.  
  
 메모리에 있었던 시간에 관계 없이 모든 개체를 컬렉션에 대 한 것으로 간주 됩니다. 그러나 관리 코드에서 참조 되는 개체는 수집 되지 않습니다. 이 메서드를 사용 하 여 최대 사용 가능한 메모리 양을 회수할 수 시스템 강제 적용 합니다.  
  
 부터는 [!INCLUDE[net_v451](~/includes/net-v451-md.md)]를 설정 하 여 큰 개체 힙 (LOH)을 압축할 수 있습니다는 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> 속성을 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> 호출 하기 전에 <xref:System.GC.Collect%2A> 메서드를 다음 예제와 같이 보여 줍니다.  
  
 [!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]
 [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 <xref:System.GC.Collect%2A> 메모리의 모든 세대에서 수집을 수행 하는 메서드. 코드의 사용 되지 않는 개체는 숫자를 생성 한 다음 호출에서 <xref:System.GC.Collect%2A> 메서드를 메모리에서 지웁니다.  
  
 [!code-cpp[System.GC.Collect Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.Collect Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.Collect Example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.Collect Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="generation">가비지를 수집할 가장 오래된 세대의 수입니다.</param>
        <summary>0세대에서 지정된 세대까지 가비지 수집을 즉시 수행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여 액세스할 수 있는 메모리를 회수할 수 있습니다. 그러나이 메서드를 사용 하 여 보장 하지 않습니다 지정된 된 세대에 액세스할 수 없는 모든 메모리가 회수 됩니다.  
  
 가비지 수집기는 세대 번호를 가진 개체 수집 하지 않습니다 개체 에이징이 구현 된 경우 지정된 된 세대 보다 높습니다. 개체 에이징 구현 되지 않은 경우 가비지 수집기가 가비지 수집 중 모든 개체를 검토 합니다.  
  
 사용 하 여는 <xref:System.GC.MaxGeneration%2A> 속성의 최대 유효 값을 확인 하 고 `generation` 매개 변수입니다.  
  
 가비지 수집기는 세대에 상관 없이 모든 개체를 검토 하려면, 매개 변수를 사용 하는이 메서드의 버전을 사용 합니다. 기반으로 하는 개체를 회수 하는 가비지 수집기는 <xref:System.GCCollectionMode> 설정을 사용 하 여는 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%29?displayProperty=nameWithType> 메서드 오버 로드 합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 <xref:System.GC.Collect%2A> 메모리의 각 계층에서 컬렉션을 수행 하는 메서드. 코드의 사용 되지 않는 개체는 숫자를 생성 한 다음 호출에서 <xref:System.GC.Collect%2A> 메서드를 메모리에서 지웁니다.  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="generation" />가 잘못된 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
        <Parameter Name="mode" Type="System.GCCollectionMode" />
      </Parameters>
      <Docs>
        <param name="generation">가비지를 수집할 가장 오래된 세대의 수입니다.</param>
        <param name="mode">이 가비지의 수집 강제 (<see cref="F:System.GCCollectionMode.Default" /> 또는 <see cref="F:System.GCCollectionMode.Forced" />) 또는 최적화 (<see cref="F:System.GCCollectionMode.Optimized" />) 여부를 지정하는 열거형 값입니다.</param>
        <summary>
          <see cref="T:System.GCCollectionMode" /> 값에 지정된 시간에 0세대에서 지정된 세대까지 가비지 수집을 수행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 `mode` 매개 변수를 수행할지 여부를 가비지 수집 즉시 또는 시간은 개체를 회수 하려면 최적의 지정 합니다. 이 메서드를 사용 하 여 지정된 된 세대에 액세스할 수 없는 모든 메모리가 회수 보장 하지 않습니다.  
  
 응용 프로그램에서 중요 한 기간 동안 가비지 수집의 대기를 조정 하려면 설정는 <xref:System.Runtime.GCSettings.LatencyMode%2A> 속성입니다.  
  
 가비지 수집기에서 지정 된 것 보다 더 높은 세대 번호를 가진 개체를 수집 하지 않습니다는 `generation` 매개 변수입니다. 사용 하 여는 <xref:System.GC.MaxGeneration%2A> 속성의 최대 유효 값을 확인 하려면 `generation`합니다.  
  
 가비지 수집기는 세대에 상관 없이 모든 개체를 검토 하려면, 매개 변수를 사용 하는이 메서드의 버전을 사용 합니다.  
  
 개체의 지정된 된 세대까지 개체를 회수, 사용 하 여 가비지 수집기가 하는 <xref:System.GC.Collect%28System.Int32%29?displayProperty=nameWithType> 메서드 오버 로드 합니다. 최대 생성을 지정 하면 개체를 모두 수집 됩니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하 여 2 세대 개체에 대 한 가비지 수집을 강제로 <xref:System.GCCollectionMode.Optimized> 설정 합니다.  
  
 [!code-csharp[System.GC.GCCollectionMode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GCCollectionMode/cs/Program.cs#1)]
 [!code-vb[System.GC.GCCollectionMode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GCCollectionMode/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="generation" />가 잘못된 경우  
  
 또는  
  
 <paramref name="mode" />가 <see cref="T:System.GCCollectionMode" /> 값 중 하나가 아닙니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
        <Parameter Name="mode" Type="System.GCCollectionMode" />
        <Parameter Name="blocking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="generation">가비지를 수집할 가장 오래된 세대의 수입니다.</param>
        <param name="mode">이 가비지의 수집 강제 (<see cref="F:System.GCCollectionMode.Default" /> 또는 <see cref="F:System.GCCollectionMode.Forced" />) 또는 최적화 (<see cref="F:System.GCCollectionMode.Optimized" />) 여부를 지정하는 열거형 값입니다.</param>
        <param name="blocking">
          차단 가비지 수집을 수행하려면 <see langword="true" />이고, 가능한 경우 백그라운드 가비지 수집을 수행하려면 <see langword="false" />입니다.</param>
        <summary>수집이 차단되어야 할지 여부를 지정하는 값을 사용하여 <see cref="T:System.GCCollectionMode" /> 값으로 지정된 시간에 0세대에서 지정된 세대까지 가비지 수집을 강제로 실행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 표에서 요약의 상호 작용은 `mode` 및 `blocking` 매개 변수:  
  
|`mode`|`blocking`가 `true`인 경우|`blocking`가 `false`인 경우|  
|-|-|-|  
|<xref:System.GCCollectionMode.Forced> 또는 <xref:System.GCCollectionMode.Default>|차단 컬렉션은 가능한 한 빨리 수행됩니다. 백그라운드 컬렉션 진행 중인 경우 및 `generation` 은 0 또는 1는 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 즉시 차단 컬렉션을 트리거하여 메서드와 완료 되는 컬렉션을 반환 합니다. 백그라운드 컬렉션 진행 중인 경우와 `generation` 가 2 인 백그라운드 컬렉션이 완료 되 고 차단 2 세대 컬렉션을 트리거하여 다음 반환 될 때까지 메서드 대기 합니다.|컬렉션은 가능한 한 빨리 수행됩니다. <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 메서드는 백그라운드 컬렉션을 요청하지만 이 작업이 항상 수행되지는 않으며 상황에 따라 차단 컬렉션이 계속 수행될 수도 있습니다. 백그라운드 컬렉션이 이미 진행 중인 경우 메서드가 즉시 반환됩니다.|  
|<xref:System.GCCollectionMode.Optimized>|차단 컬렉션은 가비지 수집기의 상태와 `generation` 매개 변수에 따라 수행될 수 있습니다. 가비지 수집기는 최적의 성능을 제공하려고 합니다.|가비지 수집기의 상태에 따라 컬렉션이 수행될 수 있습니다. <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 메서드는 백그라운드 컬렉션을 요청하지만 이 작업이 항상 수행되지는 않으며 상황에 따라 차단 컬렉션이 계속 수행될 수도 있습니다. 가비지 수집기는 최적의 성능을 제공하려고 합니다. 백그라운드 컬렉션이 이미 진행 중인 경우 메서드가 즉시 반환됩니다.|  
  
 호출 하는 경우는 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 전체 차단 가비지 수집을 수행 하는 메서드를 설정 하 여 큰 개체 힙 또한 압축할 수 있습니다는 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> 속성을 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> 호출 하기 전에 <xref:System.GC.Collect%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="generation" />가 잘못된 경우  
  
 또는  
  
 <paramref name="mode" />가 <see cref="T:System.GCCollectionMode" /> 값 중 하나가 아닙니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking, bool compacting) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean, compacting As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
        <Parameter Name="mode" Type="System.GCCollectionMode" />
        <Parameter Name="blocking" Type="System.Boolean" />
        <Parameter Name="compacting" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="generation">가비지를 수집할 가장 오래된 세대의 수입니다.</param>
        <param name="mode">이 가비지의 수집 강제 (<see cref="F:System.GCCollectionMode.Default" /> 또는 <see cref="F:System.GCCollectionMode.Forced" />) 또는 최적화 (<see cref="F:System.GCCollectionMode.Optimized" />) 여부를 지정하는 열거형 값입니다.</param>
        <param name="blocking">
          차단 가비지 수집을 수행하려면 <see langword="true" />이고, 가능한 경우 백그라운드 가비지 수집을 수행하려면 <see langword="false" />입니다.</param>
        <param name="compacting">
          작은 개체 힙을 압축 하려면 <see langword="true" />, 비우기만 하려면 <see langword="false" />입니다.</param>
        <summary>수집이 차단되고 압축되어야 할지 여부를 지정하는 값을 사용하여 <see cref="T:System.GCCollectionMode" /> 값으로 지정된 시간에 0세대에서 지정된 세대까지 가비지 수집을 강제로 실행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우 `blocking` 은 `false`, GC 배경 또는 차단 가비지 컬렉션 수행 여부를 결정 합니다. 경우 `compacting` 은 `true`, 차단 가비지 수집을 수행 합니다.  
  
 경우 `compacting` 은 `true`, 런타임에서 작은 개체 힙 (SOH)을 압축 합니다. 큰 개체 힙 (LOH) 하지 않는 한 압축은 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> 속성이로 설정 된 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>합니다. Note 모든 차단 가비지 컬렉션 되지 전체 차단 가비지 컬렉션에 있습니다.  
  
 호출할 수 있습니다는 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> 메서드에 다음 코드 조각에서와 같이 관리 되는 힙 크기 가능한 가장 작은 줄일 수 있습니다.  
  
 [!code-csharp[System.GC.Collect#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect/cs/collect4.cs#1)]
 [!code-vb[System.GC.Collect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect/vb/collect4.vb#1)]  
  
 지정 `true` 에 대 한는 `compacting` 인수는 압축, 전체 차단 가비지 수집을 보장 합니다. 설정의 <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> 속성을 <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> LOH와 SOH 압축 되도록 보장 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionCount">
      <MemberSignature Language="C#" Value="public static int CollectionCount (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CollectionCount(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CollectionCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionCount (generation As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CollectionCount(int generation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="generation">가비지 수집 횟수를 확인할 개체의 세대입니다.</param>
        <summary>지정된 세대의 개체에 대해 가비지 컬렉션이 수행된 횟수를 반환합니다.</summary>
        <returns>프로세스가 시작된 이후 지정된 세대에 대해 가비지 컬렉션이 수행된 횟수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 고유의 리소스 관리를 구현 하는 경우 가비지 수집을 주기적으로 호출 하 여 적용 해야 할 수 있습니다는 <xref:System.GC.Collect%2A> 메서드. 이 작업은 비용이 많이 드는 작업 때문에 가비지 수집을 최근에 발생 했을 때 호출을 건너뛰어 성능을 개선할 수 있습니다. 반환 된 값을 저장 <xref:System.GC.CollectionCount%2A> 호출한 직후 <xref:System.GC.Collect%2A>합니다. 호출 하면 다음에 <xref:System.GC.Collect%2A>에서 반환 된 현재 값 비교 <xref:System.GC.CollectionCount%2A> 저장 된 값으로. 두 값이 같으면 컬렉션이 없으면 중간에 발생 하는 호출 하 상태일 <xref:System.GC.Collect%2A> 다시 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="generation" />가 0보다 작습니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndNoGCRegion">
      <MemberSignature Language="C#" Value="public static void EndNoGCRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndNoGCRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.EndNoGCRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndNoGCRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndNoGCRegion();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>비 GC 지역 대기 시간 모드를 종료합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.GC.EndNoGCRegion%2A> 메서드가 throw는 <xref:System.InvalidOperationException> 가비지 수집기가 비 GC 지역 대기 시간 모드에 없는 경우. 다음 조건에서 발생합니다.  
  
-   <xref:System.GC.TryStartNoGCRegion%2A> 메서드가 이전에 호출 되지 않았습니다.  
  
-   에 대 한 호출에서 <xref:System.GC.TryStartNoGCRegion%2A> 메서드 반환 `false`합니다.  
  
-   에 대 한 호출에서 <xref:System.GC.TryStartNoGCRegion%2A> 메서드에서 예외가 발생 했습니다.  
  
 다음과 같은 코드를 사용 하 여 다음과 같은 이유로 인해에 대 한 예외를 방지할 수 있습니다.  
  
 [!code-csharp[System.GC.EndNoGCRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.endnogcregion/cs/endnogcregion1.cs#1)]
 [!code-vb[System.GC.EndNoGCRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.endnogcregion/vb/endnogcregion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">가비지 수집기가 비 GC 지역 대기 시간 모드가 아닌 경우  
  
 또는  
  
 가비지 수집이 발생하여 비 GC 지역 대기 시간 모드가 이전에 종료된 경우  
  
 또는  
  
 메모리 할당이 <see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> 메서드 호출에서 지정된 크기를 초과한 경우</exception>
        <altmember cref="M:System.GC.TryStartNoGCRegion(System.Int64)" />
        <altmember cref="P:System.Runtime.GCSettings.LatencyMode" />
      </Docs>
    </Member>
    <Member MemberName="GetAllocatedBytesForCurrentThread">
      <MemberSignature Language="C#" Value="public static long GetAllocatedBytesForCurrentThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetAllocatedBytesForCurrentThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetAllocatedBytesForCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllocatedBytesForCurrentThread () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetAllocatedBytesForCurrentThread();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetGeneration">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>개체의 현재 세대 번호를 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">세대 정보를 검색할 개체입니다.</param>
        <summary>지정된 개체의 현재 세대 번호를 반환합니다.</summary>
        <returns>
          <paramref name="obj" />의 현재 세대 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하는 개체의 보존 기간을 결정 한 다음 해당 정보를 사용 하 여는 <xref:System.GC.Collect%2A> 메서드를 수집 하 여 가비지 수집기를 동일한 세대의 개체입니다. 예를 들어 개체 그룹으로 생성 하 고 동시에 액세스할 수 없게 집합이 있는 경우에이 메서드를 사용 합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.GC.GetGeneration%2A> 메서드를 개체의 보존 기간을 결정 합니다. 이 예제에서는 메모리를 정리 하 고 사전 비교 콘솔에서 컬렉션 총 메모리를 게시 하는 가비지 수집을 수행 합니다.  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (WeakReference wo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(class System.WeakReference wo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.WeakReference)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (wo As WeakReference) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(WeakReference ^ wo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wo" Type="System.WeakReference" />
      </Parameters>
      <Docs>
        <param name="wo">세대 번호를 확인할 대상 개체를 참조하는 <see cref="T:System.WeakReference" />입니다.</param>
        <summary>지정된 약한 참조의 대상의 현재 세대 번호를 반환합니다.</summary>
        <returns>
          <paramref name="wo" />의 대상의 현재 세대 번호입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 다음 예제에서는 <xref:System.GC.GetGeneration%2A> 약한 참조 개체의 보존 기간을 결정 하는 메서드.  
  
 [!code-cpp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CPP/systemgcgetgenerationweak.cpp#1)]
 [!code-csharp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CS/systemgcgetgenerationweak.cs#1)]
 [!code-vb[System.GC.GetGenerationWeak Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/VB/systemgcgetgenerationweak.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">가비지 수집이 <paramref name="wo" />에서 이미 수행된 경우</exception>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetTotalMemory">
      <MemberSignature Language="C#" Value="public static long GetTotalMemory (bool forceFullCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTotalMemory(bool forceFullCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetTotalMemory(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTotalMemory (forceFullCollection As Boolean) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTotalMemory(bool forceFullCollection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forceFullCollection" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="forceFullCollection">
          이 메서드가 반환되기 전에 가비지 수집을 기다릴 수 있다는 것을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
        <summary>현재 할당되었다고 여겨지는 바이트 수를 검색합니다. 매개 변수는 시스템에서 가비지를 수집하고 개체를 종료할 수 있도록 이 메서드가 반환되기 전에 잠시 동안 대기할 수 있는지 여부를 나타냅니다.</summary>
        <returns>관리되는 메모리에 현재 할당된 가장 가까운 근사값의 바이트 수입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 `forceFullCollection` 매개 변수는 `true`,이 메서드는 시스템에서 가비지를 수집 하 고 개체를 종료할 때 짧은 간격으로 반환 하기 전에 대기 합니다. 간격의 기간이 완료 가비지 수집 주기의 수에 의해 결정 되는 내부적으로 지정 된 제한 및 주기 사이 복구 하는 메모리 양이 변경 되었습니다. 가비지 수집기에서 액세스할 수 없는 메모리를 모두 수집 됨을 보장 하지 않습니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 <xref:System.GC.GetTotalMemory%2A> 메서드를 가져오고 관리 되는 메모리에 현재 할당 된 바이트 수를 표시 합니다.  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public static void KeepAlive (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void KeepAlive(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.KeepAlive(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub KeepAlive (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void KeepAlive(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">참조할 개체입니다.</param>
        <summary>지정된 개체를 참조하여 현재 루틴이 시작된 지점에서 이 메서드가 호출된 지점까지 가비지 컬렉션이 불가능하도록 합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 용도 <xref:System.GC.KeepAlive%2A> 방법은 서둘러 가비지 수집기가 회수 될 위험에 노출 하는 개체에 대 한 참조의 존재 여부를 확인 하는 것입니다. 이 발생할 수 있는 일반적인 시나리오는 관리 되는 코드 또는 데이터를 개체에 대 한 참조가 있지만 개체 사용 중인 Win32 Api, 관리 되지 않는 Dll 같은 비관리 코드 또는 COM.를 사용 하 여 메서드  
  
 이 메서드가 참조는 `obj` 매개 변수를 해당 개체까지 가비지 수집이 루틴의 시작 부분부터 실행 순서 대로 지점에이 메서드가 호출 됩니다. 이 메서드를 마치면 지침의 범위 시작이 아닌 코드 여기서 `obj` 사용할 수 있어야 합니다.  
  
 <xref:System.GC.KeepAlive%2A> 메서드 아무런 작업도 수행 하 고 매개 변수로 전달 된 개체의 수명을 확장 이외의 부작용이 없습니다를 생성 합니다.  
  
   
  
## Examples  
 다음 코드 예제에서는의 시작 부분에서 개체를 만들고 해당 `Main` 메서드 끝까지 다시 개체를 참조 하지 않습니다 때는 <xref:System.GC.KeepAlive%2A> 메서드를 호출 합니다. 개체는 30 초 동안 지속 되는 `Main` 메서드 호출에도 불구 하 고는 <xref:System.GC.Collect%2A> 및 <xref:System.GC.WaitForPendingFinalizers%2A> 메서드.  
  
 [!code-cpp[System.GC.KeepAlive Example2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CPP/gckeepalive.cpp#1)]
 [!code-csharp[System.GC.KeepAlive Example2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CS/gckeepalive.cs#1)]
 [!code-vb[System.GC.KeepAlive Example2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/VB/gckeepalive.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxGeneration">
      <MemberSignature Language="C#" Value="public static int MaxGeneration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxGeneration" />
      <MemberSignature Language="DocId" Value="P:System.GC.MaxGeneration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxGeneration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxGeneration { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>시스템에서 현재 지원하는 가장 큰 세대 번호를 가져옵니다.</summary>
        <value>0에서 지원되는 가장 큰 세대 번호 사이의 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 생성 번호 또는 개체의 보존 기간에는 개체의 수명이의 구현에서 정의 된 상대 측정값입니다. 가장 최근에 만든된 개체는 세대 0에에서이 고 가장 오래 된 개체를 반환한 생성을 보다 작거나 같은 세대에는 <xref:System.GC.MaxGeneration%2A> 속성입니다.  
  
 가비지 수집기가 새 메모리 오래 된 메모리 보다 가비지 수집을 수행할 수 있을 가능성이 있다고 가정 합니다. 따라서 메모리를 회수 될 때마다 세대 번호를 조정 하 여는 성능을 향상를 가비지 수집기와 <xref:System.GC.MaxGeneration%2A> 속성 값은 시간에 따라 증가할 수 있습니다.  
  
 개체 에이징 구현 되는 경우는 <xref:System.GC.MaxGeneration%2A> 속성 시스템에서 사용 하는 가장 큰 세대 번호를 반환 그렇지 않은 경우이 속성이 0을 반환 합니다.  
  
   
  
## Examples  
 다음 예제에서는 현재 사용 중에서 가장 큰 세대 번호를 표시 하려면 MaxGeneration 속성을 사용 하는 방법을 보여 줍니다.  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>이 구현에서 반환 되는 값은 <see cref="P:System.GC.MaxGeneration" /> 속성이 실행 중인 응용 프로그램의 수명 동안 일정 하 게 유지 합니다.  
  
 사용 하 여는 <see cref="P:System.GC.MaxGeneration" /> 호출할 때 지정할 수는 최대 값을 결정 하는 속성은 <see cref="M:System.GC.Collect(System.Int32)" /> 메서드 생성 매개 변수를 사용 합니다.</para>
        </block>
        <altmember cref="M:System.GC.GetGeneration(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForFullGCNotification">
      <MemberSignature Language="C#" Value="public static void RegisterForFullGCNotification (int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForFullGCNotification(int32 maxGenerationThreshold, int32 largeObjectHeapThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RegisterForFullGCNotification(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterForFullGCNotification (maxGenerationThreshold As Integer, largeObjectHeapThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterForFullGCNotification(int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxGenerationThreshold" Type="System.Int32" />
        <Parameter Name="largeObjectHeapThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxGenerationThreshold">2세대에 할당된 개체에 따라 알림을 발생시킬 시점을 지정하는 1에서 99 사이의 숫자입니다.</param>
        <param name="largeObjectHeapThreshold">대형 개체 힙에 할당된 개체에 따라 알림을 발생시킬 시점을 지정하는 1에서 99 사이의 숫자입니다.</param>
        <summary>전체 가비지 컬렉션에 유리한 조건인 경우와 컬렉션이 완료된 경우에 가비지 컬렉션 알림이 발생하도록 지정합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 각 세대에 대해 가비지 수집기는 해당 세대에 할당에 대 한 임계값을 설정합니다. 할당의 크기에서이 임계값을 초과 하면 해당 세대에 가비지 수집이 트리거됩니다. 에 대 한 다음 가비지 수집을 시도 합니다. 예를 들어 (즉, 20MB 1 세대 컬렉션 후에 유지 2 세대로 승격) 20 MB 이며 20MB 이상 세대 2의 임계값이 경우 1 세대 되지 않고 유지과 2 세대에 라는 메시지가 표시 됩니다, 2 세대 컬렉션입니다. 마찬가지로, 큰 개체 힙 (LOH의)의 임계값 20MB 하며 응용 프로그램에서 할당 한 개 이상의 20MB 큰 개체, 다음 가비지 수집 (LOH gen2 가비지 컬렉션에만 수집 됩니다) 이후 2 세대 컬렉션으로 시도 됩니다.  
  
 `maxGenerationThreshold` 및 `largeObjectHeapThreshold` 임계값 전체 가비지 수집이 발생 하기 전에 알림을 미리 어느 정도 제어 합니다. 임계값이 클수록 간에 알림 및 다음 전체 가비지 수집이 발생할 수 있는 많은 할당입니다.  
  
 런타임에서 전체 가비지 수집을 수행 하 고 사용 하 여 해당 컬렉션을 우회 하려고 할 때 알림을 받을 수 요청할 수 있는 공용 언어 런타임에서 전체 가비지 수집이 나쁜 영향을 응용 프로그램의 성능을 설정한 경우 직접 컬렉션을 실행 (사용 하는 <xref:System.GC.Collect%2A> 메서드) 조건이 유리할 여전히 때. 가비지 수집 일정, 사용자가 직접 변경 하는 것 외에도 전체 GC 알림은 다음의 시나리오에서 유용 합니다.  
  
-   전체 가비지 수집의 접근 방식에 대 한 모니터링 하 고 (예를 들어 일부 캐시 항목 해제)에서 사용 중인 데이터 크기를 줄일 하나 도달 하 고 있음이 되었다는 메시지가 나타나면 합니다. 결과적으로, 가비지 수집이 발생 경우에 더 많은 메모리를 회수할 수 있습니다.  
  
-   몇 가지 통계를 수집할 수 있도록 전체 가비지 수집의 완료에 대 한 모니터링 합니다.  예를 들어 다음 사용 중인 데이터의 크기를 알 수 있도록 GC 완료 시 힙의 크기를 측정 하는 것이 좋습니다. (전체 GC 후 힙에 가장 작은 크기로.)  
  
 전체 가비지 수집의 의미에 대 한 자세한 내용은 참조 [가비지 수집 알림](~/docs/standard/garbage-collection/notifications.md)합니다.  
  
 가비지 컬렉션 알림의 등록 하면 전체 가비지 수집이 임박 때와 완료 될 때를 알림을 받을 수 있습니다. 이 패턴은 운영 체제 메모리 부족 알림을 모니터링 하는 방법 유사 합니다.  
  
 다음 지침을 사용 하 여 지정 하는 데는 `maxGenerationThreshold` 및 `largeObjectHeapThreshold` 매개 변수:  
  
-   클수록 임계값 값을 더 할당 알림과 전체 가비지 수집이 사이의 발생 합니다.  
  
     임계값이 크면 근접 컬렉션에 대 한 확인 하기 위해 런타임에 대 한 더 많은 기회를 제공 합니다. 이 알려 가능성이 커집니다. 그러나 런타임에 다음 수집을 실행 하기 전에 많은 할당 인해 때문에 임계값을 너무 높게 설정 해야 합니다.  
  
     사용자 컬렉션을 직접 실행할 높은 임계값을 사용 하 여 알림을 시, 하면 런타임 다음 수집에서 회수 되는 것 보다 적은 개체 회수 됩니다.  
  
-   임계값 값이 작을수록, 알림과 전체 가비지 수집이 사이의 할당 적습니다.  
  
   
  
## Examples  
 다음 예제에는 가비지 수집 알림의 등록 하 고 가비지 수집 알림의 상태를 모니터링 하는 스레드를 시작 하는 방법을 보여 줍니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부 [가비지 수집 알림](~/docs/standard/garbage-collection/notifications.md) 항목입니다.  
  
 [!code-cpp[GCNotification#2](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#2)]
 [!code-csharp[GCNotification#2](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#2)]
 [!code-vb[GCNotification#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maxGenerationThreshold" /> 또는 <paramref name="largeObjectHeapThreshold" />가 1과 99 사이에 없습니다.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="RemoveMemoryPressure">
      <MemberSignature Language="C#" Value="public static void RemoveMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RemoveMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMemoryPressure(long bytesAllocated);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated">해제된 관리되지 않는 메모리의 양입니다.</param>
        <summary>관리되는 메모리가 해제되었고 가비지 컬렉션을 예약할 때 더 이상 고려할 필요가 없다고 런타임에 알립니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가비지 수집을 예약 하는 시기를 결정할 때, 런타임에 고려 얼마나 많은 관리 되는 메모리를 할당 합니다. 관리 되는 작은 개체는 많은 양의 관리 되지 않는 메모리를 할당 하면 런타임에서 관리 되는 메모리만 고려 하 고 가비지 수집을 예약 하는 긴급도 따라서에서는 합니다. <xref:System.GC.AddMemoryPressure%2A> 메서드 시스템 메모리의 추가 사용을 런타임에 알립니다 및 <xref:System.GC.RemoveMemoryPressure%2A> 메서드 추가 사용이 해제 되었음을 런타임에 알립니다.  
  
 가장 간단한 사용 패턴에 관리 되는 개체 생성자에 관리 되지 않는 메모리를 할당 및 해제는 `Dispose` 또는 `Finalize` 메서드. 호출의 <xref:System.GC.AddMemoryPressure%2A> 관리 되지 않는 메모리를 할당 한 후 메서드를 호출 하 고는 <xref:System.GC.RemoveMemoryPressure%2A> 해제 한 후 메서드.  
  
 여기서는 관리 되지 않는 메모리 할당 크게 변경 되는 관리 되는 개체의 수명 동안, 더 복잡 한 시나리오에서 호출할 수 있습니다는 <xref:System.GC.AddMemoryPressure%2A> 및 <xref:System.GC.RemoveMemoryPressure%2A> 런타임에 이러한 증분 변경 내용을 통신 하는 방법입니다.  
  
> [!CAUTION]
>  추가한 압력 양은 정확 하 게 제거 하는 확인 해야 합니다. 이렇게 정의 하면 오랜 시간 동안 실행 되는 응용 프로그램에서 시스템의 성능이 저하 될 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bytesAllocated" />가 0보다 작거나 같은 경우  
  
 또는  
  
 32비트 컴퓨터에서 <paramref name="bytesAllocated" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">가비지 수집 우선 순위를 조작할 때 비관리 코드를 호출 하는 기능입니다. 연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="ReRegisterForFinalize">
      <MemberSignature Language="C#" Value="public static void ReRegisterForFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReRegisterForFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.ReRegisterForFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReRegisterForFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReRegisterForFinalize(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">종료자가 호출되어야 하는 개체입니다.</param>
        <summary>
          <see cref="M:System.GC.SuppressFinalize(System.Object)" />가 이전에 호출된 지정된 개체에 대해 시스템에서 종료자를 호출하도록 요청합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.GC.ReRegisterForFinalize%2A> 메서드 추가 `obj` 가비지 수집기에서 개체를 정리 하기 전에 종료 되어야 하는 개체의 목록에 매개 변수입니다. `obj` 매개 변수는이 메서드의 호출자에 게 이어야 합니다.  
  
 호출 된 <xref:System.GC.ReRegisterForFinalize%2A> 메서드는 가비지 수집기가 개체의 종료자를 호출 합니다 보증 하지 않습니다.  
  
 기본적으로 종료자를 구현 하는 모든 개체 종료; 해야 하는 개체의 목록에 추가 그러나 개체 이미 종료 되었을 수 있습니다 또는 받는 사람 호출 하 여 종료를 비활성화는 <xref:System.GC.SuppressFinalize%2A> 메서드.  
  
 종료자 부활 자신 또는 참조 하는 개체를이 방법을 사용할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 표준 메서드를 사용 하 여 개체를 두 번째로 마무리 하 가비지 수집 후 시간이 있습니다.  
  
 [!code-cpp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CS/class1.cs#1)]
 [!code-vb[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="obj" />가 <see langword="null" />인 경우</exception>
        <altmember cref="M:System.GC.SuppressFinalize(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressFinalize">
      <MemberSignature Language="C#" Value="public static void SuppressFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SuppressFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.SuppressFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SuppressFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SuppressFinalize(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">종료자가 실행되지 않아야 하는 개체입니다.</param>
        <summary>공용 언어 런타임에서 지정된 개체에 대해 종료자를 호출하지 않도록 요청합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드는 개체의 헤더에 약간 설정 `obj`, 런타임 종료자를 호출 하는 경우 체크 인 합니다. 으로 표시 된 종료자는 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드, 개체는 가비지 수집 되기 전에 관리 되지 않는 리소스를 해제 하는 데 사용 됩니다. 경우 `obj` 종료자에 대 한 호출에는 없습니다는 <xref:System.GC.SuppressFinalize%2A> 메서드는 영향을 주지 않습니다.  
  
 구현 하는 개체는 <xref:System.IDisposable> 인터페이스에서 개체의이 메서드를 호출할 수 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 호출에서 가비지 수집기를 방지 하기 위해 구현 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 필요 하지 않은 개체에 있습니다. 종료자에서 이미 해제 된 관리 되지 않는 리소스를 해제 하지 않도록 하려면이 작업을 수행 하는 일반적으로 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 구현 합니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 <xref:System.GC.SuppressFinalize%2A> 메서드를 호출 하지 못하도록 중복 가비지 수집 되지 않도록 하려면 리소스 클래스에에서 있습니다. 이 예제에서는 사용 된 [삭제 패턴](~/docs/standard/design-guidelines/dispose-pattern.md) 관리 되는 리소스를 모두 해제 (즉, 구현 하는 개체 <xref:System.IDisposable>) 관리 되지 않는 리소스 및 합니다.  
  
 [!code-csharp[System.GC.SuppressFinalize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.suppressfinalize/cs/suppressfinalize1.cs#1)]
 [!code-vb[System.GC.SuppressFinalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.suppressfinalize/vb/suppressfinalize1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="obj" />가 <see langword="null" />인 경우</exception>
        <altmember cref="M:System.GC.ReRegisterForFinalize(System.Object)" />
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryStartNoGCRegion">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>중요한 경로를 실행하는 동안에는 가비지 컬렉션이 허용되지 않습니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  에 대 한 호출을 중첩 시킬 수 없습니다는 <xref:System.GC.TryStartNoGCRegion%2A> 메서드를 호출 해야 합니다.는 <xref:System.GC.EndNoGCRegion%2A> 메서드는 런타임에서 현재 비 GC 지역 대기 시간 모드 경우. 즉, 호출 하면 안 <xref:System.GC.TryStartNoGCRegion%2A> 여러 번 (첫 번째 메서드 호출 후 후속 호출은 성공 하지 것입니다), 호출을 기대할 수 없습니다 및 <xref:System.GC.EndNoGCRegion%2A> 해 서 첫 번째 호출에 성공 하려면 <xref:System.GC.TryStartNoGCRegion%2A> 성공 합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="totalSize">가비지 수집을 트리거하지 않고 할당할 메모리 양(바이트)입니다. 임시 세그먼트 크기보다 작거나 같아야 합니다. 임시 세그먼트 크기에 대한 자세한 내용은 [가비지 컬렉션 기본 사항](~/docs/standard/garbage-collection/fundamentals.md) 문서에서 "임시 세대 및 세그먼트" 섹션을 참조하세요.</param>
        <summary>지정된 양의 메모리를 사용할 수 있는 경우 중요한 경로를 실행하는 동안에는 가비지 수집이 허용되지 않습니다.</summary>
        <returns>
          런타임이 필요한 메모리 양을 커밋할 수 있고 가비지 수집기를 비 GC 지역 대기 시간 모드에서 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.GC.TryStartNoGCRegion%28System.Int64%29> 메서드는 앱 코드의 중요 한 영역에서 실행 하는 동안 가비지 수집을 허용 하지 않는 비 GC 지역 대기 시간 모드에는 가비지 수집기를 배치 하려고 합니다.  런타임에서 처음 요청된 된 양의 메모리를 할당할 수 없는 경우 가비지 수집기가 추가 메모리를 확보 하기 위해 전체 차단 가비지 수집을 수행 합니다. 필요한 크기의 2 실제로이 경우에 메모리를 할당할 수는 가비지 수집기가 비 GC 지역 대기 시간 모드 * `totalSize` 바이트 (할당을 시도 `totalSize` 작은 개체 힙 바이트 및 `totalSize` 대형 개체 힙 바이트)입니다.  
  
 `totalSize` 중요 한 경로에서 발생 하는 모든 메모리 할당을 처리할 수 있을 만큼 크기가 커야 합니다. 대신 응용 프로그램의 실행은 할당 뿐만 아니라 응용 프로그램에의 한 할당이 포함 되어 있습니다.  
  
> [!IMPORTANT]
>  에 대 한 호출을 중첩 시킬 수 없습니다는 <xref:System.GC.TryStartNoGCRegion%2A> 메서드를 호출 해야 합니다.는 <xref:System.GC.EndNoGCRegion%2A> 메서드는 런타임에서 현재 비 GC 지역 대기 시간 모드 경우. 즉, 호출 하면 안 <xref:System.GC.TryStartNoGCRegion%2A> 여러 번 (첫 번째 메서드 호출 후 후속 호출은 성공 하지 것입니다), 호출을 기대할 수 없습니다 및 <xref:System.GC.EndNoGCRegion%2A> 해 서 첫 번째 호출에 성공 하려면 <xref:System.GC.TryStartNoGCRegion%2A> 성공 합니다.  
  
 호출 하 여 비 GC 지역 대기 시간 모드를 종료는 <xref:System.GC.EndNoGCRegion%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="totalSize" />가 임시 세그먼트 크기를 초과합니다.</exception>
        <exception cref="T:System.InvalidOperationException">프로세스가 이미 비 GC 지역 대기 시간 모드에 있습니다.</exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, bool disallowFullBlockingGC);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="totalSize">가비지 수집을 트리거하지 않고 할당할 메모리 양(바이트)입니다. 임시 세그먼트 크기보다 작거나 같아야 합니다. 임시 세그먼트 크기에 대한 자세한 내용은 [가비지 컬렉션 기본 사항](~/docs/standard/garbage-collection/fundamentals.md) 문서에서 "임시 세대 및 세그먼트" 섹션을 참조하세요.</param>
        <param name="disallowFullBlockingGC">
          가비지 수집기가 처음에 <c>totalSize</c> 바이트를 할당할 수 없는 경우 전체 차단 가비지 수집을 생략하려면 <see langword="true" />이고, 그렇지 않은 경우 <see langword="false" />입니다.</param>
        <summary>지정된 양의 메모리를 사용할 수 있는 경우 중요한 경로를 실행하는 동안 가비지 수집이 허용되지 않고, 초기에 사용할 수 있는 메모리가 충분하지 않은 경우 가비지 수집기가 전체 차단 가비지 수집 수행 여부를 제어합니다.</summary>
        <returns>
          런타임이 필요한 메모리 양을 커밋할 수 있고 가비지 수집기를 비 GC 지역 대기 시간 모드에서 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Boolean%29> 메서드는 앱 코드의 중요 한 영역에서 실행 하는 동안 가비지 수집을 허용 하지 않는 비 GC 지역 대기 시간 모드에는 가비지 수집기를 배치 하려고 합니다.  런타임에서 처음 요청된 된 양의 메모리를 할당할 수 없는 경우와 `disallowFullBlockingGC` 인수가 `false`, 가비지 수집기 추가 메모리를 확보 하기 위해 전체 차단 가비지 컬렉션 수행; 그렇지 않으면 할당이 실패 하 고 메서드가 반환 `false`합니다. 필요한 실제로 2에이 경우에 메모리 양을 할당할 수 없는 경우 가비지 수집기가 비 GC 지역 대기 시간 모드를 입력 * `totalSize` (할당을 시도 `totalSize` 작은 개체 힙 용 및 `totalSize` 큰 개체 힙 용).  
  
 `totalSize` 중요 한 경로에서 발생 하는 모든 메모리 할당을 처리할 수 있을 만큼 크기가 커야 합니다. 대신 응용 프로그램의 실행은 할당 뿐만 아니라 응용 프로그램에의 한 할당이 포함 되어 있습니다.  
  
 설정 `disallowFullBlockingGC` 를 `true` 처음 사용 가능한 메모리가 부족 한 경우 컬렉션에 대 한 전체 차단 가비지를 방지 하기 위해 부하 분산 시나리오에에서 가장 유용한은: 시스템으로 요청을 수락할 준비가 반환 하는 경우 자체 보고 메서드와이 메서드를 호출할 수 있습니다 `true`를 반환 하는 경우 다른 시스템에 요청을 리디렉션하는 부하 분산 장치가 있어야 하 고 `false`합니다. 호출 하 여 요청을 처리 하지 않는 경우에 다음 전체 차단 가비지 수집을 수행할 수 있는 것은 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> 메서드.  
  
> [!IMPORTANT]
>  에 대 한 호출을 중첩 시킬 수 없습니다는 <xref:System.GC.TryStartNoGCRegion%2A> 메서드를 호출 해야 합니다.는 <xref:System.GC.EndNoGCRegion%2A> 메서드는 런타임에서 현재 비 GC 지역 대기 시간 모드 경우. 즉, 호출 하면 안 <xref:System.GC.TryStartNoGCRegion%2A> 여러 번 (첫 번째 메서드 호출 후 후속 호출은 성공 하지 것입니다), 호출을 기대할 수 없습니다 및 <xref:System.GC.EndNoGCRegion%2A> 해 서 첫 번째 호출에 성공 하려면 <xref:System.GC.TryStartNoGCRegion%2A> 성공 합니다.  
  
 호출 하 여 비 GC 지역 대기 시간 모드를 종료는 <xref:System.GC.EndNoGCRegion%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="totalSize" />가 임시 세그먼트 크기를 초과합니다.</exception>
        <exception cref="T:System.InvalidOperationException">프로세스가 이미 비 GC 지역 대기 시간 모드에 있습니다.</exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
        <Parameter Name="lohSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="totalSize">가비지 수집을 트리거하지 않고 할당할 메모리 양(바이트)입니다. <c>totalSize</c> – <c>lohSize</c>는 임시 세그먼트 크기보다 작거나 같아야 합니다. 임시 세그먼트 크기에 대한 자세한 내용은 [가비지 컬렉션 기본 사항](~/docs/standard/garbage-collection/fundamentals.md) 문서에서 "임시 세대 및 세그먼트" 섹션을 참조하세요.</param>
        <param name="lohSize">큰 개체 힙(LOH) 할당용으로 사용하는 <c>totalSize</c>의 바이트 수입니다.</param>
        <summary>큰 개체 힙 및 작은 개체 힙에 지정된 양의 메모리를 사용할 수 있는 경우 중요한 경로를 실행하는 동안에는 가비지 수집이 허용되지 않습니다.</summary>
        <returns>
          런타임이 필요한 메모리 양을 커밋할 수 있고 가비지 수집기를 비 GC 지역 대기 시간 모드에서 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%29> 메서드는 앱 코드의 중요 한 영역에서 실행 하는 동안 가비지 수집을 허용 하지 않는 비 GC 지역 대기 시간 모드에는 가비지 수집기를 배치 하려고 합니다.  런타임에서 처음 요청된 된 양의 메모리를 할당할 수 없는 경우 가비지 수집기가 추가 메모리를 확보 하기 위해 전체 차단 가비지 수집을 수행 합니다. 가비지 수집기가 비 GC 지역 대기 시간 모드를 할당할 수는 `lohSize` LOH에 대 한 및 `totalSize` – `lohSize` 작은 개체 힙 (SOH)에 대 한 합니다.  
  
 `lohSize` LOH에 대 한 중요 한 경로에서 발생 하는 모든 메모리 할당을 처리할 수 있을 만큼 크기가 커야 하 고 `totalSize` – `lohSize` SOH에 대 한 중요 한 경로에서 발생 하는 모든 메모리 할당을 처리할 수 있을 만큼 크기가 커야 합니다. 대신 응용 프로그램의 실행은 할당 뿐만 아니라 응용 프로그램에의 한 할당이 포함 되어 있습니다.  
  
> [!IMPORTANT]
>  에 대 한 호출을 중첩 시킬 수 없습니다는 <xref:System.GC.TryStartNoGCRegion%2A> 메서드를 호출 해야 합니다.는 <xref:System.GC.EndNoGCRegion%2A> 메서드는 런타임에서 현재 비 GC 지역 대기 시간 모드 경우. 즉, 호출 하면 안 <xref:System.GC.TryStartNoGCRegion%2A> 여러 번 (첫 번째 메서드 호출 후 후속 호출은 성공 하지 것입니다), 호출을 기대할 수 없습니다 및 <xref:System.GC.EndNoGCRegion%2A> 해 서 첫 번째 호출에 성공 하려면 <xref:System.GC.TryStartNoGCRegion%2A> 성공 합니다.  
  
 호출 하 여 비 GC 지역 대기 시간 모드를 종료는 <xref:System.GC.EndNoGCRegion%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="totalSize" /> – <paramref name="lohSize" />가 임시 세그먼트 크기를 초과합니다.</exception>
        <exception cref="T:System.InvalidOperationException">프로세스가 이미 비 GC 지역 대기 시간 모드에 있습니다.</exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
        <Parameter Name="lohSize" Type="System.Int64" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="totalSize">가비지 수집을 트리거하지 않고 할당할 메모리 양(바이트)입니다. <c>totalSize</c> – <c>lohSize</c>는 임시 세그먼트 크기보다 작거나 같아야 합니다. 임시 세그먼트 크기에 대한 자세한 내용은 [가비지 컬렉션 기본 사항](~/docs/standard/garbage-collection/fundamentals.md) 문서에서 "임시 세대 및 세그먼트" 섹션을 참조하세요.</param>
        <param name="lohSize">큰 개체 힙(LOH) 할당용으로 사용하는 <c>totalSize</c>의 바이트 수입니다.</param>
        <param name="disallowFullBlockingGC">
          가비지 수집기가 처음에 작은 개체 힙(SOH) 및 LOH에서 지정된 메모리를 할당할 수 없는 경우 전체 차단 가비지 수집을 생략하려면 <see langword="true" />이고, 그렇지 않은 경우 <see langword="false" />입니다.</param>
        <summary>큰 개체 힙 및 작은 개체 힙에 지정된 양의 메모리를 사용할 수 있는 경우 중요한 경로를 실행하는 동안 가비지 수집이 허용되지 않고, 초기에 사용할 수 있는 메모리가 충분하지 않은 경우 가비지 수집기가 전체 차단 가비지 수집 수행 여부를 제어합니다.</summary>
        <returns>
          런타임이 필요한 메모리 양을 커밋할 수 있고 가비지 수집기를 비 GC 지역 대기 시간 모드에서 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%2CSystem.Boolean%29> 메서드는 앱 코드의 중요 한 영역에서 실행 하는 동안 가비지 수집을 허용 하지 않는 비 GC 지역 대기 시간 모드에는 가비지 수집기를 배치 하려고 합니다.  런타임에서 처음 요청된 된 양의 메모리를 할당할 수 없는 경우와 `disallowFullBlockingGC` 인수가 `false`, 가비지 수집기 추가 메모리를 확보 하기 위해 전체 차단 가비지 컬렉션 수행; 그렇지 않으면 할당이 실패 하 고 메서드가 반환 `false`합니다. 가비지 수집기가 비 GC 지역 대기 시간 모드를 할당할 수는 `lohSize` LOH에 대 한 및 `totalSize` – `lohSize` 작은 개체 힙 (SOH)에 대 한 합니다.  
  
 `lohSize` LOH에 대 한 중요 한 경로에서 발생 하는 모든 메모리 할당을 처리할 수 있을 만큼 크기가 커야 하 고 `totalSize` – `lohSize` SOH에 대 한 중요 한 경로에서 발생 하는 모든 메모리 할당을 처리할 수 있을 만큼 크기가 커야 합니다. 대신 응용 프로그램의 실행은 할당 뿐만 아니라 응용 프로그램에의 한 할당이 포함 되어 있습니다.  
  
 설정 `disallowFullBlockingGC` 를 `true` 처음 사용 가능한 메모리가 부족 한 경우 컬렉션에 대 한 전체 차단 가비지를 방지 하기 위해 부하 분산 시나리오에에서 가장 유용한은: 시스템으로 요청을 수락할 준비가 반환 하는 경우 자체 보고 메서드와이 메서드를 호출할 수 있습니다 `true`를 반환 하는 경우 다른 시스템에 요청을 리디렉션하는 부하 분산 장치가 있어야 하 고 `false`합니다. 호출 하 여 요청을 처리 하지 않는 경우에 다음 전체 차단 가비지 수집을 수행할 수 있는 것은 <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> 메서드.  
  
> [!IMPORTANT]
>  에 대 한 호출을 중첩 시킬 수 없습니다는 <xref:System.GC.TryStartNoGCRegion%2A> 메서드를 호출 해야 합니다.는 <xref:System.GC.EndNoGCRegion%2A> 메서드는 런타임에서 현재 비 GC 지역 대기 시간 모드 경우. 즉, 호출 하면 안 <xref:System.GC.TryStartNoGCRegion%2A> 여러 번 (첫 번째 메서드 호출 후 후속 호출은 성공 하지 것입니다), 호출을 기대할 수 없습니다 및 <xref:System.GC.EndNoGCRegion%2A> 해 서 첫 번째 호출에 성공 하려면 <xref:System.GC.TryStartNoGCRegion%2A> 성공 합니다.  
  
 호출 하 여 비 GC 지역 대기 시간 모드를 종료는 <xref:System.GC.EndNoGCRegion%2A> 메서드.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="totalSize" /> – <paramref name="lohSize" />가 임시 세그먼트 크기를 초과합니다.</exception>
        <exception cref="T:System.InvalidOperationException">프로세스가 이미 비 GC 지역 대기 시간 모드에 있습니다.</exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCApproach">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>공용 언어 런타임에 의한 전체 차단 가비지 컬렉션이 임박하고 있는지 여부를 확인하기 위한 등록된 알림의 상태를 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>공용 언어 런타임에 의한 전체 차단 가비지 컬렉션이 임박하고 있는지 여부를 확인하기 위한 등록된 알림의 상태를 반환합니다.</summary>
        <returns>등록된 가비지 컬렉션 알림의 상태입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.GCNotificationStatus> 열거형을 사용 하 여 등록 된 현재 가비지 컬렉션 알림의 상태를 확인 하려면이 메서드에서 반환 되는 <xref:System.GC.RegisterForFullGCNotification%2A> 메서드. 사용할 수도 있습니다는 <xref:System.GC.WaitForFullGCComplete%2A> 전체 가비지 컬렉션이 완료 되었는지 여부를 확인 하는 메서드.  
  
 열거형 반환 하는 경우 <xref:System.GCNotificationStatus.Succeeded>, 다른 추가 개체에서 할당 되 고와 직접 컬렉션을 실행 하는 등 작업을 수행할 수 있습니다는 <xref:System.GC.Collect%2A> 메서드. Note 알림을 전체 가비지 수집이 발생 하는지, 조건에는 전체 가비지 수집을 편리 하 게 구성 된 임계값에 도달 했습니다 하을 보장 하지 않습니다.  
  
 이 메서드를 가져올 가비지 컬렉션 알림이 무기한 대기 합니다. 알림을 가져올 수 없는 경우 반환할 메서드에 대 한 제한 시간을 지정 하려는 경우 사용 하 여는 <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> 메서드 오버 로드 합니다. 제한 시간을 지정 하지 않고이 메서드를 호출 하는 경우 호출할 수 있습니다는 <xref:System.GC.CancelFullGCNotification%2A> 메서드 기본 설정 보다 오래 대기 중인 경우.  
  
 이 메서드를 호출 하 여 따라야는 <xref:System.GC.WaitForFullGCComplete%2A> 메서드를 전체 가비지 컬렉션이 완료 되었는지 확인 합니다. 확정 되지 않은 결과 하면이 메서드만 호출 합니다.  
  
   
  
## Examples  
 다음 예제에서는 한 전체 차단 가비지 수집이 임박 있는지 여부를 확인 하려면이 메서드를 사용 하는 방법을 보여 줍니다. 알림의 상태 될 때마다 <xref:System.GCNotificationStatus.Succeeded>, 사용자 지정 메서드 `OnFullGCApproachNotify` 근접 컬렉션에 대 한 응답으로 작업을 수행 하기 위해 호출 됩니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부 [가비지 수집 알림](~/docs/standard/garbage-collection/notifications.md) 항목입니다.  
  
 [!code-cpp[GCNotification#3](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#3)]
 [!code-csharp[GCNotification#3](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#3)]
 [!code-vb[GCNotification#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">알림 상태를 가져올 때까지 기다릴 시간의 길이입니다. 무한정 기다리려면 -1을 지정합니다.</param>
        <summary>공용 언어 런타임에 의한 전체 차단 가비지 컬렉션이 임박하고 있는지 여부를 확인하기 위한 등록된 알림의 상태를 지정된 제한 시간 내에 반환합니다.</summary>
        <returns>등록된 가비지 컬렉션 알림의 상태입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.GCNotificationStatus> 열거형을 사용 하 여 등록 된 현재 가비지 컬렉션 알림의 상태를 확인 하려면이 메서드에서 반환 되는 <xref:System.GC.RegisterForFullGCNotification%2A> 메서드. 사용할 수도 있습니다는 <xref:System.GC.WaitForFullGCComplete%2A> 전체 가비지 컬렉션이 완료 되었는지 여부를 확인 하는 메서드.  
  
 이 메서드가 반환 될 때마다 가비지 수집 알림 상태를 얻은 지정 된 값에 관계 없이 즉시 `millisecondsTimeout`합니다. 가비지 수집 알림 상태 하기 전에 가져오지 경우 `millisecondsTimeout` 시간 초과,이 메서드가 반환 <xref:System.GCNotificationStatus.NotApplicable>합니다.  
  
 열거형 반환 하는 경우 <xref:System.GCNotificationStatus.Succeeded>, 다른 추가 개체에서 할당 되 고와 직접 컬렉션을 실행 하는 등 작업을 수행할 수 있습니다는 <xref:System.GC.Collect%2A> 메서드. Note 알림을 전체 가비지 수집이 발생 하는지, 조건에는 전체 가비지 수집을 편리 하 게 구성 된 임계값에 도달 했습니다 하을 보장 하지 않습니다.  
  
 호출할 수 있습니다는 <xref:System.GC.CancelFullGCNotification%2A> 메서드에 시간 제한 기간이 경과할 때까지 기다리는 수 없습니다.  
  
 이 메서드를 호출 하 여 따라야는 <xref:System.GC.WaitForFullGCComplete%2A> 메서드를 전체 가비지 컬렉션이 완료 되었는지 확인 합니다. 확정 되지 않은 결과 하면이 메서드만 호출 합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="millisecondsTimeout" />는 음수가 아니거나 <see cref="F:System.Int32.MaxValue" /> 또는 -1보다 작거나 같아야 합니다.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCComplete">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>공용 언어 런타임에 의한 전체 차단 가비지 컬렉션이 완료되었는지 여부를 확인하기 위한 등록된 알림의 상태를 반환합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>공용 언어 런타임에 의한 전체 차단 가비지 컬렉션이 완료되었는지 여부를 확인하기 위한 등록된 알림의 상태를 반환합니다.</summary>
        <returns>등록된 가비지 컬렉션 알림의 상태입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.GCNotificationStatus> 열거형을 사용 하 여 등록 된 현재 가비지 컬렉션 알림의 상태를 확인 하려면이 메서드에서 반환 되는 <xref:System.GC.RegisterForFullGCNotification%2A> 메서드. 사용할 수도 있습니다는 <xref:System.GC.WaitForFullGCApproach%2A> 메서드는 전체 가비지 컬렉션이 임박 인지 여부를 확인 합니다.  
  
 열거형이 반환 될 때 <xref:System.GCNotificationStatus.Succeeded>, 작업을 다시 시작 된 컬렉션 수를 얻는 등의 작업을 수행할 수 있습니다는 <xref:System.GC.CollectionCount%2A> 속성입니다.  
  
 이 메서드를 가져올 가비지 컬렉션 알림이 무기한 대기 합니다. 알림을 가져올 수 없는 경우 반환할 메서드에 대 한 제한 시간을 지정 하려는 경우 사용 하 여는 <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> 메서드 오버 로드 합니다. 제한 시간을 지정 하지 않고이 메서드를 호출 하는 경우 호출할 수 있습니다는 <xref:System.GC.CancelFullGCNotification%2A> 메서드 기본 설정 보다 오래 대기 중인 경우.  
  
 이 메서드 호출을 호출 하 여 앞에 있어야는 <xref:System.GC.WaitForFullGCApproach%2A> 메서드를 전체 가비지 컬렉션이 완료 되었는지 확인 합니다. 이 메서드만 호출 확정 되지 않은 결과 생성할 수 있습니다.  
  
   
  
## Examples  
 다음 예에서는 전체 가비지 컬렉션이 완료 되었는지 여부를 확인 하려면이 메서드를 사용 하는 방법을 보여 줍니다. 알림의 상태 될 때마다 <xref:System.GCNotificationStatus.Succeeded>, 사용자 지정 메서드 `OnFullGCCompletedNotify` 완료 된 컬렉션에 대 한 응답으로 작업을 수행 하기 위해 호출 됩니다. 이 코드 예제는에 대해 제공 된 큰 예제의 일부 [가비지 수집 알림](~/docs/standard/garbage-collection/notifications.md) 항목입니다.  
  
 [!code-cpp[GCNotification#4](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#4)]
 [!code-csharp[GCNotification#4](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#4)]
 [!code-vb[GCNotification#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout">알림 상태를 가져올 때까지 기다릴 시간의 길이입니다. 무한정 기다리려면 -1을 지정합니다.</param>
        <summary>공용 언어 런타임에 의한 전체 차단 가비지 컬렉션이 완료되었는지 여부를 확인하기 위한 등록된 알림의 상태를 지정된 제한 시간 내에 반환합니다.</summary>
        <returns>등록된 가비지 컬렉션 알림의 상태입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용 하 여는 <xref:System.GCNotificationStatus> 열거형을 사용 하 여 등록 된 현재 가비지 컬렉션 알림의 상태를 확인 하려면이 메서드에서 반환 되는 <xref:System.GC.RegisterForFullGCNotification%2A> 메서드. 사용할 수도 있습니다는 <xref:System.GC.WaitForFullGCApproach%2A> 메서드는 전체 가비지 컬렉션이 임박 인지 여부를 확인 합니다.  
  
 이 메서드가 반환 될 때마다 가비지 수집 알림 상태를 얻은 지정 된 값에 관계 없이 즉시 `millisecondsTimeout`합니다. 가비지 수집 알림 상태 하기 전에 가져오지 경우 `millisecondsTimeout` 시간 초과,이 메서드가 반환 <xref:System.GCNotificationStatus.NotApplicable>합니다.  
  
 열거형이 반환 될 때 <xref:System.GCNotificationStatus.Succeeded>, 작업을 다시 시작 된 컬렉션 수를 얻는 등의 작업을 수행할 수 있습니다는 <xref:System.GC.CollectionCount%2A> 속성입니다.  
  
 호출할 수 있습니다는 <xref:System.GC.CancelFullGCNotification%2A> 메서드에 시간 제한 기간이 경과할 때까지 기다리는 수 없습니다.  
  
 이 메서드 호출을 호출 하 여 앞에 있어야는 <xref:System.GC.WaitForFullGCApproach%2A> 메서드를 전체 가비지 컬렉션이 완료 되었는지 확인 합니다. 이 메서드만 호출 확정 되지 않은 결과 생성할 수 있습니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="millisecondsTimeout" />는 음수가 아니거나 <see cref="F:System.Int32.MaxValue" /> 또는 -1보다 작거나 같아야 합니다.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">직접 실행 호출자에 대 한 완전 신뢰 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 코드에서 사용할 수 없습니다.</permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="WaitForPendingFinalizers">
      <MemberSignature Language="C#" Value="public static void WaitForPendingFinalizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitForPendingFinalizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForPendingFinalizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitForPendingFinalizers ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitForPendingFinalizers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>종료자의 큐를 처리하는 스레드에서 해당 큐를 비울 때까지 현재 스레드를 일시 중단합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 가비지 수집기를 다시 사용할 수 있는 개체를 찾으면 개체의 종료 요청을 확인 하려면 각 개체를 검사 합니다. 개체 종료자를 구현 하 고 종료를 호출 하 여 비활성화 되지 않은 경우 <xref:System.GC.SuppressFinalize%2A>, 개체 종료 준비가 된 것으로 표시 된 개체의 목록에 배치 됩니다. 가비지 컬렉션이 <xref:System.Object.Finalize%2A> 목록에서 항목을 제거 하 고이 목록에 있는 개체에 대 한 메서드. 모든 종료자 될 때까지이 메서드 차단 완료 될 때까지 실행 합니다.  
  
 종료 자가 실행 스레드를 지정 하지 않으므로이 메서드가 종료 되지는입니다. 그러나 하는 동안 다른 스레드가이 스레드를 중단 될 수 있습니다는 <xref:System.GC.WaitForPendingFinalizers%2A> 메서드 진행 중입니다. 예를 들어 일정 시간 동안 대기 하 고이 스레드는 여전히 일시 중단 하는 경우 다음이 스레드를 중단 하는 다른 스레드를 시작할 수 있습니다.  
  
   
  
## Examples  
 다음 예제에서는 사용 하는 방법을 <xref:System.GC.WaitForPendingFinalizers%2A> 메서드 수집 된 모든 개체의 종료가 완료 될 때까지 현재 스레드를 일시 중단 합니다.  
  
 [!code-cpp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CS/class1.cs#1)]
 [!code-vb[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>