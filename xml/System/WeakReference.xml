<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WeakReference.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c0d4836429712734d47bb9c53ee59e9a0dd4d9f0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0d4836429712734d47bb9c53ee59e9a0dd4d9f0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.WeakReference">
          <source>Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.</source>
          <target state="translated">가비지 컬렉션에 의한 개체 회수를 허용하면서 개체를 참조하는 약한 참조를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>A weak reference allows the garbage collector to collect an object while still allowing an application to access the object.</source>
          <target state="translated">약한 참조는 가비지 수집기는 개체에 액세스 하려면 응용 프로그램 허용 하면서 개체를 수집할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>If you need the object, you can still obtain a strong reference to it and prevent it from being collected.</source>
          <target state="translated">개체를 해야 하는 경우에 대 한 강한 참조 하 고 수 있습니다 수집 되지 않도록 방지 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>For more information about how to use short and long weak references, see <bpt id="p1">[</bpt>Weak References<ept id="p1">](~/docs/standard/garbage-collection/weak-references.md)</ept>.</source>
          <target state="translated">긴 약한 참조 및 짧은 사용 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>약한 참조<ept id="p1">](~/docs/standard/garbage-collection/weak-references.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The following example demonstrates how you can use weak references to maintain a cache of objects as a resource for an application.</source>
          <target state="translated">다음 예제에서는 약한 참조를 사용 하 여 응용 프로그램에 대 한 리소스로 개체의 캐시를 유지 관리 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The cache is constructed using an <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> of <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> objects keyed by an index value.</source>
          <target state="translated">캐시를 사용 하 여 생성 되는 <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> 의 <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> 키 인덱스 값으로 지정 된 개체입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The <ph id="ph1">&lt;xref:System.WeakReference.Target%2A&gt;</ph> property for the <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> objects is an object in a byte array that represents data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.WeakReference.Target%2A&gt;</ph> 속성에 대 한는 <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> 개체는 데이터를 나타내는 바이트 배열에 있는 개체입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The example randomly accesses objects in the cache.</source>
          <target state="translated">이 예제에서는 캐시의 개체에 임의로 액세스합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>If an object is reclaimed for garbage collection, a new data object is regenerated; otherwise, the object is available to access because of the weak reference.</source>
          <target state="translated">새 데이터 개체가 가비지 수집에 대 한 개체 회수를 다시 생성 됩니다. 그렇지 않으면 개체를 약한 참조에 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">비관리 코드를 호출할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>Demand value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>; Permission value: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">요청 값: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>; 권한 값: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.WeakReference">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object)">
          <source>The object to track or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">추적할 개체 또는 <ph id="ph1">&lt;see langword="null" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class, referencing the specified object.</source>
          <target state="translated">지정된 개체를 참조하여 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object)">
          <source>This constructor creates a short weak reference to <ph id="ph1">`target`</ph>.</source>
          <target state="translated">이 생성자에 대 한 짧은 약한 참조를 만듭니다 <ph id="ph1">`target`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>An object to track.</source>
          <target state="translated">추적할 개체입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>Indicates when to stop tracking the object.</source>
          <target state="translated">개체 추적을 중지할 시기를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the object is tracked after finalization; if <ph id="ph2">&lt;see langword="false" /&gt;</ph>, the object is only tracked until finalization.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>일 경우 종료 후 개체를 추적하고, <ph id="ph2">&lt;see langword="false" /&gt;</ph>일 경우 종료할 때까지만 개체를 추적합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class, referencing the specified object and using the specified resurrection tracking.</source>
          <target state="translated">지정된 개체를 참조하고 지정된 재활성화 추적을 사용하여 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>If <ph id="ph1">`trackResurrection`</ph> is <ph id="ph2">`false`</ph>, a short weak reference is created.</source>
          <target state="translated">경우 <ph id="ph1">`trackResurrection`</ph> 은 <ph id="ph2">`false`</ph>, 짧은 약한 참조가 만들어집니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>If <ph id="ph1">`trackResurrection`</ph> is <ph id="ph2">`true`</ph>, a long weak reference is created.</source>
          <target state="translated">경우 <ph id="ph1">`trackResurrection`</ph> 은 <ph id="ph2">`true`</ph>, 긴 약한 참조가 만들어집니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>The following example creates a cache of data objects with short weak references.</source>
          <target state="translated">다음 예제에서는 간단한 약한 참조와 데이터 개체의 캐시를 만듭니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>This example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> class.</source>
          <target state="translated">이 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>An object that holds all the data needed to serialize or deserialize the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 개체를 serialize 또는 deserialize하는 데 필요한 모든 데이터를 보유한 개체입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>(Reserved) Describes the source and destination of the serialized stream specified by <bpt id="p1">&lt;c&gt;</bpt>info<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">(예약됨) <bpt id="p1">&lt;c&gt;</bpt>info<ept id="p1">&lt;/c&gt;</ept>에서 지정한 serialize된 스트림의 소스 및 대상을 설명합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class, using deserialized data from the specified serialization and stream objects.</source>
          <target state="translated">지정된 serialization 및 스트림 개체의 deserialize된 데이터를 사용하여 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved, and does not currently participate in this operation.</source>
          <target state="translated"><ph id="ph1">`context`</ph> 매개 변수는 예약 되며이 작업에 관여 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.WeakReference.Finalize">
          <source>Discards the reference to the target represented by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 개체가 나타내는 대상에 대한 참조를 삭제합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>An object that holds all the data needed to serialize or deserialize the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 개체를 serialize 또는 deserialize하는 데 필요한 모든 데이터를 보유한 개체입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>(Reserved) The location where serialized data is stored and retrieved.</source>
          <target state="translated">(예약됨) Serialize된 데이터가 저장 및 검색되는 위치입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with all the data needed to serialize the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 개체를 serialize하는 데 필요한 모든 데이터로 <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> 개체를 채웁니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method stores all the information in <ph id="ph1">`info`</ph> necessary to serialize the current <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> object.</source>
          <target state="translated">이 메서드는에 있는 모든 정보를 저장 <ph id="ph1">`info`</ph> 현재 serialize 하는 데 필요한 <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved and is not currently used in the execution of this method.</source>
          <target state="translated"><ph id="ph1">`context`</ph> 매개 변수는 예약 되어 있으며이 메서드의 실행에서 현재 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.WeakReference.IsAlive">
          <source>Gets an indication whether the object referenced by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object has been garbage collected.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 개체에서 참조하는 개체가 가비지 수집되었는지 여부를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.IsAlive">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object referenced by the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object has not been garbage collected and is still accessible; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> 개체에서 참조하는 개체가 가비지 수집되지 않았지만 계속 액세스할 수 있으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.IsAlive">
          <source>Because an object could potentially be reclaimed for garbage collection immediately after the <ph id="ph1">&lt;xref:System.WeakReference.IsAlive%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>, using this property is not recommended unless you are testing only for a <ph id="ph3">`false`</ph> return value.</source>
          <target state="translated">가비지 수집에 대 한 개체를 회수할 수 가능성이 있으므로 바로 뒤의 <ph id="ph1">&lt;xref:System.WeakReference.IsAlive%2A&gt;</ph> 속성에서 반환 <ph id="ph2">`true`</ph>에 대해서만 테스트 중인 경우가 아니면이 속성을 사용 하 여 권장 되지 않습니다는 <ph id="ph3">`false`</ph> 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.WeakReference.Target">
          <source>Gets or sets the object (the target) referenced by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 개체에서 참조하는 개체(대상)를 가져오거나 설정합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> if the object referenced by the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object has been garbage collected; otherwise, a reference to the object referenced by the current <ph id="ph3">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> 개체에서 참조하는 개체가 가비지 수집되었으면 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see cref="T:System.WeakReference" /&gt;</ph> 개체에서 참조하는 개체에 대한 참조입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>After setting this property to the target object, make sure that there are no other strong references to the object; otherwise, it will not be collected.</source>
          <target state="translated">대상 개체에이 속성을 설정한 후 개체에 다른 강력한 참조가 있는지 확인 그렇지 않으면 해당 수집 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>The following example tries to obtain an object from a cache of objects with weak references.</source>
          <target state="translated">다음 예제에서는 약한 참조를 사용 하 여 개체의 캐시에서 개체를 가져오려고 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>If the object was reclaimed for garbage collection, a new object is generated.</source>
          <target state="translated">가비지 수집에 대 한 개체 회수 된, 새 개체 생성 됩니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>This example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> class.</source>
          <target state="translated">이 예제는에 대해 제공 된 큰 예제의 일부는 <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.WeakReference.Target">
          <source>The reference to the target object is invalid.</source>
          <target state="translated">대상 개체에 대한 참조가 잘못되었습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.WeakReference.Target">
          <source>This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.</source>
          <target state="translated">값이 null 참조인 경우 또는 설정 작업 중 개체가 종료된 경우, 이 속성을 설정하는 동안 이 예외가 throw될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.WeakReference.TrackResurrection">
          <source>Gets an indication whether the object referenced by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object is tracked after it is finalized.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 개체에서 참조되는 개체가 종료된 후 추적되는지 여부를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.TrackResurrection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object refers to is tracked after finalization; or <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the object is only tracked until finalization.</source>
          <target state="translated">현재 <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> 개체에서 참조하는 개체가 종료된 후 추적되면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 종료될 때까지만 개체가 추적되면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.TrackResurrection">
          <source>If <ph id="ph1">`true`</ph>, the weak reference is a long weak reference and <ph id="ph2">`true`</ph> was specified for the <ph id="ph3">`trackResurrection`</ph> parameter in the <ph id="ph4">&lt;xref:System.WeakReference&gt;</ph> constructor.</source>
          <target state="translated">경우 <ph id="ph1">`true`</ph>, 약한 참조는 긴 약한 참조 및 <ph id="ph2">`true`</ph> 에 대해 지정 된는 <ph id="ph3">`trackResurrection`</ph> 에서 매개 변수는 <ph id="ph4">&lt;xref:System.WeakReference&gt;</ph> 생성자입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>