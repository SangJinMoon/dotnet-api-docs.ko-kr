<Type Name="TimeZoneInfo+AdjustmentRule" FullName="System.TimeZoneInfo+AdjustmentRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1eeea4982e62144e434859e5e89eb964936bd1a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36428026" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TimeZoneInfo.AdjustmentRule : IEquatable&lt;TimeZoneInfo.AdjustmentRule&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi serializable sealed beforefieldinit TimeZoneInfo/AdjustmentRule extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo/AdjustmentRule&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo.AdjustmentRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo.AdjustmentRule&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo.AdjustmentRule), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public: ref class TimeZoneInfo::AdjustmentRule sealed : IEquatable&lt;TimeZoneInfo::AdjustmentRule ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo.AdjustmentRule = class&#xA;    interface IEquatable&lt;TimeZoneInfo.AdjustmentRule&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo+AdjustmentRule&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides information about a time zone adjustment, such as the transition to and from daylight saving time.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.AdjustmentRule> 클래스 정의 유효한 시작 및 종료 날짜는 특정 시간 변경 하 고 일광 절약 시간에서 각각 뿐만 아니라 델타 (기준인를 조정 하면 표준 시간대의 표준 시간을 변경 하려면 정확한 크기). 또한 두 개의 속성을 반환할 <xref:System.TimeZoneInfo.TransitionTime> 하 고 표준 시간에서 각 전환이 발생 하는 시기를 정의 하는 개체입니다.  
  
> [!NOTE]
>  인스턴스는 <xref:System.TimeZoneInfo.AdjustmentRule> 클래스는 변경할 수 없습니다. 개체를 만든 후에 해당 값을 수정할 수 없습니다.  
  
 만들려면는 <xref:System.TimeZoneInfo.AdjustmentRule> 개체를 호출 하는 `static` (`Shared` Visual basic에서) <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A?displayProperty=nameWithType> 메서드. 배열을 그런 다음 입력 수 <xref:System.TimeZoneInfo.AdjustmentRule> 를 오버 로드 중 두 개체는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 메서드. 특정 표준 시간대의 조정 규칙을 검색 하려면 해당 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> 의 배열을 반환 하는 메서드, <xref:System.TimeZoneInfo.AdjustmentRule> 개체입니다.  
  
   
  
## Examples  
 다음 예제에서는 로컬 시스템에 정의 된 모든 표준 시간대를 검색 하 고의 조정 규칙에 대 한 전체 정보를 표시 합니다.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 다음은 예제에서 생성 되는 출력의 일부분입니다. 실제 출력 예제가 실행 될 날짜 및 운영 체제에 따라 달라 집니다.  
  
```  
Morocco Standard Time Adjustment rules  
   Adjustment rule #1  
      Start Date: Tuesday, January 01, 2008  
      End Date: Wednesday, December 31, 2008  
      Time Change: 1:00 hours  
      Annual Start: The Last Saturday of May at 11:59 PM  
      Annual End: The Last Sunday of August at 11:59 PM  
   Adjustment rule #2  
      Start Date: Thursday, January 01, 2009  
      End Date: Thursday, December 31, 2009  
      Time Change: 1:00 hours  
      Annual Start: The Last Sunday of May at 11:59 PM  
      Annual End: The Third Thursday of August at 11:59 PM  
  
Coordinated Universal Time has no adjustment rules  
  
GMT Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 1:00 AM  
   Annual End: The Last Sunday of October at 2:00 AM  
  
Greenwich Standard Time has no adjustment rules  
  
W. Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central Europe Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Romance Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
Central European Standard Time Adjustment rules  
   Start Date: Monday, January 01, 0001  
   End Date: Friday, December 31, 9999  
   Time Change: 1:00 hours  
   Annual Start: The Last Sunday of March at 2:00 AM  
   Annual End: The Last Sunday of October at 3:00 AM  
  
W. Central Africa Standard Time has no adjustment rules  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName="CreateAdjustmentRule">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo.AdjustmentRule CreateAdjustmentRule (DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo.TransitionTime daylightTransitionStart, TimeZoneInfo.TransitionTime daylightTransitionEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo/AdjustmentRule CreateAdjustmentRule(valuetype System.DateTime dateStart, valuetype System.DateTime dateEnd, valuetype System.TimeSpan daylightDelta, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionStart, valuetype System.TimeZoneInfo/TransitionTime daylightTransitionEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateAdjustmentRule (dateStart As DateTime, dateEnd As DateTime, daylightDelta As TimeSpan, daylightTransitionStart As TimeZoneInfo.TransitionTime, daylightTransitionEnd As TimeZoneInfo.TransitionTime) As TimeZoneInfo.AdjustmentRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo::AdjustmentRule ^ CreateAdjustmentRule(DateTime dateStart, DateTime dateEnd, TimeSpan daylightDelta, TimeZoneInfo::TransitionTime daylightTransitionStart, TimeZoneInfo::TransitionTime daylightTransitionEnd);" />
      <MemberSignature Language="F#" Value="static member CreateAdjustmentRule : DateTime * DateTime * TimeSpan * TimeZoneInfo.TransitionTime * TimeZoneInfo.TransitionTime -&gt; TimeZoneInfo.AdjustmentRule" Usage="System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule (dateStart, dateEnd, daylightDelta, daylightTransitionStart, daylightTransitionEnd)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateStart" Type="System.DateTime" />
        <Parameter Name="dateEnd" Type="System.DateTime" />
        <Parameter Name="daylightDelta" Type="System.TimeSpan" />
        <Parameter Name="daylightTransitionStart" Type="System.TimeZoneInfo+TransitionTime" />
        <Parameter Name="daylightTransitionEnd" Type="System.TimeZoneInfo+TransitionTime" />
      </Parameters>
      <Docs>
        <param name="dateStart">The effective date of the adjustment rule. If the value of the <c>dateStart</c> parameter is <see langword="DateTime.MinValue.Date" />, this is the first adjustment rule in effect for a time zone.</param>
        <param name="dateEnd">The last date that the adjustment rule is in force. If the value of the <c>dateEnd</c> parameter is <see langword="DateTime.MaxValue.Date" />, the adjustment rule has no end date.</param>
        <param name="daylightDelta">The time change that results from the adjustment. This value is added to the time zone's <see cref="P:System.TimeZoneInfo.BaseUtcOffset" /> property to obtain the correct daylight offset from Coordinated Universal Time (UTC). This value can range from -14 to 14.</param>
        <param name="daylightTransitionStart">An object that defines the start of daylight saving time.</param>
        <param name="daylightTransitionEnd">An object that defines the end of daylight saving time.</param>
        <summary>Creates a new adjustment rule for a particular time zone.</summary>
        <returns>An object that represents the new adjustment rule.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 사용자 지정 표준 시간대에 대 한 하나 이상의 조정 규칙을 만들려면이 메서드를 사용할 수 있습니다. 배열에서 <xref:System.TimeZoneInfo.AdjustmentRule> 이 메서드를 호출 하 여 반환 되는 개체 변수로 전달할 수 있습니다는 `adjustmentRules` 두 오버 로드 매개 변수는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 메서드. 이 예제에서는이 절차를 보여 줍니다.  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> 메서드 새 표준 시간대에 대 한 조정 규칙을 정의 하는 데에 사용할 수 있습니다; 기존 표준 시간대는 조정 규칙을 수정 하는 데 사용 될 수 없습니다.  
  
 `dateStart` 및 `dateEnd` 매개 변수는 시간 구성 요소가 없는 날짜 값 이어야 합니다. 또는 <xref:System.ArgumentException> throw 됩니다. 시간 구성 요소를 검색 하 여 제거할 수는 <xref:System.DateTime> 값을 날짜 및 시간의 <xref:System.DateTime.Date%2A> 다음 문에서 같이 속성:  
  
```  
DateTime.MinValue.Date  
DateTime.MaxValue.Date  
DateTime.Now.Date   
dateVariable.Date  
```  
  
 <xref:System.DateTime.Kind%2A> 의 속성은 `dateStart` 및 `dateEnd` 매개 변수 여야 <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>합니다.  
  
 값은 `daylightDelta` 매개 변수의 범위는-14에서 14입니다. 합계는 `daylightDelta` 매개 변수 및 `baseUtcOffset` 호출에 사용 되는 매개 변수는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> 메서드 14에서 14도 사이 여야 합니다 또는 <xref:System.InvalidTimeZoneException> throw 됩니다.  
  
> [!NOTE]
>  `daylightDelta` 매개 변수는 표준 시간대의 표준 시간에서 일광 절약 시간 사이의 차이 정의 합니다. 표준 시간대의 표준 시간 오프셋을 utc (협정 세계시)를 정의 하는 것이 아닙니다. <xref:System.TimeZoneInfo> 클래스에서는 측정 된 UTC에서이 오프셋이 표준 시간대의 수명 동안 일정 이라고 가정 합니다. 조정 규칙을 응용 프로그램에 의해 발생 시 키 지는 UTC에서의 표준 시간대 오프셋의 변경을 반영 하려면 사용 해야 합니다는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 새 사용자 지정 표준 시간대를 만드는 메서드를 합니다.  
  
   
  
## Examples  
 다음 예제에서는 대체 중앙 표준 시간대를 만듭니다 및 1976 1986, 2006-1987, 및 2007 기간에 대 한와 같거나 이보다 뒤에 세 가지 조정 규칙을 정의 합니다. 이러한 규칙은 제네릭에 추가 됩니다 <xref:System.Collections.Generic.List%601> 개체 요소에 복사 됩니다는 <xref:System.TimeZoneInfo.AdjustmentRule> 배열입니다. 에 대 한 호출에이 배열을 사용 하 여는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%29?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#1)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateStart" /> or <paramref name="dateEnd" /> parameter does not equal <see cref="F:System.DateTimeKind.Unspecified" />.  -or-  The <paramref name="daylightTransitionStart" /> parameter is equal to the <paramref name="daylightTransitionEnd" /> parameter.  -or-  The <paramref name="dateStart" /> or <paramref name="dateEnd" /> parameter includes a time of day value.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dateEnd" /> is earlier than <paramref name="dateStart" />.  -or-  <paramref name="daylightDelta" /> is less than -14 or greater than 14.  -or-  The <see cref="P:System.TimeSpan.Milliseconds" /> property of the <paramref name="daylightDelta" /> parameter is not equal to 0.  -or-  The <see cref="P:System.TimeSpan.Ticks" /> property of the <paramref name="daylightDelta" /> parameter does not equal a whole number of seconds.</exception>
      </Docs>
    </Member>
    <Member MemberName="DateEnd">
      <MemberSignature Language="C#" Value="public DateTime DateEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateEnd As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateEnd { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateEnd : DateTime" Usage="System.TimeZoneInfo.AdjustmentRule.DateEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the date when the adjustment rule ceases to be in effect.</summary>
        <value>조정 규칙의 종료 날짜를 나타내는 <see cref="T:System.DateTime" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값은 <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> 속성이 시간 부분이 없는 날짜 값입니다.  
  
 할당할 수 있으므로 현재 조정 규칙의 종료 날짜는 일반적으로 알 수 없는 `DateTime.MaxValue.Date` 에 <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> 속성 사용자 지정 조정 규칙을 만들 때.  
  
> [!IMPORTANT]
>  불가피 불가피 한이 없는 경우 표준 시간대에서 표준 시간은 시간 간격 내에서 실행 되도록 조정 규칙의 종료 날짜를 정의 해야 합니다. 불가피 한이 없는 경우에는 시간대에서 일광 절약 시간제 시간 간격 내에서 실행 되도록 조정 규칙의 종료 날짜를 정의 해야 합니다. 예를 들어 3 월의 세 번째 일요일에 일광 절약 시간에서 표준 시간대의 전환이 발생 일광 절약 시간 전환 년 10 월의 첫 번째 일요일에 발생 하는 경우 조정 규칙의 유효한 종료 날짜 되지 않아야 특정 12 월 31 일 연도, 해당 날짜 일광 절약 시간의 기간 내 발생 하기 때문입니다.  
  
 기본적으로 Windows XP에서 레지스트리를 단일 조정 규칙 정의 끝 날짜를 12 월 31 일 금요일 9999 (값 `DateTime.MaxValue.Date`), 각 표준 시간대에 대 한 합니다. Windows Vista에서 레지스트리, 표준 시간대 United States에 대 한 두 개의 조정 규칙을 정의합니다.  
  
-   월요일, 1 월 1 일 0001 년 2006 년 12 월 31 일 일요일.  
  
-   1 월 1 한 일 월요일, 12 월 31 일 금요일 9999입니다.  
  
 즉, 표준 시간대 조정 규칙이 레지스트리에 저장 된 현재 표준 시간대와 관련 된 작업을 수행 하는 데 유용 하지만, 사용할 수 없습니다 안정적으로 기록 표준 시간대 정보를 검색 합니다. 기록 표준 시간대 인식 응용 프로그램에서 사용할 수 있는 여러 조정 규칙이 있는 사용자 지정 표준 시간대를 정의 하는 방법에 대 한 내용은 [하는 방법: 조정 규칙 표준 시간대 만들기](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 모든 로컬 컴퓨터의 시스템 레지스트리를 시작 하는 날짜와 종료 날짜의 조정 규칙의 정의 된 표준 시간대에 대 한 정보를 표시 합니다.  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DateStart">
      <MemberSignature Language="C#" Value="public DateTime DateStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DateStart As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime DateStart { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DateStart : DateTime" Usage="System.TimeZoneInfo.AdjustmentRule.DateStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the date when the adjustment rule takes effect.</summary>
        <value>조정 규칙이 적용되는 시기를 나타내는 <see cref="T:System.DateTime" /> 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 값은 <xref:System.TimeZoneInfo.AdjustmentRule.DateStart%2A> 속성이 시간 부분이 없는 날짜 값입니다. 에 특정 조정 규칙이 적용 되는 날짜를 정의 합니다.  (일반적으로 정의 하는 하나의 전환의을 일광 절약 시간 및 표준 시간으로 다시 하나의 전환을)는 전환 집합 발효로 이동 하는 날짜입니다. 예를 들어 2017 년 1 월 1에 영향을 주지 파일로 이동 조정 규칙을 제공 하을 3 월의 두 번째 일요일에 일광 절약 시간 전환에 대해 11 월의 첫 번째 일요일에 표준 시간으로 다시 전환에 대 한 됩니다. 조정 규칙의 시작 날짜를 첫 번째 전환의 날짜에 연결 되지 않은 참고 합니다.  
  
 할당할 수 있습니다 `DateTime.MinValue.Date` 에 <xref:System.TimeZoneInfo.AdjustmentRule.DateEnd%2A> 기록 표준 시간대 정보를 사용 하지 않아도 속성 표준 시간대 인식 응용 프로그램에서 사용 하기 위해 사용자 지정 조정 규칙을 만들 때.  
  
> [!IMPORTANT]
>  불가피 불가피 한이 없는 경우 표준 시간대에서 표준 시간은 시간 간격 내에서 실행 되도록 조정 규칙의 시작 날짜를 정의 해야 합니다. 불가피 한이 없는 경우에는 시간대에서 일광 절약 시간제 시간 간격 내에서 실행 되도록 조정 규칙의 시작 날짜를 정의 해야 합니다. 예를 들어 3 월의 세 번째 일요일에 일광 절약 시간에서 표준 시간대의 전환이 발생 일광 절약 시간 전환 년 10 월의 첫 번째 일요일에 발생 하는 경우 조정 규칙의 유효한 시작 날짜 되지 않아야 특정 년 1 월 1 연도, 해당 날짜 일광 절약 시간의 기간 내 발생 하기 때문입니다.  
  
 기본적으로 Windows XP의 레지스트리 해당 시작 날짜는 1 월 1 일 월요일 0001 하나의 조정 규칙을 정의 합니다 (값 `DateTime.MinValue.Date`), 각 표준 시간대에 대 한 합니다. Windows Vista에서 레지스트리, 표준 시간대 United States에 대 한 두 개의 조정 규칙을 정의합니다.  
  
-   월요일, 1 월 1 일 0001 년 2006 년 12 월 31 일 일요일.  
  
-   1 월 1 한 일 월요일, 12 월 31 일 금요일 9999입니다.  
  
 즉, 표준 시간대 조정 규칙이 레지스트리에 저장 된 현재 표준 시간대와 관련 된 작업을 수행 하는 데 유용 하지만, 사용할 수 없습니다 안정적으로 기록 표준 시간대 정보를 검색 합니다. 기록 표준 시간대 인식 응용 프로그램에서 사용할 수 있는 여러 조정 규칙이 있는 사용자 지정 표준 시간대를 정의 하는 방법에 대 한 내용은 [하는 방법: 조정 규칙 표준 시간대 만들기](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 모든 로컬 컴퓨터의 시스템 레지스트리를 시작 하는 날짜와 종료 날짜의 조정 규칙의 정의 된 표준 시간대에 대 한 정보를 표시 합니다.  
  
 [!code-csharp[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/cs/DateStart1.cs#1)]
 [!code-vb[System.TimeZoneInfo.AdjustmentRule.DateStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TimeZoneInfo.AdjustmentRule.DateStart/vb/DateStart1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightDelta">
      <MemberSignature Language="C#" Value="public TimeSpan DaylightDelta { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan DaylightDelta" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightDelta As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan DaylightDelta { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightDelta : TimeSpan" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightDelta" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the amount of time that is required to form the time zone's daylight saving time. This amount of time is added to the time zone's offset from Coordinated Universal Time (UTC).</summary>
        <value>조정 규칙의 결과로 표준 시간 변경에 추가할 시간을 나타내는 <see cref="T:System.TimeSpan" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 다음 수식은 표준 시간대의 일광 절약 시간을 정의합니다.  
  
```  
TimeZoneTime = BaseUtcOffset + DaylightDelta + UtcTime  
```  
  
 값은 <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> 속성 14 시간에서-14 시간 사이입니다.  
  
> [!NOTE]
>  <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> 속성 일광 절약 시간 표준 시간대의 표준 시간 사이의 차이 측정 합니다. 사항이 없으면 표준 시간대의 표준 오프셋의 변화에 따라 utc (협정 세계시)입니다. 표준 시간 오프셋이 UTC에서 변경 된 표준 시간대를 나타내기 위해 호출 해야 합니다는 <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> 새 표준 시간대를 만드는 메서드를 합니다.  
  
 가장 일반적인 값은 <xref:System.TimeZoneInfo.AdjustmentRule.DaylightDelta%2A> 속성은 1.0 시간입니다. 일광 절약 시간 조정 규칙을 적용 한 시간 표준 시간대의 utc (협정 세계시) 로부터의 오프셋을 증가합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionEnd">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionEnd" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionEnd As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionEnd { TimeZoneInfo::TransitionTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightTransitionEnd : TimeZoneInfo.TransitionTime" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets information about the annual transition from daylight saving time back to standard time.</summary>
        <value>일광 절약 시간에서 다시 표준 시간대의 표준 시간으로 연간 전환을 정의하는 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime> 에서 반환 된 개체는 <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> 고정 날짜 규칙 또는 표준 시간으로 반환에 대 한 부동 날짜 규칙 속성을 정의 합니다. 고정 날짜 규칙 월, 일 및 전환이 발생 하는 하루 중 시간을 제공 합니다. 부동 날짜 규칙은 월, 주, 일, 요일 및 전환이 발생 하는 하루 중 시간을 제공 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaylightTransitionStart">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.TransitionTime DaylightTransitionStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeZoneInfo/TransitionTime DaylightTransitionStart" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightTransitionStart As TimeZoneInfo.TransitionTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeZoneInfo::TransitionTime DaylightTransitionStart { TimeZoneInfo::TransitionTime get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightTransitionStart : TimeZoneInfo.TransitionTime" Usage="System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+TransitionTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets information about the annual transition from standard time to daylight saving time.</summary>
        <value>표준 시간대의 표준 시간에서 일광 절약 시간으로 연간 전환을 정의하는 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 개체입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.TransitionTime> 에서 반환 된 개체는 <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> 일광 절약 시간으로 고정 날짜 규칙 또는 전환에 대 한 부동 날짜 규칙 속성을 정의 합니다. 고정 날짜 규칙 월, 일 및 전환이 발생 하는 하루 중 시간을 제공 합니다. 부동 날짜 규칙은 월, 주, 일, 요일 및 전환이 발생 하는 시간을 제공 합니다.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo.AdjustmentRule other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo/AdjustmentRule other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo.AdjustmentRule) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo::AdjustmentRule ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo.AdjustmentRule -&gt; bool" Usage="adjustmentRule.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo+AdjustmentRule" />
      </Parameters>
      <Docs>
        <param name="other">The object to compare with the current object.</param>
        <summary>Determines whether the current <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> object is equal to a second <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> object.</summary>
        <returns>
          <see langword="true" /> if both <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> objects have equal values; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 두 개의 지 여부를 결정 <xref:System.TimeZoneInfo.AdjustmentRule> 개체가 같은지는 <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29> 메서드는 각 개체의 멤버 값을 비교 합니다. 개시 날짜, 동일한 델타 및 동일한 값을 포함 하는 경우 두 개의 조정 규칙 같은지는 <xref:System.TimeZoneInfo.TransitionTime> 에서 반환 된 개체의 <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart%2A> 및 <xref:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd%2A> 속성입니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.TimeZoneInfo.AdjustmentRule.Equals%28System.TimeZoneInfo.AdjustmentRule%29?displayProperty=nameWithType> 캐나다 및 멕시코 표준시에 대 한 설정과 중부 표준시에 대 한 조정 규칙을 비교 하는 메서드.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#2)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#2)]  
  
 이 코드는 다음과 같은 출력을 콘솔에 표시 합니다.  
  
```  
Comparing Central Standard Time rule for 1/1/0001 to 12/31/9999 with:  
   Canada Central Standard Time has no adjustment rules.  
   Mexican CST for 1/1/0001 to 12/31/9999: Equal  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="adjustmentRule.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serves as a hash function for hashing algorithms and data structures such as hash tables.</summary>
        <returns>A 32-bit signed integer that serves as the hash code for the current <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        <summary>Runs when the deserialization of a <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> object is completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The object to populate with data.</param>
        <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data that is required to serialize this object.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
  </Members>
</Type>