<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IndexOutOfRangeException.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5fa743ca2f45cda07f83e63ffd565711d31756eb5.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa743ca2f45cda07f83e63ffd565711d31756eb5</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IndexOutOfRangeException">
          <source>The exception that is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds.</source>
          <target state="translated">해당 범위 외부에 있는 인덱스를 사용하여 배열 또는 컬렉션의 요소에 액세스하려고 할 때 발생하는 예외입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>An <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception is thrown when an invalid index is used to access a member of an array or a collection, or to read or write from a particular location in a buffer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 잘못 된 인덱스가 배열 또는 컬렉션의 멤버에 액세스 하거나를 읽거나 쓸 버퍼의 특정 위치에서 사용 되는 경우 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>This exception  inherits from the <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class but adds no unique members.</source>
          <target state="translated">상속 되는이 예외는 <ph id="ph1">&lt;xref:System.Exception&gt;</ph> 클래스 고유한 멤버가 추가 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Typically, an <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception is thrown as a result of developer error.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 개발자 오류로 인해 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Instead of handling the exception, you should diagnose the cause of the error and correct your code.</source>
          <target state="translated">예외를 처리 하는 대신 오류의 원인을 진단 하 고 코드를 수정 해야 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The most common causes of the error are:</source>
          <target state="translated">오류의 가장 일반적인 원인은 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Forgetting that the upper bound of a collection or a zero-based array is one less than its number of members or elements, as the following example illustrates.</source>
          <target state="translated">다음 예제와 같이 해당 수의 멤버 또는 요소 보다 작은 0부터 시작 하는 배열 또는 컬렉션의 상한을 하나 인지를 잊어 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>To correct the error, you can use code like the following.</source>
          <target state="translated">이 오류를 해결 하려면 다음과 같은 코드를 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Alternately, instead of iterating all the elements in the array by their index, you can use the <ph id="ph1">`foreach`</ph> statement (in C#) or the <ph id="ph2">`For Each`</ph> statement (in Visual Basic).</source>
          <target state="translated">또는 배열의 모든 요소를 반복 하는 인덱스로, 대신 있습니다 사용할 수는 <ph id="ph1">`foreach`</ph> 문 (C#) 또는 <ph id="ph2">`For Each`</ph> 문 (Visual Basic의 경우).</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Attempting to assign an array element to another array that has not been adequately dimensioned and that has fewer elements than the original array.</source>
          <target state="translated">에 다른 배열 하는 되어 적절 하 게 차원이 구분 되지 않습니다 및 원본 배열 보다 적은 요소가 있는 배열 요소를 할당 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The following example attempts to assign the last element in the <ph id="ph1">`value1`</ph> array to the same element in the <ph id="ph2">`value2`</ph> array.</source>
          <target state="translated">마지막 요소를 할당 하려면 다음 예제에서는 <ph id="ph1">`value1`</ph> 의 같은 요소에 배열은 <ph id="ph2">`value2`</ph> 배열입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>However, the <ph id="ph1">`value2`</ph> array has been incorrectly dimensioned to have six instead of seven elements.</source>
          <target state="translated">그러나는 <ph id="ph1">`value2`</ph> 배열에 된 차원이 제대로 구분 되지 7 개 요소 대신 6 개 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>As a result, the assignment throws an <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">결과적으로, 할당 throw는 <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Using a value returned by a search method to iterate a portion of an array or collection starting at a particular index position.</source>
          <target state="translated">값을 사용 하는 배열 또는 특정 인덱스 위치에서 시작 하는 컬렉션의 일부를 반복 하는 검색 방법 반환한입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>If you forget to check whether the search operation found a match, the runtime throws an <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception, as shown in this example.</source>
          <target state="translated">런타임에서 throw 일치 하는 검색 작업을 찾을 수 있는지 여부를 확인 하려면 기억나지 않는 경우는 <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 예외를이 예제에 나와 있는 것 처럼 합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType&gt;</ph> method returns -1, which is an invalid index value, when it fails to find a match.</source>
          <target state="translated">이 경우에 <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType&gt;</ph> 하며 일치 항목을 찾지 못한 경우이 잘못 된 인덱스 값-1이 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>To correct this error, check the search method's return value before iterating the array, as shown in this example.</source>
          <target state="translated">이 오류를 해결 하려면이 예제에 표시 된 대로 검색 메서드의 반환 값 배열에 반복 하기 전에 확인 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Trying to use or enumerate a result set, collection, or array returned by a query without testing whether the returned object has any valid data.</source>
          <target state="translated">사용 하거나 결과 집합, 컬렉션 또는 반환된 된 개체에 유효한 데이터가 있는지 여부를 테스트 하지 않고 쿼리에 의해 반환 된 배열 열거 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Using a computed value to define the starting index, the ending index, or the number of items to be iterated.</source>
          <target state="translated">계산 된 값을를 사용 하 여 시작 하는 인덱스, 끝 인덱스 또는 반복할 항목의 수를 정의 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>If the result of the computation is unexpected, it might result in an <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception.</source>
          <target state="translated">계산의 결과가 예기치 않은 경우에 발생할 수 있습니다는 <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>You should check your program's logic in calculating the index value and validate the value before iterating the array or collection.</source>
          <target state="translated">인덱스 값을 계산 하면 프로그램의 논리를 검사 하 고, 값 배열 또는 컬렉션을 반복 하기 전에 유효성을 검사 해야 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The following conditions must all be true; otherwise, an <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception is thrown:</source>
          <target state="translated">다음 조건을 모두 충족 해야 합니다. 그렇지 않은 경우는 <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The starting index must be greater than or equal to <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType&gt;</ph> for the dimension of the array that you want to iterate, or greater than or equal to 0 for a collection.</source>
          <target state="translated">보다 크거나 같은 시작 하는 인덱스 여야 합니다 <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType&gt;</ph> , 반복 하려는 배열 차원에 대 한 또는 컬렉션에 대해 0 보다 크거나 합니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The ending index cannot exceed <ph id="ph1">&lt;xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType&gt;</ph> for the dimension of the array that you want to iterate, or cannot be greater than or equal to the <ph id="ph2">`Count`</ph> property of a collection.</source>
          <target state="translated">끝 인덱스 기간 보다 짧아야 <ph id="ph1">&lt;xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType&gt;</ph> , 반복 또는 보다 클 수 없거나 같은 하려는 배열 차원에 대 한는 <ph id="ph2">`Count`</ph> 컬렉션의 속성입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The following equation must be true for the dimension of the array that you want to iterate:</source>
          <target state="translated">다음 수식의 반복 하는 배열 차원에 대 한 적용 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>For a collection, the following equation must be true:</source>
          <target state="translated">컬렉션은 다음 수식을 적용 되어야 합니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The starting index of an array or collection can never be a negative number.</source>
          <target state="translated">배열 또는 컬렉션의 시작 인덱스는 음수가 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Assuming that an array must be zero-based.</source>
          <target state="translated">배열의 0부터 시작 해야 하는 것으로 가정 합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Arrays that are not zero-based can be created by the <ph id="ph1">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType&gt;</ph> method and can be returned by COM interop, although they aren’t CLS-compliant.</source>
          <target state="translated">0부터 시작 하지 않는 배열을 만들 수 있습니다는 <ph id="ph1">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType&gt;</ph> 메서드 CLS 호환 되지 않게 차단 되지만 COM interop에 반환할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The following example illustrates the <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> that is thrown when you try to iterate a non-zero-based array created by the <ph id="ph2">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 비 0 기반 배열을 사용 하 여 만든 반복 하려고 할 때 throw 되는 <ph id="ph2">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>To correct the error, as the following example does, you can call the <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A&gt;</ph> method instead of making assumptions about the starting index of an array.</source>
          <target state="translated">다음 예제에서는 마찬가지로 오류를 해결 하려면 호출할 수 있습니다는 <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A&gt;</ph> 메서드는 배열의 시작 인덱스에 대 한 가정 하는 대신 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Note that when you call the <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A&gt;</ph> method to get the starting index of an array, you should also call the <ph id="ph2">&lt;xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType&gt;</ph> method to get its ending index.</source>
          <target state="translated">호출 하는 경우 유의 <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A&gt;</ph> 배열의 시작 인덱스를 가져올 메서드를 호출 해야는 <ph id="ph2">&lt;xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType&gt;</ph> 끝의 인덱스를 가져올 메서드를 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Confusing an index and the value at that index in a numeric array or collection.</source>
          <target state="translated">인덱스와 숫자 배열 또는 컬렉션의 해당 인덱스에 있는 값을 혼동 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>This issue usually occurs when using the <ph id="ph1">`foreach`</ph> statement (in C#) or the <ph id="ph2">`For Each`</ph> statement (in Visual Basic).</source>
          <target state="translated">이 문제는 일반적으로 사용 하는 경우 발생는 <ph id="ph1">`foreach`</ph> 문 (C#) 또는 <ph id="ph2">`For Each`</ph> 문 (Visual Basic의 경우).</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The following example illustrates the problem.</source>
          <target state="translated">다음 예제에서 이 문제를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The iteration construct returns each value in an array or collection, not its index.</source>
          <target state="translated">열거자는 배열 또는 컬렉션, 인덱스가 각 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>To eliminate the exception, use this code.</source>
          <target state="translated">예외를 제거 하려면이 코드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Providing an invalid column name to the <ph id="ph1">&lt;xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">에 잘못 된 열 이름을 제공 하는 <ph id="ph1">&lt;xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Violating thread safety.</source>
          <target state="translated">스레드로부터의 안전성을 위반 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Operations such as reading from the same <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> object, writing to the same <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> object from multiple threads, or enumerating the objects in a <ph id="ph3">&lt;xref:System.Collections.Hashtable&gt;</ph> from different threads can throw an <ph id="ph4">&lt;xref:System.IndexOutOfRangeException&gt;</ph> if the object isn’t accessed in a thread-safe way.</source>
          <target state="translated">동일한 읽기 등의 작업 <ph id="ph1">&lt;xref:System.IO.StreamReader&gt;</ph> 개체를 동일 하 게 쓰기 <ph id="ph2">&lt;xref:System.IO.StreamWriter&gt;</ph> 또는 다중 스레드에서 개체의 개체를 열거는 <ph id="ph3">&lt;xref:System.Collections.Hashtable&gt;</ph> 서로 다른 스레드에서 throw 할 수는 <ph id="ph4">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 개체에서 액세스할 수 없는 경우는 스레드로부터 안전한 방법입니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>This exception is typically intermittent because it relies on a race condition.</source>
          <target state="translated">이 예외는 경합 조건에 사용 하기 때문에 일반적으로 간헐적으로 발생 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Using hard-coded index values to manipulate an array is likely to throw an exception if the index value is incorrect or invalid, or if the size of the array being manipulation is unexpected.</source>
          <target state="translated">배열 조작 하기 위한 하드 코드 된 인덱스 값을 사용 하 여 인덱스 값이 잘못 되었거나, 잘못 된 또는 조작 중인 배열의 크기를 예기치 않은 경우 예외를 throw 하려면 가능성이 높습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>To prevent an operation from throwing an  <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception, you can do the following:</source>
          <target state="translated">throw 한 작업을 방지 하기 위해 프로그램 <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 예외를 다음을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Iterate the elements of the array using the <bpt id="p1">[</bpt>foreach<ept id="p1">](https://msdn.microsoft.com/library/ttw7t8t6.aspx)</ept> statement (in C#) or the <bpt id="p2">[</bpt>For Each...Next<ept id="p2">](https://msdn.microsoft.com/library/5ebk1751.aspx)</ept> construct (in Visual Basic)  instead of iterating elements by index.</source>
          <target state="translated">사용 하 여 배열 요소를 반복는 <bpt id="p1">[</bpt>foreach<ept id="p1">](https://msdn.microsoft.com/library/ttw7t8t6.aspx)</ept> 문 (C#) 또는 <bpt id="p2">[</bpt>각각에 대해... 다음<ept id="p2">](https://msdn.microsoft.com/library/5ebk1751.aspx)</ept> 인덱스로 요소를 반복 하는 대신 (Visual Basic)에서는 생성 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>Iterate the elements by index starting with the index returned by the <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType&gt;</ph> method and ending with the index returned by the <ph id="ph2">&lt;xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">반환 된 인덱스부터 시작 하는 인덱스에서 요소를 반복는 <ph id="ph1">&lt;xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType&gt;</ph> 메서드 및에서 반환 된 인덱스와 끝은 <ph id="ph2">&lt;xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>If you are assigning elements in one array to another, ensure that  the target array has at least as many elements as the source array by comparing their <ph id="ph1">&lt;xref:System.Array.Length%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">다른 한 배열의 요소를 할당 하는 경우 대상 배열에 소스 배열로 이상의 요소를 비교 하 여가 확인 자신의 <ph id="ph1">&lt;xref:System.Array.Length%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>, see the <ph id="ph2">&lt;xref:System.IndexOutOfRangeException&gt;</ph> constructors.</source>
          <target state="translated">인스턴스에 대 한 초기 속성 값 목록은 <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>, 참조는 <ph id="ph2">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>The following intermediate language (IL) instructions throw <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>:</source>
          <target state="translated">다음 IL (중간 언어) 명령은 throw <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>ldelem.<ph id="ph1">\&lt;</ph>type&gt;</source>
          <target state="translated">ldelem.<ph id="ph1">\&lt;</ph>type&gt;</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>ldelema</source>
          <target state="translated">ldelema</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source>stelem.<ph id="ph1">\&lt;</ph>type&gt;</source>
          <target state="translated">stelem.<ph id="ph1">\&lt;</ph>type&gt;</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IndexOutOfRangeException">
          <source><ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> uses the HRESULT COR_E_INDEXOUTOFRANGE, which has the value 0x80131508.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 0x80131508 값이 있는 HRESULT COR_E_INDEXOUTOFRANGE를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="T:System.IndexOutOfRangeException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "An array index is out of range."</source>
          <target state="translated">이 생성자는 <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> "배열 인덱스가 범위를 벗어났습니다."와 같은 오류를 설명 하는 시스템 제공 메시지로 새 인스턴스의 속성</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">이 메시지는 현재 시스템 문화권을 고려합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>.</source>
          <target state="translated">다음 표에서는 <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 인스턴스의 초기 속성 값을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>Property</source>
          <target state="translated">속성</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>Value</source>
          <target state="translated">값</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">null 참조(Visual Basic의 경우 <ph id="ph1">`Nothing`</ph>)</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor">
          <source>The localized error message string.</source>
          <target state="translated">지역화된 오류 메시지 문자열입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>The message that describes the error.</source>
          <target state="translated">@FSHO2@오류를 설명하는 메시지입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> class with a specified error message.</source>
          <target state="translated">지정된 오류 메시지를 사용하여 <ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A?displayProperty=nameWithType&gt;</ph> property of the new exception using the <ph id="ph2">`message`</ph> parameter.</source>
          <target state="translated">이 생성자는 <ph id="ph1">&lt;xref:System.Exception.Message%2A?displayProperty=nameWithType&gt;</ph> 속성을 사용 하 여 새 예외는 <ph id="ph2">`message`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>The content of <ph id="ph1">`message`</ph> is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">`message`</ph>의 내용은 사용자의 이해를 돕기 위한 것입니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>.</source>
          <target state="translated">다음 표에서는 <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 인스턴스의 초기 속성 값을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>Property</source>
          <target state="translated">속성</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>Value</source>
          <target state="translated">값</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">null 참조(Visual Basic의 경우 <ph id="ph1">`Nothing`</ph>)</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String)">
          <source>The error message string.</source>
          <target state="translated">오류 메시지 문자열</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">@FSHO2@예외 이유를 설명하는 오류 메시지입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">현재 예외의 원인인 예외입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> parameter is not a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 null 참조(Visual Basic에서는 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)가 아니면, 현재 예외는 내부 예외를 처리하는 <ph id="ph2">&lt;see langword="catch" /&gt;</ph> 블록에서 발생한 것입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <ph id="ph1">&lt;see cref="T:System.IndexOutOfRangeException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">이전 예외의 직접적인 결과로 throw되는 예외의 <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성에는 이전 예외에 대한 참조가 들어 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">`InnerException`</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic) if the <ph id="ph3">`InnerException`</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">`InnerException`</ph> 속성은 생성자에 전달된 값과 같은 값을 반환하거나 <ph id="ph2">`Nothing`</ph> 속성이 생성자에 내부 예외 값을 제공하지 않는 경우에는 null 참조(Visual Basic의 경우 <ph id="ph3">`InnerException`</ph>)를 반환합니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph>.</source>
          <target state="translated">다음 표에서는 <ph id="ph1">&lt;xref:System.IndexOutOfRangeException&gt;</ph> 인스턴스의 초기 속성 값을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">속성</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">값</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The inner exception reference.</source>
          <target state="translated">내부 예외 참조</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
          <source>The error message string.</source>
          <target state="translated">오류 메시지 문자열</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>