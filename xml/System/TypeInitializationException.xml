<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4e010e0c78c65b529ed1ad5c97ca2f1013dd01bc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728517" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>클래스 이니셜라이저에 의해 throw되는 예외 주위에서 래퍼로 throw되는 예외입니다. 이 클래스는 상속될 수 없습니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 클래스 이니셜라이저가 형식을 초기화하지 못하면 <xref:System.TypeInitializationException>이 만들어지고 해당 형식의 클래스 이니셜라이저가 throw한 예외에 대한 참조가 전달됩니다. <xref:System.Exception.InnerException%2A> 속성 <xref:System.TypeInitializationException> 기본 예외를 보유 합니다.  
  
 일반적으로 <xref:System.TypeInitializationException> 치명적인 상태를 반영 하는 예외 (런타임이 형식은 인스턴스화할 수 없는 경우.)를 계속 하 여 응용 프로그램에 맞지 않는 합니다.  가장 일반적으로 <xref:System.TypeInitializationException> 응용 프로그램의 실행 중인 환경에 변경 사항이에 대 한 응답에서 throw 됩니다. 따라서 이외의 다른 가능 디버그 코드 문제 해결에 대 한 예외 하지에서 처리 하는 `try` / `catch` 블록입니다. 대신 예외의 원인은 조사 및 제거 해야 합니다.  
  
 <xref:System.TypeInitializationException> 0x80131534 값이 있는 HRESULT COR_E_TYPEINITIALIZATION를 사용 합니다.  
  
 인스턴스에 대 한 초기 속성 값 목록은 <xref:System.TypeInitializationException>, 참조는 <xref:System.TypeInitializationException.%23ctor%2A> 생성자입니다.  
  
 다음 섹션을 설명 하는 상황 중 일부는 <xref:System.TypeInitializationException> 예외가 throw 됩니다.  
  
 [정적 생성자와 TypeInitializationException 예외](#Static)   
 [정규식 시간 제한 값과 일치](#Timeout)   
 [달력 및 문화권 데이터가](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception-exception"></a>정적 생성자와 TypeInitializationException 예외  
 정적 생성자는 있는 경우 자동으로 호출 됩니다는 런타임에서 형식의 새 인스턴스를 만들기 전에 합니다. 정적 생성자는 개발자가 명시적으로 정의할 수 있습니다. 정적 생성자를 명시적으로 정의 하지 않은 경우 컴파일러에서는 자동으로을 하나 만드십시오를 초기화할 `static` (C#에서) 또는 `Shared` (Visual Basic)에서는 형식의 멤버입니다.  정적 생성자에 대 한 자세한 내용은 참조 하십시오. [정적 생성자](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)합니다.  
  
 가장 일반적으로 <xref:System.TypeInitializationException> 정적 생성자를 인스턴스화하는 형식을 수 없는 경우 예외가 throw 됩니다.  <xref:System.Exception.InnerException%2A> 속성은 정적 생성자 형식을 인스턴스화할 수 없어서 이유를 나타냅니다. 일반적인 원인 중 일부는 <xref:System.TypeInitializationException> 예외:  
  
 정적 생성자에서 처리 되지 않은 예외  
 정적 생성자에서 예외가 throw 되 면 해당 예외에 래핑됩니다는 <xref:System.TypeInitializationException> 예외 및 형식을 인스턴스화할 수 없습니다.  
  
 종종가 있기 때문에이 예외 문제 해결이 어렵습니다 정적 생성자 소스 코드에서는 항상 명시적으로 정의 되지 않습니다. 정적 생성자는 경우 형식에 있습니다.  
  
-   명시적으로 정의 된 형식의 멤버로 합니다.  
  
-   형식에 `static` (C#에서) 또는 `Shared` (Visual Basic)에서는 선언 되 고 단일 문으로 초기화 하는 변수입니다. 이 경우 언어 컴파일러는 형식에 대 한 정적 생성자를 생성합니다. 와 같은 유틸리티를 사용 하 여 검사할 수 [IL 디스어셈블러](~/docs/framework/tools/ildasm-exe-il-disassembler.md)합니다. 예를 들어, C# 및 VB 컴파일러는 다음 예제를 컴파일하려면은 다음과 유사 하 게 되는 정적 생성자에 대 한 IL 생성 합니다.  
  
    ```  
  
    .method private specialname rtspecialname static   
            void  .cctor() cil managed  
    {  
      // Code size       12 (0xc)  
      .maxstack  8  
      IL_0000:  ldc.i4.3  
      IL_0001:  newobj     instance void TestClass::.ctor(int32)  
      IL_0006:  stsfld     class TestClass Example::test  
      IL_000b:  ret  
    } // end of method Example::.cctor  
  
    ```  
  
 다음 예제에서는 한 <xref:System.TypeInitializationException> 컴파일러에서 생성 된 정적 생성자에 의해 throw 된 예외입니다. `Example` 클래스를 포함 한 `static` (C#에서) 또는 `Shared` (Visual Basic)에서는 형식의 필드 `TestClass` 값이 3 해당 클래스 생성자에 전달 하 여 인스턴스화될 합니다.  그러나 해당 값을 올바르지 않습니다. 0 또는 1의 값만 허용 됩니다. 결과적으로 `TestClass` 생성자 throw 클래스는 <xref:System.ArgumentOutOfRangeException>합니다. 이 예외가 처리 되지 않으면 때문에 래핑된는 <xref:System.TypeInitializationException> 예외입니다.  
  
 [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
 [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
 예외 메시지에 대 한 정보를 표시는 <xref:System.Exception.InnerException%2A> 속성입니다.  
  
 누락 된 어셈블리 또는 데이터 파일  
 일반적인 원인은 <xref:System.TypeInitializationException> 예외는 응용 프로그램의 개발 및 테스트 환경에는 어셈블리 또는 데이터 파일은 런타임 환경에서 누락 되었는지 합니다. 예를 들어 다음 예제는이 사용 하 여 Missing1a.dll 이라는 어셈블리를 컴파일할 수 있습니다 명령줄 구문:  
  
```csharp  
csc /t:library Missing1a.cs  
```  
  
```vb  
vbc Missing1a.vb /t:library  
```  
  
 [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
 [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
 그런 다음 Missing1.exe Missing1a.dll에 대 한 참조를 포함 하 여 명명 된 실행 파일에 다음 예제를 컴파일할 수 있습니다.  
  
```csharp  
csc Missing1.cs /r:Missing1a.dll  
```  
  
```vb  
vbc Missing1.vb /r:Missing1a.dll  
```  
  
 그러나 이름 바꾸기, 이동 또는 Missing1a.dll 지우고 예제를 실행, throw 한 <xref:System.TypeInitializationException> 예외는 예제에 표시 된 출력을 표시 합니다.  예외 메시지에 대 한 정보가 포함 됩니다는 <xref:System.Exception.InnerException%2A> 속성입니다. 이 경우에 내부 예외는 <xref:System.IO.FileNotFoundException> 런타임에 종속 어셈블리를 찾을 수 없어 throw 되는 합니다.  
  
 [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
 [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
> [!NOTE]
>  이 예제는 <xref:System.TypeInitializationException> 어셈블리를 로드할 수 없는 때문에 예외가 발생 했습니다. 또한 구성 파일, XML 파일 또는 포함 된 파일에 찾을 수 없는 데이터 직렬화와 같은 정적 생성자에는 데이터 파일을 열려고 시도 하는 경우이 예외가 발생 합니다.  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a>정규식 시간 제한 값과 일치  
 응용 프로그램 도메인 별로 작업을 일치 하는 정규식 패턴에 대 한 기본 제한 시간 값을 설정할 수 있습니다. 제한 시간을 지정 하 여 정의 된 한 <xref:System.TimeSpan> "REGEX_DEFAULT_MATCH_TIMEOUT" 속성에 대 한 값은 <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> 메서드. 시간 간격은 유효 해야 <xref:System.TimeSpan> 0 보다 작은 약 24 일 보다 큰 개체입니다. 이러한 요구 사항을 충족 되지 않는 경우 기본 제한 시간 값을 설정 하려고 throw는 <xref:System.ArgumentOutOfRangeException>, 하에 요소에 래핑되는 <xref:System.TypeInitializationException> 예외입니다.  
  
 다음 예제와 <xref:System.TypeInitializationException> "REGEX_DEFAULT_MATCH_TIMEOUT" 속성에 할당 된 값에 유효 하지 않을 때 throw 되는 합니다. 예외를 제거 하려면 "REGEX_DEFAULT_MATCH_TIMEOUT" 속성을 설정는 <xref:System.TimeSpan> 값은 0 보다 작은 약 24 일 보다 커야 합니다.  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a>달력 및 문화권 데이터가  
 달력을 인스턴스화하는 런타임 하지 않을 경우 되지만 인스턴스화할 수는 <xref:System.Globalization.CultureInfo> 일정에 해당 하는 개체를 throw 한 <xref:System.TypeInitializationException> 예외입니다. 이 예외는 다음과 같은 달력 클래스 생성자에서 throw 될 수 있습니다.  
  
-   기본 생성자는 <xref:System.Globalization.JapaneseCalendar> 클래스입니다.  
  
-   기본 생성자는 <xref:System.Globalization.KoreanCalendar> 클래스입니다.  
  
-   기본 생성자는 <xref:System.Globalization.TaiwanCalendar> 클래스입니다.  
  
 이들이 culture에 대 한 문화권 데이터가 해야 모든 시스템에서 사용할 수 있으므로 거의 얻어지는 경우 발생 하지 않아야이 예외입니다.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName">초기화에 실패한 형식의 정규화된 이름입니다.</param>
        <param name="innerException">현재 예외의 원인인 예외입니다. <c>innerException</c> 매개 변수가 null 참조(Visual Basic에서는 <see langword="Nothing" />)가 아니면, 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생한 것입니다.</param>
        <summary>기본 오류 메시지, 지정된 형식 이름 및 해당 예외의 근본 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.TypeInitializationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이전 예외의 직접적인 결과로 throw되는 예외는 <xref:System.Exception.InnerException%2A> 속성에 이전 예외에 대한 참조를 포함할 수 있습니다. <xref:System.Exception.InnerException%2A> 속성은 생성자에 전달된 값과 같은 값을 반환하거나 `Nothing` 속성이 생성자에 내부 예외 값을 제공하지 않는 경우에는 null 참조(Visual Basic의 경우 <xref:System.Exception.InnerException%2A>)를 반환합니다.  
  
 다음 표에서는 <xref:System.TypeInitializationException> 인스턴스의 초기 속성 값을 보여 줍니다.  
  
|속성|값|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|내부 예외 참조|  
|<xref:System.Exception.Message%2A>|지역화된 오류 메시지 문자열입니다.|  
|<xref:System.TypeInitializationException.TypeName%2A>|형식의 이름입니다.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
        <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</param>
        <summary>형식 이름 및 추가 예외 정보를 사용하여 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 설정합니다.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다. 이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</permission>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>초기화에 실패한 형식의 정규화된 이름을 가져옵니다.</summary>
        <value>초기화에 실패한 형식의 정규화된 이름입니다.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>