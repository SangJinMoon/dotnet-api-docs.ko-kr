<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="TypeInitializationException.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54e010e0c78c65b529ed1ad5c97ca2f1013dd01bc.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e010e0c78c65b529ed1ad5c97ca2f1013dd01bc</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.TypeInitializationException">
          <source>The exception that is thrown as a wrapper around the exception thrown by the class initializer.</source>
          <target state="translated">클래스 이니셜라이저에 의해 throw되는 예외 주위에서 래퍼로 throw되는 예외입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.TypeInitializationException">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>When a class initializer fails to initialize a type, a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> is created and passed a reference to the exception thrown by the type's class initializer.</source>
          <target state="translated">클래스 이니셜라이저가 형식을 초기화하지 못하면 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>이 만들어지고 해당 형식의 클래스 이니셜라이저가 throw한 예외에 대한 참조가 전달됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> holds the underlying exception.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성 <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> 기본 예외를 보유 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Typically, the <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception reflects a catastrophic condition (the runtime is unable to instantiate a type) that prevents an application from continuing.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> 치명적인 상태를 반영 하는 예외 (런타임이 형식은 인스턴스화할 수 없는 경우.)를 계속 하 여 응용 프로그램에 맞지 않는 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Most commonly, the <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> is thrown in response to some change in the executing environment of the application.</source>
          <target state="translated">가장 일반적으로 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> 응용 프로그램의 실행 중인 환경에 변경 사항이에 대 한 응답에서 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Consequently, other than possibly for troubleshooting debug code, the exception should not be handled in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block.</source>
          <target state="translated">따라서 이외의 다른 가능 디버그 코드 문제 해결에 대 한 예외 하지에서 처리 하는 <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph> 블록입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Instead, the cause of the exception should be investigated and eliminated.</source>
          <target state="translated">대신 예외의 원인은 조사 및 제거 해야 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source><ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> uses the HRESULT COR_E_TYPEINITIALIZATION, which has the value 0x80131534.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> 0x80131534 값이 있는 HRESULT COR_E_TYPEINITIALIZATION를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>, see the <ph id="ph2">&lt;xref:System.TypeInitializationException.%23ctor%2A&gt;</ph> constructors.</source>
          <target state="translated">인스턴스에 대 한 초기 속성 값 목록은 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>, 참조는 <ph id="ph2">&lt;xref:System.TypeInitializationException.%23ctor%2A&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The following sections describe some of the situations in which a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception is thrown.</source>
          <target state="translated">다음 섹션을 설명 하는 상황 중 일부는 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source><bpt id="p1">[</bpt>Static constructors and the TypeInitializationException exception<ept id="p1">](#Static)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>정적 생성자와 TypeInitializationException 예외<ept id="p1">](#Static)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source><bpt id="p1">[</bpt>Regular expression match timeout values<ept id="p1">](#Timeout)</ept><ph id="ph1"> </ph></source>
          <target state="translated"><bpt id="p1">[</bpt>정규식 시간 제한 값과 일치<ept id="p1">](#Timeout)</ept><ph id="ph1"> </ph></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source><bpt id="p1">[</bpt>Calendars and cultural data<ept id="p1">](#Calendars)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>달력 및 문화권 데이터가<ept id="p1">](#Calendars)</ept></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Static constructors and the TypeInitializationException exception</source>
          <target state="translated">정적 생성자와 TypeInitializationException 예외</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>A static constructor, if one exists, is called automatically by the runtime before creating a new instance of a type.</source>
          <target state="translated">정적 생성자는 있는 경우 자동으로 호출 됩니다는 런타임에서 형식의 새 인스턴스를 만들기 전에 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Static constructors can be explicitly defined by a developer.</source>
          <target state="translated">정적 생성자는 개발자가 명시적으로 정의할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>If a static  constructor is not explicitly defined, compilers automatically create one to initialize any <ph id="ph1">`static`</ph> (in C#) or <ph id="ph2">`Shared`</ph> (in Visual Basic) members of the type.</source>
          <target state="translated">정적 생성자를 명시적으로 정의 하지 않은 경우 컴파일러에서는 자동으로을 하나 만드십시오를 초기화할 <ph id="ph1">`static`</ph> (C#에서) 또는 <ph id="ph2">`Shared`</ph> (Visual Basic)에서는 형식의 멤버입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>For more information on static constructors, see <bpt id="p1">[</bpt>Static Constructors<ept id="p1">](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)</ept>.</source>
          <target state="translated">정적 생성자에 대 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>정적 생성자<ept id="p1">](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Most commonly, a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception is thrown when a static constructor is unable to instantiate a type.</source>
          <target state="translated">가장 일반적으로 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> 정적 생성자를 인스턴스화하는 형식을 수 없는 경우 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property indicates why the static constructor was unable to instantiate the type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성은 정적 생성자 형식을 인스턴스화할 수 없어서 이유를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Some of the more common causes of a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception are:</source>
          <target state="translated">일반적인 원인 중 일부는 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> 예외:</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>An unhandled exception in a static constructor</source>
          <target state="translated">정적 생성자에서 처리 되지 않은 예외</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>If an exception is thrown in a static constructor, that exception is wrapped in a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception, and the type cannot be instantiated.</source>
          <target state="translated">정적 생성자에서 예외가 throw 되 면 해당 예외에 래핑됩니다는 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> 예외 및 형식을 인스턴스화할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>What often makes this exception difficult to troubleshoot is that static constructors are not always explicitly defined in source code.</source>
          <target state="translated">종종가 있기 때문에이 예외 문제 해결이 어렵습니다 정적 생성자 소스 코드에서는 항상 명시적으로 정의 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>A static constructor exists in a type if:</source>
          <target state="translated">정적 생성자는 경우 형식에 있습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>It has been explicitly defined as a member of a type.</source>
          <target state="translated">명시적으로 정의 된 형식의 멤버로 합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The type has  <ph id="ph1">`static`</ph> (in C#) or <ph id="ph2">`Shared`</ph> (in Visual Basic) variables that are declared and initialized in a single statement.</source>
          <target state="translated">형식에 <ph id="ph1">`static`</ph> (C#에서) 또는 <ph id="ph2">`Shared`</ph> (Visual Basic)에서는 선언 되 고 단일 문으로 초기화 하는 변수입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>In this case, the language compiler generates a static constructor for the type.</source>
          <target state="translated">이 경우 언어 컴파일러는 형식에 대 한 정적 생성자를 생성합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>You can inspect it by using a utility such as <bpt id="p1">[</bpt>IL Disassembler<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>.</source>
          <target state="translated">와 같은 유틸리티를 사용 하 여 검사할 수 <bpt id="p1">[</bpt>IL 디스어셈블러<ept id="p1">](~/docs/framework/tools/ildasm-exe-il-disassembler.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>For instance, when the C# and VB compilers compile the following example, they generate the IL for a static constructor that is similar to this:</source>
          <target state="translated">예를 들어, C# 및 VB 컴파일러는 다음 예제를 컴파일하려면은 다음과 유사 하 게 되는 정적 생성자에 대 한 IL 생성 합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The following example shows a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception thrown by a compiler-generated static constructor.</source>
          <target state="translated">다음 예제에서는 한 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> 컴파일러에서 생성 된 정적 생성자에 의해 throw 된 예외입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The <ph id="ph1">`Example`</ph> class includes a <ph id="ph2">`static`</ph> (in C#) or <ph id="ph3">`Shared`</ph> (in Visual Basic) field of type <ph id="ph4">`TestClass`</ph> that is instantiated by passing a value of 3 to its class constructor.</source>
          <target state="translated"><ph id="ph1">`Example`</ph> 클래스를 포함 한 <ph id="ph2">`static`</ph> (C#에서) 또는 <ph id="ph3">`Shared`</ph> (Visual Basic)에서는 형식의 필드 <ph id="ph4">`TestClass`</ph> 값이 3 해당 클래스 생성자에 전달 하 여 인스턴스화될 합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>That value, however, is illegal; only values of 0 or 1 are permitted.</source>
          <target state="translated">그러나 해당 값을 올바르지 않습니다. 0 또는 1의 값만 허용 됩니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>As a result, the <ph id="ph1">`TestClass`</ph> class constructor throws an <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>.</source>
          <target state="translated">결과적으로 <ph id="ph1">`TestClass`</ph> 생성자 throw 클래스는 <ph id="ph2">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Since this exception is not handled, it is wrapped in a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</source>
          <target state="translated">이 예외가 처리 되지 않으면 때문에 래핑된는 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Note that the exception message displays information about the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">예외 메시지에 대 한 정보를 표시는 <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>A missing assembly or data file</source>
          <target state="translated">누락 된 어셈블리 또는 데이터 파일</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>A common cause of a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception is that an assembly or data file that was present in an application's development and test environments is missing from its runtime environment.</source>
          <target state="translated">일반적인 원인은 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> 예외는 응용 프로그램의 개발 및 테스트 환경에는 어셈블리 또는 데이터 파일은 런타임 환경에서 누락 되었는지 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>For example, you can compile the following example to an assembly named Missing1a.dll by using the this command-line syntax:</source>
          <target state="translated">예를 들어 다음 예제는이 사용 하 여 Missing1a.dll 이라는 어셈블리를 컴파일할 수 있습니다 명령줄 구문:</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>You can then compile the following example to an executable named Missing1.exe by including a reference to Missing1a.dll:</source>
          <target state="translated">그런 다음 Missing1.exe Missing1a.dll에 대 한 참조를 포함 하 여 명명 된 실행 파일에 다음 예제를 컴파일할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>However, if you rename, move, or delete Missing1a.dll and run the example, it throws a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception and displays the output shown in the example.</source>
          <target state="translated">그러나 이름 바꾸기, 이동 또는 Missing1a.dll 지우고 예제를 실행, throw 한 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> 예외는 예제에 표시 된 출력을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Note that the exception message includes information about the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">예외 메시지에 대 한 정보가 포함 됩니다는 <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>In this case,  the inner exception is a <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> that is thrown because the runtime cannot find the dependent assembly.</source>
          <target state="translated">이 경우에 내부 예외는 <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> 런타임에 종속 어셈블리를 찾을 수 없어 throw 되는 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>In this example, a <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> exception was thrown because an assembly could not be loaded.</source>
          <target state="translated">이 예제는 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> 어셈블리를 로드할 수 없는 때문에 예외가 발생 했습니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The exception can also be thrown if a static constructor attempts to open a data file, such as a configuration file, an XML file, or a file containing serialized data, that it cannot find.</source>
          <target state="translated">또한 구성 파일, XML 파일 또는 포함 된 파일에 찾을 수 없는 데이터 직렬화와 같은 정적 생성자에는 데이터 파일을 열려고 시도 하는 경우이 예외가 발생 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Regular expression match timeout values</source>
          <target state="translated">정규식 시간 제한 값과 일치</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>You can set the default timeout value for a regular expression pattern matching operation on a per-application domain basis.</source>
          <target state="translated">응용 프로그램 도메인 별로 작업을 일치 하는 정규식 패턴에 대 한 기본 제한 시간 값을 설정할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The timeout is defined by a specifying a <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> value for the "REGEX_DEFAULT_MATCH_TIMEOUT" property to the  <ph id="ph2">&lt;xref:System.AppDomain.SetData%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">제한 시간을 지정 하 여 정의 된 한 <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> "REGEX_DEFAULT_MATCH_TIMEOUT" 속성에 대 한 값은 <ph id="ph2">&lt;xref:System.AppDomain.SetData%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The time interval must be a valid <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> object that is greater than zero and less than approximately 24 days.</source>
          <target state="translated">시간 간격은 유효 해야 <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> 0 보다 작은 약 24 일 보다 큰 개체입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>If these requirements are not met, the attempt to set the default timeout value throws an <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>, which in turn is wrapped in a <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</source>
          <target state="translated">이러한 요구 사항을 충족 되지 않는 경우 기본 제한 시간 값을 설정 하려고 throw는 <ph id="ph1">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>, 하에 요소에 래핑되는 <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The following example shows the <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> that is thrown when the value assigned to the "REGEX_DEFAULT_MATCH_TIMEOUT" property is invalid.</source>
          <target state="translated">다음 예제와 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> "REGEX_DEFAULT_MATCH_TIMEOUT" 속성에 할당 된 값에 유효 하지 않을 때 throw 되는 합니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>To eliminate the exception, set the"REGEX_DEFAULT_MATCH_TIMEOUT" property to a  <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> value that is greater than zero and less than approximately 24 days.</source>
          <target state="translated">예외를 제거 하려면 "REGEX_DEFAULT_MATCH_TIMEOUT" 속성을 설정는 <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> 값은 0 보다 작은 약 24 일 보다 커야 합니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Calendars and cultural data</source>
          <target state="translated">달력 및 문화권 데이터가</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>If you attempt to instantiate a calendar but the runtime is unable to instantiate  the <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object that corresponds to that calendar, it throws a <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> exception.</source>
          <target state="translated">달력을 인스턴스화하는 런타임 하지 않을 경우 되지만 인스턴스화할 수는 <ph id="ph1">&lt;xref:System.Globalization.CultureInfo&gt;</ph> 일정에 해당 하는 개체를 throw 한 <ph id="ph2">&lt;xref:System.TypeInitializationException&gt;</ph> 예외입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>This exception can be thrown by the following calendar class constructors:</source>
          <target state="translated">이 예외는 다음과 같은 달력 클래스 생성자에서 throw 될 수 있습니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The default constructor of the <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> class.</source>
          <target state="translated">기본 생성자는 <ph id="ph1">&lt;xref:System.Globalization.JapaneseCalendar&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The default constructor of the <ph id="ph1">&lt;xref:System.Globalization.KoreanCalendar&gt;</ph> class.</source>
          <target state="translated">기본 생성자는 <ph id="ph1">&lt;xref:System.Globalization.KoreanCalendar&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>The default constructor of the <ph id="ph1">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph> class.</source>
          <target state="translated">기본 생성자는 <ph id="ph1">&lt;xref:System.Globalization.TaiwanCalendar&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.TypeInitializationException">
          <source>Since cultural data for these cultures should be available on all systems, you should rarely, if ever, encounter this exception.</source>
          <target state="translated">이들이 culture에 대 한 문화권 데이터가 해야 모든 시스템에서 사용할 수 있으므로 거의 얻어지는 경우 발생 하지 않아야이 예외입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The fully qualified name of the type that fails to initialize.</source>
          <target state="translated">초기화에 실패한 형식의 정규화된 이름입니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">현재 예외의 원인인 예외입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> parameter is not a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> 매개 변수가 null 참조(Visual Basic에서는 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>)가 아니면, 현재 예외는 내부 예외를 처리하는 <ph id="ph2">&lt;see langword="catch" /&gt;</ph> 블록에서 발생한 것입니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.TypeInitializationException" /&gt;</ph> class with the default error message, the specified type name, and a reference to the inner exception that is the root cause of this exception.</source>
          <target state="translated">기본 오류 메시지, 지정된 형식 이름 및 해당 예외의 근본 원인인 내부 예외에 대한 참조를 사용하여 <ph id="ph1">&lt;see cref="T:System.TypeInitializationException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">이전 예외의 직접적인 결과로 throw되는 예외는 <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성에 이전 예외에 대한 참조를 포함할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic) if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성은 생성자에 전달된 값과 같은 값을 반환하거나 <ph id="ph2">`Nothing`</ph> 속성이 생성자에 내부 예외 값을 제공하지 않는 경우에는 null 참조(Visual Basic의 경우 <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>)를 반환합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph>.</source>
          <target state="translated">다음 표에서는 <ph id="ph1">&lt;xref:System.TypeInitializationException&gt;</ph> 인스턴스의 초기 속성 값을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">속성</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">값</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The inner exception reference.</source>
          <target state="translated">내부 예외 참조</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The localized error message string.</source>
          <target state="translated">지역화된 오류 메시지 문자열입니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
          <source>The name of the type.</source>
          <target state="translated">형식의 이름입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> that holds the serialized object data about the exception being thrown.</source>
          <target state="translated">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> that contains contextual information about the source or destination.</source>
          <target state="translated">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Sets the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with the type name and additional exception information.</source>
          <target state="translated">형식 이름 및 추가 예외 정보를 사용하여 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 개체를 설정합니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="P:System.TypeInitializationException.TypeName">
          <source>Gets the fully qualified name of the type that fails to initialize.</source>
          <target state="translated">초기화에 실패한 형식의 정규화된 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.TypeInitializationException.TypeName">
          <source>The fully qualified name of the type that fails to initialize.</source>
          <target state="translated">초기화에 실패한 형식의 정규화된 이름입니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>