<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ObjectDisposedException.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a71fbb299abe0b22f28b60b101f6c94366f6784c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a71fbb299abe0b22f28b60b101f6c94366f6784c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ObjectDisposedException">
          <source>The exception that is thrown when an operation is performed on a disposed object.</source>
          <target state="translated">삭제된 개체에서 연산이 수행될 때 throw되는 예외입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ObjectDisposedException">
          <source>An <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph> is thrown when you try to access a member of an object that implements the <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> interface, and that object has been disposed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph> 구현 하는 개체의 멤버에 액세스 하려고 할 때 throw 되는 <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> 인터페이스와 해당 개체가 삭제 되었습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ObjectDisposedException">
          <source>Typically, this exception is caused by one of the following conditions:</source>
          <target state="translated">일반적으로이 예외는 다음 조건 중 하나에 의해 유발 됩니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ObjectDisposedException">
          <source>You've called an object's <ph id="ph1">`Dispose`</ph> method, and you’re trying to access an instance member that gets or sets the object's state.</source>
          <target state="translated">개체의 호출 <ph id="ph1">`Dispose`</ph> 메서드를 개체의 상태를 가져오거나 설정 합니다. 인스턴스 멤버에 액세스 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ObjectDisposedException">
          <source>The following example illustrates the <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph> that is thrown when you try to reset the frequency of timer notifications after you call the <ph id="ph2">&lt;xref:System.Threading.Timer.Dispose%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.ObjectDisposedException&gt;</ph> 호출한 후에 알림 타이머의 빈도 다시 설정 하려고 할 때 throw 되는 <ph id="ph2">&lt;xref:System.Threading.Timer.Dispose%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ObjectDisposedException">
          <source>You've called an object's <ph id="ph1">`Close`</ph> method, and you’re trying to access an instance member that gets or sets the object's state.</source>
          <target state="translated">개체의 호출 <ph id="ph1">`Close`</ph> 메서드를 개체의 상태를 가져오거나 설정 합니다. 인스턴스 멤버에 액세스 하려고 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ObjectDisposedException">
          <source>Often, the <ph id="ph1">`Close`</ph> method provides a type's public implementation of the <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">대개는 <ph id="ph1">`Close`</ph> 메서드는 형식의의 공용 구현을 제공는 <ph id="ph2">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ObjectDisposedException">
          <source>You've called an object's <ph id="ph1">`Dispose`</ph> method multiple times.</source>
          <target state="translated">개체의 호출 <ph id="ph1">`Dispose`</ph> 메서드를 여러 번입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ObjectDisposedException">
          <source>Typically, this doesn’t throw an exception.</source>
          <target state="translated">일반적으로이 예외를 throw 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ObjectDisposedException">
          <source>However, depending on how a type implements <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>, it may not allow multiple calls to <ph id="ph2">`Dispose`</ph>.</source>
          <target state="translated">그러나 해당 형식이 구현 하는 방법을 따라 <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType&gt;</ph>에 대 한 여러 호출을 허용 하지 않을 수 있습니다 <ph id="ph2">`Dispose`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ObjectDisposedException">
          <source>In most cases, this exception results from developer error.</source>
          <target state="translated">대부분의 경우에서이 예외에서 개발자 오류가 발생합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ObjectDisposedException">
          <source>Instead of handling the error in a <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`catch`</ph> block, you should correct the error, typically by reinstantiating the object.</source>
          <target state="translated">오류 메시지를 처리 하지 않고는 <ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`catch`</ph> 블록 개체 재초기화 하 여 일반적으로 오류를 해결 해야 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ObjectDisposedException">
          <source>The following example demonstrates an error that causes the <ph id="ph1">`ObjectDisposedException`</ph> exception to be thrown.</source>
          <target state="translated">다음 예제에서는 오류는 <ph id="ph1">`ObjectDisposedException`</ph> 예외를 throw 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ObjectDisposedException">
          <source>This code produces the following output:</source>
          <target state="translated">이 코드의 결과는 다음과 같습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.ObjectDisposedException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ObjectDisposedException" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ObjectDisposedException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.#ctor(System.String)">
          <source>A string containing the name of the disposed object.</source>
          <target state="translated">삭제된 개체의 이름이 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ObjectDisposedException" /&gt;</ph> class with a string containing the name of the disposed object.</source>
          <target state="translated">삭제된 개체의 이름이 들어 있는 문자열을 사용하여 <ph id="ph1">&lt;see cref="T:System.ObjectDisposedException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ObjectDisposedException.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.ObjectDisposedException.Message%2A&gt;</ph> property is initialized to a system-supplied message that describes the error and includes the <ph id="ph2">`objectName`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ObjectDisposedException.Message%2A&gt;</ph> 속성은 오류를 설명 하 고 포함 하는 시스템 제공 메시지로 초기화는 <ph id="ph2">`objectName`</ph> 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ObjectDisposedException.#ctor(System.String)">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">이 메시지는 현재 시스템 문화권을 고려합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ObjectDisposedException.#ctor(System.String)">
          <source>The <ph id="ph1">`InnerException`</ph> property of the new instance is initialized to <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`InnerException`</ph> 는 새 인스턴스의 속성은 초기화 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ObjectDisposedException.#ctor(System.String)">
          <source>If <ph id="ph1">`objectName`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">`Message`</ph> property contains only an error message.</source>
          <target state="translated">경우 <ph id="ph1">`objectName`</ph> 은 <ph id="ph2">`null`</ph>, <ph id="ph3">`Message`</ph> 속성만 오류 메시지를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> that holds the serialized object data about the exception being thrown.</source>
          <target state="translated">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> that contains contextual information about the source or destination.</source>
          <target state="translated">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ObjectDisposedException" /&gt;</ph> class with serialized data.</source>
          <target state="translated">serialize된 데이터를 사용하여 <ph id="ph1">&lt;see cref="T:System.ObjectDisposedException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">@FSHO2@예외 이유를 설명하는 오류 메시지입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">현재 예외의 원인인 예외입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> is not <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept>이 <ph id="ph1">&lt;see langword="null" /&gt;</ph>이 아니면 현재 예외는 내부 예외를 처리하는 <ph id="ph2">&lt;see langword="catch" /&gt;</ph> 블록에서 발생합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ObjectDisposedException" /&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <ph id="ph1">&lt;see cref="T:System.ObjectDisposedException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">이전 예외의 직접적인 결과로 throw되는 예외의 <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성에는 이전 예외에 대한 참조가 들어 있어야 합니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 속성은 생성자에 전달 되는 동일한 값을 반환 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
          <source>The name of the disposed object.</source>
          <target state="translated">해제된 개체의 이름입니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">@FSHO2@예외 이유를 설명하는 오류 메시지입니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ObjectDisposedException" /&gt;</ph> class with the specified object name and message.</source>
          <target state="translated">지정된 개체 이름과 메시지를 사용하여 <ph id="ph1">&lt;see cref="T:System.ObjectDisposedException" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
          <source>The <ph id="ph1">`InnerException`</ph> property of the new instance is initialized to <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`InnerException`</ph> 는 새 인스턴스의 속성은 초기화 <ph id="ph2">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
          <source>If <ph id="ph1">`objectName`</ph> is <ph id="ph2">`null`</ph>, the <ph id="ph3">`Message`</ph> property contains only an error message.</source>
          <target state="translated">경우 <ph id="ph1">`objectName`</ph> 은 <ph id="ph2">`null`</ph>, <ph id="ph3">`Message`</ph> 속성만 오류 메시지를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> that holds the serialized object data about the exception being thrown.</source>
          <target state="translated">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> that contains contextual information about the source or destination.</source>
          <target state="translated">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.ObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Retrieves the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with the parameter name and additional exception information.</source>
          <target state="translated">매개 변수 이름 및 추가 예외 정보를 사용하여 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 개체를 검색합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>for providing serialization services.</source>
          <target state="translated">serialization 서비스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Associated enumeration:   <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> Security action: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></source>
          <target state="translated">연관 된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> 보안 동작: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="P:System.ObjectDisposedException.Message">
          <source>Gets the message that describes the error.</source>
          <target state="translated">오류를 설명하는 메시지를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ObjectDisposedException.Message">
          <source>A string that describes the error.</source>
          <target state="translated">오류를 설명하는 문자열입니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ObjectDisposedException.Message">
          <source>If the <ph id="ph1">&lt;xref:System.ObjectDisposedException.ObjectName%2A&gt;</ph> property is not <ph id="ph2">`null`</ph>, the message includes the name of the object.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.ObjectDisposedException.ObjectName%2A&gt;</ph> 속성은 <ph id="ph2">`null`</ph>, 메시지 개체의 이름을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ObjectDisposedException.Message">
          <source>This property overrides <ph id="ph1">&lt;xref:System.Exception.Message%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">이 속성을 재정의 <ph id="ph1">&lt;xref:System.Exception.Message%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.ObjectDisposedException.ObjectName">
          <source>Gets the name of the disposed object.</source>
          <target state="translated">삭제된 개체의 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ObjectDisposedException.ObjectName">
          <source>A string containing the name of the disposed object.</source>
          <target state="translated">삭제된 개체의 이름이 포함된 문자열입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ObjectDisposedException.ObjectName">
          <source>If the current property is not <ph id="ph1">`null`</ph> or <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>, the value of this property is included in the string returned by the <ph id="ph3">&lt;xref:System.ObjectDisposedException.Message%2A&gt;</ph> property.</source>
          <target state="translated">현재 속성이 없으면 <ph id="ph1">`null`</ph> 또는 <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>,이 속성의 값은 반환 하는 문자열에 포함 된 <ph id="ph3">&lt;xref:System.ObjectDisposedException.Message%2A&gt;</ph> 속성.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>