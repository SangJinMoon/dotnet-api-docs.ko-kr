<Type Name="Int64" FullName="System.Int64">
  <TypeSignature Language="C#" Value="public struct Int64 : IComparable, IComparable&lt;long&gt;, IConvertible, IEquatable&lt;long&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit int64 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;int64&gt;, class System.IConvertible, class System.IEquatable`1&lt;int64&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Int64" />
  <TypeSignature Language="VB.NET" Value="Public Structure Int64&#xA;Implements IComparable, IComparable(Of Long), IConvertible, IEquatable(Of Long), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Int64 : IComparable, IComparable&lt;long&gt;, IConvertible, IEquatable&lt;long&gt;, IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Int64&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Int64&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="08553-101">부호 있는 64비트 정수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="08553-101">Represents a 64-bit signed integer.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-102"><xref:System.Int64> 부호 있는 음수 9,223,372,036,854,775,808에서 범위의 값을 가진 정수를 나타내는 변경할 수 없는 값 형식이 됩니다 (클래스로 표현 되는 <xref:System.Int64.MinValue?displayProperty=nameWithType> 상수) (나타나는 양수9223372036854775807<xref:System.Int64.MaxValue?displayProperty=nameWithType> 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-102"><xref:System.Int64> is an immutable value type that represents signed integers with values that range from negative 9,223,372,036,854,775,808 (which is represented by the <xref:System.Int64.MinValue?displayProperty=nameWithType> constant) through positive 9,223,372,036,854,775,807 (which is represented by the <xref:System.Int64.MaxValue?displayProperty=nameWithType> constant.</span></span> <span data-ttu-id="08553-103">또한.NET Framework는 부호 없는 64 비트 정수 값 형식과 포함 <xref:System.UInt64>, 0에서 18446744073709551615 까지의 값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="08553-103">The .NET Framework also includes an unsigned 64-bit integer value type, <xref:System.UInt64>, which represents values that range from 0 to 18,446,744,073,709,551,615.</span></span>  
  
## <a name="instantiating-an-int64-value"></a><span data-ttu-id="08553-104">Int64 값 인스턴스화</span><span class="sxs-lookup"><span data-stu-id="08553-104">Instantiating an Int64 Value</span></span>  
 <span data-ttu-id="08553-105">인스턴스화할 수 있습니다는 <xref:System.Int64> 여러 가지 방법으로 값:</span><span class="sxs-lookup"><span data-stu-id="08553-105">You can instantiate an <xref:System.Int64> value in several ways:</span></span>  
  
-   <span data-ttu-id="08553-106">선언할 수는 <xref:System.Int64> 변수 범위 내에 있는 정수 리터럴 값을 할당 하 고는 <xref:System.Int64> 데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-106">You can declare an <xref:System.Int64> variable and assign it a literal integer value that is within the range of the <xref:System.Int64> data type.</span></span> <span data-ttu-id="08553-107">다음 예제에서는 두 개의 선언 <xref:System.Int64> 변수가이 방식으로 값을 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-107">The following example declares two <xref:System.Int64> variables and assigns them values in this way.</span></span>  
  
     [!code-csharp[System.Int64.Instantiation#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int64.instantiation/cs/instantiate1.cs#1)]
     [!code-vb[System.Int64.Instantiation#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int64.instantiation/vb/instantiate1.vb#1)]  
  
-   <span data-ttu-id="08553-108">해당 범위를 초과 하는 정수 계열 형식 값을 할당할 수의 <xref:System.Int64> 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-108">You can assign the value of an integral type whose range is a subset of the <xref:System.Int64> type.</span></span> <span data-ttu-id="08553-109">캐스트 연산자에서 C# 또는 Visual Basic의 변환 메서드는 필요 하지 않은 확대 변환입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-109">This is a widening conversion that does not require a cast operator in C# or a conversion method in Visual Basic.</span></span>  
  
     [!code-csharp[System.Int64.Instantiation#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int64.instantiation/cs/instantiate1.cs#4)]
     [!code-vb[System.Int64.Instantiation#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int64.instantiation/vb/instantiate1.vb#4)]  
  
-   <span data-ttu-id="08553-110">해당 범위를 초과 하는 숫자 형식의 값을 할당할 수의 <xref:System.Int64> 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-110">You can assign the value of a numeric type whose range exceeds that of the <xref:System.Int64> type.</span></span> <span data-ttu-id="08553-111">경우는 캐스트 연산자에서 C# 및 Visual Basic의 변환 메서드 필요한 축소 변환 이므로 `Option Strict` 켜져 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-111">This is a narrowing conversion, so it requires a cast operator in C# and a conversion method in Visual Basic if `Option Strict` is on.</span></span> <span data-ttu-id="08553-112">숫자 값이 한 <xref:System.Single>, <xref:System.Double>, 또는 <xref:System.Decimal> 소수 부분의 처리 소수 부분을 포함 하는 값은 변환이 수행 하는 컴파일러에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="08553-112">If the numeric value is a <xref:System.Single>, <xref:System.Double>, or <xref:System.Decimal> value that includes a fractional component, the handling of its fractional part depends on the compiler performing the conversion.</span></span> <span data-ttu-id="08553-113">다음 예제에서는 여러 가지 숫자 값을 할당 하는 축소 변환을 수행 <xref:System.Int64> 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-113">The following example performs narrowing conversions to assign several numeric values to <xref:System.Int64> variables.</span></span>  
  
     [!code-csharp[System.Int64.Instantiation#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int64.instantiation/cs/instantiate1.cs#2)]
     [!code-vb[System.Int64.Instantiation#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int64.instantiation/vb/instantiate1.vb#2)]  
  
-   <span data-ttu-id="08553-114">메서드를 호출할 수는 <xref:System.Convert> 변환할 수는 클래스 형식을 지원 되는 <xref:System.Int64> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-114">You can call a method of the <xref:System.Convert> class to convert any supported type to an <xref:System.Int64> value.</span></span> <span data-ttu-id="08553-115">이것이 가능 하기 때문에 <xref:System.Int64> 지원는 <xref:System.IConvertible> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-115">This is possible because <xref:System.Int64> supports the <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-116">다음 예제에서는 배열 변환 <xref:System.Decimal> 값을 <xref:System.Int64> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-116">The following example illustrates the conversion of an array of <xref:System.Decimal> values to <xref:System.Int64> values.</span></span>  
  
     [!code-csharp[System.Convert.ToInt64#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.convert.toint64/cs/toint64_1.cs#4)]
     [!code-vb[System.Convert.ToInt64#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.convert.toint64/vb/toint64_1.vb#4)]  
  
-   <span data-ttu-id="08553-117">호출할 수 있습니다는 <xref:System.Int64.Parse%2A> 또는 <xref:System.Int64.TryParse%2A> 의 문자열 표현으로 변환 하는 메서드는 <xref:System.Int64> 값을 <xref:System.Int64>합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-117">You can call the <xref:System.Int64.Parse%2A> or <xref:System.Int64.TryParse%2A> method to convert the string representation of an <xref:System.Int64> value to an <xref:System.Int64>.</span></span> <span data-ttu-id="08553-118">문자열에는 10 진수 또는 16 진수로 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-118">The string can contain either decimal or hexadecimal digits.</span></span> <span data-ttu-id="08553-119">다음 예제에서는 10 진수 및 16 진수 문자열 모두를 사용 하 여 구문 분석 작업을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="08553-119">The following example illustrates the parse operation by using both a decimal and a hexadecimal string.</span></span>  
  
     [!code-csharp[System.Int64.Instantiation#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int64.instantiation/cs/instantiate1.cs#3)]
     [!code-vb[System.Int64.Instantiation#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int64.instantiation/vb/instantiate1.vb#3)]  
  
## <a name="performing-operations-on-int64-values"></a><span data-ttu-id="08553-120">Int64 값에 대 한 작업을 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-120">Performing Operations on Int64 Values</span></span>  
 <span data-ttu-id="08553-121"><xref:System.Int64> 형식은 더하기, 빼기, 나누기, 곱하기, 부정, 단항 부정 연산자 등과 같이 표준 수학 연산을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-121">The <xref:System.Int64> type supports standard mathematical operations such as addition, subtraction, division, multiplication, negation, and unary negation.</span></span> <span data-ttu-id="08553-122">다른 정수 계열 형식과 같이 <xref:System.Int64> 형식에서는 비트 `AND`, `OR`, `XOR`, 왼쪽 시프트 및 오른쪽 시프트 연산자.</span><span class="sxs-lookup"><span data-stu-id="08553-122">Like the other integral types, the <xref:System.Int64> type also supports the bitwise `AND`, `OR`, `XOR`, left shift, and right shift operators.</span></span>  
  
 <span data-ttu-id="08553-123">표준 숫자 연산자를 사용 하 여 두 개를 비교 하려면 <xref:System.Int64> 값 또는 있습니다를 호출할 수는 <xref:System.Int64.CompareTo%2A> 또는 <xref:System.Int64.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-123">You can use the standard numeric operators to compare two <xref:System.Int64> values, or you can call the <xref:System.Int64.CompareTo%2A> or <xref:System.Int64.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="08553-124">멤버를 호출할 수도 있습니다는 <xref:System.Math> 다양 한 범위의 숫자의 몫과 정수 나누기의 나머지를 계산 합니다. 2의 최대값 또는 최소값 값을 판별한 절대 값을 가져오는 등의 숫자 작업을 수행 하는 클래스 정수 (long), 숫자의 부호를 가져오고 숫자를 반올림 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-124">You can also call the members of the <xref:System.Math> class to perform a wide range of numeric operations, including getting the absolute value of a number, calculating the quotient and remainder from integral division, determining the maximum or minimum value of two long integers, getting the sign of a number, and rounding a number.</span></span>  
  
## <a name="representing-an-int64-as-a-string"></a><span data-ttu-id="08553-125">문자열로 서 Int64 나타내는</span><span class="sxs-lookup"><span data-stu-id="08553-125">Representing an Int64 as a String</span></span>  
 <span data-ttu-id="08553-126"><xref:System.Int64> 형식은 표준 및 사용자 지정 숫자 형식 문자열에 대 한 완벽 한 지원 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-126">The <xref:System.Int64> type provides full support for standard and custom numeric format strings.</span></span> <span data-ttu-id="08553-127">(자세한 내용은 참조 [형식 지정](~/docs/standard/base-types/formatting-types.md), [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md), 및 [사용자 지정 숫자 형식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md).)</span><span class="sxs-lookup"><span data-stu-id="08553-127">(For more information, see [Formatting Types](~/docs/standard/base-types/formatting-types.md), [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md), and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).)</span></span>  
  
 <span data-ttu-id="08553-128">서식을 지정 하려면는 <xref:System.Int64> 값 선행 0이 없는 정수 계열 문자열로 매개 변수가 없는 호출 수 <xref:System.Int64.ToString> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-128">To format an <xref:System.Int64> value as an integral string with no leading zeros, you can call the parameterless <xref:System.Int64.ToString> method.</span></span> <span data-ttu-id="08553-129">"D" 형식 지정자를 사용 하 여 지정된 된 수의 문자열 표현에서 앞에 오는 0 포함할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-129">By using the "D" format specifier, you can also include a specified number of leading zeros in the string representation.</span></span> <span data-ttu-id="08553-130">"N" 형식 지정자를 사용 하 여 그룹 구분 기호 등 숫자의 문자열 표현에 표시할 소수 자릿수 수를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-130">By using the "N" format specifier, you can include group separators and specify the number of decimal digits to appear in the string representation of the number.</span></span> <span data-ttu-id="08553-131">"X" 형식 지정자를 사용 하 여 나타낼 수 있습니다는 <xref:System.Int64> 16 진수 문자열 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-131">By using the "X" format specifier, you can represent an <xref:System.Int64> value as a hexadecimal string.</span></span> <span data-ttu-id="08553-132">다음 예제에서는 배열의 요소를 서식을 <xref:System.Int64> 이러한 네 가지 방법으로 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-132">The following example formats the elements in an array of <xref:System.Int64> values in these four ways.</span></span>  
  
 [!code-csharp[System.Int64.Formatting#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int64.formatting/cs/formatting1.cs#1)]
 [!code-vb[System.Int64.Formatting#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int64.formatting/vb/formatting1.vb#1)]  
  
 <span data-ttu-id="08553-133">서식을 지정할 수 있습니다는 <xref:System.Int64> 8 진수 이진으로 호출 하 여 10 진수 또는 16 진수 문자열 값의 <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> 메서드와 메서드의 두 번째 매개 변수로 기본을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-133">You can also format an <xref:System.Int64> value as a binary, octal, decimal, or hexadecimal string by calling the <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> method and supplying the base as the method's second parameter.</span></span> <span data-ttu-id="08553-134">다음 예제에서는이 메서드를 호출 8 진수 이진 파일을 표시 하는 일련의 정수 값의 16 진수 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-134">The following example calls this method to display the binary, octal, and hexadecimal representations of an array of integer values.</span></span>  
  
 [!code-csharp[System.Int64.Formatting#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int64.formatting/cs/formatting1.cs#2)]
 [!code-vb[System.Int64.Formatting#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int64.formatting/vb/formatting1.vb#2)]  
  
## <a name="working-with-non-decimal-32-bit-integer-values"></a><span data-ttu-id="08553-135">10 진수가 아닌 32 비트 정수 값 작업</span><span class="sxs-lookup"><span data-stu-id="08553-135">Working with Non-Decimal 32-Bit Integer Values</span></span>  
 <span data-ttu-id="08553-136">10 진수 값으로 개별 long 정수를 사용 하는 것 외에도 정수 (long) 값으로 비트 연산을 수행 하거나 정수 (long) 값의 이진 또는 16 진수 표현을 사용 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-136">In addition to working with individual long integers as decimal values, you may want to perform bitwise operations with long integer values, or work with the binary or hexadecimal representations of long integer values.</span></span> <span data-ttu-id="08553-137"><xref:System.Int64> 값 63 비트/64 비트를 부호 비트로 사용 되는 표현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-137"><xref:System.Int64> values are represented in 63 bits, with the sixty-fourth bit used as a sign bit.</span></span> <span data-ttu-id="08553-138">양수 부호 및 크기 표현을 사용 하 여 표현 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-138">Positive values are represented by using sign-and-magnitude representation.</span></span> <span data-ttu-id="08553-139">음수 값은 2의 보수 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-139">Negative values are in two's complement representation.</span></span> <span data-ttu-id="08553-140">이 비트 작업을 수행할 때 고려해 야 하는 것이 중요 <xref:System.Int64> 값 또는 개별 비트를 사용 하 여 작업할 때.</span><span class="sxs-lookup"><span data-stu-id="08553-140">This is important to keep in mind when you perform bitwise operations on <xref:System.Int64> values or when you work with individual bits.</span></span> <span data-ttu-id="08553-141">숫자, 부울 또는 모든 두 개의 10 진수가 아닌 값 비교 작업을 수행 하려면 두 값이 동일한 표현을 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-141">In order to perform a numeric, Boolean, or comparison operation on any two non-decimal values, both values must use the same representation.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="08553-142">이 유형의 모든 멤버는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-142">All members of this type are thread safe.</span></span> <span data-ttu-id="08553-143">멤버 인스턴스 상태를 수정 하려면 표시 되는 실제로 새 값으로 초기화 하는 새 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-143">Members that appear to modify instance state actually return a new instance initialized with the new value.</span></span> <span data-ttu-id="08553-144">으로 다른 종류와이 형식의 인스턴스를 포함 하는 공유 변수를 읽고 쓰는 보호 해야 스레드로부터 안전을 보장 하려면 잠금에 의해.</span><span class="sxs-lookup"><span data-stu-id="08553-144">As with any other type, reading and writing to a shared variable that contains an instance of this type must be protected by a lock to guarantee thread safety.</span></span></threadsafe>
    <altmember cref="T:System.UInt64" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="08553-145">이 인스턴스를 지정된 개체나 <see cref="T:System.Int64" />와 비교하여 상대 값의 표시를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-145">Compares this instance to a specified object or <see cref="T:System.Int64" /> and returns an indication of their relative values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.CompareTo(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(long value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="08553-146">비교할 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-146">An integer to compare.</span></span></param>
        <summary><span data-ttu-id="08553-147">이 인스턴스를 지정된 64비트 부호 있는 정수와 비교하여 상대 값의 표시를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-147">Compares this instance to a specified 64-bit signed integer and returns an indication of their relative values.</span></span></summary>
        <returns><span data-ttu-id="08553-148">이 인스턴스와 <paramref name="value" />의 상대 값을 나타내는 부호 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-148">A signed number indicating the relative values of this instance and <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="08553-149"><list type="table"><listheader><term> 반환 값</span><span class="sxs-lookup"><span data-stu-id="08553-149"><list type="table"><listheader><term> Return Value</span></span>  
  
 <span data-ttu-id="08553-150"></term><description> 설명</span><span class="sxs-lookup"><span data-stu-id="08553-150"></term><description> Description</span></span>  
  
 <span data-ttu-id="08553-151"></description></listheader><item><term> 0보다 작음</span><span class="sxs-lookup"><span data-stu-id="08553-151"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="08553-152"></term><description> 이 인스턴스는 <paramref name="value" />보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-152"></term><description> This instance is less than <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="08553-153"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="08553-153"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="08553-154"></term><description> 이 인스턴스는 <paramref name="value" />와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-154"></term><description> This instance is equal to <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="08553-155"></description></item><item><term> 0보다 큼</span><span class="sxs-lookup"><span data-stu-id="08553-155"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="08553-156"></term><description> 이 인스턴스는 <paramref name="value" />보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="08553-156"></term><description> This instance is greater than <paramref name="value" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-157">이 메서드를 구현 하는 <xref:System.IComparable%601?displayProperty=nameWithType> 인터페이스 및 수행 보다 조금 더 나은 <xref:System.Int64.CompareTo%2A?displayProperty=nameWithType> 메서드 변환할 필요가 없기 때문에 `value` 매개 변수를 개체로 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-157">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.Int64.CompareTo%2A?displayProperty=nameWithType> method because it does not have to convert the `value` parameter to an object.</span></span>  
  
 <span data-ttu-id="08553-158">프로그래밍 언어에 따라 코딩할 수는 <xref:System.Int64.CompareTo%2A> 메서드 매개 변수 형식이 비트 수가 적은 보다 인스턴스 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-158">Depending on your programming language, it might be possible to code a <xref:System.Int64.CompareTo%2A> method where the parameter type has fewer bits (is narrower) than the instance type.</span></span> <span data-ttu-id="08553-159">일부 프로그래밍 언어 매개 변수를 나타내는 형식으로 비트 수는 인스턴스와 암시적 확대 변환을 수행 하기 때문에 이것이 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-159">This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</span></span>  
  
 <span data-ttu-id="08553-160">예를 들어 인스턴스 형식이 <xref:System.Int32> 매개 변수 형식이 고 <xref:System.Byte>합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-160">For example, suppose the instance type is <xref:System.Int32> and the parameter type is <xref:System.Byte>.</span></span> <span data-ttu-id="08553-161">Microsoft C# 컴파일러는 매개 변수의 값을 나타내는 명령을 생성 한 <xref:System.Int32> 개체를 생성 합니다.는 <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> 의 값을 비교 하는 메서드는 <xref:System.Int32> 인스턴스 및 <xref:System.Int32> 매개 변수 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-161">The Microsoft C# compiler generates instructions to represent the value of the parameter as an <xref:System.Int32> object, then generates a <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> method that compares the values of the <xref:System.Int32> instance and the <xref:System.Int32> parameter representation.</span></span>  
  
 <span data-ttu-id="08553-162">해당 컴파일러에서 숫자 형식에 암시적으로 확대 변환을 수행 여부를 확인 하려면 해당 프로그래밍 언어의 설명서를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="08553-162">Consult your programming language's documentation to determine whether its compiler performs implicit widening conversions on numeric types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08553-163">다음 코드 예제에서는 제네릭 및 제네릭이 아닌 버전을 보여 줍니다.는 <xref:System.Int64.CompareTo%2A> 여러 값 및 참조 형식에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-163">The following code example demonstrates generic and nongeneric versions of the <xref:System.Int64.CompareTo%2A> method for several value and reference types.</span></span>  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.UInt64" />
        <altmember cref="M:System.Int64.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="08553-164">비교할 개체 또는 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-164">An object to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="08553-165">이 인스턴스를 지정된 개체와 비교하여 상대 값의 표시를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-165">Compares this instance to a specified object and returns an indication of their relative values.</span></span></summary>
        <returns><span data-ttu-id="08553-166">이 인스턴스와 <paramref name="value" />의 상대 값을 나타내는 부호 있는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-166">A signed number indicating the relative values of this instance and <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="08553-167"><list type="table"><listheader><term> 반환 값</span><span class="sxs-lookup"><span data-stu-id="08553-167"><list type="table"><listheader><term> Return Value</span></span>  
  
 <span data-ttu-id="08553-168"></term><description> 설명</span><span class="sxs-lookup"><span data-stu-id="08553-168"></term><description> Description</span></span>  
  
 <span data-ttu-id="08553-169"></description></listheader><item><term> 0보다 작음</span><span class="sxs-lookup"><span data-stu-id="08553-169"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="08553-170"></term><description> 이 인스턴스는 <paramref name="value" />보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-170"></term><description> This instance is less than <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="08553-171"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="08553-171"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="08553-172"></term><description> 이 인스턴스는 <paramref name="value" />와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-172"></term><description> This instance is equal to <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="08553-173"></description></item><item><term> 0보다 큼</span><span class="sxs-lookup"><span data-stu-id="08553-173"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="08553-174"></term><description> 이 인스턴스는 <paramref name="value" />보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="08553-174"></term><description> This instance is greater than <paramref name="value" />.</span></span>  
  
 <span data-ttu-id="08553-175">또는</span><span class="sxs-lookup"><span data-stu-id="08553-175">-or-</span></span>  
  
 <span data-ttu-id="08553-176"><paramref name="value" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="08553-176"><paramref name="value" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-177"><xref:System.Int64>, 해당 값에 관계 없이 null 참조 정보 보다 큰 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-177">An <xref:System.Int64>, regardless of its value, is considered greater than a null reference.</span></span>  
  
 <span data-ttu-id="08553-178">`value` 매개 변수 여야 `null` 또는 인스턴스의 <xref:System.Int64>, 그러지 않으면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-178">The `value` parameter must be `null` or an instance of <xref:System.Int64>; otherwise, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="08553-179"><paramref name="value" />이 <see cref="T:System.Int64" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="08553-179"><paramref name="value" /> is not an <see cref="T:System.Int64" />.</span></span></exception>
        <altmember cref="T:System.UInt64" />
        <altmember cref="M:System.Int64.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="08553-180">이 인스턴스가 지정된 개체나 <see cref="T:System.Int64" />과 같은지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-180">Returns a value indicating whether this instance is equal to a specified object or <see cref="T:System.Int64" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (long obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(int64 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.Equals(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(long obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="08553-181">이 인스턴스와 비교할 <see cref="T:System.Int64" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-181">An <see cref="T:System.Int64" /> value to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="08553-182">이 인스턴스가 지정된 <see cref="T:System.Int64" /> 값과 같은지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-182">Returns a value indicating whether this instance is equal to a specified <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns>
          <span data-ttu-id="08553-183"><see langword="true" />가 이 인터페이스와 같은 값을 가지면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-183"><see langword="true" /> if <paramref name="obj" /> has the same value as this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-184">이 메서드를 구현 하는 <xref:System.IEquatable%601?displayProperty=nameWithType> 인터페이스를 하 고 수행 보다 조금 더 나은 <xref:System.Int64.Equals%2A> 변환할 필요가 없기 때문에 `obj` 매개 변수를 개체로 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-184">This method implements the <xref:System.IEquatable%601?displayProperty=nameWithType> interface, and performs slightly better than <xref:System.Int64.Equals%2A> because it does not have to convert the `obj` parameter to an object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="08553-185">컴파일러 오버 로드 확인의 두 동작에는 명백한 차이 고려 될 수 있습니다 <see cref="M:System.Int64.Equals(System.Int64)" /> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-185">Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Int64.Equals(System.Int64)" /> method overloads.</span></span> <span data-ttu-id="08553-186">경우 간에 암시적 변환이 <paramref name="obj" /> 인수 및 <see cref="T:System.Int64" /> 정의 및 인수 인수로 형식화 되지 않습니다는 <see cref="T:System.Object" />, 컴파일러는 암시적 변환 및 호출을 수행는 <see cref="M:System.Int64.Equals(System.Int64)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-186">If an implicit conversion between the <paramref name="obj" /> argument and an <see cref="T:System.Int64" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers perform an implicit conversion and call the <see cref="M:System.Int64.Equals(System.Int64)" /> method.</span></span> <span data-ttu-id="08553-187">호출 그렇지 않은 경우는 <see cref="M:System.Int64.Equals(System.Object)" /> 메서드는 항상 반환 <see langword="false" /> 경우 해당 <paramref name="obj" /> 인수가 <see cref="T:System.Int64" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-187">Otherwise, they call the <see cref="M:System.Int64.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not an <see cref="T:System.Int64" /> value.</span></span> <span data-ttu-id="08553-188">다음 예제에서는 두 개의 메서드 오버 로드 간의 동작 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="08553-188">The following example illustrates the difference in behavior between the two method overloads.</span></span> <span data-ttu-id="08553-189">경우에 <see cref="T:System.Byte" />, <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, 및 <see cref="T:System.UInt32" /> 값을 반환 하는 첫 번째 비교 <see langword="true" /> 컴파일러가 확대 변환 및 호출에 자동으로 수행 하기 때문에 <see cref="M:System.Int64.Equals(System.Int64)" /> 메서드를 두 번째 비교를 반환 하는 반면 <see langword="false" /> 컴파일러를 호출 하기 때문에 <see cref="M:System.Int64.Equals(System.Object)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-189">In the case of the <see cref="T:System.Byte" />, <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, and <see cref="T:System.UInt32" /> values, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Int64.Equals(System.Int64)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Int64.Equals(System.Object)" /> method.</span></span>  
  
 [!code-csharp[System.Int64.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int64.equals/cs/equalsoverl.cs#1)]
 [!code-vb[System.Int64.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int64.equals/vb/equalsoverl.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="08553-190">이 인스턴스와 비교할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-190">An object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="08553-191">이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-191">Returns a value indicating whether this instance is equal to a specified object.</span></span></summary>
        <returns>
          <span data-ttu-id="08553-192"><see langword="true" />가 <paramref name="obj" />의 인스턴스이고 이 인스턴스의 값과 같으면 <see cref="T:System.Int64" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-192"><see langword="true" /> if <paramref name="obj" /> is an instance of an <see cref="T:System.Int64" /> and equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="08553-193">다음 코드 예제에서는 `Equals` 의 컨텍스트에서 `Int64`두 긴 값을 비교 하 고 반환 `true` 같은 값을 나타내는 경우 또는 `false` 일치 하지 않을 경우.</span><span class="sxs-lookup"><span data-stu-id="08553-193">The following code example illustrates the use of `Equals` in the context of `Int64`, comparing two long values and returning `true` if they represent the same number, or `false` if they do not.</span></span>  
  
 [!code-cpp[Int64_Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/Int64_Equals/CPP/int64_equals.cpp#1)]
 [!code-csharp[Int64_Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/Int64_Equals/CS/int64_equals.cs#1)]
 [!code-vb[Int64_Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Int64_Equals/VB/int64_equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="08553-194">컴파일러 오버 로드 확인의 두 동작에는 명백한 차이 고려 될 수 있습니다 <see cref="M:System.Int64.Equals(System.Int64)" /> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-194">Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Int64.Equals(System.Int64)" /> method overloads.</span></span> <span data-ttu-id="08553-195">경우 간에 암시적 변환이 <paramref name="obj" /> 인수 및 <see cref="T:System.Int64" /> 정의 및 인수 인수로 형식화 되지 않습니다는 <see cref="T:System.Object" />, 컴파일러는 암시적 변환 및 호출을 수행는 <see cref="M:System.Int64.Equals(System.Int64)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-195">If an implicit conversion between the <paramref name="obj" /> argument and an <see cref="T:System.Int64" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers perform an implicit conversion and call the <see cref="M:System.Int64.Equals(System.Int64)" /> method.</span></span> <span data-ttu-id="08553-196">호출 그렇지 않은 경우는 <see cref="M:System.Int64.Equals(System.Object)" /> 메서드는 항상 반환 <see langword="false" /> 경우 해당 <paramref name="obj" /> 인수가 <see cref="T:System.Int64" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-196">Otherwise, they call the <see cref="M:System.Int64.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not an <see cref="T:System.Int64" /> value.</span></span> <span data-ttu-id="08553-197">다음 예제에서는 두 개의 메서드 오버 로드 간의 동작 차이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="08553-197">The following example illustrates the difference in behavior between the two method overloads.</span></span> <span data-ttu-id="08553-198">경우에 <see cref="T:System.Byte" />, <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, 및 <see cref="T:System.UInt32" /> 값을 반환 하는 첫 번째 비교 <see langword="true" /> 컴파일러가 확대 변환 및 호출에 자동으로 수행 하기 때문에 <see cref="M:System.Int64.Equals(System.Int64)" /> 메서드를 두 번째 비교를 반환 하는 반면 <see langword="false" /> 컴파일러를 호출 하기 때문에 <see cref="M:System.Int64.Equals(System.Object)" /> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-198">In the case of the <see cref="T:System.Byte" />, <see cref="T:System.SByte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, and <see cref="T:System.UInt32" /> values, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Int64.Equals(System.Int64)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Int64.Equals(System.Object)" /> method.</span></span>  
  
 [!code-csharp[System.Int64.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int64.equals/cs/equalsoverl.cs#1)]
 [!code-vb[System.Int64.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int64.equals/vb/equalsoverl.vb#1)]</para>
        </block>
        <altmember cref="M:System.Int64.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08553-199">이 인스턴스의 해시 코드를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-199">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="08553-200">부호 있는 32비트 정수 해시 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-200">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08553-201"><see cref="T:System.TypeCode" /> 값 형식에 대한 <see cref="T:System.Int64" />를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-201">Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="08553-202">열거형 상수인 <see cref="F:System.TypeCode.Int64" />입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-202">The enumerated constant, <see cref="F:System.TypeCode.Int64" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const long MaxValue = 9223372036854775807;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 MaxValue = int64(9223372036854775807)" />
      <MemberSignature Language="DocId" Value="F:System.Int64.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Long  = 9223372036854775807" />
      <MemberSignature Language="C++ CLI" Value="public: long MaxValue = 9223372036854775807;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>9223372036854775807</MemberValue>
      <Docs>
        <summary><span data-ttu-id="08553-203"><see langword="Int64" />의 최대값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="08553-203">Represents the largest possible value of an <see langword="Int64" />.</span></span> <span data-ttu-id="08553-204">이 필드는 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-204">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-205">이 상수의 값은 9223372036854775807; 즉, 16 진수 0x7FFFFFFFFFFFFFFF 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-205">The value of this constant is 9,223,372,036,854,775,807; that is, hexadecimal 0x7FFFFFFFFFFFFFFF.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Int64.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const long MinValue = -9223372036854775808;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 MinValue = int64(-9223372036854775808)" />
      <MemberSignature Language="DocId" Value="F:System.Int64.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Long  = -9223372036854775808" />
      <MemberSignature Language="C++ CLI" Value="public: long MinValue = -9223372036854775808;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>-9223372036854775808</MemberValue>
      <Docs>
        <summary><span data-ttu-id="08553-206"><see langword="Int64" />의 최소값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="08553-206">Represents the smallest possible value of an <see langword="Int64" />.</span></span> <span data-ttu-id="08553-207">이 필드는 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-207">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-208">이 상수의 값은 음수 9,223,372,036,854,775,808; 즉, 16 진수 0x8000000000000000 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-208">The value of this constant is negative 9,223,372,036,854,775,808; that is, hexadecimal 0x8000000000000000.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Int64.MaxValue" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="08553-209">숫자의 문자열 표현을 해당하는 64비트 부호 있는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-209">Converts the string representation of a number to its 64-bit signed integer equivalent.</span></span></summary>
        <altmember cref="Overload:System.Int64.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static long Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Parse(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="08553-210">변환할 숫자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-210">A string containing a number to convert.</span></span></param>
        <summary><span data-ttu-id="08553-211">숫자의 문자열 표현을 해당하는 64비트 부호 있는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-211">Converts the string representation of a number to its 64-bit signed integer equivalent.</span></span></summary>
        <returns><span data-ttu-id="08553-212"><paramref name="s" />에 있는 수에 해당하는 64비트 부호 있는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-212">A 64-bit signed integer equivalent to the number contained in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-213">`s` 매개 변수 형식의 숫자를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-213">The `s` parameter contains a number of the form:</span></span>  
  
 <span data-ttu-id="08553-214">[ws][sign]digits[ws]</span><span class="sxs-lookup"><span data-stu-id="08553-214">[ws][sign]digits[ws]</span></span>  
  
 <span data-ttu-id="08553-215">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-215">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="08553-216">다음 표에서 각 요소에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-216">The following table describes each element.</span></span>  
  
|<span data-ttu-id="08553-217">요소</span><span class="sxs-lookup"><span data-stu-id="08553-217">Element</span></span>|<span data-ttu-id="08553-218">설명</span><span class="sxs-lookup"><span data-stu-id="08553-218">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="08553-219">ws</span><span class="sxs-lookup"><span data-stu-id="08553-219">ws</span></span>|<span data-ttu-id="08553-220">선택적 공백입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-220">Optional white space.</span></span>|  
|<span data-ttu-id="08553-221">sign</span><span class="sxs-lookup"><span data-stu-id="08553-221">sign</span></span>|<span data-ttu-id="08553-222">가 선택적 부호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-222">An optional sign.</span></span>|  
|<span data-ttu-id="08553-223">digits</span><span class="sxs-lookup"><span data-stu-id="08553-223">digits</span></span>|<span data-ttu-id="08553-224">0에서 9 사이의 숫자 시퀀스입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-224">A sequence of digits ranging from 0 to 9.</span></span>|  
  
 <span data-ttu-id="08553-225">`s` 매개 변수를 사용 하 여 해석 되는 <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> 스타일입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-225">The `s` parameter is interpreted using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="08553-226">10 진수 숫자, 이외에 선행 및 후행 공백을 선행 기호 함께 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-226">In addition to decimal digits, only leading and trailing spaces together with a leading sign are allowed.</span></span> <span data-ttu-id="08553-227">에 나타날 수 있는 스타일 요소를 명시적으로 정의 하려면 `s`를 사용 하 여는 <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> 또는 <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-227">To explicitly define the style elements that can be present in `s`, use either the <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> or the <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="08553-228">`s` 매개 변수에서 서식 지정 정보를 사용 하 여 구문 분석 되는 <xref:System.Globalization.NumberFormatInfo> 현재 시스템 문화권에 따라 초기화 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-228">The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="08553-229">다른 문화권의 서식 지정 정보를 사용 하 여 문자열의 구문을 분석을 사용 하 여는 <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-229">To parse a string using the formatting information of some other culture, use the <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08553-230">다음 예제에서는 문자열 값을 사용 하 여 64 비트 부호 있는 정수 값으로 변환 하는 <xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-230">The following example demonstrates how to convert a string value into a 64-bit signed integer value using the <xref:System.Int64.Parse%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="08553-231">결과 정수 (long) 값을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-231">It then displays the resulting long integer value.</span></span>  
  
 [!code-csharp[System.Int64.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int64.parse/cs/Parse1.cs#1)]
 [!code-vb[System.Int64.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int64.parse/vb/Parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="08553-232"><paramref name="s" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="08553-232"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="08553-233"><paramref name="s" />의 형식이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="08553-233"><paramref name="s" /> is not in the correct format.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="08553-234"><paramref name="s" />가 <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="08553-234"><paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Int64.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static long Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="08553-235">변환할 숫자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-235">A string containing a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="08553-236"><c>s</c>에 사용할 수 있는 형식을 나타내는 <see cref="T:System.Globalization.NumberStyles" /> 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-236">A bitwise combination of <see cref="T:System.Globalization.NumberStyles" /> values that indicates the permitted format of <c>s</c>.</span></span> <span data-ttu-id="08553-237">지정할 일반적인 값은 <see cref="F:System.Globalization.NumberStyles.Integer" />입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-237">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</span></span></param>
        <summary><span data-ttu-id="08553-238">지정된 스타일로 된 숫자의 문자열 표현을 해당하는 64비트 부호 있는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-238">Converts the string representation of a number in a specified style to its 64-bit signed integer equivalent.</span></span></summary>
        <returns><span data-ttu-id="08553-239"><paramref name="s" />에 지정된 숫자에 해당하는 64비트 부호 있는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-239">A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-240">`style` 스타일 요소를 정의 하는 매개 변수 (예: 공백, 양수 또는 음수 부호 기호 또는 1000 단위 구분 기호)에 허용 되는 `s` 구문 분석 작업이 성공 하려면에 대 한 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="08553-240">The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, or the thousands separator symbol) that are allowed in the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="08553-241">비트 플래그의 조합 이어야 합니다는 <xref:System.Globalization.NumberStyles> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-241">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="08553-242">값에 따라 `style`, `s` 매개 변수는 다음과 같은 요소가 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-242">Depending on the value of `style`, the `s` parameter may contain the following elements:</span></span>  
  
 <span data-ttu-id="08553-243">[ws][$][sign][digits,]digits[.fractional_digits][e[sign]exponential_digits][ws]</span><span class="sxs-lookup"><span data-stu-id="08553-243">[ws][$][sign][digits,]digits[.fractional_digits][e[sign]exponential_digits][ws]</span></span>  
  
 <span data-ttu-id="08553-244">또는 if `style` 포함 <xref:System.Globalization.NumberStyles.AllowHexSpecifier>:</span><span class="sxs-lookup"><span data-stu-id="08553-244">Or, if `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>:</span></span>  
  
 <span data-ttu-id="08553-245">[ws]hexdigits[ws]</span><span class="sxs-lookup"><span data-stu-id="08553-245">[ws]hexdigits[ws]</span></span>  
  
 <span data-ttu-id="08553-246">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-246">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="08553-247">다음 표에서 각 요소에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-247">The following table describes each element.</span></span>  
  
|<span data-ttu-id="08553-248">요소</span><span class="sxs-lookup"><span data-stu-id="08553-248">Element</span></span>|<span data-ttu-id="08553-249">설명</span><span class="sxs-lookup"><span data-stu-id="08553-249">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="08553-250">*ws*</span><span class="sxs-lookup"><span data-stu-id="08553-250">*ws*</span></span>|<span data-ttu-id="08553-251">선택적 공백입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-251">Optional white space.</span></span> <span data-ttu-id="08553-252">맨 앞에 공백이 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 의 끝에 있고, 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-252">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="08553-253">Culture 별 통화 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-253">A culture-specific currency symbol.</span></span> <span data-ttu-id="08553-254">문자열에 해당 위치는 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> 현재 문화권의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-254">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="08553-255">현재 문화권의 통화 기호에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-255">The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="08553-256">*sign*</span><span class="sxs-lookup"><span data-stu-id="08553-256">*sign*</span></span>|<span data-ttu-id="08553-257">가 선택적 부호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-257">An optional sign.</span></span> <span data-ttu-id="08553-258">부호의 시작 부분에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 의 끝에 있고, 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-258">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="08553-259">괄호를 사용할 수 있습니다 `s` 경우 음수 값을 나타내는 데 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-259">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="08553-260">*digits*</span><span class="sxs-lookup"><span data-stu-id="08553-260">*digits*</span></span><br /><br /> <span data-ttu-id="08553-261">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="08553-261">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="08553-262">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="08553-262">*exponential_digits*</span></span>|<span data-ttu-id="08553-263">0부터 9 까지의 숫자 시퀀스입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-263">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="08553-264">에 대 한 *소수 자릿수*숫자 0은 유효한만 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-264">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="08553-265">*,*</span><span class="sxs-lookup"><span data-stu-id="08553-265">*,*</span></span>|<span data-ttu-id="08553-266">Culture 별 1000 단위 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-266">A culture-specific thousands separator symbol.</span></span> <span data-ttu-id="08553-267">현재 문화권의 천 단위 구분 기호에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-267">The current culture's thousands separator can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="08553-268">*.*</span><span class="sxs-lookup"><span data-stu-id="08553-268">*.*</span></span>|<span data-ttu-id="08553-269">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-269">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="08553-270">에 현재 문화권의 소수점 기호가 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-270">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="08553-271">숫자 0만 구문 분석 작업이 성공; 소수 자리 수로 표시 될 수 있습니다. 경우 *소수 자릿수* 기타 숫자를 포함 한 <xref:System.OverflowException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-271">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, an <xref:System.OverflowException> is thrown.</span></span>|  
|<span data-ttu-id="08553-272">*e*</span><span class="sxs-lookup"><span data-stu-id="08553-272">*e*</span></span>|<span data-ttu-id="08553-273">'E' 또는 'E' 문자는 값은 지 수 표기법으로 표현 됨을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-273">The 'e' or 'E' character, which indicates that the value is represented in exponential notation.</span></span> <span data-ttu-id="08553-274">`s` 경우 매개 변수 지 수 표기법으로 숫자를 나타낼 수 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-274">The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="08553-275">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="08553-275">*hexdigits*</span></span>|<span data-ttu-id="08553-276">16 진수 숫자 0 ~ f 또는 0-6.</span><span class="sxs-lookup"><span data-stu-id="08553-276">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
 <span data-ttu-id="08553-277">숫자만 문자열 (해당 하는 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 스타일)의 범위에 있으면 항상 성공적으로 구문 분석는 <xref:System.Int64> 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-277">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully if it is in the range of the <xref:System.Int64> type.</span></span> <span data-ttu-id="08553-278">나머지 <xref:System.Globalization.NumberStyles> 멤버 요소는 입력된 문자열에 필요 하지 않을 수도 있는 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-278">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be but are not required to be present in the input string.</span></span> <span data-ttu-id="08553-279">다음 표에서 개별 <xref:System.Globalization.NumberStyles> 멤버에 나타날 수 있는 요소에 영향을 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-279">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="08553-280">NumberStyles 값</span><span class="sxs-lookup"><span data-stu-id="08553-280">NumberStyles value</span></span>|<span data-ttu-id="08553-281">S에서 숫자 허용 되는 요소</span><span class="sxs-lookup"><span data-stu-id="08553-281">Elements permitted in s in addition to digits</span></span>|  
|------------------------|---------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="08553-282">*자릿수* 요소만 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-282">The *digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="08553-283">소수점 ( *합니다.*</span><span class="sxs-lookup"><span data-stu-id="08553-283">The decimal point ( *.*</span></span> <span data-ttu-id="08553-284">) 및 *소수 자릿수가* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-284">) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="08553-285">`s` 매개 변수로 지 수 표기법을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-285">The `s` parameter can also use exponential notation.</span></span> <span data-ttu-id="08553-286">경우 `s` 결과 숫자 값, 지 수 표기법으로 숫자를 나타내는 0이 아닌 소수 자릿수를 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-286">If `s` represents a number in exponential notation, the resulting numeric value cannot include any non-zero fractional digits.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="08553-287">*ws* 의 시작 부분에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-287">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="08553-288">*ws* 의 끝에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-288">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="08553-289">*기호* 의 시작 부분에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-289">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="08553-290">*기호* 의 끝에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-290">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="08553-291">*기호* 숫자 값이 들어 괄호 안에 형식 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-291">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="08553-292">1000 단위 구분 기호 ( *,* ) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-292">The thousands separator ( *,* ) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="08553-293">* $ * 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-293">The *$* element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="08553-294">모두.</span><span class="sxs-lookup"><span data-stu-id="08553-294">All.</span></span> <span data-ttu-id="08553-295">`s` 매개 변수를 16 진수 숫자 또는 지 수 표기법으로 숫자를에서 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-295">The `s` parameter cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="08553-296">*ws* 부분이 나 끝 부분에 요소 `s`, *기호* 맨 앞에 `s`, 소수점 및 ( *합니다.*</span><span class="sxs-lookup"><span data-stu-id="08553-296">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point ( *.*</span></span> <span data-ttu-id="08553-297">) 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-297">) symbol.</span></span> <span data-ttu-id="08553-298">`s` 매개 변수로 지 수 표기법을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-298">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="08553-299">*ws*, *기호*, 1000 단위 구분 기호 ( *,* ), 소수점 및 ( *합니다.*</span><span class="sxs-lookup"><span data-stu-id="08553-299">The *ws*, *sign*, thousands separator ( *,* ), and decimal point ( *.*</span></span> <span data-ttu-id="08553-300">) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-300">) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="08553-301">모든 스타일 제외 하 고 `s` 16 진수를 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-301">All styles, except `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="08553-302">경우는 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> 플래그를 사용할 `s` 접두사 없이 16 진수 값 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-302">If the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> flag is used, `s` must be a hexadecimal value without a prefix.</span></span> <span data-ttu-id="08553-303">예를 들어 "C9AF3" 성공적으로 구문 분석 하지만 "0xC9AF3" 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-303">For example, "C9AF3" parses successfully, but "0xC9AF3" does not.</span></span> <span data-ttu-id="08553-304">다른 플래그만 함께 사용할 수 있는 `s` 매개 변수는 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-304">The only other flags that can be combined with the `s` parameter are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="08553-305">(의 <xref:System.Globalization.NumberStyles> 열거형 복합 숫자 스타일에 포함 됩니다. <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>, 공백 플래그가 모두를 포함 하는.)</span><span class="sxs-lookup"><span data-stu-id="08553-305">(The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>, that includes both white space flags.)</span></span>  
  
 <span data-ttu-id="08553-306">`s` 매개 변수에서 서식 지정 정보를 사용 하 여 구문 분석 되는 <xref:System.Globalization.NumberFormatInfo> 현재 시스템 문화권에 따라 초기화 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-306">The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="08553-307">구문 분석 작업에 대 한 서식 지정 정보를 가져올 사용 되는 문화권을 지정 하려면 호출는 <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-307">To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08553-308">다음 예제에서는 <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> 메서드를 여러의 문자열 표현을 구문 분석 <xref:System.Int64> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-308">The following example uses the <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=nameWithType> method to parse the string representations of several <xref:System.Int64> values.</span></span> <span data-ttu-id="08553-309">이 예제에 대 한 현재 문화권이 EN-US입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-309">The current culture for the example is en-US.</span></span>  
  
 [!code-csharp[System.Int64.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int64.parse/cs/Parse2.cs#2)]
 [!code-vb[System.Int64.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int64.parse/vb/Parse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="08553-310"><paramref name="s" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="08553-310"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="08553-311"><paramref name="style" />이 <see cref="T:System.Globalization.NumberStyles" /> 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="08553-311"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
 <span data-ttu-id="08553-312">또는</span><span class="sxs-lookup"><span data-stu-id="08553-312">-or-</span></span>  
  
 <span data-ttu-id="08553-313"><paramref name="style" />이 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 및 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 값의 조합이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="08553-313"><paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="08553-314"><paramref name="s" />의 형식이 <paramref name="style" />과 호환되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="08553-314"><paramref name="s" /> is not in a format compliant with <paramref name="style" />.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="08553-315"><paramref name="s" />가 <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="08553-315"><paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span>  
  
 <span data-ttu-id="08553-316">또는</span><span class="sxs-lookup"><span data-stu-id="08553-316">-or-</span></span>  
  
 <span data-ttu-id="08553-317"><paramref name="style" />에서 소수 자릿수를 지원하지만 <paramref name="s" />에 0이 아닌 소수 자릿수가 포함되어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="08553-317"><paramref name="style" /> supports fractional digits but <paramref name="s" /> includes non-zero fractional digits.</span></span></exception>
        <altmember cref="M:System.Int64.ToString" />
        <altmember cref="Overload:System.Int64.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static long Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="08553-318">변환할 숫자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-318">A string containing a number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="08553-319"><c>s</c>에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-319">An object that supplies culture-specific formatting information about <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="08553-320">지정된 문화권별 형식으로 된 숫자의 문자열 표현을 해당하는 64비트 부호 있는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-320">Converts the string representation of a number in a specified culture-specific format to its 64-bit signed integer equivalent.</span></span></summary>
        <returns><span data-ttu-id="08553-321"><paramref name="s" />에 지정된 숫자에 해당하는 64비트 부호 있는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-321">A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-322">이 오버 로드는 <xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29> 메서드는 여러 가지 방법으로 서식을 지정할 수 있는 텍스트 변환 데 일반적으로 <xref:System.Int64> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-322">This overload of the <xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29> method is typically used to convert text that can be formatted in a variety of ways to an <xref:System.Int64> value.</span></span> <span data-ttu-id="08553-323">예를 들어 숫자 값으로 HTML 텍스트 상자에 사용자가 입력 한 텍스트 변환에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-323">For example, it can be used to convert the text entered by a user into an HTML text box to a numeric value.</span></span>  
  
 <span data-ttu-id="08553-324">`s` 매개 변수 형식의 숫자를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-324">The `s` parameter contains a number of the form:</span></span>  
  
 <span data-ttu-id="08553-325">[ws][sign]digits[ws]</span><span class="sxs-lookup"><span data-stu-id="08553-325">[ws][sign]digits[ws]</span></span>  
  
 <span data-ttu-id="08553-326">대괄호 ([및])은 선택적의 항목 및 기타 항목은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-326">Items in square brackets ([ and ]) are optional, and other items are as follows.</span></span>  
  
 <span data-ttu-id="08553-327">ws</span><span class="sxs-lookup"><span data-stu-id="08553-327">ws</span></span>  
 <span data-ttu-id="08553-328">선택적 공백입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-328">An optional white space.</span></span>  
  
 <span data-ttu-id="08553-329">sign</span><span class="sxs-lookup"><span data-stu-id="08553-329">sign</span></span>  
 <span data-ttu-id="08553-330">가 선택적 부호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-330">An optional sign.</span></span>  
  
 <span data-ttu-id="08553-331">digits</span><span class="sxs-lookup"><span data-stu-id="08553-331">digits</span></span>  
 <span data-ttu-id="08553-332">0에서 9 사이의 숫자 시퀀스입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-332">A sequence of digits ranging from 0 to 9.</span></span>  
  
 <span data-ttu-id="08553-333">`s` 매개 변수를 사용 하 여 해석 되는 <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> 스타일입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-333">The `s` parameter is interpreted using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="08553-334">10 진수 숫자, 이외에 선행 및 후행 공백을 선행 기호 함께 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-334">In addition to decimal digits, only leading and trailing spaces together with a leading sign are allowed.</span></span> <span data-ttu-id="08553-335">에 나타날 수 있는 스타일 요소를 명시적으로 정의 하려면 `s`를 사용 하 여는 <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-335">To explicitly define the style elements that can be present in `s`, use the <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="08553-336">`provider` 매개 변수는 한 <xref:System.IFormatProvider> 구현에서와 같은 <xref:System.Globalization.NumberFormatInfo> 또는 <xref:System.Globalization.CultureInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-336">The `provider` parameter is an <xref:System.IFormatProvider> implementation, such as a <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.CultureInfo> object.</span></span> <span data-ttu-id="08553-337">`provider` 의 형식에 대 한 문화권별 정보를 제공 하는 매개 변수 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-337">The `provider` parameter supplies culture-specific information about the format of `s`.</span></span> <span data-ttu-id="08553-338">경우 `provider` 은 `null`, <xref:System.Globalization.NumberFormatInfo> 현재 culture가 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-338">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08553-339">다음 예제에서는 단추 클릭 Web form의 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-339">The following example is the button click event handler of a Web form.</span></span> <span data-ttu-id="08553-340">반환 된 배열을 사용 하 여는 <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> 속성을 사용자의 로캘을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-340">It uses the array returned by the <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> property to determine the user's locale.</span></span> <span data-ttu-id="08553-341">그런 다음는 <xref:System.Globalization.CultureInfo> 해당 로캘에 해당 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-341">It then instantiates a <xref:System.Globalization.CultureInfo> object that corresponds to that locale.</span></span> <span data-ttu-id="08553-342"><xref:System.Globalization.NumberFormatInfo> 하에 속하는 개체는 <xref:System.Globalization.CultureInfo> 에 다음 전달 된 개체는 <xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29> 메서드는 사용자 입력을 <xref:System.Int64> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-342">The <xref:System.Globalization.NumberFormatInfo> object that belongs to that <xref:System.Globalization.CultureInfo> object is then passed to the <xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29> method to convert the user's input to an <xref:System.Int64> value.</span></span>  
  
 [!code-csharp[ParseMethod#5](~/samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/cs/Default.aspx.cs#5)]
 [!code-vb[ParseMethod#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParseMethod/vb/Default.aspx.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="08553-343"><paramref name="s" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="08553-343"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="08553-344"><paramref name="s" />의 형식이 잘못된 경우</span><span class="sxs-lookup"><span data-stu-id="08553-344"><paramref name="s" /> is not in the correct format.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="08553-345"><paramref name="s" />가 <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="08553-345"><paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Int64.ToString" />
        <altmember cref="Overload:System.Int64.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static long Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As Long" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static long Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles, provider As IFormatProvider) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Parse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="08553-346">변환할 숫자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-346">A string containing a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="08553-347"><c>s</c>에 나타날 수 있는 스타일 요소를 나타내는 열거형 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-347">A bitwise combination of enumeration values that indicates the style elements that can be present in <c>s</c>.</span></span> <span data-ttu-id="08553-348">지정할 일반적인 값은 <see cref="F:System.Globalization.NumberStyles.Integer" />입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-348">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</span></span></param>
        <param name="provider"><span data-ttu-id="08553-349"><c>s</c>에 대한 문화권별 서식 지정 정보를 제공하는 <see cref="T:System.IFormatProvider" />입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-349">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information about <c>s</c>.</span></span></param>
        <summary><span data-ttu-id="08553-350">지정된 스타일 및 문화권별 형식으로 된 숫자의 문자열 표현을 해당하는 64비트 부호 있는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-350">Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent.</span></span></summary>
        <returns><span data-ttu-id="08553-351"><paramref name="s" />에 지정된 숫자에 해당하는 64비트 부호 있는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-351">A 64-bit signed integer equivalent to the number specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-352">`style` 매개 변수 (예: 공백 또는 양수 부호)에 사용할 수 있는 스타일 요소를 정의 고 `s` 구문 분석 작업이 성공 하려면에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-352">The `style` parameter defines the style elements (such as white space or the positive sign) that are allowed in the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="08553-353">비트 플래그의 조합 이어야 합니다는 <xref:System.Globalization.NumberStyles> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-353">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="08553-354">값에 따라 `style`, `s` 매개 변수는 다음과 같은 요소가 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-354">Depending on the value of `style`, the `s` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="08553-355">[ws][$][sign][digits,]digits[.fractional_digits][e[sign]exponential_digits][ws]</span><span class="sxs-lookup"><span data-stu-id="08553-355">[ws][$][sign][digits,]digits[.fractional_digits][e[sign]exponential_digits][ws]</span></span>  
  
 <span data-ttu-id="08553-356">또는 if `style` 포함 <xref:System.Globalization.NumberStyles.AllowHexSpecifier>:</span><span class="sxs-lookup"><span data-stu-id="08553-356">Or, if `style` includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>:</span></span>  
  
 <span data-ttu-id="08553-357">[ws]hexdigits[ws]</span><span class="sxs-lookup"><span data-stu-id="08553-357">[ws]hexdigits[ws]</span></span>  
  
 <span data-ttu-id="08553-358">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-358">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="08553-359">다음 표에서 각 요소에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-359">The following table describes each element.</span></span>  
  
|<span data-ttu-id="08553-360">요소</span><span class="sxs-lookup"><span data-stu-id="08553-360">Element</span></span>|<span data-ttu-id="08553-361">설명</span><span class="sxs-lookup"><span data-stu-id="08553-361">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="08553-362">*ws*</span><span class="sxs-lookup"><span data-stu-id="08553-362">*ws*</span></span>|<span data-ttu-id="08553-363">선택적 공백입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-363">Optional white space.</span></span> <span data-ttu-id="08553-364">맨 앞에 공백이 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 의 끝에 있고, 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-364">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="08553-365">Culture 별 통화 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-365">A culture-specific currency symbol.</span></span> <span data-ttu-id="08553-366">위치는 문자열에 의해 정의 됩니다는 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> 의 속성은 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 개체는 <xref:System.IFormatProvider.GetFormat%2A> 의 메서드는 `provider` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-366">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter.</span></span> <span data-ttu-id="08553-367">통화 기호에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-367">The currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="08553-368">*sign*</span><span class="sxs-lookup"><span data-stu-id="08553-368">*sign*</span></span>|<span data-ttu-id="08553-369">가 선택적 부호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-369">An optional sign.</span></span> <span data-ttu-id="08553-370">부호의 시작 부분에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 플래그의 끝에 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 플래그 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-370">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag or at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="08553-371">괄호를 사용할 수 있습니다 `s` 경우 음수 값을 나타내는 데 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-371">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="08553-372">*digits*</span><span class="sxs-lookup"><span data-stu-id="08553-372">*digits*</span></span><br /><br /> <span data-ttu-id="08553-373">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="08553-373">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="08553-374">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="08553-374">*exponential_digits*</span></span>|<span data-ttu-id="08553-375">0부터 9 까지의 숫자 시퀀스입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-375">A sequence of digits from 0 through 9.</span></span>|  
|<span data-ttu-id="08553-376">*,*</span><span class="sxs-lookup"><span data-stu-id="08553-376">*,*</span></span>|<span data-ttu-id="08553-377">Culture 별 1000 단위 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-377">A culture-specific thousands separator symbol.</span></span> <span data-ttu-id="08553-378">1000 단위 구분 기호에 지정 된 문화권의 `provider` 에 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-378">The thousands separator of the culture specified by `provider` can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="08553-379">*.*</span><span class="sxs-lookup"><span data-stu-id="08553-379">*.*</span></span>|<span data-ttu-id="08553-380">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-380">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="08553-381">에 지정 된 문화권의 소수점 기호가 `provider` 에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-381">The decimal point symbol of the culture specified by `provider` can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span><br /><br /> <span data-ttu-id="08553-382">숫자 0만 구문 분석 작업이 성공; 소수 자리 수로 표시 될 수 있습니다. 경우 *소수 자릿수* 기타 숫자를 포함 한 <xref:System.OverflowException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-382">Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, an <xref:System.OverflowException> is thrown.</span></span>|  
|<span data-ttu-id="08553-383">*e*</span><span class="sxs-lookup"><span data-stu-id="08553-383">*e*</span></span>|<span data-ttu-id="08553-384">'E' 또는 'E' 문자는 값은 지 수 표기법으로 표현 됨을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-384">The 'e' or 'E' character, which indicates that the value is represented in exponential notation.</span></span> <span data-ttu-id="08553-385">`s` 경우 매개 변수 지 수 표기법으로 숫자를 나타낼 수 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-385">The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="08553-386">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="08553-386">*hexdigits*</span></span>|<span data-ttu-id="08553-387">16 진수 숫자 0 ~ f 또는 0-6.</span><span class="sxs-lookup"><span data-stu-id="08553-387">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
 <span data-ttu-id="08553-388">숫자만 있는 문자열 (해당 하는 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 스타일)의 범위에 있으면 항상 성공적으로 구문 분석은 <xref:System.Int64> 형식.</span><span class="sxs-lookup"><span data-stu-id="08553-388">A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully if it is in the range of the <xref:System.Int64> type.</span></span> <span data-ttu-id="08553-389">나머지 <xref:System.Globalization.NumberStyles> 멤버 수 있지만이 입력된 문자열에 있이 필요가 없습니다 있는 요소를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-389">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be but are not required to be present in this input string.</span></span> <span data-ttu-id="08553-390">다음 표에서 개별 <xref:System.Globalization.NumberStyles> 멤버에 나타날 수 있는 요소에 영향을 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-390">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="08553-391">비 복합 NumberStyles 값</span><span class="sxs-lookup"><span data-stu-id="08553-391">Non-composite NumberStyles values</span></span>|<span data-ttu-id="08553-392">S에서 숫자 허용 되는 요소</span><span class="sxs-lookup"><span data-stu-id="08553-392">Elements permitted in s in addition to digits</span></span>|  
|----------------------------------------|---------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>|<span data-ttu-id="08553-393">10 진수 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-393">Decimal digits only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>|<span data-ttu-id="08553-394">소수점 ( *합니다.*</span><span class="sxs-lookup"><span data-stu-id="08553-394">The decimal point ( *.*</span></span> <span data-ttu-id="08553-395">) 및 *소수 자릿수가* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-395">) and *fractional-digits* elements.</span></span> <span data-ttu-id="08553-396">그러나 *소수 자릿수가* 0 숫자가 하나 이상 구성 되어야 합니다 또는 <xref:System.OverflowException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-396">However, *fractional-digits* must consist of only one or more 0 digits or an <xref:System.OverflowException> is thrown.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>|<span data-ttu-id="08553-397">`s` 매개 변수로 지 수 표기법을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-397">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>|<span data-ttu-id="08553-398">*ws* 의 시작 부분에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-398">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>|<span data-ttu-id="08553-399">*ws* 의 끝에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-399">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>|<span data-ttu-id="08553-400">기호 앞에 올 수 *자릿수*합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-400">A sign can appear before *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>|<span data-ttu-id="08553-401">뒤에 기호 표시 될 수 있습니다 *자릿수*합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-401">A sign can appear after *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>|<span data-ttu-id="08553-402">*기호* 숫자 값이 들어 괄호 안에 형식 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-402">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>|<span data-ttu-id="08553-403">1000 단위 구분 기호 ( *,* ) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-403">The thousands separator ( *,* ) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>|<span data-ttu-id="08553-404">* $ * 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-404">The *$* element.</span></span>|  
  
 <span data-ttu-id="08553-405">경우는 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> 플래그를 사용할 `s` 접두사 없이 16 진수 값 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-405">If the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> flag is used, `s` must be a hexadecimal value without a prefix.</span></span> <span data-ttu-id="08553-406">예를 들어 "C9AF3" 성공적으로 구문 분석 하지만 "0xC9AF3" 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-406">For example, "C9AF3" parses successfully, but "0xC9AF3" does not.</span></span> <span data-ttu-id="08553-407">다른 플래그만에 있을 수 있는 `style` 는 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-407">The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="08553-408">(의 <xref:System.Globalization.NumberStyles> 열거형에는 복합 숫자 스타일 <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>, 공백 플래그가 모두를 포함 하는.)</span><span class="sxs-lookup"><span data-stu-id="08553-408">(The <xref:System.Globalization.NumberStyles> enumeration has a composite number style, <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>, that includes both white space flags.)</span></span>  
  
 <span data-ttu-id="08553-409">`provider` 매개 변수는 한 <xref:System.IFormatProvider> 구현에서와 같은 <xref:System.Globalization.NumberFormatInfo> 또는 <xref:System.Globalization.CultureInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-409">The `provider` parameter is an <xref:System.IFormatProvider> implementation, such as a <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.CultureInfo> object.</span></span> <span data-ttu-id="08553-410">`provider` 매개 변수에서 구문 분석에 사용 되는 문화권별 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-410">The `provider` parameter supplies culture-specific information used in parsing.</span></span> <span data-ttu-id="08553-411">경우 `provider` 은 `null`, <xref:System.Globalization.NumberFormatInfo> 현재 culture가 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-411">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08553-412">다음 예제에서는 다양 한 `style` 및 `provider` 의 문자열 표현을 구문 분석에 매개 변수 <xref:System.Int64> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-412">The following example uses a variety of `style` and `provider` parameters to parse the string representations of <xref:System.Int64> values.</span></span> <span data-ttu-id="08553-413">일부 구문 분석 작업에 대 한 서식 지정 정보를 가져올 사용 되는 문화권에 따라 동일한 문자열을 해석할 수는 여러 가지 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="08553-413">It also illustrates some of the different ways the same string can be interpreted depending on the culture whose formatting information is used for the parsing operation.</span></span>  
  
 [!code-csharp[System.Int64.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.int64.parse/cs/Parse3.cs#3)]
 [!code-vb[System.Int64.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.int64.parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="08553-414"><paramref name="s" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="08553-414"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="08553-415"><paramref name="style" />이 <see cref="T:System.Globalization.NumberStyles" /> 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="08553-415"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
 <span data-ttu-id="08553-416">또는</span><span class="sxs-lookup"><span data-stu-id="08553-416">-or-</span></span>  
  
 <span data-ttu-id="08553-417"><paramref name="style" />이 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 및 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 값의 조합이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="08553-417"><paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</span></span></exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="08553-418"><paramref name="s" />의 형식이 <paramref name="style" />과 호환되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="08553-418"><paramref name="s" /> is not in a format compliant with <paramref name="style" />.</span></span></exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="08553-419"><paramref name="s" />가 <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타내는 경우</span><span class="sxs-lookup"><span data-stu-id="08553-419"><paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span>  
  
 <span data-ttu-id="08553-420">또는</span><span class="sxs-lookup"><span data-stu-id="08553-420">-or-</span></span>  
  
 <span data-ttu-id="08553-421"><paramref name="style" />에서 소수 자릿수를 지원하지만 <paramref name="s" />에 0이 아닌 소수 자릿수가 포함되어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="08553-421"><paramref name="style" /> supports fractional digits, but <paramref name="s" /> includes non-zero fractional digits.</span></span></exception>
        <altmember cref="M:System.Int64.ToString" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-422">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-422">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-423">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-423">For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</span></span></summary>
        <returns>
          <span data-ttu-id="08553-424">현재 인스턴스의 값이 0이 아니면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-424"><see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-425">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-425">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-426"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-426">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-427">메서드 대신 호출 하는 것은 <xref:System.Convert.ToBoolean%28System.Int64%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-427">The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-428">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-428">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-429">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-429">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="08553-430"><see cref="T:System.Byte" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-430">The value of the current instance, converted to a <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-431">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-431">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-432"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-432">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-433">메서드 대신 호출 하는 것은 <xref:System.Convert.ToByte%28System.Int64%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-433">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-434">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-434">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-435">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-435">For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="08553-436"><see cref="T:System.Char" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-436">The value of the current instance, converted to a <see cref="T:System.Char" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-437">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-437">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-438"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-438">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-439">메서드 대신 호출 하는 것은 <xref:System.Convert.ToChar%28System.Int64%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-439">The recommended alternative is to call the <xref:System.Convert.ToChar%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-440">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-440">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-441">이 변환은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-441">This conversion is not supported.</span></span> <span data-ttu-id="08553-442">이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-442">Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="08553-443">이 변환은 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-443">This conversion is not supported.</span></span> <span data-ttu-id="08553-444">값이 반환되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-444">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="08553-445">모든 경우</span><span class="sxs-lookup"><span data-stu-id="08553-445">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-446">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-446">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-447">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-447">For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="08553-448"><see cref="T:System.Decimal" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-448">The value of the current instance, converted to a <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-449">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-449">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-450"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-450">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-451">메서드 대신 호출 하는 것은 <xref:System.Convert.ToDecimal%28System.Int64%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-451">The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-452">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-452">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-453">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-453">For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="08553-454"><see cref="T:System.Double" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-454">The value of the current instance, converted to a <see cref="T:System.Double" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-455">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-455">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-456"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-456">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-457">메서드 대신 호출 하는 것은 <xref:System.Convert.ToDouble%28System.Int64%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-457">The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-458">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-458">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-459">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-459">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="08553-460"><see cref="T:System.Int16" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-460">The value of the current instance, converted to an <see cref="T:System.Int16" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-461">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-461">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-462"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-462">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-463">메서드 대신 호출 하는 것은 <xref:System.Convert.ToInt16%28System.Int64%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-463">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-464">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-464">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-465">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-465">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="08553-466"><see cref="T:System.Int32" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-466">The value of the current instance, converted to an <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-467">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-467">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-468"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-468">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-469">메서드 대신 호출 하는 것은 <xref:System.Convert.ToInt32%28System.Int64%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-469">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-470">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-470">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-471">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-471">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="08553-472">변경되지 않은 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-472">The value of the current instance, unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-473">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-473">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-474"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-474">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-475">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-475">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-476">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-476">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="08553-477"><see cref="T:System.SByte" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-477">The value of the current instance, converted to an <see cref="T:System.SByte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-478">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-478">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-479"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-479">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-480">메서드 대신 호출 하는 것은 <xref:System.Convert.ToSByte%28System.Int64%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-480">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-481">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-481">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-482">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-482">For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="08553-483"><see cref="T:System.Single" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-483">The value of the current instance, converted to a <see cref="T:System.Single" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-484">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-484">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-485"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-485">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-486">메서드 대신 호출 하는 것은 <xref:System.Convert.ToSingle%28System.Int64%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-486">The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="08553-487">이 <see cref="T:System.Int64" /> 값을 변환할 대상 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-487">The type to which to convert this <see cref="T:System.Int64" /> value.</span></span></param>
        <param name="provider"><span data-ttu-id="08553-488">반환된 값의 형식에 대한 정보를 제공하는 <see cref="T:System.IFormatProvider" /> 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-488">An <see cref="T:System.IFormatProvider" /> implementation that provides information about the format of the returned value.</span></span></param>
        <summary><span data-ttu-id="08553-489">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-489">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="08553-490"><paramref name="type" />으로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-490">The value of the current instance, converted to <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-491">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-491">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-492"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-492">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-493">메서드 대신 호출 하는 것은 `static` (`Shared` Visual basic에서) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-493">The recommended alternative is to call the `static` (`Shared` in Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-494">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-494">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-495">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-495">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="08553-496"><see cref="T:System.UInt16" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-496">The value of the current instance, converted to a <see cref="T:System.UInt16" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-497">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-497">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-498"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-498">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-499">메서드 대신 호출 하는 것은 <xref:System.Convert.ToUInt16%28System.Int64%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-499">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-500">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-500">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-501">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-501">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="08553-502"><see cref="T:System.UInt32" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-502">The value of the current instance, converted to a <see cref="T:System.UInt32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-503">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-503">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-504"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-504">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-505">메서드 대신 호출 하는 것은 <xref:System.Convert.ToUInt32%28System.Int64%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-505">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-506">이 매개 변수는 무시됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-506">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="08553-507">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-507">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="08553-508"><see cref="T:System.UInt64" />로 변환된 현재 인스턴스의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-508">The value of the current instance, converted to a <see cref="T:System.UInt64" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-509">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="08553-509">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="08553-510"><xref:System.Int64> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-510">It can be used only when the <xref:System.Int64> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="08553-511">메서드 대신 호출 하는 것은 <xref:System.Convert.ToUInt64%28System.Int64%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-511">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Int64%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="08553-512">이 인스턴스의 숫자 값을 해당하는 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-512">Converts the numeric value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08553-513">이 인스턴스의 숫자 값을 해당하는 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-513">Converts the numeric value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="08553-514">음수 부호(값이 음수일 경우)와 0부터 9 사이의 숫자(앞에 오는 0은 사용하지 않음)들로 구성된 이 인스턴스의 값에 대한 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-514">The string representation of the value of this instance, consisting of a minus sign if the value is negative, and a sequence of digits ranging from 0 to 9 with no leading zeroes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-515"><xref:System.Int64.ToString> 메서드 형식을 <xref:System.Int64> 기본값 ("G" 또는 일반)에서 값을 사용 하 여 형식은 <xref:System.Globalization.NumberFormatInfo> 현재 문화권의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-515">The <xref:System.Int64.ToString> method formats an <xref:System.Int64> value in the default ("G", or general) format by using the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span> <span data-ttu-id="08553-516">다른 형식이 나 문화권을 지정 하려는 경우 사용의 다른 오버 로드는 <xref:System.Int64.ToString%2A> 다음과 같이 메서드:</span><span class="sxs-lookup"><span data-stu-id="08553-516">If you want to specify a different format or culture, use the other overloads of the <xref:System.Int64.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="08553-517">형식을 사용 하려면</span><span class="sxs-lookup"><span data-stu-id="08553-517">To use format</span></span>|<span data-ttu-id="08553-518">문화권에 대 한</span><span class="sxs-lookup"><span data-stu-id="08553-518">For culture</span></span>|<span data-ttu-id="08553-519">오버 로드를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="08553-519">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="08553-520">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="08553-520">Default ("G") format</span></span>|<span data-ttu-id="08553-521">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="08553-521">A specific culture</span></span>|<xref:System.Int64.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="08553-522">특정 형식</span><span class="sxs-lookup"><span data-stu-id="08553-522">A specific format</span></span>|<span data-ttu-id="08553-523">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="08553-523">Default (current) culture</span></span>|<xref:System.Int64.ToString%28System.String%29>|  
|<span data-ttu-id="08553-524">특정 형식</span><span class="sxs-lookup"><span data-stu-id="08553-524">A specific format</span></span>|<span data-ttu-id="08553-525">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="08553-525">A specific culture</span></span>|<xref:System.Int64.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="08553-526">.NET Framework에서는 다음 서식 지정 항목에 자세히 설명 하는 광범위 한 서식 지정 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-526">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="08553-527">숫자 서식 지정자에 대 한 자세한 내용은 참조 [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 및 [사용자 지정 숫자 형식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-527">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="08553-528">서식 지정 하는 방법에 대 한 자세한 내용은 참조 [형식 지정](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-528">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08553-529">다음 예제에서는 표시 된 <xref:System.Int64> 기본값을 사용 하 여 값 <xref:System.Int64.ToString> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-529">The following example displays an <xref:System.Int64> value using the default <xref:System.Int64.ToString> method.</span></span> <span data-ttu-id="08553-530">또한의 문자열 표현을 표시는 <xref:System.Int64> 다양 한 표준 형식 지정자를 사용 하 여 얻은 값을 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-530">It also displays the string representations of the <xref:System.Int64> value that results from using a number of standard format specifiers.</span></span> <span data-ttu-id="08553-531">예제에서는 EN-US 문화권의 형식 규칙을 사용 하 여 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-531">The examples are displayed using the formatting conventions of the en-US culture.</span></span>  
  
 [!code-csharp[System.Int64.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int64.ToString/cs/ToString.cs#1)]
 [!code-vb[System.Int64.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int64.ToString/vb/ToString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Int64.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="08553-532">문화권별 형식 지정 정보를 제공하는 <see cref="T:System.IFormatProvider" />입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-532">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="08553-533">지정된 문화권별 형식 정보를 사용하여 이 인스턴스의 숫자 값을 해당 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-533">Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="08553-534">이 인스턴스의 값을 <paramref name="provider" />에 지정된 내용에 따라 나타낸 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-534">The string representation of the value of this instance as specified by <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-535"><xref:System.Int64.ToString%28System.IFormatProvider%29> 메서드 형식을 <xref:System.Int64> 기본값 ("G" 또는 일반)에서 값을 사용 하 여 형식은 <xref:System.Globalization.NumberFormatInfo> 지정된 된 문화권의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-535">The <xref:System.Int64.ToString%28System.IFormatProvider%29> method formats an <xref:System.Int64> value in the default ("G", or general) format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="08553-536">다른 형식이 나 현재 문화권을 지정 하려는 경우 사용의 다른 오버 로드는 <xref:System.Int64.ToString%2A> 다음과 같이 메서드:</span><span class="sxs-lookup"><span data-stu-id="08553-536">If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Int64.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="08553-537">형식을 사용 하려면</span><span class="sxs-lookup"><span data-stu-id="08553-537">To use format</span></span>|<span data-ttu-id="08553-538">문화권에 대 한</span><span class="sxs-lookup"><span data-stu-id="08553-538">For culture</span></span>|<span data-ttu-id="08553-539">오버 로드를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="08553-539">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="08553-540">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="08553-540">Default ("G") format</span></span>|<span data-ttu-id="08553-541">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="08553-541">Default (current) culture</span></span>|<xref:System.Int64.ToString>|  
|<span data-ttu-id="08553-542">특정 형식</span><span class="sxs-lookup"><span data-stu-id="08553-542">A specific format</span></span>|<span data-ttu-id="08553-543">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="08553-543">Default (current) culture</span></span>|<xref:System.Int64.ToString%28System.String%29>|  
|<span data-ttu-id="08553-544">특정 형식</span><span class="sxs-lookup"><span data-stu-id="08553-544">A specific format</span></span>|<span data-ttu-id="08553-545">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="08553-545">A specific culture</span></span>|<xref:System.Int64.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="08553-546">`provider` 매개 변수는 구현 하는 개체는 <xref:System.IFormatProvider> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-546">The `provider` parameter is an object that implements the <xref:System.IFormatProvider> interface.</span></span> <span data-ttu-id="08553-547">해당 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 이 메서드에 의해 반환 되는 문자열의 형식에 대 한 문화권별 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-547">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string that is returned by this method.</span></span> <span data-ttu-id="08553-548">구현 하는 개체 <xref:System.IFormatProvider> 다음 중 하나일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-548">The object that implements <xref:System.IFormatProvider> can be any of the following:</span></span>  
  
-   <span data-ttu-id="08553-549">A <xref:System.Globalization.CultureInfo> 해당 형식 지정 규칙을 사용 하려는 문화권을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-549">A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting rules are to be used.</span></span>  
  
-   <span data-ttu-id="08553-550">A <xref:System.Globalization.NumberFormatInfo> 이 값에 대 한 특정 숫자 형식 지정 정보를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-550">A <xref:System.Globalization.NumberFormatInfo> object that contains specific numeric formatting information for this value.</span></span>  
  
-   <span data-ttu-id="08553-551">구현 하는 사용자 지정 개체 <xref:System.IFormatProvider> 및 해당 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 서식 지정 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-551">A custom object that implements <xref:System.IFormatProvider> and whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="08553-552">경우 `provider` 은 `null` 또는 <xref:System.Globalization.NumberFormatInfo> 개체에서 가져올 수 없습니다 `provider`, 반환 값으로 지정 됩니다는 <xref:System.Globalization.NumberFormatInfo> 현재 문화권에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-552">If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> object cannot be obtained from `provider`, the return value is formatted with the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
 <span data-ttu-id="08553-553">.NET Framework에서는 다음 서식 지정 항목에 자세히 설명 하는 광범위 한 서식 지정 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-553">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="08553-554">숫자 서식 지정자에 대 한 자세한 내용은 참조 [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 및 [사용자 지정 숫자 형식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-554">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="08553-555">서식 지정 하는 방법에 대 한 자세한 내용은 참조 [형식 지정](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-555">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08553-556">다음 예제에서는 표시의 문자열 표현을 <xref:System.Int64> 를 사용 하 여 값 <xref:System.Globalization.CultureInfo> 서로 다른 문화권을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-556">The following example displays the string representation of an <xref:System.Int64> value using <xref:System.Globalization.CultureInfo> objects that represent several different cultures.</span></span>  
  
 [!code-csharp[System.Int64.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int64.ToString/cs/ToString.cs#2)]
 [!code-vb[System.Int64.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int64.ToString/vb/ToString.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Int64.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="08553-557">숫자 서식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-557">A numeric format string.</span></span></param>
        <summary><span data-ttu-id="08553-558">지정된 형식을 사용하여 이 인스턴스의 숫자 값을 해당 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-558">Converts the numeric value of this instance to its equivalent string representation, using the specified format.</span></span></summary>
        <returns><span data-ttu-id="08553-559">이 인스턴스의 값을 <paramref name="format" />에 지정된 내용에 따라 나타낸 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-559">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-560"><xref:System.Int64.ToString%28System.String%29> 메서드 형식을 <xref:System.Int64> 를 사용 하 여 지정 된 형식에서 값을 <xref:System.Globalization.NumberFormatInfo> 현재 문화권의 규칙을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-560">The <xref:System.Int64.ToString%28System.String%29> method formats an <xref:System.Int64> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture.</span></span> <span data-ttu-id="08553-561">기본값 ("G" 또는 일반)을 사용 하려는 경우 다른 문화권이 지정, 다른 오버 로드를 사용 하거나 형식는 <xref:System.Int64.ToString%2A> 다음과 같이 메서드:</span><span class="sxs-lookup"><span data-stu-id="08553-561">If you want to use the default ("G", or general) format or specify a different culture, use the other overloads of the <xref:System.Int64.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="08553-562">형식을 사용 하려면</span><span class="sxs-lookup"><span data-stu-id="08553-562">To use format</span></span>|<span data-ttu-id="08553-563">문화권에 대 한</span><span class="sxs-lookup"><span data-stu-id="08553-563">For culture</span></span>|<span data-ttu-id="08553-564">오버 로드를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="08553-564">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="08553-565">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="08553-565">Default ("G") format</span></span>|<span data-ttu-id="08553-566">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="08553-566">Default (current) culture</span></span>|<xref:System.Int64.ToString>|  
|<span data-ttu-id="08553-567">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="08553-567">Default ("G") format</span></span>|<span data-ttu-id="08553-568">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="08553-568">A specific culture</span></span>|<xref:System.Int64.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="08553-569">특정 형식</span><span class="sxs-lookup"><span data-stu-id="08553-569">A specific format</span></span>|<span data-ttu-id="08553-570">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="08553-570">A specific culture</span></span>|<xref:System.Int64.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="08553-571">`format` 매개 변수는 "R"을 제외한 모든 유효한 표준 숫자 서식 지정자 및 사용자 지정 숫자 서식 지정자의 조합이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-571">The `format` parameter can be any valid standard numeric format specifier except for "R", as well as any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="08553-572">경우 `format` 은 `null` 또는 빈 문자열 (""),이 인스턴스의 반환 값 ("G")는 일반 숫자 형식 지정자와 함께 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-572">If `format` is `null` or an empty string (""), the return value of this instance is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="08553-573">.NET Framework에서는 다음 서식 지정 항목에 자세히 설명 하는 광범위 한 서식 지정 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-573">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="08553-574">숫자 서식 지정자에 대 한 자세한 내용은 [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 및 [사용자 지정 숫자 형식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-574">For more information about numeric format specifiers, [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="08553-575">서식 지정 하는 방법에 대 한 자세한 내용은 참조 [형식 지정](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-575">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="08553-576">이 인스턴스의 반환 값으로 지정 되는 <xref:System.Globalization.NumberFormatInfo> 현재 문화권에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-576">The return value of this instance is formatted with the <xref:System.Globalization.NumberFormatInfo> for the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08553-577">다음 예제에서는 표시는 <xref:System.Int64> 각는 지원 되는 표준 숫자 서식 지정자와 두 개의 사용자 지정 숫자 형식 문자열을 함께 사용 하 여 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-577">The following example displays an <xref:System.Int64> value using each of the supported standard numeric format specifiers together with two custom numeric format strings.</span></span> <span data-ttu-id="08553-578">숫자 값을 문자열로 변환,이 예제에서는 EN-US 문화권의 형식 규칙을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-578">In converting the numeric values to strings, the example uses the formatting conventions of the en-US culture.</span></span>  
  
 [!code-csharp[System.Int64.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int64.ToString/cs/ToString.cs#3)]
 [!code-vb[System.Int64.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int64.ToString/vb/ToString.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="08553-579"><paramref name="format" />이 잘못되었거나 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="08553-579"><paramref name="format" /> is invalid or not supported.</span></span></exception>
        <altmember cref="M:System.Int64.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="08553-580">숫자 서식 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-580">A numeric format string.</span></span></param>
        <param name="provider"><span data-ttu-id="08553-581">이 인스턴스에 대한 문화권별 서식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-581">An object that supplies culture-specific formatting information about this instance.</span></span></param>
        <summary><span data-ttu-id="08553-582">지정된 형식 및 문화권별 형식 정보를 사용하여 이 인스턴스의 숫자 값을 해당 문자열 표현으로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-582">Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="08553-583"><paramref name="format" /> 및 <paramref name="provider" />로 지정된 이 인스턴스 값의 문자열 표현입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-583">The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-584"><xref:System.Int64.ToString%28System.String%2CSystem.IFormatProvider%29> 메서드 형식을 <xref:System.Int64> 값을 사용 하 여 지정 된 형식에서 <xref:System.Globalization.NumberFormatInfo> 지정된 된 문화권의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-584">The <xref:System.Int64.ToString%28System.String%2CSystem.IFormatProvider%29> method formats an <xref:System.Int64> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture.</span></span> <span data-ttu-id="08553-585">다른 오버 로드를 사용 하 여 기본 형식 또는 문화권 설정을 사용 하려는 경우는 <xref:System.Int64.ToString%2A> 다음과 같이 메서드:</span><span class="sxs-lookup"><span data-stu-id="08553-585">If you want to use default format or culture settings, use the other overloads of the <xref:System.Int64.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="08553-586">형식을 사용 하려면</span><span class="sxs-lookup"><span data-stu-id="08553-586">To use format</span></span>|<span data-ttu-id="08553-587">문화권에 대 한</span><span class="sxs-lookup"><span data-stu-id="08553-587">For culture</span></span>|<span data-ttu-id="08553-588">오버 로드를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="08553-588">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="08553-589">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="08553-589">Default ("G") format</span></span>|<span data-ttu-id="08553-590">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="08553-590">Default (current) culture</span></span>|<xref:System.Int64.ToString>|  
|<span data-ttu-id="08553-591">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="08553-591">Default ("G") format</span></span>|<span data-ttu-id="08553-592">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="08553-592">A specific culture</span></span>|<xref:System.Int64.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="08553-593">특정 형식</span><span class="sxs-lookup"><span data-stu-id="08553-593">A specific format</span></span>|<span data-ttu-id="08553-594">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="08553-594">Default (current) culture</span></span>|<xref:System.Int64.ToString%28System.String%29>|  
  
 <span data-ttu-id="08553-595">`format` 표준 또는 사용자 지정 숫자 형식 문자열 매개 변수 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-595">The `format` parameter can be either a standard or a custom numeric format string.</span></span> <span data-ttu-id="08553-596">모든 사용자 지정 숫자 서식 문자 "R" (또는 "r") 이외의 모든 표준 숫자 형식 문자열은 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-596">All standard numeric format strings other than "R" (or "r") are supported, as are all custom numeric format characters.</span></span> <span data-ttu-id="08553-597">경우 `format` 은 `null` 또는 빈 문자열 ("")을이 인스턴스에 대 한 반환 값 ("G")는 일반 숫자 형식 지정자와 함께 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-597">If `format` is `null` or an empty string (""), the return value for this instance is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="08553-598">`provider` 매개 변수는 구현 하는 개체는 <xref:System.IFormatProvider> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-598">The `provider` parameter is an object that implements the <xref:System.IFormatProvider> interface.</span></span> <span data-ttu-id="08553-599">해당 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 이 메서드에 의해 반환 되는 문자열의 형식에 대 한 문화권별 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-599">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string that is returned by this method.</span></span> <span data-ttu-id="08553-600">구현 하는 개체 <xref:System.IFormatProvider> 다음 중 하나일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-600">The object that implements <xref:System.IFormatProvider> can be any of the following:</span></span>  
  
-   <span data-ttu-id="08553-601">A <xref:System.Globalization.CultureInfo> 해당 형식 지정 규칙을 사용 하려는 문화권을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-601">A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting rules are to be used.</span></span>  
  
-   <span data-ttu-id="08553-602">A <xref:System.Globalization.NumberFormatInfo> 이 값에 대 한 특정 숫자 형식 지정 정보를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-602">A <xref:System.Globalization.NumberFormatInfo> object that contains specific numeric formatting information for this value.</span></span>  
  
-   <span data-ttu-id="08553-603">구현 하는 사용자 지정 개체 <xref:System.IFormatProvider> 및 해당 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 서식 지정 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-603">A custom object that implements <xref:System.IFormatProvider> and whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="08553-604">경우 `provider` 은 `null` 또는 <xref:System.Globalization.NumberFormatInfo> 개체에서 가져올 수 없습니다 `provider`,이 인스턴스에 대 한 반환 값으로 지정 됩니다는 <xref:System.Globalization.NumberFormatInfo> 현재 문화권에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-604">If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> object cannot be obtained from `provider`, the return value for this instance is formatted with the <xref:System.Globalization.NumberFormatInfo> for the current culture.</span></span>  
  
 <span data-ttu-id="08553-605">.NET Framework에서는 다음 서식 지정 항목에 자세히 설명 하는 광범위 한 서식 지정 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-605">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="08553-606">숫자 서식 지정자에 대 한 자세한 내용은 참조 [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 및 [사용자 지정 숫자 형식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-606">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="08553-607">서식 지정 하는 방법에 대 한 자세한 내용은 참조 [형식 지정](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-607">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08553-608">다음 예에서는 양수 및 각 지원 되는 표준 숫자 서식 지정자를 사용 하 여 세 개의 서로 다른 문화권에 대 한 음수 값을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-608">The following example displays a positive and a negative value using each of the supported standard numeric format specifiers for three different cultures.</span></span>  
  
 [!code-csharp[System.Int64.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int64.ToString/cs/ToString.cs#4)]
 [!code-vb[System.Int64.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int64.ToString/vb/ToString.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="08553-609"><paramref name="format" />이 잘못되었거나 지원되지 않는 경우</span><span class="sxs-lookup"><span data-stu-id="08553-609"><paramref name="format" /> is invalid or not supported.</span></span></exception>
        <altmember cref="M:System.Int64.Parse(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="08553-610">숫자의 문자열 표현을 해당하는 64비트 부호 있는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-610">Converts the string representation of a number to its 64-bit signed integer equivalent.</span></span> <span data-ttu-id="08553-611">반환 값은 변환이 성공했는지 아니면 실패했는지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="08553-611">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <altmember cref="Overload:System.Int64.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out long result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] int64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.TryParse(System.ReadOnlySpan{System.Char},System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] long % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out long result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] int64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.TryParse(System.String,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] long % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="08553-612">변환할 숫자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-612">A string containing a number to convert.</span></span></param>
        <param name="result"><span data-ttu-id="08553-613">이 메서드는 변환이 성공한 경우 <c>s</c>에 포함된 숫자의 64비트 부호 있는 정수 값을 반환하고, 변환이 실패한 경우 0을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-613">When this method returns, contains the 64-bit signed integer value equivalent of the number contained in <c>s</c>, if the conversion succeeded, or zero if the conversion failed.</span></span> <span data-ttu-id="08553-614"><c>s</c> 매개 변수가 <see langword="null" /> 또는 <see cref="F:System.String.Empty" />이거나, 형식이 올바르지 않거나, <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타내는 경우 변환이 실패합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-614">The conversion fails if the <c>s</c> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not of the correct format, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span> <span data-ttu-id="08553-615">이 매개 변수는 초기화되지 않은 상태로 전달됩니다. 원래 <c>result</c>에 제공된 모든 값을 덮어쓰게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-615">This parameter is passed uninitialized; any value originally supplied in <c>result</c> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="08553-616">숫자의 문자열 표현을 해당하는 64비트 부호 있는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-616">Converts the string representation of a number to its 64-bit signed integer equivalent.</span></span> <span data-ttu-id="08553-617">반환 값은 변환이 성공했는지 아니면 실패했는지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="08553-617">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns>
          <span data-ttu-id="08553-618"><see langword="true" />가 성공적으로 변환되었으면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-618"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-619"><xref:System.Int64.TryParse%2A> 방법은 <xref:System.Int64.Parse%2A> 메서드를 제외 하 고는 <xref:System.Int64.TryParse%2A> 메서드는 변환이 실패할 경우 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-619">The <xref:System.Int64.TryParse%2A> method is like the <xref:System.Int64.Parse%2A> method, except the <xref:System.Int64.TryParse%2A> method does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="08553-620">테스트 하기 위해 예외 처리를 사용할 필요가 <xref:System.FormatException> 에 `s` 잘못 되었으며 성공적으로 구문 분석할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-620">It eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="08553-621">`s` 매개 변수 형식의 숫자를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-621">The `s` parameter contains a number of the form:</span></span>  
  
 <span data-ttu-id="08553-622">[ws][sign]digits[ws]</span><span class="sxs-lookup"><span data-stu-id="08553-622">[ws][sign]digits[ws]</span></span>  
  
 <span data-ttu-id="08553-623">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-623">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="08553-624">다음 표에서 각 요소에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-624">The following table describes each element.</span></span>  
  
|<span data-ttu-id="08553-625">요소</span><span class="sxs-lookup"><span data-stu-id="08553-625">Element</span></span>|<span data-ttu-id="08553-626">설명</span><span class="sxs-lookup"><span data-stu-id="08553-626">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="08553-627">*ws*</span><span class="sxs-lookup"><span data-stu-id="08553-627">*ws*</span></span>|<span data-ttu-id="08553-628">선택적 공백입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-628">An optional white space.</span></span>|  
|<span data-ttu-id="08553-629">*sign*</span><span class="sxs-lookup"><span data-stu-id="08553-629">*sign*</span></span>|<span data-ttu-id="08553-630">가 선택적 부호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-630">An optional sign.</span></span>|  
|<span data-ttu-id="08553-631">*digits*</span><span class="sxs-lookup"><span data-stu-id="08553-631">*digits*</span></span>|<span data-ttu-id="08553-632">0에서 9 사이의 숫자 시퀀스입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-632">A sequence of digits ranging from 0 to 9.</span></span>|  
  
 <span data-ttu-id="08553-633">`s` 매개 변수를 사용 하 여 해석 되는 <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> 스타일입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-633">The `s` parameter is interpreted using the <xref:System.Globalization.NumberStyles.Integer?displayProperty=nameWithType> style.</span></span> <span data-ttu-id="08553-634">10 진수 숫자, 이외에 선행 및 후행 공백을 선행 기호 함께 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-634">In addition to the decimal digits, only leading and trailing spaces together with a leading sign are allowed.</span></span> <span data-ttu-id="08553-635">명시적으로 함께 culture 별 서식 지정 정보에 포함 될 수 있는 스타일 요소를 정의 하려면 `s`를 사용 하 여는 <xref:System.Int64.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Int64%40%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="08553-635">To explicitly define the style elements together with the culture-specific formatting information that can be present in `s`, use the <xref:System.Int64.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Int64%40%29> method.</span></span>  
  
 <span data-ttu-id="08553-636">`s` 매개 변수에서 서식 지정 정보를 사용 하 여 구문 분석 되는 <xref:System.Globalization.NumberFormatInfo> 초기화는 현재 시스템 문화권에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-636">The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object initialized for the current system culture.</span></span> <span data-ttu-id="08553-637">자세한 내용은 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="08553-637">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.</span></span>  
  
 <span data-ttu-id="08553-638">이 오버 로드는 <xref:System.Int64.TryParse%2A> 의 모든 자릿수 1 보다 크거나는 `s` 소수 자리 수로 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-638">This overload of the <xref:System.Int64.TryParse%2A> method interprets all digits in the `s` parameter as decimal digits.</span></span> <span data-ttu-id="08553-639">16 진수 숫자의 문자열 표현을 구문 분석, 호출 된 <xref:System.Int64.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Int64%40%29> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-639">To parse the string representation of a hexadecimal number, call the <xref:System.Int64.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Int64%40%29> overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08553-640">다음 예제에서는 <xref:System.Int64.TryParse%28System.String%2CSystem.Int64%40%29?displayProperty=nameWithType> 메서드를 여러 가지 문자열 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-640">The following example calls the <xref:System.Int64.TryParse%28System.String%2CSystem.Int64%40%29?displayProperty=nameWithType> method with a number of different string values.</span></span>  
  
 [!code-csharp[System.Int64.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int64.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.Int64.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int64.TryParse/vb/TryParse1.vb#1)]  
  
 <span data-ttu-id="08553-641">문자열 중 일부는 <xref:System.Int64.TryParse%28System.String%2CSystem.Int64%40%29> 메서드는이 예제는 변환할 수 없습니다 됩니다:</span><span class="sxs-lookup"><span data-stu-id="08553-641">Some of the strings that the <xref:System.Int64.TryParse%28System.String%2CSystem.Int64%40%29> method is unable to convert in this example are:</span></span>  
  
-   <span data-ttu-id="08553-642">"9432.0".</span><span class="sxs-lookup"><span data-stu-id="08553-642">"9432.0".</span></span> <span data-ttu-id="08553-643">문자열에서 소수 구분 기호;를 포함할 수 없기 때문에 변환이 실패 정수 계열 자릿수만 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-643">The conversion fails because the string cannot contain a decimal separator; it must contain integral digits only.</span></span>  
  
-   <span data-ttu-id="08553-644">"16,667".</span><span class="sxs-lookup"><span data-stu-id="08553-644">"16,667".</span></span> <span data-ttu-id="08553-645">문자열에는 그룹 구분 기호; 포함할 수 없기 때문에 변환이 실패 정수 계열 자릿수만 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-645">The conversion fails because the string cannot contain group separators; it must contain integral digits only.</span></span>  
  
-   <span data-ttu-id="08553-646">"(100)".</span><span class="sxs-lookup"><span data-stu-id="08553-646">"(100)".</span></span> <span data-ttu-id="08553-647">문자열의 현재 문화권에 의해 정의 된 것과 다른 음수 기호를 포함할 수 없기 때문에 변환이 실패 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-647">The conversion fails because the string cannot contain a negative sign other than the one defined by the current culture's <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A?displayProperty=nameWithType> properties.</span></span>  
  
-   <span data-ttu-id="08553-648">"01FA"입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-648">"01FA".</span></span> <span data-ttu-id="08553-649">변환은 문자열이 16 진수; 포함할 수 없기 때문에 실패 10 진수 숫자만 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-649">The conversion fails because the string cannot contain hexadecimal digits; it must contain decimal digits only.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Int64.Parse(System.String)" />
        <altmember cref="M:System.Int64.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider provider, out long result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] int64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] long % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out long result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] int64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] long % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="08553-650">변환할 숫자가 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-650">A string containing a number to convert.</span></span> <span data-ttu-id="08553-651">이 문자열은 <c>style</c>에서 지정하는 스타일을 사용하여 해석됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-651">The string is interpreted using the style specified by <c>style</c>.</span></span></param>
        <param name="style"><span data-ttu-id="08553-652"><c>s</c>에 나타날 수 있는 스타일 요소를 나타내는 열거형 값의 비트 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-652">A bitwise combination of enumeration values that indicates the style elements that can be present in <c>s</c>.</span></span> <span data-ttu-id="08553-653">지정할 일반적인 값은 <see cref="F:System.Globalization.NumberStyles.Integer" />입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-653">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer" />.</span></span></param>
        <param name="provider"><span data-ttu-id="08553-654"><c>s</c>에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-654">An object that supplies culture-specific formatting information about <c>s</c>.</span></span></param>
        <param name="result"><span data-ttu-id="08553-655">이 메서드는 변환이 성공한 경우 <c>s</c>에 포함된 숫자의 64비트 부호 있는 정수 값을 반환하고, 변환이 실패한 경우 0을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-655">When this method returns, contains the 64-bit signed integer value equivalent of the number contained in <c>s</c>, if the conversion succeeded, or zero if the conversion failed.</span></span> <span data-ttu-id="08553-656"><c>s</c> 매개 변수가 <see langword="null" /> 또는 <see cref="F:System.String.Empty" />이거나, 형식이 <c>style</c>과 호환되지 않거나, <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타내는 경우 변환이 실패합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-656">The conversion fails if the <c>s</c> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <c>style</c>, or represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span> <span data-ttu-id="08553-657">이 매개 변수는 초기화되지 않은 상태로 전달됩니다. 원래 <c>result</c>에 제공된 모든 값을 덮어쓰게 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-657">This parameter is passed uninitialized; any value originally supplied in <c>result</c> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="08553-658">지정된 스타일 및 문화권별 형식으로 된 숫자의 문자열 표현을 해당하는 64비트 부호 있는 정수로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-658">Converts the string representation of a number in a specified style and culture-specific format to its 64-bit signed integer equivalent.</span></span> <span data-ttu-id="08553-659">반환 값은 변환이 성공했는지 아니면 실패했는지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="08553-659">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns>
          <span data-ttu-id="08553-660"><see langword="true" />가 성공적으로 변환되었으면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-660"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08553-661"><xref:System.Int64.TryParse%2A> 방법은 <xref:System.Int64.Parse%2A> 메서드를 제외 하 고는 <xref:System.Int64.TryParse%2A> 메서드는 변환이 실패할 경우 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-661">The <xref:System.Int64.TryParse%2A> method is like the <xref:System.Int64.Parse%2A> method, except the <xref:System.Int64.TryParse%2A> method does not throw an exception if the conversion fails.</span></span> <span data-ttu-id="08553-662">테스트 하기 위해 예외 처리를 사용할 필요가 <xref:System.FormatException> 에 `s` 잘못 되었으며 성공적으로 구문 분석할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-662">It eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be parsed successfully.</span></span>  
  
 <span data-ttu-id="08553-663">`style` 매개 변수 (예: 공백 또는 양수 또는 음수 기호)에 사용할 수 있는 스타일 요소를 정의 고 `s` 구문 분석 작업이 성공 하려면에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-663">The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="08553-664">비트 플래그의 조합 이어야 합니다는 <xref:System.Globalization.NumberStyles> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-664">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="08553-665">값에 따라 `style`, `s` 매개 변수는 다음과 같은 요소가 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-665">Depending on the value of `style`,the `s` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="08553-666">[ws][$][sign][digits,]digits[.fractional_digits][e[sign]exponential_digits][ws]</span><span class="sxs-lookup"><span data-stu-id="08553-666">[ws][$][sign][digits,]digits[.fractional_digits][e[sign]exponential_digits][ws]</span></span>  
  
 <span data-ttu-id="08553-667">또는 경우에는 `style` 매개 변수를 포함 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="08553-667">Or, if the `style` parameter includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>:</span></span>  
  
 <span data-ttu-id="08553-668">[ws]hexdigits[ws]</span><span class="sxs-lookup"><span data-stu-id="08553-668">[ws]hexdigits[ws]</span></span>  
  
 <span data-ttu-id="08553-669">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-669">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="08553-670">다음 표에서 각 요소에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-670">The following table describes each element.</span></span>  
  
|<span data-ttu-id="08553-671">요소</span><span class="sxs-lookup"><span data-stu-id="08553-671">Element</span></span>|<span data-ttu-id="08553-672">설명</span><span class="sxs-lookup"><span data-stu-id="08553-672">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="08553-673">*ws*</span><span class="sxs-lookup"><span data-stu-id="08553-673">*ws*</span></span>|<span data-ttu-id="08553-674">선택적 공백입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-674">Optional white space.</span></span> <span data-ttu-id="08553-675">맨 앞에 공백이 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 플래그를 또는 끝날 때 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-675">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, or at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="08553-676">Culture 별 통화 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-676">A culture-specific currency symbol.</span></span> <span data-ttu-id="08553-677">위치는 문자열에 의해 정의 됩니다는 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> 의 속성은 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 개체는 <xref:System.IFormatProvider.GetFormat%2A> 의 메서드는 `provider` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-677">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter.</span></span> <span data-ttu-id="08553-678">통화 기호에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-678">The currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="08553-679">*sign*</span><span class="sxs-lookup"><span data-stu-id="08553-679">*sign*</span></span>|<span data-ttu-id="08553-680">가 선택적 부호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-680">An optional sign.</span></span> <span data-ttu-id="08553-681">에 나타날 수는 부호 기호 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 또는 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-681">A sign symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> or <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flags.</span></span>|  
|<span data-ttu-id="08553-682">*digits*</span><span class="sxs-lookup"><span data-stu-id="08553-682">*digits*</span></span><br /><br /> <span data-ttu-id="08553-683">*fractional_digits*</span><span class="sxs-lookup"><span data-stu-id="08553-683">*fractional_digits*</span></span><br /><br /> <span data-ttu-id="08553-684">*exponential_digits*</span><span class="sxs-lookup"><span data-stu-id="08553-684">*exponential_digits*</span></span>|<span data-ttu-id="08553-685">0부터 9 까지의 숫자 시퀀스입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-685">A sequence of digits from 0 through 9.</span></span> <span data-ttu-id="08553-686">에 대 한 *소수 자릿수*숫자 0은 유효한만 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-686">For *fractional_digits*, only the digit 0 is valid.</span></span>|  
|<span data-ttu-id="08553-687">*,*</span><span class="sxs-lookup"><span data-stu-id="08553-687">*,*</span></span>|<span data-ttu-id="08553-688">Culture 별 1000 단위 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-688">A culture-specific thousands separator.</span></span> <span data-ttu-id="08553-689">1000 단위 구분 기호에 지정 된 문화권의 `provider` 에 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-689">The thousands separator of the culture specified by `provider` can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="08553-690">*.*</span><span class="sxs-lookup"><span data-stu-id="08553-690">*.*</span></span>|<span data-ttu-id="08553-691">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-691">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="08553-692">에 지정 된 문화권의 소수점 기호가 `provider` 에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-692">The decimal point symbol of the culture specified by `provider` can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="08553-693">*e*</span><span class="sxs-lookup"><span data-stu-id="08553-693">*e*</span></span>|<span data-ttu-id="08553-694">'E' 또는 'E' 문자는 값은 지 수 표기법으로 표현 됨을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-694">The 'e' or 'E' character, which indicates that the value is represented in exponential notation.</span></span> <span data-ttu-id="08553-695">`s` 경우 매개 변수 지 수 표기법으로 숫자를 나타낼 수 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-695">The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="08553-696">*hexdigits*</span><span class="sxs-lookup"><span data-stu-id="08553-696">*hexdigits*</span></span>|<span data-ttu-id="08553-697">16 진수 숫자 0 ~ f 또는 0-6.</span><span class="sxs-lookup"><span data-stu-id="08553-697">A sequence of hexadecimal digits from 0 through f, or 0 through F.</span></span>|  
  
 <span data-ttu-id="08553-698">숫자만 있는 문자열 (해당 하는 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 플래그) 항상 성공적으로 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-698">A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> flag) always parses successfully.</span></span> <span data-ttu-id="08553-699">나머지 <xref:System.Globalization.NumberStyles> 멤버 수 있지만이 입력된 문자열에 있이 필요가 없습니다 있는 요소를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-699">Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be but are not required to be present in this input string.</span></span> <span data-ttu-id="08553-700">다음 표에서 개별 <xref:System.Globalization.NumberStyles> 멤버에 나타날 수 있는 요소에 영향을 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-700">The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="08553-701">비 복합 NumberStyles 값</span><span class="sxs-lookup"><span data-stu-id="08553-701">Non-composite NumberStyles values</span></span>|<span data-ttu-id="08553-702">S에서 숫자 허용 되는 요소</span><span class="sxs-lookup"><span data-stu-id="08553-702">Elements permitted in s in addition to digits</span></span>|  
|----------------------------------------|---------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType>|<span data-ttu-id="08553-703">10 진수 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-703">Decimal digits only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType>|<span data-ttu-id="08553-704">소수점 ( *합니다.*</span><span class="sxs-lookup"><span data-stu-id="08553-704">The decimal point ( *.*</span></span> <span data-ttu-id="08553-705">) 및 *소수 자릿수* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-705">) and *fractional_digits* elements.</span></span> <span data-ttu-id="08553-706">그러나 *소수 자릿수* 하나 이상의 0 자릿수 또는 메서드가 반환 되는 구성 되어야 합니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-706">However, *fractional_digits* must consist of only one or more 0 digits or the method returns `false`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType>|<span data-ttu-id="08553-707">`s` 매개 변수로 지 수 표기법을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-707">The `s` parameter can also use exponential notation.</span></span> <span data-ttu-id="08553-708">`s` 매개 변수는 범위 내의 정수 나타내야는 <xref:System.Int64> 0이 아닌 소수 부분이 없는 데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-708">The `s` parameter must represent an integer within the range of the <xref:System.Int64> data type without a non-zero fractional component.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType>|<span data-ttu-id="08553-709">*ws* 의 시작 부분에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-709">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>|<span data-ttu-id="08553-710">*ws* 의 끝에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-710">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType>|<span data-ttu-id="08553-711">기호 앞에 올 수 *자릿수*합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-711">A sign can appear before *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType>|<span data-ttu-id="08553-712">뒤에 기호 표시 될 수 있습니다 *자릿수*합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-712">A sign can appear after *digits*.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType>|<span data-ttu-id="08553-713">*기호* 숫자 값이 들어 괄호 안에 형식 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-713">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType>|<span data-ttu-id="08553-714">1000 단위 구분 기호 ( *,* ) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-714">The thousands separator ( *,* ) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType>|<span data-ttu-id="08553-715">* $ * 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-715">The *$* element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency?displayProperty=nameWithType>|<span data-ttu-id="08553-716">모든 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-716">All elements.</span></span> <span data-ttu-id="08553-717">`s` 매개 변수를 16 진수 숫자 또는 지 수 표기법으로 숫자를에서 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-717">The `s` parameter cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType>|<span data-ttu-id="08553-718">*ws* 부분이 나 끝 부분에 요소 `s`, *기호* 맨 앞에 `s`, 소수점 및 ( *합니다.*</span><span class="sxs-lookup"><span data-stu-id="08553-718">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point ( *.*</span></span> <span data-ttu-id="08553-719">) 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-719">) symbol.</span></span> <span data-ttu-id="08553-720">`s` 매개 변수로 지 수 표기법을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-720">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number?displayProperty=nameWithType>|<span data-ttu-id="08553-721">*ws*, *기호*, 1000 단위 구분 기호 (*,*), 소수점 및 (*.*) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-721">The *ws*, *sign*, thousands separator (*,*), and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any?displayProperty=nameWithType>|<span data-ttu-id="08553-722">모든 스타일 제외 하 고 `s` 16 진수를 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-722">All styles, except `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="08553-723">경우는 <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> 플래그를 사용할 `s` 접두사 없이 16 진수 값 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-723">If the <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType> flag is used, `s` must be a hexadecimal value without a prefix.</span></span> <span data-ttu-id="08553-724">예를 들어 "C9AF3" 성공적으로 구문 분석 하지만 "0xC9AF3" 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="08553-724">For example, "C9AF3" parses successfully, but "0xC9AF3" does not.</span></span> <span data-ttu-id="08553-725">다른 플래그만에 있을 수 있는 `style` 는 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-725">The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType>.</span></span> <span data-ttu-id="08553-726">(의 <xref:System.Globalization.NumberStyles> 열거형에는 복합 스타일 <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>, 공백 플래그가 모두를 포함 하는.)</span><span class="sxs-lookup"><span data-stu-id="08553-726">(The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>, that includes both white space flags.)</span></span>  
  
 <span data-ttu-id="08553-727">`provider` 매개 변수는는 <xref:System.IFormatProvider> 구현에서와 같은 한 <xref:System.Globalization.CultureInfo> 개체 또는 <xref:System.Globalization.NumberFormatInfo> 개체의 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-727">The `provider` parameter is an <xref:System.IFormatProvider> implementation, such as a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object, whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="08553-728"><xref:System.Globalization.NumberFormatInfo> 개체의 형식에 대 한 문화권별 정보를 제공 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="08553-728">The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `s`.</span></span> <span data-ttu-id="08553-729">경우 `provider` 은 `null`, <xref:System.Globalization.NumberFormatInfo> 개체가 현재 문화권이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="08553-729">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08553-730">다음 예제에서는 <xref:System.Int64.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Int64%40%29> 메서드는 여러 가지 다른 문자열 및 <xref:System.Globalization.NumberStyles> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="08553-730">The following example calls the <xref:System.Int64.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Int64%40%29> method with a number of different string and <xref:System.Globalization.NumberStyles> values.</span></span>  
  
 [!code-csharp[System.Int64.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Int64.TryParse/cs/TryParse2.cs#2)]
 [!code-vb[System.Int64.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Int64.TryParse/vb/TryParse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="08553-731"><paramref name="style" />이 <see cref="T:System.Globalization.NumberStyles" /> 값이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="08553-731"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
 <span data-ttu-id="08553-732">또는</span><span class="sxs-lookup"><span data-stu-id="08553-732">-or-</span></span>  
  
 <span data-ttu-id="08553-733"><paramref name="style" />이 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 및 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 값의 조합이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="08553-733"><paramref name="style" /> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</span></span></exception>
        <altmember cref="M:System.Int64.Parse(System.String)" />
        <altmember cref="M:System.Int64.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>