<Type Name="AppDomain" FullName="System.AppDomain">
  <TypeSignature Language="C#" Value="public sealed class AppDomain : MarshalByRefObject, _AppDomain, System.Security.IEvidenceFactory" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit AppDomain extends System.MarshalByRefObject implements class System._AppDomain, class System.Security.IEvidenceFactory" />
  <TypeSignature Language="DocId" Value="T:System.AppDomain" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AppDomain&#xA;Inherits MarshalByRefObject&#xA;Implements _AppDomain, IEvidenceFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppDomain sealed : MarshalByRefObject, _AppDomain, System::Security::IEvidenceFactory" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System._AppDomain</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.IEvidenceFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System._AppDomain))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cc35c-101">응용 프로그램이 실행되는 격리된 환경인 응용 프로그램 도메인을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-101">Represents an application domain, which is an isolated environment where applications execute.</span></span> <span data-ttu-id="cc35c-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-103">으로 표시 되는 응용 프로그램 도메인, <xref:System.AppDomain> 개체를 관리 코드를 실행 하는 격리, 언로드 및 보안 경계를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-103">Application domains, which are represented by <xref:System.AppDomain> objects, help provide isolation, unloading, and security boundaries for executing managed code.</span></span>  
  
-   <span data-ttu-id="cc35c-104">응용 프로그램 도메인을 사용 하 여 프로세스를 중단 시킬 수 있는 작업을 격리 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-104">Use application domains to isolate tasks that might bring down a process.</span></span> <span data-ttu-id="cc35c-105">하는 경우의 상태는 <xref:System.AppDomain> 작업을 실행 하는 불안정는 <xref:System.AppDomain> 언로드할 수는 프로세스에 영향을 주지 않고 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-105">If the state of the <xref:System.AppDomain> that's executing a task becomes unstable, the <xref:System.AppDomain> can be unloaded without affecting the process.</span></span> <span data-ttu-id="cc35c-106">프로세스 다시 시작 하지 않고 오래 동안 실행 해야 하는 경우에 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-106">This is important when a process must run for long periods without restarting.</span></span> <span data-ttu-id="cc35c-107">또한 데이터를 공유 해야 하는 작업을 격리 하려면 응용 프로그램 도메인을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-107">You can also use application domains to isolate tasks that should not share data.</span></span>  
  
-   <span data-ttu-id="cc35c-108">어셈블리가 있는 경우 기본 응용 프로그램 도메인에 로드, 프로세스가 실행 되는 동안 메모리에서 언로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-108">If an assembly is loaded into the default application domain, it cannot be unloaded from memory while the process is running.</span></span> <span data-ttu-id="cc35c-109">그러나 로드 하 고 어셈블리를 실행 하는 두 번째 응용 프로그램 도메인을 열면 해당 응용 프로그램 도메인이 언로드될 때 어셈블리 로드 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-109">However, if you open a second application domain to load and execute the assembly, the assembly is unloaded when that application domain is unloaded.</span></span> <span data-ttu-id="cc35c-110">이 기술을 사용 하 여 때 큰 Dll을 사용 하 여 장기 실행 프로세스의 작업 집합을 최소화 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-110">Use this technique to minimize the working set of long-running processes that occasionally use large DLLs.</span></span>  
  
 <span data-ttu-id="cc35c-111">여러 응용 프로그램 도메인은 단일 프로세스;에서 실행할 수 있습니다. 그러나 응용 프로그램 도메인과 스레드 간에 일대일 상관 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-111">Multiple application domains can run in a single process; however, there is not a one-to-one correlation between application domains and threads.</span></span> <span data-ttu-id="cc35c-112">여러 스레드는 단일 응용 프로그램 도메인에 속할 수 있습니다 및 단일 응용 프로그램 도메인에 스레드를 실행 하는 동안 지정된 된 스레드가 지정된 된 시간에는 단일 응용 프로그램 도메인으로 제한 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-112">Several threads can belong to a single application domain, and while a given thread is not confined to a single application domain, at any given time, a thread executes in a single application domain.</span></span>  
  
 <span data-ttu-id="cc35c-113">사용 하 여 응용 프로그램 도메인이 만들어집니다는 <xref:System.AppDomain.CreateDomain%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-113">Application domains are created using the <xref:System.AppDomain.CreateDomain%2A> method.</span></span> <span data-ttu-id="cc35c-114"><xref:System.AppDomain> 인스턴스 로드 하 고 어셈블리를 실행 하는 데 사용 됩니다 (<xref:System.Reflection.Assembly>).</span><span class="sxs-lookup"><span data-stu-id="cc35c-114"><xref:System.AppDomain> instances are used to load and execute assemblies (<xref:System.Reflection.Assembly>).</span></span> <span data-ttu-id="cc35c-115">경우는 <xref:System.AppDomain> 은 더 이상 사용 중인 것 언로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-115">When an <xref:System.AppDomain> is no longer in use, it can be unloaded.</span></span>  
  
 <span data-ttu-id="cc35c-116"><xref:System.AppDomain> 클래스 응용 프로그램 도메인 로드, 됩니다 때 어셈블리를 로드할 때 또는 처리 되지 않은 예외가 throw 될 때 응답 하도록 응용 프로그램을 사용할 수 있는 이벤트의 집합을 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-116">The <xref:System.AppDomain> class implements a set of events that enable applications to respond when an assembly is loaded, when an application domain will be unloaded, or when an unhandled exception is thrown.</span></span>  
  
 <span data-ttu-id="cc35c-117">응용 프로그램 도메인 사용에 대 한 자세한 내용은 참조 하십시오. [응용 프로그램 도메인](~/docs/framework/app-domains/application-domains.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-117">For more information on using application domains, see [Application Domains](~/docs/framework/app-domains/application-domains.md).</span></span>  
  
 <span data-ttu-id="cc35c-118">이 클래스가 구현 하는 <xref:System.MarshalByRefObject>, <xref:System._AppDomain>, 및 <xref:System.Security.IEvidenceFactory> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-118">This class implements the <xref:System.MarshalByRefObject>, <xref:System._AppDomain>, and <xref:System.Security.IEvidenceFactory> interfaces.</span></span>  
  
 <span data-ttu-id="cc35c-119">에 대 한 원격 가능 래퍼를 만들지 마십시오는 <xref:System.AppDomain> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-119">You should never create a remotable wrapper for an <xref:System.AppDomain> object.</span></span> <span data-ttu-id="cc35c-120">이렇게 하는에 대 한 원격 참조를 게시할 수 <xref:System.AppDomain>와 같은 메서드를 노출 <xref:System.AppDomain.CreateInstance%2A> 원격 액세스 및에 대 한 코드 액세스 보안을 효과적으로 제거 <xref:System.AppDomain>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-120">Doing so could publish a remote reference to that <xref:System.AppDomain>, exposing methods such as <xref:System.AppDomain.CreateInstance%2A> to remote access and effectively destroying code access security for that <xref:System.AppDomain>.</span></span> <span data-ttu-id="cc35c-121">면 원격에 연결 되는 악성 클라이언트 <xref:System.AppDomain> 모든 리소스에 대 한 액세스 권한을 얻을 수는 <xref:System.AppDomain> 자체에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-121">Malicious clients connecting to the remoted <xref:System.AppDomain> could obtain access to any resource the <xref:System.AppDomain> itself has access to.</span></span> <span data-ttu-id="cc35c-122">확장 하는 모든 형식에 대 한 원격 가능 래퍼를 만들지 마십시오 <xref:System.MarshalByRefObject> 보안 시스템을 무시 하는 악의적인 클라이언트가 사용할 수 있는 메서드를 구현 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-122">Do not create remotable wrappers for any type that extends <xref:System.MarshalByRefObject> and that implements methods that could be used by malicious clients to bypass the security system.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="cc35c-123">기본값은 <xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=nameWithType> 속성은 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-123">The default value for the <xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=nameWithType> property is `false`.</span></span> <span data-ttu-id="cc35c-124">이 설정은 서비스에 대 한 안전 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-124">This setting is unsafe for services.</span></span> <span data-ttu-id="cc35c-125">서비스에서 부분적으로 신뢰할 수 있는 코드가 다운로드를 방지 하려면이 속성을 설정 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-125">To prevent services from downloading partially trusted code, set this property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-126">이 예제에서는 새 <xref:System.AppDomain>, 새로운의 형식을 인스턴스화할 <xref:System.AppDomain>, 해당 형식의 개체와 통신 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-126">This example shows how to create a new <xref:System.AppDomain>, instantiate a type in that new <xref:System.AppDomain>, and communicate with that type’s object.</span></span> <span data-ttu-id="cc35c-127">또한이 예제에서는 언로드할 수는 <xref:System.AppDomain> 개체가 가비지 수집 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-127">In addition, this example shows how to unload the <xref:System.AppDomain> causing the object to be garbage collected.</span></span>  
  
 [!code-cpp[AppDomainX#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomainX/cpp/AppDomainX.cpp#1)]
 [!code-csharp[AppDomainX#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomainX/cs/AppDomainX.cs#1)]
 [!code-vb[AppDomainX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomainX/VB/AppDomainX.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ActivationContext">
      <MemberSignature Language="C#" Value="public ActivationContext ActivationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ActivationContext ActivationContext" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.ActivationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActivationContext As ActivationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ActivationContext ^ ActivationContext { ActivationContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ActivationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-128">현재 응용 프로그램 도메인의 활성화 컨텍스트를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-128">Gets the activation context for the current application domain.</span></span></summary>
        <value><span data-ttu-id="cc35c-129">현재 응용 프로그램 도메인의 활성화 컨텍스트를 나타내는 개체이거나, 이 도메인에 활성화 컨텍스트가 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-129">An object that represents the activation context for the current application domain, or <see langword="null" /> if the domain has no activation context.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-130">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-130">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-131">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-131">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AppendPrivatePath">
      <MemberSignature Language="C#" Value="public void AppendPrivatePath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendPrivatePath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.AppendPrivatePath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendPrivatePath (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AppendPrivatePath(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.AppendPrivatePath(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("AppDomain.AppendPrivatePath has been deprecated. Please investigate the use of AppDomainSetup.PrivateBinPath instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="cc35c-132">전용 경로에 추가되는 디렉터리 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-132">The name of the directory to be appended to the private path.</span></span></param>
        <summary><span data-ttu-id="cc35c-133">지정된 디렉터리 이름을 전용 경로 목록에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-133">Appends the specified directory name to the private path list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-134">이 속성의 사용에 이미 로드 된 후 어셈블리 검색 경로 변경 될 수 있으므로 권장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-134">The use of this property is not recommended, because it might change the probing path for assemblies after they have already been loaded.</span></span> <span data-ttu-id="cc35c-135">대신 <xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType> 속성을 사용하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-135">Use the <xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 <span data-ttu-id="cc35c-136">전용 경로 또는 상대 검색 경로 어셈블리 확인자에서 전용 어셈블리를 조사 하는 위치는 기본 디렉터리에 상대적인 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-136">The private path, or relative search path, is the path relative to the base directory where the assembly resolver probes for private assemblies.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-137">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-137">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-138">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-138">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-139">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-139">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ApplicationIdentity">
      <MemberSignature Language="C#" Value="public ApplicationIdentity ApplicationIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ApplicationIdentity ApplicationIdentity" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.ApplicationIdentity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationIdentity As ApplicationIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ApplicationIdentity ^ ApplicationIdentity { ApplicationIdentity ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ApplicationIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-140">응용 프로그램 도메인에서 응용 프로그램의 ID를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-140">Gets the identity of the application in the application domain.</span></span></summary>
        <value><span data-ttu-id="cc35c-141">응용 프로그램 도메인에서 응용 프로그램을 식별하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-141">An object that identifies the application in the application domain.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-142">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-142">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-143">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-143">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ApplicationTrust">
      <MemberSignature Language="C#" Value="public System.Security.Policy.ApplicationTrust ApplicationTrust { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.ApplicationTrust ApplicationTrust" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.ApplicationTrust" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationTrust As ApplicationTrust" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Policy::ApplicationTrust ^ ApplicationTrust { System::Security::Policy::ApplicationTrust ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.ApplicationTrust</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-144">응용 프로그램에 부여된 권한 및 해당 응용 프로그램을 실행할 수 있는 신뢰 수준이 있는지를 설명하는 정보를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-144">Gets information describing permissions granted to an application and whether the application has a trust level that allows it to run.</span></span></summary>
        <value><span data-ttu-id="cc35c-145">응용 프로그램 도메인의 응용 프로그램에 대한 권한과 신뢰 정보를 캡슐화하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-145">An object that encapsulates permission and trust information for the application in the application domain.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-146">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-146">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-147">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-147">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ApplyPolicy">
      <MemberSignature Language="C#" Value="public string ApplyPolicy (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ApplyPolicy(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ApplyPolicy(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyPolicy (assemblyName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ApplyPolicy(System::String ^ assemblyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-148"><see cref="P:System.Reflection.Assembly.FullName" /> 속성에서 제공하는 형식의 어셈블리 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-148">The assembly display name, in the form provided by the <see cref="P:System.Reflection.Assembly.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="cc35c-149">정책이 적용된 후 어셈블리 표시 이름을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-149">Returns the assembly display name after policy has been applied.</span></span></summary>
        <returns><span data-ttu-id="cc35c-150">정책이 적용된 후의 어셈블리 표시 이름이 포함된 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-150">A string containing the assembly display name after policy has been applied.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-151"><xref:System.AppDomain.ApplyPolicy%2A> 메서드는 어셈블리 표시 이름, 사후 정책 표시 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-151">The <xref:System.AppDomain.ApplyPolicy%2A> method takes an assembly display name and returns the post-policy display name.</span></span> <span data-ttu-id="cc35c-152">리플렉션 전용 컨텍스트에 정책을 적용 하지 않습니다 때문에 정책을 사용 하 여 어셈블리를 로드 해야 할 경우에 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-152">This is useful if you need to load an assembly using policy, because the reflection-only context does not apply policy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyLoad">
      <MemberSignature Language="C#" Value="public event AssemblyLoadEventHandler AssemblyLoad;" />
      <MemberSignature Language="ILAsm" Value=".event class System.AssemblyLoadEventHandler AssemblyLoad" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.AssemblyLoad" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AssemblyLoad As AssemblyLoadEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event AssemblyLoadEventHandler ^ AssemblyLoad;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.AssemblyLoad</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AssemblyLoadEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-153">어셈블리가 로드될 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-153">Occurs when an assembly is loaded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-154"><xref:System.AssemblyLoadEventHandler> 대리자이 이벤트는 어떤 어셈블리가 로드 되었는지 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-154">The <xref:System.AssemblyLoadEventHandler> delegate for this event indicates what assembly was loaded.</span></span>  
  
 <span data-ttu-id="cc35c-155">이 이벤트에 대 한 이벤트 처리기를 등록 하려면 필요한 사용 권한이 있어야 또는 <xref:System.Security.SecurityException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-155">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="cc35c-156">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-156">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-157">다음 샘플을 참조 하십시오.는 <xref:System.AppDomain.AssemblyLoad> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-157">The following sample demonstrates the <xref:System.AppDomain.AssemblyLoad> event.</span></span>  
  
 <span data-ttu-id="cc35c-158">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-158">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-159">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-159">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_AssemblyLoad#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_AssemblyLoad/CPP/assemblyload.cpp#1)]
 [!code-csharp[AppDomain_AssemblyLoad#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_AssemblyLoad/CS/assemblyload.cs#1)]
 [!code-vb[AppDomain_AssemblyLoad#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_AssemblyLoad/VB/assemblyload.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-160">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-160">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-161">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-161">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AssemblyResolve">
      <MemberSignature Language="C#" Value="public event ResolveEventHandler AssemblyResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ResolveEventHandler AssemblyResolve" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.AssemblyResolve" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AssemblyResolve As ResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event ResolveEventHandler ^ AssemblyResolve;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.AssemblyResolve</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-162">어셈블리를 확인하지 못할 경우 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-162">Occurs when the resolution of an assembly fails.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-163">책임은 <xref:System.ResolveEventHandler> 는 어셈블리를 반환 하 여 지정 된이 이벤트는 <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> 속성을 또는 어셈블리가 인식 되지 않으면 null을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-163">It is the responsibility of the <xref:System.ResolveEventHandler> for this event to return the assembly that is specified by the <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> property, or to return null if the assembly is not recognized.</span></span> <span data-ttu-id="cc35c-164">어셈블리는 실행 컨텍스트에 로드 해야 합니다. 리플렉션 전용 컨텍스트에 로드 하는 경우이 이벤트를 발생 시킨 로드는 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-164">The assembly must be loaded into an execution context; if it is loaded into the reflection-only context, the load that caused this event to be raised fails.</span></span>  
  
 <span data-ttu-id="cc35c-165">이 이벤트의 사용에 대 한 지침을 참조 하십시오. [어셈블리 로드 해결](~/docs/framework/app-domains/resolve-assembly-loads.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-165">For guidance on the use of this event, see [Resolving Assembly Loads](~/docs/framework/app-domains/resolve-assembly-loads.md).</span></span>  
  
 <span data-ttu-id="cc35c-166">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> 속성을 확인할 수 없는 어셈블리 로드를 요청한 어셈블리를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-166">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> property returns the assembly that requested the assembly load that could not be resolved.</span></span> <span data-ttu-id="cc35c-167">예를 들어 로더 수 요청 어셈블리와 해당 종속성 검색 경로에 없기 때문에 요청한 어셈블리의 종속성을 로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-167">For example, the loader might be unable to load a dependency of the requesting assembly because the requesting assembly and its dependency are not in the probing path.</span></span> <span data-ttu-id="cc35c-168">요청한 어셈블리의 id를 알면 종속성의 둘 이상의 버전을 사용할 수 있는 경우 올바른 버전을 확인 또는 종속성을 찾거나에 유용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-168">Knowing the identity of the requesting assembly might be useful in locating the dependency or in identifying the correct version, if more than one version of the dependency is available.</span></span> <span data-ttu-id="cc35c-169">자세한 내용은 <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-169">For more information, see <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cc35c-170">부터는 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], <xref:System.ResolveEventHandler> 리소스 어셈블리를 포함 하는 모든 어셈블리에 대 한 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-170">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the <xref:System.ResolveEventHandler> event is raised for all assemblies, including resource assemblies.</span></span> <span data-ttu-id="cc35c-171">이전 버전에서는 리소스 어셈블리에 대 한 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-171">In earlier versions, the event was not raised for resource assemblies.</span></span> <span data-ttu-id="cc35c-172">운영 체제에 지역화 된 처리기에 여러 번 호출할 수 있습니다: 대체 (fallback) 체인의 각 문화권에 대해 한 번씩입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-172">If the operating system is localized, the handler might be called multiple times: once for each culture in the fallback chain.</span></span>  
  
 <span data-ttu-id="cc35c-173">이 이벤트는 <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> 속성 정책 적용 하기 전에 어셈블리 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-173">For this event, the <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> property returns the assembly name before policy is applied.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cc35c-174">둘 이상의 이벤트 처리기가이 이벤트에 대 한 등록을 하는 경우 이벤트 처리기는 값을 반환할 때까지 순서 대로 이벤트 handlersarecalled 반드시 그럴 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-174">If more than one event handler is registered for this event, the event handlersarecalled in order until an event handler returns a value that isn't `null`.</span></span> <span data-ttu-id="cc35c-175">후속 이벤트 처리기는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-175">Subsequent event handlers are ignored.</span></span>  
  
 <span data-ttu-id="cc35c-176">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-176">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-177">다음 샘플을 참조 하십시오.는 <xref:System.AppDomain.AssemblyResolve> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-177">The following sample demonstrates the <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="cc35c-178">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-178">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-179">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-179">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AssemblyResolve#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyResolve/CPP/assemblyresolve.cpp#1)]
 [!code-csharp[AssemblyResolve#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyResolve/CS/assemblyresolve.cs#1)]
 [!code-vb[AssemblyResolve#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyResolve/VB/assemblyresolve.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-180">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-180">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-181">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-181">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.ResolveEventArgs.RequestingAssembly" />
      </Docs>
    </Member>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.BaseDirectory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-182">어셈블리 확인자에서 어셈블리를 조사하는 데 사용하는 기본 디렉터리를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-182">Gets the base directory that the assembly resolver uses to probe for assemblies.</span></span></summary>
        <value><span data-ttu-id="cc35c-183">어셈블리 확인자에서 어셈블리를 조사하는 데 사용하는 기본 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-183">The base directory that the assembly resolver uses to probe for assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-184">이 속성에 해당 하는 <xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-184">This property corresponds to the <xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="cc35c-185">또한 검색할 수 있습니다를 사용 하는 <xref:System.AppDomain.GetData%2A> 메서드에 "APPBASE" 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-185">It can also be retrieved using the <xref:System.AppDomain.GetData%2A> method with the string "APPBASE".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-186">다음 코드 예제를 도메인에 로드를 어셈블리를 검색할 때 사용할 기본 디렉터리를 지정 하는 새 응용 프로그램 도메인을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-186">The following code example creates a new application domain, specifying a base directory to use when searching for assemblies to load into the domain.</span></span> <span data-ttu-id="cc35c-187">이 예제에서는 다음 사용 하 여는 <xref:System.AppDomain.BaseDirectory%2A> 속성을 콘솔에 표시 하기 위해 기본 디렉터리 경로 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-187">The example then uses the <xref:System.AppDomain.BaseDirectory%2A> property to obtain the base directory path, for display to the console.</span></span>  
  
 [!code-cpp[ADSetup#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADSetup/CPP/adsetup.cpp#1)]
 [!code-csharp[ADSetup#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADSetup/CS/adsetup.cs#1)]
 [!code-vb[ADSetup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADSetup/VB/adsetup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-188">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-188">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-189">경로 자체의 정보에 대 한 액세스를 if 비롯 하 여 경로 "file://" 형태로 또는 \\\UNC\dir 또는 "c:\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-189">for access to the information in the path itself, including if the path is in the form "file://" or \\\UNC\dir or "c:\\".</span></span> <span data-ttu-id="cc35c-190">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-190">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <altmember cref="P:System.AppDomainSetup.ApplicationBase" />
      </Docs>
    </Member>
    <Member MemberName="ClearPrivatePath">
      <MemberSignature Language="C#" Value="public void ClearPrivatePath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearPrivatePath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ClearPrivatePath" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearPrivatePath ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ClearPrivatePath();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ClearPrivatePath</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("AppDomain.ClearPrivatePath has been deprecated. Please investigate the use of AppDomainSetup.PrivateBinPath instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc35c-191">전용 어셈블리의 위치를 지정하는 경로를 빈 문자열("")로 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-191">Resets the path that specifies the location of private assemblies to the empty string ("").</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-192">전용 경로 공용 언어 런타임에서 전용 어셈블리를 찾는 검색 하는 기본 디렉터리의 상대 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-192">The private path is a path relative to the base directory that the common language runtime searches to locate private assemblies.</span></span>  
  
 <span data-ttu-id="cc35c-193">자세한 내용은 <xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="cc35c-193">For more information, see <xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-194">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.AppDomain.ClearPrivatePath%2A> 메서드를 검색할 어셈블리를 로드할 때 전용 경로 목록에서 모든 항목을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-194">The following code example demonstrates how to use the <xref:System.AppDomain.ClearPrivatePath%2A> method to remove all entries from the list of private paths to search when assemblies are loaded.</span></span>  
  
 <span data-ttu-id="cc35c-195">이 메서드는 이전 이제 하며 새로운 개발에 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-195">This method is now obsolete, and should not be used for new development.</span></span>  
  
 [!code-cpp[ADClearPrivatePath#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADClearPrivatePath/CPP/adclearprivatepath.cpp#1)]
 [!code-csharp[ADClearPrivatePath#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADClearPrivatePath/CS/adclearprivatepath.cs#1)]
 [!code-vb[ADClearPrivatePath#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADClearPrivatePath/VB/adclearprivatepath.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-196">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-196">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-197">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-197">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-198">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-198">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="ClearShadowCopyPath">
      <MemberSignature Language="C#" Value="public void ClearShadowCopyPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearShadowCopyPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ClearShadowCopyPath" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearShadowCopyPath ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ClearShadowCopyPath();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ClearShadowCopyPath</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use AppDomainSetup.ShadowCopyDirectories")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc35c-199">섀도 복사된 어셈블리를 포함하는 디렉터리 목록을 빈 문자열("")로 다시 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-199">Resets the list of directories containing shadow copied assemblies to the empty string ("").</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-200">섀도 복사본 경로가 어셈블리 섀도 복사 디렉터리의 목록이 저장 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-200">The shadow copy path is a list of directories where shadow copied assemblies are stored.</span></span>  
  
 <span data-ttu-id="cc35c-201">자세한 내용은 참조 <xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=nameWithType> 및 [어셈블리 섀도 복사](~/docs/framework/app-domains/shadow-copy-assemblies.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-201">For more information, see <xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=nameWithType> and [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-202">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-202">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-203">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-203">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-204">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-204">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateComInstanceFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc35c-205">지정한 COM 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-205">Creates a new instance of a specified COM type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateComInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateComInstanceFrom (assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::ObjectHandle ^ CreateComInstanceFrom(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-206">요청된 형식을 정의하는 어셈블리가 포함된 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-206">The name of a file containing an assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-207">요청된 형식의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-207">The name of the requested type.</span></span></param>
        <summary><span data-ttu-id="cc35c-208">지정한 COM 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-208">Creates a new instance of a specified COM type.</span></span> <span data-ttu-id="cc35c-209">매개 변수는 형식 및 형식 이름을 포함하는 어셈블리가 포함된 파일 이름을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-209">Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</span></span></summary>
        <returns><span data-ttu-id="cc35c-210"><paramref name="typeName" />에서 지정한 새 인스턴스의 래퍼인 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-210">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="cc35c-211">실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-211">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-212">이 메서드를 사용 하 여 형식을 로컬로 로드할 필요 없이 개체를 원격으로 만들려는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-212">Use this method to create objects remotely without having to load the type locally.</span></span>  
  
 <span data-ttu-id="cc35c-213">반환 값은 래핑되지 실제 개체에 액세스 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-213">The return value must to be unwrapped to access the real object.</span></span>  
  
 <span data-ttu-id="cc35c-214">A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType> 의 값을 가진 특성 `true` ; 해당 형식의 인스턴스를 만들려면이 메서드에 대 한 COM 형식으로 명시적으로 나 기본적으로 적용할 해야 그렇지 않으면 <xref:System.TypeLoadException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-214">A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType> attribute with a value of `true` must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-215">다음 샘플을 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="cc35c-215">The following sample demonstrates</span></span>  
  
 [!code-cpp[AppDomain_CreateComInstanceFrom#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_CreateComInstanceFrom/CPP/createcominstancefrom.cpp#1)]
 [!code-csharp[AppDomain_CreateComInstanceFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_CreateComInstanceFrom/CS/createcominstancefrom.cs#1)]
 [!code-vb[AppDomain_CreateComInstanceFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_CreateComInstanceFrom/VB/createcominstancefrom.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-216"><paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-216"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="cc35c-217">형식을 로드할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="cc35c-217">The type cannot be loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-218">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-218">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-219">매개 변수가 없는 public 생성자를 찾지 못한 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-219">No public parameterless constructor was found.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-220"><paramref name="assemblyName" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-220"><paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="cc35c-221"><paramref name="typeName" />는 추상 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-221"><paramref name="typeName" /> is an abstract class.</span></span>  
  
 <span data-ttu-id="cc35c-222">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-222">-or-</span></span>  
  
 <span data-ttu-id="cc35c-223">이 멤버가 런타임에 바인딩된 메커니즘을 사용하여 호출되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-223">This member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-224">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-224">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cc35c-225"><paramref name="assemblyName" />가 빈 문자열("")인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-225"><paramref name="assemblyName" /> is an empty string ("").</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-226"><paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-226"><paramref name="assemblyName" /> is not a valid assembly.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-227">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-227">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="cc35c-228">참조되는 COM 개체가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-228">The COM object that is being referred to is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-229">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-229">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-230">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-230">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-231">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-231">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateComInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateComInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyFile, string typeName, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(string assemblyFile, string typeName, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateComInstanceFrom (assemblyFile As String, typeName As String, hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::ObjectHandle ^ CreateComInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="cc35c-232">요청된 형식을 정의하는 어셈블리가 포함된 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-232">The name of a file containing an assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-233">요청된 형식의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-233">The name of the requested type.</span></span></param>
        <param name="hashValue"><span data-ttu-id="cc35c-234">계산된 해시 코드의 값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-234">Represents the value of the computed hash code.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="cc35c-235">어셈블리 매니페스트에 사용되는 해시 알고리즘을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-235">Represents the hash algorithm used by the assembly manifest.</span></span></param>
        <summary><span data-ttu-id="cc35c-236">지정한 COM 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-236">Creates a new instance of a specified COM type.</span></span> <span data-ttu-id="cc35c-237">매개 변수는 형식 및 형식 이름을 포함하는 어셈블리가 포함된 파일 이름을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-237">Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</span></span></summary>
        <returns><span data-ttu-id="cc35c-238"><paramref name="typeName" />에서 지정한 새 인스턴스의 래퍼인 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-238">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="cc35c-239">실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-239">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-240">이 메서드를 사용 하 여 형식을 로컬로 로드할 필요 없이 개체를 원격으로 만들려는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-240">Use this method to create objects remotely without having to load the type locally.</span></span>  
  
 <span data-ttu-id="cc35c-241">반환 값은 래핑되지 실제 개체에 액세스 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-241">The return value must to be unwrapped to access the real object.</span></span>  
  
 <span data-ttu-id="cc35c-242">A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType> 의 값을 가진 특성 `true` ; 해당 형식의 인스턴스를 만들려면이 메서드에 대 한 COM 형식으로 명시적으로 나 기본적으로 적용할 해야 그렇지 않으면 <xref:System.TypeLoadException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-242">A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType> attribute with a value of `true` must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-243"><paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-243"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="cc35c-244">형식을 로드할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="cc35c-244">The type cannot be loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-245">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-245">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-246">매개 변수가 없는 public 생성자를 찾지 못한 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-246">No public parameterless constructor was found.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-247"><paramref name="assemblyFile" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-247"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="cc35c-248"><paramref name="typeName" />는 추상 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-248"><paramref name="typeName" /> is an abstract class.</span></span>  
  
 <span data-ttu-id="cc35c-249">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-249">-or-</span></span>  
  
 <span data-ttu-id="cc35c-250">이 멤버가 런타임에 바인딩된 메커니즘을 사용하여 호출되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-250">This member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-251">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-251">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="cc35c-252"><paramref name="assemblyFile" />가 빈 문자열("")입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-252"><paramref name="assemblyFile" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-253"><paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-253"><paramref name="assemblyFile" /> is not a valid assembly.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-254">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-254">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="cc35c-255">참조되는 COM 개체가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-255">The COM object that is being referred to is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-256">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-256">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-257">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-257">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-258">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-258">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateComInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDomain">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc35c-259">새 응용 프로그램 도메인을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-259">Creates a new application domain.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="cc35c-260">도메인의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-260">The friendly name of the domain.</span></span></param>
        <summary><span data-ttu-id="cc35c-261">지정한 이름을 가진 새 응용 프로그램 도메인을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-261">Creates a new application domain with the specified name.</span></span></summary>
        <returns><span data-ttu-id="cc35c-262">새로 만든 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-262">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-263">`friendlyName` 매개 변수는 사용자에 게 의미 있는 방식으로 도메인을 식별 하기 위한 것이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-263">The `friendlyName` parameter is intended to identify the domain in a manner that is meaningful to humans.</span></span> <span data-ttu-id="cc35c-264">이 문자열은 사용자 인터페이스에 표시 하기에 적합 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-264">This string should be suitable for display in user interfaces.</span></span>  
  
 <span data-ttu-id="cc35c-265">이 메서드 오버 로드는 <xref:System.AppDomainSetup> 기본 응용 프로그램 도메인의 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-265">This method overload uses the <xref:System.AppDomainSetup> information from the default application domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-266">다음 예제에서는, 일반적으로 중 하나를 사용 하 여 도메인을 만드는 방법의 <xref:System.AppDomain.CreateDomain%2A> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-266">The following sample demonstrates, in general, how to create a domain using one of the <xref:System.AppDomain.CreateDomain%2A> overloads.</span></span>  
  
 [!code-cpp[AppDomain_Setup#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_Setup/CPP/setup.cpp#1)]
 [!code-csharp[AppDomain_Setup#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/CS/setup.cs#1)]
 [!code-vb[AppDomain_Setup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_Setup/VB/setup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-267"><paramref name="friendlyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-267"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-268">증명 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-268">to provide evidence.</span></span> <span data-ttu-id="cc35c-269">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-269">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="P:System.AppDomain.FriendlyName" />
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="cc35c-270">도메인의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-270">The friendly name of the domain.</span></span> <span data-ttu-id="cc35c-271">이 이름은 도메인을 식별하기 위해 사용자 인터페이스에 표시될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-271">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="cc35c-272">자세한 내용은 <see cref="P:System.AppDomain.FriendlyName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-272">For more information, see <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="cc35c-273">응용 프로그램 도메인에서 실행되는 코드의 ID를 설정하는 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-273">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="cc35c-274">현재 응용 프로그램 도메인의 증거를 사용하려면 <see langword="null" />을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-274">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <summary><span data-ttu-id="cc35c-275">제공된 증명 정보를 사용하여 지정한 이름을 가진 새 응용 프로그램 도메인을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-275">Creates a new application domain with the given name using the supplied evidence.</span></span></summary>
        <returns><span data-ttu-id="cc35c-276">새로 만든 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-276">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-277">이 메서드 오버 로드는 <xref:System.AppDomainSetup> 기본 응용 프로그램 도메인의 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-277">This method overload uses the <xref:System.AppDomainSetup> information from the default application domain.</span></span>  
  
 <span data-ttu-id="cc35c-278">경우 `securityInfo` 가 제공 되지 않으면 현재 응용 프로그램 도메인의 증명 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-278">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cc35c-279">샌드 박싱된 응용 프로그램 도메인을 만드는이 메서드 오버 로드를 사용 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="cc35c-279">Do not use this method overload to create sandboxed application domains.</span></span> <span data-ttu-id="cc35c-280">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]을 위해 제공 된 증거 `securityInfo` 더 이상 응용 프로그램 도메인의 권한 부여 집합에 영향을 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-280">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the evidence that is supplied for `securityInfo` no longer affects the grant set of the application domain.</span></span> <span data-ttu-id="cc35c-281">사용 된 <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> 메서드 오버 로드를 샌드 박싱된 응용 프로그램 도메인을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-281">Use the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> method overload to create sandboxed application domains.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-282">다음 예제에서는, 일반적으로 중 하나를 사용 하 여 도메인을 만드는 방법의 <xref:System.AppDomain.CreateDomain%2A> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-282">The following sample demonstrates, in general, how to create a domain using one of the <xref:System.AppDomain.CreateDomain%2A> overloads.</span></span>  
  
 [!code-cpp[AppDomain_Setup#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_Setup/CPP/setup.cpp#1)]
 [!code-csharp[AppDomain_Setup#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/CS/setup.cs#1)]
 [!code-vb[AppDomain_Setup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_Setup/VB/setup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-283"><paramref name="friendlyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-283"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-284">증명 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-284">to provide evidence.</span></span> <span data-ttu-id="cc35c-285">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-285">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup info);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence, info As AppDomainSetup) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ info);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="info" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="cc35c-286">도메인의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-286">The friendly name of the domain.</span></span> <span data-ttu-id="cc35c-287">이 이름은 도메인을 식별하기 위해 사용자 인터페이스에 표시될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-287">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="cc35c-288">자세한 내용은 <see cref="P:System.AppDomain.FriendlyName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-288">For more information, see <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="cc35c-289">응용 프로그램 도메인에서 실행되는 코드의 ID를 설정하는 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-289">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="cc35c-290">현재 응용 프로그램 도메인의 증거를 사용하려면 <see langword="null" />을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-290">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <param name="info"><span data-ttu-id="cc35c-291">응용 프로그램 도메인 초기화 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-291">An object that contains application domain initialization information.</span></span></param>
        <summary><span data-ttu-id="cc35c-292">지정한 이름, 증명 정보 및 응용 프로그램 도메인 설치 정보를 사용하여 새 응용 프로그램 도메인을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-292">Creates a new application domain using the specified name, evidence, and application domain setup information.</span></span></summary>
        <returns><span data-ttu-id="cc35c-293">새로 만든 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-293">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-294">경우 `info` 가 제공 되지 않으면이 메서드 오버 로드 사용 하 여는 <xref:System.AppDomainSetup> 기본 응용 프로그램 도메인의 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-294">If `info` is not supplied, this method overload uses the <xref:System.AppDomainSetup> information from the default application domain.</span></span>  
  
 <span data-ttu-id="cc35c-295">경우 `securityInfo` 가 제공 되지 않으면 현재 응용 프로그램 도메인의 증명 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-295">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cc35c-296">샌드 박싱된 응용 프로그램 도메인을 만드는이 메서드 오버 로드를 사용 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="cc35c-296">Do not use this method overload to create sandboxed application domains.</span></span> <span data-ttu-id="cc35c-297">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]을 위해 제공 된 증거 `securityInfo` 더 이상 응용 프로그램 도메인의 권한 부여 집합에 영향을 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-297">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the evidence that is supplied for `securityInfo` no longer affects the grant set of the application domain.</span></span> <span data-ttu-id="cc35c-298">사용 된 <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> 메서드 오버 로드를 샌드 박싱된 응용 프로그램 도메인을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-298">Use the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> method overload to create sandboxed application domains.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-299">다음 예제에서는, 일반적으로 중 하나를 사용 하 여 도메인을 만드는 방법의 <xref:System.AppDomain.CreateDomain%2A> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-299">The following sample demonstrates, in general, how to create a domain using one of the <xref:System.AppDomain.CreateDomain%2A> overloads.</span></span>  
  
 [!code-cpp[AppDomain_Setup#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_Setup/CPP/setup.cpp#1)]
 [!code-csharp[AppDomain_Setup#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/CS/setup.cs#1)]
 [!code-vb[AppDomain_Setup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_Setup/VB/setup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-300"><paramref name="friendlyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-300"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-301">증명 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-301">to provide evidence.</span></span> <span data-ttu-id="cc35c-302">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-302">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup info, System.Security.PermissionSet grantSet, params System.Security.Policy.StrongName[] fullTrustAssemblies);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup info, class System.Security.PermissionSet grantSet, class System.Security.Policy.StrongName[] fullTrustAssemblies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence, info As AppDomainSetup, grantSet As PermissionSet, ParamArray fullTrustAssemblies As StrongName()) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ info, System::Security::PermissionSet ^ grantSet, ... cli::array &lt;System::Security::Policy::StrongName ^&gt; ^ fullTrustAssemblies);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="info" Type="System.AppDomainSetup" />
        <Parameter Name="grantSet" Type="System.Security.PermissionSet" />
        <Parameter Name="fullTrustAssemblies" Type="System.Security.Policy.StrongName[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="cc35c-303">도메인의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-303">The friendly name of the domain.</span></span> <span data-ttu-id="cc35c-304">이 이름은 도메인을 식별하기 위해 사용자 인터페이스에 표시될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-304">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="cc35c-305">자세한 내용은 <see cref="P:System.AppDomain.FriendlyName" />의 설명을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-305">For more information, see the description of <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="cc35c-306">응용 프로그램 도메인에서 실행되는 코드의 ID를 설정하는 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-306">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="cc35c-307">현재 응용 프로그램 도메인의 증거를 사용하려면 <see langword="null" />을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-307">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <param name="info"><span data-ttu-id="cc35c-308">응용 프로그램 도메인 초기화 정보를 포함하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-308">An object that contains application domain initialization information.</span></span></param>
        <param name="grantSet"><span data-ttu-id="cc35c-309">새 응용 프로그램 도메인에 로드된 특정 권한이 없는 모든 어셈블리에 부여된 기본 권한 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-309">A default permission set that is granted to all assemblies loaded into the new application domain that do not have specific grants.</span></span></param>
        <param name="fullTrustAssemblies"><span data-ttu-id="cc35c-310">새 응용 프로그램 도메인에서 완전히 신뢰할 수 있는 것으로 간주할 어셈블리를 나타내는 강력한 이름의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-310">An array of strong names representing assemblies to be considered fully trusted in the new application domain.</span></span></param>
        <summary><span data-ttu-id="cc35c-311">지정한 이름, 증명 정보, 응용 프로그램 도메인 설치 정보, 기본 권한 집합 및 완전히 신뢰할 수 있는 어셈블리의 배열을 사용하여 새 응용 프로그램 도메인을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-311">Creates a new application domain using the specified name, evidence, application domain setup information, default permission set, and array of fully trusted assemblies.</span></span></summary>
        <returns><span data-ttu-id="cc35c-312">새로 만든 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-312">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-313">설정 해야 합니다는 <xref:System.AppDomainSetup.ApplicationBase%2A> 의 속성은 <xref:System.AppDomainSetup> 에 대해 제공 하는 개체 `info`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-313">You must set the <xref:System.AppDomainSetup.ApplicationBase%2A> property of the <xref:System.AppDomainSetup> object that you supply for `info`.</span></span> <span data-ttu-id="cc35c-314">그러지 않으면 예외가 throw됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-314">Otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="cc35c-315">경우 `securityInfo` 가 제공 되지 않으면 현재 응용 프로그램 도메인의 증명 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-315">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
 <span data-ttu-id="cc35c-316">에 제공 된 정보의 `grantSet` 및 `fullTrustAssemblies` 만드는 데 사용 되는 <xref:System.Security.Policy.ApplicationTrust> 새 응용 프로그램 도메인에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-316">The information provided for `grantSet` and `fullTrustAssemblies` is used to create an <xref:System.Security.Policy.ApplicationTrust> object for the new application domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-317"><paramref name="friendlyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-317"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cc35c-318">응용 프로그램 도메인이 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-318">The application domain is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-319">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-319">-or-</span></span>  
  
 <span data-ttu-id="cc35c-320"><see cref="P:System.AppDomainSetup.ApplicationBase" /> 속성은 <paramref name="info" />에 대해 공급되는 <see cref="T:System.AppDomainSetup" /> 개체에 설정되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-320">The <see cref="P:System.AppDomainSetup.ApplicationBase" /> property is not set on the <see cref="T:System.AppDomainSetup" /> object that is supplied for <paramref name="info" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-321">만들고 응용 프로그램 도메인을 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-321">for the ability to create and manipulate an application domain.</span></span> <span data-ttu-id="cc35c-322">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-322">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</span></span> <span data-ttu-id="cc35c-323">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-323">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence, appBasePath As String, appRelativeSearchPath As String, shadowCopyFiles As Boolean) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, System::String ^ appBasePath, System::String ^ appRelativeSearchPath, bool shadowCopyFiles);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appBasePath" Type="System.String" />
        <Parameter Name="appRelativeSearchPath" Type="System.String" />
        <Parameter Name="shadowCopyFiles" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="cc35c-324">도메인의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-324">The friendly name of the domain.</span></span> <span data-ttu-id="cc35c-325">이 이름은 도메인을 식별하기 위해 사용자 인터페이스에 표시될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-325">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="cc35c-326">자세한 내용은 <see cref="P:System.AppDomain.FriendlyName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-326">For more information, see <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="cc35c-327">응용 프로그램 도메인에서 실행되는 코드의 ID를 설정하는 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-327">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="cc35c-328">현재 응용 프로그램 도메인의 증거를 사용하려면 <see langword="null" />을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-328">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <param name="appBasePath"><span data-ttu-id="cc35c-329">어셈블리 확인자에서 어셈블리를 조사하는 데 사용하는 기본 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-329">The base directory that the assembly resolver uses to probe for assemblies.</span></span> <span data-ttu-id="cc35c-330">자세한 내용은 <see cref="P:System.AppDomain.BaseDirectory" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-330">For more information, see <see cref="P:System.AppDomain.BaseDirectory" />.</span></span></param>
        <param name="appRelativeSearchPath"><span data-ttu-id="cc35c-331">어셈블리 확인자에서 전용 어셈블리를 조사할 기본 디렉터리에 대한 상대 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-331">The path relative to the base directory where the assembly resolver should probe for private assemblies.</span></span> <span data-ttu-id="cc35c-332">자세한 내용은 <see cref="P:System.AppDomain.RelativeSearchPath" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-332">For more information, see <see cref="P:System.AppDomain.RelativeSearchPath" />.</span></span></param>
        <param name="shadowCopyFiles"><span data-ttu-id="cc35c-333"><see langword="true" />인 경우 어셈블리의 섀도 복사본이 이 응용 프로그램 도메인에 로드됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-333">If <see langword="true" />, a shadow copy of an assembly is loaded into this application domain.</span></span></param>
        <summary><span data-ttu-id="cc35c-334">어셈블리의 섀도 복사본이 응용 프로그램 도메인에 로드되는지를 지정하는 매개 변수, 증명 정보, 응용 프로그램 기본 경로 및 상대 검색 경로를 사용하여 지정한 이름을 가진 새 응용 프로그램 도메인을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-334">Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</span></span></summary>
        <returns><span data-ttu-id="cc35c-335">새로 만든 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-335">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-336">경우 `securityInfo` 가 제공 되지 않으면 현재 응용 프로그램 도메인의 증명 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-336">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
 <span data-ttu-id="cc35c-337">섀도 복사 하는 방법에 대 한 자세한 내용은 참조 <xref:System.AppDomain.ShadowCopyFiles%2A> 및 [어셈블리 섀도 복사](~/docs/framework/app-domains/shadow-copy-assemblies.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-337">For more information about shadow copying, see <xref:System.AppDomain.ShadowCopyFiles%2A> and [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cc35c-338">샌드 박싱된 응용 프로그램 도메인을 만드는이 메서드 오버 로드를 사용 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="cc35c-338">Do not use this method overload to create sandboxed application domains.</span></span> <span data-ttu-id="cc35c-339">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]을 위해 제공 된 증거 `securityInfo` 더 이상 응용 프로그램 도메인의 권한 부여 집합에 영향을 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-339">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the evidence that is supplied for `securityInfo` no longer affects the grant set of the application domain.</span></span> <span data-ttu-id="cc35c-340">사용 된 <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> 메서드 오버 로드를 샌드 박싱된 응용 프로그램 도메인을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-340">Use the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> method overload to create sandboxed application domains.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-341">다음 예제에서는, 일반적으로 중 하나를 사용 하 여 도메인을 만드는 방법의 <xref:System.AppDomain.CreateDomain%2A> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-341">The following sample demonstrates, in general, how to create a domain using one of the <xref:System.AppDomain.CreateDomain%2A> overloads.</span></span>  
  
 [!code-cpp[AppDomain_Setup#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_Setup/CPP/setup.cpp#1)]
 [!code-csharp[AppDomain_Setup#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/CS/setup.cs#1)]
 [!code-vb[AppDomain_Setup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_Setup/VB/setup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-342"><paramref name="friendlyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-342"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-343">증명 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-343">to provide evidence.</span></span> <span data-ttu-id="cc35c-344">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-344">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles, AppDomainInitializer adInit, string[] adInitArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles, class System.AppDomainInitializer adInit, string[] adInitArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence, appBasePath As String, appRelativeSearchPath As String, shadowCopyFiles As Boolean, adInit As AppDomainInitializer, adInitArgs As String()) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, System::String ^ appBasePath, System::String ^ appRelativeSearchPath, bool shadowCopyFiles, AppDomainInitializer ^ adInit, cli::array &lt;System::String ^&gt; ^ adInitArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appBasePath" Type="System.String" />
        <Parameter Name="appRelativeSearchPath" Type="System.String" />
        <Parameter Name="shadowCopyFiles" Type="System.Boolean" />
        <Parameter Name="adInit" Type="System.AppDomainInitializer" />
        <Parameter Name="adInitArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="cc35c-345">도메인의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-345">The friendly name of the domain.</span></span> <span data-ttu-id="cc35c-346">이 이름은 도메인을 식별하기 위해 사용자 인터페이스에 표시될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-346">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="cc35c-347">자세한 내용은 <see cref="P:System.AppDomain.FriendlyName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-347">For more information, see <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="cc35c-348">응용 프로그램 도메인에서 실행되는 코드의 ID를 설정하는 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-348">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="cc35c-349">현재 응용 프로그램 도메인의 증거를 사용하려면 <see langword="null" />을 전달합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-349">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <param name="appBasePath"><span data-ttu-id="cc35c-350">어셈블리 확인자에서 어셈블리를 조사하는 데 사용하는 기본 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-350">The base directory that the assembly resolver uses to probe for assemblies.</span></span> <span data-ttu-id="cc35c-351">자세한 내용은 <see cref="P:System.AppDomain.BaseDirectory" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-351">For more information, see <see cref="P:System.AppDomain.BaseDirectory" />.</span></span></param>
        <param name="appRelativeSearchPath"><span data-ttu-id="cc35c-352">어셈블리 확인자에서 전용 어셈블리를 조사할 기본 디렉터리에 대한 상대 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-352">The path relative to the base directory where the assembly resolver should probe for private assemblies.</span></span> <span data-ttu-id="cc35c-353">자세한 내용은 <see cref="P:System.AppDomain.RelativeSearchPath" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-353">For more information, see <see cref="P:System.AppDomain.RelativeSearchPath" />.</span></span></param>
        <param name="shadowCopyFiles">
          <span data-ttu-id="cc35c-354">어셈블리의 섀도 복사본을 응용 프로그램 도메인에 로드하려면 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-354"><see langword="true" /> to load a shadow copy of an assembly into the application domain.</span></span></param>
        <param name="adInit"><span data-ttu-id="cc35c-355">새 <see cref="T:System.AppDomain" /> 개체가 초기화될 때 호출할 콜백 메서드를 나타내는 <see cref="T:System.AppDomainInitializer" /> 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-355">An <see cref="T:System.AppDomainInitializer" /> delegate that represents a callback method to invoke when the new <see cref="T:System.AppDomain" /> object is initialized.</span></span></param>
        <param name="adInitArgs"><span data-ttu-id="cc35c-356">새 <see cref="T:System.AppDomain" /> 개체가 초기화될 때 <c>adInit</c>에서 나타내는 콜백으로 전달할 문자열 인수의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-356">An array of string arguments to be passed to the callback represented by <c>adInit</c>, when the new <see cref="T:System.AppDomain" /> object is initialized.</span></span></param>
        <summary><span data-ttu-id="cc35c-357">어셈블리의 섀도 복사본이 응용 프로그램 도메인에 로드되는지를 지정하는 매개 변수, 증명 정보, 응용 프로그램 기본 경로 및 상대 검색 경로를 사용하여 지정한 이름을 가진 새 응용 프로그램 도메인을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-357">Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</span></span> <span data-ttu-id="cc35c-358">응용 프로그램 도메인이 초기화될 때 호출되는 콜백 메서드와 콜백 메서드를 전달할 문자열 인수의 배열을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-358">Specifies a callback method that is invoked when the application domain is initialized, and an array of string arguments to pass the callback method.</span></span></summary>
        <returns><span data-ttu-id="cc35c-359">새로 만든 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-359">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-360">가 나타내는 메서드로 `adInit` 새로 만든된 응용 프로그램 도메인의 컨텍스트에서 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-360">The method represented by `adInit` is executed in the context of the newly created application domain.</span></span>  
  
 <span data-ttu-id="cc35c-361">경우 `securityInfo` 가 제공 되지 않으면 현재 응용 프로그램 도메인의 증명 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-361">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
 <span data-ttu-id="cc35c-362">섀도 복사 하는 방법에 대 한 자세한 내용은 참조 <xref:System.AppDomain.ShadowCopyFiles%2A> 및 [어셈블리 섀도 복사](~/docs/framework/app-domains/shadow-copy-assemblies.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-362">For more information about shadow copying, see <xref:System.AppDomain.ShadowCopyFiles%2A> and [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cc35c-363">샌드 박싱된 응용 프로그램 도메인을 만드는이 메서드 오버 로드를 사용 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="cc35c-363">Do not use this method overload to create sandboxed application domains.</span></span> <span data-ttu-id="cc35c-364">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]을 위해 제공 된 증거 `securityInfo` 더 이상 응용 프로그램 도메인의 권한 부여 집합에 영향을 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-364">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the evidence that is supplied for `securityInfo` no longer affects the grant set of the application domain.</span></span> <span data-ttu-id="cc35c-365">사용 된 <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> 메서드 오버 로드를 샌드 박싱된 응용 프로그램 도메인을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-365">Use the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> method overload to create sandboxed application domains.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-366"><paramref name="friendlyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-366"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-367">증명 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-367">to provide evidence.</span></span> <span data-ttu-id="cc35c-368">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-368">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc35c-369">지정한 어셈블리에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-369">Creates a new instance of a specified type defined in a specified assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstance (assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstance(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-370">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-370">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-371"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-371">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-372">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-372">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="cc35c-373">지정된 어셈블리에 정의되어 있는 지정된 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-373">Creates a new instance of the specified type defined in the specified assembly.</span></span></summary>
        <returns><span data-ttu-id="cc35c-374"><paramref name="typeName" />에서 지정한 새 인스턴스의 래퍼인 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-374">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="cc35c-375">실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-375">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-376">이 메서드 호출에 대 한 기본 생성자 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-376">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="cc35c-377">참조 <xref:System.Reflection.AssemblyName> 형식의 `assemblyName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-377">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span>  
  
 <span data-ttu-id="cc35c-378">호출 하려는 경우 <xref:System.AppDomain.CreateInstance%2A> 응용 프로그램 도메인은 현재 어플리케이션 도메인에 없는 대상에 대상 응용 프로그램 도메인에 있는 어셈블리의 성공적인 로드 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-378">An attempt to call <xref:System.AppDomain.CreateInstance%2A> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</span></span> <span data-ttu-id="cc35c-379">이후는 <xref:System.Reflection.Assembly> 않습니다 <xref:System.MarshalByRefObject>이 메서드를 반환 하려고 시도 하는 경우는 <xref:System.Reflection.Assembly> 은 현재 어플리케이션 도메인에 로드 된 어셈블리에 대 한 공용 언어 런타임은 하려고은 현재 어플리케이션 도메인에 어셈블리를 로드 및 부하 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-379">Since an <xref:System.Reflection.Assembly> is not <xref:System.MarshalByRefObject>, when this method attempts to return the <xref:System.Reflection.Assembly> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</span></span> <span data-ttu-id="cc35c-380">현재 어플리케이션 도메인에 로드 된 어셈블리는 두 응용 프로그램 도메인에 대 한 경로 설정을 서로 다른 경우 먼저 로드 된 어셈블리와 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-380">The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-381">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-381">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-382"><paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-382"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-383"><paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-383"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-384">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-384">-or-</span></span>  
  
 <span data-ttu-id="cc35c-385">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-385">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-386">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-386">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-387"><paramref name="assemblyName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-387"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-388">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-388">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-389">일치하는 public 생성자를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-389">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-390"><paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-390"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="cc35c-391">이 인스턴스가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-391">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-392">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-392">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-393">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-393">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-394">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-394">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-395">에 대 한 대리자의 인스턴스를 만들 때 비관리 코드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-395">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="cc35c-396">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-396">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstance (assemblyName As String, typeName As String, activationAttributes As Object()) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstance(System.String,System.String,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-397">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-397">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-398"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-398">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-399">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-399">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="cc35c-400">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-400">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="cc35c-401">일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-401">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="cc35c-402">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-402">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="cc35c-403">분산된 응용 프로그램은 Windows Communication Foundation을 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-403">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="cc35c-404">지정된 어셈블리에 정의되어 있는 지정된 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-404">Creates a new instance of the specified type defined in the specified assembly.</span></span> <span data-ttu-id="cc35c-405">매개 변수에서는 활성화 특성의 배열을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-405">A parameter specifies an array of activation attributes.</span></span></summary>
        <returns><span data-ttu-id="cc35c-406"><paramref name="typeName" />에서 지정한 새 인스턴스의 래퍼인 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-406">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="cc35c-407">실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-407">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-408">이 메서드 호출에 대 한 기본 생성자 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-408">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="cc35c-409">참조 <xref:System.Reflection.AssemblyName> 형식의 `assemblyName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-409">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span>  
  
 <span data-ttu-id="cc35c-410">호출 하려는 경우 <xref:System.AppDomain.CreateInstance%2A> 응용 프로그램 도메인은 현재 어플리케이션 도메인에 없는 대상에 대상 응용 프로그램 도메인에 있는 어셈블리의 성공적인 로드 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-410">An attempt to call <xref:System.AppDomain.CreateInstance%2A> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</span></span> <span data-ttu-id="cc35c-411">이후는 <xref:System.Reflection.Assembly> 않습니다 <xref:System.MarshalByRefObject>이 메서드를 반환 하려고 시도 하는 경우는 <xref:System.Reflection.Assembly> 은 현재 어플리케이션 도메인에 로드 된 어셈블리에 대 한 공용 언어 런타임은 하려고은 현재 어플리케이션 도메인에 어셈블리를 로드 및 부하 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-411">Since an <xref:System.Reflection.Assembly> is not <xref:System.MarshalByRefObject>, when this method attempts to return the <xref:System.Reflection.Assembly> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</span></span> <span data-ttu-id="cc35c-412">현재 어플리케이션 도메인에 로드 된 어셈블리는 두 응용 프로그램 도메인에 대 한 경로 설정을 서로 다른 경우 먼저 로드 된 어셈블리와 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-412">The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-413">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-413">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-414"><paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-414"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-415"><paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-415"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-416">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-416">-or-</span></span>  
  
 <span data-ttu-id="cc35c-417">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-417">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-418">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-418">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-419"><paramref name="assemblyName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-419"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-420">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-420">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-421">일치하는 public 생성자를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-421">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-422">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-422">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-423"><paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-423"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="cc35c-424">이 인스턴스가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-424">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-425">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-425">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-426">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-426">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-427">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-427">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-428">에 대 한 대리자의 인스턴스를 만들 때 비관리 코드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-428">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="cc35c-429">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-429">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="cc35c-430">모든 형식 멤버에 대 한 작업을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-430">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="cc35c-431">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-431">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-432">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-432">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-433"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-433">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-434">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-434">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="cc35c-435">검색할 때 대/소문자를 구분할지를 지정하는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-435">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="cc35c-436"><c>typeName</c> 생성자 검색에 영향을 미치는 0 또는 그 이상의 비트 플래그 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-436">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-437"><c>bindingAttr</c>이 0이면 대/소문자를 구분한 public 생성자 검색이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-437">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="cc35c-438">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-438">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="cc35c-439"><c>binder</c>가 null이면 기본 바인더가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-439">If <c>binder</c> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-440">생성자에 전달할 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-440">The arguments to pass to the constructor.</span></span> <span data-ttu-id="cc35c-441">이 인수 배열은 호출할 생성자의 매개 변수와 개수, 순서 및 형식이 일치해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-441">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="cc35c-442">기본 생성자를 사용하려면 <c>args</c>가 빈 배열이거나 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-442">If the default constructor is preferred, <c>args</c> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="cc35c-443"><c>typeName</c> 생성자에 대해 선언된 공식적인 형식에 <c>args</c>를 강제로 적용하는 것을 제어하는 문화권별 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-443">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-444"><c>culture</c>가 <see langword="null" />인 경우 현재 스레드의 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-444">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="cc35c-445">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-445">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="cc35c-446">일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-446">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="cc35c-447">이 매개 변수는 클라이언트 활성 개체와 관련되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-447">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="cc35c-448">클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-448">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="cc35c-449">분산된 응용 프로그램은 Windows Communication Foundation을 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-449">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="cc35c-450">지정된 어셈블리에 정의되어 있는 지정된 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-450">Creates a new instance of the specified type defined in the specified assembly.</span></span> <span data-ttu-id="cc35c-451">매개 변수는 바인더, 바인딩 플래그, 생성자 인수, 인수 해석에 사용되는 문화권별 정보 및 선택적 활성화 특성을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-451">Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, and optional activation attributes.</span></span></summary>
        <returns><span data-ttu-id="cc35c-452"><paramref name="typeName" />에서 지정한 새 인스턴스의 래퍼인 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-452">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="cc35c-453">실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-453">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-454">참조 <xref:System.Reflection.AssemblyName> 형식의 `assemblyName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-454">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span>  
  
 <span data-ttu-id="cc35c-455">호출 하려는 경우 <xref:System.AppDomain.CreateInstance%2A> 응용 프로그램 도메인은 현재 어플리케이션 도메인에 없는 대상에 대상 응용 프로그램 도메인에 있는 어셈블리의 성공적인 로드 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-455">An attempt to call <xref:System.AppDomain.CreateInstance%2A> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</span></span> <span data-ttu-id="cc35c-456">이후는 <xref:System.Reflection.Assembly> 않습니다 <xref:System.MarshalByRefObject>이 메서드를 반환 하려고 시도 하는 경우는 <xref:System.Reflection.Assembly> 은 현재 어플리케이션 도메인에 로드 된 어셈블리에 대 한 공용 언어 런타임은 하려고은 현재 어플리케이션 도메인에 어셈블리를 로드 및 부하 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-456">Since an <xref:System.Reflection.Assembly> is not <xref:System.MarshalByRefObject>, when this method attempts to return the <xref:System.Reflection.Assembly> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</span></span> <span data-ttu-id="cc35c-457">현재 어플리케이션 도메인에 로드 된 어셈블리는 두 응용 프로그램 도메인에 대 한 경로 설정을 서로 다른 경우 먼저 로드 된 어셈블리와 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-457">The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-458">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-458">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-459"><paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-459"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-460"><paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-460"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-461">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-461">-or-</span></span>  
  
 <span data-ttu-id="cc35c-462"><paramref name="assemblyName" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-462"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-463">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-463">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-464"><paramref name="assemblyName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-464"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-465">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-465">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-466">일치하는 생성자를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-466">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-467">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-467">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-468"><paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-468"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="cc35c-469">이 인스턴스가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-469">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-470">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-470">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-471">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-471">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-472">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-472">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-473">에 대 한 대리자의 인스턴스를 만들 때 비관리 코드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-473">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="cc35c-474">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-474">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="cc35c-475">모든 형식 멤버에 대 한 작업을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-475">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="cc35c-476">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-476">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-477">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-477">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-478"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-478">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-479">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-479">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="cc35c-480">검색할 때 대/소문자를 구분할지를 지정하는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-480">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="cc35c-481"><c>typeName</c> 생성자 검색에 영향을 미치는 0 또는 그 이상의 비트 플래그 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-481">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-482"><c>bindingAttr</c>이 0이면 대/소문자를 구분한 public 생성자 검색이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-482">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="cc35c-483">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-483">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="cc35c-484"><c>binder</c>가 null이면 기본 바인더가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-484">If <c>binder</c> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-485">생성자에 전달할 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-485">The arguments to pass to the constructor.</span></span> <span data-ttu-id="cc35c-486">이 인수 배열은 호출할 생성자의 매개 변수와 개수, 순서 및 형식이 일치해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-486">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="cc35c-487">기본 생성자를 사용하려면 <c>args</c>가 빈 배열이거나 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-487">If the default constructor is preferred, <c>args</c> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="cc35c-488"><c>typeName</c> 생성자에 대해 선언된 공식적인 형식에 <c>args</c>를 강제로 적용하는 것을 제어하는 문화권별 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-488">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-489"><c>culture</c>가 <see langword="null" />인 경우 현재 스레드의 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-489">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="cc35c-490">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-490">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="cc35c-491">일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-491">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="cc35c-492">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-492">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="cc35c-493">분산된 응용 프로그램은 Windows Communication Foundation을 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-493">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="cc35c-494"><c>typeName</c>의 생성을 인증하는 데 사용하는 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-494">Information used to authorize creation of <c>typeName</c>.</span></span></param>
        <summary><span data-ttu-id="cc35c-495">지정된 어셈블리에 정의되어 있는 지정된 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-495">Creates a new instance of the specified type defined in the specified assembly.</span></span> <span data-ttu-id="cc35c-496">매개 변수에서는 바인더, 바인딩 플래그, 생성자 인수, 인수 해석에 사용되는 문화권별 정보, 활성화 특성 및 형식을 만들기 위한 인증을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-496">Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization to create the type.</span></span></summary>
        <returns><span data-ttu-id="cc35c-497"><paramref name="typeName" />에서 지정한 새 인스턴스의 래퍼인 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-497">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="cc35c-498">실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-498">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-499">참조 <xref:System.Reflection.AssemblyName> 형식의 `assemblyName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-499">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span>  
  
 <span data-ttu-id="cc35c-500">호출 하려는 경우 <xref:System.AppDomain.CreateInstance%2A> 응용 프로그램 도메인은 현재 어플리케이션 도메인에 없는 대상에 대상 응용 프로그램 도메인에 있는 어셈블리의 성공적인 로드 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-500">An attempt to call <xref:System.AppDomain.CreateInstance%2A> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</span></span> <span data-ttu-id="cc35c-501">이후는 <xref:System.Reflection.Assembly> 않습니다 <xref:System.MarshalByRefObject>이 메서드를 반환 하려고 시도 하는 경우는 <xref:System.Reflection.Assembly> 은 현재 어플리케이션 도메인에 로드 된 어셈블리에 대 한 공용 언어 런타임은 하려고은 현재 어플리케이션 도메인에 어셈블리를 로드 및 부하 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-501">Since an <xref:System.Reflection.Assembly> is not <xref:System.MarshalByRefObject>, when this method attempts to return the <xref:System.Reflection.Assembly> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</span></span> <span data-ttu-id="cc35c-502">현재 어플리케이션 도메인에 로드 된 어셈블리는 두 응용 프로그램 도메인에 대 한 경로 설정을 서로 다른 경우 먼저 로드 된 어셈블리와 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-502">The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-503">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-503">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-504"><paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-504"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-505"><paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-505"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-506">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-506">-or-</span></span>  
  
 <span data-ttu-id="cc35c-507">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-507">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-508">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-508">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-509"><paramref name="assemblyName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-509"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-510">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-510">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-511">일치하는 생성자를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-511">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-512">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-512">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
 <span data-ttu-id="cc35c-513">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-513">-or-</span></span>  
  
 <span data-ttu-id="cc35c-514"><paramref name="securityAttributes" />이 <see langword="null" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-514"><paramref name="securityAttributes" /> is not <see langword="null" />.</span></span> <span data-ttu-id="cc35c-515">레거시 CAS 정책을 사용하지 않을 때는 <paramref name="securityAttributes" />는 <see langword="null." />이 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-515">When legacy CAS policy is not enabled, <paramref name="securityAttributes" /> should be <see langword="null." /></span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-516"><paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-516"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="cc35c-517">이 인스턴스가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-517">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-518">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-518">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-519">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-519">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-520">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-520">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-521">증명 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-521">to provide evidence.</span></span> <span data-ttu-id="cc35c-522">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-522">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="cc35c-523">모든 형식 멤버에 대 한 작업을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-523">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="cc35c-524">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-524">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceAndUnwrap">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc35c-525">지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-525">Creates a new instance of a specified type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceAndUnwrap (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceAndUnwrap(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceAndUnwrap (assemblyName As String, typeName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceAndUnwrap(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-526">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-526">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-527"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-527">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-528">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-528">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="cc35c-529">지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-529">Creates a new instance of the specified type.</span></span> <span data-ttu-id="cc35c-530">매개 변수에서는 형식이 정의되는 어셈블리와 해당 형식의 이름을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-530">Parameters specify the assembly where the type is defined, and the name of the type.</span></span></summary>
        <returns><span data-ttu-id="cc35c-531"><paramref name="typeName" />에서 지정한 개체의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-531">An instance of the object specified by <paramref name="typeName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-532">메서드는 이것이 <xref:System.AppDomain.CreateInstance%2A> 및 <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-532">This is a convenience method that combines <xref:System.AppDomain.CreateInstance%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cc35c-533">이 메서드 호출에 대 한 기본 생성자 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-533">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="cc35c-534">참조 <xref:System.Reflection.AssemblyName> 형식의 `assemblyName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-534">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span> <span data-ttu-id="cc35c-535">참조는 <xref:System.Type.FullName%2A?displayProperty=nameWithType> 속성의 형식에 대 한 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-535">See the <xref:System.Type.FullName%2A?displayProperty=nameWithType> property for the format of `typeName`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-536">메서드에 대 한 초기 바인딩 호출을 변경한 경우 `M` 형식의 개체의 `T1` 반환한 <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, 고, 해당 메서드 형식의 개체의 메서드에 대 한 초기 바인딩 호출 `T2` 어셈블리에 `C` 이외의 현재 어셈블리 또는 포함 된 어셈블리 `T1`, 어셈블리 `C` 은 현재 어플리케이션 도메인에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-536">If you make an early-bound call to a method `M` of an object of type `T1` that was returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, and that method makes an early-bound call to a method of an object of type `T2` in an assembly `C` other than the current assembly or the assembly containing `T1`, assembly `C` is loaded into the current application domain.</span></span> <span data-ttu-id="cc35c-537">이 로드에 대 한 초기 바인딩 호출 하는 경우에 발생 `T1.M()` 의 본문에서는 <xref:System.Reflection.Emit.DynamicMethod>, 또는 다른 동적으로 생성 된 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-537">This loading occurs even if the early-bound call to `T1.M()` was made in the body of a <xref:System.Reflection.Emit.DynamicMethod>, or in other dynamically generated code.</span></span> <span data-ttu-id="cc35c-538">현재 도메인 어셈블리는 기본 도메인 인지 `C` 프로세스가 끝날 때까지 언로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-538">If the current domain is the default domain, assembly `C` cannot be unloaded until the process ends.</span></span> <span data-ttu-id="cc35c-539">현재 도메인 나중에 어셈블리를 로드 하려고 할 경우 `C`, 하지만 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-539">If the current domain later attempts to load assembly `C`, the load might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-540">다음 코드 예제에서는 다른 응용 프로그램 도메인에 있는 코드를 실행 하는 가장 간단한 방법은 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-540">The following code example shows the simplest way to execute code in another application domain.</span></span> <span data-ttu-id="cc35c-541">이 예제에서는 클래스를 정의 `Worker` 에서 상속 되는 <xref:System.MarshalByRefObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-541">The example defines a class named `Worker` that inherits from <xref:System.MarshalByRefObject>.</span></span> <span data-ttu-id="cc35c-542">`Worker` 클래스 실행 되는 응용 프로그램 도메인의 이름을 표시 하는 메서드를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-542">The `Worker` class defines a method that displays the name of the application domain in which it is executing.</span></span> <span data-ttu-id="cc35c-543">인스턴스를 만듭니다 `Worker` 기본 응용 프로그램 도메인에 새 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-543">The example creates instances of `Worker` in the default application domain and in a new application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-544">포함 된 어셈블리 `Worker` 두 응용 프로그램 도메인에 로드 해야 하지만 새 응용 프로그램 도메인에만 존재 하는 다른 어셈블리를 로드할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-544">The assembly that contains `Worker` must be loaded into both application domains, but it can load other assemblies that exist only in the new application domain.</span></span>  
  
 [!code-cpp[CreateInstanceAndUnwrap2#1](~/samples/snippets/cpp/VS_Snippets_CLR/CreateInstanceAndUnwrap2/cpp/source.cpp#1)]
 [!code-csharp[CreateInstanceAndUnwrap2#1](~/samples/snippets/csharp/VS_Snippets_CLR/CreateInstanceAndUnwrap2/cs/source.cs#1)]
 [!code-vb[CreateInstanceAndUnwrap2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CreateInstanceAndUnwrap2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-545"><paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-545"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-546">일치하는 public 생성자를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-546">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-547"><paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-547"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-548"><paramref name="assemblyName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-548"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-549">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-549">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-550">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-550">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-551"><paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-551"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-552">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-552">-or-</span></span>  
  
 <span data-ttu-id="cc35c-553">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-553">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-554">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-554">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-555">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있는 기능에 대 한 모듈 매니페스트 파일이 아닌에서 형식을 만드는 경우 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-555">for the ability to read the file containing the assembly manifest, or if you are creating a type from a module other than the manifest file.</span></span> <span data-ttu-id="cc35c-556">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-556">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-557">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-557">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceAndUnwrap (string assemblyName, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceAndUnwrap(string assemblyName, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceAndUnwrap (assemblyName As String, typeName As String, activationAttributes As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-558">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-558">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-559"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-559">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-560">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-560">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="cc35c-561">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-561">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="cc35c-562">일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-562">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="cc35c-563">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-563">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="cc35c-564">분산된 응용 프로그램은 Windows Communication Foundation을 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-564">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="cc35c-565">지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-565">Creates a new instance of the specified type.</span></span> <span data-ttu-id="cc35c-566">매개 변수에서는 형식이 정의되는 어셈블리, 해당 형식의 이름 및 활성화 특성의 배열을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-566">Parameters specify the assembly where the type is defined, the name of the type, and an array of activation attributes.</span></span></summary>
        <returns><span data-ttu-id="cc35c-567"><paramref name="typeName" />에서 지정한 개체의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-567">An instance of the object specified by <paramref name="typeName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-568">메서드는 이것이 <xref:System.AppDomain.CreateInstance%2A> 및 <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-568">This is a convenience method that combines <xref:System.AppDomain.CreateInstance%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cc35c-569">이 메서드 호출에 대 한 기본 생성자 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-569">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="cc35c-570">참조 <xref:System.Reflection.AssemblyName> 형식의 `assemblyName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-570">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span> <span data-ttu-id="cc35c-571">참조는 <xref:System.Type.FullName%2A?displayProperty=nameWithType> 속성의 형식에 대 한 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-571">See the <xref:System.Type.FullName%2A?displayProperty=nameWithType> property for the format of `typeName`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-572">메서드에 대 한 초기 바인딩 호출을 변경한 경우 `M` 형식의 개체의 `T1` 반환한 <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, 고, 해당 메서드 형식의 개체의 메서드에 대 한 초기 바인딩 호출 `T2` 어셈블리에 `C` 이외의 현재 어셈블리 또는 포함 된 어셈블리 `T1`, 어셈블리 `C` 은 현재 어플리케이션 도메인에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-572">If you make an early-bound call to a method `M` of an object of type `T1` that was returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, and that method makes an early-bound call to a method of an object of type `T2` in an assembly `C` other than the current assembly or the assembly containing `T1`, assembly `C` is loaded into the current application domain.</span></span> <span data-ttu-id="cc35c-573">이 로드에 대 한 초기 바인딩 호출 하는 경우에 발생 `T1.M()` 의 본문에서는 <xref:System.Reflection.Emit.DynamicMethod>, 또는 다른 동적으로 생성 된 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-573">This loading occurs even if the early-bound call to `T1.M()` was made in the body of a <xref:System.Reflection.Emit.DynamicMethod>, or in other dynamically generated code.</span></span> <span data-ttu-id="cc35c-574">현재 도메인 어셈블리는 기본 도메인 인지 `C` 프로세스가 끝날 때까지 언로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-574">If the current domain is the default domain, assembly `C` cannot be unloaded until the process ends.</span></span> <span data-ttu-id="cc35c-575">현재 도메인 나중에 어셈블리를 로드 하려고 할 경우 `C`, 하지만 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-575">If the current domain later attempts to load assembly `C`, the load might fail.</span></span>  
  
   
  
## Examples  
 [!code-cpp[ADDyno#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADDyno/CPP/addyno.cpp#1)]
 [!code-csharp[ADDyno#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADDyno/CS/addyno.cs#1)]
 [!code-vb[ADDyno#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADDyno/VB/addyno.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-576"><paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-576"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-577">일치하는 public 생성자를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-577">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-578"><paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-578"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-579"><paramref name="assemblyName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-579"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-580">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-580">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-581">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-581">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-582">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-582">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-583"><paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-583"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-584">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-584">-or-</span></span>  
  
 <span data-ttu-id="cc35c-585">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-585">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-586">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-586">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-587">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-587">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-588">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-588">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-589">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-589">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-590">에 대 한 대리자의 인스턴스를 만들 때 비관리 코드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-590">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="cc35c-591">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-591">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="cc35c-592">모든 형식 멤버에 대 한 작업을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-592">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="cc35c-593">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-593">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceAndUnwrap(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-594">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-594">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-595"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-595">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-596">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-596">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="cc35c-597">검색할 때 대/소문자를 구분할지를 지정하는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-597">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="cc35c-598"><c>typeName</c> 생성자 검색에 영향을 미치는 0 또는 그 이상의 비트 플래그 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-598">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-599"><c>bindingAttr</c>이 0이면 대/소문자를 구분한 public 생성자 검색이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-599">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="cc35c-600">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-600">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="cc35c-601"><c>binder</c>가 null이면 기본 바인더가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-601">If <c>binder</c> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-602">생성자에 전달할 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-602">The arguments to pass to the constructor.</span></span> <span data-ttu-id="cc35c-603">이 인수 배열은 호출할 생성자의 매개 변수와 개수, 순서 및 형식이 일치해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-603">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="cc35c-604">기본 생성자를 사용하려면 <c>args</c>가 빈 배열이거나 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-604">If the default constructor is preferred, <c>args</c> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="cc35c-605">형식의 강제 변환을 제어하는 데 사용되는 문화권별 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-605">A culture-specific object used to govern the coercion of types.</span></span> <span data-ttu-id="cc35c-606"><c>culture</c>가 <see langword="null" />인 경우 현재 스레드의 <see langword="CultureInfo" />가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-606">If <c>culture</c> is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="cc35c-607">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-607">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="cc35c-608">일반적으로 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-608">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object.</span></span> <span data-ttu-id="cc35c-609">원격 개체를 활성화하는 데 필요한 URL을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-609">that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="cc35c-610">이 매개 변수는 클라이언트 활성 개체와 관련되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-610">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="cc35c-611">클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-611">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="cc35c-612">분산된 응용 프로그램은 Windows Communication Foundation을 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-612">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="cc35c-613">형식 이름의 대/소문자를 구분할지 여부, 만들 형식을 선택하는 데 사용되는 바인더와 바인딩 특성, 생성자의 인수, 문화권 및 활성화 특성을 지정하여, 지정한 어셈블리에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-613">Creates a new instance of the specified type defined in the specified assembly, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</span></span></summary>
        <returns><span data-ttu-id="cc35c-614"><paramref name="typeName" />에서 지정한 개체의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-614">An instance of the object specified by <paramref name="typeName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-615">메서드는 이것이 <xref:System.AppDomain.CreateInstance%2A> 및 <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-615">This is a convenience method that combines <xref:System.AppDomain.CreateInstance%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="cc35c-616">참조 <xref:System.Reflection.AssemblyName> 형식의 `assemblyName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-616">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span> <span data-ttu-id="cc35c-617">참조는 <xref:System.Type.FullName%2A?displayProperty=nameWithType> 속성의 형식에 대 한 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-617">See the <xref:System.Type.FullName%2A?displayProperty=nameWithType> property for the format of `typeName`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-618">메서드에 대 한 초기 바인딩 호출을 변경한 경우 `M` 형식의 개체의 `T1` 반환한 <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, 고, 해당 메서드 형식의 개체의 메서드에 대 한 초기 바인딩 호출 `T2` 어셈블리에 `C` 이외의 현재 어셈블리 또는 포함 된 어셈블리 `T1`, 어셈블리 `C` 은 현재 어플리케이션 도메인에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-618">If you make an early-bound call to a method `M` of an object of type `T1` that was returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, and that method makes an early-bound call to a method of an object of type `T2` in an assembly `C` other than the current assembly or the assembly containing `T1`, assembly `C` is loaded into the current application domain.</span></span> <span data-ttu-id="cc35c-619">이 로드에 대 한 초기 바인딩 호출 하는 경우에 발생 `T1.M()` 의 본문에서는 <xref:System.Reflection.Emit.DynamicMethod>, 또는 다른 동적으로 생성 된 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-619">This loading occurs even if the early-bound call to `T1.M()` was made in the body of a <xref:System.Reflection.Emit.DynamicMethod>, or in other dynamically generated code.</span></span> <span data-ttu-id="cc35c-620">현재 도메인 어셈블리는 기본 도메인 인지 `C` 프로세스가 끝날 때까지 언로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-620">If the current domain is the default domain, assembly `C` cannot be unloaded until the process ends.</span></span> <span data-ttu-id="cc35c-621">현재 도메인 나중에 어셈블리를 로드 하려고 할 경우 `C`, 하지만 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-621">If the current domain later attempts to load assembly `C`, the load might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-622">다음 샘플의 사용법을 보여줍니다는 `ignoreCase` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-622">The following sample demonstrates the use of the `ignoreCase` parameter.</span></span>  
  
 [!code-cpp[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/CPP/ignorecase.cpp#1)]
 [!code-csharp[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/CS/ignorecase.cs#1)]
 [!code-vb[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/VB/ignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-623"><paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-623"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-624">일치하는 생성자를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-624">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-625"><paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-625"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-626"><paramref name="assemblyName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-626"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-627">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-627">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-628">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-628">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-629">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-629">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-630"><paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-630"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-631">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-631">-or-</span></span>  
  
 <span data-ttu-id="cc35c-632"><paramref name="assemblyName" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-632"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-633">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-633">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-634">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-634">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-635">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-635">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-636">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-636">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-637">에 대 한 대리자의 인스턴스를 만들 때 비관리 코드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-637">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="cc35c-638">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-638">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="cc35c-639">모든 형식 멤버에 대 한 작업을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-639">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="cc35c-640">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-640">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceAndUnwrap(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-641">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-641">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-642"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-642">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-643">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-643">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="cc35c-644">검색할 때 대/소문자를 구분할지를 지정하는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-644">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="cc35c-645"><c>typeName</c> 생성자 검색에 영향을 미치는 0 또는 그 이상의 비트 플래그 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-645">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-646"><c>bindingAttr</c>이 0이면 대/소문자를 구분한 public 생성자 검색이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-646">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="cc35c-647">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-647">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="cc35c-648"><c>binder</c>가 null이면 기본 바인더가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-648">If <c>binder</c> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-649">생성자에 전달할 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-649">The arguments to pass to the constructor.</span></span> <span data-ttu-id="cc35c-650">이 인수 배열은 호출할 생성자의 매개 변수와 개수, 순서 및 형식이 일치해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-650">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="cc35c-651">기본 생성자를 사용하려면 <c>args</c>가 빈 배열이거나 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-651">If the default constructor is preferred, <c>args</c> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="cc35c-652">형식의 강제 변환을 제어하는 데 사용되는 문화권별 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-652">A culture-specific object used to govern the coercion of types.</span></span> <span data-ttu-id="cc35c-653"><c>culture</c>가 <see langword="null" />인 경우 현재 스레드의 <see langword="CultureInfo" />가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-653">If <c>culture</c> is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="cc35c-654">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-654">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="cc35c-655">일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-655">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="cc35c-656">이 매개 변수는 클라이언트 활성 개체와 관련되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-656">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="cc35c-657">클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-657">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="cc35c-658">분산된 응용 프로그램은 Windows Communication Foundation을 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-658">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="cc35c-659"><c>typeName</c>의 생성을 인증하는 데 사용하는 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-659">Information used to authorize creation of <c>typeName</c>.</span></span></param>
        <summary><span data-ttu-id="cc35c-660">지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-660">Creates a new instance of the specified type.</span></span> <span data-ttu-id="cc35c-661">매개 변수에서는 형식의 이름 및 형식을 찾고 만들 수 있는 방법을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-661">Parameters specify the name of the type, and how it is found and created.</span></span></summary>
        <returns><span data-ttu-id="cc35c-662"><paramref name="typeName" />에서 지정한 개체의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-662">An instance of the object specified by <paramref name="typeName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-663">메서드는 이것이 <xref:System.AppDomain.CreateInstance%2A> 및 <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-663">This is a convenience method that combines <xref:System.AppDomain.CreateInstance%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="cc35c-664">참조 <xref:System.Reflection.AssemblyName> 형식의 `assemblyName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-664">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span> <span data-ttu-id="cc35c-665">참조는 <xref:System.Type.FullName%2A?displayProperty=nameWithType> 속성의 형식에 대 한 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-665">See the <xref:System.Type.FullName%2A?displayProperty=nameWithType> property for the format of `typeName`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-666">메서드에 대 한 초기 바인딩 호출을 변경한 경우 `M` 형식의 개체의 `T1` 반환한 <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, 고, 해당 메서드 형식의 개체의 메서드에 대 한 초기 바인딩 호출 `T2` 어셈블리에 `C` 이외의 현재 어셈블리 또는 포함 된 어셈블리 `T1`, 어셈블리 `C` 은 현재 어플리케이션 도메인에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-666">If you make an early-bound call to a method `M` of an object of type `T1` that was returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, and that method makes an early-bound call to a method of an object of type `T2` in an assembly `C` other than the current assembly or the assembly containing `T1`, assembly `C` is loaded into the current application domain.</span></span> <span data-ttu-id="cc35c-667">이 로드에 대 한 초기 바인딩 호출 하는 경우에 발생 `T1.M()` 의 본문에서는 <xref:System.Reflection.Emit.DynamicMethod>, 또는 다른 동적으로 생성 된 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-667">This loading occurs even if the early-bound call to `T1.M()` was made in the body of a <xref:System.Reflection.Emit.DynamicMethod>, or in other dynamically generated code.</span></span> <span data-ttu-id="cc35c-668">현재 도메인 어셈블리는 기본 도메인 인지 `C` 프로세스가 끝날 때까지 언로드할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-668">If the current domain is the default domain, assembly `C` cannot be unloaded until the process ends.</span></span> <span data-ttu-id="cc35c-669">현재 도메인 나중에 어셈블리를 로드 하려고 할 경우 `C`, 하지만 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-669">If the current domain later attempts to load assembly `C`, the load might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-670">다음 샘플의 사용법을 보여줍니다는 `ignoreCase` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-670">The following sample demonstrates the use of the `ignoreCase` parameter.</span></span>  
  
 [!code-cpp[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/CPP/ignorecase.cpp#1)]
 [!code-csharp[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/CS/ignorecase.cs#1)]
 [!code-vb[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/VB/ignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-671"><paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-671"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-672">일치하는 생성자를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-672">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-673"><paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-673"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-674"><paramref name="assemblyName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-674"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-675">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-675">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-676">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-676">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-677">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-677">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-678"><paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-678"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-679">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-679">-or-</span></span>  
  
 <span data-ttu-id="cc35c-680">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-680">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-681">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-681">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-682">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-682">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-683">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-683">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-684">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-684">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-685">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-685">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-686">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-686">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="cc35c-687">모든 형식 멤버에 대 한 작업을 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-687">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="cc35c-688">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-688">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc35c-689">지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-689">Creates a new instance of a specified type defined in the specified assembly file.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceFrom (assemblyFile As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstanceFrom(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="cc35c-690">경로를 포함하여 요청된 형식을 정의하는 어셈블리가 포함된 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-690">The name, including the path, of a file that contains an assembly that defines the requested type.</span></span> <span data-ttu-id="cc35c-691">어셈블리는 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 메서드를 사용하여 로드됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-691">The assembly is loaded using the <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> method.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-692">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-692">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="cc35c-693">지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-693">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="cc35c-694">새 인스턴스에 대한 래퍼인 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-694">An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="cc35c-695">실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-695">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-696">에 대 한 기본 생성자 `typeName` 가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-696">The default constructor for `typeName` is invoked.</span></span>  
  
 <span data-ttu-id="cc35c-697">자세한 내용은 <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> 메서드를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-697">For more information, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="cc35c-698">경우는 <xref:System.AppDomain.CreateInstanceFrom%2A> 메서드를 호출 하는 응용 프로그램 도메인 외에 대상 응용 프로그램 도메인에 인스턴스를 만드는 데 사용 됩니다, 어셈블리는 대상 응용 프로그램 도메인에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-698">When the <xref:System.AppDomain.CreateInstanceFrom%2A> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</span></span> <span data-ttu-id="cc35c-699">그러나 인스턴스가 호출 응용 프로그램 도메인에서 래핑 해제 된 경우 래핑 해제 된 인스턴스를 사용 하 여 다양 한 방식으로 호출 응용 프로그램 도메인에 로드 될 어셈블리를 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-699">However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</span></span> <span data-ttu-id="cc35c-700">예를 들어, 형식 정보를 요청, 해당 메서드를 호출 하기 위해 런타임에 바인딩된 인스턴스 래핑 해제 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-700">For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</span></span> <span data-ttu-id="cc35c-701">어셈블리를 호출 응용 프로그램 도메인에 로드 하는 경우 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-701">When the assembly is loaded into the calling application domain, exceptions can occur.</span></span>  
  
-   <span data-ttu-id="cc35c-702">동일한 어셈블리의 다른 버전이 이전에 호출 응용 프로그램 도메인에 로드 또는 호출 응용 프로그램 도메인의 로드 경로 같은 다른 예외 대상 응용 프로그램 도메인의 경우 <xref:System.MissingMethodException> 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-702">If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <xref:System.MissingMethodException> can occur.</span></span>  
  
-   <span data-ttu-id="cc35c-703">호출 응용 프로그램 도메인 인스턴스 유형으로 초기 바인딩 호출 하는 경우 <xref:System.InvalidCastException> 인스턴스 캐스팅 하려고 시도 하는 경우에 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-703">If the calling application domain makes early-bound calls to the instance type, <xref:System.InvalidCastException> can be thrown when an attempt is made to cast the instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-704">사용 하는 방법을 보여 주는 다음 예제는 <xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29> 메서드 오버 로드를 대상 응용 프로그램 도메인에 있는 개체의 인스턴스를 만들고 해당 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-704">The following example shows how to use the <xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29> method overload to create an instance of an object in a target application domain and call its methods.</span></span>  
  
 <span data-ttu-id="cc35c-705">이 예제에서는 정의 `MarshallableExample` 응용 프로그램 도메인 경계를 넘어 마샬링할 수 있는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-705">The example defines the `MarshallableExample` class, which can be marshaled across application domain boundaries.</span></span> <span data-ttu-id="cc35c-706">이 예제에서는 현재 실행 중인 어셈블리에 대 한 경로, 대상 응용 프로그램 도메인을 만들고 사용 하 여 <xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29> 메서드 오버 로드를 대상 응용 프로그램 도메인에 예제에서는 어셈블리를 로드 하 고의 인스턴스를 만들 `MarshallableExample`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-706">The example builds a path to the currently executing assembly, creates a target application domain, and uses the <xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29> method overload to load the example assembly into the target application domain and create an instance of `MarshallableExample`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-707">경로 절대이 예제에서는 상대 경로 때문에 작동 하지만 <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> 어셈블리를 로드 하려는 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-707">The path is absolute in this example, but a relative path would also work because the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> method is used to load the assembly.</span></span>  
  
 <span data-ttu-id="cc35c-708">개체 핸들, 래핑을 해제 한 후 대상 응용 프로그램 도메인에 개체를 사용 하는 데 세 가지 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-708">After unwrapping the object handle, the example demonstrates three ways to use an object in a target application domain:</span></span>  
  
-   <span data-ttu-id="cc35c-709">런타임에 바인딩을 사용할 경우 리플렉션을 사용 하 여 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-709">Invoking a method with late binding, using reflection.</span></span> <span data-ttu-id="cc35c-710">이렇게 하면 어셈블리는 호출자의 응용 프로그램 도메인에 로드 되는 형식 정보가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-710">This requires type information, which causes the assembly to be loaded into the application domain of the caller.</span></span> <span data-ttu-id="cc35c-711">(이 예제에서는 이미 로드 됩니다.)</span><span class="sxs-lookup"><span data-stu-id="cc35c-711">(In this example, it is already loaded.)</span></span>  
  
-   <span data-ttu-id="cc35c-712">호출자와 호출 수신자 모두에 알려진 인터페이스에는 개체를 캐스팅 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-712">Casting the object to an interface known to both the caller and the callee.</span></span> <span data-ttu-id="cc35c-713">인터페이스 또는 호출자와 호출 수신자가 모두 참조 하는 세 번째 어셈블리 호출 어셈블리에 정의 된 경우 호출된 된 어셈블리는 호출자의 응용 프로그램 도메인에 로드있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-713">If the interface is defined in the calling assembly or in a third assembly referenced by both the caller and the callee, the called assembly is not loaded into the application domain of the caller.</span></span>  
  
-   <span data-ttu-id="cc35c-714">개체를 직접 호출자에 게 해당 형식이 알려진 경우 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-714">Using the object directly when its type is known to the caller.</span></span> <span data-ttu-id="cc35c-715">어셈블리는 호출자의 응용 프로그램 도메인에 로드 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-715">The assembly must be loaded into the application domain of the caller.</span></span>  
  
 <span data-ttu-id="cc35c-716">파생 되는 호출자가 호출된 되는 어셈블리는 호출자의 응용 프로그램 도메인에 로드 되지 않도록 방지 하는 다른 방법은는 <xref:System.MarshalByRefObject> 클래스 및 대상 응용 프로그램 도메인에서 실행 될 수 있는 메서드를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-716">Another way to avoid loading the called assembly into the application domain of the caller is for the caller to derive from the <xref:System.MarshalByRefObject> class and to define a method that can be run in the target application domain.</span></span> <span data-ttu-id="cc35c-717">해당 메서드에 수 리플렉션을 사용 하 여 대상 어셈블리를 검사할 대상 어셈블리가 이미 대상 응용 프로그램 도메인에 로드 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-717">That method can use reflection to examine a target assembly, because the target assembly is already loaded into the target application domain.</span></span> <span data-ttu-id="cc35c-718">예를 참조는 <xref:System.AppDomain.DynamicDirectory%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-718">See the example for the <xref:System.AppDomain.DynamicDirectory%2A> property.</span></span>  
  
 [!code-cpp[System.AppDomain.CreateInstanceFrom_StringString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.appdomain.createinstancefrom_stringstring/cpp/example.cpp#1)]
 [!code-csharp[System.AppDomain.CreateInstanceFrom_StringString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.createinstancefrom_stringstring/cs/example.cs#1)]
 [!code-vb[System.AppDomain.CreateInstanceFrom_StringString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.createinstancefrom_stringstring/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-719"><paramref name="assemblyFile" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-719"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-720">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-720">-or-</span></span>  
  
 <span data-ttu-id="cc35c-721"><paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-721"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-722"><paramref name="assemblyFile" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-722"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-723"><paramref name="assemblyFile" />에서 <paramref name="typeName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-723"><paramref name="typeName" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-724">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-724">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-725">매개 변수가 없는 public 생성자를 찾지 못한 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-725">No parameterless public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-726">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-726">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-727"><paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-727"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-728">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-728">-or-</span></span>  
  
 <span data-ttu-id="cc35c-729">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />가 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-729">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-730">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-730">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="cc35c-731">이 인스턴스가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-731">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-732">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-732">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-733">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-733">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-734">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-734">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceFrom (assemblyFile As String, typeName As String, activationAttributes As Object()) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="cc35c-735">경로를 포함하여 요청된 형식을 정의하는 어셈블리가 포함된 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-735">The name, including the path, of a file that contains an assembly that defines the requested type.</span></span> <span data-ttu-id="cc35c-736">어셈블리는 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 메서드를 사용하여 로드됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-736">The assembly is loaded using the <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> method.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-737">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-737">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="cc35c-738">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-738">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="cc35c-739">일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-739">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="cc35c-740">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-740">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="cc35c-741">분산된 응용 프로그램은 Windows Communication Foundation을 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-741">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="cc35c-742">지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-742">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="cc35c-743">새 인스턴스에 대한 래퍼인 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-743">An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="cc35c-744">실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-744">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-745">에 대 한 기본 생성자 `typeName` 가 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-745">The default constructor for `typeName` is invoked.</span></span>  
  
 <span data-ttu-id="cc35c-746">이 메서드에 대 한 자세한 내용은 참조는 <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-746">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="cc35c-747">경우는 <xref:System.AppDomain.CreateInstanceFrom%2A> 메서드를 호출 하는 응용 프로그램 도메인 외에 대상 응용 프로그램 도메인에 인스턴스를 만드는 데 사용 됩니다, 어셈블리는 대상 응용 프로그램 도메인에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-747">When the <xref:System.AppDomain.CreateInstanceFrom%2A> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</span></span> <span data-ttu-id="cc35c-748">그러나 인스턴스가 호출 응용 프로그램 도메인에서 래핑 해제 된 경우 래핑 해제 된 인스턴스를 사용 하 여 다양 한 방식으로 호출 응용 프로그램 도메인에 로드 될 어셈블리를 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-748">However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</span></span> <span data-ttu-id="cc35c-749">예를 들어, 형식 정보를 요청, 해당 메서드를 호출 하기 위해 런타임에 바인딩된 인스턴스 래핑 해제 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-749">For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</span></span> <span data-ttu-id="cc35c-750">어셈블리를 호출 응용 프로그램 도메인에 로드 하는 경우 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-750">When the assembly is loaded into the calling application domain, exceptions can occur.</span></span>  
  
-   <span data-ttu-id="cc35c-751">동일한 어셈블리의 다른 버전이 이전에 호출 응용 프로그램 도메인에 로드 또는 호출 응용 프로그램 도메인의 로드 경로 같은 다른 예외 대상 응용 프로그램 도메인의 경우 <xref:System.MissingMethodException> 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-751">If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <xref:System.MissingMethodException> can occur.</span></span>  
  
-   <span data-ttu-id="cc35c-752">호출 응용 프로그램 도메인 인스턴스 유형으로 초기 바인딩 호출 하는 경우 <xref:System.InvalidCastException> 인스턴스 캐스팅 하려고 시도 하는 경우에 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-752">If the calling application domain makes early-bound calls to the instance type, <xref:System.InvalidCastException> can be thrown when an attempt is made to cast the instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-753"><paramref name="assemblyFile" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-753"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-754"><paramref name="assemblyFile" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-754"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-755"><paramref name="assemblyFile" />에서 <paramref name="typeName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-755"><paramref name="typeName" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-756">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-756">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-757">일치하는 public 생성자를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-757">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-758">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-758">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-759">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-759">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-760"><paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-760"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-761">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-761">-or-</span></span>  
  
 <span data-ttu-id="cc35c-762">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />가 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-762">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-763">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-763">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="cc35c-764">이 인스턴스가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-764">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-765">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-765">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-766">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-766">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-767">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-767">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="cc35c-768">경로를 포함하여 요청된 형식을 정의하는 어셈블리가 포함된 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-768">The name, including the path, of a file that contains an assembly that defines the requested type.</span></span> <span data-ttu-id="cc35c-769">어셈블리는 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 메서드를 사용하여 로드됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-769">The assembly is loaded using the <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> method.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-770">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-770">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="cc35c-771">검색할 때 대/소문자를 구분할지를 지정하는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-771">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="cc35c-772"><c>typeName</c> 생성자 검색에 영향을 미치는 0 또는 그 이상의 비트 플래그 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-772">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-773"><c>bindingAttr</c>이 0이면 대/소문자를 구분한 public 생성자 검색이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-773">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="cc35c-774">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.MemberInfo" /> 개체 검색을 사용할 수 있도록 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-774">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="cc35c-775"><c>binder</c>가 null이면 기본 바인더가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-775">If <c>binder</c> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-776">생성자에 전달할 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-776">The arguments to pass to the constructor.</span></span> <span data-ttu-id="cc35c-777">이 인수 배열은 호출할 생성자의 매개 변수와 개수, 순서 및 형식이 일치해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-777">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="cc35c-778">기본 생성자를 사용하려면 <c>args</c>가 빈 배열이거나 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-778">If the default constructor is preferred, <c>args</c> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="cc35c-779"><c>typeName</c> 생성자에 대해 선언된 공식적인 형식에 <c>args</c>를 강제로 적용하는 것을 제어하는 문화권별 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-779">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-780"><c>culture</c>가 <see langword="null" />인 경우 현재 스레드의 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-780">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="cc35c-781">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-781">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="cc35c-782">일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-782">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="cc35c-783">이 매개 변수는 클라이언트 활성 개체와 관련되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-783">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="cc35c-784">클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-784">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="cc35c-785">분산된 응용 프로그램은 Windows Communication Foundation을 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-785">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="cc35c-786">지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-786">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="cc35c-787">새 인스턴스에 대한 래퍼인 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-787">An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="cc35c-788">실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-788">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-789">자세한 내용은 <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> 메서드를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-789">For more information, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="cc35c-790">경우는 <xref:System.AppDomain.CreateInstanceFrom%2A> 메서드를 호출 하는 응용 프로그램 도메인 외에 대상 응용 프로그램 도메인에 인스턴스를 만드는 데 사용 됩니다, 어셈블리는 대상 응용 프로그램 도메인에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-790">When the <xref:System.AppDomain.CreateInstanceFrom%2A> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</span></span> <span data-ttu-id="cc35c-791">그러나 인스턴스가 호출 응용 프로그램 도메인에서 래핑 해제 된 경우 래핑 해제 된 인스턴스를 사용 하 여 다양 한 방식으로 호출 응용 프로그램 도메인에 로드 될 어셈블리를 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-791">However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</span></span> <span data-ttu-id="cc35c-792">예를 들어, 형식 정보를 요청, 해당 메서드를 호출 하기 위해 런타임에 바인딩된 인스턴스 래핑 해제 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-792">For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</span></span> <span data-ttu-id="cc35c-793">어셈블리를 호출 응용 프로그램 도메인에 로드 하는 경우 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-793">When the assembly is loaded into the calling application domain, exceptions can occur.</span></span>  
  
-   <span data-ttu-id="cc35c-794">동일한 어셈블리의 다른 버전이 이전에 호출 응용 프로그램 도메인에 로드 또는 호출 응용 프로그램 도메인의 로드 경로 같은 다른 예외 대상 응용 프로그램 도메인의 경우 <xref:System.MissingMethodException> 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-794">If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <xref:System.MissingMethodException> can occur.</span></span>  
  
-   <span data-ttu-id="cc35c-795">호출 응용 프로그램 도메인 인스턴스 유형으로 초기 바인딩 호출 하는 경우 <xref:System.InvalidCastException> 인스턴스 캐스팅 하려고 시도 하는 경우에 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-795">If the calling application domain makes early-bound calls to the instance type, <xref:System.InvalidCastException> can be thrown when an attempt is made to cast the instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-796"><paramref name="assemblyFile" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-796"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-797">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-797">-or-</span></span>  
  
 <span data-ttu-id="cc35c-798"><paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-798"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-799">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-799">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-800">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-800">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-801"><paramref name="assemblyFile" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-801"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-802"><paramref name="assemblyFile" />에서 <paramref name="typeName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-802"><paramref name="typeName" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-803">일치하는 public 생성자를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-803">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-804">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-804">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-805"><paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-805"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-806">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-806">-or-</span></span>  
  
 <span data-ttu-id="cc35c-807"><paramref name="assemblyFile" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-807"><paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-808">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-808">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="cc35c-809">이 인스턴스가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-809">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-810">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-810">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-811">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-811">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-812">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-812">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="cc35c-813">경로를 포함하여 요청된 형식을 정의하는 어셈블리가 포함된 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-813">The name, including the path, of a file that contains an assembly that defines the requested type.</span></span> <span data-ttu-id="cc35c-814">어셈블리는 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 메서드를 사용하여 로드됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-814">The assembly is loaded using the <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> method.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-815">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-815">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="cc35c-816">검색할 때 대/소문자를 구분할지를 지정하는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-816">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="cc35c-817"><c>typeName</c> 생성자 검색에 영향을 미치는 0 또는 그 이상의 비트 플래그 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-817">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-818"><c>bindingAttr</c>이 0이면 대/소문자를 구분한 public 생성자 검색이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-818">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="cc35c-819">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.MemberInfo" /> 개체 검색을 사용할 수 있도록 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-819">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="cc35c-820"><c>binder</c>가 null이면 기본 바인더가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-820">If <c>binder</c> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-821">생성자에 전달할 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-821">The arguments to pass to the constructor.</span></span> <span data-ttu-id="cc35c-822">이 인수 배열은 호출할 생성자의 매개 변수와 개수, 순서 및 형식이 일치해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-822">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="cc35c-823">기본 생성자를 사용하려면 <c>args</c>가 빈 배열이거나 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-823">If the default constructor is preferred, <c>args</c> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="cc35c-824"><c>typeName</c> 생성자에 대해 선언된 공식적인 형식에 <c>args</c>를 강제로 적용하는 것을 제어하는 문화권별 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-824">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-825"><c>culture</c>가 <see langword="null" />인 경우 현재 스레드의 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-825">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="cc35c-826">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-826">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="cc35c-827">일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-827">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="cc35c-828">이 매개 변수는 클라이언트 활성 개체와 관련되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-828">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="cc35c-829">클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-829">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="cc35c-830">분산된 응용 프로그램은 Windows Communication Foundation을 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-830">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="cc35c-831"><c>typeName</c>의 생성을 인증하는 데 사용하는 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-831">Information used to authorize creation of <c>typeName</c>.</span></span></param>
        <summary><span data-ttu-id="cc35c-832">지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-832">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="cc35c-833">새 인스턴스에 대한 래퍼인 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-833">An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="cc35c-834">실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-834">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-835">이 메서드에 대 한 자세한 내용은 참조는 <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-835">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="cc35c-836">경우는 <xref:System.AppDomain.CreateInstanceFrom%2A> 메서드를 호출 하는 응용 프로그램 도메인 외에 대상 응용 프로그램 도메인에 인스턴스를 만드는 데 사용 됩니다, 어셈블리는 대상 응용 프로그램 도메인에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-836">When the <xref:System.AppDomain.CreateInstanceFrom%2A> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</span></span> <span data-ttu-id="cc35c-837">그러나 인스턴스가 호출 응용 프로그램 도메인에서 래핑 해제 된 경우 래핑 해제 된 인스턴스를 사용 하 여 다양 한 방식으로 호출 응용 프로그램 도메인에 로드 될 어셈블리를 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-837">However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</span></span> <span data-ttu-id="cc35c-838">예를 들어, 형식 정보를 요청, 해당 메서드를 호출 하기 위해 런타임에 바인딩된 인스턴스 래핑 해제 된 후입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-838">For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</span></span> <span data-ttu-id="cc35c-839">어셈블리를 호출 응용 프로그램 도메인에 로드 하는 경우 예외가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-839">When the assembly is loaded into the calling application domain, exceptions can occur.</span></span>  
  
-   <span data-ttu-id="cc35c-840">동일한 어셈블리의 다른 버전이 이전에 호출 응용 프로그램 도메인에 로드 또는 호출 응용 프로그램 도메인의 로드 경로 같은 다른 예외 대상 응용 프로그램 도메인의 경우 <xref:System.MissingMethodException> 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-840">If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <xref:System.MissingMethodException> can occur.</span></span>  
  
-   <span data-ttu-id="cc35c-841">호출 응용 프로그램 도메인 인스턴스 유형으로 초기 바인딩 호출 하는 경우 <xref:System.InvalidCastException> 인스턴스 캐스팅 하려고 시도 하는 경우에 throw 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-841">If the calling application domain makes early-bound calls to the instance type, <xref:System.InvalidCastException> can be thrown when an attempt is made to cast the instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-842"><paramref name="assemblyFile" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-842"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-843">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-843">-or-</span></span>  
  
 <span data-ttu-id="cc35c-844"><paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-844"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-845">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-845">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
 <span data-ttu-id="cc35c-846">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-846">-or-</span></span>  
  
 <span data-ttu-id="cc35c-847"><paramref name="securityAttributes" />이 <see langword="null" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-847"><paramref name="securityAttributes" /> is not <see langword="null" />.</span></span> <span data-ttu-id="cc35c-848">레거시 CAS 정책을 사용하지 않을 때는 <paramref name="securityAttributes" />는 <see langword="null" />이 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-848">When legacy CAS policy is not enabled, <paramref name="securityAttributes" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-849">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-849">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-850"><paramref name="assemblyFile" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-850"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-851"><paramref name="assemblyFile" />에서 <paramref name="typeName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-851"><paramref name="typeName" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-852">일치하는 public 생성자를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-852">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-853">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-853">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-854"><paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-854"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-855">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-855">-or-</span></span>  
  
 <span data-ttu-id="cc35c-856">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />가 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-856">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-857">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-857">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="cc35c-858">이 인스턴스가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-858">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-859">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-859">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-860">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-860">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-861">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-861">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-862">증명 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-862">to provide evidence.</span></span> <span data-ttu-id="cc35c-863">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-863">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceFromAndUnwrap">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc35c-864">지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-864">Creates a new instance of a specified type defined in the specified assembly file.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceFromAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceFromAndUnwrap(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceFromAndUnwrap (assemblyName As String, typeName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceFromAndUnwrap(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-865">요청된 형식을 정의하는 어셈블리의 파일 이름과 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-865">The file name and path of the assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-866">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-866">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="cc35c-867">지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-867">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="cc35c-868">요청된 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-868">The requested object, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-869">메서드는 이것이 <xref:System.AppDomain.CreateInstanceFrom%2A> 및 <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-869">This is a convenience method that combines <xref:System.AppDomain.CreateInstanceFrom%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cc35c-870">이 메서드 호출에 대 한 기본 생성자 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-870">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="cc35c-871">자세한 내용은 <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> 메서드를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-871">For more information, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-872"><paramref name="assemblyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-872"><paramref name="assemblyName" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-873">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-873">-or-</span></span>  
  
 <span data-ttu-id="cc35c-874"><paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-874"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-875">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-875">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-876"><paramref name="assemblyName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-876"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-877"><paramref name="assemblyName" />에서 <paramref name="typeName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-877"><paramref name="typeName" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-878">매개 변수가 없는 public 생성자를 찾지 못한 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-878">No parameterless public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-879">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-879">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-880"><paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-880"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-881">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-881">-or-</span></span>  
  
 <span data-ttu-id="cc35c-882">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-882">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-883">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-883">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-884">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-884">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-885">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-885">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-886">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-886">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFromAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceFromAndUnwrap (assemblyName As String, typeName As String, activationAttributes As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceFromAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-887">요청된 형식을 정의하는 어셈블리의 파일 이름과 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-887">The file name and path of the assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-888">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름입니다(<see cref="P:System.Type.FullName" /> 속성 참조).</span><span class="sxs-lookup"><span data-stu-id="cc35c-888">The fully qualified name of the requested type, including the namespace but not the assembly (see the <see cref="P:System.Type.FullName" /> property).</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="cc35c-889">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-889">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="cc35c-890">일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-890">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="cc35c-891">이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-891">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="cc35c-892">분산된 응용 프로그램은 Windows Communication Foundation을 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-892">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="cc35c-893">지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-893">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="cc35c-894">요청된 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-894">The requested object, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-895">메서드는 이것이 <xref:System.AppDomain.CreateInstanceFrom%2A> 및 <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-895">This is a convenience method that combines <xref:System.AppDomain.CreateInstanceFrom%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="cc35c-896">이 메서드 호출에 대 한 기본 생성자 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-896">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="cc35c-897">이 메서드에 대 한 자세한 내용은 참조는 <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-897">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-898"><paramref name="assemblyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-898"><paramref name="assemblyName" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-899">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-899">-or-</span></span>  
  
 <span data-ttu-id="cc35c-900"><paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-900"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-901">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-901">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-902">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-902">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-903"><paramref name="assemblyName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-903"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-904"><paramref name="assemblyName" />에서 <paramref name="typeName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-904"><paramref name="typeName" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-905">매개 변수가 없는 public 생성자를 찾지 못한 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-905">No parameterless public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-906">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-906">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-907"><paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-907"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-908">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-908">-or-</span></span>  
  
 <span data-ttu-id="cc35c-909">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-909">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-910">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-910">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-911">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-911">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-912">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-912">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-913">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-913">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFromAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceFromAndUnwrap (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceFromAndUnwrap(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceFromAndUnwrap(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="cc35c-914">요청된 형식을 정의하는 어셈블리의 파일 이름과 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-914">The file name and path of the assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-915">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-915">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="cc35c-916">검색할 때 대/소문자를 구분할지를 지정하는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-916">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="cc35c-917"><c>typeName</c> 생성자 검색에 영향을 미치는 0 또는 그 이상의 비트 플래그 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-917">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-918"><c>bindingAttr</c>이 0이면 대/소문자를 구분한 public 생성자 검색이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-918">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="cc35c-919">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.MemberInfo" /> 개체 검색을 사용할 수 있도록 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-919">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="cc35c-920"><c>binder</c>가 null이면 기본 바인더가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-920">If <c>binder</c> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-921">생성자에 전달할 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-921">The arguments to pass to the constructor.</span></span> <span data-ttu-id="cc35c-922">이 인수 배열은 호출할 생성자의 매개 변수와 개수, 순서 및 형식이 일치해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-922">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="cc35c-923">기본 생성자를 사용하려면 <c>args</c>가 빈 배열이거나 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-923">If the default constructor is preferred, <c>args</c> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="cc35c-924"><c>typeName</c> 생성자에 대해 선언된 공식적인 형식에 <c>args</c>를 강제로 적용하는 것을 제어하는 문화권별 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-924">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-925"><c>culture</c>가 <see langword="null" />인 경우 현재 스레드의 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-925">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="cc35c-926">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-926">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="cc35c-927">일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-927">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="cc35c-928">이 매개 변수는 클라이언트 활성 개체와 관련되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-928">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="cc35c-929">클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-929">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="cc35c-930">분산된 응용 프로그램은 Windows Communication Foundation을 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-930">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="cc35c-931">형식 이름의 대/소문자를 구분할지 여부, 만들 형식을 선택하는 데 사용되는 바인더와 바인딩 특성, 생성자의 인수, 문화권 및 활성화 특성을 지정하여, 지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-931">Creates a new instance of the specified type defined in the specified assembly file, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</span></span></summary>
        <returns><span data-ttu-id="cc35c-932">요청된 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-932">The requested object, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-933">메서드는 이것이 <xref:System.AppDomain.CreateInstanceFrom%2A> 및 <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-933">This is a convenience method that combines <xref:System.AppDomain.CreateInstanceFrom%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="cc35c-934">이 메서드에 대 한 자세한 내용은 참조는 <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-934">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-935"><paramref name="assemblyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-935"><paramref name="assemblyName" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-936">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-936">-or-</span></span>  
  
 <span data-ttu-id="cc35c-937"><paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-937"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-938">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-938">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-939">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-939">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-940"><paramref name="assemblyName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-940"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-941"><paramref name="assemblyName" />에서 <paramref name="typeName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-941"><paramref name="typeName" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-942">일치하는 public 생성자를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-942">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-943">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-943">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-944"><paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-944"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-945">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-945">-or-</span></span>  
  
 <span data-ttu-id="cc35c-946"><paramref name="assemblyName" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-946"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime that the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-947">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-947">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-948">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-948">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-949">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-949">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-950">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-950">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFromAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceFromAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-951">요청된 형식을 정의하는 어셈블리의 파일 이름과 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-951">The file name and path of the assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="cc35c-952">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-952">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="cc35c-953">검색할 때 대/소문자를 구분할지를 지정하는 부울 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-953">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="cc35c-954"><c>typeName</c> 생성자 검색에 영향을 미치는 0 또는 그 이상의 비트 플래그 조합입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-954">A combination of zero or more bit flags that affect the search for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-955"><c>bindingAttr</c>이 0이면 대/소문자를 구분한 public 생성자 검색이 수행됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-955">If <c>bindingAttr</c> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="cc35c-956">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.MemberInfo" /> 개체 검색을 사용할 수 있도록 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-956">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="cc35c-957"><c>binder</c>가 null이면 기본 바인더가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-957">If <c>binder</c> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-958">생성자에 전달할 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-958">The arguments to pass to the constructor.</span></span> <span data-ttu-id="cc35c-959">이 인수 배열은 호출할 생성자의 매개 변수와 개수, 순서 및 형식이 일치해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-959">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="cc35c-960">기본 생성자를 사용하려면 <c>args</c>가 빈 배열이거나 null이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-960">If the default constructor is preferred, <c>args</c> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="cc35c-961"><c>typeName</c> 생성자에 대해 선언된 공식적인 형식에 <c>args</c>를 강제로 적용하는 것을 제어하는 문화권별 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-961">Culture-specific information that governs the coercion of <c>args</c> to the formal types declared for the <c>typeName</c> constructor.</span></span> <span data-ttu-id="cc35c-962"><c>culture</c>가 <see langword="null" />인 경우 현재 스레드의 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-962">If <c>culture</c> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="cc35c-963">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-963">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="cc35c-964">일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-964">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
 <span data-ttu-id="cc35c-965">이 매개 변수는 클라이언트 활성 개체와 관련되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-965">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="cc35c-966">클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-966">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="cc35c-967">분산된 응용 프로그램은 Windows Communication Foundation을 사용해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-967">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="cc35c-968"><c>typeName</c>의 생성을 인증하는 데 사용하는 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-968">Information used to authorize creation of <c>typeName</c>.</span></span></param>
        <summary><span data-ttu-id="cc35c-969">지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-969">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="cc35c-970">요청된 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-970">The requested object, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-971">메서드는 이것이 <xref:System.AppDomain.CreateInstanceFrom%2A> 및 <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-971">This is a convenience method that combines <xref:System.AppDomain.CreateInstanceFrom%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="cc35c-972">이 메서드에 대 한 자세한 내용은 참조는 <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-972">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-973"><paramref name="assemblyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-973"><paramref name="assemblyName" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-974">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-974">-or-</span></span>  
  
 <span data-ttu-id="cc35c-975"><paramref name="typeName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-975"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="cc35c-976">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-976">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-977">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-977">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-978"><paramref name="assemblyName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-978"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="cc35c-979"><paramref name="assemblyName" />에서 <paramref name="typeName" />을 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-979"><paramref name="typeName" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-980">일치하는 public 생성자를 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-980">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="cc35c-981">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-981">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-982"><paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-982"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-983">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-983">-or-</span></span>  
  
 <span data-ttu-id="cc35c-984">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-984">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-985">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-985">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="cc35c-986">어셈블리 매니페스트가 포함 된 파일을 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-986">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="cc35c-987">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-987">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-988">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-988">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CurrentDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.AppDomain CurrentDomain" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.CurrentDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDomain As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property AppDomain ^ CurrentDomain { AppDomain ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-989">현재 <see cref="T:System.Threading.Thread" />에 대한 현재 응용 프로그램 도메인을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-989">Gets the current application domain for the current <see cref="T:System.Threading.Thread" />.</span></span></summary>
        <value><span data-ttu-id="cc35c-990">현재 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-990">The current application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cc35c-991">다음 코드 예제에서는 새 응용 프로그램 도메인을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-991">The following code example creates a new application domain.</span></span> <span data-ttu-id="cc35c-992"><xref:System.AppDomain.CurrentDomain%2A> 속성은 가져오는 데는 <xref:System.AppDomain> 현재 응용 프로그램 도메인을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-992">The <xref:System.AppDomain.CurrentDomain%2A> property is used to obtain an <xref:System.AppDomain> object that represents the current application domain.</span></span> <span data-ttu-id="cc35c-993"><xref:System.AppDomain.FriendlyName%2A> 속성은 다음 명령줄에 표시 되는 현재 응용 프로그램 도메인의 이름을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-993">The <xref:System.AppDomain.FriendlyName%2A> property provides the name of the current application domain, which is then displayed at the command line.</span></span>  
  
 [!code-cpp[ADApplicationBase#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADApplicationBase/CPP/adapplicationbase.cpp#1)]
 [!code-csharp[ADApplicationBase#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADApplicationBase/CS/adapplicationbase.cs#1)]
 [!code-vb[ADApplicationBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADApplicationBase/VB/adapplicationbase.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineDynamicAssembly">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc35c-994">현재 응용 프로그램 도메인에서 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-994">Defines a dynamic assembly in the current application domain.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-995">동적 어셈블리의 고유 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-995">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="cc35c-996">동적 어셈블리의 액세스 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-996">The access mode for the dynamic assembly.</span></span></param>
        <summary><span data-ttu-id="cc35c-997">지정한 이름 및 액세스 모드를 사용하여 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-997">Defines a dynamic assembly with the specified name and access mode.</span></span></summary>
        <returns><span data-ttu-id="cc35c-998">지정한 이름 및 액세스 모드를 사용하는 동적 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-998">A dynamic assembly with the specified name and access mode.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-999">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-999">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="cc35c-1000">자세한 내용은 참조는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1000">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1001">동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다의 오버 로드를 사용 하 여 <xref:System.AppDomain.DefineDynamicAssembly%2A> 증명 정보 및 사용 권한을 지정 하는 메서드를 포함 하는 동적 어셈블리를 개발할 때는 제공 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> 에 `refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1001">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="cc35c-1002">포함 하 여 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> 에 `refusedPermissions` 매개 변수를 사용 하면 MSIL이 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1002">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="cc35c-1003">이 방법의 제한 사항은은 <xref:System.Security.SecurityException> 완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1003">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1004">다음 샘플을 참조 하십시오.는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 메서드 및 <xref:System.AppDomain.AssemblyResolve> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1004">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="cc35c-1005">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1005">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-1006">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1006">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1007"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1007"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-1008"><paramref name="name" />의 <see langword="Name" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1008">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-1009">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1009">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1010"><paramref name="name" />의 <see langword="Name" /> 속성이 공백으로 시작하거나 슬래시 또는 백슬래시를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1010">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1011">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1011">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-1012">동적 어셈블리의 고유 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1012">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="cc35c-1013">동적 어셈블리의 액세스 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1013">The access mode for the dynamic assembly.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="cc35c-1014">어셈블리에 적용되는 특성의 열거형 목록이거나 특성이 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1014">An enumerable list of attributes to be applied to the assembly, or <see langword="null" /> if there are no attributes.</span></span></param>
        <summary><span data-ttu-id="cc35c-1015">지정한 이름, 액세스 모드 및 사용자 지정 특성을 사용하여 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1015">Defines a dynamic assembly with the specified name, access mode, and custom attributes.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1016">지정한 이름 및 기능을 사용하는 동적 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1016">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1017">이 메서드 오버 로드를 사용 하 여 동적 어셈블리를 만들 때 적용 하지 않으면 올바르게 작동 하지 않는 특성을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1017">Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</span></span> <span data-ttu-id="cc35c-1018">예를 들어 같은 보안 특성 <xref:System.Security.SecurityTransparentAttribute> 및 <xref:System.Security.SecurityCriticalAttribute> 동적 어셈블리를 만든 후에 추가 된 경우 제대로 작동 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1018">For example, security attributes such as <xref:System.Security.SecurityTransparentAttribute> and <xref:System.Security.SecurityCriticalAttribute> do not work correctly if they are added after a dynamic assembly has been created.</span></span>  
  
 <span data-ttu-id="cc35c-1019">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1019">This method should be used only to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="cc35c-1020">이 제한에 대 한 자세한 내용은 참조는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1020">For more information about this restriction, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 <span data-ttu-id="cc35c-1021">이 메서드는 오버 로드는 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1021">This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1022">다음 코드 예제에는 동적 어셈블리를 만드는 방법을 보여 줍니다는 <xref:System.Security.SecurityTransparentAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1022">The following code sample shows how to create a dynamic assembly that has the <xref:System.Security.SecurityTransparentAttribute>.</span></span> <span data-ttu-id="cc35c-1023">배열의 요소와 특성을 지정 해야 합니다 <xref:System.Reflection.Emit.CustomAttributeBuilder> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1023">The attribute must be specified as an element of an array of <xref:System.Reflection.Emit.CustomAttributeBuilder> objects.</span></span>  
  
 <span data-ttu-id="cc35c-1024">만들 때 첫 번째 단계는 <xref:System.Reflection.Emit.CustomAttributeBuilder> 을 가져오는 특성에 대 한 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1024">The first step in creating the <xref:System.Reflection.Emit.CustomAttributeBuilder> is to obtain a constructor for the attribute.</span></span> <span data-ttu-id="cc35c-1025">생성자에 매개 변수가 사용 되지 않으므로 <xref:System.Type.GetConstructor%2A> 메서드는 빈 배열을 사용 하 여 <xref:System.Type> 유형의 매개 변수를 나타내는 개체를 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1025">The constructor has no parameters, so the <xref:System.Type.GetConstructor%2A> method is called with an empty array of <xref:System.Type> objects to represent the types of the parameters.</span></span> <span data-ttu-id="cc35c-1026">결과 전달 하는 두 번째 단계는 <xref:System.Reflection.ConstructorInfo> 개체의 생성자에는 <xref:System.Reflection.Emit.CustomAttributeBuilder> 클래스 형식의 빈 배열 함께 <xref:System.Object> 인수를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1026">The second step is to pass the resulting <xref:System.Reflection.ConstructorInfo> object to the constructor for the <xref:System.Reflection.Emit.CustomAttributeBuilder> class, together with an empty array of type <xref:System.Object> to represent the arguments.</span></span>  
  
 <span data-ttu-id="cc35c-1027">결과 <xref:System.Reflection.Emit.CustomAttributeBuilder> 에 전달 되는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 메서드는 배열의 유일한 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1027">The resulting <xref:System.Reflection.Emit.CustomAttributeBuilder> is then passed to the <xref:System.AppDomain.DefineDynamicAssembly%2A> method as the only element of an array.</span></span>  
  
 <span data-ttu-id="cc35c-1028">예제 코드는 새 동적 어셈블리의 모듈과 형식을 정의 하 고 어셈블리의 특성을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1028">The example code defines a module and a type in the new dynamic assembly, and then displays the assembly's attributes.</span></span>  
  
 [!code-cpp[DefineDynamicAssemblyWithAttributes#1](~/samples/snippets/cpp/VS_Snippets_CLR/DefineDynamicAssemblyWithAttributes/cpp/source.cpp#1)]
 [!code-csharp[DefineDynamicAssemblyWithAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR/DefineDynamicAssemblyWithAttributes/cs/source.cs#1)]
 [!code-vb[DefineDynamicAssemblyWithAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DefineDynamicAssemblyWithAttributes/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1029"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1029"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-1030"><paramref name="name" />의 <see langword="Name" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1030">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-1031">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1031">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1032"><paramref name="name" />의 <see langword="Name" /> 속성이 공백으로 시작하거나 슬래시 또는 백슬래시를 포함하는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1032">The <see langword="Name" /> property of <paramref name="name" /> starts with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1033">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1033">The operation is attempted on an unloaded application domain.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-1034">동적 어셈블리의 고유 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1034">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="cc35c-1035">동적 어셈블리에 액세스하는 데 사용되는 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1035">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="evidence"><span data-ttu-id="cc35c-1036">동적 어셈블리에 제공된 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1036">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="cc35c-1037">증명 정보는 변경되지 않고 정책 결정을 위한 최종 증명 정보로 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1037">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <summary><span data-ttu-id="cc35c-1038">지정한 이름, 액세스 모드 및 증명 정보를 사용하여 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1038">Defines a dynamic assembly using the specified name, access mode, and evidence.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1039">지정한 이름 및 기능을 사용하는 동적 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1039">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1040">호출자가 제공할 수를 완전히 신뢰할 수 있는 해당 `evidence` 동적 정의할 때 <xref:System.Reflection.Assembly>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1040">Only fully trusted callers can supply their `evidence` when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="cc35c-1041">런타임에 매핑될는 <xref:System.Security.Policy.Evidence> 부여 된 권한을 확인 하기 위해 보안 정책을 통해 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1041">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="cc35c-1042">호출자가 null을 제공 해야 합니다를 부분적으로 신뢰할 수 있는 `evidence`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1042">Partially trusted callers must supply a null `evidence`.</span></span> <span data-ttu-id="cc35c-1043">경우 `evidence` 은 `null`, 런타임에서 사용 권한 집합을 복사, 즉, 현재 허용 / 거부 호출자의에서 <xref:System.Reflection.Assembly> 동적 <xref:System.Reflection.Assembly> 정의 되 고 정책을 해결 된 것으로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1043">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="cc35c-1044">경우 동적 <xref:System.Reflection.Assembly> 은 디스크에 저장 다음 로드 받아볼 위치에 연결 된 정책에 따라 승인 여기서는 <xref:System.Reflection.Assembly> 저장 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1044">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="cc35c-1045">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1045">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="cc35c-1046">자세한 내용은 참조는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1046">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1047">동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다의 오버 로드를 사용 하 여 <xref:System.AppDomain.DefineDynamicAssembly%2A> 증명 정보 및 사용 권한을 지정 하는 메서드를 포함 하는 동적 어셈블리를 개발할 때는 제공 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> 에 `refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1047">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="cc35c-1048">포함 하 여 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> 에 `refusedPermissions` 매개 변수를 사용 하면 MSIL이 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1048">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="cc35c-1049">이 방법의 제한 사항은은 <xref:System.Security.SecurityException> 완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1049">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1050">다음 샘플을 참조 하십시오.는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 메서드 및 <xref:System.AppDomain.AssemblyResolve> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1050">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and the <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="cc35c-1051">코드 예제에서는의 인스턴스를 만들려고 시도 하는 첫째, `MyDynamicType` 호출 하 여는 <xref:System.AppDomain.CreateInstance%2A> 메서드가 잘못 된 어셈블리 이름이 결과 예외를 catch 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1051">First, the code example tries to create an instance of `MyDynamicType` by calling the <xref:System.AppDomain.CreateInstance%2A> method with an invalid assembly name, and catches the resulting exception.</span></span>  
  
 <span data-ttu-id="cc35c-1052">에 대 한 이벤트 처리기를 다음 추가 하는 코드 예제는 <xref:System.AppDomain.AssemblyResolve> 이벤트를 다시 시도의 인스턴스를 만드는`MyDynamicType`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1052">The code example then adds an event handler for the <xref:System.AppDomain.AssemblyResolve> event, and again tries to create an instance of`MyDynamicType`.</span></span> <span data-ttu-id="cc35c-1053">호출 하는 동안 <xref:System.AppDomain.CreateInstance%2A>, <xref:System.AppDomain.AssemblyResolve> 잘못 된 어셈블리에 대 한 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1053">During the call to <xref:System.AppDomain.CreateInstance%2A>, the <xref:System.AppDomain.AssemblyResolve> event is raised for the invalid assembly.</span></span> <span data-ttu-id="cc35c-1054">이벤트 처리기 이라는 형식을 포함 하는 동적 어셈블리를 만듭니다 `MyDynamicType`매개 변수가 없는 생성자를 제공 하 고 새 동적 어셈블리를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1054">The event handler creates a dynamic assembly that contains a type named `MyDynamicType`, gives the type a parameterless constructor, and returns the new dynamic assembly.</span></span> <span data-ttu-id="cc35c-1055">에 대 한 호출 <xref:System.AppDomain.CreateInstance%2A> 성공적으로 완료 되 고에 대 한 생성자 `MyDynamicType` 콘솔에서 메시지를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1055">The call to <xref:System.AppDomain.CreateInstance%2A> then finishes successfully, and the constructor for `MyDynamicType` displays a message at the console.</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1056"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1056"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-1057"><paramref name="name" />의 <see langword="Name" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1057">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-1058">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1058">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1059"><paramref name="name" />의 <see langword="Name" /> 속성이 공백으로 시작하거나 슬래시 또는 백슬래시를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1059">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1060">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1060">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1061">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1061">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1062">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1062">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, dir As String) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-1063">동적 어셈블리의 고유 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1063">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="cc35c-1064">동적 어셈블리에 액세스하는 데 사용되는 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1064">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="cc35c-1065">어셈블리가 저장될 디렉터리 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1065">The name of the directory where the assembly will be saved.</span></span> <span data-ttu-id="cc35c-1066"><c>dir</c>이 <see langword="null" />이면 현재 디렉터리가 기본값으로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1066">If <c>dir</c> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <summary><span data-ttu-id="cc35c-1067">지정한 이름, 액세스 모드 및 저장소 디렉터리를 사용하여 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1067">Defines a dynamic assembly using the specified name, access mode, and storage directory.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1068">지정한 이름 및 기능을 사용하는 동적 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1068">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1069">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1069">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="cc35c-1070">자세한 내용은 참조는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1070">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1071">동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다의 오버 로드를 사용 하 여 <xref:System.AppDomain.DefineDynamicAssembly%2A> 증명 정보 및 사용 권한을 지정 하는 메서드를 포함 하는 동적 어셈블리를 개발할 때는 제공 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> 에 `refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1071">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="cc35c-1072">포함 하 여 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> 에 `refusedPermissions` 매개 변수를 사용 하면 MSIL이 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1072">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="cc35c-1073">이 방법의 제한 사항은은 <xref:System.Security.SecurityException> 완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1073">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1074">다음 샘플을 참조 하십시오.는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 메서드 및 <xref:System.AppDomain.AssemblyResolve> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1074">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="cc35c-1075">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1075">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-1076">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1076">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1077"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1077"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-1078"><paramref name="name" />의 <see langword="Name" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1078">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-1079">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1079">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1080"><paramref name="name" />의 <see langword="Name" /> 속성이 공백으로 시작하거나 슬래시 또는 백슬래시를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1080">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1081">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1081">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes, System.Security.SecurityContextSource securityContextSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes, valuetype System.Security.SecurityContextSource securityContextSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes, System::Security::SecurityContextSource securityContextSource);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
        <Parameter Name="securityContextSource" Type="System.Security.SecurityContextSource" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-1082">동적 어셈블리의 고유 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1082">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="cc35c-1083">동적 어셈블리의 액세스 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1083">The access mode for the dynamic assembly.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="cc35c-1084">어셈블리에 적용되는 특성의 열거형 목록이거나 특성이 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1084">An enumerable list of attributes to be applied to the assembly, or <see langword="null" /> if there are no attributes.</span></span></param>
        <param name="securityContextSource"><span data-ttu-id="cc35c-1085">보안 컨텍스트의 소스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1085">The source of the security context.</span></span></param>
        <summary><span data-ttu-id="cc35c-1086">지정한 이름, 액세스 모드 및 사용자 지정 특성과 보안 컨텍스트에 대해 지정한 소스를 사용하여 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1086">Defines a dynamic assembly with the specified name, access mode, and custom attributes, and using the specified source for its security context.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1087">지정한 이름 및 기능을 사용하는 동적 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1087">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1088">이 메서드 오버 로드를 사용 하 여 동적 어셈블리를 만들 때 적용 하지 않으면 올바르게 작동 하지 않는 특성을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1088">Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</span></span> <span data-ttu-id="cc35c-1089">예를 들어 같은 보안 특성 <xref:System.Security.SecurityTransparentAttribute> 및 <xref:System.Security.SecurityCriticalAttribute> 동적 어셈블리를 만든 후에 추가 된 경우 제대로 작동 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1089">For example, security attributes such as <xref:System.Security.SecurityTransparentAttribute> and <xref:System.Security.SecurityCriticalAttribute> do not work correctly if they are added after a dynamic assembly has been created.</span></span>  
  
 <span data-ttu-id="cc35c-1090">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1090">This method should be used only to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="cc35c-1091">이 제한에 대 한 자세한 내용은 참조는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1091">For more information about this restriction, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1092"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1092"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-1093"><paramref name="name" />의 <see langword="Name" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1093">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-1094">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1094">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1095"><paramref name="name" />의 <see langword="Name" /> 속성이 공백으로 시작하거나 슬래시 또는 백슬래시를 포함하는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1095">The <see langword="Name" /> property of <paramref name="name" /> starts with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1096">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1096">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cc35c-1097"><paramref name="securityContextSource" />의 값이 열거형 값 중 하나가 아니었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1097">The value of <paramref name="securityContextSource" /> was not one of the enumeration values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::Policy::Evidence ^ evidence);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-1098">동적 어셈블리의 고유 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1098">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="cc35c-1099">동적 어셈블리에 액세스하는 데 사용되는 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1099">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="cc35c-1100">어셈블리가 저장될 디렉터리 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1100">The name of the directory where the assembly will be saved.</span></span> <span data-ttu-id="cc35c-1101"><c>dir</c>이 <see langword="null" />이면 현재 디렉터리가 기본값으로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1101">If <c>dir</c> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <param name="evidence"><span data-ttu-id="cc35c-1102">동적 어셈블리에 제공된 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1102">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="cc35c-1103">증명 정보는 변경되지 않고 정책 결정을 위한 최종 증명 정보로 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1103">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <summary><span data-ttu-id="cc35c-1104">지정한 이름, 액세스 모드, 저장소 디렉터리 및 증명 정보를 사용하여 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1104">Defines a dynamic assembly using the specified name, access mode, storage directory, and evidence.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1105">지정한 이름 및 기능을 사용하는 동적 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1105">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1106">호출자가 제공할 수를 완전히 신뢰할 수 있는 해당 `evidence` 동적 정의할 때 <xref:System.Reflection.Assembly>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1106">Only fully trusted callers can supply their `evidence` when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="cc35c-1107">런타임에 매핑될는 <xref:System.Security.Policy.Evidence> 부여 된 권한을 확인 하기 위해 보안 정책을 통해 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1107">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="cc35c-1108">호출자가 null을 제공 해야 합니다를 부분적으로 신뢰할 수 있는 `evidence`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1108">Partially trusted callers must supply a null `evidence`.</span></span> <span data-ttu-id="cc35c-1109">경우 `evidence` 은 `null`, 런타임에서 사용 권한 집합을 복사, 즉, 현재 허용 / 거부 호출자의에서 <xref:System.Reflection.Assembly> 동적 <xref:System.Reflection.Assembly> 정의 되 고 정책을 해결 된 것으로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1109">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="cc35c-1110">경우 동적 <xref:System.Reflection.Assembly> 은 디스크에 저장 다음 로드 받아볼 위치에 연결 된 정책에 따라 승인 여기서는 <xref:System.Reflection.Assembly> 저장 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1110">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="cc35c-1111">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1111">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="cc35c-1112">자세한 내용은 참조는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1112">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1113">동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다의 오버 로드를 사용 하 여 <xref:System.AppDomain.DefineDynamicAssembly%2A> 증명 정보 및 사용 권한을 지정 하는 메서드를 포함 하는 동적 어셈블리를 개발할 때는 제공 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> 에 `refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1113">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="cc35c-1114">포함 하 여 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> 에 `refusedPermissions` 매개 변수를 사용 하면 MSIL이 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1114">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="cc35c-1115">이 방법의 제한 사항은은 <xref:System.Security.SecurityException> 완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1115">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1116">다음 샘플을 참조 하십시오.는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 메서드 및 <xref:System.AppDomain.AssemblyResolve> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1116">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="cc35c-1117">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1117">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-1118">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1118">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1119"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1119"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-1120"><paramref name="name" />의 <see langword="Name" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1120">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-1121">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1121">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1122"><paramref name="name" />의 <see langword="Name" /> 속성이 공백으로 시작하거나 슬래시 또는 백슬래시를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1122">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1123">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1123">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1124">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1124">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1125">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1125">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, requiredPermissions As PermissionSet, optionalPermissions As PermissionSet, refusedPermissions As PermissionSet) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-1126">동적 어셈블리의 고유 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1126">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="cc35c-1127">동적 어셈블리에 액세스하는 데 사용되는 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1127">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="cc35c-1128">필수 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1128">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="cc35c-1129">선택적 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1129">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="cc35c-1130">거부된 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1130">The refused permissions request.</span></span></param>
        <summary><span data-ttu-id="cc35c-1131">지정한 이름, 액세스 모드 및 권한 요청을 사용하여 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1131">Defines a dynamic assembly using the specified name, access mode, and permission requests.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1132">지정한 이름 및 기능을 사용하는 동적 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1132">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1133">에 대 한 지정 된 권한 요청 `requiredPermissions`, `optionalPermissions`, 및 `refusedPermissions` 동적 어셈블리 저장 되 고 메모리에 다시 로드 하지 않는 한 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1133">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are not used unless the dynamic assembly has been saved and reloaded into memory.</span></span> <span data-ttu-id="cc35c-1134">임시 어셈블리의 오버 로드를 사용 하는 디스크에 저장 되지 않은 대 한 권한 요청을 지정 하는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 요청 된 사용 권한 및 공급으로 증명 정보를 지정 하는 메서드는 <xref:System.Security.Policy.Evidence> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1134">To specify permission requests for a transient assembly that is never saved to disk, use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence as well as requested permissions, and supply an <xref:System.Security.Policy.Evidence> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1135">동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다의 오버 로드를 사용 하 여 <xref:System.AppDomain.DefineDynamicAssembly%2A> 증명 정보 및 사용 권한을 지정 하는 메서드를 포함 하는 동적 어셈블리를 개발할 때는 제공 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> 에 `refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1135">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="cc35c-1136">포함 하 여 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> 에 `refusedPermissions` 매개 변수를 사용 하면 MSIL이 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1136">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="cc35c-1137">이 방법의 제한 사항은은 <xref:System.Security.SecurityException> 완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1137">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="cc35c-1138">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1138">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="cc35c-1139">자세한 내용은 참조는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1139">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1140">다음 샘플을 참조 하십시오.는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 메서드 및 <xref:System.AppDomain.AssemblyResolve> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1140">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="cc35c-1141">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1141">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-1142">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1142">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1143"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1143"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-1144"><paramref name="name" />의 <see langword="Name" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1144">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-1145">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1145">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1146"><paramref name="name" />의 <see langword="Name" /> 속성이 공백으로 시작하거나 슬래시 또는 백슬래시를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1146">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1147">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1147">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, bool isSynchronized, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, bool isSynchronized, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, dir As String, isSynchronized As Boolean, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, bool isSynchronized, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="isSynchronized" Type="System.Boolean" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-1148">동적 어셈블리의 고유 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1148">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="cc35c-1149">동적 어셈블리에 액세스하는 데 사용되는 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1149">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="cc35c-1150">동적 어셈블리를 저장할 디렉터리 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1150">The name of the directory where the dynamic assembly will be saved.</span></span> <span data-ttu-id="cc35c-1151"><c>dir</c>이 <see langword="null" />인 경우 현재 디렉터리가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1151">If <c>dir</c> is <see langword="null" />, the current directory is used.</span></span></param>
        <param name="isSynchronized">
          <span data-ttu-id="cc35c-1152">동적 어셈블리에서 모듈, 형식 및 멤버 만들기를 동기화하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1152"><see langword="true" /> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false" />.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="cc35c-1153">어셈블리에 적용되는 특성의 열거형 목록이거나 특성이 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1153">An enumerable list of attributes to be applied to the assembly, or <see langword="null" /> if there are no attributes.</span></span></param>
        <summary><span data-ttu-id="cc35c-1154">지정한 이름, 액세스 모드, 저장소 디렉터리 및 동기화 옵션을 사용하여 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1154">Defines a dynamic assembly using the specified name, access mode, storage directory, and synchronization option.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1155">지정한 이름 및 기능을 사용하는 동적 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1155">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1156">이 메서드 오버 로드를 사용 하 여 동적 어셈블리를 만들 때 적용 하지 않으면 올바르게 작동 하지 않는 특성을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1156">Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</span></span> <span data-ttu-id="cc35c-1157">예를 들어 같은 보안 특성 <xref:System.Security.SecurityTransparentAttribute> 및 <xref:System.Security.SecurityCriticalAttribute> 동적 어셈블리를 만든 후에 추가 된 경우 제대로 작동 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1157">For example, security attributes such as <xref:System.Security.SecurityTransparentAttribute> and <xref:System.Security.SecurityCriticalAttribute> do not work correctly if they are added after a dynamic assembly has been created.</span></span>  
  
 <span data-ttu-id="cc35c-1158">경우 `isSynchronized` 은 `true`, 결과 다음과 같은 방법을 <xref:System.Reflection.Emit.AssemblyBuilder> 동기화 됩니다: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>, 및 <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1158">If `isSynchronized` is `true`, the following methods of the resulting <xref:System.Reflection.Emit.AssemblyBuilder> will be synchronized: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>, and <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>.</span></span> <span data-ttu-id="cc35c-1159">이러한 방법 중 두 가지 서로 다른 스레드에서 호출 하는 경우 다른 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1159">If two of these methods are called on different threads, one will block until the other is completed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1160"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1160"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-1161"><paramref name="name" />의 <see langword="Name" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1161">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-1162">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1162">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1163"><paramref name="name" />의 <see langword="Name" /> 속성이 공백으로 시작하거나 슬래시 또는 백슬래시를 포함하는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1163">The <see langword="Name" /> property of <paramref name="name" /> starts with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1164">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1164">The operation is attempted on an unloaded application domain.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-1165">동적 어셈블리의 고유 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1165">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="cc35c-1166">동적 어셈블리에 액세스하는 데 사용되는 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1166">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="evidence"><span data-ttu-id="cc35c-1167">동적 어셈블리에 제공된 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1167">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="cc35c-1168">증명 정보는 변경되지 않고 정책 결정을 위한 최종 증명 정보로 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1168">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="cc35c-1169">필수 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1169">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="cc35c-1170">선택적 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1170">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="cc35c-1171">거부된 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1171">The refused permissions request.</span></span></param>
        <summary><span data-ttu-id="cc35c-1172">지정한 이름, 액세스 모드, 증명 정보 및 권한 요청을 사용하여 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1172">Defines a dynamic assembly using the specified name, access mode, evidence, and permission requests.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1173">지정한 이름 및 기능을 사용하는 동적 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1173">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1174">에 대 한 지정 된 권한 요청 `requiredPermissions`, `optionalPermissions`, 및 `refusedPermissions` 경우에 사용 `evidence` 에서도 제공 되는 동적 어셈블리를 저장 하 고 다시 메모리에 로드 하는 경우 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1174">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are used only if `evidence` is also supplied, or if the dynamic assembly is saved and reloaded into memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1175">동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다 포함 하는 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> 에서 `refusedPermissions`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1175">During the development of code that emits dynamic assemblies, it is recommended that you include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="cc35c-1176">포함 하 여 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> 에 `refusedPermissions` 매개 변수를 사용 하면 MSIL이 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1176">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="cc35c-1177">이 방법의 제한 사항은은 <xref:System.Security.SecurityException> 완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1177">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="cc35c-1178">호출자가 제공할 수를 완전히 신뢰할 수 있는 해당 `evidence` 동적 정의할 때 <xref:System.Reflection.Assembly>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1178">Only fully trusted callers can supply their `evidence` when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="cc35c-1179">런타임에 매핑될는 <xref:System.Security.Policy.Evidence> 부여 된 권한을 확인 하기 위해 보안 정책을 통해 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1179">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="cc35c-1180">호출자가 null을 제공 해야 합니다를 부분적으로 신뢰할 수 있는 `evidence`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1180">Partially trusted callers must supply a null `evidence`.</span></span> <span data-ttu-id="cc35c-1181">경우 `evidence` 은 `null`, 런타임에서 사용 권한 집합을 복사, 즉, 현재 허용 / 거부 호출자의에서 <xref:System.Reflection.Assembly> 동적 <xref:System.Reflection.Assembly> 정의 되 고 정책을 해결 된 것으로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1181">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="cc35c-1182">경우 동적 <xref:System.Reflection.Assembly> 은 디스크에 저장 다음 로드 받아볼 위치에 연결 된 정책에 따라 승인 여기서는 <xref:System.Reflection.Assembly> 저장 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1182">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="cc35c-1183">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1183">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="cc35c-1184">자세한 내용은 참조는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1184">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1185">다음 샘플을 참조 하십시오.는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 메서드 및 <xref:System.AppDomain.AssemblyResolve> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1185">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="cc35c-1186">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1186">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-1187">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1187">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1188"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1188"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-1189"><paramref name="name" />의 <see langword="Name" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1189">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-1190">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1190">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1191"><paramref name="name" />의 <see langword="Name" /> 속성이 공백으로 시작하거나 슬래시 또는 백슬래시를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1191">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1192">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1192">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1193">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1193">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1194">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1194">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, dir As String, requiredPermissions As PermissionSet, optionalPermissions As PermissionSet, refusedPermissions As PermissionSet) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-1195">동적 어셈블리의 고유 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1195">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="cc35c-1196">동적 어셈블리에 액세스하는 데 사용되는 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1196">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="cc35c-1197">어셈블리가 저장될 디렉터리 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1197">The name of the directory where the assembly will be saved.</span></span> <span data-ttu-id="cc35c-1198"><c>dir</c>이 <see langword="null" />이면 현재 디렉터리가 기본값으로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1198">If <c>dir</c> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="cc35c-1199">필수 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1199">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="cc35c-1200">선택적 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1200">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="cc35c-1201">거부된 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1201">The refused permissions request.</span></span></param>
        <summary><span data-ttu-id="cc35c-1202">지정한 이름, 액세스 모드, 저장소 디렉터리 및 권한 요청을 사용하여 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1202">Defines a dynamic assembly using the specified name, access mode, storage directory, and permission requests.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1203">지정한 이름 및 기능을 사용하는 동적 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1203">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1204">에 대 한 지정 된 권한 요청 `requiredPermissions`, `optionalPermissions`, 및 `refusedPermissions` 동적 어셈블리 저장 되 고 메모리에 다시 로드 하지 않는 한 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1204">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are not used unless the dynamic assembly has been saved and reloaded into memory.</span></span> <span data-ttu-id="cc35c-1205">임시 어셈블리의 오버 로드를 사용 하는 디스크에 저장 되지 않은 대 한 권한 요청을 지정 하는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 요청 된 사용 권한 및 공급으로 증명 정보를 지정 하는 메서드는 <xref:System.Security.Policy.Evidence> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1205">To specify permission requests for a transient assembly that is never saved to disk, use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence as well as requested permissions, and supply an <xref:System.Security.Policy.Evidence> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1206">동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다의 오버 로드를 사용 하 여 <xref:System.AppDomain.DefineDynamicAssembly%2A> 증명 정보 및 사용 권한을 지정 하는 메서드를 포함 하는 동적 어셈블리를 개발할 때는 제공 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> 에 `refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1206">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="cc35c-1207">포함 하 여 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> 에 `refusedPermissions` 매개 변수를 사용 하면 MSIL이 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1207">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="cc35c-1208">이 방법의 제한 사항은은 <xref:System.Security.SecurityException> 완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1208">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="cc35c-1209">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1209">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="cc35c-1210">자세한 내용은 참조는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1210">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1211">다음 샘플을 참조 하십시오.는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 메서드 및 <xref:System.AppDomain.AssemblyResolve> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1211">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="cc35c-1212">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1212">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-1213">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1213">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1214"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1214"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-1215"><paramref name="name" />의 <see langword="Name" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1215">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-1216">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1216">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1217"><paramref name="name" />의 <see langword="Name" /> 속성이 공백으로 시작하거나 슬래시 또는 백슬래시를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1217">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1218">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1218">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-1219">동적 어셈블리의 고유 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1219">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="cc35c-1220">동적 어셈블리에 액세스하는 데 사용되는 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1220">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="cc35c-1221">어셈블리가 저장될 디렉터리 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1221">The name of the directory where the assembly will be saved.</span></span> <span data-ttu-id="cc35c-1222"><c>dir</c>이 <see langword="null" />이면 현재 디렉터리가 기본값으로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1222">If <c>dir</c> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <param name="evidence"><span data-ttu-id="cc35c-1223">동적 어셈블리에 제공된 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1223">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="cc35c-1224">증명 정보는 변경되지 않고 정책 결정을 위한 최종 증명 정보로 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1224">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="cc35c-1225">필수 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1225">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="cc35c-1226">선택적 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1226">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="cc35c-1227">거부된 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1227">The refused permissions request.</span></span></param>
        <summary><span data-ttu-id="cc35c-1228">지정한 이름, 액세스 모드, 저장소 디렉터리, 증명 정보 및 권한 요청을 사용하여 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1228">Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, and permission requests.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1229">지정한 이름 및 기능을 사용하는 동적 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1229">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1230">에 대 한 지정 된 권한 요청 `requiredPermissions`, `optionalPermissions`, 및 `refusedPermissions` 경우에 사용 `evidence` 에서도 제공 되는 동적 어셈블리를 저장 하 고 다시 메모리에 로드 하는 경우 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1230">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are used only if `evidence` is also supplied, or if the dynamic assembly is saved and reloaded into memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1231">동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다 포함 하는 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> 에서 `refusedPermissions`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1231">During the development of code that emits dynamic assemblies, it is recommended that you include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="cc35c-1232">포함 하 여 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> 에 `refusedPermissions` 매개 변수를 사용 하면 MSIL이 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1232">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="cc35c-1233">이 방법의 제한 사항은은 <xref:System.Security.SecurityException> 완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1233">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="cc35c-1234">호출자가 제공할 수를 완전히 신뢰할 수 있는 해당 `evidence` 동적 정의할 때 <xref:System.Reflection.Assembly>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1234">Only fully trusted callers can supply their `evidence` when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="cc35c-1235">런타임에 매핑될는 <xref:System.Security.Policy.Evidence> 부여 된 권한을 확인 하기 위해 보안 정책을 통해 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1235">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="cc35c-1236">호출자가 null을 제공 해야 합니다를 부분적으로 신뢰할 수 있는 `evidence`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1236">Partially trusted callers must supply a null `evidence`.</span></span> <span data-ttu-id="cc35c-1237">경우 `evidence` 은 `null`, 런타임에서 사용 권한 집합을 복사, 즉, 현재 허용 / 거부 호출자의에서 <xref:System.Reflection.Assembly> 동적 <xref:System.Reflection.Assembly> 정의 되 고 정책을 해결 된 것으로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1237">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="cc35c-1238">경우 동적 <xref:System.Reflection.Assembly> 은 디스크에 저장 다음 로드 받아볼 위치에 연결 된 정책에 따라 승인 여기서는 <xref:System.Reflection.Assembly> 저장 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1238">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="cc35c-1239">이 메서드는 현재 응용 프로그램 도메인에서 동적 어셈블리를 정의에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1239">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="cc35c-1240">자세한 내용은 참조는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1240">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1241">다음 샘플을 참조 하십시오.는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 메서드 및 <xref:System.AppDomain.AssemblyResolve> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1241">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="cc35c-1242">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1242">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-1243">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1243">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1244"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1244"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-1245"><paramref name="name" />의 <see langword="Name" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1245">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-1246">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1246">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1247"><paramref name="name" />의 <see langword="Name" /> 속성이 공백으로 시작하거나 슬래시 또는 백슬래시를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1247">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1248">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1248">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1249">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1249">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1250">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1250">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions, bool isSynchronized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions, bool isSynchronized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions, bool isSynchronized);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="isSynchronized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-1251">동적 어셈블리의 고유 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1251">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="cc35c-1252">동적 어셈블리에 액세스하는 데 사용되는 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1252">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="cc35c-1253">동적 어셈블리를 저장할 디렉터리 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1253">The name of the directory where the dynamic assembly will be saved.</span></span> <span data-ttu-id="cc35c-1254"><c>dir</c>이 <see langword="null" />이면 현재 디렉터리가 기본값으로 지정됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1254">If <c>dir</c> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <param name="evidence"><span data-ttu-id="cc35c-1255">동적 어셈블리에 제공된 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1255">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="cc35c-1256">증명 정보는 변경되지 않고 정책 결정을 위한 최종 증명 정보로 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1256">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="cc35c-1257">필수 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1257">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="cc35c-1258">선택적 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1258">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="cc35c-1259">거부된 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1259">The refused permissions request.</span></span></param>
        <param name="isSynchronized">
          <span data-ttu-id="cc35c-1260">동적 어셈블리에서 모듈, 형식 및 멤버 만들기를 동기화하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1260"><see langword="true" /> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="cc35c-1261">지정한 이름, 액세스 모드, 저장소 디렉터리, 증명 정보, 권한 요청 및 동기화 옵션을 사용하여 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1261">Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, permission requests, and synchronization option.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1262">지정한 이름 및 기능을 사용하는 동적 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1262">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1263">에 대 한 지정 된 권한 요청 `requiredPermissions`, `optionalPermissions`, 및 `refusedPermissions` 경우에 사용 `evidence` 에서도 제공 되는 동적 어셈블리를 저장 하 고 다시 메모리에 로드 하는 경우 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1263">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are used only if `evidence` is also supplied, or if the dynamic assembly is saved and reloaded into memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1264">동적 어셈블리를 내보내는 코드를 개발 하는 동안 것이 좋습니다 포함 하는 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> 에서 `refusedPermissions`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1264">During the development of code that emits dynamic assemblies, it is recommended that you include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="cc35c-1265">포함 하 여 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> 에 `refusedPermissions` 매개 변수를 사용 하면 MSIL이 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1265">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="cc35c-1266">이 방법의 제한 사항은은 <xref:System.Security.SecurityException> 완전 신뢰를 요청 하는 코드와 함께 사용할 경우에 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1266">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="cc35c-1267">동적 정의할 때 완전히 신뢰할 수 있는 호출자의 증명 정보를 제공할 수만 <xref:System.Reflection.Assembly>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1267">Only fully trusted callers can supply their evidence when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="cc35c-1268">런타임에 매핑될는 <xref:System.Security.Policy.Evidence> 부여 된 권한을 확인 하기 위해 보안 정책을 통해 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1268">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="cc35c-1269">호출자를 부분적으로 신뢰할 수 있는 `null` 에 대 한는 `evidence` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1269">Partially trusted callers must supply `null` for the `evidence` parameter.</span></span> <span data-ttu-id="cc35c-1270">경우 `evidence` 은 `null`, 런타임에서 사용 권한 집합을 복사, 즉, 현재 허용 / 거부 호출자의에서 <xref:System.Reflection.Assembly> 동적 <xref:System.Reflection.Assembly> 정의 되 고 정책을 해결 된 것으로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1270">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="cc35c-1271">경우 동적 <xref:System.Reflection.Assembly> 은 디스크에 저장 다음 로드 받아볼 위치에 연결 된 정책에 따라 승인 여기서는 <xref:System.Reflection.Assembly> 저장 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1271">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="cc35c-1272">경우 `isSynchronized` 은 `true`, 결과 다음과 같은 방법을 <xref:System.Reflection.Emit.AssemblyBuilder> 동기화 됩니다: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>, 및 <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1272">If `isSynchronized` is `true`, the following methods of the resulting <xref:System.Reflection.Emit.AssemblyBuilder> will be synchronized: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>, and <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>.</span></span> <span data-ttu-id="cc35c-1273">이러한 방법 중 두 가지 서로 다른 스레드에서 호출 하는 경우 다른 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1273">If two of these methods are called on different threads, one will block until the other completes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1274">다음 샘플을 참조 하십시오.는 <xref:System.AppDomain.DefineDynamicAssembly%2A> 메서드 및 <xref:System.AppDomain.AssemblyResolve> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1274">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="cc35c-1275">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1275">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-1276">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1276">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1277"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1277"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-1278"><paramref name="name" />의 <see langword="Name" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1278">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-1279">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1279">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1280"><paramref name="name" />의 <see langword="Name" /> 속성이 공백으로 시작하거나 슬래시 또는 백슬래시를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1280">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1281">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1281">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1282">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1282">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1283">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1283">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions, bool isSynchronized, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions, bool isSynchronized, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions, bool isSynchronized, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="isSynchronized" Type="System.Boolean" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-1284">동적 어셈블리의 고유 ID입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1284">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="cc35c-1285">동적 어셈블리에 액세스하는 데 사용되는 모드입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1285">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="cc35c-1286">동적 어셈블리를 저장할 디렉터리 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1286">The name of the directory where the dynamic assembly will be saved.</span></span> <span data-ttu-id="cc35c-1287"><c>dir</c>이 <see langword="null" />인 경우 현재 디렉터리가 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1287">If <c>dir</c> is <see langword="null" />, the current directory is used.</span></span></param>
        <param name="evidence"><span data-ttu-id="cc35c-1288">동적 어셈블리에 제공된 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1288">The evidence that is supplied for the dynamic assembly.</span></span> <span data-ttu-id="cc35c-1289">증명 정보는 변경되지 않고 정책 결정을 위한 최종 증명 정보로 사용됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1289">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="cc35c-1290">필수 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1290">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="cc35c-1291">선택적 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1291">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="cc35c-1292">거부된 권한 요청입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1292">The refused permissions request.</span></span></param>
        <param name="isSynchronized">
          <span data-ttu-id="cc35c-1293">동적 어셈블리에서 모듈, 형식 및 멤버 만들기를 동기화하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1293"><see langword="true" /> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false" />.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="cc35c-1294">어셈블리에 적용되는 특성의 열거형 목록이거나 특성이 없는 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1294">An enumerable list of attributes to be applied to the assembly, or <see langword="null" /> if there are no attributes.</span></span></param>
        <summary><span data-ttu-id="cc35c-1295">지정한 이름, 액세스 모드, 저장소 디렉터리, 증명 정보, 권한 요청, 동기화 옵션 및 사용자 지정 특성을 사용하여 동적 어셈블리를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1295">Defines a dynamic assembly with the specified name, access mode, storage directory, evidence, permission requests, synchronization option, and custom attributes.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1296">지정한 이름 및 기능을 사용하는 동적 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1296">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1297">이 메서드 오버 로드를 사용 하 여 동적 어셈블리를 만들 때 적용 하지 않으면 올바르게 작동 하지 않는 특성을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1297">Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</span></span> <span data-ttu-id="cc35c-1298">예를 들어 같은 보안 특성 <xref:System.Security.SecurityTransparentAttribute> 및 <xref:System.Security.SecurityCriticalAttribute> 동적 어셈블리를 만든 후에 추가 된 경우 제대로 작동 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1298">For example, security attributes such as <xref:System.Security.SecurityTransparentAttribute> and <xref:System.Security.SecurityCriticalAttribute> do not work correctly if they are added after a dynamic assembly has been created.</span></span>  
  
 <span data-ttu-id="cc35c-1299">에 대 한 지정 된 권한 요청은 `requiredPermissions`, `optionalPermissions`, 및 `refusedPermissions` 경우에 사용 되는 매개 변수는 `evidence` 매개 변수도 제공한, 또는 동적 어셈블리를 저장 하 고 다시 메모리에 로드 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1299">The permission requests specified for the `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` parameters are used only if the `evidence` parameter is also supplied, or if the dynamic assembly is saved and reloaded into memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1300">동적 어셈블리를 내보내는 코드를 개발 하는 경우 포함 하는 것이 좋습니다는 <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> 플래그는 `refusedPermissions` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1300">When you develop code that emits dynamic assemblies, we recommend that you include the <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> flag in the `refusedPermissions` parameter.</span></span> <span data-ttu-id="cc35c-1301">이 플래그를 포함 하면 Microsoft MSIL (intermediate language)를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1301">The inclusion of this flag ensures that the Microsoft intermediate language (MSIL) will be verified.</span></span> <span data-ttu-id="cc35c-1302">이 기술은 있는 파악 하기가 매우 어렵습니다 비안정형 코드의 의도 하지 않게 생성을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1302">This technique will detect the unintentional generation of unverifiable code, which otherwise is very difficult to detect.</span></span> <span data-ttu-id="cc35c-1303">이 방법의 제한 사항은은 <xref:System.Security.SecurityException> 를 완전 신뢰를 요청 하는 코드를 함께 사용 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1303">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when it is used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="cc35c-1304">동적 정의할 때 증명 정보를 제공할 수 있습니다 완전히 신뢰할 수 있는 호출자만 <xref:System.Reflection.Assembly>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1304">Only fully trusted callers can supply evidence when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="cc35c-1305">런타임에 매핑되는 <xref:System.Security.Policy.Evidence> 부여 된 권한을 확인 하기 위해 보안 정책을 통해 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1305">The runtime maps the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="cc35c-1306">호출자를 부분적으로 신뢰할 수 있는 `null` 에 대 한는 `evidence` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1306">Partially trusted callers must supply `null` for the `evidence` parameter.</span></span> <span data-ttu-id="cc35c-1307">경우 `evidence` 은 `null`, 런타임에서 호출자의 어셈블리에서 정의 되 고 확인 된 것으로 고 정책을 표시 하는 동적 어셈블리에 (즉, 즉 현재 부여 및 거부 집합) 사용 권한 집합을 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1307">If `evidence` is `null`, the runtime copies the permission sets (that is, the current grant and deny sets) from the caller's assembly to the dynamic assembly that is being defined, and marks the policy as resolved.</span></span>  
  
 <span data-ttu-id="cc35c-1308">동적 어셈블리 후속 디스크에 저장 됩니다 부하는 동적 어셈블리를 저장할 위치와 연결 된 정책을 기반으로 하는 권한을 부여 받습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1308">If the dynamic assembly is saved to disk, subsequent loads will get grants based on policies that are associated with the location where the dynamic assembly was saved.</span></span>  
  
 <span data-ttu-id="cc35c-1309">경우 `isSynchronized` 은 `true`, 결과 다음과 같은 방법을 <xref:System.Reflection.Emit.AssemblyBuilder> 동기화 됩니다: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>, 및 <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1309">If `isSynchronized` is `true`, the following methods of the resulting <xref:System.Reflection.Emit.AssemblyBuilder> will be synchronized: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>, and <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>.</span></span> <span data-ttu-id="cc35c-1310">이러한 방법 중 두 가지 서로 다른 스레드에서 호출 하는 경우 다른 완료 될 때까지 차단 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1310">If two of these methods are called on different threads, one will block until the other is completed.</span></span>  
  
 <span data-ttu-id="cc35c-1311">이 메서드는 오버 로드는 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1311">This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1312"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1312"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-1313"><paramref name="name" />의 <see langword="Name" /> 속성이 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1313">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="cc35c-1314">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1314">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1315"><paramref name="name" />의 <see langword="Name" /> 속성이 공백으로 시작하거나 슬래시 또는 백슬래시를 포함하는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1315">The <see langword="Name" /> property of <paramref name="name" /> starts with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1316">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1316">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1317">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1317">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1318">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1318">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="DoCallBack">
      <MemberSignature Language="C#" Value="public void DoCallBack (CrossAppDomainDelegate callBackDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DoCallBack(class System.CrossAppDomainDelegate callBackDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DoCallBack (callBackDelegate As CrossAppDomainDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DoCallBack(CrossAppDomainDelegate ^ callBackDelegate);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DoCallBack(System.CrossAppDomainDelegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBackDelegate" Type="System.CrossAppDomainDelegate" />
      </Parameters>
      <Docs>
        <param name="callBackDelegate"><span data-ttu-id="cc35c-1319">호출할 메서드를 지정하는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1319">A delegate that specifies a method to call.</span></span></param>
        <summary><span data-ttu-id="cc35c-1320">지정한 대리자에서 식별한 다른 응용 프로그램 도메인에 있는 코드를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1320">Executes the code in another application domain that is identified by the specified delegate.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1321">`callBackDelegate` 마샬링-by-값을 지정할 수 <xref:System.MarshalByRefObject>, 또는 <xref:System.ContextBoundObject>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1321">`callBackDelegate` can specify a marshal-by-value, <xref:System.MarshalByRefObject>, or <xref:System.ContextBoundObject>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1322">다음 예제에서는 정적을 사용 하 여 <xref:System.AppDomain.DoCallBack%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1322">The following sample demonstrates using a static <xref:System.AppDomain.DoCallBack%2A> method.</span></span>  
  
 [!code-cpp[AppDomain_DoCallBack#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DoCallBack/CPP/docallback_static.cpp#1)]
 [!code-csharp[AppDomain_DoCallBack#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DoCallBack/CS/docallback_static.cs#1)]
 [!code-vb[AppDomain_DoCallBack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DoCallBack/VB/docallback_static.vb#1)]  
  
 <span data-ttu-id="cc35c-1323">다음 샘플에서는 <xref:System.AppDomain.DoCallBack%2A> 값별로 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1323">The following sample demonstrates using the <xref:System.AppDomain.DoCallBack%2A> method by value.</span></span>  
  
 [!code-cpp[AppDomain_DoCallBack#2](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DoCallBack/CPP/docallback_byval.cpp#2)]
 [!code-csharp[AppDomain_DoCallBack#2](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DoCallBack/CS/docallback_byval.cs#2)]
 [!code-vb[AppDomain_DoCallBack#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DoCallBack/VB/docallback_byval.vb#2)]  
  
 <span data-ttu-id="cc35c-1324">다음 샘플에서는 <xref:System.AppDomain.DoCallBack%2A> 메서드를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1324">The following sample demonstrates using the <xref:System.AppDomain.DoCallBack%2A> method by reference.</span></span>  
  
 [!code-cpp[AppDomain_DoCallBack#3](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DoCallBack/CPP/docallback_byref.cpp#3)]
 [!code-csharp[AppDomain_DoCallBack#3](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DoCallBack/CS/docallback_byref.cs#3)]
 [!code-vb[AppDomain_DoCallBack#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DoCallBack/VB/docallback_byref.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1325"><paramref name="callBackDelegate" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1325"><paramref name="callBackDelegate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DomainManager">
      <MemberSignature Language="C#" Value="public AppDomainManager DomainManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AppDomainManager DomainManager" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.DomainManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomainManager As AppDomainManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AppDomainManager ^ DomainManager { AppDomainManager ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomainManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-1326">응용 프로그램 도메인이 초기화될 때 호스트에서 제공한 도메인 관리자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1326">Gets the domain manager that was provided by the host when the application domain was initialized.</span></span></summary>
        <value><span data-ttu-id="cc35c-1327">응용 프로그램 도메인이 초기화될 때 호스트에서 제공한 도메인 관리자를 나타내는 개체이거나, 도메인 관리자가 제공되지 않은 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1327">An object that represents the domain manager provided by the host when the application domain was initialized, or <see langword="null" /> if no domain manager was provided.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1328">공용 언어 런타임 (CLR)의 관리 되지 않는 호스트는 도메인 관리자를 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1328">An unmanaged host of the common language runtime (CLR) can provide a domain manager.</span></span> <span data-ttu-id="cc35c-1329">도메인 관리자는 새 응용 프로그램 도메인 초기화에 참여할 고와 같은 다른 관리자를 제공할 수는 <xref:System.Security.HostSecurityManager>, 응용 프로그램 도메인의 작업에 참여 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1329">The domain manager can participate in initializing the new application domain and supply other managers, such as a <xref:System.Security.HostSecurityManager>, that participate in the operations of the application domain.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-1330">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1330">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-1331">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1331">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DomainUnload">
      <MemberSignature Language="C#" Value="public event EventHandler DomainUnload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DomainUnload" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.DomainUnload" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DomainUnload As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ DomainUnload;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.DomainUnload</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-1332"><see cref="T:System.AppDomain" />이 언로드되려고 할 때 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1332">Occurs when an <see cref="T:System.AppDomain" /> is about to be unloaded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1333"><xref:System.EventHandler> 대리자이 이벤트는 응용 프로그램 도메인 로드 되기 전에 종료 동작을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1333">The <xref:System.EventHandler> delegate for this event can perform any termination activities before the application domain is unloaded.</span></span>  
  
 <span data-ttu-id="cc35c-1334">각 응용 프로그램 도메인에 로드 되지 않았을 때 처리를 수행 해야 하는이 이벤트에 대 한 이벤트 처리기를 등록 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1334">Each application domain that needs to perform processing when it is unloaded should register an event handler for this event.</span></span> <span data-ttu-id="cc35c-1335">공유 이벤트 처리기 해야 하지 때문에 사용할 수는 <xref:System.EventHandler> 대리자 언로드되고 도메인을 식별 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1335">A shared event handler should not be used, because the <xref:System.EventHandler> delegate does not identify the domain that is being unloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1336">기본 응용 프로그램 도메인에서이 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1336">This event is never raised in the default application domain.</span></span>  
  
 <span data-ttu-id="cc35c-1337">에 이벤트가 발생 하는 스레드에 대 한 가정을 만들지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1337">Do not make assumptions about the thread the event is raised on.</span></span> <span data-ttu-id="cc35c-1338">호출한 스레드가 아닌 다른 스레드에서 이벤트가 발생할 수 있습니다는 <xref:System.AppDomain.Unload%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1338">The event can be raised on a different thread than the one that called the <xref:System.AppDomain.Unload%2A> method.</span></span>  
  
 <span data-ttu-id="cc35c-1339">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1339">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DynamicDirectory">
      <MemberSignature Language="C#" Value="public string DynamicDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DynamicDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.DynamicDirectory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DynamicDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DynamicDirectory { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.DynamicDirectory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-1340">어셈블리 확인자에서 동적으로 만든 어셈블리를 조사하는 데 사용하는 디렉터리를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1340">Gets the directory that the assembly resolver uses to probe for dynamically created assemblies.</span></span></summary>
        <value><span data-ttu-id="cc35c-1341">어셈블리 확인자에서 동적으로 만든 어셈블리를 조사하는 데 사용하는 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1341">The directory that the assembly resolver uses to probe for dynamically created assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1342">동적 디렉터리를 설정 하려면 기본 디렉터리 경로를 할당는 <xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType> 의 속성은 <xref:System.AppDomainSetup> 새 응용 프로그램 도메인을 만드는 데 사용할 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1342">To set the dynamic directory, assign a base directory path to the <xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType> property of the <xref:System.AppDomainSetup> object that will be used to create the new application domain.</span></span> <span data-ttu-id="cc35c-1343">속성에 할당 하는 기본 디렉터리 경로 단순 이름인에 할당 하는 문자열의 해시 코드 하위 디렉터리를 추가 하 여 수정 되는 <xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType> 기본 디렉터리의 형식은 속성 *원래 경로* \\ *해시 코드*합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1343">The base directory path you assign to the property is modified by the addition of a subdirectory whose simple name is the hash code of the string you assign to the <xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType> property, so the format of the base directory is *original path*\\*hash code*.</span></span> <span data-ttu-id="cc35c-1344">동적 디렉터리에는이 기본 디렉터리의 하위 디렉터리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1344">The dynamic directory is a subdirectory of this base directory.</span></span> <span data-ttu-id="cc35c-1345">간단한 이름은의 값인는 <xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType> 속성, 해당 형식은입니다 *원래 경로*\\*해시 코드*\\*응용 프로그램 이름*합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1345">Its simple name is the value of the <xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType> property, so its format is *original path*\\*hash code*\\*application name*.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1346">다음 예제에서는 동적 어셈블리에 대 한 디렉터리와 응용 프로그램 도메인을 만듭니다, 그리고 동적 어셈블리를 내보내 및 동적 디렉터리에 저장 한 다음 새 응용 프로그램 도메인에 어셈블리를 로드 및 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1346">The following example creates an application domain with a directory for dynamic assemblies, emits a dynamic assembly and stores it in the dynamic directory, and then loads the assembly into the new application domain and uses it.</span></span>  
  
 <span data-ttu-id="cc35c-1347">이 예에서는 만듭니다는 <xref:System.AppDomainSetup> 개체 및 집합의 <xref:System.AppDomainSetup.ApplicationName%2A> 속성을 "예" 및 해당 <xref:System.AppDomainSetup.DynamicBase%2A> 속성을 "C:\DynamicAssemblyDir"입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1347">The example creates an <xref:System.AppDomainSetup> object and sets its <xref:System.AppDomainSetup.ApplicationName%2A> property to "Example" and its <xref:System.AppDomainSetup.DynamicBase%2A> property to "C:\DynamicAssemblyDir".</span></span> <span data-ttu-id="cc35c-1348">이 예제에서는 다음 표시는 <xref:System.AppDomainSetup.DynamicBase%2A> 원래 할당 된 경로의 하위 디렉터리로 응용 프로그램 이름이의 해시 코드를 추가 된 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1348">The example then displays the <xref:System.AppDomainSetup.DynamicBase%2A> property, to show that the hash code of the application name has been appended as a subdirectory of the path that was originally assigned.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1349">이 예제의 기본 디렉터리는 예제 응용 프로그램에 대 한 검색 경로 이외의 되도록 만들어졌습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1349">The base directory in this example is intended to be outside the probing path for the example application.</span></span> <span data-ttu-id="cc35c-1350">다른 위치에 예제를 컴파일하려면 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1350">Be sure to compile the example in a different location.</span></span> <span data-ttu-id="cc35c-1351">기본 디렉터리 및 모든 하위 디렉터리는 예제를 실행할 때마다 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1351">Delete the base directory and all its subdirectories each time you run the example.</span></span>  
  
 <span data-ttu-id="cc35c-1352">이 예에서는 새 응용 프로그램 도메인을 만듭니다를 사용 하 여 <xref:System.AppDomainSetup> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1352">The example creates a new application domain, using the <xref:System.AppDomainSetup> object.</span></span> <span data-ttu-id="cc35c-1353">이 예제에서는 사용 된 <xref:System.AppDomain.DynamicDirectory%2A> 디렉터리를 만들 수 있도록 디렉터리의 이름을 검색 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1353">The example uses the <xref:System.AppDomain.DynamicDirectory%2A> property to retrieve the name of the directory, so it can create the directory.</span></span> <span data-ttu-id="cc35c-1354">(이 예제에서는 손쉽게 만들 수는 디렉터리 미리 원래 경로, 응용 프로그램 이름 및 응용 프로그램의 해시 코드를 연결 하 여.)</span><span class="sxs-lookup"><span data-stu-id="cc35c-1354">(The example could just as easily create the directory beforehand by concatenating the original path, the hash code of the application name, and the application name.)</span></span>  
  
 <span data-ttu-id="cc35c-1355">이 예제에는 `GenerateDynamicAssembly` 명명 된 어셈블리를 내보내고 메서드 `DynamicHelloWorld.dll` 새 응용 프로그램 도메인의 동적 디렉터리에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1355">The example has a `GenerateDynamicAssembly` method that emits an assembly named `DynamicHelloWorld.dll` and stores it in the new application domain's dynamic directory.</span></span> <span data-ttu-id="cc35c-1356">동적 어셈블리 유형에서는 포함 되어 `HelloWorld`, 하는 정적 메서드 (`Shared` Visual Basic의에서 메서드) 라는 `HelloFromAD`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1356">The dynamic assembly contains one type, `HelloWorld`, that has a static method (`Shared` method in Visual Basic) named `HelloFromAD`.</span></span> <span data-ttu-id="cc35c-1357">이 메서드를 호출 응용 프로그램 도메인의 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1357">Calling this method displays the name of the application domain.</span></span>  
  
 <span data-ttu-id="cc35c-1358">`Example` 클래스에서 파생 <xref:System.MarshalByRefObject>예제에서는 새 응용 프로그램 도메인 및 호출에서 클래스의 인스턴스를 만들 수 있으므로 해당 `Test` 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1358">The `Example` class derives from <xref:System.MarshalByRefObject>, so the example can create an instance of the class in the new application domain and call its `Test` method.</span></span> <span data-ttu-id="cc35c-1359">`Test` 메서드 표시 이름을 사용 하 여 동적 어셈블리를 로드 하 고 정적 호출 `HelloFromAD` 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1359">The `Test` method loads the dynamic assembly by its display name and calls the static `HelloFromAD` method.</span></span>  
  
 <span data-ttu-id="cc35c-1360">이라는 어셈블리에 대 한 코드를 작성 하 여 일반 검색 경로 후 동적 디렉터리 검색 됩니다 표시할 수 있습니다 `DynamicHelloWorld.dll` 및이 예제와 동일한 디렉터리에 컴파일입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1360">You can show that the dynamic directory is searched after the normal probing paths by writing code for an assembly named `DynamicHelloWorld.dll` and compiling it in the same directory as this example.</span></span> <span data-ttu-id="cc35c-1361">어셈블리에는 라는 클래스를 사용 해야 합니다. `HelloWorld` 라는 정적 메서드가 있는 `HelloFromAD`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1361">The assembly must have a class named `HelloWorld` with a static method named `HelloFromAD`.</span></span> <span data-ttu-id="cc35c-1362">이 메서드는 예제;에 있는 것과 동일한 기능을 제공 하지 않아도 콘솔에 문자열을 표시 하기만 하면 것입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1362">This method does not have to have the same functionality as the one in the example; it can simply display a string to the console.</span></span> <span data-ttu-id="cc35c-1363">어셈블리 있어야는 <xref:System.Reflection.AssemblyVersionAttribute> 특성을 해당 버전을 1.0.0.0으로 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1363">The assembly must also have an <xref:System.Reflection.AssemblyVersionAttribute> attribute that sets its version to 1.0.0.0.</span></span> <span data-ttu-id="cc35c-1364">예제를 실행 하는 경우 현재 디렉터리에 컴파일된 어셈블리가 동적 디렉터리를 검색 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1364">When you run the example, the assembly you compiled in the current directory is found before the dynamic directory is searched.</span></span>  
  
 [!code-cpp[ADDynamicBase#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADDynamicBase/CPP/addynamicbase.cpp#1)]
 [!code-csharp[ADDynamicBase#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADDynamicBase/CS/addynamicbase.cs#1)]
 [!code-vb[ADDynamicBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADDynamicBase/VB/addynamicbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1365">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1365">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1366">경로 정보에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1366">for access to the path information.</span></span> <span data-ttu-id="cc35c-1367">연관된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1367">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Evidence">
      <MemberSignature Language="C#" Value="public System.Security.Policy.Evidence Evidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence Evidence" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.Evidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Evidence As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Policy::Evidence ^ Evidence { System::Security::Policy::Evidence ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.IEvidenceFactory.Evidence</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-1368">이 응용 프로그램 도메인과 관련된 <see cref="T:System.Security.Policy.Evidence" />를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1368">Gets the <see cref="T:System.Security.Policy.Evidence" /> associated with this application domain.</span></span></summary>
        <value><span data-ttu-id="cc35c-1369">이 응용 프로그램 도메인과 관련된 증거입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1369">The evidence associated with this application domain.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1370">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1370">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1371">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1371">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1372">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1372">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span> <span data-ttu-id="cc35c-1373">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1373">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteAssembly">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc35c-1374">지정한 파일에 포함된 어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1374">Executes the assembly contained in the specified file.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ExecuteAssembly(string assemblyFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ExecuteAssembly(System::String ^ assemblyFile);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ExecuteAssembly(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="cc35c-1375">실행할 어셈블리가 포함된 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1375">The name of the file that contains the assembly to execute.</span></span></param>
        <summary><span data-ttu-id="cc35c-1376">지정한 파일에 포함된 어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1376">Executes the assembly contained in the specified file.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1377">어셈블리의 진입점에서 반환한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1377">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1378">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1378">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="cc35c-1379">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1379">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="cc35c-1380">이 메서드를 사용 하 여 어셈블리 로드는 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1380">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="cc35c-1381">사용 하 여 어셈블리를 실행할 수도 있습니다는 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드를 사용 하 여 어셈블리를 로드 하는 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1381">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
 <span data-ttu-id="cc35c-1382">만들려는 <xref:System.AppDomain> 로드 하 고 실행을 사용 하 여는 <xref:System.AppDomain.CreateDomain%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1382">To create the <xref:System.AppDomain> to load and execute, use the <xref:System.AppDomain.CreateDomain%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1383">다음 예제에서는 오버 로드 중 하나를 사용 하 여 <xref:System.AppDomain.ExecuteAssembly%2A> 두 개의 서로 다른 도메인에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1383">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1384"><paramref name="assemblyFile" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1384"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-1385"><paramref name="assemblyFile" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1385"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-1386"><paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1386"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1387">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1387">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1388">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1388">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1389">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1389">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1390">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1390">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-1391">지정된 어셈블리에 진입점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1391">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1392">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1392">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-1393">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1393">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1394">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1394">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cc35c-1395">콘솔 응용 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1395">to execute a console application.</span></span> <span data-ttu-id="cc35c-1396">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1396">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, assemblySecurity As Evidence) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ExecuteAssembly(System::String ^ assemblyFile, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="cc35c-1397">실행할 어셈블리가 포함된 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1397">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="cc35c-1398">어셈블리 로드에 사용할 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1398">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="cc35c-1399">지정한 증명 정보를 사용하여 지정한 파일에 포함된 어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1399">Executes the assembly contained in the specified file, using the specified evidence.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1400">어셈블리의 진입점에서 반환한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1400">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1401">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1401">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="cc35c-1402"><xref:System.AppDomain.ExecuteAssembly%2A> 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만들지 않습니다을 진입점 메서드 새 스레드에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1402">The <xref:System.AppDomain.ExecuteAssembly%2A> method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="cc35c-1403">이 메서드를 사용 하 여 어셈블리 로드는 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1403">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="cc35c-1404">사용 하 여 어셈블리를 실행할 수도 있습니다는 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드를 사용 하 여 어셈블리를 로드 하는 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1404">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1405">다음 예제에서는 오버 로드 중 하나를 사용 하 여 <xref:System.AppDomain.ExecuteAssembly%2A> 두 개의 서로 다른 도메인에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1405">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1406"><paramref name="assemblyFile" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1406"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-1407"><paramref name="assemblyFile" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1407"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-1408"><paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1408"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1409">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1409">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1410">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1410">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1411">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1411">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1412">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1412">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-1413">지정된 어셈블리에 진입점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1413">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1414">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1414">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1415">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1415">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1416">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1416">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-1417">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1417">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1418">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1418">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cc35c-1419">콘솔 응용 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1419">to execute a console application.</span></span> <span data-ttu-id="cc35c-1420">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1420">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssembly(string assemblyFile, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, args As String()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssembly(System::String ^ assemblyFile, cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="cc35c-1421">실행할 어셈블리가 포함된 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1421">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-1422">어셈블리의 진입점에 대한 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1422">The arguments to the entry point of the assembly.</span></span></param>
        <summary><span data-ttu-id="cc35c-1423">지정한 인수를 사용하여 지정한 파일에 포함된 어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1423">Executes the assembly contained in the specified file, using the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1424">어셈블리의 진입점에서 반환된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1424">The value that is returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1425">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1425">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="cc35c-1426">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1426">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="cc35c-1427">이 메서드를 사용 하 여 어셈블리 로드는 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1427">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="cc35c-1428">사용 하 여 어셈블리를 실행할 수도 있습니다는 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드를 사용 하 여 어셈블리를 로드 하는 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1428">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1429">다음 예제에서는 오버 로드 중 하나를 사용 하 여 <xref:System.AppDomain.ExecuteAssembly%2A> 두 개의 서로 다른 도메인에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1429">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1430"><paramref name="assemblyFile" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1430"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-1431"><paramref name="assemblyFile" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1431"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-1432"><paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1432"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1433">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1433">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1434"><paramref name="assemblyFile" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1434"><paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1435">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1435">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1436">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1436">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-1437">지정된 어셈블리에 진입점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1437">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1438">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1438">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-1439">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1439">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1440">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1440">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cc35c-1441">콘솔 응용 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1441">to execute a console application.</span></span> <span data-ttu-id="cc35c-1442">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1442">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, assemblySecurity As Evidence, args As String()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ExecuteAssembly(System::String ^ assemblyFile, System::Security::Policy::Evidence ^ assemblySecurity, cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="cc35c-1443">실행할 어셈블리가 포함된 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1443">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="cc35c-1444">어셈블리에 제공된 증거입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1444">The supplied evidence for the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-1445">어셈블리의 진입점에 대한 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1445">The arguments to the entry point of the assembly.</span></span></param>
        <summary><span data-ttu-id="cc35c-1446">지정한 증명 정보 및 인수를 사용하여 지정한 파일에 포함된 어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1446">Executes the assembly contained in the specified file, using the specified evidence and arguments.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1447">어셈블리의 진입점에서 반환한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1447">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1448">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1448">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="cc35c-1449">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1449">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="cc35c-1450">이 메서드를 사용 하 여 어셈블리 로드는 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1450">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="cc35c-1451">사용 하 여 어셈블리를 실행할 수도 있습니다는 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드를 사용 하 여 어셈블리를 로드 하는 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1451">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1452">다음 예제에서는 오버 로드 중 하나를 사용 하 여 <xref:System.AppDomain.ExecuteAssembly%2A> 두 개의 서로 다른 도메인에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1452">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1453"><paramref name="assemblyFile" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1453"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-1454"><paramref name="assemblyFile" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1454"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-1455"><paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1455"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1456">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1456">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1457">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1457">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1458">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1458">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1459">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1459">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="cc35c-1460"><paramref name="assemblySecurity" />이 <see langword="null" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1460"><paramref name="assemblySecurity" /> is not <see langword="null" />.</span></span> <span data-ttu-id="cc35c-1461">레거시 CAS 정책을 사용하지 않을 때는 <paramref name="assemblySecurity" />는 <see langword="null" />이 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1461">When legacy CAS policy is not enabled, <paramref name="assemblySecurity" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-1462">지정된 어셈블리에 진입점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1462">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1463">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1463">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1464">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1464">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1465">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1465">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-1466">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1466">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1467">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1467">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cc35c-1468">콘솔 응용 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1468">to execute a console application.</span></span> <span data-ttu-id="cc35c-1469">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1469">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, string[] args, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssembly(string assemblyFile, string[] args, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, args As String(), hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssembly(System::String ^ assemblyFile, cli::array &lt;System::String ^&gt; ^ args, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="args" Type="System.String[]" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="cc35c-1470">실행할 어셈블리가 포함된 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1470">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-1471">어셈블리의 진입점에 대한 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1471">The arguments to the entry point of the assembly.</span></span></param>
        <param name="hashValue"><span data-ttu-id="cc35c-1472">계산된 해시 코드의 값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1472">Represents the value of the computed hash code.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="cc35c-1473">어셈블리 매니페스트에 사용되는 해시 알고리즘을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1473">Represents the hash algorithm used by the assembly manifest.</span></span></param>
        <summary><span data-ttu-id="cc35c-1474">지정한 인수, 해시 값 및 해시 알고리즘을 사용하여 지정한 파일에 포함된 어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1474">Executes the assembly contained in the specified file, using the specified arguments, hash value, and hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1475">어셈블리의 진입점에서 반환된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1475">The value that is returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1476">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1476">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="cc35c-1477">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1477">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="cc35c-1478">이 메서드를 사용 하 여 어셈블리 로드는 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1478">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="cc35c-1479">사용 하 여 어셈블리를 실행할 수도 있습니다는 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드를 사용 하 여 어셈블리를 로드 하는 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1479">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1480">다음 예제에서는 오버 로드 중 하나를 사용 하 여 <xref:System.AppDomain.ExecuteAssembly%2A> 두 개의 서로 다른 도메인에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1480">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1481"><paramref name="assemblyFile" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1481"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-1482"><paramref name="assemblyFile" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1482"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-1483"><paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1483"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1484">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1484">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1485"><paramref name="assemblyFile" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1485"><paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1486">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1486">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1487">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1487">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-1488">지정된 어셈블리에 진입점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1488">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1489">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1489">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-1490">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1490">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1491">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1491">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cc35c-1492">콘솔 응용 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1492">to execute a console application.</span></span> <span data-ttu-id="cc35c-1493">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1493">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity, string[] args, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity, string[] args, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, assemblySecurity As Evidence, args As String(), hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssembly(System::String ^ assemblyFile, System::Security::Policy::Evidence ^ assemblySecurity, cli::array &lt;System::String ^&gt; ^ args, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
        <Parameter Name="args" Type="System.String[]" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="cc35c-1494">실행할 어셈블리가 포함된 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1494">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="cc35c-1495">어셈블리에 제공된 증거입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1495">The supplied evidence for the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-1496">어셈블리의 진입점에 대한 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1496">The arguments to the entry point of the assembly.</span></span></param>
        <param name="hashValue"><span data-ttu-id="cc35c-1497">계산된 해시 코드의 값을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1497">Represents the value of the computed hash code.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="cc35c-1498">어셈블리 매니페스트에 사용되는 해시 알고리즘을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1498">Represents the hash algorithm used by the assembly manifest.</span></span></param>
        <summary><span data-ttu-id="cc35c-1499">지정한 증명 정보, 인수, 해시 값 및 해시 알고리즘을 사용하여 지정한 파일에 포함된 어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1499">Executes the assembly contained in the specified file, using the specified evidence, arguments, hash value, and hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1500">어셈블리의 진입점에서 반환한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1500">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1501">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1501">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="cc35c-1502">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1502">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="cc35c-1503">이 메서드를 사용 하 여 어셈블리 로드는 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1503">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="cc35c-1504">사용 하 여 어셈블리를 실행할 수도 있습니다는 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드를 사용 하 여 어셈블리를 로드 하는 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1504">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1505">다음 샘플에서는 오버 로드 중 하나를 사용 하 여 보여 줍니다. <xref:System.AppDomain.ExecuteAssembly%2A> 두 개의 서로 다른 도메인에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1505">Thefollowing sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1506"><paramref name="assemblyFile" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1506"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-1507"><paramref name="assemblyFile" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1507"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-1508"><paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1508"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1509">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1509">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1510">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1510">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1511">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1511">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1512">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1512">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="cc35c-1513"><paramref name="assemblySecurity" />이 <see langword="null" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1513"><paramref name="assemblySecurity" /> is not <see langword="null" />.</span></span> <span data-ttu-id="cc35c-1514">레거시 CAS 정책을 사용하지 않을 때는 <paramref name="assemblySecurity" />는 <see langword="null" />이 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1514">When legacy CAS policy is not enabled, <paramref name="assemblySecurity" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-1515">지정된 어셈블리에 진입점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1515">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1516">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1516">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1517">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1517">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1518">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1518">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-1519">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1519">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1520">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1520">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cc35c-1521">콘솔 응용 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1521">to execute a console application.</span></span> <span data-ttu-id="cc35c-1522">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1522">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteAssemblyByName">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc35c-1523">어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1523">Executes an assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssemblyByName (assemblyName As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::String ^ assemblyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-1524">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1524">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-1525"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1525">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <summary><span data-ttu-id="cc35c-1526">표시 이름이 지정된 어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1526">Executes an assembly given its display name.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1527">어셈블리의 진입점에서 반환한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1527">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1528"><xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드 비슷한 기능을 제공 된 <xref:System.AppDomain.ExecuteAssembly%2A> 메서드를 표시 이름으로 어셈블리를 지정 하지만 또는 <xref:System.Reflection.AssemblyName> 아닌 파일 위치.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1528">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="cc35c-1529">따라서 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 여 어셈블리를 로드는 <xref:System.Reflection.Assembly.Load%2A> 메서드 대신는 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1529">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="cc35c-1530">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1530">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="cc35c-1531">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1531">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="cc35c-1532">만들려는 <xref:System.AppDomain> 로드 하 고 실행을 사용 하 여는 <xref:System.AppDomain.CreateDomain%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1532">To create the <xref:System.AppDomain> to load and execute, use the <xref:System.AppDomain.CreateDomain%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1533"><paramref name="assemblyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1533"><paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cc35c-1534"><paramref name="assemblyName" />으로 지정한 어셈블리를 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1534">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="cc35c-1535"><paramref name="assemblyName" />으로 지정한 어셈블리가 올바른 어셈블리가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1535">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1536">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1536">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1537">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1537">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1538">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1538">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1539"><paramref name="assemblyName" />으로 지정한 어셈블리를 찾았으나 로드할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1539">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-1540">지정된 어셈블리에 진입점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1540">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1541">파일 또는 경로 자체의 정보에 액세스 하 여 표시 이름을 리디렉션하는 경로 대 한 디렉터리에서 읽기에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1541">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="cc35c-1542">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1542">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1543">표시 이름 URL로 리디렉션되면 웹 사이트에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1543">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cc35c-1544">콘솔 응용 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1544">to execute a console application.</span></span> <span data-ttu-id="cc35c-1545">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1545">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <altmember cref="T:System.Reflection.AssemblyName" />
        <altmember cref="M:System.Reflection.Assembly.Load(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (System.Reflection.AssemblyName assemblyName, params string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(class System.Reflection.AssemblyName assemblyName, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::Reflection::AssemblyName ^ assemblyName, ... cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-1546">어셈블리의 이름을 나타내는 <see cref="T:System.Reflection.AssemblyName" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1546">An <see cref="T:System.Reflection.AssemblyName" /> object representing the name of the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-1547">프로세스를 시작할 때 전달할 명령줄 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1547">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="cc35c-1548">지정한 인수를 사용하여 <see cref="T:System.Reflection.AssemblyName" />이 지정된 어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1548">Executes the assembly given an <see cref="T:System.Reflection.AssemblyName" />, using the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1549">어셈블리의 진입점에서 반환된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1549">The value that is returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1550"><xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드 비슷한 기능을 제공 된 <xref:System.AppDomain.ExecuteAssembly%2A> 메서드를 표시 이름으로 어셈블리를 지정 하지만 또는 <xref:System.Reflection.AssemblyName> 아닌 파일 위치.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1550">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="cc35c-1551">따라서 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 여 어셈블리를 로드는 <xref:System.Reflection.Assembly.Load%2A> 메서드 대신는 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1551">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="cc35c-1552">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1552">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="cc35c-1553">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1553">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cc35c-1554"><paramref name="assemblyName" />으로 지정한 어셈블리를 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1554">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1555"><paramref name="assemblyName" />으로 지정한 어셈블리를 찾았으나 로드할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1555">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="cc35c-1556"><paramref name="assemblyName" />으로 지정한 어셈블리가 올바른 어셈블리가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1556">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1557">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1557">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1558"><paramref name="assemblyName" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1558"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1559">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1559">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-1560">지정된 어셈블리에 진입점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1560">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1561">파일 또는 경로 자체의 정보에 액세스 하 여 표시 이름을 리디렉션하는 경로 대 한 디렉터리에서 읽기에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1561">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="cc35c-1562">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1562">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1563">표시 이름 URL로 리디렉션되면 웹 사이트에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1563">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cc35c-1564">콘솔 응용 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1564">to execute a console application.</span></span> <span data-ttu-id="cc35c-1565">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1565">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (string assemblyName, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(string assemblyName, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssemblyByName (assemblyName As String, assemblySecurity As Evidence) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::String ^ assemblyName, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-1566">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1566">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-1567"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1567">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="cc35c-1568">어셈블리 로드에 사용할 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1568">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="cc35c-1569">지정한 증명 정보를 사용하여 표시 이름이 지정된 어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1569">Executes an assembly given its display name, using the specified evidence.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1570">어셈블리의 진입점에서 반환한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1570">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1571"><xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드 비슷한 기능을 제공 된 <xref:System.AppDomain.ExecuteAssembly%2A> 메서드를 표시 이름으로 어셈블리를 지정 하지만 또는 <xref:System.Reflection.AssemblyName> 아닌 파일 위치.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1571">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="cc35c-1572">따라서 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 여 어셈블리를 로드는 <xref:System.Reflection.Assembly.Load%2A> 메서드 대신는 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1572">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="cc35c-1573">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1573">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="cc35c-1574"><xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만들지 않습니다을 진입점 메서드 새 스레드에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1574">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1575">사용 하는 경우는 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드는 <xref:System.Security.Policy.Evidence> 매개 변수, 증명 정보가 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1575">When you use the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="cc35c-1576">에 대 한 인수로 제공 된 증명 정보를 가지는 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드는 로더에 의해 제공 된 증명 정보를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1576">Pieces of evidence supplied as an argument to the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1577"><paramref name="assemblyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1577"><paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cc35c-1578"><paramref name="assemblyName" />으로 지정한 어셈블리를 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1578">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1579"><paramref name="assemblyName" />으로 지정한 어셈블리를 찾았으나 로드할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1579">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="cc35c-1580"><paramref name="assemblyName" />으로 지정한 어셈블리가 올바른 어셈블리가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1580">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1581">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1581">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1582">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1582">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1583">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1583">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-1584">지정된 어셈블리에 진입점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1584">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1585">파일 또는 경로 자체의 정보에 액세스 하 여 표시 이름을 리디렉션하는 경로 대 한 디렉터리에서 읽기에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1585">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="cc35c-1586">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1586">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1587">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1587">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1588">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1588">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1589">표시 이름 URL로 리디렉션되면 웹 사이트에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1589">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cc35c-1590">콘솔 응용 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1590">to execute a console application.</span></span> <span data-ttu-id="cc35c-1591">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1591">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (string assemblyName, params string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(string assemblyName, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssemblyByName (assemblyName As String, ParamArray args As String()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::String ^ assemblyName, ... cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-1592">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1592">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-1593"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1593">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-1594">프로세스를 시작할 때 전달할 명령줄 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1594">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="cc35c-1595">지정한 인수를 사용하여 표시 이름이 지정된 어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1595">Executes the assembly given its display name, using the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1596">어셈블리의 진입점에서 반환된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1596">The value that is returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1597"><xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드 비슷한 기능을 제공 된 <xref:System.AppDomain.ExecuteAssembly%2A> 메서드를 표시 이름으로 어셈블리를 지정 하지만 또는 <xref:System.Reflection.AssemblyName> 아닌 파일 위치.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1597">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="cc35c-1598">따라서 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 여 어셈블리를 로드는 <xref:System.Reflection.Assembly.Load%2A> 메서드 대신는 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1598">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="cc35c-1599">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1599">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="cc35c-1600">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1600">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1601"><paramref name="assemblyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1601"><paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cc35c-1602"><paramref name="assemblyName" />으로 지정한 어셈블리를 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1602">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1603"><paramref name="assemblyName" />으로 지정한 어셈블리를 찾았으나 로드할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1603">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="cc35c-1604"><paramref name="assemblyName" />으로 지정한 어셈블리가 올바른 어셈블리가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1604">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1605">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1605">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1606"><paramref name="assemblyName" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1606"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1607">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1607">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-1608">지정된 어셈블리에 진입점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1608">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1609">파일 또는 경로 자체의 정보에 액세스 하 여 표시 이름을 리디렉션하는 경로 대 한 디렉터리에서 읽기에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1609">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="cc35c-1610">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1610">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1611">표시 이름 URL로 리디렉션되면 웹 사이트에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1611">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cc35c-1612">콘솔 응용 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1612">to execute a console application.</span></span> <span data-ttu-id="cc35c-1613">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1613">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (System.Reflection.AssemblyName assemblyName, System.Security.Policy.Evidence assemblySecurity, params string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(class System.Reflection.AssemblyName assemblyName, class System.Security.Policy.Evidence assemblySecurity, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::Reflection::AssemblyName ^ assemblyName, System::Security::Policy::Evidence ^ assemblySecurity, ... cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-1614">어셈블리의 이름을 나타내는 <see cref="T:System.Reflection.AssemblyName" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1614">An <see cref="T:System.Reflection.AssemblyName" /> object representing the name of the assembly.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="cc35c-1615">어셈블리 로드에 사용할 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1615">Evidence for loading the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-1616">프로세스를 시작할 때 전달할 명령줄 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1616">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="cc35c-1617">지정한 증거와 인수를 사용하여 <see cref="T:System.Reflection.AssemblyName" />이 지정된 어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1617">Executes the assembly given an <see cref="T:System.Reflection.AssemblyName" />, using the specified evidence and arguments.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1618">어셈블리의 진입점에서 반환한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1618">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1619"><xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드 비슷한 기능을 제공 된 <xref:System.AppDomain.ExecuteAssembly%2A> 메서드를 표시 이름으로 어셈블리를 지정 하지만 또는 <xref:System.Reflection.AssemblyName> 아닌 파일 위치.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1619">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="cc35c-1620">따라서 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 여 어셈블리를 로드는 <xref:System.Reflection.Assembly.Load%2A> 메서드 대신는 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1620">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="cc35c-1621">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1621">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="cc35c-1622">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1622">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1623">사용 하는 경우는 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드는 <xref:System.Security.Policy.Evidence> 매개 변수, 증명 정보가 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1623">When you use the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="cc35c-1624">에 대 한 인수로 제공 된 증명 정보를 가지는 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드는 로더에 의해 제공 된 증명 정보를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1624">Pieces of evidence supplied as an argument to the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cc35c-1625"><paramref name="assemblyName" />으로 지정한 어셈블리를 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1625">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1626"><paramref name="assemblyName" />으로 지정한 어셈블리를 찾았으나 로드할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1626">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="cc35c-1627"><paramref name="assemblyName" />으로 지정한 어셈블리가 올바른 어셈블리가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1627">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1628">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1628">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1629">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1629">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1630">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1630">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="cc35c-1631"><paramref name="assemblySecurity" />이 <see langword="null" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1631"><paramref name="assemblySecurity" /> is not <see langword="null" />.</span></span> <span data-ttu-id="cc35c-1632">레거시 CAS 정책을 사용하지 않을 때는 <paramref name="assemblySecurity" />는 <see langword="null" />이 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1632">When legacy CAS policy is not enabled, <paramref name="assemblySecurity" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-1633">지정된 어셈블리에 진입점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1633">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1634">파일 또는 경로 자체의 정보에 액세스 하 여 표시 이름을 리디렉션하는 경로 대 한 디렉터리에서 읽기에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1634">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="cc35c-1635">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1635">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1636">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1636">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1637">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1637">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1638">표시 이름 URL로 리디렉션되면 웹 사이트에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1638">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cc35c-1639">콘솔 응용 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1639">to execute a console application.</span></span> <span data-ttu-id="cc35c-1640">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1640">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (string assemblyName, System.Security.Policy.Evidence assemblySecurity, params string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(string assemblyName, class System.Security.Policy.Evidence assemblySecurity, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssemblyByName (assemblyName As String, assemblySecurity As Evidence, ParamArray args As String()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::String ^ assemblyName, System::Security::Policy::Evidence ^ assemblySecurity, ... cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="cc35c-1641">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1641">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-1642"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1642">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="cc35c-1643">어셈블리 로드에 사용할 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1643">Evidence for loading the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="cc35c-1644">프로세스를 시작할 때 전달할 명령줄 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1644">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="cc35c-1645">지정한 증명 정보와 인수를 사용하여 표시 이름이 지정된 어셈블리를 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1645">Executes the assembly given its display name, using the specified evidence and arguments.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1646">어셈블리의 진입점에서 반환한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1646">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1647"><xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드 비슷한 기능을 제공 된 <xref:System.AppDomain.ExecuteAssembly%2A> 메서드를 표시 이름으로 어셈블리를 지정 하지만 또는 <xref:System.Reflection.AssemblyName> 아닌 파일 위치.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1647">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="cc35c-1648">따라서 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 여 어셈블리를 로드는 <xref:System.Reflection.Assembly.Load%2A> 메서드 대신는 <xref:System.Reflection.Assembly.LoadFile%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1648">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="cc35c-1649">어셈블리는.NET Framework 헤더에 지정 된 진입점에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1649">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="cc35c-1650">이 메서드는 새 프로세스 또는 응용 프로그램 도메인을 만듭니까 및 진입점 메서드 새 스레드에서 실행 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1650">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1651">사용 하는 경우는 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드는 <xref:System.Security.Policy.Evidence> 매개 변수, 증명 정보가 병합 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1651">When you use the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="cc35c-1652">에 대 한 인수로 제공 된 증명 정보를 가지는 <xref:System.AppDomain.ExecuteAssemblyByName%2A> 메서드는 로더에 의해 제공 된 증명 정보를 대체 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1652">Pieces of evidence supplied as an argument to the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1653"><paramref name="assemblyName" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1653"><paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="cc35c-1654"><paramref name="assemblyName" />으로 지정한 어셈블리를 찾을 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1654">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1655"><paramref name="assemblyName" />으로 지정한 어셈블리를 찾았으나 로드할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1655">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="cc35c-1656"><paramref name="assemblyName" />으로 지정한 어셈블리가 올바른 어셈블리가 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1656">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1657">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1657">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1658">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1658">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1659">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1659">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="cc35c-1660"><paramref name="assemblySecurity" />이 <see langword="null" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1660"><paramref name="assemblySecurity" /> is not <see langword="null" />.</span></span> <span data-ttu-id="cc35c-1661">레거시 CAS 정책을 사용하지 않을 때는 <paramref name="assemblySecurity" />는 <see langword="null" />이 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1661">When legacy CAS policy is not enabled, <paramref name="assemblySecurity" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="cc35c-1662">지정된 어셈블리에 진입점이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1662">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1663">파일 또는 경로 자체의 정보에 액세스 하 여 표시 이름을 리디렉션하는 경로 대 한 디렉터리에서 읽기에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1663">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="cc35c-1664">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1664">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1665">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1665">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1666">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1666">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1667">표시 이름 URL로 리디렉션되면 웹 사이트에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1667">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="cc35c-1668">콘솔 응용 프로그램을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1668">to execute a console application.</span></span> <span data-ttu-id="cc35c-1669">연관된 열거형: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1669">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="FirstChanceException">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt; FirstChanceException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt; FirstChanceException" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.FirstChanceException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FirstChanceException As EventHandler(Of FirstChanceExceptionEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Runtime::ExceptionServices::FirstChanceExceptionEventArgs ^&gt; ^ FirstChanceException;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-1670">응용 프로그램 도메인에서 런타임이 예외 처리기에 대한 호출 스택을 검색하기 전에 관리 코드에서 예외가 throw될 경우 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1670">Occurs when an exception is thrown in managed code, before the runtime searches the call stack for an exception handler in the application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1671">이 이벤트는 알림만 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1671">This event is only a notification.</span></span> <span data-ttu-id="cc35c-1672">이 이벤트를 처리 해도 예외를 처리 하거나 후속 예외 어떤 식으로든에서 처리 영향을 주지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1672">Handling this event does not handle the exception or affect subsequent exception handling in any way.</span></span> <span data-ttu-id="cc35c-1673">이벤트가 발생 하 고 이벤트 처리기가 호출 된 후에 공용 언어 런타임 (CLR) 예외에 대 한 처리기를 검색 하기 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1673">After the event has been raised and event handlers have been invoked, the common language runtime (CLR) begins to search for a handler for the exception.</span></span> <span data-ttu-id="cc35c-1674"><xref:System.AppDomain.FirstChanceException> 관리 되는 모든 예외를 검사 하는 첫 번째 기회에 응용 프로그램 도메인을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1674"><xref:System.AppDomain.FirstChanceException> provides the application domain with a first chance to examine any managed exception.</span></span>  
  
 <span data-ttu-id="cc35c-1675">응용 프로그램 도메인 별로 이벤트를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1675">The event can be handled per application domain.</span></span> <span data-ttu-id="cc35c-1676">스레드를 통과 하면 여러 응용 프로그램 도메인을 통해 호출을 실행 하는 동안 CLR에서 해당 응용 프로그램 도메인에 일치 하는 예외 처리기에 대 한 검색을 시작 하기 전에 이벤트 처리기를 등록 된 각 응용 프로그램 도메인에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1676">If a thread passes through multiple application domains while executing a call, the event is raised in each application domain that has registered an event handler, before the CLR begins searching for a matching exception handler in that application domain.</span></span> <span data-ttu-id="cc35c-1677">이벤트 처리 된 후 해당 응용 프로그램 도메인에 일치 하는 예외 처리기에 대 한 검색이 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1677">After the event has been handled, a search is made for a matching exception handler in that application domain.</span></span> <span data-ttu-id="cc35c-1678">검색 된 항목이 없는 경우 다음 응용 프로그램 도메인에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1678">If none is found, the event is raised in the next application domain.</span></span>  
  
 <span data-ttu-id="cc35c-1679">에 대 한 처리기를 이벤트 발생 하는 모든 예외를 처리 해야 합니다는 <xref:System.AppDomain.FirstChanceException> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1679">You must handle all exceptions that occur in the event handler for the <xref:System.AppDomain.FirstChanceException> event.</span></span> <span data-ttu-id="cc35c-1680">그렇지 않으면 <xref:System.AppDomain.FirstChanceException> 이 재귀적으로 발생된 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1680">Otherwise, <xref:System.AppDomain.FirstChanceException> is raised recursively.</span></span> <span data-ttu-id="cc35c-1681">이 스택 오버플로 및 응용 프로그램이 종료 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1681">This could result in a stack overflow and termination of the application.</span></span> <span data-ttu-id="cc35c-1682">메모리 부족 또는 스택 오버플로와 같은 인프라 관련 예외 예외 알림을 처리 되는 동안 가상 컴퓨터에 영향을 주지 않도록 하기 위해 제약이 있는 실행 영역 (Cer)으로이 이벤트에 대 한 이벤트 처리기를 구현 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1682">We recommend that you implement event handlers for this event as constrained execution regions (CERs), to keep infrastructure-related exceptions such as out-of-memory or stack overflow from affecting the virtual machine while the exception notification is being processed.</span></span>  
  
 <span data-ttu-id="cc35c-1683">이벤트 처리기가 보안에 중요 한 및 하지 않는 한 손상 액세스 위반과 같이 프로세스 상태를 나타내는 예외에 대 한이 이벤트는 <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1683">This event is not raised for exceptions that indicate corruption of process state, such as access violations, unless the event handler is security-critical and has the <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute.</span></span>  
  
 <span data-ttu-id="cc35c-1684">스레드 중단 알림 이벤트가이 처리 되는 동안 일시 중단 하는 공용 언어 런타임.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1684">The common language runtime suspends thread aborts while this notification event is being handled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1685">다음 예제에서는 일련의 명명 된 응용 프로그램 도메인 `AD0` 통해 `AD3`와 `Worker` 각 응용 프로그램 도메인의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1685">The following example creates a series of application domains named `AD0` through `AD3`, with a `Worker` object in each application domain.</span></span> <span data-ttu-id="cc35c-1686">각 `Worker` 개체에 대 한 참조에는 `Worker` 을 제외 하 고 다음 응용 프로그램 도메인의 개체는 `Worker` 마지막 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1686">Each `Worker` object has a reference to the `Worker` object in the next application domain, except for the `Worker` in the last application domain.</span></span> <span data-ttu-id="cc35c-1687"><xref:System.AppDomain.FirstChanceException> 제외한 모든 응용 프로그램 도메인에서 이벤트를 처리 `AD1`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1687">The <xref:System.AppDomain.FirstChanceException> event is handled in all application domains except `AD1`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1688">이 예제에서는 여러 응용 프로그램 도메인에서 첫째 예외 알림을 보여 주는 외에도 간단한 사용 사례에서 찾을 수 있습니다 [하는 방법: 첫째 예외 알림 받기](~/docs/framework/app-domains/how-to-receive-first-chance-exception-notifications.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1688">In addition to this example, which demonstrates first-chance exception notifications in multiple application domains, you can find simple use cases in [How to: Receive First-Chance Exception Notifications](~/docs/framework/app-domains/how-to-receive-first-chance-exception-notifications.md).</span></span>  
  
 <span data-ttu-id="cc35c-1689">응용 프로그램 도메인을 만든 경우 기본 응용 프로그램 도메인 호출는 `TestException` 첫 번째 응용 프로그램 도메인에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1689">When the application domains have been created, the default application domain calls the `TestException` method for the first application domain.</span></span> <span data-ttu-id="cc35c-1690">각 `Worker` 호출 개체는 `TestException` 마지막 될 때까지 다음 응용 프로그램 도메인에 대 한 메서드 `Worker` 처리 되거나 처리 되지 않는 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1690">Each `Worker` object calls the `TestException` method for the next application domain, until the last `Worker` throws an exception that is either handled or unhandled.</span></span> <span data-ttu-id="cc35c-1691">따라서, 현재 스레드는 모든 응용 프로그램 도메인을 통해 전달 및 `TestException` 스택을에 각 응용 프로그램 도메인에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1691">Thus, the current thread passes through all the application domains, and `TestException` is added to the stack in each application domain.</span></span>  
  
 <span data-ttu-id="cc35c-1692">때 마지막 `Worker` 개체에서 예외를 처리는 <xref:System.AppDomain.FirstChanceException> 이벤트는 마지막 응용 프로그램 도메인에만 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1692">When the last `Worker` object handles the exception, the <xref:System.AppDomain.FirstChanceException> event is raised only in the last application domain.</span></span> <span data-ttu-id="cc35c-1693">다른 응용 프로그램 도메인에 가져오지 하므로 이벤트는 예외를 처리 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1693">The other application domains never get a chance to handle the exception, so the event is not raised.</span></span>  
  
 <span data-ttu-id="cc35c-1694">때 마지막 `Worker` 개체는 예외를 처리 하지 않는 <xref:System.AppDomain.FirstChanceException> 이벤트는 이벤트 처리기가 각 응용 프로그램 도메인에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1694">When the last `Worker` object does not handle the exception, the <xref:System.AppDomain.FirstChanceException> event is raised in each application domain that has an event handler.</span></span> <span data-ttu-id="cc35c-1695">각 이벤트 처리기가 끝나면 스택을 계속 예외는 기본 응용 프로그램 도메인에서 걸러진 될 때까지 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1695">After each event handler has finished, the stack continues to unwind until the exception is caught by the default application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1696">변경 이벤트가 곧 제공 될 때 스택 디스플레이 증가 하는 방법을 하 고 기본 응용 프로그램 도메인에 가까울수록 서로 볼 `e.Exception.Message` 를 `e.Exception` 에 `FirstChanceHandler` 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1696">To see how the stack display grows as the event is raised closer and closer to the default application domain, change `e.Exception.Message` to `e.Exception` in the `FirstChanceHandler` event handlers.</span></span> <span data-ttu-id="cc35c-1697">때 `TestException` 라고 응용 프로그램 도메인 경계에서 두 번 나타납니다: 프록시에 대해 한 번씩, 한 번 스텁에 대해 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1697">Notice that when `TestException` is called across application domain boundaries, it appears twice: once for the proxy and once for the stub.</span></span>  
  
 [!code-csharp[System.AppDomain.FirstChanceException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.firstchanceexception/cs/example.cs#1)]
 [!code-vb[System.AppDomain.FirstChanceException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.firstchanceexception/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-1698">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1698">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-1699">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1699">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs" />
        <altmember cref="E:System.AppDomain.UnhandledException" />
      </Docs>
    </Member>
    <Member MemberName="FriendlyName">
      <MemberSignature Language="C#" Value="public string FriendlyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FriendlyName" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.FriendlyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FriendlyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FriendlyName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.FriendlyName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-1700">이 응용 프로그램 도메인의 이름을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1700">Gets the friendly name of this application domain.</span></span></summary>
        <value><span data-ttu-id="cc35c-1701">이 응용 프로그램 도메인의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1701">The friendly name of this application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1702">기본 응용 프로그램 도메인의 이름을 프로세스 실행 파일의 파일 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1702">The friendly name of the default application domain is the file name of the process executable.</span></span> <span data-ttu-id="cc35c-1703">예를 들어 파일을 실행 하는 프로세스를 시작 하는 데는 `"c:\MyAppDirectory\MyAssembly.exe"`, 기본 응용 프로그램 도메인의 대화명은 `"MyAssembly.exe"`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1703">For example, if the executable used to start the process is `"c:\MyAppDirectory\MyAssembly.exe"`, the friendly name of the default application domain is `"MyAssembly.exe"`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1704">다음 코드 예제에서는 <xref:System.AppDomain.FriendlyName%2A> 현재 응용 프로그램 도메인의 이름을 가져올 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1704">The following code example uses the <xref:System.AppDomain.FriendlyName%2A> property to get the friendly name of the current application domain.</span></span> <span data-ttu-id="cc35c-1705">기본 응용 프로그램 도메인에 대 한 친숙 한 이름이 응용 프로그램의 실행 파일의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1705">For the default application domain, the friendly name is the name of the application's executable file.</span></span> <span data-ttu-id="cc35c-1706">이 코드 예제에는 응용 프로그램 도메인에 대 한 추가 정보가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1706">The code example also displays additional information about the application domain.</span></span>  
  
 [!code-cpp[ADApplicationBase#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADApplicationBase/CPP/adapplicationbase.cpp#1)]
 [!code-csharp[ADApplicationBase#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADApplicationBase/CS/adapplicationbase.cs#1)]
 [!code-vb[ADApplicationBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADApplicationBase/VB/adapplicationbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1707">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1707">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly[] GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly[] GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As Assembly()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetAssemblies</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc35c-1708">이 응용 프로그램 도메인의 실행 컨텍스트에 로드된 어셈블리를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1708">Gets the assemblies that have been loaded into the execution context of this application domain.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1709">이 응용 프로그램 도메인에 있는 어셈블리의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1709">An array of assemblies in this application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cc35c-1710">다음 코드 예제에서는 <xref:System.AppDomain.GetAssemblies%2A> 메서드 응용 프로그램 도메인에 로드 된 모든 어셈블리의 목록을 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1710">The following code example uses the <xref:System.AppDomain.GetAssemblies%2A> method to get a list of all assemblies that have been loaded into the application domain.</span></span> <span data-ttu-id="cc35c-1711">그러면 어셈블리가 콘솔에 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1711">The assemblies are then displayed to the console.</span></span>  
  
 <span data-ttu-id="cc35c-1712">이 코드 예제를 실행 하려면 명명 된 어셈블리를 만드는 `CustomLibrary.dll`에 전달 되는 어셈블리 이름을 변경 하거나는 <xref:System.AppDomain.GetAssemblies%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1712">To run this code example, you need to create an assembly named `CustomLibrary.dll`, or change the assembly name that is passed to the <xref:System.AppDomain.GetAssemblies%2A> method.</span></span>  
  
 [!code-cpp[ADGetAssemblies#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADGetAssemblies/CPP/adgetassemblies.cpp#1)]
 [!code-csharp[ADGetAssemblies#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADGetAssemblies/CS/adgetassemblies.cs#1)]
 [!code-vb[ADGetAssemblies#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADGetAssemblies/VB/adgetassemblies.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1713">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1713">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentThreadId">
      <MemberSignature Language="C#" Value="public static int GetCurrentThreadId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetCurrentThreadId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.GetCurrentThreadId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentThreadId () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetCurrentThreadId();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("AppDomain.GetCurrentThreadId has been deprecated because it does not provide a stable Id when managed threads are running on fibers (aka lightweight threads). To get a stable identifier for a managed thread, use the ManagedThreadId property on Thread.'")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc35c-1714">현재 스레드 식별자를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1714">Gets the current thread identifier.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1715">현재 스레드의 식별자인 부호 있는 32비트 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1715">A 32-bit signed integer that is the identifier of the current thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1716">사용 하 여는 <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> 속성을.NET Framework이 지 원하는 파이버 (즉, 경량 스레드) 환경에서 호스트 된 경우에 안정적입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1716">Use the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property, which is stable even when the .NET Framework is hosted by an environment that supports fibers (that is, lightweight threads).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1717">이 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1717">to call this method.</span></span> <span data-ttu-id="cc35c-1718">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1718">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span> <span data-ttu-id="cc35c-1719">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1719">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
        <altmember cref="T:System.Int32" />
        <altmember cref="P:System.Threading.Thread.ManagedThreadId" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetData(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetData(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-1720">미리 정의된 응용 프로그램 도메인 속성의 이름 또는 사용자가 정의한 응용 프로그램 도메인 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1720">The name of a predefined application domain property, or the name of an application domain property you have defined.</span></span></param>
        <summary><span data-ttu-id="cc35c-1721">지정한 이름에 대해 현재 응용 프로그램 도메인에 저장된 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1721">Gets the value stored in the current application domain for the specified name.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1722"><paramref name="name" /> 속성의 값이거나, 속성이 없을 경우 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1722">The value of the <paramref name="name" /> property, or <see langword="null" /> if the property does not exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1723">이 인스턴스의 속성을 설명 하는 이름-데이터 쌍의 내부 캐시에 있는 항목의 값을 검색 하려면이 메서드를 사용 하 여 <xref:System.AppDomain>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1723">Use this method to retrieve the value of an entry in an internal cache of name-data pairs that describe properties of this instance of <xref:System.AppDomain>.</span></span> <span data-ttu-id="cc35c-1724">비교 `name` 키-값 쌍의 이름으로는 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1724">Note that the comparison of `name` with the name of key-value pairs is case-sensitive.</span></span>  
  
 <span data-ttu-id="cc35c-1725">캐시는 자동으로 응용 프로그램 도메인이 만들어질 때 삽입 하는 미리 정의 된 시스템 항목을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1725">The cache automatically contains predefined system entries that are inserted when the application domain is created.</span></span> <span data-ttu-id="cc35c-1726">와 해당 값을 검사할 수는 <xref:System.AppDomain.GetData%2A> 메서드나 해당 하는 <xref:System.AppDomainSetup> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1726">You can inspect their values with the <xref:System.AppDomain.GetData%2A> method, or the equivalent <xref:System.AppDomainSetup> properties.</span></span>  
  
 <span data-ttu-id="cc35c-1727">삽입 하거나 사용자 정의 이름-데이터 쌍으로 수정할 수는 <xref:System.AppDomain.SetData%2A> 메서드 그 값을 검사 하 고는 <xref:System.AppDomain.GetData%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1727">You can insert or modify your own user defined name-data pairs with the <xref:System.AppDomain.SetData%2A> method and inspect their values with the <xref:System.AppDomain.GetData%2A> method.</span></span>  
  
 <span data-ttu-id="cc35c-1728">다음 표에서 `name` 미리 정의 된 각 시스템 항목 및 해당 <xref:System.AppDomainSetup> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1728">The following table describes the `name` of each predefined system entry and its corresponding <xref:System.AppDomainSetup> property.</span></span>  
  
|<span data-ttu-id="cc35c-1729">'Name'의 값</span><span class="sxs-lookup"><span data-stu-id="cc35c-1729">Value of 'name'</span></span>|<span data-ttu-id="cc35c-1730">속성</span><span class="sxs-lookup"><span data-stu-id="cc35c-1730">Property</span></span>|  
|---------------------|--------------|  
|<span data-ttu-id="cc35c-1731">"APPBASE"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1731">"APPBASE"</span></span>|<xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1732">"APP_CONFIG_FILE"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1732">"APP_CONFIG_FILE"</span></span>|<xref:System.AppDomainSetup.ConfigurationFile%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1733">"APP_LAUNCH_URL"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1733">"APP_LAUNCH_URL"</span></span>|<span data-ttu-id="cc35c-1734">(속성 없음)</span><span class="sxs-lookup"><span data-stu-id="cc35c-1734">(no property)</span></span><br /><br /> <span data-ttu-id="cc35c-1735">"APP_LAUNCH_URL"는 리디렉션 하기 전에 사용자가 원래 요청한 URL을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1735">"APP_LAUNCH_URL" represents the URL originally requested by the user, before any redirection.</span></span> <span data-ttu-id="cc35c-1736">Internet Explorer와 같은 브라우저 응용 프로그램 시작 되었습니다 하는 경우에 사용할 수 있는 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1736">It is available only when the application has been launched with a browser such as Internet Explorer.</span></span> <span data-ttu-id="cc35c-1737">일부 브라우저는이 값을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1737">Not all browsers provide this value.</span></span>|  
|<span data-ttu-id="cc35c-1738">"APP_NAME"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1738">"APP_NAME"</span></span>|<xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1739">"BINPATH_PROBE_ONLY"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1739">"BINPATH_PROBE_ONLY"</span></span>|<xref:System.AppDomainSetup.PrivateBinPathProbe%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1740">"CACHE_BASE"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1740">"CACHE_BASE"</span></span>|<xref:System.AppDomainSetup.CachePath%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1741">"CODE_DOWNLOAD_DISABLED"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1741">"CODE_DOWNLOAD_DISABLED"</span></span>|<xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1742">"DEV_PATH"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1742">"DEV_PATH"</span></span>|<span data-ttu-id="cc35c-1743">(속성 없음)</span><span class="sxs-lookup"><span data-stu-id="cc35c-1743">(no property)</span></span>|  
|<span data-ttu-id="cc35c-1744">"DISALLOW_APP"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1744">"DISALLOW_APP"</span></span>|<xref:System.AppDomainSetup.DisallowPublisherPolicy%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1745">"DISALLOW_APP_BASE_PROBING"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1745">"DISALLOW_APP_BASE_PROBING"</span></span>|<xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1746">"DISALLOW_APP_REDIRECTS"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1746">"DISALLOW_APP_REDIRECTS"</span></span>|<xref:System.AppDomainSetup.DisallowBindingRedirects%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1747">"DYNAMIC_BASE"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1747">"DYNAMIC_BASE"</span></span>|<xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1748">"FORCE_CACHE_INSTALL"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1748">"FORCE_CACHE_INSTALL"</span></span>|<xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1749">"LICENSE_FILE" 또는 응용 프로그램별 문자열</span><span class="sxs-lookup"><span data-stu-id="cc35c-1749">"LICENSE_FILE", or an application-specific string</span></span>|<xref:System.AppDomainSetup.LicenseFile%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1750">"LOADER_OPTIMIZATION"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1750">"LOADER_OPTIMIZATION"</span></span>|<xref:System.AppDomainSetup.LoaderOptimization%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1751">"LOCATION_URI"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1751">"LOCATION_URI"</span></span>|<span data-ttu-id="cc35c-1752">(속성 없음)</span><span class="sxs-lookup"><span data-stu-id="cc35c-1752">(no property)</span></span>|  
|<span data-ttu-id="cc35c-1753">"PRIVATE_BINPATH"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1753">"PRIVATE_BINPATH"</span></span>|<xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="cc35c-1754">"REGEX_DEFAULT_MATCH_TIMEOUT"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1754">"REGEX_DEFAULT_MATCH_TIMEOUT"</span></span>|<xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A?displayProperty=nameWithType><br /><br /> <span data-ttu-id="cc35c-1755">"REGEX_DEFAULT_MATCH_TIMEOUT" 시스템 항목 아니며 호출 하 여 해당 값을 설정할 수 있습니다는 <xref:System.AppDomain.SetData%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1755">"REGEX_DEFAULT_MATCH_TIMEOUT" is not a system entry, and its value can be set by calling the <xref:System.AppDomain.SetData%2A> method.</span></span>|  
|<span data-ttu-id="cc35c-1756">"SHADOW_COPY_DIRS"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1756">"SHADOW_COPY_DIRS"</span></span>|<xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=nameWithType>|  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1757">다음 예제에서는 새 응용 프로그램 도메인, 도메인에 대해 시스템에서 제공한 값을 설정 및 도메인에 대 한 새 값 쌍을 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1757">The following example creates a new application domain, sets a system-provided value for the domain, and adds a new value pair for the domain.</span></span> <span data-ttu-id="cc35c-1758">다음 예제는 사용 하는 방법을 <xref:System.AppDomain.GetData%2A> 메서드를 이러한 값 쌍에서 데이터를 검색 하 고 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1758">The example then demonstrates how to use the <xref:System.AppDomain.GetData%2A> method to retrieve the data from these value pairs and display them to the console.</span></span>  
  
 [!code-cpp[ADGetData#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADGetData/CPP/adgetdata.cpp#1)]
 [!code-csharp[ADGetData#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADGetData/CS/adgetdata.cs#1)]
 [!code-vb[ADGetData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADGetData/VB/adgetdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1759"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1759"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1760">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1760">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1761">경로 경로에 속성이 적용 되는 경우 자체에 대 한 정보에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1761">for access to the information in the path itself, if the property applies to a path.</span></span> <span data-ttu-id="cc35c-1762">연관된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1762">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <altmember cref="M:System.AppDomain.SetData(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc35c-1763">현재 인스턴스의 형식을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1763">Gets the type of the current instance.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1764">현재 인스턴스의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1764">The type of the current instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-1765">프로세스 내 응용 프로그램 도메인을 고유하게 식별하는 정수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1765">Gets an integer that uniquely identifies the application domain within the process.</span></span></summary>
        <value><span data-ttu-id="cc35c-1766">응용 프로그램 도메인을 식별하는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1766">An integer that identifies the application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cc35c-1767">다음 코드 예제에서는 두 번째 응용 프로그램 도메인을 만들고 기본 도메인 및 새 도메인에 대 한 정보를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1767">The following code example creates a second application domain and displays information about the default domain and the new domain.</span></span>  
  
 [!code-cpp[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/CPP/System.AppDomain.IsDefaultAppDomain.cpp#1)]
 [!code-csharp[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/CS/source.cs#1)]
 [!code-vb[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.InitializeLifetimeService</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc35c-1768">임대가 만들어지는 것을 방지하여 <see cref="T:System.AppDomain" />에 영구적 수명을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1768">Gives the <see cref="T:System.AppDomain" /> an infinite lifetime by preventing a lease from being created.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1769">항상 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1769">Always <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1770">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1770">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-1771">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1771">requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-1772">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1772">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IsCompatibilitySwitchSet">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; IsCompatibilitySwitchSet (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;bool&gt; IsCompatibilitySwitchSet(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsCompatibilitySwitchSet (value As String) As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;bool&gt; IsCompatibilitySwitchSet(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="cc35c-1773">테스트할 호환성 스위치입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1773">The compatibility switch to test.</span></span></param>
        <summary><span data-ttu-id="cc35c-1774">호환성 스위치가 설정되어 있는지를 확인하고 설정되어 있으면 지정한 호환성 스위치가 설정되어 있는지를 나타내는 nullable 부울 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1774">Gets a nullable Boolean value that indicates whether any compatibility switches are set, and if so, whether the specified compatibility switch is set.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1775">호환성 스위치가 설정되어 있으면 <paramref name="value" />에 지정된 호환성 스위치가 설정되어 있는지 여부를 나타내는 부울 값이고, 그러지 않으면 Null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1775">A null reference (<see langword="Nothing" /> in Visual Basic) if no compatibility switches are set; otherwise, a Boolean value that indicates whether the compatibility switch that is specified by <paramref name="value" /> is set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1776">이 메서드는 현재 응용 프로그램 도메인에 지정한 호환성 스위치가 설정 된 있는지 여부를 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1776">This method tests whether the specified compatibility switch has been set for the current application domain.</span></span> <span data-ttu-id="cc35c-1777">(예: 방식으로 문자열을 정렬) 호환성 스위치는 동작을 일반적으로 복원 하는.NET Framework의 버전 간에 변경 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1777">Compatibility switches typically restore a behavior (such as the way strings are sorted) that was changed between versions of the .NET Framework.</span></span>  <span data-ttu-id="cc35c-1778">호출 하 여 설정 된 <xref:System.AppDomainSetup.SetCompatibilitySwitches%2A?displayProperty=nameWithType> 응용 프로그램 도메인을 만들기 전에 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1778">They are set by calling the <xref:System.AppDomainSetup.SetCompatibilitySwitches%2A?displayProperty=nameWithType> method before creating an application domain.</span></span>  
  
 <span data-ttu-id="cc35c-1779">다음 표에서 이전 버전의.NET Framework의 동작을 복원할로 설정할 수 있는 호환성 스위치의 예제를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1779">The following table provides examples of compatibility switches that can be set to restore the behavior of earlier versions of the .NET Framework.</span></span>  
  
|<span data-ttu-id="cc35c-1780">전환</span><span class="sxs-lookup"><span data-stu-id="cc35c-1780">Switch</span></span>|<span data-ttu-id="cc35c-1781">의미</span><span class="sxs-lookup"><span data-stu-id="cc35c-1781">Meaning</span></span>|  
|------------|-------------|  
|<span data-ttu-id="cc35c-1782">"NetFx40_LegacySecurityPolicy"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1782">"NetFx40_LegacySecurityPolicy"</span></span>|<span data-ttu-id="cc35c-1783">에 대 한 코드 액세스 보안 (CA)는 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 이 응용 프로그램 도메인에서 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1783">Code access security (CAS) for the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] is enabled in this application domain.</span></span> <span data-ttu-id="cc35c-1784">참조 [ &lt;NetFx40_LegacySecurityPolicy&gt; 요소](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1784">See [&lt;NetFx40_LegacySecurityPolicy&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md).</span></span>|  
|<span data-ttu-id="cc35c-1785">"NetFx40_Legacy20SortingBehavior"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1785">"NetFx40_Legacy20SortingBehavior"</span></span>|<span data-ttu-id="cc35c-1786">문자열 정렬에 대 한 기본값은 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 이 응용 프로그램 도메인에서 활성화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1786">String sorting defaults for the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] are enabled in this application domain.</span></span> <span data-ttu-id="cc35c-1787">성공을 sort00001000.dll를 설치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1787">Its success requires sort00001000.dll to be installed.</span></span> <span data-ttu-id="cc35c-1788">참조 [ &lt;CompatSortNLSVersion&gt; 요소](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1788">See [&lt;CompatSortNLSVersion&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md).</span></span>|  
|<span data-ttu-id="cc35c-1789">"NetFx40_Legacy40SortingBehavior"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1789">"NetFx40_Legacy40SortingBehavior"</span></span>|<span data-ttu-id="cc35c-1790">문자열 정렬에 대 한 기본값은 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]유니코드 5.0이 응용 프로그램 도메인에서 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1790">String sorting defaults for the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]and Unicode 5.0 are enabled in this application domain.</span></span> <span data-ttu-id="cc35c-1791">성공을 sort00060101.dll를 설치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1791">Its success requires sort00060101.dll to be installed.</span></span>|  
|<span data-ttu-id="cc35c-1792">"NetFx40_TimeSpanLegacyFormatMode"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1792">"NetFx40_TimeSpanLegacyFormatMode"</span></span>|<span data-ttu-id="cc35c-1793"><xref:System.TimeSpan> 서식 지정에 대 한 동작의 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 이 응용 프로그램 도메인에서 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1793"><xref:System.TimeSpan> formatting behavior for the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] is enabled in this application domain.</span></span>  <span data-ttu-id="cc35c-1794">참조 [ &lt;TimeSpan_LegacyFormatMode&gt; 요소](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md) 및의 "레거시 TimeSpan 서식 복원" 섹션에서 <xref:System.TimeSpan> 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1794">See [&lt;TimeSpan_LegacyFormatMode&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md) and the "Restoring Legacy TimeSpan Formatting" section of the <xref:System.TimeSpan> topic.</span></span>|  
|<span data-ttu-id="cc35c-1795">"UseRandomizedStringHashAlgorithm"</span><span class="sxs-lookup"><span data-stu-id="cc35c-1795">"UseRandomizedStringHashAlgorithm"</span></span>|<span data-ttu-id="cc35c-1796">문자열에 대 한 해시 코드를 계산 하는 런타임에서 응용 프로그램 도메인 간에 일관 된 해시 코드를 생성 하는 단일 해시 알고리즘을 사용 하는 대신 응용 프로그램 도메인 단위로 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1796">The runtime calculates hash codes for strings on a per application domain basis instead of using a single hashing algorithm that produces a consistent hash code across application domains.</span></span> <span data-ttu-id="cc35c-1797">참조 [ &lt;UseRandomizedStringHashAlgorithm&gt; 요소](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1797">See [&lt;UseRandomizedStringHashAlgorithm&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md).</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="IsDefaultAppDomain">
      <MemberSignature Language="C#" Value="public bool IsDefaultAppDomain ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDefaultAppDomain() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.IsDefaultAppDomain" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDefaultAppDomain () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDefaultAppDomain();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc35c-1798">응용 프로그램 도메인이 해당 프로세스에 대한 기본 응용 프로그램 도메인인지를 나타내는 값을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1798">Returns a value that indicates whether the application domain is the default application domain for the process.</span></span></summary>
        <returns>
          <span data-ttu-id="cc35c-1799">현재 <see cref="T:System.AppDomain" /> 개체가 해당 프로세스에 대한 기본 응용 프로그램 도메인을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1799"><see langword="true" /> if the current <see cref="T:System.AppDomain" /> object represents the default application domain for the process; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1800">모든 관리 되는 프로세스에 기본 응용 프로그램 도메인을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1800">Every managed process has a default application domain.</span></span> <span data-ttu-id="cc35c-1801">기본 도메인에서 실행을 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1801">Execution begins in the default domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1802">다음 코드 예제에서는 두 번째 응용 프로그램 도메인을 만들고 기본 도메인 및 새 도메인에 대 한 정보를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1802">The following code example creates a second application domain and displays information about the default domain and the new domain.</span></span>  
  
 [!code-cpp[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/CPP/System.AppDomain.IsDefaultAppDomain.cpp#1)]
 [!code-csharp[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/CS/source.cs#1)]
 [!code-vb[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinalizingForUnload">
      <MemberSignature Language="C#" Value="public bool IsFinalizingForUnload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsFinalizingForUnload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.IsFinalizingForUnload" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFinalizingForUnload () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFinalizingForUnload();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc35c-1803">이 응용 프로그램 도메인의 언로드 여부 및 공용 언어 런타임에서 이 응용 프로그램 도메인에 포함된 개체를 종료하고 있는지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1803">Indicates whether this application domain is unloading, and the objects it contains are being finalized by the common language runtime.</span></span></summary>
        <returns>
          <span data-ttu-id="cc35c-1804">이 응용 프로그램 도메인의 언로드 작업이 수행되고 공용 언어 런타임에서 이미 종료자를 호출했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1804"><see langword="true" /> if this application domain is unloading and the common language runtime has started invoking finalizers; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1805">개체에 대 한 종료 메서드는 개체가 가비지 수집 되기 전에 필요한 정리 작업을 수행할 수 있습니다를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1805">The finalization method for an object provides you an opportunity to perform any necessary cleanup operations before the object is garbage collected.</span></span> <span data-ttu-id="cc35c-1806">종료 된 후 개체는 액세스할 수 있지만 잘못 된 상태에 있고 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1806">After finalization, the object is accessible but in an invalid state and therefore unusable.</span></span> <span data-ttu-id="cc35c-1807">결국 가비지 수집을 완료 하 고 개체를 회수 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1807">Eventually, garbage collection completes and reclaims the object.</span></span>  
  
 <span data-ttu-id="cc35c-1808">개체의 종료 메서드는 다음과 같은 상황 중 하나에서: 가비지 수집 중 공용 언어 런타임의 종료 될 때 또는 개체가 포함 된 응용 프로그램 도메인이 언로드될 때.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1808">An object's finalization method is called in one of the following situations: during garbage collection, when the common language runtime is shutting down, or when the application domain that contains the object is unloaded.</span></span> <span data-ttu-id="cc35c-1809"><xref:System.AppDomain.IsFinalizingForUnload%2A> 메서드 반환 `true` ; 지난 경우에만 반환 하지 않는 `true` 종료 CLR 종료 또는 일상적인 가비지 수집에서 발생 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1809">The <xref:System.AppDomain.IsFinalizingForUnload%2A> method returns `true` only in the last case; it does not return `true` if finalization results from routine garbage collection or from CLR shutdown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1810">CLR 종료로 인해 종료 되는지 확인 하려면는 <xref:System.Environment.HasShutdownStarted%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1810">To determine whether finalization is due to CLR shutdown, use the <xref:System.Environment.HasShutdownStarted%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="cc35c-1811">반환 `true` 또는 종료 하 고 CLR 응용 프로그램 도메인이 언로드되고으로 인해 종료 되는 경우.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1811">It returns `true` if finalization is due to an application domain being unloaded or to the CLR shutting down.</span></span>  
  
 <span data-ttu-id="cc35c-1812">언로드 작업이 수행 하는 동안 종료 메서드에서 실행을 하는 동안 정적 필드에서 참조 하 고 종료 메서드를 포함 하는 다른 개체에 액세스 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1812">While executing in your finalization method during domain unloading, you might want to access another object that is referenced by a static field and has a finalization method.</span></span> <span data-ttu-id="cc35c-1813">그러나 없습니다 안정적으로 이렇게 하면 액세스 한 개체가 종료 이미 수 있으므로 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1813">However, you cannot reliably do so because the accessed object might already have been finalized.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1814">이 규칙의 예외는 <xref:System.Console> 스트림 개체를 참조 하는 정적 필드가 포함 되어 있지만 도메인 언로드하거나 시스템 종료 하는 동안에 시스템 콘솔에 항상 작성할 수 있도록 특별히 구현 되는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1814">An exception to this rule is the <xref:System.Console> class, which contains static fields that reference stream objects, but is implemented specially so you can always write to the system console, even during domain unloading or system shutdown.</span></span>  
  
 <span data-ttu-id="cc35c-1815">개체의 종료 메서드에 개체를 포함 하는 응용 프로그램 도메인이 언로드되고 있는지 여부를 확인 하려면이 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1815">Use this method in an object's finalization method to determine whether the application domain that contains the object is unloading.</span></span> <span data-ttu-id="cc35c-1816">해당 되는 경우 종료 메서드를 포함 하는 정적 필드에서 참조 하는 모든 개체 안정적으로 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1816">If that is the case, you cannot reliably access any object that has a finalization method and is referenced by a static field.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Environment.HasShutdownStarted" />
      </Docs>
    </Member>
    <Member MemberName="IsFullyTrusted">
      <MemberSignature Language="C#" Value="public bool IsFullyTrusted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFullyTrusted" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.IsFullyTrusted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFullyTrusted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFullyTrusted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-1817">현재 응용 프로그램 도메인에 로드된 어셈블리가 완전 신뢰로 실행되는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1817">Gets a value that indicates whether assemblies that are loaded into the current application domain execute with full trust.</span></span></summary>
        <value>
          <span data-ttu-id="cc35c-1818">현재 응용 프로그램 도메인에 로드된 어셈블리가 완전 신뢰로 실행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1818"><see langword="true" /> if assemblies that are loaded into the current application domain execute with full trust; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1819">이 메서드는 항상 반환 `true` 데스크톱에서 실행 하는 응용 프로그램의 기본 응용 프로그램 도메인에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1819">This method always returns `true` for the default application domain of an application that runs on the desktop.</span></span> <span data-ttu-id="cc35c-1820">반환 `false` 를 사용 하 여 만든 샌드 박싱된 응용 프로그램 도메인에 대 한는 <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> 응용 프로그램 도메인에서 부여 된 권한을 완전 신뢰와 동일 하지 않으면 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1820">It returns `false` for a sandboxed application domain that was created by using the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method overload, unless the permissions that are granted to the application domain are equivalent to full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1821">다음 예제는 <xref:System.AppDomain.IsFullyTrusted%2A> 속성 및 <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> 부분적으로 신뢰할 수 있고 완전히 신뢰할 수 있는 응용 프로그램 도메인을 사용 하 여 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1821">The following example demonstrates the <xref:System.AppDomain.IsFullyTrusted%2A> property and the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> property with fully trusted and partially trusted application domains.</span></span> <span data-ttu-id="cc35c-1822">완전히 신뢰할 수 있는 응용 프로그램 도메인은 응용 프로그램에 대 한 기본 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1822">The fully trusted application domain is the default application domain for the application.</span></span> <span data-ttu-id="cc35c-1823">사용 하 여 부분적으로 신뢰할 수 있는 응용 프로그램 도메인이 만들어집니다는 <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1823">The partially trusted application domain is created by using the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method overload.</span></span>  
  
 <span data-ttu-id="cc35c-1824">이 예제에서는 사용는 `Worker` 에서 파생 된 클래스 <xref:System.MarshalByRefObject>이므로 응용 프로그램 도메인 경계를 넘어 마샬링해야 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1824">The example uses a `Worker` class that derives from <xref:System.MarshalByRefObject>, so it can be marshaled across application domain boundaries.</span></span> <span data-ttu-id="cc35c-1825">이 예에서는 만듭니다는 `Worker` 기본 응용 프로그램 도메인의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1825">The example creates a `Worker` object in the default application domain.</span></span> <span data-ttu-id="cc35c-1826">그런 다음 호출 하는 `TestIsFullyTrusted` 응용 프로그램 도메인에 로드 되는 두 명의 어셈블리 및 응용 프로그램 도메인에 대 한 속성 값을 표시 하는 메서드:.NET Framework 및 예제에서는 어셈블리의 일부인 mscorlib입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1826">It then calls the `TestIsFullyTrusted` method to display the property value for the application domain and for two assemblies that are loaded into the application domain: mscorlib, which is part of the .NET Framework, and the example assembly.</span></span> <span data-ttu-id="cc35c-1827">응용 프로그램 도메인 완전히 신뢰할 수 있는 이므로 두 어셈블리는 완전히 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1827">The application domain is fully trusted, so both assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="cc35c-1828">이 예에서는 다른 만듭니다 `Worker` 샌드 박싱된 응용 프로그램 도메인 및 다시 호출 하는 개체는 `TestIsFullyTrusted` 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1828">The example creates another `Worker` object in a sandboxed application domain and again calls the `TestIsFullyTrusted` method.</span></span> <span data-ttu-id="cc35c-1829">Mscorlib 항상 신뢰할 수 있는, 부분적으로 신뢰할 수 있는 응용 프로그램 도메인에도 있지만 예제 어셈블리는 부분적으로 신뢰할 수 있는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1829">Mscorlib is always trusted, even in a partially trusted application domain, but the example assembly is partially trusted.</span></span>  
  
 [!code-csharp[System.AppDomain.IsFullyTrusted#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.isfullytrusted/cs/example.cs#1)]
 [!code-vb[System.AppDomain.IsFullyTrusted#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.isfullytrusted/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHomogenous">
      <MemberSignature Language="C#" Value="public bool IsHomogenous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHomogenous" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.IsHomogenous" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHomogenous As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHomogenous { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-1830">응용 프로그램 도메인에 로드된 모든 어셈블리에 부여된 권한 집합이 현재 응용 프로그램 도메인에 있는지를 나타내는 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1830">Gets a value that indicates whether the current application domain has a set of permissions that is granted to all assemblies that are loaded into the application domain.</span></span></summary>
        <value>
          <span data-ttu-id="cc35c-1831">현재 응용 프로그램 도메인에 형식이 같은 권한 집합이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1831"><see langword="true" /> if the current application domain has a homogenous set of permissions; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1832">이 속성은 반환 `true` 사용 하 여 만든 샌드 박싱된 응용 프로그램 도메인에 대 한는 <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1832">This property returns `true` for sandboxed application domains that were created by using the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="cc35c-1833">샌드 박싱된 응용 프로그램 도메인에 있고, 한 형식이 같은 권한 집합이 있습니다. 즉, 응용 프로그램 도메인에 로드 되는 부분적으로 신뢰할 수 있는 모든 어셈블리에 동일한 사용 권한 집합이 부여 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1833">Sandboxed application domains have a homogenous set of permissions; that is, the same set of permissions is granted to all partially trusted assemblies that are loaded into the application domain.</span></span> <span data-ttu-id="cc35c-1834">샌드 박싱된 응용 프로그램 도메인에는 필요에 따라이 사용 권한을 설정 하 고 대신 완전 신뢰로 실행에서 제외 되는 강력한 이름의 어셈블리의 목록을 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1834">A sandboxed application domain optionally has a list of strong-named assemblies that are exempt from this permission set, and instead run with full trust.</span></span>  
  
 <span data-ttu-id="cc35c-1835">완전히 신뢰 하는 코드에서 사용할 수는 <xref:System.AppDomain.PermissionSet%2A> 샌드 박싱된 응용 프로그램 도메인의 형식이 같은 권한 부여 집합을 결정 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1835">Fully trusted code can use the <xref:System.AppDomain.PermissionSet%2A> property to determine the homogenous grant set of a sandboxed application domain.</span></span>  
  
 <span data-ttu-id="cc35c-1836">또한이 속성 반환 `true` 는 데스크톱 응용 프로그램의 기본 응용 프로그램 도메인에 대 한 해당 응용 프로그램 도메인은 모든 어셈블리에 완전 신뢰를 부여 하므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1836">This property also returns `true` for the default application domain of a desktop application, because that application domain grants full trust to all assemblies.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.AppDomain.PermissionSet" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc35c-1837"><see cref="T:System.Reflection.Assembly" />를 이 용용 프로그램 도메인에 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1837">Loads an <see cref="T:System.Reflection.Assembly" /> into this application domain.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (byte[] rawAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(unsigned int8[] rawAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (rawAssembly As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="cc35c-1838">내보낸 어셈블리가 포함된 COFF 기반 이미지인 <see langword="byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1838">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</span></span></param>
        <summary><span data-ttu-id="cc35c-1839">내보낸 <see cref="T:System.Reflection.Assembly" />가 들어 있는 COFF(Common Object File Format) 기반 이미지를 사용한 <see cref="T:System.Reflection.Assembly" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1839">Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image containing an emitted <see cref="T:System.Reflection.Assembly" />.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1840">로드된 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1840">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1841">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)],이 메서드를 사용 하 여 로드 되는 어셈블리의 신뢰 수준은 응용 프로그램 도메인의 신뢰 수준을와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1841">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</span></span>  
  
 <span data-ttu-id="cc35c-1842">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1842">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="cc35c-1843">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1843">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="cc35c-1844">다른 응용 프로그램 도메인, 어셈블리 로드를 사용 하 여 메서드 같은 <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1844">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="cc35c-1845">이 메서드의 모든 오버 로드에 공통 된 정보를 참조 하십시오.는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1845">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1846">다음 샘플 원시 어셈블리를 로드 하의 사용을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1846">The following sample demonstrates the use of loading a raw assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1847">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1847">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-1848">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1848">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_LoadRaw#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_LoadRaw/CPP/loadraw.cpp#1)]
 [!code-csharp[AppDomain_LoadRaw#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_LoadRaw/CS/loadraw.cs#1)]
 [!code-vb[AppDomain_LoadRaw#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_LoadRaw/VB/loadraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1849"><paramref name="rawAssembly" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1849"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-1850"><paramref name="rawAssembly" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1850"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1851">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1851">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1852">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="rawAssembly" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1852">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1853">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1853">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1854">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1854">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1855">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1855">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-1856">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1856">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Reflection.AssemblyName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (assemblyRef As AssemblyName) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(System::Reflection::AssemblyName ^ assemblyRef);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Reflection.AssemblyName)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyRef" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyRef"><span data-ttu-id="cc35c-1857">로드할 어셈블리를 설명하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1857">An object that describes the assembly to load.</span></span></param>
        <summary><span data-ttu-id="cc35c-1858"><see cref="T:System.Reflection.AssemblyName" />이 지정된 <see cref="T:System.Reflection.Assembly" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1858">Loads an <see cref="T:System.Reflection.Assembly" /> given its <see cref="T:System.Reflection.AssemblyName" />.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1859">로드된 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1859">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1860">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1860">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="cc35c-1861">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1861">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="cc35c-1862">다른 응용 프로그램 도메인, 어셈블리 로드를 사용 하 여 메서드 같은 <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1862">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="cc35c-1863">이미 로드 되어 요청된 된 어셈블리의 버전 다른 버전이 요청 된 경우에이 메서드는 로드 된 어셈블리를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1863">If a version of the requested assembly is already loaded, this method returns the loaded assembly, even if a different version is requested.</span></span>  
  
 <span data-ttu-id="cc35c-1864">에 대 한 부분 어셈블리 이름을 제공 `assemblyRef` 권장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1864">Supplying a partial assembly name for `assemblyRef` is not recommended.</span></span> <span data-ttu-id="cc35c-1865">(부분 이름은 하나 이상의 culture, 버전, 사용 또는 공개 키 토큰을 생략 하는 데 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1865">(A partial name omits one or more of culture, version, or public key token.</span></span> <span data-ttu-id="cc35c-1866">대신 문자열을 허용 하는 오버 로드에 대 한는 <xref:System.Reflection.AssemblyName> 개체를 "MyAssembly, Version = 1.0.0.0"은 이름의 일부의 예 및 "MyAssembly, Version = 1.0.0.0, Culture = neutral, PublicKeyToken 18ab3442da84b47 ="은 예 전체 이름입니다.) 부분 이름을 사용 하면 성능에 부정적인 영향을 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1866">For overloads that take a string instead of an <xref:System.Reflection.AssemblyName> object, "MyAssembly, Version=1.0.0.0" is an example of a partial name and "MyAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=18ab3442da84b47" is an example of a full name.) Using partial names has a negative effect on performance.</span></span> <span data-ttu-id="cc35c-1867">또한 부분 어셈블리 이름을 로드할 수 어셈블리를 전역 어셈블리 캐시에서 응용 프로그램 기본 디렉터리에 있는 어셈블리의 정확한 복사본 필요한 경우에 (<xref:System.AppDomain.BaseDirectory%2A> 또는 <xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="cc35c-1867">In addition, a partial assembly name can load an assembly from the global assembly cache only if there is an exact copy of the assembly in the application base directory (<xref:System.AppDomain.BaseDirectory%2A> or <xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="cc35c-1868">하는 경우 현재 <xref:System.AppDomain> 개체가 응용 프로그램 도메인을 나타내면 `A`, 및 <xref:System.AppDomain.Load%2A> 메서드는 응용 프로그램 도메인에서 `B`, 어셈블리 두 응용 프로그램 도메인에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1868">If the current <xref:System.AppDomain> object represents application domain `A`, and the <xref:System.AppDomain.Load%2A> method is called from application domain `B`, the assembly is loaded into both application domains.</span></span> <span data-ttu-id="cc35c-1869">예를 들어 다음 코드 로드 `MyAssembly` 새 응용 프로그램 도메인 `ChildDomain` 및 코드를 실행 하는 응용 프로그램 도메인에도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1869">For example, the following code loads `MyAssembly` into the new application domain `ChildDomain` and also into the application domain where the code executes:</span></span>  
  
 [!code-cpp[System.AppDomain.Load#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.appdomain.load/cpp/source.cpp#1)]
 [!code-csharp[System.AppDomain.Load#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.load/cs/source.cs#1)]
 [!code-vb[System.AppDomain.Load#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.load/vb/source.vb#1)]  
  
 <span data-ttu-id="cc35c-1870">어셈블리가 로드 되는 두 도메인에 있으므로 <xref:System.Reflection.Assembly> 에서 파생 되지 않은 <xref:System.MarshalByRefObject>, 따라서의 반환 값과는 <xref:System.AppDomain.Load%2A> 메서드를 마샬링할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1870">The assembly is loaded into both domains because <xref:System.Reflection.Assembly> does not derive from <xref:System.MarshalByRefObject>, and therefore the return value of the <xref:System.AppDomain.Load%2A> method cannot be marshaled.</span></span> <span data-ttu-id="cc35c-1871">대신, 공용 언어 런타임 어셈블리 호출 응용 프로그램 도메인에 로드 하려고 시도 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1871">Instead, the common language runtime tries to load the assembly into the calling application domain.</span></span> <span data-ttu-id="cc35c-1872">두 응용 프로그램 도메인에 로드 된 어셈블리는 두 응용 프로그램 도메인에 대 한 경로 설정을 서로 다른 경우 달라질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1872">The assemblies that are loaded into the two application domains might be different if the path settings for the two application domains are different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-1873">모두는 <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> 속성 및 <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType> 속성이 설정 되어, 어셈블리를 로드할 첫 번째 시도 표시 이름을 사용 하 여 (에서 반환 된 버전, 문화권 및 등을 포함 하는 <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> 속성).</span><span class="sxs-lookup"><span data-stu-id="cc35c-1873">If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property).</span></span> <span data-ttu-id="cc35c-1874">파일이 없는 경우는 <xref:System.Reflection.AssemblyName.CodeBase%2A> 속성은 어셈블리를 검색 하는 데 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1874">If the file is not found, the <xref:System.Reflection.AssemblyName.CodeBase%2A> property is used to search for the assembly.</span></span> <span data-ttu-id="cc35c-1875">사용 하는 어셈블리가 있는 경우 <xref:System.Reflection.AssemblyName.CodeBase%2A>, 표시 이름은 어셈블리와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1875">If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly.</span></span> <span data-ttu-id="cc35c-1876">일치가 실패 하면는 <xref:System.IO.FileLoadException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1876">If the match fails, a <xref:System.IO.FileLoadException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1877"><paramref name="assemblyRef" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1877"><paramref name="assemblyRef" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-1878"><paramref name="assemblyRef" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1878"><paramref name="assemblyRef" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-1879"><paramref name="assemblyRef" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1879"><paramref name="assemblyRef" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1880">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1880">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1881">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyRef" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1881">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1882">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1882">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1883">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1883">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1884">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1884">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-1885">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1885">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (string assemblyString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(string assemblyString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (assemblyString As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(System::String ^ assemblyString);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyString"><span data-ttu-id="cc35c-1886">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1886">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-1887"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1887">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <summary><span data-ttu-id="cc35c-1888">표시 이름이 지정된 <see cref="T:System.Reflection.Assembly" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1888">Loads an <see cref="T:System.Reflection.Assembly" /> given its display name.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1889">로드된 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1889">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1890">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1890">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="cc35c-1891">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1891">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="cc35c-1892">다른 응용 프로그램 도메인, 어셈블리 로드를 사용 하 여 메서드 같은 <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1892">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="cc35c-1893">이 메서드의 모든 오버 로드에 공통 된 정보를 참조 하십시오.는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1893">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1894"><paramref name="assemblyString" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1894"><paramref name="assemblyString" /> is <see langword="null" /></span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-1895"><paramref name="assemblyString" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1895"><paramref name="assemblyString" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-1896"><paramref name="assemblyString" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1896"><paramref name="assemblyString" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1897">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1897">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1898">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyString" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1898">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1899">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1899">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1900">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1900">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1901">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1901">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-1902">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1902">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1903">어셈블리가 로컬이 아닌 경우 어셈블리의 위치에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1903">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(unsigned int8[] rawAssembly, unsigned int8[] rawSymbolStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (rawAssembly As Byte(), rawSymbolStore As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly, cli::array &lt;System::Byte&gt; ^ rawSymbolStore);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Byte[],System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="cc35c-1904">내보낸 어셈블리가 포함된 COFF 기반 이미지인 <see langword="byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1904">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</span></span></param>
        <param name="rawSymbolStore"><span data-ttu-id="cc35c-1905">어셈블리의 기호를 나타내는 원시 바이트가 포함된 <see langword="byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1905">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</span></span></param>
        <summary><span data-ttu-id="cc35c-1906">내보낸 <see cref="T:System.Reflection.Assembly" />가 들어 있는 COFF(Common Object File Format) 기반 이미지를 사용한 <see cref="T:System.Reflection.Assembly" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1906">Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image containing an emitted <see cref="T:System.Reflection.Assembly" />.</span></span> <span data-ttu-id="cc35c-1907"><see cref="T:System.Reflection.Assembly" />에 대한 기호를 나타내는 원시 바이트도 로드됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1907">The raw bytes representing the symbols for the <see cref="T:System.Reflection.Assembly" /> are also loaded.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1908">로드된 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1908">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1909">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)],이 메서드를 사용 하 여 로드 되는 어셈블리의 신뢰 수준은 응용 프로그램 도메인의 신뢰 수준을와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1909">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</span></span>  
  
 <span data-ttu-id="cc35c-1910">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1910">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="cc35c-1911">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1911">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="cc35c-1912">다른 응용 프로그램 도메인, 어셈블리 로드를 사용 하 여 메서드 같은 <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1912">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="cc35c-1913">이 메서드의 모든 오버 로드에 공통 된 정보를 참조 하십시오.는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1913">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1914">다음 샘플 원시 어셈블리를 로드 하의 사용을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1914">The following sample demonstrates the use of loading a raw assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1915">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1915">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-1916">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1916">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_LoadRaw#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_LoadRaw/CPP/loadraw.cpp#1)]
 [!code-csharp[AppDomain_LoadRaw#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_LoadRaw/CS/loadraw.cs#1)]
 [!code-vb[AppDomain_LoadRaw#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_LoadRaw/VB/loadraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1917"><paramref name="rawAssembly" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1917"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-1918"><paramref name="rawAssembly" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1918"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1919">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1919">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1920">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="rawAssembly" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1920">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1921">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1921">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1922">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1922">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1923">"file://"로 시작 하지 않는 URI를 읽는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1923">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1924">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1924">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-1925">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1925">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (assemblyRef As AssemblyName, assemblySecurity As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(System::Reflection::AssemblyName ^ assemblyRef, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyRef" Type="System.Reflection.AssemblyName" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyRef"><span data-ttu-id="cc35c-1926">로드할 어셈블리를 설명하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1926">An object that describes the assembly to load.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="cc35c-1927">어셈블리 로드에 사용할 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1927">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="cc35c-1928"><see cref="T:System.Reflection.AssemblyName" />이 지정된 <see cref="T:System.Reflection.Assembly" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1928">Loads an <see cref="T:System.Reflection.Assembly" /> given its <see cref="T:System.Reflection.AssemblyName" />.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1929">로드된 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1929">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1930">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1930">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="cc35c-1931">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1931">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="cc35c-1932">다른 응용 프로그램 도메인, 어셈블리 로드를 사용 하 여 메서드 같은 <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1932">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="cc35c-1933">이 메서드의 모든 오버 로드에 공통 된 정보를 참조 하십시오.는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1933">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1934"><paramref name="assemblyRef" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1934"><paramref name="assemblyRef" /> is <see langword="null" /></span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-1935"><paramref name="assemblyRef" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1935"><paramref name="assemblyRef" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-1936"><paramref name="assemblyRef" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1936"><paramref name="assemblyRef" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1937">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1937">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1938">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyRef" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1938">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1939">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1939">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1940">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1940">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1941">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1941">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-1942">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1942">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1943">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1943">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1944">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1944">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1945">"file://" 폼에 없는 경로 읽기 위한 또는 "\\\UNC\dir\\" 또는 "c:\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1945">for reading a path that is not in the form "file://" or "\\\UNC\dir\\" or "c:\\".</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (string assemblyString, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(string assemblyString, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (assemblyString As String, assemblySecurity As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(System::String ^ assemblyString, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.String,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyString" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyString"><span data-ttu-id="cc35c-1946">어셈블리의 표시 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1946">The display name of the assembly.</span></span> <span data-ttu-id="cc35c-1947"><see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1947">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="cc35c-1948">어셈블리 로드에 사용할 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1948">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="cc35c-1949">표시 이름이 지정된 <see cref="T:System.Reflection.Assembly" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1949">Loads an <see cref="T:System.Reflection.Assembly" /> given its display name.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1950">로드된 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1950">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1951">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1951">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="cc35c-1952">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1952">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="cc35c-1953">다른 응용 프로그램 도메인, 어셈블리 로드를 사용 하 여 메서드 같은 <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1953">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="cc35c-1954">이 메서드의 모든 오버 로드에 공통 된 정보를 참조 하십시오.는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1954">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1955"><paramref name="assemblyString" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1955"><paramref name="assemblyString" /> is <see langword="null" /></span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="cc35c-1956"><paramref name="assemblyString" />가 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1956"><paramref name="assemblyString" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-1957"><paramref name="assemblyString" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1957"><paramref name="assemblyString" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1958">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1958">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1959">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyString" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1959">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1960">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1960">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1961">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1961">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1962">증명 정보로 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1962">to load an assembly with evidence.</span></span> <span data-ttu-id="cc35c-1963">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1963">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1964">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1964">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-1965">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1965">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1966">"file://" 폼에 없는 경로 읽기 위한 또는 "\\\UNC\dir\\" 또는 "c:\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1966">for reading a path that is not in the form "file://" or "\\\UNC\dir\\" or "c:\\".</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(unsigned int8[] rawAssembly, unsigned int8[] rawSymbolStore, class System.Security.Policy.Evidence securityEvidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (rawAssembly As Byte(), rawSymbolStore As Byte(), securityEvidence As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly, cli::array &lt;System::Byte&gt; ^ rawSymbolStore, System::Security::Policy::Evidence ^ securityEvidence);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" />
        <Parameter Name="securityEvidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="cc35c-1967">내보낸 어셈블리가 포함된 COFF 기반 이미지인 <see langword="byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1967">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</span></span></param>
        <param name="rawSymbolStore"><span data-ttu-id="cc35c-1968">어셈블리의 기호를 나타내는 원시 바이트가 포함된 <see langword="byte" /> 형식의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1968">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</span></span></param>
        <param name="securityEvidence"><span data-ttu-id="cc35c-1969">어셈블리 로드에 사용할 증명 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1969">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="cc35c-1970">내보낸 <see cref="T:System.Reflection.Assembly" />가 들어 있는 COFF(Common Object File Format) 기반 이미지를 사용한 <see cref="T:System.Reflection.Assembly" />를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1970">Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image containing an emitted <see cref="T:System.Reflection.Assembly" />.</span></span> <span data-ttu-id="cc35c-1971"><see cref="T:System.Reflection.Assembly" />에 대한 기호를 나타내는 원시 바이트도 로드됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1971">The raw bytes representing the symbols for the <see cref="T:System.Reflection.Assembly" /> are also loaded.</span></span></summary>
        <returns><span data-ttu-id="cc35c-1972">로드된 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1972">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1973">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)],이 메서드를 사용 하 여 로드 되는 어셈블리의 신뢰 수준은 응용 프로그램 도메인의 신뢰 수준을와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1973">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</span></span>  
  
 <span data-ttu-id="cc35c-1974">이 메서드는 현재 응용 프로그램 도메인에서 어셈블리를 로드에 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1974">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="cc35c-1975">이 메서드는 정적을 호출할 수 없습니다 상호 운용성 호출자에 대 한 편의 위해 제공 됩니다 <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1975">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="cc35c-1976">다른 응용 프로그램 도메인, 어셈블리 로드를 사용 하 여 메서드 같은 <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1976">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="cc35c-1977">이 메서드의 모든 오버 로드에 공통 된 정보를 참조 하십시오.는 <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1977">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-1978">다음 샘플 원시 어셈블리를 로드 하의 사용을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1978">The following sample demonstrates the use of loading a raw assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1979">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1979">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-1980">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1980">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_LoadRaw#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_LoadRaw/CPP/loadraw.cpp#1)]
 [!code-csharp[AppDomain_LoadRaw#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_LoadRaw/CS/loadraw.cs#1)]
 [!code-vb[AppDomain_LoadRaw#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_LoadRaw/VB/loadraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-1981"><paramref name="rawAssembly" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-1981"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="cc35c-1982"><paramref name="rawAssembly" />는 유효한 어셈블리가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1982"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
 <span data-ttu-id="cc35c-1983">또는</span><span class="sxs-lookup"><span data-stu-id="cc35c-1983">-or-</span></span>  
  
 <span data-ttu-id="cc35c-1984">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="rawAssembly" />이 이후 버전으로 컴파일되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1984">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-1985">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1985">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="cc35c-1986">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1986">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="cc35c-1987"><paramref name="securityEvidence" />이 <see langword="null" />가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1987"><paramref name="securityEvidence" /> is not <see langword="null" />.</span></span> <span data-ttu-id="cc35c-1988">레거시 CAS 정책을 사용하지 않을 때는 <paramref name="securityEvidence" />는 <see langword="null" />이 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1988">When legacy CAS policy is not enabled, <paramref name="securityEvidence" /> should be <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-1989">증명 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1989">to provide evidence.</span></span> <span data-ttu-id="cc35c-1990">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-1990">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span> <span data-ttu-id="cc35c-1991">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1991">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-1992">파일 또는 디렉터리에서 읽고 자체 경로에 대 한 정보에 대 한 액세스에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1992">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="cc35c-1993">연관 된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1993">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="cc35c-1994">"file://" 폼에 없는 경로 읽기 위한 또는 "\\\UNC\dir\\" 또는 "c:\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1994">for reading a path that is not in the form "file://" or "\\\UNC\dir\\" or "c:\\".</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="MonitoringIsEnabled">
      <MemberSignature Language="C#" Value="public static bool MonitoringIsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool MonitoringIsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringIsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property MonitoringIsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool MonitoringIsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-1995">현재 프로세스에 응용 프로그램 도메인의 CPU 및 메모리 모니터링을 사용할 수 있는지를 나타내는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1995">Gets or sets a value that indicates whether CPU and memory monitoring of application domains is enabled for the current process.</span></span> <span data-ttu-id="cc35c-1996">프로세스에 모니터링을 사용할 수 있는 경우 사용하지 못하도록 설정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1996">Once monitoring is enabled for a process, it cannot be disabled.</span></span></summary>
        <value>
          <span data-ttu-id="cc35c-1997">모니터링을 사용할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1997"><see langword="true" /> if monitoring is enabled; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-1998">이 `static` 속성 (`Shared` Visual Basic에서 속성)의 CPU 및 메모리 모니터링 프로세스의 모든 응용 프로그램 도메인을 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1998">This `static` property (`Shared` property in Visual Basic) controls CPU and memory monitoring of all the application domains in the process.</span></span>  
  
 <span data-ttu-id="cc35c-1999">이 속성을 설정 하려고 하면 `false`, <xref:System.ArgumentException> 예외가 throw 되는 속성의 현재 값은 경우에 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-1999">If you attempt to set this property to `false`, a <xref:System.ArgumentException> exception is thrown, even if the current value of the property is `false`.</span></span>  
  
 <span data-ttu-id="cc35c-2000">모니터링이 활성화 되 면 사용할 수 있습니다는 <xref:System.AppDomain.MonitoringSurvivedMemorySize%2A>, <xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A>, <xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A>, 및 <xref:System.AppDomain.MonitoringTotalProcessorTime%2A> 인스턴스 속성을 개별 응용 프로그램 도메인의 CPU 및 메모리 사용을 모니터링 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2000">Once monitoring is enabled, you can use the <xref:System.AppDomain.MonitoringSurvivedMemorySize%2A>, <xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A>, <xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A>, and <xref:System.AppDomain.MonitoringTotalProcessorTime%2A> instance properties to monitor CPU and memory use of individual application domains.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="cc35c-2001">현재 프로세스가 이 속성에 값 <see langword="false" />를 할당하려고 했습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2001">The current process attempted to assign the value <see langword="false" /> to this property.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2002">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2002">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2003">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2003">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="MonitoringSurvivedMemorySize">
      <MemberSignature Language="C#" Value="public long MonitoringSurvivedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MonitoringSurvivedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringSurvivedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MonitoringSurvivedMemorySize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MonitoringSurvivedMemorySize { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-2004">현재 응용 프로그램 도메인에서 참조하도록 알려진 마지막 컬렉션 후에도 유지되는 바이트 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2004">Gets the number of bytes that survived the last collection and that are known to be referenced by the current application domain.</span></span></summary>
        <value><span data-ttu-id="cc35c-2005">유지되는 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2005">The number of surviving bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2006">통계는 각 가비지 컬렉션으로 업데이트 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2006">The statistics are updated with each garbage collection.</span></span> <span data-ttu-id="cc35c-2007">그러나을 정확 하 게 한 전체 차단 컬렉션 후에 보장 됩니다. 즉, 모든 세대를 포함 하 고 수집 하는 동안 응용 프로그램을 중지 하는 컬렉션에 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2007">However, they are guaranteed to be accurate only after a full, blocking collection; that is, a collection that includes all generations and that stops the application while collection occurs.</span></span> <span data-ttu-id="cc35c-2008">예를 들어는 <xref:System.GC.Collect?displayProperty=nameWithType> 전체 차단 수집을 수행 하는 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2008">For example, the <xref:System.GC.Collect?displayProperty=nameWithType> method overload performs a full, blocking collection.</span></span> <span data-ttu-id="cc35c-2009">(동시 컬렉션은 백그라운드에서 실행 및 응용 프로그램을 차단 하지 않습니다.)</span><span class="sxs-lookup"><span data-stu-id="cc35c-2009">(Concurrent collection occurs in the background and does not block the application.)</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cc35c-2010"><see langword="static" />(Visual Basic에서는 <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> 속성은 <see langword="false" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2010">The <see langword="static" /> (<see langword="Shared" /> in Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> property is set to <see langword="false" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2011">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2011">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2012">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2012">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="MonitoringSurvivedProcessMemorySize">
      <MemberSignature Language="C#" Value="public static long MonitoringSurvivedProcessMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 MonitoringSurvivedProcessMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringSurvivedProcessMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MonitoringSurvivedProcessMemorySize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long MonitoringSurvivedProcessMemorySize { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-2013">프로세스의 모든 응용 프로그램 도메인에 대한 마지막 컬렉션에서 유지된 총 바이트 수를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2013">Gets the total bytes that survived from the last collection for all application domains in the process.</span></span></summary>
        <value><span data-ttu-id="cc35c-2014">프로세스의 유지되는 총 바이트 수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2014">The total number of surviving bytes for the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2015">힙의 관리 되는 바이트 수가 현재 보유 하에이 숫자 나타냅니다 전체 차단 수집 후 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2015">After a full, blocking collection, this number represents the number of bytes currently held live on managed heaps.</span></span> <span data-ttu-id="cc35c-2016">보고 된 수에 가까운 것은 <xref:System.GC.GetTotalMemory%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2016">It should be close to the number reported by the <xref:System.GC.GetTotalMemory%2A> method.</span></span> <span data-ttu-id="cc35c-2017">임시 컬렉션 후이 수 바이트 수가 현재 저장 나타냅니다 라이브 임시 세대에서입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2017">After an ephemeral collection, this number represents the number of bytes currently held live in ephemeral generations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cc35c-2018"><see langword="static" />(Visual Basic에서는 <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> 속성은 <see langword="false" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2018">The <see langword="static" /> (<see langword="Shared" /> in Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> property is set to <see langword="false" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2019">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2019">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2020">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2020">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="MonitoringTotalAllocatedMemorySize">
      <MemberSignature Language="C#" Value="public long MonitoringTotalAllocatedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MonitoringTotalAllocatedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringTotalAllocatedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MonitoringTotalAllocatedMemorySize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MonitoringTotalAllocatedMemorySize { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-2021">응용 프로그램 도메인이 만들어진 후 실행된 모든 메모리 할당의 총 크기(바이트)를 수집된 메모리의 크기를 제외하지 않고 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2021">Gets the total size, in bytes, of all memory allocations that have been made by the application domain since it was created, without subtracting memory that has been collected.</span></span></summary>
        <value><span data-ttu-id="cc35c-2022">모든 메모리 할당의 총 크기입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2022">The total size of all memory allocations.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cc35c-2023"><see langword="static" />(Visual Basic에서는 <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> 속성은 <see langword="false" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2023">The <see langword="static" /> (<see langword="Shared" /> in Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> property is set to <see langword="false" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2024">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2024">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2025">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2025">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="MonitoringTotalProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan MonitoringTotalProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MonitoringTotalProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringTotalProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MonitoringTotalProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MonitoringTotalProcessorTime { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-2026">프로세스가 시작된 후 현재 응용 프로그램 도메인에서 실행되는 동안 모든 스레드에서 사용된 총 프로세서 시간을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2026">Gets the total processor time that has been used by all threads while executing in the current application domain, since the process started.</span></span></summary>
        <value><span data-ttu-id="cc35c-2027">현재 응용 프로그램 도메인의 총 프로세서 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2027">Total processor time for the current application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2028">각 스레드는 프로세스에서 해당 응용 프로그램 도메인에서 실행에 소요 된 시간을 포함 하는 응용 프로그램 도메인에 대 한 보고 되는 총 시간입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2028">The total time that is reported for an application domain includes the time each thread in the process spent executing in that application domain.</span></span>  
  
 <span data-ttu-id="cc35c-2029">비관리 코드를 호출 하는 스레드는 응용 프로그램 도메인에 여전히 연결 되며 비관리 코드 생성 되었으므로 호출 응용 프로그램 도메인에 대 한 보고를 실행 하는 데 프로세서 시간이 걸리는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2029">A thread that calls into unmanaged code is still associated with an application domain, and the processor time spent executing the unmanaged code is reported for the application domain where the call was made.</span></span>  
  
 <span data-ttu-id="cc35c-2030">스레드가 차단 또는 중지는 사용 하지 않습니다 프로세서 시간 면 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2030">When a thread is blocked or sleeping, it does not consume processor time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cc35c-2031"><see langword="static" />(Visual Basic에서는 <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> 속성은 <see langword="false" />로 설정됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2031">The <see langword="static" /> (<see langword="Shared" /> in Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> property is set to <see langword="false" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2032">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2032">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2033">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2033">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PermissionSet">
      <MemberSignature Language="C#" Value="public System.Security.PermissionSet PermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet PermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.PermissionSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::PermissionSet ^ PermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-2034">샌드박스가 적용된 응용 프로그램 도메인의 권한 집합을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2034">Gets the permission set of a sandboxed application domain.</span></span></summary>
        <value><span data-ttu-id="cc35c-2035">샌드박스가 적용된 응용 프로그램 도메인의 권한 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2035">The permission set of the sandboxed application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2036">사용 하 여 만든 샌드 박싱된 응용 프로그램 도메인에서 <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> 메서드 오버 로드는 형식이 같은 권한 집합이 수 있으며 응용 프로그램 도메인에 로드 되는 부분적으로 신뢰할 수 있는 모든 어셈블리에 동일한 사용 권한 집합이 부여 됩니다 즉, 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2036">Sandboxed application domains that were created by using the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method overload have a homogenous set of permissions; that is, the same set of permissions is granted to all partially trusted assemblies that are loaded into the application domain.</span></span> <span data-ttu-id="cc35c-2037">샌드 박싱된 응용 프로그램 도메인에는 필요에 따라이 사용 권한을 설정 하 고 대신 완전 신뢰로 실행에서 제외 되는 강력한 이름의 어셈블리의 목록을 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2037">A sandboxed application domain optionally has a list of strong-named assemblies that are exempt from this permission set, and instead run with full trust.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2038">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2038">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2039">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2039">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.AppDomain.IsHomogenous" />
      </Docs>
    </Member>
    <Member MemberName="ProcessExit">
      <MemberSignature Language="C#" Value="public event EventHandler ProcessExit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ProcessExit" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.ProcessExit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ProcessExit As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ ProcessExit;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.ProcessExit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-2040">기본 응용 프로그램 도메인의 부모 프로세스가 종료하면 이 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2040">Occurs when the default application domain's parent process exits.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2041"><xref:System.EventHandler> 이 이벤트는 파일 닫기 등의 종료 작업을 수행할 수에 대 한 프로세스가 종료 되기 전에 저장소를 등의 해제 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2041">The <xref:System.EventHandler> for this event can perform termination activities, such as closing files, releasing storage and so on, before the process ends.</span></span>  
  
 <span data-ttu-id="cc35c-2042">.NET Framework 버전 2.0부터,이 이벤트는 이벤트 처리기를 등록 하는 각 응용 프로그램 도메인에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2042">Beginning with the .NET Framework version 2.0, this event is raised in each application domain that registers an event handler.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-2043">모든의 총 실행 시간 <xref:System.AppDomain.ProcessExit> 모든 종료자의 총 실행 시간 프로세스가 종료 될 때 제한 된 것 처럼 이벤트 처리기 제한 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2043">The total execution time of all <xref:System.AppDomain.ProcessExit> event handlers is limited, just as the total execution time of all finalizers is limited at process shutdown.</span></span> <span data-ttu-id="cc35c-2044">기본값은 2 초입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2044">The default is two seconds.</span></span> <span data-ttu-id="cc35c-2045">관리 되지 않는 호스트를 호출 하 여이 실행 시간을 변경할 수는 [iclrpolicymanager:: Settimeout](~/docs/framework/unmanaged-api/hosting/iclrpolicymanager-settimeout-method.md) 메서드는 [OPR_ProcessExit](~/docs/framework/unmanaged-api/hosting/eclroperation-enumeration.md) 열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2045">An unmanaged host can change this execution time by calling the [ICLRPolicyManager::SetTimeout](~/docs/framework/unmanaged-api/hosting/iclrpolicymanager-settimeout-method.md) method with the [OPR_ProcessExit](~/docs/framework/unmanaged-api/hosting/eclroperation-enumeration.md) enumeration value.</span></span>  
  
 <span data-ttu-id="cc35c-2046">.NET Framework 버전 1.0 및 1.1에서는이 이벤트는 기본 응용 프로그램 도메인 에서만 발생 하 고 기본 응용 프로그램 도메인에는 이벤트 처리기가 등록 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2046">In the .NET Framework versions 1.0 and 1.1, this event is raised only in the default application domain, and only if an event handler is registered in the default application domain.</span></span>  
  
 <span data-ttu-id="cc35c-2047">이 이벤트에 대 한 이벤트 처리기를 등록 하려면 필요한 사용 권한이 있어야 또는 <xref:System.Security.SecurityException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2047">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="cc35c-2048">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2048">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyAssemblyResolve">
      <MemberSignature Language="C#" Value="public event ResolveEventHandler ReflectionOnlyAssemblyResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ResolveEventHandler ReflectionOnlyAssemblyResolve" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.ReflectionOnlyAssemblyResolve" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ReflectionOnlyAssemblyResolve As ResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event ResolveEventHandler ^ ReflectionOnlyAssemblyResolve;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-2049">어셈블리 전용 컨텍스트에서 어셈블리 확인이 실패하면 이 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2049">Occurs when the resolution of an assembly fails in the reflection-only context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2050">리플렉션 전용 컨텍스트에 종속성 자동으로 확인 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2050">In the reflection-only context, dependencies are not resolved automatically.</span></span> <span data-ttu-id="cc35c-2051">미리 로드 되거나이 이벤트 처리기에 의해 반환 될 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2051">They must be preloaded or returned by the handler for this event.</span></span> <span data-ttu-id="cc35c-2052">이 이벤트는 어셈블리를 리플렉션 전용 컨텍스트에 로드 되지 않는 종속성에 있을 때 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2052">This event is raised when an assembly has a dependency that is not already loaded into the reflection-only context.</span></span> <span data-ttu-id="cc35c-2053">누락 된 종속성으로 지정 된 <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2053">The missing dependency is specified by the <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="cc35c-2054"><xref:System.ResolveEventHandler> 이 이벤트는 종속성을 충족 하는 어셈블리를 반환 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2054">The <xref:System.ResolveEventHandler> for this event must return an assembly that satisfies the dependency.</span></span> <span data-ttu-id="cc35c-2055">반환 된 어셈블리를 리플렉션 전용 컨텍스트에 로드 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2055">The assembly that is returned must be loaded into the reflection-only context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cc35c-2056">이 이벤트는 리플렉션 전용 컨텍스트에 로드 되는 어셈블리의 종속성이 누락에 대해서만 발생 (사용 하 여 예를 들어는 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType> 메서드).</span><span class="sxs-lookup"><span data-stu-id="cc35c-2056">This event is raised only for missing dependencies of the assembly that you are loading into the reflection-only context (for example, by using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType> method).</span></span> <span data-ttu-id="cc35c-2057">로드 하는 어셈블리를 찾을 수 없는 경우에 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2057">It is not raised if the assembly that you are loading cannot be found.</span></span>  
  
 <span data-ttu-id="cc35c-2058">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> 속성을 확인할 수 없는 어셈블리 로드를 요청한 어셈블리를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2058">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> property returns the assembly that requested the assembly load that could not be resolved.</span></span> <span data-ttu-id="cc35c-2059">요청한 어셈블리의 id를 알면 둘 이상의 버전을 사용할 수 있는 경우 올바른 버전의 종속성을 식별할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2059">Knowing the identity of the requesting assembly might be useful in identifying the correct version of the dependency, if more than one version is available.</span></span> <span data-ttu-id="cc35c-2060">자세한 내용은 <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2060">For more information, see <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="cc35c-2061">이 이벤트는 <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> 속성 정책 적용 하기 전에 어셈블리 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2061">For this event, the <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> property returns the assembly name before policy is applied.</span></span>  
  
 <span data-ttu-id="cc35c-2062">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2062">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2063">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2063">requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2064">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2064">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.ResolveEventArgs.RequestingAssembly" />
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyGetAssemblies">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly[] ReflectionOnlyGetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly[] ReflectionOnlyGetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ReflectionOnlyGetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function ReflectionOnlyGetAssemblies () As Assembly()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::Assembly ^&gt; ^ ReflectionOnlyGetAssemblies();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc35c-2065">응용 프로그램 도메인의 리플렉션 전용 컨텍스트로 로드된 어셈블리를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2065">Returns the assemblies that have been loaded into the reflection-only context of the application domain.</span></span></summary>
        <returns><span data-ttu-id="cc35c-2066">응용 프로그램 도메인의 리플렉션 전용 컨텍스트에 로드된 어셈블리를 나타내는 <see cref="T:System.Reflection.Assembly" /> 개체의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2066">An array of <see cref="T:System.Reflection.Assembly" /> objects that represent the assemblies loaded into the reflection-only context of the application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2067">이 메서드는 리플렉션 전용 컨텍스트에 로드 된 어셈블리를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2067">This method returns the assemblies that have been loaded into the reflection-only context.</span></span> <span data-ttu-id="cc35c-2068">실행을 위해 로드 된 어셈블리를 가져오려면는 <xref:System.AppDomain.GetAssemblies%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2068">To get the assemblies that have been loaded for execution, use the <xref:System.AppDomain.GetAssemblies%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-2069">다음 코드 예제에서는 실행 컨텍스트를 변환한 다음 리플렉션 전용 컨텍스트에 System.dll 어셈블리를 로드합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2069">The following code example loads the System.dll assembly into the execution context and then into the reflection-only context.</span></span> <span data-ttu-id="cc35c-2070"><xref:System.AppDomain.GetAssemblies%2A> 및 <xref:System.AppDomain.ReflectionOnlyGetAssemblies%2A> 메서드는 각 컨텍스트로 로드 된 어셈블리를 표시 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2070">The <xref:System.AppDomain.GetAssemblies%2A> and <xref:System.AppDomain.ReflectionOnlyGetAssemblies%2A> methods are used to display the assemblies loaded into each context.</span></span>  
  
 [!code-cpp[AppDomain.ReflectionOnlyGetAssemblies#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain.ReflectionOnlyGetAssemblies/CPP/reflectiononly.cpp#1)]
 [!code-csharp[AppDomain.ReflectionOnlyGetAssemblies#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain.ReflectionOnlyGetAssemblies/CS/reflectiononly.cs#1)]
 [!code-vb[AppDomain.ReflectionOnlyGetAssemblies#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain.ReflectionOnlyGetAssemblies/VB/reflectiononly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-2071">언로드된 응용 프로그램 도메인에서 작업을 시도한 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-2071">An operation is attempted on an unloaded application domain.</span></span></exception>
        <altmember cref="M:System.AppDomain.GetAssemblies" />
      </Docs>
    </Member>
    <Member MemberName="RelativeSearchPath">
      <MemberSignature Language="C#" Value="public string RelativeSearchPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RelativeSearchPath" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.RelativeSearchPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RelativeSearchPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RelativeSearchPath { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.RelativeSearchPath</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-2072">어셈블리 확인자에서 전용 어셈블리를 조사할 기본 디렉터리 아래의 경로를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2072">Gets the path under the base directory where the assembly resolver should probe for private assemblies.</span></span></summary>
        <value><span data-ttu-id="cc35c-2073">어셈블리 확인자에서 전용 어셈블리를 조사할 기본 디렉터리 아래의 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2073">The path under the base directory where the assembly resolver should probe for private assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2074">전용 어셈블리는 응용 프로그램과 동일한 디렉터리 구조에 배포 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2074">Private assemblies are deployed in the same directory structure as the application.</span></span> <span data-ttu-id="cc35c-2075">경로 지정 하는 경우는 <xref:System.AppDomain.RelativeSearchPath%2A> 속성은 아래에서 <xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>, 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2075">If the path specified by the <xref:System.AppDomain.RelativeSearchPath%2A> property is not under <xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>, it is ignored.</span></span>  
  
 <span data-ttu-id="cc35c-2076">이 속성 값을 사용 하 여 설정 반환 <xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2076">This property returns the value set using <xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-2077">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2077">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="cc35c-2078">경로 정보에 액세스 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2078">for access to the path information.</span></span> <span data-ttu-id="cc35c-2079">연관된 열거형: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-2079">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <altmember cref="P:System.AppDomainSetup.PrivateBinPath" />
      </Docs>
    </Member>
    <Member MemberName="ResourceResolve">
      <MemberSignature Language="C#" Value="public event ResolveEventHandler ResourceResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ResolveEventHandler ResourceResolve" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.ResourceResolve" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResourceResolve As ResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event ResolveEventHandler ^ ResourceResolve;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.ResourceResolve</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-2080">리소스가 어셈블리에서 올바르게 링크되거나 포함된 리소스가 아니어서 리소스 확인이 실패하면 이 이벤트가 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2080">Occurs when the resolution of a resource fails because the resource is not a valid linked or embedded resource in the assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2081"><xref:System.ResolveEventHandler> 에이 이벤트는 리소스가 포함 된 어셈블리를 찾아 반환 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2081">The <xref:System.ResolveEventHandler> for this event can attempt to locate the assembly containing the resource and return it.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cc35c-2082">파일이 없습니다. 올바른 연결 된 리소스에 대 한 있습니다 확인이 실패 하는 경우에이 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2082">This event is not raised if resolution fails because no file can be found for a valid linked resource.</span></span> <span data-ttu-id="cc35c-2083">이 이벤트는 발생 매니페스트 리소스 스트림을 찾을 수 없는 경우는 개별 리소스 키를 찾을 수 없는 경우는 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2083">It is raised if a manifest resource stream cannot be found, but it is not raised if an individual resource key cannot be found.</span></span>  
  
 <span data-ttu-id="cc35c-2084">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> 속성에 리소스를 요청한 어셈블리를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2084">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> property contains the assembly that requested the resource.</span></span> <span data-ttu-id="cc35c-2085">자세한 내용은 <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2085">For more information, see <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="cc35c-2086">이 이벤트에 대 한 이벤트 처리기를 등록 하려면 필요한 사용 권한이 있어야 또는 <xref:System.Security.SecurityException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2086">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="cc35c-2087">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2087">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2088">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2088">requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2089">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2089">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.ResolveEventArgs.RequestingAssembly" />
      </Docs>
    </Member>
    <Member MemberName="SetAppDomainPolicy">
      <MemberSignature Language="C#" Value="public void SetAppDomainPolicy (System.Security.Policy.PolicyLevel domainPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAppDomainPolicy(class System.Security.Policy.PolicyLevel domainPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAppDomainPolicy (domainPolicy As PolicyLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAppDomainPolicy(System::Security::Policy::PolicyLevel ^ domainPolicy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("AppDomain policy levels are obsolete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domainPolicy" Type="System.Security.Policy.PolicyLevel" />
      </Parameters>
      <Docs>
        <param name="domainPolicy"><span data-ttu-id="cc35c-2090">보안 정책 수준입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2090">The security policy level.</span></span></param>
        <summary><span data-ttu-id="cc35c-2091">이 응용 프로그램 도메인의 보안 정책 수준을 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2091">Establishes the security policy level for this application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2092">어셈블리에 로드 되기 전에이 메서드는 <xref:System.AppDomain> 보안 정책 적용 하기 위해에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2092">Call this method before an assembly is loaded into the <xref:System.AppDomain> in order for the security policy to have effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-2093">다음 예제에서는 사용 하는 방법을 <xref:System.AppDomain.SetAppDomainPolicy%2A> 메서드를 응용 프로그램 도메인의 보안 정책 수준을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2093">The following example demonstrates how to use the <xref:System.AppDomain.SetAppDomainPolicy%2A> method to set the security policy level of an application domain.</span></span>  
  
 [!code-cpp[ADSetAppDomainPolicy#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADSetAppDomainPolicy/CPP/adsetappdomainpolicy.cpp#1)]
 [!code-csharp[ADSetAppDomainPolicy#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADSetAppDomainPolicy/CS/adsetappdomainpolicy.cs#1)]
 [!code-vb[ADSetAppDomainPolicy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADSetAppDomainPolicy/VB/adsetappdomainpolicy.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-2094"><paramref name="domainPolicy" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-2094"><paramref name="domainPolicy" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Policy.PolicyException"><span data-ttu-id="cc35c-2095">보안 정책 수준이 이미 설정되어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-2095">The security policy level has already been set.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-2096">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2096">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2097">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2097">requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2098">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2098">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetCachePath">
      <MemberSignature Language="C#" Value="public void SetCachePath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCachePath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetCachePath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCachePath (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetCachePath(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.SetCachePath(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use AppDomainSetup.SetCachePath")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="cc35c-2099">섀도 복사본 위치에 대한 정규화된 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2099">The fully qualified path to the shadow copy location.</span></span></param>
        <summary><span data-ttu-id="cc35c-2100">지정한 디렉터리 경로를 어셈블리가 섀도 복사되는 위치로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2100">Establishes the specified directory path as the location where assemblies are shadow copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2101">캐시 경로 무시 됩니다는 <xref:System.AppDomainSetup.ApplicationName%2A> 속성이 설정 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2101">The cache path is ignored if the <xref:System.AppDomainSetup.ApplicationName%2A> property is not set.</span></span> <span data-ttu-id="cc35c-2102"><xref:System.AppDomainSetup.CachePath%2A?displayProperty=nameWithType> 속성을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2102">See the <xref:System.AppDomainSetup.CachePath%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="cc35c-2103">섀도 복사에 대 한 자세한 내용은 참조 [어셈블리 섀도 복사](~/docs/framework/app-domains/shadow-copy-assemblies.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2103">For more information on shadow copying see [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-2104">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2104">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2105">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2105">requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2106">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2106">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.AppDomainSetup.CachePath" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="cc35c-2107">응용 프로그램 도메인 속성에 값을 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2107">Assigns a value to an application domain property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string name, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string name, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (name As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetData(System::String ^ name, System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.SetData(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-2108">만들거나 변경할 사용자 정의 응용 프로그램 도메인 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2108">The name of a user-defined application domain property to create or change.</span></span></param>
        <param name="data"><span data-ttu-id="cc35c-2109">속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2109">The value of the property.</span></span></param>
        <summary><span data-ttu-id="cc35c-2110">지정한 응용 프로그램 도메인 속성에 지정한 값을 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2110">Assigns the specified value to the specified application domain property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2111">를 삽입 하려면이 메서드를 사용 하거나이 인스턴스의 속성을 설명 하는 이름-데이터 쌍의 내부 캐시에 있는 항목의 값을 수정 <xref:System.AppDomain>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2111">Use this method to insert an entry, or modify the value of an entry in an internal cache of name-data pairs that describe properties of this instance of <xref:System.AppDomain>.</span></span>  
  
 <span data-ttu-id="cc35c-2112">캐시는 자동으로 응용 프로그램 도메인이 만들어질 때 삽입 하는 미리 정의 된 시스템 항목을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2112">The cache automatically contains predefined system entries that are inserted when the application domain is created.</span></span> <span data-ttu-id="cc35c-2113">삽입 하거나이 메서드를 사용 하 여 시스템 항목을 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2113">You cannot insert or modify system entries with this method.</span></span> <span data-ttu-id="cc35c-2114">시스템 항목을 수정 하려고 시도 하는 메서드 호출에 영향을 주지 않습니다. 메서드는 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2114">A method call that attempts to modify a system entry has no effect; the method does not throw an exception.</span></span> <span data-ttu-id="cc35c-2115">와 시스템 항목의 값을 검사할 수는 <xref:System.AppDomain.GetData%2A> 메서드나 해당 하는 <xref:System.AppDomainSetup> 속성에 설명 된 <xref:System.AppDomain.GetData%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2115">You can inspect the values of system entries with the <xref:System.AppDomain.GetData%2A> method, or the equivalent <xref:System.AppDomainSetup> properties described in <xref:System.AppDomain.GetData%2A>.</span></span>  
  
 <span data-ttu-id="cc35c-2116">값으로 "REGEX_DEFAULT_MATCH_TIMEOUT" 공급으로 정규식 패턴을 평가 하기 위한 기본 제한 시간 간격의 값을 설정 하려면이 메서드를 호출할 수는 `name` 인수 및 <xref:System.TimeSpan> 제한 시간을 나타내는 값입니다 간격의 값으로는 `data` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2116">You can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply "REGEX_DEFAULT_MATCH_TIMEOUT" as the value of the `name` argument and a <xref:System.TimeSpan> value that represents the timeout interval as the value of the `data` argument.</span></span> <span data-ttu-id="cc35c-2117">수도 삽입 또는 수정 사용자 정의 이름-데이터 쌍이 방법을 사용 하 고 수와 해당 값을 검사할는 <xref:System.AppDomain.GetData%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2117">You can also insert or modify your own user defined name-data pairs with this method and inspect their values with the <xref:System.AppDomain.GetData%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-2118">다음 예제에서는 사용 하는 방법을 <xref:System.AppDomain.SetData%28System.String%2CSystem.Object%29> 메서드는 새 값 쌍을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2118">The following example demonstrates how to use the <xref:System.AppDomain.SetData%28System.String%2CSystem.Object%29> method to create a new value pair.</span></span> <span data-ttu-id="cc35c-2119">이 예제에서는 다음 사용 하 여는 <xref:System.AppDomain.GetData%2A> 메서드는 값을 검색 하 고 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2119">The example then uses the <xref:System.AppDomain.GetData%2A> method to retrieve the value, and displays it to the console.</span></span>  
  
 [!code-cpp[ADGetData#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADGetData/CPP/adgetdata.cpp#1)]
 [!code-csharp[ADGetData#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADGetData/CS/adgetdata.cs#1)]
 [!code-vb[ADGetData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADGetData/VB/adgetdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-2120">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2120">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2121">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2121">requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2122">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2122">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.AppDomain.GetData(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string name, object data, System.Security.IPermission permission);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetData(string name, object data, class System.Security.IPermission permission) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (name As String, data As Object, permission As IPermission)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ name, System::Object ^ data, System::Security::IPermission ^ permission);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="permission" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="cc35c-2123">만들거나 변경할 사용자 정의 응용 프로그램 도메인 속성의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2123">The name of a user-defined application domain property to create or change.</span></span></param>
        <param name="data"><span data-ttu-id="cc35c-2124">속성 값입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2124">The value of the property.</span></span></param>
        <param name="permission"><span data-ttu-id="cc35c-2125">속성을 검색할 때 호출자의 요청에 대한 권한입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2125">The permission to demand of the caller when the property is retrieved.</span></span></param>
        <summary><span data-ttu-id="cc35c-2126">속성을 검색할 때 호출자의 요청에 대해 지정된 권한을 사용하여 지정한 응용 프로그램 도메인 속성에 지정한 값을 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2126">Assigns the specified value to the specified application domain property, with a specified permission to demand of the caller when the property is retrieved.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2127">이 메서드를 사용 하 여 응용 프로그램 도메인의 속성을 설명 하는 이름/데이터 쌍의 내부 캐시에 사용자 고유의 사용자 지정 항목을 삽입 하거나 수정할 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2127">Use this method to insert or modify your own user-defined entries in an internal cache of name/data pairs that describe properties of the application domain.</span></span> <span data-ttu-id="cc35c-2128">항목을 삽입 하는 경우 항목을 검색할 때 적용할 권한 요청을 지정할 수 있습니다. 값으로 "REGEX_DEFAULT_MATCH_TIMEOUT" 공급으로 정규식 패턴을 평가 하기 위한 기본 제한 시간 간격의 값을 설정 하려면이 메서드를 호출할 수는 또한는 `name` 인수 및 <xref:System.TimeSpan> 를 나타내는 값은 제한 시간 간격의 값으로는 `data` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2128">When you insert an entry, you can specify a permission demand to enforce when the entry is retrieved.In addition, you can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply "REGEX_DEFAULT_MATCH_TIMEOUT" as the value of the `name` argument and a <xref:System.TimeSpan> value that represents the timeout interval as the value of the `data` argument.</span></span>  
  
 <span data-ttu-id="cc35c-2129">시스템 정의 속성 문자열을 보안 요청을 할당 하려면이 메서드를 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2129">You cannot use this method to assign a security demand to a system-defined property string.</span></span>  
  
 <span data-ttu-id="cc35c-2130">캐시는 자동으로 응용 프로그램 도메인이 만들어질 때 삽입 하는 미리 정의 된 시스템 항목을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2130">The cache automatically contains predefined system entries that are inserted when the application domain is created.</span></span> <span data-ttu-id="cc35c-2131">삽입 하거나이 메서드를 사용 하 여 시스템 항목을 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2131">You cannot insert or modify system entries with this method.</span></span> <span data-ttu-id="cc35c-2132">시스템 항목을 수정 하려고 시도 하는 메서드 호출에 영향을 주지 않습니다. 메서드는 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2132">A method call that attempts to modify a system entry has no effect; the method does not throw an exception.</span></span> <span data-ttu-id="cc35c-2133">와 시스템 항목의 값을 검사할 수는 <xref:System.AppDomain.GetData%2A> 메서드 또는 해당 <xref:System.AppDomainSetup> 에 대 한 설명 섹션에 설명 된 속성의 <xref:System.AppDomain.GetData%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2133">You can inspect the values of system entries with the <xref:System.AppDomain.GetData%2A> method or the equivalent <xref:System.AppDomainSetup> properties described in the Remarks section for the <xref:System.AppDomain.GetData%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-2134"><paramref name="name" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-2134"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="cc35c-2135"><paramref name="name" />이 시스템 정의 속성 문자열을 지정하고 <paramref name="permission" /> 값이 <see langword="null" />이 아닌 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-2135"><paramref name="name" /> specifies a system-defined property string and <paramref name="permission" /> is not <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2136">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2136">requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2137">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2137">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetDynamicBase">
      <MemberSignature Language="C#" Value="public void SetDynamicBase (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDynamicBase(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetDynamicBase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDynamicBase (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDynamicBase(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use AppDomainSetup.DynamicBase")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="cc35c-2138">동적 어셈블리를 저장하는 하위 디렉터리의 기본 디렉터리인 정규화된 경로입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2138">The fully qualified path that is the base directory for subdirectories where dynamic assemblies are stored.</span></span></param>
        <summary><span data-ttu-id="cc35c-2139">지정한 디렉터리 경로를 동적으로 생성된 파일을 저장하고 액세스하는 하위 디렉터리의 기본 디렉터리로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2139">Establishes the specified directory path as the base directory for subdirectories where dynamically generated files are stored and accessed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2140">이 메서드는 설정의 <xref:System.AppDomainSetup.DynamicBase%2A> 속성의 내부 <xref:System.AppDomainSetup> 이 인스턴스와 연결 된입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2140">This method sets the <xref:System.AppDomainSetup.DynamicBase%2A> property of the internal <xref:System.AppDomainSetup> associated with this instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-2141">이 메서드는 이전 이제 하며 새로운 개발에 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2141">This method is now obsolete, and should not be used for new development.</span></span> <span data-ttu-id="cc35c-2142">클래스 대신 사용 하는 방법을 보여 주는 다음 예제는 <xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2142">The following example shows how to use the non-obsolete alternative, the <xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="cc35c-2143">참조에 대 한 설명은이 예제는 <xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType> 속성 또는 <xref:System.AppDomain.DynamicDirectory%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2143">For an explanation of this example, see the <xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType> property or the <xref:System.AppDomain.DynamicDirectory%2A> property.</span></span>  
  
 [!code-cpp[ADDynamicBase#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADDynamicBase/CPP/addynamicbase.cpp#1)]
 [!code-csharp[ADDynamicBase#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADDynamicBase/CS/addynamicbase.cs#1)]
 [!code-vb[ADDynamicBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADDynamicBase/VB/addynamicbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-2144">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2144">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2145">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2145">requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2146">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2146">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.AppDomainSetup.DynamicBase" />
      </Docs>
    </Member>
    <Member MemberName="SetPrincipalPolicy">
      <MemberSignature Language="C#" Value="public void SetPrincipalPolicy (System.Security.Principal.PrincipalPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPrincipalPolicy(valuetype System.Security.Principal.PrincipalPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPrincipalPolicy (policy As PrincipalPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPrincipalPolicy(System::Security::Principal::PrincipalPolicy policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Principal.PrincipalPolicy" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="cc35c-2147">스레드에 연결할 Principal 개체의 형식을 지정하는 <see cref="T:System.Security.Principal.PrincipalPolicy" /> 값 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2147">One of the <see cref="T:System.Security.Principal.PrincipalPolicy" /> values that specifies the type of the principal object to attach to threads.</span></span></param>
        <summary><span data-ttu-id="cc35c-2148">이 응용 프로그램 도메인에서 실행되는 동안 스레드가 특정 보안 주체에 바인딩하려는 경우 Principal 개체 및 Identity 개체를 스레드에 연결하는 방법을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2148">Specifies how principal and identity objects should be attached to a thread if the thread attempts to bind to a principal while executing in this application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2149">이 값으로 설정만 적용 됩니다 사용 하기 전에 설정 하는 경우는 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2149">Setting this value will only be effective if you set it before using the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="cc35c-2150">예를 들어, 설정한 경우 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> 주어진된 주 서버 (예: 일반 사용자)와 다음 사용 하 여는 <xref:System.AppDomain.SetPrincipalPolicy%2A> 설정 하는 메서드는 <xref:System.Security.Principal.PrincipalPolicy> 를 <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, 현재 보안 주체가 제너릭 주체 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2150">For example, if you set <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> to a given principal (for example, a generic principal) and then use the <xref:System.AppDomain.SetPrincipalPolicy%2A> method to set the <xref:System.Security.Principal.PrincipalPolicy> to <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, the current principal will remain the generic principal.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-2151">다음 예제에서는 결과 보여 줍니다.는 <xref:System.AppDomain.SetPrincipalPolicy%2A> 메서드를 응용 프로그램 도메인의 주 정책을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2151">The following example shows the effect on threads of using the <xref:System.AppDomain.SetPrincipalPolicy%2A> method to change the principal policy of the application domain.</span></span> <span data-ttu-id="cc35c-2152">사용한 결과를 보여 줍니다는 <xref:System.AppDomain.SetThreadPrincipal%2A> 스레드에 응용 프로그램 도메인에 연결할 수 있는 주체를 변경 하려면 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2152">It also shows the effect of using the <xref:System.AppDomain.SetThreadPrincipal%2A> method to change the principal that is available for attaching to threads in the application domain.</span></span>  
  
 [!code-cpp[ADPrincipal#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADPrincipal/CPP/adprincipal.cpp#1)]
 [!code-csharp[ADPrincipal#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADPrincipal/CS/adprincipal.cs#1)]
 [!code-vb[ADPrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADPrincipal/VB/adprincipal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-2153">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2153">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-2154">에 대 한 주 개체를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2154">for ability to manipulate the principal object.</span></span> <span data-ttu-id="cc35c-2155">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-2155">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span> <span data-ttu-id="cc35c-2156">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2156">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetShadowCopyFiles">
      <MemberSignature Language="C#" Value="public void SetShadowCopyFiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetShadowCopyFiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetShadowCopyFiles" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetShadowCopyFiles ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetShadowCopyFiles();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use AppDomainSetup.ShadowCopyFiles")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc35c-2157">섀도 복사를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2157">Turns on shadow copying.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2158">섀도 복사에 대 한 자세한 내용은 참조 하십시오. [어셈블리 섀도 복사](~/docs/framework/app-domains/shadow-copy-assemblies.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2158">For more information on shadow copying, see [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-2159">이 메서드는 이전 이제 하며 새로운 개발에 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2159">This method is now obsolete, and should not be used for new development.</span></span>  
  
 [!code-cpp[adproperties#1](~/samples/snippets/cpp/VS_Snippets_CLR/adproperties/CPP/adproperties.cpp#1)]
 [!code-csharp[adproperties#1](~/samples/snippets/csharp/VS_Snippets_CLR/adproperties/CS/adproperties.cs#1)]
 [!code-vb[adproperties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/adproperties/VB/adproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-2160">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2160">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2161">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2161">requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2162">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2162">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetShadowCopyPath">
      <MemberSignature Language="C#" Value="public void SetShadowCopyPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetShadowCopyPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetShadowCopyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetShadowCopyPath (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetShadowCopyPath(System::String ^ path);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.SetShadowCopyPath(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use AppDomainSetup.ShadowCopyDirectories")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="cc35c-2163">각 이름이 세미콜론으로 구분되는 디렉터리 이름 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2163">A list of directory names, where each name is separated by a semicolon.</span></span></param>
        <summary><span data-ttu-id="cc35c-2164">지정한 디렉터리 경로를 어셈블리가 섀도 복사되는 위치로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2164">Establishes the specified directory path as the location of assemblies to be shadow copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2165">섀도 복사본을 기본적으로 검색을 통해 발견 된 모든 어셈블리를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2165">By default, a shadow copy includes all assemblies found through probing.</span></span> <span data-ttu-id="cc35c-2166"><xref:System.AppDomain.SetShadowCopyPath%2A> 메서드 섀도 복사를 통해 지정 된 디렉터리의 어셈블리에 제한 `path`합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2166">The <xref:System.AppDomain.SetShadowCopyPath%2A> method restricts the shadow copy to the assemblies in the directories specified by `path`.</span></span>  
  
 <span data-ttu-id="cc35c-2167"><xref:System.AppDomain.SetShadowCopyPath%2A> 메서드는 어셈블리에 대 한 검색할 추가 디렉터리를 지정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2167">The <xref:System.AppDomain.SetShadowCopyPath%2A> method does not specify additional directories to be searched for assemblies.</span></span> <span data-ttu-id="cc35c-2168">어셈블리 섀도 복사에 이미 있어야 검색 경로에 예를 들어 아래 <xref:System.AppDomain.BaseDirectory%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2168">Assemblies to be shadow-copied must already be located in the search path, for example under <xref:System.AppDomain.BaseDirectory%2A>.</span></span> <span data-ttu-id="cc35c-2169"><xref:System.AppDomain.SetShadowCopyPath%2A> 메서드는 검색 경로 섀도 복사를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2169">The <xref:System.AppDomain.SetShadowCopyPath%2A> method specifies which search paths are eligible to be shadow-copied.</span></span>  
  
 <span data-ttu-id="cc35c-2170">이 메서드는 설정의 <xref:System.AppDomainSetup.ShadowCopyDirectories%2A> 속성의 내부 <xref:System.AppDomainSetup> 이 인스턴스와 연결 된입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2170">This method sets the <xref:System.AppDomainSetup.ShadowCopyDirectories%2A> property of the internal <xref:System.AppDomainSetup> associated with this instance.</span></span>  
  
 <span data-ttu-id="cc35c-2171">섀도 복사에 대 한 자세한 내용은 참조 하십시오. [어셈블리 섀도 복사](~/docs/framework/app-domains/shadow-copy-assemblies.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2171">For more information on shadow copying, see [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-2172">이 메서드는 이전 이제 하며 새로운 개발에 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2172">This method is now obsolete, and should not be used for new development.</span></span>  
  
 [!code-cpp[ADShadowCopy#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADShadowCopy/CPP/adshadowcopy.cpp#1)]
 [!code-csharp[ADShadowCopy#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADShadowCopy/CS/adshadowcopy.cs#1)]
 [!code-vb[ADShadowCopy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADShadowCopy/VB/adshadowcopy.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-2173">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2173">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2174">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2174">requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2175">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2175">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetThreadPrincipal">
      <MemberSignature Language="C#" Value="public void SetThreadPrincipal (System.Security.Principal.IPrincipal principal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetThreadPrincipal(class System.Security.Principal.IPrincipal principal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetThreadPrincipal (principal As IPrincipal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetThreadPrincipal(System::Security::Principal::IPrincipal ^ principal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Principal.IPrincipal" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="cc35c-2176">스레드에 연결할 Principal 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2176">The principal object to attach to threads.</span></span></param>
        <summary><span data-ttu-id="cc35c-2177">이 응용 프로그램 도메인에서 실행되는 동안 스레드가 특정 보안 주체에 바인딩하려는 경우 스레드에 연결되는 기본 Principal 개체를 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2177">Sets the default principal object to be attached to threads if they attempt to bind to a principal while executing in this application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cc35c-2178">다음 예제를 사용 하 여 결과 보여 줍니다.는 <xref:System.AppDomain.SetThreadPrincipal%2A> 응용 프로그램 도메인에서 실행 하는 스레드에 연결할 수 있는 주체를 변경 하려면 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2178">The following example shows the effect of using the <xref:System.AppDomain.SetThreadPrincipal%2A> method to change the principal that is available for attaching to threads that are executing in the application domain.</span></span> <span data-ttu-id="cc35c-2179">또한를 사용 하 여 스레드가에 미치는 영향 표시는 <xref:System.AppDomain.SetPrincipalPolicy%2A> 응용 프로그램 도메인의 보안 주체 정책을 변경 하려면 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2179">It also shows the effect on threads of using the <xref:System.AppDomain.SetPrincipalPolicy%2A> method to change the principal policy of the application domain.</span></span>  
  
 [!code-cpp[ADPrincipal#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADPrincipal/CPP/adprincipal.cpp#1)]
 [!code-csharp[ADPrincipal#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADPrincipal/CS/adprincipal.cs#1)]
 [!code-vb[ADPrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADPrincipal/VB/adprincipal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-2180"><paramref name="principal" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-2180"><paramref name="principal" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Policy.PolicyException"><span data-ttu-id="cc35c-2181">스레드 보안 주체가 이미 설정되어 있는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-2181">The thread principal has already been set.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-2182">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2182">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-2183">에 대 한 주 개체를 조작할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2183">for ability to manipulate the principal object.</span></span> <span data-ttu-id="cc35c-2184">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-2184">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span> <span data-ttu-id="cc35c-2185">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2185">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetupInformation">
      <MemberSignature Language="C#" Value="public AppDomainSetup SetupInformation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AppDomainSetup SetupInformation" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.SetupInformation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetupInformation As AppDomainSetup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AppDomainSetup ^ SetupInformation { AppDomainSetup ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomainSetup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-2186">이 인스턴스의 응용 프로그램 도메인 구성 정보를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2186">Gets the application domain configuration information for this instance.</span></span></summary>
        <value><span data-ttu-id="cc35c-2187">응용 프로그램 도메인 초기화 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2187">The application domain initialization information.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-2188">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2188">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ShadowCopyFiles">
      <MemberSignature Language="C#" Value="public bool ShadowCopyFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShadowCopyFiles" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.ShadowCopyFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShadowCopyFiles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShadowCopyFiles { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.ShadowCopyFiles</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-2189">응용 프로그램 도메인이 파일을 섀도 복사하도록 구성되어 있는지를 나타내는 표시를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2189">Gets an indication whether the application domain is configured to shadow copy files.</span></span></summary>
        <value>
          <span data-ttu-id="cc35c-2190">응용 프로그램 도메인이 파일을 섀도 복사하도록 구성되어 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2190"><see langword="true" /> if the application domain is configured to shadow copy files; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2191">자세한 내용은 참조 <xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=nameWithType> 및 [어셈블리 섀도 복사](~/docs/framework/app-domains/shadow-copy-assemblies.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2191">For more information, see <xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=nameWithType> and [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-2192">언로드된 응용 프로그램 도메인에서 작업이 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2192">The operation is attempted on an unloaded application domain.</span></span></exception>
        <altmember cref="P:System.AppDomainSetup.ShadowCopyFiles" />
      </Docs>
    </Member>
    <Member MemberName="System._AppDomain.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _AppDomain.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System._AppDomain.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.System#_AppDomain#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _AppDomain.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System._AppDomain.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = _AppDomain::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="cc35c-2193">나중에 사용하기 위해 예약되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2193">Reserved for future use.</span></span> <span data-ttu-id="cc35c-2194">IID_NULL이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2194">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="cc35c-2195">매핑할 전달된 이름의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2195">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="cc35c-2196">매핑할 이름의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2196">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="cc35c-2197">이름을 해석할 로캘 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2197">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="cc35c-2198">이름에 해당하는 ID를 받는 호출자가 할당한 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2198">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="cc35c-2199">이름 집합을 해당하는 디스패치 식별자 집합에 매핑합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2199">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2200">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2200">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="cc35c-2201">에 대 한 자세한 내용은 `IDispatch::GetIDsOfNames`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2201">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="cc35c-2202">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2202">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System._AppDomain.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _AppDomain.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System._AppDomain.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.System#_AppDomain#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _AppDomain.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System._AppDomain.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = _AppDomain::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="cc35c-2203">반환할 형식 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2203">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="cc35c-2204">형식 정보의 로캘 식별자입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2204">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="cc35c-2205">요청된 형식 정보 개체에 대한 포인터를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2205">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="cc35c-2206">인터페이스의 형식 정보를 가져오는 데 사용할 수 있는 개체의 형식 정보를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2206">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2207">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2207">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="cc35c-2208">에 대 한 자세한 내용은 `IDispatch::GetTypeInfo`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2208">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="cc35c-2209">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2209">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System._AppDomain.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _AppDomain.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System._AppDomain.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.System#_AppDomain#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _AppDomain.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System._AppDomain.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = _AppDomain::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="cc35c-2210">개체에서 제공하는 형식 정보 인터페이스의 수를 받는 위치를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2210">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="cc35c-2211">개체에서 제공하는 형식 정보 인터페이스의 수를 검색합니다(0 또는 1).</span><span class="sxs-lookup"><span data-stu-id="cc35c-2211">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2212">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2212">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="cc35c-2213">에 대 한 자세한 내용은 `IDispatch::GetTypeInfoCount`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2213">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="cc35c-2214">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2214">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System._AppDomain.Invoke">
      <MemberSignature Language="C#" Value="void _AppDomain.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System._AppDomain.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _AppDomain.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System._AppDomain.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = _AppDomain::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="cc35c-2215">멤버를 식별합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2215">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="cc35c-2216">나중에 사용하기 위해 예약되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2216">Reserved for future use.</span></span> <span data-ttu-id="cc35c-2217">IID_NULL이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2217">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="cc35c-2218">인수를 해석할 로캘 컨텍스트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2218">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="cc35c-2219">호출의 컨텍스트를 설명하는 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2219">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="cc35c-2220">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 포함된 구조체에 대한 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2220">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="cc35c-2221">결과를 저장할 위치에 대한 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2221">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="cc35c-2222">예외 정보가 포함된 구조체에 대한 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2222">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="cc35c-2223">오류가 있는 첫 번째 인수의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2223">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="cc35c-2224">개체에서 노출하는 메서드와 속성에 대한 액세스를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2224">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2225">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2225">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="cc35c-2226">에 대 한 자세한 내용은 `IDispatch::Invoke`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2226">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="cc35c-2227">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2227">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="cc35c-2228">응용 프로그램 도메인과 컨텍스트 정책의 이름이 포함된 문자열 표현을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2228">Obtains a string representation that includes the friendly name of the application domain and any context policies.</span></span></summary>
        <returns><span data-ttu-id="cc35c-2229">리터럴 문자열 "이름:", 응용 프로그램 도메인의 이름 및 컨텍스트 정책의 문자열 표현 또는 "컨텍스트 정책이 없습니다." 문자열을 연결하여 구성되는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2229">A string formed by concatenating the literal string "Name:", the friendly name of the application domain, and either string representations of the context policies or the string "There are no context policies."</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cc35c-2230">반환 값을 표시 하는 다음 코드 예제는 <xref:System.AppDomain.ToString%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2230">The following code example displays the return value of the <xref:System.AppDomain.ToString%2A> method.</span></span>  
  
 [!code-cpp[ADToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADToString/CPP/adtostring.cpp#1)]
 [!code-csharp[ADToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADToString/CS/adtostring.cs#1)]
 [!code-vb[ADToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADToString/VB/adtostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="cc35c-2231">현재 <see cref="T:System.AppDomain" />으로 표시된 응용 프로그램 도메인이 언로드된 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-2231">The application domain represented by the current <see cref="T:System.AppDomain" /> has been unloaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TypeResolve">
      <MemberSignature Language="C#" Value="public event ResolveEventHandler TypeResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ResolveEventHandler TypeResolve" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.TypeResolve" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TypeResolve As ResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event ResolveEventHandler ^ TypeResolve;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.TypeResolve</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-2232">형식을 확인하지 못할 경우 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2232">Occurs when the resolution of a type fails.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2233"><xref:System.AppDomain.TypeResolve> 이 이벤트는 공용 언어 런타임 요청된 된 형식을 만들 수 있는 어셈블리를 확인할 수 없는 경우 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2233">The <xref:System.AppDomain.TypeResolve> event occurs when the common language runtime is unable to determine the assembly that can create the requested type.</span></span> <span data-ttu-id="cc35c-2234">이 유형을 동적 어셈블리에 정의 되어 또는 유형을 동적 어셈블리에 정의 되지 않은 있지만 런타임 형식에 정의 되어 있는 어셈블리를 알지 못합니다 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2234">This can occur if the type is defined in a dynamic assembly, or the type is not defined in a dynamic assembly but the runtime does not know which assembly the type is defined in.</span></span> <span data-ttu-id="cc35c-2235">후자의 경우에 발생할 수 있습니다 때 <xref:System.Type.GetType%2A?displayProperty=nameWithType> 어셈블리 이름으로 한정 되지 않았습니다. 형식 이름으로 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2235">The latter situation can occur when <xref:System.Type.GetType%2A?displayProperty=nameWithType> is called with a type name that is not qualified with the assembly name.</span></span>  
  
 <span data-ttu-id="cc35c-2236"><xref:System.ResolveEventHandler> 에이 이벤트를 찾아 형식을 만드는 시도할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2236">The <xref:System.ResolveEventHandler> for this event can attempt to locate and create the type.</span></span>  
  
 <span data-ttu-id="cc35c-2237">그러나는 <xref:System.AppDomain.TypeResolve> 런타임에서 특정 어셈블리에서 형식을 찾을 수 없는 경우에 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2237">However, the <xref:System.AppDomain.TypeResolve> event does not occur if the runtime knows it is not possible to find a type in certain assemblies.</span></span> <span data-ttu-id="cc35c-2238">예를 들어이 이벤트는 런타임 형식을 정적 어셈블리에 동적으로 추가할 수 없습니다 알기 때문에 형식을 정적 어셈블리에 없는 경우에 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2238">For example, this event does not occur if the type is not found in a static assembly because the runtime knows types cannot be added dynamically to static assemblies.</span></span>  
  
 <span data-ttu-id="cc35c-2239">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> 속성 유형을 요청 하는 어셈블리를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2239">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> property contains the assembly that requested the type.</span></span> <span data-ttu-id="cc35c-2240">자세한 내용은 <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2240">For more information, see <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="cc35c-2241">이 이벤트에 대 한 이벤트 처리기를 등록 하려면 필요한 사용 권한이 있어야 또는 <xref:System.Security.SecurityException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2241">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="cc35c-2242">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2242">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-2243">다음 샘플을 참조 하십시오.는 <xref:System.AppDomain.TypeResolve> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2243">The following sample demonstrates the <xref:System.AppDomain.TypeResolve> event.</span></span>  
  
 <span data-ttu-id="cc35c-2244">이 코드 예제를 실행 하려면 정규화 된 어셈블리 이름을 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2244">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="cc35c-2245">정규화 된 어셈블리 이름을 확인 하는 방법에 대 한 정보를 참조 하십시오. [어셈블리 이름을](~/docs/framework/app-domains/assembly-names.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2245">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_TypeResolve#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_TypeResolve/CPP/typeresolve.cpp#1)]
 [!code-csharp[AppDomain_TypeResolve#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_TypeResolve/CS/typeresolve.cs#1)]
 [!code-vb[AppDomain_TypeResolve#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_TypeResolve/VB/typeresolve.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2246">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2246">requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2247">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2247">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.ResolveEventArgs.RequestingAssembly" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event UnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.UnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As UnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event UnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.UnhandledException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cc35c-2248">예외가 catch되지 않으면 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2248">Occurs when an exception is not caught.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2249">이 이벤트를 확인할 수 없는 예외에 대 한 알림을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2249">This event provides notification of uncaught exceptions.</span></span> <span data-ttu-id="cc35c-2250">시스템 기본 처리기는 사용자에 게 예외를 보고 하 고 응용 프로그램이 종료 되기 전에 예외에 대 한 정보를 기록 하도록 응용 프로그램 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2250">It allows the application to log information about the exception before the system default handler reports the exception to the user and terminates the application.</span></span> <span data-ttu-id="cc35c-2251">응용 프로그램의 상태에 대 한 충분 한 정보가 표시 되 면 다른 작업을 수행할 수 있습니다-나중에 복구에 대 한 프로그램 데이터를 저장 하는 등입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2251">If sufficient information about the state of the application is available, other actions may be undertaken — such as saving program data for later recovery.</span></span> <span data-ttu-id="cc35c-2252">예외 처리 되지 않은 프로그램 데이터 손상 될 수 있으므로 주의 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2252">Caution is advised, because program data can become corrupted when exceptions are not handled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-2253">.NET Framework 버전 1.0 및 1.1에서는이 이벤트를 발생 시키려면 이후 보다 응용 프로그램 종료 및 디버깅 옵션이 사용자에 게 보고 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2253">In the .NET Framework versions 1.0 and 1.1, application termination and debugging options are reported to the user before this event is raised, rather than after.</span></span>  
  
 <span data-ttu-id="cc35c-2254">이 이벤트는 응용 프로그램 도메인에서 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2254">This event can be handled in any application domain.</span></span> <span data-ttu-id="cc35c-2255">그러나 이벤트 예외가 발생 하는 응용 프로그램 도메인에서 반드시 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2255">However, the event is not necessarily raised in the application domain where the exception occurred.</span></span> <span data-ttu-id="cc35c-2256">스레드에 대 한 전체 스택을 정리 된 하므로 이벤트가 발생할 수 있는 첫 번째 위치는 스레드가 생성 된 응용 프로그램 도메인에 적절 한 예외 처리기를 찾지 않고 하는 경우에 예외가 처리 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2256">An exception is unhandled only if the entire stack for the thread has been unwound without finding an applicable exception handler, so the first place the event can be raised is in the application domain where the thread originated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-2257">이 이벤트는.NET Framework 버전 1.0 및 1.1에서는 응용 프로그램이 시작 될 때 시스템에서 생성 되는 기본 응용 프로그램 도메인에 대해서만 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2257">In the .NET Framework versions 1.0 and 1.1, this event occurs only for the default application domain that is created by the system when an application is started.</span></span> <span data-ttu-id="cc35c-2258">응용 프로그램에 추가 응용 프로그램 도메인을 만드는 경우 해당 응용 프로그램 도메인에서이 이벤트에 대 한 대리자를 지정 하 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2258">If an application creates additional application domains, specifying a delegate for this event in those applications domains has no effect.</span></span>  
  
 <span data-ttu-id="cc35c-2259">경우는 <xref:System.AppDomain.UnhandledException> 발생 처리 되지 않은 응용 프로그램 도메인에 관계 없이 모든 스레드에서 예외 스레드가 시작에 대 한, 기본 응용 프로그램 도메인에서 이벤트를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2259">If the <xref:System.AppDomain.UnhandledException> event is handled in the default application domain, it is raised there for any unhandled exception in any thread, no matter what application domain the thread started in.</span></span> <span data-ttu-id="cc35c-2260">스레드가 대 한 이벤트 처리기가 응용 프로그램 도메인에서 시작 하는 경우 <xref:System.AppDomain.UnhandledException>, 해당 응용 프로그램 도메인에서 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2260">If the thread started in an application domain that has an event handler for <xref:System.AppDomain.UnhandledException>, the event is raised in that application domain.</span></span> <span data-ttu-id="cc35c-2261">해당 응용 프로그램 도메인 기본 응용 프로그램 도메인 아니며 기본 응용 프로그램 도메인에서 이벤트 처리기도는 경우이 이벤트는 두 응용 프로그램 도메인에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2261">If that application domain is not the default application domain, and there is also an event handler in the default application domain, the event is raised in both application domains.</span></span>  
  
 <span data-ttu-id="cc35c-2262">예를 들어 가정 스레드를 시작할 응용 프로그램 도메인 "AD1" "AD2" 응용 프로그램 도메인의 메서드를 호출 및 거기서에서 메서드를 호출 하는 "AD3" 응용 프로그램 도메인에서 예외가 throw 되 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2262">For example, suppose a thread starts in application domain "AD1", calls a method in application domain "AD2", and from there calls a method in application domain "AD3", where it throws an exception.</span></span> <span data-ttu-id="cc35c-2263">첫 번째 응용 프로그램 도메인에는 <xref:System.AppDomain.UnhandledException> 이벤트가 "AD1" 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2263">The first application domain in which the <xref:System.AppDomain.UnhandledException> event can be raised is "AD1".</span></span> <span data-ttu-id="cc35c-2264">해당 응용 프로그램 도메인의 기본 응용 프로그램 도메인에 있지 않은 경우 이벤트 기본 응용 프로그램 도메인에도 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2264">If that application domain is not the default application domain, the event can also be raised in the default application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-2265">공용 언어 런타임 스레드 중단에 대 한 이벤트 처리기는 동안 일시 중단 된 <xref:System.AppDomain.UnhandledException> 이벤트를 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2265">The common language runtime suspends thread aborts while event handlers for the <xref:System.AppDomain.UnhandledException> event are executing.</span></span>  
  
 <span data-ttu-id="cc35c-2266">이벤트 처리기의 경우는 <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> 특성의 적절 한 플래그를 이벤트 처리기 제약이 있는 실행 영역으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2266">If the event handler has a <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute with the appropriate flags, the event handler is treated as a constrained execution region.</span></span>  
  
 <span data-ttu-id="cc35c-2267">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], 스택 오버플로 같은 프로세스의 상태가 손상 또는 액세스 위반, 이벤트 처리기가 보안에 중요 한 및 경우가 아니면 하는 예외에 대 한이 이벤트는 <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2267">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], this event is not raised for exceptions that corrupt the state of the process, such as stack overflows or access violations, unless the event handler is security-critical and has the <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute.</span></span>  
  
 <span data-ttu-id="cc35c-2268">.NET Framework 버전 1.0 및 1.1에서는 기본 응용 프로그램 스레드를 제외한 스레드에서 발생 하는 처리 되지 않은 예외 런타임에서 발생 하 고 따라서 응용 프로그램이 종료를 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2268">In the .NET Framework versions 1.0 and 1.1, an unhandled exception that occurs in a thread other than the main application thread is caught by the runtime and therefore does not cause the application to terminate.</span></span> <span data-ttu-id="cc35c-2269">즉에 대 한 가능한는 <xref:System.AppDomain.UnhandledException> 이벤트를 응용 프로그램을 종료 하지 않고 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2269">Thus, it is possible for the <xref:System.AppDomain.UnhandledException> event to be raised without the application terminating.</span></span> <span data-ttu-id="cc35c-2270">.NET Framework 버전 2.0 이상에서는 자식 스레드에서 처리 되지 않은 예외에 대 한이 백업을 제거 이러한 누적 된 효과가 포함 성능이 저하 되 고 손상 된 데이터는 모두 디버그 하기가 어렵기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2270">Starting with the .NET Framework version 2.0, this backstop for unhandled exceptions in child threads was removed, because the cumulative effect of such silent failures included performance degradation, corrupted data, and lockups, all of which were difficult to debug.</span></span> <span data-ttu-id="cc35c-2271">런타임 종료 되지 않는 사례 목록을 비롯 한 자세한 내용은 참조 하십시오. [관리 되는 스레드의 예외](~/docs/standard/threading/exceptions-in-managed-threads.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2271">For more information, including a list of cases in which the runtime does not terminate, see [Exceptions in Managed Threads](~/docs/standard/threading/exceptions-in-managed-threads.md).</span></span>  
  
 <span data-ttu-id="cc35c-2272">이 이벤트에 대 한 이벤트 처리기를 등록 하려면 필요한 사용 권한이 있어야 또는 <xref:System.Security.SecurityException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2272">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="cc35c-2273">이벤트를 처리 하는 방법에 대 한 자세한 내용은 참조 [이벤트 처리 및 발생](~/docs/standard/events/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2273">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
## <a name="other-events-for-unhandled-exceptions"></a><span data-ttu-id="cc35c-2274">처리 되지 않은 예외에 대 한 다른 이벤트</span><span class="sxs-lookup"><span data-stu-id="cc35c-2274">Other Events for Unhandled Exceptions</span></span>  
 <span data-ttu-id="cc35c-2275">특정 응용 프로그램 모델의 <xref:System.AppDomain.UnhandledException> 이벤트 주 응용 프로그램 스레드에서 처리 되지 않은 예외가 발생 하는 경우 다른 이벤트에 의해 선점 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2275">For certain application models, the <xref:System.AppDomain.UnhandledException> event can be preempted by other events if the unhandled exception occurs in the main application thread.</span></span>  
  
 <span data-ttu-id="cc35c-2276">Windows Forms를 사용 하는 응용 프로그램에서 처리 되지 않은 예외에서 기본 응용 프로그램 스레드는 <xref:System.Windows.Forms.Application.ThreadException?displayProperty=nameWithType> 이벤트를 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2276">In applications that use Windows Forms, unhandled exceptions in the main application thread cause the <xref:System.Windows.Forms.Application.ThreadException?displayProperty=nameWithType> event to be raised.</span></span> <span data-ttu-id="cc35c-2277">이 이벤트를 처리 하는 경우 기본 동작은 예외로 인해 응용 프로그램을 종료 하지 않을 응용 프로그램은 알 수 없는 상태로 남아 있지만 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2277">If this event is handled, the default behavior is that the unhandled exception does not terminate the application, although the application is left in an unknown state.</span></span> <span data-ttu-id="cc35c-2278">이 경우에 <xref:System.AppDomain.UnhandledException> 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2278">In that case, the <xref:System.AppDomain.UnhandledException> event is not raised.</span></span> <span data-ttu-id="cc35c-2279">응용 프로그램 구성 파일을 사용 하거나 사용 하 여이 동작을 변경할 수 있습니다는 <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=nameWithType> 모드를 변경 하려면 <xref:System.Windows.Forms.UnhandledExceptionMode.ThrowException?displayProperty=nameWithType> 하기 전에 <xref:System.Windows.Forms.Application.ThreadException> 이벤트 처리기 후크 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2279">This behavior can be changed by using the application configuration file, or by using the <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=nameWithType> method to change the mode to <xref:System.Windows.Forms.UnhandledExceptionMode.ThrowException?displayProperty=nameWithType> before the <xref:System.Windows.Forms.Application.ThreadException> event handler is hooked up.</span></span> <span data-ttu-id="cc35c-2280">이 기본 응용 프로그램 스레드에만 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2280">This applies only to the main application thread.</span></span> <span data-ttu-id="cc35c-2281"><xref:System.AppDomain.UnhandledException> 다른 스레드에서 throw 된 처리 되지 않은 예외에 대 한 이벤트가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2281">The <xref:System.AppDomain.UnhandledException> event is raised for unhandled exceptions thrown in other threads.</span></span>  
  
 <span data-ttu-id="cc35c-2282">Microsoft Visual Studio 2005 이상에서는 Visual Basic 응용 프로그램 프레임 워크는 주 응용 프로그램 스레드에서 처리 되지 않은 예외에 대 한 다른 이벤트를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2282">Starting with Microsoft Visual Studio 2005, the Visual Basic application framework provides another event for unhandled exceptions in the main application thread.</span></span> <span data-ttu-id="cc35c-2283">참조는 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2283">See the <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="cc35c-2284">이 이벤트에는 이벤트 인수 개체에서 사용 하는 이벤트 인수 개체와 동일한 이름 가진 <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>, 있지만 다른 속성을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2284">This event has an event arguments object with the same name as the event arguments object used by <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>, but with different properties.</span></span> <span data-ttu-id="cc35c-2285">특히이 이벤트 인수 개체에는 <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> 속성을 사용 하 고 계속 실행, 처리 되지 않은 예외를 무시 합니다. (응용 프로그램 상태를 알 수)을 응용 프로그램입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2285">In particular, this event arguments object has an <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> property that allows the application to continue running, ignoring the unhandled exception (and leaving the application in an unknown state).</span></span> <span data-ttu-id="cc35c-2286">이 경우에 <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> 이벤트가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2286">In that case, the <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event is not raised.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-2287">다음 예와 보여 줍니다.는 <xref:System.AppDomain.UnhandledException> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2287">The followingexample demonstrates the <xref:System.AppDomain.UnhandledException> event.</span></span> <span data-ttu-id="cc35c-2288">이벤트 처리기를 정의 `MyHandler`, 기본 응용 프로그램 도메인에서 처리 되지 않은 예외가 throw 됩니다 때마다 호출 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2288">It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain.</span></span> <span data-ttu-id="cc35c-2289">다음 두 가지 예외를 throw합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2289">It then throws two exceptions.</span></span> <span data-ttu-id="cc35c-2290">첫 번째는에서 처리 한 **try/catch** 블록입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2290">The first is handled by a **try/catch** block.</span></span> <span data-ttu-id="cc35c-2291">두 번째는 처리 되지 않으며 호출의 `MyHandle` 응용 프로그램을 종료 하기 전에 루틴입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2291">The second is unhandled and invokes the `MyHandle` routine before the application terminates.</span></span>  
  
 [!code-cpp[AppDomain_UnhandledException#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_UnhandledException/CPP/unhandledexception.cpp#1)]
 [!code-csharp[AppDomain_UnhandledException#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_UnhandledException/CS/unhandledexception.cs#1)]
 [!code-vb[AppDomain_UnhandledException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_UnhandledException/VB/unhandledexception.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="cc35c-2292">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2292">requires full trust for the immediate caller.</span></span> <span data-ttu-id="cc35c-2293">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2293">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public static void Unload (AppDomain domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unload(class System.AppDomain domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Unload(System.AppDomain)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unload (domain As AppDomain)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unload(AppDomain ^ domain);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="cc35c-2294">언로드할 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2294">An application domain to unload.</span></span></param>
        <summary><span data-ttu-id="cc35c-2295">지정한 응용 프로그램 도메인을 언로드합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2295">Unloads the specified application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cc35c-2296">.NET Framework 버전 2.0에에서는 스레드가 없는 응용 프로그램 도메인 언로드 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2296">In the .NET Framework version 2.0 there is a thread dedicated to unloading application domains.</span></span> <span data-ttu-id="cc35c-2297">.NET Framework 호스팅되는 경우에 특히 안정성 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2297">This improves reliability, especially when the .NET Framework is hosted.</span></span> <span data-ttu-id="cc35c-2298">호출 하면 스레드 <xref:System.AppDomain.Unload%2A>, 언로드되도록 대상 도메인이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2298">When a thread calls <xref:System.AppDomain.Unload%2A>, the target domain is marked for unloading.</span></span> <span data-ttu-id="cc35c-2299">전용된 스레드가 도메인의 언로드 하 고 도메인의 모든 스레드가 중단 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2299">The dedicated thread attempts to unload the domain, and all threads in the domain are aborted.</span></span> <span data-ttu-id="cc35c-2300">스레드가 중단 되지 않는 예를 들어 비관리 코드를 실행 하는 경우 또는 실행 한 `finally` 일정 기간 후 다음 블록은 <xref:System.CannotUnloadAppDomainException> 원래 호출한 스레드가에서 throw 된 <xref:System.AppDomain.Unload%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2300">If a thread does not abort, for example because it is executing unmanaged code, or because it is executing a `finally` block, then after a period of time a <xref:System.CannotUnloadAppDomainException> is thrown in the thread that originally called <xref:System.AppDomain.Unload%2A>.</span></span> <span data-ttu-id="cc35c-2301">결국 중단 하지 스레드가 종료 되는 경우에 대상 도메인은 언로드되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2301">If the thread that could not be aborted eventually ends, the target domain is not unloaded.</span></span> <span data-ttu-id="cc35c-2302">따라서.NET Framework 버전 2.0에서에서 `domain` 보장 되지 않는 언로드되도록 것 수 없는 경우에 실행 중인 스레드를 종료할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2302">Thus, in the .NET Framework version 2.0 `domain` is not guaranteed to unload, because it might not be possible to terminate executing threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="cc35c-2303">경우에 따라 호출 <xref:System.AppDomain.Unload%2A> 즉시 발생할 <xref:System.CannotUnloadAppDomainException>, 예를 들어 종료자에서 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2303">In some cases, calling <xref:System.AppDomain.Unload%2A> causes an immediate <xref:System.CannotUnloadAppDomainException>, for example if it is called in a finalizer.</span></span>  
  
 <span data-ttu-id="cc35c-2304">스레드 `domain` 를 사용 하 여 종료 되는 <xref:System.Threading.Thread.Abort%2A> throw 하는 메서드는 <xref:System.Threading.ThreadAbortException> 스레드에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2304">The threads in `domain` are terminated using the <xref:System.Threading.Thread.Abort%2A> method, which throws a <xref:System.Threading.ThreadAbortException> in the thread.</span></span> <span data-ttu-id="cc35c-2305">하지 않은 시간에 실행을 계속할 수 있지만 스레드가 즉시 종료 되어야는 `finally` 절.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2305">Although the thread should terminate promptly, it can continue executing for an unpredictable amount of time in a `finally` clause.</span></span>  
  
## <a name="version-compatibility"></a><span data-ttu-id="cc35c-2306">버전 호환성</span><span class="sxs-lookup"><span data-stu-id="cc35c-2306">Version Compatibility</span></span>  
 <span data-ttu-id="cc35c-2307">.NET framework 버전 1.0 및 1.1를 호출한 스레드가 경우 <xref:System.AppDomain.Unload%2A> 에서 실행 되 고 `domain`, 다른 스레드 언로드 작업을 수행 하기 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2307">In the .NET Framework version 1.0 and 1.1 if the thread that calls <xref:System.AppDomain.Unload%2A> is running in `domain`, another thread is started to perform the unload operation.</span></span> <span data-ttu-id="cc35c-2308">경우 `domain` 언로드할 수 없으며는 <xref:System.CannotUnloadAppDomainException> 를 호출한 원래 스레드가에 없는 해당 스레드에서 throw 되 <xref:System.AppDomain.Unload%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2308">If `domain` cannot be unloaded, a <xref:System.CannotUnloadAppDomainException> is thrown in that thread, not in the original thread that called <xref:System.AppDomain.Unload%2A>.</span></span> <span data-ttu-id="cc35c-2309">그러나 호출 하는 스레드가 <xref:System.AppDomain.Unload%2A> 외부에서 실행 되 `domain`, 스레드가 예외를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2309">However, if the thread that calls <xref:System.AppDomain.Unload%2A> is running outside `domain`, that thread receives the exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cc35c-2310">다음 코드 예제에서는 응용 프로그램 도메인 언로드 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2310">The following code example shows how to unload an application domain.</span></span>  
  
 [!code-cpp[ADUnload#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADUnload/CPP/adunload.cpp#1)]
 [!code-csharp[ADUnload#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADUnload/CS/adunload.cs#1)]
 [!code-vb[ADUnload#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADUnload/VB/adunload.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="cc35c-2311"><paramref name="domain" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-2311"><paramref name="domain" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.CannotUnloadAppDomainException">
          <span data-ttu-id="cc35c-2312"><paramref name="domain" />을 언로드할 수 없는 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-2312"><paramref name="domain" /> could not be unloaded.</span></span></exception>
        <exception cref="T:System.Exception"><span data-ttu-id="cc35c-2313">언로드하는 동안 오류가 발생한 경우</span><span class="sxs-lookup"><span data-stu-id="cc35c-2313">An error occurred during the unload process.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="cc35c-2314">이 이벤트에 대 한 이벤트 처리기를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2314">to add an event handler for this event.</span></span> <span data-ttu-id="cc35c-2315">연관된 열거형: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" /></span><span class="sxs-lookup"><span data-stu-id="cc35c-2315">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</span></span> <span data-ttu-id="cc35c-2316">보안 동작: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />합니다.</span><span class="sxs-lookup"><span data-stu-id="cc35c-2316">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>