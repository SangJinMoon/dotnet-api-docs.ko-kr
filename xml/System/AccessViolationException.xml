<Type Name="AccessViolationException" FullName="System.AccessViolationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb360adfc3670886a06c5f3ab2daa2470318896a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AccessViolationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit AccessViolationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.AccessViolationException" />
  <TypeSignature Language="VB.NET" Value="Public Class AccessViolationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class AccessViolationException : SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="bc5a4-101">The exception that is thrown when there is an attempt to read or write protected memory.</span>
      <span class="sxs-lookup">
        <span data-stu-id="bc5a4-101">The exception that is thrown when there is an attempt to read or write protected memory.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bc5a4-102">코드를 있는 할당 되지 않은 또는를 권한이 없는 메모리를 읽거나 쓸 하려고 할 때 관리 되지 않는 또는 안전 하지 않은 코드에서 액세스 위반이 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-102">An access violation occurs in unmanaged or unsafe code when the code attempts to read or write to memory that has not been allocated, or to which it does not have access.</span></span> <span data-ttu-id="bc5a4-103">이 문제는 일반적으로 포인터에 잘못 된 값 때문에 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-103">This usually occurs because a pointer has a bad value.</span></span> <span data-ttu-id="bc5a4-104">잘못된 포인터를 통해 읽거나 쓸 때 항상 액세스 위반이 발생하는 것은 아닙니다. 액세스 위반은 일반적으로 잘못된 포인터를 통해 여러 차례 읽기 또는 쓰기 작업을 수행하여 메모리가 손상되었을 수 있음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-104">Not all reads or writes through bad pointers lead to access violations, so an access violation usually indicates that several reads or writes have occurred through bad pointers, and that memory might be corrupted.</span></span> <span data-ttu-id="bc5a4-105">따라서 액세스 위반 거의 항상 심각한 프로그래밍 오류를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-105">Thus, access violations almost always indicate serious programming errors.</span></span> <span data-ttu-id="bc5a4-106"><xref:System.AccessViolationException> 분명 하 게 이러한 심각한 오류를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-106">An <xref:System.AccessViolationException> clearly identifies these serious errors.</span></span>  
  
 <span data-ttu-id="bc5a4-107">관리 코드를 확인할 수 있는 공백으로 구성 된 프로그램에서 모든 참조는 유효 하거나 null 및 액세스 위반 가능 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-107">In programs consisting entirely of verifiable managed code, all references are either valid or null, and access violations are impossible.</span></span> <span data-ttu-id="bc5a4-108">안정형 코드 throw에서 null 참조를 참조 하는 모든 작업이 <xref:System.NullReferenceException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-108">Any operation that attempts to reference a null reference in verifiable code throws a <xref:System.NullReferenceException> exception.</span></span> <span data-ttu-id="bc5a4-109"><xref:System.AccessViolationException> 만 때 확인할 수 있는 관리 되는 코드 상호 작용 하는 관리 되는 안전 하지 않은 코드 또는 비관리 코드와 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-109">An <xref:System.AccessViolationException> occurs only when verifiable managed code interacts with unmanaged code or with unsafe managed code.</span></span>  
  
## <a name="troubleshooting-accessviolationexception-exceptions"></a><span data-ttu-id="bc5a4-110">AccessViolationException 예외 문제 해결</span><span class="sxs-lookup"><span data-stu-id="bc5a4-110">Troubleshooting AccessViolationException exceptions</span></span>  
 <span data-ttu-id="bc5a4-111"><xref:System.AccessViolationException> 코드 비관리 코드와 상호 작용 하는 확인할 수 있는 관리 되는 경우 또는 예외는 안전 하지 않은 관리 되는 코드에만 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-111">An <xref:System.AccessViolationException> exception can occur only in unsafe managed code or when verifiable managed code interacts with unmanaged code:</span></span>  
  
-   <span data-ttu-id="bc5a4-112">안전 하지 않은 관리 코드에서 발생 하는 액세스 위반은으로 표현 될 수는 <xref:System.NullReferenceException> 예외 또는 <xref:System.AccessViolationException> 플랫폼에 따라 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-112">An access violation that occurs in unsafe managed code can be expressed as either a <xref:System.NullReferenceException> exception or an <xref:System.AccessViolationException> exception, depending on the platform.</span></span>  
  
-   <span data-ttu-id="bc5a4-113">관리 되는 코드에 따라 버블링 비관리 코드에서 액세스 위반이 항상에 래핑되는 <xref:System.AccessViolationException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-113">An access violation in unmanaged code that bubbles up to managed code is always wrapped in an <xref:System.AccessViolationException> exception.</span></span>  
  
 <span data-ttu-id="bc5a4-114">두 경우 모두 식별 하 고 수의 원인을 해결 하는 <xref:System.AccessViolationException> 다음과 같이 예외:</span><span class="sxs-lookup"><span data-stu-id="bc5a4-114">In either case, you can identify and correct the cause of the <xref:System.AccessViolationException> exception as follows:</span></span>  
  
 <span data-ttu-id="bc5a4-115">액세스하려는 메모리가 할당되어 있는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-115">Make sure that the memory that you are attempting to access has been allocated.</span></span>  
 <span data-ttu-id="bc5a4-116"><xref:System.AccessViolationException> 메모리에 액세스 보호-즉, 할당 되지 않은 또는 프로세스에 의해 소유 하지 않은 메모리에 액세스 하려는 시도에서 항상 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-116">An <xref:System.AccessViolationException> exception is always thrown by an attempt to access protected memory -- that is, to access memory that is not allocated or that is not owned by a process.</span></span>  
  
 <span data-ttu-id="bc5a4-117">자동 메모리 관리는 공용 언어 런타임에서 제공하는 서비스 중 하나입니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-117">Automatic memory management is one of the services that the common language runtime provides.</span></span> <span data-ttu-id="bc5a4-118">Unmanagede 코드와 동일한 기능을 제공 하는 관리 코드를 하는 경우에이 기능을 활용 하기 위해 관리 되는 코드를 이동 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-118">If managed code provides the same functionality as your unmanagede code, you may wish to move to managed code to take advantage of this functionality.</span></span> <span data-ttu-id="bc5a4-119">자세한 내용은 참조 [자동 메모리 관리](~/docs/standard/automatic-memory-management.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-119">For more information, see [Automatic Memory Management](~/docs/standard/automatic-memory-management.md).</span></span>  
  
 <span data-ttu-id="bc5a4-120">액세스하려는 메모리가 손상되지 않았는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-120">Make sure that the memory that you are attempting to access has not been corrupted.</span></span>  
 <span data-ttu-id="bc5a4-121">잘못된 포인터를 통해 읽기 또는 쓰기 작업을 여러 차례 수행하면 메모리가 손상될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-121">If several read or write operations have occurred through bad pointers, memory may be corrupted.</span></span> <span data-ttu-id="bc5a4-122">이 문제는 일반적으로 읽기 또는 쓰기 버퍼를 미리 정의 된 외부 주소를 때 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-122">This typically occurs when reading or writing to addresses outside of a predefined buffer.</span></span>  
  
## <a name="accessviolationexception-and-trycatch-blocks"></a><span data-ttu-id="bc5a4-123">AccessViolationException 및 try/catch 블록</span><span class="sxs-lookup"><span data-stu-id="bc5a4-123">AccessViolationException and try/catch blocks</span></span>  
 <span data-ttu-id="bc5a4-124">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.AccessViolationException> 에서 공용 언어 런타임에 의해 발생 한 예외를 처리 하지 않습니다는 `catch` 구조적된 예외 처리기는 예외가 공용 언어 예약 된 메모리 외에 발생 하는 경우에 문 런타임입니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-124">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.AccessViolationException> exceptions thrown by the common language runtime are not handled by the `catch` statement in a structured exception handler if the exception occurs outside of the memory reserved by the common language runtime.</span></span> <span data-ttu-id="bc5a4-125">등을 처리 하는 <xref:System.AccessViolationException> 적용 해야 예외는 <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> 특성을 메서드에 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-125">To handle such an <xref:System.AccessViolationException> exception, you should apply the  <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to the method in which the exception is thrown.</span></span> <span data-ttu-id="bc5a4-126">이러한 변경에 영향을 주지 않는 <xref:System.AccessViolationException> 하 여 계속할 수 있는 사용자 코드에서 throw 된 예외는 `catch` 문.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-126">This change does not affect <xref:System.AccessViolationException> exceptions thrown by user code, which can continue to be caught by a `catch` statement.</span></span> <span data-ttu-id="bc5a4-127">이전 버전의 다시 컴파일하고에서 수정 없이 실행할 하려는.NET Framework 용으로 작성 된 코드에 대 한는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]를 추가할 수 있습니다는 [ \<legacyCorruptedStateExceptionsPolicy >](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md) 요소를 사용자 응용 프로그램의 구성 파일입니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-127">For code written for previous versions of the .NET Framework that you want to recompile and run without modification on the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can add the [\<legacyCorruptedStateExceptionsPolicy>](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md) element to your app's configuration file.</span></span> <span data-ttu-id="bc5a4-128">에 대 한 처리기를 정의한 경우 예외에 대 한 알림을 받을 수도 수 참고는 <xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType> 또는 <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> 이벤트입니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-128">Note that you can also receive notification of the exceptions if you have defined a handler for the <xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType> or <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="bc5a4-129">버전 정보</span><span class="sxs-lookup"><span data-stu-id="bc5a4-129">Version Information</span></span>  
 <span data-ttu-id="bc5a4-130">.NET Framework 2.0 이상 버전에서이 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-130">This exception is thrown in the .NET Framework 2.0 and later versions.</span></span> <span data-ttu-id="bc5a4-131">이전 버전의.NET Framework, 비관리 코드 또는 관리 되는 안전 하지 않은 코드에서 액세스 위반이 표시 됩니다는 <xref:System.NullReferenceException> 관리 코드에서.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-131">In earlier versions of the .NET Framework, an access violation in unmanaged code or unsafe managed code is represented by a <xref:System.NullReferenceException> in managed code.</span></span> <span data-ttu-id="bc5a4-132">A <xref:System.NullReferenceException> 검증할 수 있는 관리 되는 코드, 데이터 손상, 포함 하지 않는 하는 항목에에서는 null 참조를 역참조 하는 버전 1.0 또는 1.1에서에서 두 가지 경우를 구분할 수 없으므로 때 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-132">A <xref:System.NullReferenceException> is also thrown when a null reference is dereferenced in verifiable managed code, an occurrence that does not involve data corruption, and there is no way to distinguish between the two situations in versions 1.0 or 1.1.</span></span>  
  
 <span data-ttu-id="bc5a4-133">관리자는 선택한 응용 프로그램의.NET Framework 버전 1.1의 동작으로 되돌리려면를 허용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-133">Administrators can allow selected applications to revert to the behavior of the .NET Framework version 1.1.</span></span> <span data-ttu-id="bc5a4-134">입력 하 고는 [ &lt;런타임&gt; 요소](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) 응용 프로그램에 대 한 구성 파일의 섹션:</span><span class="sxs-lookup"><span data-stu-id="bc5a4-134">Place the following line in the [&lt;runtime&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of the configuration file for the application:</span></span>  
  
```  
<legacyNullReferenceExceptionPolicy enabled = "1"/>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="bc5a4-135">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc5a4-135">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bc5a4-136">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a system-supplied message that describes the error.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc5a4-136">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a system-supplied message that describes the error.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bc5a4-137">이 생성자는 <xref:System.Exception.Message%2A> 속성의 새 인스턴스를 오류를 설명 하는 시스템 제공 메시지와 같은 "읽거나 쓰려고 보호 된 메모리입니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-137">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "Attempted to read or write protected memory.</span></span> <span data-ttu-id="bc5a4-138">이 대개는 다른 메모리가 손상 되었습니다. "</span><span class="sxs-lookup"><span data-stu-id="bc5a4-138">This is often an indication that other memory has been corrupted."</span></span> <span data-ttu-id="bc5a4-139">이 메시지는 현재 시스템 문화권을 고려합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-139">This message takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="bc5a4-140">다음 표에서는 <xref:System.AccessViolationException> 인스턴스의 초기 속성 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-140">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="bc5a4-141">속성</span><span class="sxs-lookup"><span data-stu-id="bc5a4-141">Property</span></span>|<span data-ttu-id="bc5a4-142">값</span><span class="sxs-lookup"><span data-stu-id="bc5a4-142">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="bc5a4-143">`null`.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-143">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="bc5a4-144">지역화된 오류 메시지 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-144">The localized error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="bc5a4-145">The message that describes the exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc5a4-145">The message that describes the exception.</span>
          </span>
          <span data-ttu-id="bc5a4-146">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc5a4-146">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bc5a4-147">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified message that describes the error.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc5a4-147">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified message that describes the error.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bc5a4-148">다음 표에서는 <xref:System.AccessViolationException> 인스턴스의 초기 속성 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-148">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="bc5a4-149">속성</span><span class="sxs-lookup"><span data-stu-id="bc5a4-149">Property</span></span>|<span data-ttu-id="bc5a4-150">값</span><span class="sxs-lookup"><span data-stu-id="bc5a4-150">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="bc5a4-151">`null`.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-151">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="bc5a4-152">`message`에 지정된 오류 메시지 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-152">The error message string specified in `message`.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AccessViolationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AccessViolationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="bc5a4-153">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc5a4-153">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="bc5a4-154">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc5a4-154">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bc5a4-155">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with serialized data.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc5a4-155">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with serialized data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bc5a4-156">이 생성자는 deserialization을 수행하는 동안 호출되어 스트림을 통해 전송된 예외 개체를 다시 구성합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-156">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="bc5a4-157">자세한 내용은 참조 [XML 및 SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-157">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="bc5a4-158">The message that describes the exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc5a4-158">The message that describes the exception.</span>
          </span>
          <span data-ttu-id="bc5a4-159">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc5a4-159">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span>
          </span>
        </param>
        <param name="innerException">
          <span data-ttu-id="bc5a4-160">The exception that is the cause of the current exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc5a4-160">The exception that is the cause of the current exception.</span>
          </span>
          <span data-ttu-id="bc5a4-161">If the <c>innerException</c> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc5a4-161">If the <c>innerException</c> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="bc5a4-162">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="bc5a4-162">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bc5a4-163">이전 예외의 직접적인 결과로 throw되는 예외의 <xref:System.Exception.InnerException%2A> 속성에는 이전 예외에 대한 참조가 들어 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-163">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="bc5a4-164"><xref:System.Exception.InnerException%2A> 속성은 생성자에 전달되는 값과 동일한 값을 반환하며, `null` 속성이 생성자에 내부 예외 값을 제공하지 않는 경우에는 <xref:System.Exception.InnerException%2A>을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-164">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="bc5a4-165">다음 표에서는 <xref:System.AccessViolationException> 인스턴스의 초기 속성 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-165">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="bc5a4-166">속성</span><span class="sxs-lookup"><span data-stu-id="bc5a4-166">Property</span></span>|<span data-ttu-id="bc5a4-167">값</span><span class="sxs-lookup"><span data-stu-id="bc5a4-167">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="bc5a4-168">`null`.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-168">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="bc5a4-169">`message`에 지정된 오류 메시지 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="bc5a4-169">The error message string specified in `message`.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>