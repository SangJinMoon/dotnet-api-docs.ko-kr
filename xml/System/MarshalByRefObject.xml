<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MarshalByRefObject.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac583acfa54440d5b5ba0c4eb247332f63cbe45d467.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83acfa54440d5b5ba0c4eb247332f63cbe45d467</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.MarshalByRefObject">
          <source>Enables access to objects across application domain boundaries in applications that support remoting.</source>
          <target state="translated">원격 통신을 지원하는 응용 프로그램에서 응용 프로그램 도메인 경계를 넘어 개체에 액세스할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>An application domain is a partition in an operating system process where one or more applications reside.</source>
          <target state="translated">응용 프로그램 도메인은 하나 이상의 응용 프로그램이 있는 운영 체제 프로세스의 파티션입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects in the same application domain communicate directly.</source>
          <target state="translated">동일한 응용 프로그램 도메인의 개체는 직접 통신 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects in different application domains communicate either by transporting copies of objects across application domain boundaries, or by using a proxy to exchange messages.</source>
          <target state="translated">다른 응용 프로그램 도메인의 개체에는 응용 프로그램 도메인 경계를 넘어 개체의 복사본을 전송 하거나 메시지를 교환 하는 프록시를 사용 하 여 통신 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> is the base class for objects that communicate across application domain boundaries by exchanging messages using a proxy.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> 프록시를 사용 하는 메시지를 교환 하 여 응용 프로그램 도메인 경계에 걸쳐 통신 하는 개체에 대 한 기본 클래스입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Objects that do not inherit from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> are implicitly marshal by value.</source>
          <target state="translated">개체에서 상속 되지 않는 <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> 으로 암시적으로 값 마샬링됩니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>When a remote application references a marshal by value object, a copy of the object is passed across application domain boundaries.</source>
          <target state="translated">마샬링을 값 개체에서 참조 하는 원격 응용 프로그램, 응용 프로그램 도메인 경계를 넘어 개체의 복사본이 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> objects are accessed directly within the boundaries of the local application domain.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> 개체는 로컬 응용 프로그램 도메인의 경계 내에서 직접 액세스 합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The first time an application in a remote application domain accesses a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, a proxy is passed to the remote application.</source>
          <target state="translated">원격에서 응용 프로그램 처음으로 응용 프로그램 도메인에 액세스 한 <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph>, 프록시 원격 응용 프로그램에 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Subsequent calls on the proxy are marshaled back to the object residing in the local application domain.</source>
          <target state="translated">프록시에 대 한 후속 호출 로컬 응용 프로그램 도메인에 있는 개체로 다시 마샬링됩니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>Types must inherit from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> when the type is used across application domain boundaries, and the state of the object must not be copied because the members of the object are not usable outside the application domain where they were created.</source>
          <target state="translated">형식에서 상속 해야 <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> 때 응용 프로그램 도메인 경계를 넘어 형식을 사용 하 고 개체의 상태 개체의 멤버가 자신이 만들어진 응용 프로그램 도메인 외부에서 사용할 수 없기 때문에 복사 하면 안 됩니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>When you derive an object from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> for use across application domain boundaries, you should not override any of its members, nor should you call its methods directly.</source>
          <target state="translated">개체를 파생 시키는 경우 <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> 응용 프로그램 도메인 경계를 넘어 용도로 하지 재정의 해야 해당 멤버가 나 해야 하는 메서드를 직접 호출 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The runtime recognizes that classes derived from  <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> should be marshaled across app domain boundaries.</source>
          <target state="translated">파생 된 클래스는 런타임에서 인식 <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> 응용 프로그램 도메인 경계를 넘어 마샬링해야 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>This section contains two code examples.</source>
          <target state="translated">이 섹션에는 두 가지 코드 예제가 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The first code example shows how to create an instance of a class in another application domain.</source>
          <target state="translated">첫 번째 코드 예제에는 다른 응용 프로그램 도메인 클래스의 인스턴스를 만드는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The second code example shows a simple class that can be used for remoting.</source>
          <target state="translated">두 번째 코드 예제에서는 원격 서비스에 사용할 수 있는 간단한 클래스를 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><bpt id="p1">**</bpt>Example 1<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>예 1<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The following code example shows the simplest way to execute code in another application domain.</source>
          <target state="translated">다음 코드 예제에서는 다른 응용 프로그램 도메인에 있는 코드를 실행 하는 가장 간단한 방법은 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The example defines a class named <ph id="ph1">`Worker`</ph> that inherits <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, with a method that displays the name of the application domain in which it is executing.</source>
          <target state="translated">이 예제에서는 클래스를 정의 <ph id="ph1">`Worker`</ph> 상속 하 <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph>, 실행 되는 응용 프로그램 도메인의 이름을 표시 하는 메서드로 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The example creates instances of <ph id="ph1">`Worker`</ph> in the default application domain and in a new application domain.</source>
          <target state="translated">인스턴스를 만듭니다 <ph id="ph1">`Worker`</ph> 기본 응용 프로그램 도메인에 새 응용 프로그램 도메인입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The assembly that contains <ph id="ph1">`Worker`</ph> must be loaded into both application domains, but it could load other assemblies that would exist only in the new application domain.</source>
          <target state="translated">포함 된 어셈블리 <ph id="ph1">`Worker`</ph> 두 응용 프로그램 도메인에 로드 해야 하지만 새 응용 프로그램 도메인에만 있는 다른 어셈블리를 로드할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source><bpt id="p1">**</bpt>Example 2<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>예제 2<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MarshalByRefObject">
          <source>The following example demonstrates a class derived from <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> that is used later in remoting.</source>
          <target state="translated">다음 예제에서 파생 된 클래스 <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> 즉 나중에 사용 되는 원격 서비스입니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> of the object that the new <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.ObjRef" /&gt;</ph> will reference.</source>
          <target state="translated">새 <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph>가 참조할 개체의 <ph id="ph2">&lt;see cref="T:System.Runtime.Remoting.ObjRef" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.</source>
          <target state="translated">원격 개체와 통신하는 데 사용되는 프록시 생성에 필요한 모든 관련 정보가 들어 있는 개체를 만듭니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>Information required to generate a proxy.</source>
          <target state="translated">프록시를 생성하는 데 필요한 정보입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.CreateObjRef%2A&gt;</ph> method is called by remote object creation methods such as <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject.CreateObjRef%2A&gt;</ph> 메서드는 원격 개체 생성 방법 같은 <ph id="ph2">&lt;xref:System.AppDomain.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph3">&lt;xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>In most cases, there is no need to override this method.</source>
          <target state="translated">대부분의 경우에서이 메서드를 재정의 하지 않아도가 있습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>This instance is not a valid remoting object.</source>
          <target state="translated">이 인스턴스가 유효한 원격 개체가 아닌 경우</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">직접 실행 호출자에 인프라 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.CreateObjRef(System.Type)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>Retrieves the current lifetime service object that controls the lifetime policy for this instance.</source>
          <target state="translated">이 인스턴스의 수명 정책을 제어하는 현재의 수명 서비스 개체를 검색합니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>An object of type <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> used to control the lifetime policy for this instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> 형식의 개체는 이 인스턴스의 수명 정책을 제어하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>For more information about lifetime services, see the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> class.</source>
          <target state="translated">수명 서비스에 대 한 자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">직접 실행 호출자에 인프라 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.GetLifetimeService">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>Obtains a lifetime service object to control the lifetime policy for this instance.</source>
          <target state="translated">이 인스턴스의 수명 정책을 제어하는 수명 서비스 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>An object of type <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> used to control the lifetime policy for this instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.Lifetime.ILease" /&gt;</ph> 형식의 개체는 이 인스턴스의 수명 정책을 제어하는 데 사용됩니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /&gt;</ph> property.</source>
          <target state="translated">이 개체는 해당 인스턴스에 대한 현재 수명 서비스 개체이고(있는 경우), 그렇지 않으면 <ph id="ph1">&lt;see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /&gt;</ph> 속성의 값으로 초기화된 새 수명 서비스 개체입니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>For more information about lifetime services, see the <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> class.</source>
          <target state="translated">수명 서비스에 대 한 자세한 내용은 참조는 <ph id="ph1">&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>The following code example demonstrates creating a lease.</source>
          <target state="translated">다음 코드 예제에서는 임대를 만드는 하는 방법을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>The immediate caller does not have infrastructure permission.</source>
          <target state="translated">직접 실행 호출자에 인프라 권한이 없는 경우</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.InitializeLifetimeService">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="T:System.MarshalByRefObject">
          <source>Creates a shallow copy of the current object.</source>
          <target state="translated">현재 개체의 부분 복사본을 만듭니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> to delete the current <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object's identity, which will cause the object to be assigned a new identity when it is marshaled across a remoting boundary.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph>이면 현재 <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> 개체의 ID를 삭제하여 개체가 원격 경계를 넘어 마샬링될 때 개체에 새 ID가 할당됩니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>A value of <ph id="ph1">&lt;see langword="false" /&gt;</ph> is usually appropriate.</source>
          <target state="translated">대개 <ph id="ph1">&lt;see langword="false" /&gt;</ph> 값이 적합합니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to copy the current <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object's identity to its clone, which will cause remoting client calls to be routed to the remote server object.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>이면 현재 <ph id="ph2">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> 개체의 ID를 복제본으로 복사하여 원격 클라이언트 호출이 원격 서버 개체로 라우팅됩니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>Creates a shallow copy of the current <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> 개체의 단순 복사본을 만듭니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>A shallow copy of the current <ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.MarshalByRefObject" /&gt;</ph> 개체의 단순 복사본입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> method creates a shallow copy by creating a new <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph> object, and then copying the nonstatic fields of the current <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> object to the new object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> 메서드 새 단순 복사본을 만듭니다. <ph id="ph2">&lt;xref:System.MarshalByRefObject&gt;</ph> 개체를 현재의 비정적 필드를 복사 하 여 <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> 개체를 새 개체입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>If a field is a value type, a bit-by-bit copy of the field is performed.</source>
          <target state="translated">필드 값 형식이 필드의 비트 단위로 복사가 수행 됩니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.</source>
          <target state="translated">필드 참조 형식인 경우 참조를 복사할 수 있지만 참조 된 개체는 필요는 없습니다. 따라서 원래 개체 퓨 터와 복제본 같은 개체를 참조 합니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>For example, consider a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy C. Use a class that implements the <ph id="ph2">&lt;xref:System.ICloneable&gt;</ph> interface to perform a deep or shallow copy of an object.</source>
          <target state="translated">예를 들어 한 <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> A 개체 및 개체 B를 참조 하는 X를 호출 하는 개체 참조 합니다. 3. 개체 X의 단순 복사본을 만듭니다 개체 A와 B를 참조 하는 새 개체 X2 반면, X의 전체 복사본을 새 개체 X2 A2 및 b 2를 A의 복사본 인 새 개체를 참조 하는 만들고 B. b 2를 참조 합니다. 3. 사용 하 여 구현 하는 클래스 복사본 인 새 개체 c 2는 <ph id="ph2">&lt;xref:System.ICloneable&gt;</ph> 전체 또는 단순 c 수행 하는 인터페이스 개체의 복사 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The identity of a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object is defined as the remote server object that is the target of a remoting client call.</source>
          <target state="translated">id는 <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> 원격 클라이언트 호출의 대상이 되는 원격 서버 개체를 개체 이루어집니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>By default, the memberwise clone of a <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> object has the same identity as the original object, which is typically not the correct behavior for clones of server-side objects that are marshaled across a remoting boundary to the client side.</source>
          <target state="translated">멤버 수준 복제를 기본적으로는 <ph id="ph1">&lt;xref:System.MarshalByRefObject&gt;</ph> 개체에는 보통 되지 않은 클라이언트 쪽 원격 경계를 넘어 마샬링되는 서버 쪽 개체의 복제본에 대 한 올바른 동작은 원래 개체와 동일한 id입니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>Specify <ph id="ph1">`false`</ph>, which is usually appropriate, to delete the identity of the clone and cause a new identity to be assigned when the clone is marshaled across a remoting boundary, or <ph id="ph2">`true`</ph> to cause the clone to retain the identity of the original <ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> object.</source>
          <target state="translated">지정 <ph id="ph1">`false`</ph>, 일반적으로 적절 하 게 복제의 id를 삭제 하 고 원격 경계를 넘어 복제본 마샬링될 때 할당 될 새 id를 일으킬 변수인 또는 <ph id="ph2">`true`</ph> 원래id유지하도록복제본을<ph id="ph3">&lt;xref:System.MarshalByRefObject&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> method is intended to be used by developers implementing remote server objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MarshalByRefObject.MemberwiseClone%28System.Boolean%29&gt;</ph> 방법은 원격 서버 개체를 구현 하는 개발자가 사용 하는 데 사용 됩니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>