<Type Name="Comparison&lt;T&gt;" FullName="System.Comparison&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="61b6bd924d6936bdba4f06e58afdabcea9d37ed6" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30726807" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate int Comparison&lt;in T&gt;(T x, T y);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Comparison`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Comparison`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Comparison(Of In T)(x As T, y As T) As Integer " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate int Comparison(T x, T y);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="x" Type="T" />
    <Parameter Name="y" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Int32</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">비교할 개체의 형식입니다.</typeparam>
    <param name="x">비교할 첫 번째 개체입니다.</param>
    <param name="y">비교할 두 번째 개체입니다.</param>
    <summary>동일한 형식의 두 개체를 비교하는 메서드를 나타냅니다.</summary>
    <returns>다음 표와 같이 <paramref name="x" /> 및 <paramref name="y" />의 상대 값을 나타내는 부호 있는 정수입니다.  
  
 <list type="table"><listheader><term> 값  
  
 </term><description> 의미  
  
 </description></listheader><item><term> 0보다 작음  
  
 </term><description><paramref name="x" />가 <paramref name="y" />보다 작습니다.  
  
 </description></item><item><term> 0  
  
 </term><description><paramref name="x" />가 <paramref name="y" />와 같습니다.  
  
 </description></item><item><term> 0보다 큼  
  
 </term><description><paramref name="x" />가 <paramref name="y" />보다 큽니다.  
  
 </description></item></list></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 대리자를 사용 하 여는 <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29> 메서드 오버 로드는 <xref:System.Array> 클래스 및 <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> 메서드 오버 로드는 <xref:System.Collections.Generic.List%601> 배열 또는 목록 요소를 정렬 하는 클래스입니다.  
  
   
  
## Examples  
 다음 코드 예제에서는 <xref:System.Comparison%601> 대리자는 <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> 메서드 오버 로드 합니다.  
  
 코드 예제에서는 문자열에 대 한 대체 비교 메서드를 정의 `CompareDinosByLength`합니다. 이 방법은 다음과 같습니다:에 대 한 여부도 먼저 `null`, null 참조는 null이 아닌 미만으로 처리 됩니다. 둘째, 문자열 길이 비교 하 고 더 긴 문자열이 큰 것으로 간주 됩니다. 셋째, 길이 값이 같으면 일반 문자열 비교 ´ ù.  
  
 A <xref:System.Collections.Generic.List%601> 문자열의 만들어지고 특정 순서 없이에서 4 개의 문자열 채워집니다. 목록에는 빈 문자열과 null 참조가 포함 됩니다. 사용 하 여 정렬 목록이 표시 되는 <xref:System.Comparison%601> 나타내는 제네릭 대리자는 `CompareDinosByLength` 메서드를 다시 표시 합니다.  
  
 [!code-cpp[List\`1_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]
 [!code-vb[List\`1_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]  
  
 다음 예제에서는 <xref:System.Comparison%601> 컬렉션의 요소를 정렬 하는 대리자 `CityInfo` 개체입니다. `CityInfo` 도시 및 해당 도시의 인구에 대 한 정보를 포함 하는 응용 프로그램 정의 클래스가입니다. 이 예제에서는 세 가지 메서드를 정의 `CompareByName`, `CompareByPopulation`, 및 `CompareByNames`, 순서 지정의 세 가지 방법으로 제공 하는 `CityInfo` 개체입니다. 각 방법에 할당 되는 `comparison` 의 인수는 <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.Comparison\`1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.comparison`1/cs/comparisont1.cs#1)]
 [!code-vb[System.Comparison\`1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.comparison`1/vb/comparisont1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Sort``1(``0[],System.Comparison{``0})" />
    <altmember cref="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})" />
  </Docs>
</Type>