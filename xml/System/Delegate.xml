<Type Name="Delegate" FullName="System.Delegate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa411050e839a877b80d93acdac19b913a6e8a46" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39854297" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Delegate : ICloneable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract serializable beforefieldinit Delegate extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Delegate" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Delegate&#xA;Implements ICloneable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Delegate abstract : ICloneable, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Delegate = class&#xA;    interface ICloneable&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f8d6a-101">대리자는 정적 메서드 또는 클래스 인스턴스 및 해당 클래스의 인스턴스 메서드를 참조하는 데이터 구조입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f8d6a-101">Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-102"><xref:System.Delegate> 클래스는 대리자 형식에 대 한 기본 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-102">The <xref:System.Delegate> class is the base class for delegate types.</span></span> <span data-ttu-id="f8d6a-103">그러나 시스템 및 컴파일러에서 명시적으로 파생할 수는 <xref:System.Delegate> 클래스 또는 <xref:System.MulticastDelegate> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-103">However, only the system and compilers can derive explicitly from the <xref:System.Delegate> class or from the <xref:System.MulticastDelegate> class.</span></span> <span data-ttu-id="f8d6a-104">것도 대리자 형식에서 새 형식을 파생할 수입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-104">It is also not permissible to derive a new type from a delegate type.</span></span> <span data-ttu-id="f8d6a-105"><xref:System.Delegate> 클래스 대리자 형식으로 간주 되지 않으면 대리자 형식을 파생 하는 데 사용 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-105">The <xref:System.Delegate> class is not considered a delegate type; it is a class used to derive delegate types.</span></span>  
  
 <span data-ttu-id="f8d6a-106">대부분의 언어를 구현를 `delegate` 키워드 및 해당 언어 컴파일러에서 파생 시킬 수 있습니다 합니다 <xref:System.MulticastDelegate> 클래스; 따라서 사용자가 사용 해야는 `delegate` 언어에서 제공 하는 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-106">Most languages implement a `delegate` keyword, and compilers for those languages are able to derive from the <xref:System.MulticastDelegate> class; therefore, users should use the `delegate` keyword provided by the language.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-107">공용 언어 런타임에서 제공는 `Invoke` 대리자와 동일한 서명 사용 하 여 각 대리자 형식에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-107">The common language runtime provides an `Invoke` method for each delegate type, with the same signature as the delegate.</span></span> <span data-ttu-id="f8d6a-108">컴파일러는 자동으로 호출 하므로 C#, Visual Basic 또는 Visual c + +에서이 메서드를 명시적으로 호출할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-108">You do not have to call this method explicitly from C#, Visual Basic, or Visual C++, because the compilers call it automatically.</span></span> <span data-ttu-id="f8d6a-109">합니다 `Invoke` 메서드는에서 유용 [리플렉션](~/docs/framework/reflection-and-codedom/reflection.md) 대리자 형식 시그니처를 찾으려는 경우.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-109">The `Invoke` method is useful in [reflection](~/docs/framework/reflection-and-codedom/reflection.md) when you want to find the signature of the delegate type.</span></span>  
  
 <span data-ttu-id="f8d6a-110">공용 언어 런타임에서 제공 각 대리자 형식과 `BeginInvoke` 및 `EndInvoke` 메서드를 대리자의 비동기 호출을 사용 하도록 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-110">The common language runtime provides each delegate type with `BeginInvoke` and `EndInvoke` methods, to enable asynchronous invocation of the delegate.</span></span> <span data-ttu-id="f8d6a-111">이러한 방법에 대 한 자세한 내용은 참조 하세요. [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-111">For more information about these methods, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).</span></span>  
  
 <span data-ttu-id="f8d6a-112">하나 이상의 메서드의 서명을 지정 하는 계약을 설정 하는 대리자 형식 선언 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-112">The declaration of a delegate type establishes a contract that specifies the signature of one or more methods.</span></span> <span data-ttu-id="f8d6a-113">대리자는에 대 한 참조 된 대리자 형식의 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-113">A delegate is an instance of a delegate type that has references to:</span></span>  
  
-   <span data-ttu-id="f8d6a-114">형식과 해당 형식에 할당할 수 있는 대상 개체의 인스턴스 메서드</span><span class="sxs-lookup"><span data-stu-id="f8d6a-114">An instance method of a type and a target object assignable to that type.</span></span>  
  
-   <span data-ttu-id="f8d6a-115">숨겨진 된 형식의 인스턴스 메서드인 `this` 정식 매개 변수 목록에서 노출 하는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-115">An instance method of a type, with the hidden `this` parameter exposed in the formal parameter list.</span></span> <span data-ttu-id="f8d6a-116">열려 있는 인스턴스 대리자를 대리자 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-116">The delegate is said to be an open instance delegate.</span></span>  
  
-   <span data-ttu-id="f8d6a-117">정적 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-117">A static method.</span></span>  
  
-   <span data-ttu-id="f8d6a-118">정적 메서드와 메서드의 첫 번째 매개 변수에 할당할 수 있는 대상 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-118">A static method and a target object assignable to the first parameter of the method.</span></span> <span data-ttu-id="f8d6a-119">대리자는 첫 번째 인수에 대해 닫혀 있는 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-119">The delegate is said to be closed over its first argument.</span></span>  
  
 <span data-ttu-id="f8d6a-120">대리자 바인딩에 대 한 자세한 내용은 참조는 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-120">For more information on delegate binding, see the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-121">.NET Framework 버전 1.0 및 1.1에서는 대리자 메서드 서명의 정확 하 게 시그니처와 일치 하는 대리자 형식으로 지정 하는 경우에 메서드를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-121">In the .NET Framework versions 1.0 and 1.1, a delegate can represent a method only if the signature of the method exactly matches the signature specified by the delegate type.</span></span> <span data-ttu-id="f8d6a-122">따라서 앞의 목록에서 첫 번째 및 세 번째 글머리 지원 하며 첫 번째 글머리 기호 형식이 정확히 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-122">Thus, only the first and third bullets in the preceding list are supported, and the first bullet requires an exact type match.</span></span>  
  
 <span data-ttu-id="f8d6a-123">첫 번째 인수 (가장 일반적인 경우)에 대해 닫혀 인스턴스 메서드를 나타내는 대리자를 대리자 저장 메서드의 진입점에 대 한 참조 및 호출 대상에 정의 된 형식에 할당할 수 있는 형식의 개체에 대 한 참조는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-123">When a delegate represents an instance method closed over its first argument (the most common case), the delegate stores a reference to the method's entry point and a reference to an object, called the target, which is of a type assignable to the type that defined the method.</span></span> <span data-ttu-id="f8d6a-124">대리자가 열려 있는 인스턴스 메서드를 나타내는 경우 메서드 진입점에 대 한 참조를 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-124">When a delegate represents an open instance method, it stores a reference to the method's entry point.</span></span> <span data-ttu-id="f8d6a-125">대리자 시그니처는 숨겨진 있어야 합니다. `this` 매개 변수는 정식 매개 변수 목록의 경우 대리자에는 대상 개체에 대 한 참조가 없는 및 대리자를 호출할 때 대상 개체를 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-125">The delegate signature must include the hidden `this` parameter in its formal parameter list; in this case, the delegate does not have a reference to a target object, and a target object must be supplied when the delegate is invoked.</span></span>  
  
 <span data-ttu-id="f8d6a-126">대리자는 정적 메서드를 나타내는 경우 대리자 메서드의 진입점에 대 한 참조를 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-126">When a delegate represents a static method, the delegate stores a reference to the method's entry point.</span></span> <span data-ttu-id="f8d6a-127">대리자에서 첫 번째 인수에 대해 닫혀 정적 메서드를 나타내는 경우 대리자 메서드의 진입점에 대 한 참조 및 메서드의 첫 번째 인수의 형식에 할당할 수 있는 대상 개체에 대 한 참조를 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-127">When a delegate represents a static method closed over its first argument, the delegate stores a reference to the method's entry point and a reference to a target object assignable to the type of the method's first argument.</span></span> <span data-ttu-id="f8d6a-128">대리자 호출 되 면 정적 메서드의 첫 번째 인수는 대상 개체를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-128">When the delegate is invoked, the first argument of the static method receives the target object.</span></span>  
  
 <span data-ttu-id="f8d6a-129">대리자의 호출 목록은 순서가 지정 된 집합은 목록의 각 요소가 정확히 하나를 호출 대리자가 나타내는 메서드의 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-129">The invocation list of a delegate is an ordered set of delegates in which each element of the list invokes exactly one of the methods represented by the delegate.</span></span> <span data-ttu-id="f8d6a-130">호출 목록을 중복 메서드를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-130">An invocation list can contain duplicate methods.</span></span> <span data-ttu-id="f8d6a-131">메서드는 호출 하는 동안 호출 목록에 나타나는 순서 대로 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-131">During an invocation, methods are invoked in the order in which they appear in the invocation list.</span></span> <span data-ttu-id="f8d6a-132">대리자는 호출 목록의 모든 메서드를 호출 하려고 합니다. 중복 된 각 시간에 대 한 호출 목록에 표시 되 면 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-132">A delegate attempts to invoke every method in its invocation list; duplicates are invoked once for each time they appear in the invocation list.</span></span> <span data-ttu-id="f8d6a-133">대리자는 변경할 수 없습니다. 를 만든 후에 대리자의 호출 목록이 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-133">Delegates are immutable; once created, the invocation list of a delegate does not change.</span></span>  
  
 <span data-ttu-id="f8d6a-134">대리자 라고 멀티 캐스트 또는 결합할 대리자 하나 이상의 메서드를 호출할 수 작업을 결합 하 여 사용 될 수 있으므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-134">Delegates are referred to as multicast, or combinable, because a delegate can invoke one or more methods and can be used in combining operations.</span></span>  
  
 <span data-ttu-id="f8d6a-135">와 같은 작업을 결합 <xref:System.Delegate.Combine%2A> 고 <xref:System.Delegate.Remove%2A>, 기존 대리자를 변경 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-135">Combining operations, such as <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A>, do not alter existing delegates.</span></span> <span data-ttu-id="f8d6a-136">이러한 작업에서 변경 되지 않은 대리자를 작업의 결과 포함 하는 새 대리자를 반환 하는 대신 또는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-136">Instead, such an operation returns a new delegate that contains the results of the operation, an unchanged delegate, or `null`.</span></span> <span data-ttu-id="f8d6a-137">결합 작업을 반환 합니다 `null` 경우 작업의 결과 하나 이상의 메서드를 참조 하지 않는 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-137">A combining operation returns `null` when the result of the operation is a delegate that does not reference at least one method.</span></span> <span data-ttu-id="f8d6a-138">결합 작업을 요청한 작업에 영향을 주지 않습니다 경우는 변경 되지 않은 대리자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-138">A combining operation returns an unchanged delegate when the requested operation has no effect.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-139">언어 사용을 관리 합니다 <xref:System.Delegate.Combine%2A> 및 <xref:System.Delegate.Remove%2A> 대리자 작업을 구현 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-139">Managed languages use the <xref:System.Delegate.Combine%2A> and <xref:System.Delegate.Remove%2A> methods to implement delegate operations.</span></span> <span data-ttu-id="f8d6a-140">예를 들어 합니다 `AddHandler` 및 `RemoveHandler` Visual Basic의 선언문 및 + = 및-= 연산자를 대리자 C#의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-140">Examples include the `AddHandler` and `RemoveHandler` statements in Visual Basic and the += and -= operators on delegate types in C#.</span></span>  
  
 <span data-ttu-id="f8d6a-141">부터 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], 제네릭 대리자 형식에서 variant 형식 매개 변수를 가질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-141">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], generic delegate types can have variant type parameters.</span></span> <span data-ttu-id="f8d6a-142">반공 변 형식 매개 변수는 대리자의 매개 변수 형식으로 사용할 수 및 반환 형식으로 공변 (covariant) 형식 매개 변수를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-142">Contravariant type parameters can be used as parameter types of the delegate, and a covariant type parameter can be used as the return type.</span></span> <span data-ttu-id="f8d6a-143">이 기능을 사용 하면 제네릭 대리자에 설명 된 대로 해당 형식 인수가 상속 관계를 사용 하 여 참조 형식이 면 대입과 호환 되도록 동일한 제네릭 형식 정의에서 생성 되는 형식을 [공변성 (covariance) 및 반 공변성](~/docs/standard/generics/covariance-and-contravariance.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-143">This feature allows generic delegate types that are constructed from the same generic type definition to be assignment-compatible if their type arguments are reference types with an inheritance relationship, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-144">제네릭 대리자의 할당 호환 분산으로 인해 없는 결합할 수 있는 것은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-144">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="f8d6a-145">결합할 수 있으려면 형식을 정확 하 게 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-145">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="f8d6a-146">예를 들어 라는 클래스를 가정 `Derived` 라는 클래스에서 파생 된 `Base`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-146">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="f8d6a-147">형식의 대리자 `Action<Base>` (`Action(Of Base)` Visual Basic에서) 형식의 변수에 할당할 수 있습니다 `Action<Derived>`, 하지만 두 대리자 형식이 정확히 일치 하지 않기 때문에 함께 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-147">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="f8d6a-148">호출한 메서드가 예외를 throw 하는 경우 메서드 실행을 중지, 대리자의 호출자에 게 전달 될 예외 및 호출 목록에 남아 있는 메서드는 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-148">If an invoked method throws an exception, the method stops executing, the exception is passed back to the caller of the delegate, and remaining methods in the invocation list are not invoked.</span></span> <span data-ttu-id="f8d6a-149">호출자에 예외를 catch 하는 경우에이 동작은 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-149">Catching the exception in the caller does not alter this behavior.</span></span>  
  
 <span data-ttu-id="f8d6a-150">반환 값을 포함 하는 대리자를 호출한 메서드 서명의 경우 대리자 호출 목록에서 마지막 요소의 반환 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-150">When the signature of the methods invoked by a delegate includes a return value, the delegate returns the return value of the last element in the invocation list.</span></span> <span data-ttu-id="f8d6a-151">서명을 참조로 전달 되는 매개 변수를 포함 하는 경우 매개 변수의 최종 값 순차적으로 실행 하 고 매개 변수의 값을 업데이트 호출 목록의 모든 메서드의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-151">When the signature includes a parameter that is passed by reference, the final value of the parameter is the result of every method in the invocation list executing sequentially and updating the parameter's value.</span></span>  
  
 <span data-ttu-id="f8d6a-152">C 또는 c + +에서 대리자의 가장 가까운 해당 함수 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-152">The closest equivalent of a delegate in C or C++ is a function pointer.</span></span> <span data-ttu-id="f8d6a-153">대리자는 정적 메서드 또는 인스턴스 메서드를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-153">A delegate can represent a static method or an instance method.</span></span> <span data-ttu-id="f8d6a-154">대리자가 인스턴스 메서드를 나타내는 경우 대리자 메서드의 진입점에 대 한 참조 뿐만 아니라 클래스 인스턴스에 대 한 참조를 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-154">When the delegate represents an instance method, the delegate stores not only a reference to the method's entry point, but also a reference to the class instance.</span></span> <span data-ttu-id="f8d6a-155">함수 포인터와 달리 대리자는 개체 지향적 이며 형식 안전.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-155">Unlike function pointers, delegates are object oriented and type safe.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d6a-156">다음 예제에서는 명명 된 대리자를 정의 하는 방법을 보여 줍니다 `myMethodDelegate`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-156">The following example shows how to define a delegate named `myMethodDelegate`.</span></span> <span data-ttu-id="f8d6a-157">이 대리자의 인스턴스를 중첩 된의 정적 메서드와 인스턴스 메서드를 만들 `mySampleClass` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-157">Instances of this delegate are created for an instance method and a static method of the nested `mySampleClass` class.</span></span> <span data-ttu-id="f8d6a-158">인스턴스 메서드에 대 한 대리자의 인스턴스가 필요 `mySampleClass`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-158">The delegate for the instance method requires an instance of `mySampleClass`.</span></span> <span data-ttu-id="f8d6a-159">합니다 `mySampleClass` 인스턴스는 명명 된 변수에 저장 `mySC`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-159">The `mySampleClass` instance is saved in a variable named `mySC`.</span></span>  
  
 [!code-cpp[Classic Delegate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Delegate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Delegate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Delegate Example/CS/source.cs#1)]
 [!code-vb[Classic Delegate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Delegate Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.MulticastDelegate" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f8d6a-160">새 대리자를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-160">Initializes a new delegate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Object, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : obj * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="f8d6a-161">대리자가 <c>메서드</c>를 호출하는 클래스 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-161">The class instance on which the delegate invokes <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="f8d6a-162">대리자가 나타내는 인스턴스 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-162">The name of the instance method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-163">지정된 클래스 인스턴스에서 지정된 인스턴스 메서드를 호출하는 대리자를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-163">Initializes a delegate that invokes the specified instance method on the specified class instance.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-164">이 생성자는 응용 프로그램 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-164">This constructor cannot be used in application code.</span></span> <span data-ttu-id="f8d6a-165">인스턴스 메서드의 이름을 지정 하 여 대리자를 만들려는 오버 로드를 사용 합니다 <xref:System.Delegate.CreateDelegate%2A> 메서드 이름 및 대상 개체를 지정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-165">To create a delegate by specifying the name of an instance method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name and a target object.</span></span> <span data-ttu-id="f8d6a-166">예를 들어를 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> 메서드 오버 로드는 지정 된 이름의 인스턴스 메서드의 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-166">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29> method overload creates a delegate for an instance method with a specified name.</span></span>  
  
 <span data-ttu-id="f8d6a-167">이 생성자 대리자 예를 들어만 메서드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-167">This constructor creates delegates for instance methods only.</span></span> <span data-ttu-id="f8d6a-168">클래스의 인스턴스와 연결 된 메서드가 인스턴스 메서드 정적 메서드는 클래스 자체에 연결 되는 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-168">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d6a-169">
            <paramref name="target" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-169">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-170">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-170">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-171">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-171">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-172">대상 메서드에 바인딩할 때 오류가 발생한 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-172">There was an error binding to the target method.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-173">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-173">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-174">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-174">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Delegate (Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.#ctor(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (target As Type, method As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Delegate(Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="new Delegate : Type * string -&gt; Delegate" Usage="new System.Delegate (target, method)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="f8d6a-175">
            <c>메서드</c>를 정의하는 클래스를 나타내는 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-175">The <see cref="T:System.Type" /> representing the class that defines <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="f8d6a-176">대리자가 나타내는 정적 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-176">The name of the static method that the delegate represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-177">지정된 클래스에서 지정된 정적 메서드를 호출하는 대리자를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-177">Initializes a delegate that invokes the specified static method from the specified class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-178">이 생성자는 응용 프로그램 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-178">This constructor cannot be used in application code.</span></span> <span data-ttu-id="f8d6a-179">정적 메서드 이름을 지정 하 여 대리자를 만들려는 오버 로드를 사용 합니다 <xref:System.Delegate.CreateDelegate%2A> 메서드 메서드 이름을 지정 하지만 대상 개체를 지정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-179">To create a delegate by specifying the name of a static method, use an overload of the <xref:System.Delegate.CreateDelegate%2A> method that specifies a method name but does not specify a target object.</span></span> <span data-ttu-id="f8d6a-180">예를 들어를 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> 메서드 오버 로드는 지정 된 이름의 메서드에 대 한 정적 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-180">For example, the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29> method overload creates a static delegate for a method with a specified name.</span></span>  
  
 <span data-ttu-id="f8d6a-181">이 생성자는 정적 메서드만 대 한 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-181">This constructor creates delegates for static methods only.</span></span> <span data-ttu-id="f8d6a-182">클래스의 인스턴스와 연결 된 메서드가 인스턴스 메서드 정적 메서드는 클래스 자체에 연결 되는 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-182">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d6a-183">
            <paramref name="target" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-183">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-184">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-184">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-185">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-185">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-186">
            <paramref name="target" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-186">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-187">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-187">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="f8d6a-188">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-188">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-189">
            <paramref name="target" />이 개방형 제네릭 형식을 나타내는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-189">
              <paramref name="target" /> represents an open generic type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-190">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-190">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-191">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-191">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="delegate.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f8d6a-192">대리자의 부분 복사본을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-192">Creates a shallow copy of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-193">대리자의 부분 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-193">A shallow copy of the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-194">복사본은 동일한 <xref:System.Type>, 원래 대리자로 대상, 메서드 및 호출 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-194">The clone has the same <xref:System.Type>, target, method, and invocation list as the original delegate.</span></span>  
  
 <span data-ttu-id="f8d6a-195">단순 복사본을 원래 개체와 동일한 형식의 새 인스턴스를 만듭니다 및 그런 다음 원래 개체의 비정적 필드에 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-195">A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the original object.</span></span> <span data-ttu-id="f8d6a-196">필드 값 형식이 면 필드를 비트 단위로 복사가 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-196">If the field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="f8d6a-197">필드 참조 형식이 면 참조가 복사 되 고 이지만 참조 된 개체는 없습니다. 따라서 원래 개체에 대 한 참조 및 복제본에 대 한 참조는 동일한 개체를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-197">If the field is a reference type, the reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the clone point to the same object.</span></span> <span data-ttu-id="f8d6a-198">반대로 개체의 전체 복사본을 직접 또는 간접적으로 참조 개체의 필드를 통해 모든 항목을 복제 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-198">In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by the fields in the object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-199">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-199">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-200">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-200">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Combine">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f8d6a-201">지정된 결합할 수 있는 멀티캐스트 대리자의 호출 목록을 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-201">Concatenates the invocation lists of the specified multicast (combinable) delegates.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (params Delegate[] delegates);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate[] delegates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (ParamArray delegates As Delegate()) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(... cli::array &lt;Delegate ^&gt; ^ delegates);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate[] -&gt; Delegate" Usage="System.Delegate.Combine delegates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegates" Type="System.Delegate[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegates">
          <span data-ttu-id="f8d6a-202">결합할 대리자의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-202">The array of delegates to combine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-203">대리자 배열의 호출 목록을 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-203">Concatenates the invocation lists of an array of delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-204">
            <paramref name="delegates" /> 배열의 대리자 호출 목록을 연결하는 호출 목록이 있는 새 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-204">A new delegate with an invocation list that concatenates the invocation lists of the delegates in the <paramref name="delegates" /> array.</span>
          </span>
          <span data-ttu-id="f8d6a-205">
            <paramref name="delegates" />가 <see langword="null" />이거나 <paramref name="delegates" />에 요소가 없거나 <paramref name="delegates" />의 모든 항목이 <see langword="null" />인 경우 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-205">Returns <see langword="null" /> if <paramref name="delegates" /> is <see langword="null" />, if <paramref name="delegates" /> contains zero elements, or if every entry in <paramref name="delegates" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-206">경우는 `delegates` 배열에 있는 항목이 포함 되어 있습니다. `null`, 이러한 항목은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-206">If the `delegates` array contains entries that are `null`, those entries are ignored.</span></span>  
  
 <span data-ttu-id="f8d6a-207">호출 목록에 있는 중복 항목을 포함할 수 있습니다. 즉, 같은 개체에 동일한 메서드를 참조 하는 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-207">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-208">제네릭 대리자의 할당 호환 분산으로 인해 없는 결합할 수 있는 것은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-208">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="f8d6a-209">결합할 수 있으려면 형식을 정확 하 게 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-209">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="f8d6a-210">예를 들어 라는 클래스를 가정 `Derived` 라는 클래스에서 파생 된 `Base`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-210">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="f8d6a-211">형식의 대리자 `Action<Base>` (`Action(Of Base)` Visual Basic의) 형식의 변수에 할당할 수 있습니다 `Action<Derived>`에 설명 되어 있듯이 [공변성 (covariance) 및 반 공변성](~/docs/standard/generics/covariance-and-contravariance.md), 형식을 수행 하므로 두 대리자를 결합할 수 없습니다 있지만 정확히 일치 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-211">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="f8d6a-212"><xref:System.Delegate.Combine%2A> 때마다 이벤트를 다중 메서드 호출에서 발생 하는 이벤트 처리기를 만드는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-212"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-213">
            <paramref name="delegates" />의 null이 아닌 모든 항목이 동일한 대리자 형식의 인스턴스인 것은 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-213">Not all the non-null entries in <paramref name="delegates" /> are instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-214">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-214">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-215">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-215">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static Delegate Combine (Delegate a, Delegate b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Combine(class System.Delegate a, class System.Delegate b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Combine (a As Delegate, b As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Combine(Delegate ^ a, Delegate ^ b);" />
      <MemberSignature Language="F#" Value="static member Combine : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Combine (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Delegate" />
        <Parameter Name="b" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="f8d6a-216">해당 호출 목록이 처음에 나오는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-216">The delegate whose invocation list comes first.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="f8d6a-217">해당 호출 목록이 마지막에 나오는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-217">The delegate whose invocation list comes last.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-218">두 대리자의 호출 목록을 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-218">Concatenates the invocation lists of two delegates.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-219">호출 목록 <paramref name="a" />와 <paramref name="b" />를 순서대로 연결하는 호출 목록을 가진 새 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-219">A new delegate with an invocation list that concatenates the invocation lists of <paramref name="a" /> and <paramref name="b" /> in that order.</span>
          </span>
          <span data-ttu-id="f8d6a-220">
            <paramref name="b" />가 <see langword="null" />이면 <paramref name="a" />를 반환하고, <paramref name="a" />가 null 참조이면 <paramref name="b" />를 반환하며, <paramref name="a" />와 <paramref name="b" />가 모두 null 참조이면 null 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-220">Returns <paramref name="a" /> if <paramref name="b" /> is <see langword="null" />, returns <paramref name="b" /> if <paramref name="a" /> is a null reference, and returns a null reference if both <paramref name="a" /> and <paramref name="b" /> are null references.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-221">호출 목록에 있는 중복 항목을 포함할 수 있습니다. 즉, 같은 개체에 동일한 메서드를 참조 하는 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-221">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-222">제네릭 대리자의 할당 호환 분산으로 인해 없는 결합할 수 있는 것은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-222">Generic delegates that are assignment-compatible because of variance are not necessarily combinable.</span></span> <span data-ttu-id="f8d6a-223">결합할 수 있으려면 형식을 정확 하 게 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-223">To be combinable, the types must match exactly.</span></span> <span data-ttu-id="f8d6a-224">예를 들어 라는 클래스를 가정 `Derived` 라는 클래스에서 파생 된 `Base`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-224">For example, suppose that a class named `Derived` is derived from a class named `Base`.</span></span> <span data-ttu-id="f8d6a-225">형식의 대리자 `Action<Base>` (`Action(Of Base)` Visual Basic의) 형식의 변수에 할당할 수 있습니다 `Action<Derived>`에 설명 되어 있듯이 [공변성 (covariance) 및 반 공변성](~/docs/standard/generics/covariance-and-contravariance.md), 형식을 수행 하므로 두 대리자를 결합할 수 없습니다 있지만 정확히 일치 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-225">A delegate of type `Action<Base>` (`Action(Of Base)` in Visual Basic) can be assigned to a variable of type `Action<Derived>`, as explained in [Covariance and Contravariance](~/docs/standard/generics/covariance-and-contravariance.md), but the two delegates cannot be combined because the types do not match exactly.</span></span>  
  
 <span data-ttu-id="f8d6a-226"><xref:System.Delegate.Combine%2A> 때마다 이벤트를 다중 메서드 호출에서 발생 하는 이벤트 처리기를 만드는 데 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-226"><xref:System.Delegate.Combine%2A> is useful for creating event handlers that call multiple methods each time an event occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-227">
            <paramref name="a" /> 및 <paramref name="b" /> 모두 <see langword="null" />이 아니며, <paramref name="a" /> 및 <paramref name="b" />가 동일한 대리자 형식의 인스턴스가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-227">Both <paramref name="a" /> and <paramref name="b" /> are not <see langword="null" />, and <paramref name="a" /> and <paramref name="b" /> are not instances of the same delegate type.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-228">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-228">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-229">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-229">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="M:System.Delegate.CombineImpl(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="CombineImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate CombineImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate CombineImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CombineImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CombineImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ CombineImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member CombineImpl : Delegate -&gt; Delegate&#xA;override this.CombineImpl : Delegate -&gt; Delegate" Usage="delegate.CombineImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="f8d6a-230">현재 결합할 수 있는 멀티캐스트 대리자의 호출 목록의 끝에 덧붙일 호출 목록을 가진 결합할 수 있는 멀티캐스트 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-230">The multicast (combinable) delegate whose invocation list to append to the end of the invocation list of the current multicast (combinable) delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-231">지정된 결합할 수 있는 멀티캐스트 대리자와 현재 결합할 수 있는 멀티캐스트 대리자의 호출 목록을 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-231">Concatenates the invocation lists of the specified multicast (combinable) delegate and the current multicast (combinable) delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-232">현재 결합할 수 있는 멀티캐스트 대리자의 호출 목록과 <paramref name="d" />의 호출 목록을 연결하는 호출 목록을 가진 새로운 결합할 수 있는 멀티캐스트 대리자이거나, <paramref name="d" />가 <see langword="null" />인 경우 현재 결합할 수 있는 멀티캐스트 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-232">A new multicast (combinable) delegate with an invocation list that concatenates the invocation list of the current multicast (combinable) delegate and the invocation list of <paramref name="d" />, or the current multicast (combinable) delegate if <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-233">이 메서드는 현재 대리자가 멀티 캐스트 하는 경우에 적용 됩니다. 결합할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-233">This method applies only if the current delegate is multicast (combinable).</span></span>  
  
 <span data-ttu-id="f8d6a-234">현재 구현은 단순히 throw를 <xref:System.MulticastNotSupportedException>입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-234">The current implementation simply throws a <xref:System.MulticastNotSupportedException>.</span></span>  
  
 <span data-ttu-id="f8d6a-235">호출 목록에 있는 중복 항목을 포함할 수 있습니다. 즉, 같은 개체에 동일한 메서드를 참조 하는 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-235">The invocation list can contain duplicate entries; that is, entries that refer to the same method on the same object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MulticastNotSupportedException">
          <span data-ttu-id="f8d6a-236">항상 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-236">Always thrown.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-237">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-237">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-238">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-238">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Combine(System.Delegate,System.Delegate)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="f8d6a-239">지정된 형식의 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-239">Creates a delegate of the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="f8d6a-240">만들 대리자의 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-240">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="f8d6a-241">대리자가 나타내는 정적 또는 인스턴스 메서드를 설명하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-241">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
          <span data-ttu-id="f8d6a-242">.NET Framework 버전 1.0 및 1.1에서는 정적 메서드만 지원됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-242">Only static methods are supported in the .NET Framework version 1.0 and 1.1.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-243">지정된 정적 메서드를 나타내기 위해서 지정된 형식의 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-243">Creates a delegate of the specified type to represent the specified static method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-244">지정된 정적 메서드를 나타내기 위한 지정된 형식의 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-244">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-245">.NET Framework 버전 1.0 및 1.1에서는이 메서드 오버 로드는 정적 메서드만 대 한 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-245">In the .NET Framework version 1.0 and 1.1, this method overload creates delegates for static methods only.</span></span> <span data-ttu-id="f8d6a-246">.NET framework 버전 2.0에서이 메서드 오버 로드 만들 수도 있습니다 열린 인스턴스 메서드가 대리자 활용입니다. 즉, 대리자의 숨겨진된 첫 번째 인수를 명시적으로 제공 하는 인스턴스 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-246">In the .NET Framework version 2.0, this method overload also can create open instance method delegates; that is, delegates that explicitly supply the hidden first argument of instance methods.</span></span> <span data-ttu-id="f8d6a-247">자세한 내용은 참조는 보다 일반적인 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> 메서드 오버 로드를 모든 조합을 열림 또는 닫힘 대리자 인스턴스 또는 정적 메서드를 만들고 필요에 따라 첫 번째 인수를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-247">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods, and optionally to specify a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-248">이 메서드 오버 로드 때 사용할 대리자의 첫 번째 인수에 대해 닫혀 있지 않으면 이므로 좀 더 빠른 경우.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-248">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
 <span data-ttu-id="f8d6a-249">이 메서드 오버 로드는 호출에 해당 하는 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> 메서드 오버 로드 하 고 지정 `true` 에 대 한 `throwOnBindFailure`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-249">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-250">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를 호출자에 게 부여 된 경우 public이 아닌 메서드에 액세스 하려면이 메서드를 사용할 수 있습니다 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그 및 public이 아닌 메서드의 권한 부여 집합 호출자 에게만 부여 된 집합 또는 하위 집합 그 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-250">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="f8d6a-251">(참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-251">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="f8d6a-252">이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-252">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="f8d6a-253">호환 되는 매개 변수 형식 및 반환 형식</span><span class="sxs-lookup"><span data-stu-id="f8d6a-253">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="f8d6a-254">.NET framework 버전 2.0에서 매개 변수 형식 및이 메서드 오버 로드를 사용 하 여 만든 대리자의 반환 형식은 매개 변수 형식과 대리자가 나타내는; 메서드의 반환 형식은 호환 되어야 합니다. 형식을 정확 하 게 일치 하지 않아도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-254">In the .NET Framework version 2.0, the parameter types and return type of a delegate created using this method overload must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span> <span data-ttu-id="f8d6a-255">.NET framework 버전 1.0 및 1.1에서는 형식이 정확히 일치 해야 바인딩 동작을 완화를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-255">This represents a relaxation of the binding behavior in the .NET Framework version 1.0 and 1.1, where the types must match exactly.</span></span>  
  
 <span data-ttu-id="f8d6a-256">대리자 매개 변수의 형식이 메서드 매개 변수의 형식보다 제한적인 경우 대리자의 매개 변수는 메서드의 해당 매개 변수와 호환됩니다. 이 경우 대리자로 전달된 인수를 안전하게 메서드로 전달할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-256">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="f8d6a-257">마찬가지로 메서드의 반환 형식이 대리자의 반환 형식보다 제한적인 경우 대리자의 반환 형식은 메서드의 반환 형식과 호환됩니다. 이 경우 메서드의 반환 값을 안전하게 대리자의 반환 형식으로 캐스팅할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-257">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="f8d6a-258">예를 들어, 형식의 매개 변수를 사용 하 여 대리자 <xref:System.Collections.Hashtable> 의 반환 형식이 <xref:System.Object> 형식의 매개 변수를 사용 하 여 메서드를 나타낼 수 있습니다 <xref:System.Object> 형식의 반환 값 및 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-258">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d6a-259">이 섹션에는 두 코드 예제가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-259">This section contains two code examples.</span></span> <span data-ttu-id="f8d6a-260">첫 번째 예제에서는 두 종류의이 메서드 오버 로드를 사용 하 여 만들 수 있는 대리자를 보여 줍니다.: 인스턴스 메서드를 통해 열고 정적 메서드에 대해 엽니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-260">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="f8d6a-261">두 번째 코드 예제에서는 호환 매개 변수 형식을 보여 줍니다 및 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-261">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="f8d6a-262">**예제 1**</span><span class="sxs-lookup"><span data-stu-id="f8d6a-262">**Example 1**</span></span>  
  
 <span data-ttu-id="f8d6a-263">다음 코드 예제는 두 가지 방법으로이 오버 로드를 사용 하 여 대리자를 만들 수 있습니다는 <xref:System.Delegate.CreateDelegate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-263">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-264">두 가지 오버 로드의는 <xref:System.Delegate.CreateDelegate%2A> 지정 하는 메서드를 <xref:System.Reflection.MethodInfo> 첫 번째 인수가 아닌; 해당 기능을 바인딩하려는 경우 실패 시 throw 할 것인지를 지정할 수 있습니다 하나 인수가 있다는 점을 제외 하면 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-264">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="f8d6a-265">이 코드 예제에서는 두 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-265">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="f8d6a-266">클래스를 선언 하는 예제 `C` 정적 메서드를 사용 하 여 `M2` 및 인스턴스 메서드 `M1`, 두 대리자 형식이: `D1` 의 인스턴스를 사용 하 `C` 및 문자열 및 `D2` 문자열을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-266">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="f8d6a-267">두 번째 클래스가 `Example` 는 대리자를 만드는 코드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-267">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="f8d6a-268">형식의 대리자 `D1`열려 있는 인스턴스 메서드를 나타내는, 인스턴스 메서드 만들어집니다 `M1`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-268">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="f8d6a-269">대리자가 호출 되 면 인스턴스를 전달 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-269">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="f8d6a-270">형식의 대리자 `D2`열려 있는 정적 메서드를 나타내는, 정적 메서드에 대 한 만들어집니다 `M2`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-270">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="f8d6a-271">**예제 2**</span><span class="sxs-lookup"><span data-stu-id="f8d6a-271">**Example 2**</span></span>  
  
 <span data-ttu-id="f8d6a-272">다음 코드 예제에서는 매개 변수 형식 호환성을 보여 줍니다 및 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-272">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
 <span data-ttu-id="f8d6a-273">코드 예제에서는 라는 기본 클래스를 정의 `Base` 라는 클래스 `Derived` 에서 파생 되는 `Base`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-273">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="f8d6a-274">파생된 클래스에는 `static` (`Shared` Visual basic에서) 라는 메서드 `MyMethod` 형식의 매개 변수 하나를 사용 하 여 `Base` 의 반환 형식이 `Derived`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-274">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="f8d6a-275">코드 예제에서는 또한 라는 대리자를 정의 `Example` 형식의 매개 변수 `Derived` 의 반환 형식이 `Base`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-275">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="f8d6a-276">코드 예제에서는 대리자를 지정 하는 방법을 보여 줍니다 `Example` 메서드를 나타내는 데 사용할 수 있습니다 `MyMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-276">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="f8d6a-277">때문에 메서드를 대리자에 바인딩할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-277">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="f8d6a-278">대리자의 매개 변수 형식 (`Derived`) 매개 변수 형식 보다 더 제한적인 `MyMethod` (`Base`)를 항상 안전 하 게 대리자의 인수를 전달 하는, `MyMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-278">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="f8d6a-279">반환 형식은 `MyMethod` (`Derived`) 대리자의 매개 변수 형식 보다 더 제한적인 (`Base`)는 항상 대리자의 반환 형식 메서드의 반환 형식을 캐스팅 하지 않아도 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-279">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="f8d6a-280">코드 예제에는 출력이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-280">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d6a-281">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-281">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-282">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-282">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-283">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-283">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-284">
            <paramref name="type" />은 <see cref="T:System.MulticastDelegate" />를 상속하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-284">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="f8d6a-285">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-285">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-286">
            <paramref name="type" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-286">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-287">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-287">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="f8d6a-288">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-288">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-289">
            <paramref name="method" />가 정적 메서드가 아니고 .NET Framework 버전이 1.0 또는 1.1인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-289">
              <paramref name="method" /> is not a static method, and the .NET Framework version is 1.0 or 1.1.</span>
          </span>
          <span data-ttu-id="f8d6a-290">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-290">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-291">
            <paramref name="method" />를 바인딩할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-291">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="f8d6a-292">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-292">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-293">
            <paramref name="method" />가 <see langword="RuntimeMethodInfo" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-293">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="f8d6a-294">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-294">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="f8d6a-295">
            <paramref name="type" />의 <see langword="Invoke" /> 메서드를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-295">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="f8d6a-296">호출자에게 <paramref name="method" />에 액세스하는 데 필요한 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-296">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-297">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-297">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-298">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-298">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="f8d6a-299">만들 대리자의 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-299">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="f8d6a-300">대리자가 바인드되는 개체이거나, <c>메서드</c>를 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)으로 처리하는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-300">The object to which the delegate is bound, or <see langword="null" /> to treat <c>method</c> as <see langword="static" /> (<see langword="Shared" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="f8d6a-301">대리자가 나타내는 정적 또는 인스턴스 메서드를 설명하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-301">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-302">지정한 첫 번째 인수를 사용하여 지정한 정적 또는 인스턴스 메서드를 나타내는 지정한 형식의 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-302">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-303">지정된 정적 또는 인스턴스 메서드를 나타내는 지정된 형식의 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-303">A delegate of the specified type that represents the specified static or instance method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-304">이 메서드 오버 로드는 호출에 해당 하는 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> 메서드 오버 로드 하 고 지정 `true` 에 대 한 `throwOnBindFailure`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-304">Calling this method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload and specifying `true` for `throwOnBindFailure`.</span></span> <span data-ttu-id="f8d6a-305">이러한 두 오버 로드는 대리자를 만들 수 있는 가장 유연한 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-305">These two overloads provide the most flexible way to create delegates.</span></span> <span data-ttu-id="f8d6a-306">대리자에 대 한 정적 또는 인스턴스 메서드를 만들고 필요에 따라 첫 번째 인수를 지정 하 고를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-306">You can use them to create delegates for either static or instance methods, and optionally to specify the first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-307">첫 번째 인수를 제공 하지 않는 경우 사용 된 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> 성능 향상을 위해 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-307">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="f8d6a-308">대리자 형식 및 메서드의 호환 반환 형식이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-308">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="f8d6a-309">반환 형식, 즉 `method` 의 반환 형식에 할당할 수 있어야 `type`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-309">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="f8d6a-310">하는 경우 `firstArgument` 가 제공에 전달한 `method` 될 때마다 대리자가 호출 됩니다. `firstArgument` 대리자에 바인딩될 것 이라고 대리자는 첫 번째 인수에 대해 닫혀 있는 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-310">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="f8d6a-311">경우 `method` 은 `static` (`Shared` Visual basic에서)의 경우 대리자를 호출할 때 제공 하는 목록; 첫 번째를 제외한 모든 매개 변수를 포함 하는 인수 `method` 인스턴스 메서드 이면 `firstArgument` 숨겨진 인스턴스에 전달 됩니다 매개 변수 (나타낸 `this` C# 또는 `Me` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="f8d6a-311">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="f8d6a-312">경우 `firstArgument` 제공 됩니다의 첫 번째 매개 변수 `method` 는 참조 형식 이어야 하 고 `firstArgument` 해당 형식과 호환 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-312">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f8d6a-313">경우 `method` 됩니다 `static` (`Shared` Visual Basic에서) 해당 첫 번째 매개 변수는 형식 및 <xref:System.Object> 또는 <xref:System.ValueType>, 다음 `firstArgument` 값 형식일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-313">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="f8d6a-314">이 경우 `firstArgument` 자동으로 boxed 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-314">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="f8d6a-315">C# 또는 Visual Basic 함수에서 호출 하는 것 처럼 다른 인수에 대 한 자동 boxing 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-315">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="f8d6a-316">하는 경우 `firstArgument` 가 null 참조 하 고 `method` 인스턴스 메서드는 결과 서명이 대리자 형식에 따라 달라 집니다 `type` 및 `method`:</span><span class="sxs-lookup"><span data-stu-id="f8d6a-316">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="f8d6a-317">경우 서명의 `type` 의 첫 번째 숨겨진된 매개 변수를 명시적으로 포함 `method`, 열려 있는 인스턴스 메서드를 나타내는 대리자 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-317">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="f8d6a-318">대리자가 호출 인수 목록의 첫 번째 인수의 숨겨진된 인스턴스에 매개 변수에 전달 됩니다 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-318">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="f8d6a-319">경우 서명을 `method` 및 `type` 일치 (즉, 모든 매개 변수 형식이 호환 되는) 경우 대리자는 null 참조 닫혀 있는 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-319">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="f8d6a-320">대리자를 호출 하는 것은 그다지 유용한 작업이 수행 되지 않는 null 인스턴스에서 인스턴스 메서드를 호출 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-320">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="f8d6a-321">하는 경우 `firstArgument` 가 null 참조 하 고 `method` 는 정적 결과에 따라 달라 집니다 서명이 대리자 형식의 `type` 및 `method`:</span><span class="sxs-lookup"><span data-stu-id="f8d6a-321">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="f8d6a-322">경우 서명의 `method` 및 `type` 일치 (즉, 모든 매개 변수 형식이 호환 되는) 경우 열려 있는 정적 메서드를 나타내는 대리자 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-322">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="f8d6a-323">이것이 정적 메서드에 대 한 가장 일반적인 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-323">This is the most common case for static methods.</span></span> <span data-ttu-id="f8d6a-324">사용 하 여 약간 더 나은 성능을 얻을 수는 경우에 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-324">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span>  
  
-   <span data-ttu-id="f8d6a-325">경우 서명의 `type` 의 두 번째 매개 변수를 사용 하 여 시작 `method` 나머지 매개 변수 형식과 호환 되 고 대리자는 null 참조에 대해 닫혀 있는 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-325">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="f8d6a-326">첫 번째 매개 변수는 null 참조가 전달 되는 대리자를 호출 하는 경우 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-326">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-327">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를 호출자에 게 부여 된 경우 public이 아닌 메서드에 액세스 하려면이 메서드를 사용할 수 있습니다 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그 및 public이 아닌 메서드의 권한 부여 집합 호출자 에게만 부여 된 집합 또는 하위 집합 그 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-327">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="f8d6a-328">(참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-328">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="f8d6a-329">이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-329">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="f8d6a-330">호환 되는 매개 변수 형식 및 반환 형식</span><span class="sxs-lookup"><span data-stu-id="f8d6a-330">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="f8d6a-331">매개 변수 형식 및 대리자의 반환 형식은 매개 변수 형식 및 대리자가 나타내는; 메서드의 반환 형식을 사용 하 여 호환 되어야 합니다. 형식을 정확 하 게 일치 하지 않아도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-331">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-332">.NET framework 버전 1.0 및 1.1에서 형식을 정확 하 게 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-332">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="f8d6a-333">대리자 매개 변수의 형식이 메서드 매개 변수의 형식보다 제한적인 경우 대리자의 매개 변수는 메서드의 해당 매개 변수와 호환됩니다. 이 경우 대리자로 전달된 인수를 안전하게 메서드로 전달할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-333">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="f8d6a-334">마찬가지로 메서드의 반환 형식이 대리자의 반환 형식보다 제한적인 경우 대리자의 반환 형식은 메서드의 반환 형식과 호환됩니다. 이 경우 메서드의 반환 값을 안전하게 대리자의 반환 형식으로 캐스팅할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-334">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="f8d6a-335">예를 들어, 형식의 매개 변수를 사용 하 여 대리자 <xref:System.Collections.Hashtable> 의 반환 형식이 <xref:System.Object> 형식의 매개 변수를 사용 하 여 메서드를 나타낼 수 있습니다 <xref:System.Object> 형식의 반환 값 및 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-335">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="f8d6a-336">메서드를 결정 하는 대리자 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-336">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="f8d6a-337">또 다른 유용한 방법은이 오버 로드에서 제공 하는 유연성을 생각할 <xref:System.Delegate.CreateDelegate%2A> 모든 지정 된 대리자 메서드 시그니처 및 메서드 종류 (정적 및 인스턴스)의 4 가지 다른 조합을 나타낼 수 있다는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-337">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="f8d6a-338">대리자 형식이 있다고 가정 `D` 인수 형식 중 하나를 사용 하 여 `C`입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-338">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="f8d6a-339">다음 방법을 설명 합니다. `D` 항상에서 일치 해야 하므로 반환 형식은 무시 하 고 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-339">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="f8d6a-340">`D` 형식의 인수를 하나만 있는 모든 인스턴스 메서드를 나타낼 수 있습니다 `C`인스턴스 메서드가 속하는 형식을에 관계 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-340">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="f8d6a-341">때 <xref:System.Delegate.CreateDelegate%2A> 가 호출 `firstArgument` 형식의 인스턴스인 `method` 속한 결과로 얻은 대리자는 해당 인스턴스가 닫혀 있는 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-341">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="f8d6a-342">(일반적으로, `D` 하는 경우 null 참조에 대해 닫을 수도 있습니다 `firstArgument` 가 null 참조입니다.)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-342">(Trivially, `D` can also be closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
-   <span data-ttu-id="f8d6a-343">`D` 인스턴스 메서드를 나타낼 수 있습니다 `C` 는 인수가 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-343">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="f8d6a-344">때 <xref:System.Delegate.CreateDelegate%2A> 가 호출 `firstArgument` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-344">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="f8d6a-345">결과로 얻은 대리자 열려 있는 인스턴스 메서드를 나타내고 인스턴스의 `C` 는 호출할 때마다 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-345">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="f8d6a-346">`D` 형식의 인수 하나를 사용 하는 정적 메서드를 나타낼 수 있습니다 `C`, 및 메서드는 모든 형식에 속할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-346">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="f8d6a-347">때 <xref:System.Delegate.CreateDelegate%2A> 가 호출 `firstArgument` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-347">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="f8d6a-348">열려 있는 정적 메서드 및 인스턴스의 결과 대리자가 나타내는 `C` 는 호출할 때마다 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-348">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="f8d6a-349">`D` 입력 속한 정적 메서드를 나타낼 수 있습니다 `F` 형식의 두 인수를 포함 하 고 `F` 유형과 `C`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-349">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="f8d6a-350">때 <xref:System.Delegate.CreateDelegate%2A> 가 호출 `firstArgument` 의 인스턴스가 `F`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-350">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="f8d6a-351">결과로 얻은 대리자의 해당 인스턴스에 대해 닫혀 있는 정적 메서드를 나타냅니다. `F`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-351">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="f8d6a-352">대/소문자에서 위치 `F` 및 `C` 동일한 형식은 정적 메서드는 두 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-352">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="f8d6a-353">(이 예에서 `D` 하는 경우 null 참조에 대해 닫혀 `firstArgument` 가 null 참조입니다.)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-353">(In this case, `D` is closed over a null reference if `firstArgument` is a null reference.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d6a-354">이 섹션에는 세 가지 코드 예제가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-354">This section contains three code examples.</span></span> <span data-ttu-id="f8d6a-355">첫 번째 예제에서는 만들 수 있는 대리자의 네 가지 종류: 정적 메서드에 대해 닫은 인스턴스 메서드를 정적 메서드를 통해 열기 인스턴스 메서드를 통해 열기에 대해 닫혀 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-355">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="f8d6a-356">두 번째 코드 예제에서는 호환 매개 변수 형식을 보여 줍니다 및 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-356">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="f8d6a-357">세 번째 코드 예제에서는 단일 대리자 형식을 정의 하 고 모든 메서드를 대리자 형식을 나타낼 수를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-357">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="f8d6a-358">**예제 1**</span><span class="sxs-lookup"><span data-stu-id="f8d6a-358">**Example 1**</span></span>  
  
 <span data-ttu-id="f8d6a-359">다음 코드 예제에서는이 오버 로드를 사용 하 여 대리자를 만들 수 있습니다 네 가지 방법을 보여 줍니다는 <xref:System.Delegate.CreateDelegate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-359">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-360">두 개의 오버 로드가 있습니다 합니다 <xref:System.Delegate.CreateDelegate%2A> 메서드를 지정 하는 `firstArgument` 및 <xref:System.Reflection.MethodInfo>; 해당 기능을 바인딩하려는 경우 실패 시 throw 할 것인지를 지정할 수 있습니다 하나 인수가 있다는 점을 제외 하면 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-360">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="f8d6a-361">이 코드 예제에서는 두 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-361">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="f8d6a-362">이 예제에서는 클래스를 선언 `C` 정적 메서드를 사용 하 여 `M2` 및 인스턴스 메서드 `M1`, 대리자 형식이 세: `D1` 의 인스턴스를 사용 하 `C` 및 문자열 `D2` 문자열, 그리고 `D3`인수가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-362">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="f8d6a-363">두 번째 클래스가 `Example` 는 대리자를 만드는 코드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-363">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="f8d6a-364">형식의 대리자 `D2`인스턴스에 대해 닫혀 `C`, 인스턴스 메서드가 만들어집니다 `M1`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-364">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="f8d6a-365">바인딩된 인스턴스를 표시 하는 다른 문자열을 사용 하 여 호출 `C` 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-365">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="f8d6a-366">형식의 대리자 `D1`열려 있는 인스턴스 메서드를 나타내는, 인스턴스 메서드 만들어집니다 `M1`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-366">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="f8d6a-367">대리자가 호출 되 면 인스턴스를 전달 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-367">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="f8d6a-368">형식의 대리자 `D2`열려 있는 정적 메서드를 나타내는, 정적 메서드에 대 한 만들어집니다 `M2`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-368">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="f8d6a-369">마지막으로, 형식의 대리자 `D3`문자열에 대해 닫혀, 정적 메서드에 대해 생성 됩니다 `M2`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-369">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="f8d6a-370">메서드는 바인딩된 문자열을 사용 하기를 나타내기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-370">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="f8d6a-371">**예제 2**</span><span class="sxs-lookup"><span data-stu-id="f8d6a-371">**Example 2**</span></span>  
  
 <span data-ttu-id="f8d6a-372">다음 코드 예제에서는 매개 변수 형식 호환성을 보여 줍니다 및 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-372">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-373">이 코드 예제에서는 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-373">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="f8d6a-374">다른 사용 오버 <xref:System.Reflection.MethodInfo> 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-374">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="f8d6a-375">코드 예제에서는 라는 기본 클래스를 정의 `Base` 라는 클래스 `Derived` 에서 파생 되는 `Base`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-375">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="f8d6a-376">파생된 클래스에는 `static` (`Shared` Visual basic에서) 라는 메서드 `MyMethod` 형식의 매개 변수 하나를 사용 하 여 `Base` 의 반환 형식이 `Derived`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-376">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="f8d6a-377">코드 예제에서는 또한 라는 대리자를 정의 `Example` 형식의 매개 변수 `Derived` 의 반환 형식이 `Base`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-377">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="f8d6a-378">코드 예제에서는 대리자를 지정 하는 방법을 보여 줍니다 `Example` 메서드를 나타내는 데 사용할 수 있습니다 `MyMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-378">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="f8d6a-379">때문에 메서드를 대리자에 바인딩할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-379">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="f8d6a-380">대리자의 매개 변수 형식 (`Derived`) 매개 변수 형식 보다 더 제한적인 `MyMethod` (`Base`)를 항상 안전 하 게 대리자의 인수를 전달 하는, `MyMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-380">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="f8d6a-381">반환 형식은 `MyMethod` (`Derived`) 대리자의 매개 변수 형식 보다 더 제한적인 (`Base`)는 항상 대리자의 반환 형식 메서드의 반환 형식을 캐스팅 하지 않아도 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-381">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="f8d6a-382">코드 예제에는 출력이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-382">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="f8d6a-383">**예제 3**</span><span class="sxs-lookup"><span data-stu-id="f8d6a-383">**Example 3**</span></span>  
  
 <span data-ttu-id="f8d6a-384">다음 코드 예제에서는 메서드를 보여 줍니다 모든 단일 대리자 형식을 사용 하 여 나타낼 수는 <xref:System.Delegate.CreateDelegate%2A> 대리자를 만드는 방법.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-384">The following code example shows all the methods a single delegate type can represent, using the <xref:System.Delegate.CreateDelegate%2A> method to create the delegates.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-385">두 개의 오버 로드가 있습니다 합니다 <xref:System.Delegate.CreateDelegate%2A> 메서드를 지정 하는 `firstArgument` 및 <xref:System.Reflection.MethodInfo>; 해당 기능을 바인딩하려는 경우 실패 시 throw 할 것인지를 지정할 수 있습니다 하나 인수가 있다는 점을 제외 하면 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-385">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="f8d6a-386">이 코드 예제에서는 두 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-386">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="f8d6a-387">코드 예제에서는 두 개의 클래스를 정의 `C` 하 고 `F`, 및 대리자 형식이 `D` 인수 형식 중 하나를 사용 하 여 `C`입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-387">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="f8d6a-388">클래스는 동일한 정적 메서드와 인스턴스 메서드 `M1`, `M3`, 및 `M4`, 및 클래스 `C` 인스턴스 메서드도 있습니다 `M2` 는 인수가 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-388">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="f8d6a-389">라는 세 번째 클래스 `Example` 는 대리자를 만드는 코드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-389">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="f8d6a-390">대리자가 인스턴스 메서드 `M1` 형식의 `C` 유형과 `F`; 각 해당 형식의 인스턴스에 대해 닫혀 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-390">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="f8d6a-391">메서드 `M1` 형식의 `C` 표시는 `ID` 인수 및 바인딩된 인스턴스의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-391">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="f8d6a-392">메서드에 대 한 대리자가 만들어진 `M2` 형식의 `C`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-392">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="f8d6a-393">인스턴스 열기 대리자를 대리자의 인수는 인스턴스 메서드에 숨겨진된 첫 번째 인수를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-393">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="f8d6a-394">메서드는 다른 인수가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-394">The method has no other arguments.</span></span> <span data-ttu-id="f8d6a-395">정적 메서드인 것 처럼 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-395">It is called as if it were a static method.</span></span>  
  
-   <span data-ttu-id="f8d6a-396">대리자가 정적 메서드에 대 한 `M3` 형식의 `C` 유형과 `F`; 이러한 대리자는 정적 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-396">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="f8d6a-397">마지막으로, 대리자가 정적 메서드 `M4` 형식의 `C` 유형과 `F`각 메서드에 첫 번째 인수로 선언 형식이 고 형식의 인스턴스 제공 되므로 대리자를 해당 인수에 대해 닫혀 .</span><span class="sxs-lookup"><span data-stu-id="f8d6a-397">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="f8d6a-398">메서드 `M4` 형식의 `C` 표시는 `ID` 인수 및 바인딩된 인스턴스의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-398">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d6a-399">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-399">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-400">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-400">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-401">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-401">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-402">
            <paramref name="type" />은 <see cref="T:System.MulticastDelegate" />를 상속하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-402">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="f8d6a-403">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-403">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-404">
            <paramref name="type" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-404">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-405">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-405">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="f8d6a-406">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-406">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-407">
            <paramref name="method" />를 바인딩할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-407">
              <paramref name="method" /> cannot be bound.</span>
          </span>
          <span data-ttu-id="f8d6a-408">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-408">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-409">
            <paramref name="method" />가 <see langword="RuntimeMethodInfo" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-409">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="f8d6a-410">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-410">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="f8d6a-411">
            <paramref name="type" />의 <see langword="Invoke" /> 메서드를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-411">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="f8d6a-412">호출자에게 <paramref name="method" />에 액세스하는 데 필요한 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-412">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-413">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-413">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-414">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-414">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="f8d6a-415">만들 대리자의 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-415">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="f8d6a-416">
            <c>메서드</c>가 호출되는 클래스 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-416">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="f8d6a-417">대리자가 나타내는 인스턴스 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-417">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-418">지정된 클래스 인스턴스에서 호출하는 지정된 인스턴스 메서드를 나타내는 지정된 형식의 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-418">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-419">지정된 클래스 인스턴스에서 호출하는 지정된 인스턴스 메서드를 나타내는 지정된 형식의 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-419">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-420">이 메서드가 대리자 예를 들어만 메서드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-420">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="f8d6a-421">클래스의 인스턴스와 연결 된 메서드가 인스턴스 메서드 정적 메서드는 클래스 자체에 연결 되는 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-421">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="f8d6a-422">이 메서드 오버 로드는 호출에 해당 하는 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> 메서드 오버 로드를 지정 하 `false` 에 대 한 `ignoreCase` 하 고 `true` 에 대 한 `throwOnBindFailure`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-422">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-423">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를 호출자에 게 부여 된 경우 public이 아닌 메서드에 액세스 하려면이 메서드를 사용할 수 있습니다 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그 및 public이 아닌 메서드의 권한 부여 집합 호출자 에게만 부여 된 집합 또는 하위 집합 그 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-423">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="f8d6a-424">(참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-424">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="f8d6a-425">이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-425">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d6a-426">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-426">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-427">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-427">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-428">
            <paramref name="target" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-428">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-429">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-429">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-430">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-430">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-431">
            <paramref name="type" />은 <see cref="T:System.MulticastDelegate" />를 상속하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-431">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="f8d6a-432">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-432">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-433">
            <paramref name="type" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-433">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-434">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-434">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="f8d6a-435">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-435">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-436">
            <paramref name="method" />는 인스턴스 메서드가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-436">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="f8d6a-437">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-437">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-438">예를 들어 <paramref name="method" />는 찾을 수 없기 때문에 바인딩할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-438">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="f8d6a-439">
            <paramref name="type" />의 <see langword="Invoke" /> 메서드를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-439">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="f8d6a-440">호출자에게 <paramref name="method" />에 액세스하는 데 필요한 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-440">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-441">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-441">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-442">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-442">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="f8d6a-443">만들 대리자의 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-443">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="f8d6a-444">대리자가 나타내는 정적 또는 인스턴스 메서드를 설명하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-444">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="f8d6a-445">
            <c>메서드</c>를 바인딩할 수 없습니다. 예외가 발생하면 <see langword="true" />이고, 예외가 발생하지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-445">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-446">바인딩 실패 시 지정한 동작을 기반으로 지정한 정적 메서드를 나타내는 지정한 형식의 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-446">Creates a delegate of the specified type to represent the specified static method, with the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-447">지정된 정적 메서드를 나타내기 위한 지정된 형식의 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-447">A delegate of the specified type to represent the specified static method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-448">이 메서드 오버 로드를 open 정적 메서드가 대리자를 만드는 인스턴스 메서드가 대리자를 열고-즉, 대리자의 숨겨진된 첫 번째 인수를 노출 하는 인스턴스 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-448">This method overload can create open static method delegates and open instance method delegates — that is, delegates that expose the hidden first argument of instance methods.</span></span> <span data-ttu-id="f8d6a-449">자세한 내용은 참조는 보다 일반적인 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> 정적 메서드 또는 메서드 오버 로드를 예를 들어 모든 조합을 열림 또는 닫힘 대리자를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-449">For a detailed explanation, see the more general <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload, which allows you to create all combinations of open or closed delegates for instance or static methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-450">이 메서드 오버 로드 때 사용할 대리자의 첫 번째 인수에 대해 닫혀 있지 않으면 이므로 좀 더 빠른 경우.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-450">This method overload should be used when the delegate is not closed over its first argument, because it is somewhat faster in that case.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-451">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를 호출자에 게 부여 된 경우 public이 아닌 메서드에 액세스 하려면이 메서드를 사용할 수 있습니다 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그 및 public이 아닌 메서드의 권한 부여 집합 호출자 에게만 부여 된 집합 또는 하위 집합 그 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-451">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="f8d6a-452">(참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-452">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="f8d6a-453">이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-453">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="f8d6a-454">호환 되는 매개 변수 형식 및 반환 형식</span><span class="sxs-lookup"><span data-stu-id="f8d6a-454">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="f8d6a-455">매개 변수 형식 및 대리자의 반환 형식은 매개 변수 형식 및 대리자가 나타내는; 메서드의 반환 형식을 사용 하 여 호환 되어야 합니다. 형식을 정확 하 게 일치 하지 않아도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-455">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-456">.NET framework 버전 1.0 및 1.1에서 형식을 정확 하 게 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-456">In the .NET Framework version 1.0 and 1.1, the types must match exactly.</span></span>  
  
 <span data-ttu-id="f8d6a-457">대리자 매개 변수의 형식이 메서드 매개 변수의 형식보다 제한적인 경우 대리자의 매개 변수는 메서드의 해당 매개 변수와 호환됩니다. 이 경우 대리자로 전달된 인수를 안전하게 메서드로 전달할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-457">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="f8d6a-458">마찬가지로 메서드의 반환 형식이 대리자의 반환 형식보다 제한적인 경우 대리자의 반환 형식은 메서드의 반환 형식과 호환됩니다. 이 경우 메서드의 반환 값을 안전하게 대리자의 반환 형식으로 캐스팅할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-458">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="f8d6a-459">예를 들어, 형식의 매개 변수를 사용 하 여 대리자 <xref:System.Collections.Hashtable> 의 반환 형식이 <xref:System.Object> 형식의 매개 변수를 사용 하 여 메서드를 나타낼 수 있습니다 <xref:System.Object> 형식의 반환 값 및 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-459">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d6a-460">이 섹션에는 두 코드 예제가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-460">This section contains two code examples.</span></span> <span data-ttu-id="f8d6a-461">첫 번째 예제에서는 두 종류의이 메서드 오버 로드를 사용 하 여 만들 수 있는 대리자를 보여 줍니다.: 인스턴스 메서드를 통해 열고 정적 메서드에 대해 엽니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-461">The first example demonstrates the two kinds of delegates that can be created with this method overload: open over an instance method and open over a static method.</span></span>  
  
 <span data-ttu-id="f8d6a-462">두 번째 코드 예제에서는 호환 매개 변수 형식을 보여 줍니다 및 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-462">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="f8d6a-463">**예제 1**</span><span class="sxs-lookup"><span data-stu-id="f8d6a-463">**Example 1**</span></span>  
  
 <span data-ttu-id="f8d6a-464">다음 코드 예제는 두 가지 방법으로이 오버 로드를 사용 하 여 대리자를 만들 수 있습니다는 <xref:System.Delegate.CreateDelegate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-464">The following code example demonstrates the two ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-465">두 가지 오버 로드의는 <xref:System.Delegate.CreateDelegate%2A> 지정 하는 메서드를 <xref:System.Reflection.MethodInfo> 첫 번째 인수가 아닌; 해당 기능을 바인딩하려는 경우 실패 시 throw 할 것인지를 지정할 수 있습니다 하나 인수가 있다는 점을 제외 하면 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-465">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify a <xref:System.Reflection.MethodInfo> but not a first argument; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="f8d6a-466">이 코드 예제에서는 두 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-466">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="f8d6a-467">클래스를 선언 하는 예제 `C` 정적 메서드를 사용 하 여 `M2` 및 인스턴스 메서드 `M1`, 두 대리자 형식이: `D1` 의 인스턴스를 사용 하 `C` 및 문자열 및 `D2` 문자열을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-467">The example declares a class `C` with a static method `M2` and an instance method `M1`, and two delegate types: `D1` takes an instance of `C` and a string, and `D2` takes a string.</span></span>  
  
 <span data-ttu-id="f8d6a-468">두 번째 클래스가 `Example` 는 대리자를 만드는 코드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-468">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="f8d6a-469">형식의 대리자 `D1`열려 있는 인스턴스 메서드를 나타내는, 인스턴스 메서드 만들어집니다 `M1`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-469">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="f8d6a-470">대리자가 호출 되 면 인스턴스를 전달 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-470">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="f8d6a-471">형식의 대리자 `D2`열려 있는 정적 메서드를 나타내는, 정적 메서드에 대 한 만들어집니다 `M2`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-471">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="f8d6a-472">**예제 2**</span><span class="sxs-lookup"><span data-stu-id="f8d6a-472">**Example 2**</span></span>  
  
 <span data-ttu-id="f8d6a-473">다음 코드 예제에서는 매개 변수 형식 호환성을 보여 줍니다 및 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-473">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-474">이 코드 예제에서는 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-474">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="f8d6a-475">다른 사용 오버 <xref:System.Reflection.MethodInfo> 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-475">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="f8d6a-476">코드 예제에서는 라는 기본 클래스를 정의 `Base` 라는 클래스 `Derived` 에서 파생 되는 `Base`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-476">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="f8d6a-477">파생된 클래스에는 `static` (`Shared` Visual basic에서) 라는 메서드 `MyMethod` 형식의 매개 변수 하나를 사용 하 여 `Base` 의 반환 형식이 `Derived`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-477">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="f8d6a-478">코드 예제에서는 또한 라는 대리자를 정의 `Example` 형식의 매개 변수 `Derived` 의 반환 형식이 `Base`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-478">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="f8d6a-479">코드 예제에서는 대리자를 지정 하는 방법을 보여 줍니다 `Example` 메서드를 나타내는 데 사용할 수 있습니다 `MyMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-479">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="f8d6a-480">때문에 메서드를 대리자에 바인딩할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-480">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="f8d6a-481">대리자의 매개 변수 형식 (`Derived`) 매개 변수 형식 보다 더 제한적인 `MyMethod` (`Base`)를 항상 안전 하 게 대리자의 인수를 전달 하는, `MyMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-481">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="f8d6a-482">반환 형식은 `MyMethod` (`Derived`) 대리자의 매개 변수 형식 보다 더 제한적인 (`Base`)는 항상 대리자의 반환 형식 메서드의 반환 형식을 캐스팅 하지 않아도 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-482">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="f8d6a-483">코드 예제에는 출력이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-483">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d6a-484">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-484">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-485">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-485">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-486">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-486">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-487">
            <paramref name="type" />은 <see cref="T:System.MulticastDelegate" />를 상속하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-487">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="f8d6a-488">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-488">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-489">
            <paramref name="type" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-489">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-490">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-490">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="f8d6a-491">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-491">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-492">
            <paramref name="method" />를 바인딩할 수 없으므로 <paramref name="throwOnBindFailure" />가 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-492">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="f8d6a-493">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-493">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-494">
            <paramref name="method" />가 <see langword="RuntimeMethodInfo" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-494">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="f8d6a-495">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-495">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="f8d6a-496">
            <paramref name="type" />의 <see langword="Invoke" /> 메서드를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-496">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="f8d6a-497">호출자에게 <paramref name="method" />에 액세스하는 데 필요한 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-497">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-498">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-498">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-499">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-499">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="f8d6a-500">만들 대리자의 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-500">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="f8d6a-501">
            <c>메서드</c>를 구현하는 클래스를 나타내는 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-501">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="f8d6a-502">대리자가 나타내는 정적 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-502">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-503">지정된 클래스의 지정된 정적 메서드를 나타내는 지정된 형식의 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-503">Creates a delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-504">지정된 클래스의 지정된 정적 메서드를 나타내는 지정된 형식의 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-504">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-505">이 메서드는 정적 메서드만 대 한 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-505">This method creates delegates for static methods only.</span></span> <span data-ttu-id="f8d6a-506">클래스의 인스턴스와 연결 된 메서드가 인스턴스 메서드 정적 메서드는 클래스 자체에 연결 되는 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-506">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="f8d6a-507">이 메서드 오버 로드는 호출에 해당 하는 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> 메서드 오버 로드를 지정 하 `false` 에 대 한 `ignoreCase` 하 고 `true` 에 대 한 `throwOnBindFailure`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-507">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `false` for `ignoreCase` and `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-508">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를 호출자에 게 부여 된 경우 public이 아닌 메서드에 액세스 하려면이 메서드를 사용할 수 있습니다 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그 및 public이 아닌 메서드의 권한 부여 집합 호출자 에게만 부여 된 집합 또는 하위 집합 그 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-508">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="f8d6a-509">(참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-509">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="f8d6a-510">이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-510">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d6a-511">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-511">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-512">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-512">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-513">
            <paramref name="target" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-513">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-514">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-514">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-515">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-515">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-516">
            <paramref name="type" />은 <see cref="T:System.MulticastDelegate" />를 상속하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-516">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="f8d6a-517">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-517">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-518">
            <paramref name="type" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-518">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-519">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-519">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="f8d6a-520">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-520">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-521">
            <paramref name="target" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-521">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-522">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-522">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-523">
            <paramref name="target" />이 개방형 제네릭 형식인 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-523">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="f8d6a-524">즉, 해당 <see cref="P:System.Type.ContainsGenericParameters" /> 속성이 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-524">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="f8d6a-525">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-525">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-526">
            <paramref name="method" />가 <see langword="static" /> 메서드(Visual Basic의 경우 <see langword="Shared" /> 메서드)가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-526">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="f8d6a-527">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-527">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-528">예를 들어 찾을 수 없고 <paramref name="throwOnBindFailure" />가 <see langword="true" />이기 때문에 <paramref name="method" />를 바인딩할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-528">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="f8d6a-529">
            <paramref name="type" />의 <see langword="Invoke" /> 메서드를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-529">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="f8d6a-530">호출자에게 <paramref name="method" />에 액세스하는 데 필요한 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-530">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-531">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-531">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-532">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-532">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object firstArgument, class System.Reflection.MethodInfo method, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ firstArgument, System::Reflection::MethodInfo ^ method, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * System.Reflection.MethodInfo * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, firstArgument, method, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="firstArgument" Type="System.Object" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="f8d6a-533">만들 디자이너 형식을 나타내는 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-533">A <see cref="T:System.Type" /> representing the type of delegate to create.</span>
          </span>
        </param>
        <param name="firstArgument">
          <span data-ttu-id="f8d6a-534">대리자가 나타내는 메서드의 첫 번째 인수인 <see cref="T:System.Object" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-534">An <see cref="T:System.Object" /> that is the first argument of the method the delegate represents.</span>
          </span>
          <span data-ttu-id="f8d6a-535">인스턴스 메서드의 경우 인스턴스 형식과 호환되어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-535">For instance methods, it must be compatible with the instance type.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="f8d6a-536">대리자가 나타내는 정적 또는 인스턴스 메서드를 설명하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-536">The <see cref="T:System.Reflection.MethodInfo" /> describing the static or instance method the delegate is to represent.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="f8d6a-537">
            <c>메서드</c>를 바인딩할 수 없습니다. 예외가 발생하면 <see langword="true" />이고, 예외가 발생하지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-537">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-538">지정한 첫 번째 인수와 바인딩 실패 시 지정한 동작을 기반으로 지정한 정적 또는 인스턴스 메서드를 나타내는 지정한 형식의 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-538">Creates a delegate of the specified type that represents the specified static or instance method, with the specified first argument and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-539">지정한 정적 또는 인스턴스 메서드를 나타내는 지정한 형식의 대리자이거나, <paramref name="throwOnBindFailure" />가 <see langword="false" />이고 대리자를 <paramref name="method" />에 바인딩할 수 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-539">A delegate of the specified type that represents the specified static or instance method, or <see langword="null" /> if <paramref name="throwOnBindFailure" /> is <see langword="false" /> and the delegate cannot be bound to <paramref name="method" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-540">이 메서드 오버 로드 및 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> 메서드 오버 로드를 항상 바인딩 실패 시 throw, 대리자를 만드는 가장 유연한 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-540">This method overload and the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.Reflection.MethodInfo%29> method overload, which always throws on failure to bind, provide the most flexible way to create delegates.</span></span> <span data-ttu-id="f8d6a-541">첫 번째 인수 없이 대리자 중 정적 또는 인스턴스 메서드를 만들려면 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-541">You can use them to create delegates for either static or instance methods, with or without a first argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-542">첫 번째 인수를 제공 하지 않는 경우 사용 된 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> 성능 향상을 위해 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-542">If you do not supply a first argument, use the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload for better performance.</span></span>  
  
 <span data-ttu-id="f8d6a-543">대리자 형식 및 메서드의 호환 반환 형식이 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-543">The delegate type and the method must have compatible return types.</span></span> <span data-ttu-id="f8d6a-544">반환 형식, 즉 `method` 의 반환 형식에 할당할 수 있어야 `type`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-544">That is, the return type of `method` must be assignable to the return type of `type`.</span></span>  
  
 <span data-ttu-id="f8d6a-545">하는 경우 `firstArgument` 가 제공에 전달한 `method` 될 때마다 대리자가 호출 됩니다. `firstArgument` 대리자에 바인딩될 것 이라고 대리자는 첫 번째 인수에 대해 닫혀 있는 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-545">If `firstArgument` is supplied, it is passed to `method` every time the delegate is invoked; `firstArgument` is said to be bound to the delegate, and the delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="f8d6a-546">경우 `method` 은 `static` (`Shared` Visual basic에서)의 경우 대리자를 호출할 때 제공 하는 목록; 첫 번째를 제외한 모든 매개 변수를 포함 하는 인수 `method` 인스턴스 메서드 이면 `firstArgument` 숨겨진 인스턴스에 전달 됩니다 매개 변수 (나타낸 `this` C# 또는 `Me` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="f8d6a-546">If `method` is `static` (`Shared` in Visual Basic), the argument list supplied when invoking the delegate includes all parameters except the first; if `method` is an instance method, then `firstArgument` is passed to the hidden instance parameter (represented by `this` in C#, or by `Me` in Visual Basic).</span></span>  
  
 <span data-ttu-id="f8d6a-547">경우 `firstArgument` 제공 됩니다의 첫 번째 매개 변수 `method` 는 참조 형식 이어야 하 고 `firstArgument` 해당 형식과 호환 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-547">If `firstArgument` is supplied, the first parameter of `method` must be a reference type, and `firstArgument` must be compatible with that type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f8d6a-548">경우 `method` 됩니다 `static` (`Shared` Visual Basic에서) 해당 첫 번째 매개 변수는 형식 및 <xref:System.Object> 또는 <xref:System.ValueType>, 다음 `firstArgument` 값 형식일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-548">If `method` is `static` (`Shared` in Visual Basic) and its first parameter is of type <xref:System.Object> or <xref:System.ValueType>, then `firstArgument` can be a value type.</span></span> <span data-ttu-id="f8d6a-549">이 경우 `firstArgument` 자동으로 boxed 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-549">In this case `firstArgument` is automatically boxed.</span></span> <span data-ttu-id="f8d6a-550">C# 또는 Visual Basic 함수에서 호출 하는 것 처럼 다른 인수에 대 한 자동 boxing 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-550">Automatic boxing does not occur for any other arguments, as it would in a C# or Visual Basic function call.</span></span>  
  
 <span data-ttu-id="f8d6a-551">하는 경우 `firstArgument` 가 null 참조 하 고 `method` 인스턴스 메서드는 결과 서명이 대리자 형식에 따라 달라 집니다 `type` 및 `method`:</span><span class="sxs-lookup"><span data-stu-id="f8d6a-551">If `firstArgument` is a null reference and `method` is an instance method, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="f8d6a-552">경우 서명의 `type` 의 첫 번째 숨겨진된 매개 변수를 명시적으로 포함 `method`, 열려 있는 인스턴스 메서드를 나타내는 대리자 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-552">If the signature of `type` explicitly includes the hidden first parameter of `method`, the delegate is said to represent an open instance method.</span></span> <span data-ttu-id="f8d6a-553">대리자가 호출 인수 목록의 첫 번째 인수의 숨겨진된 인스턴스에 매개 변수에 전달 됩니다 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-553">When the delegate is invoked, the first argument in the argument list is passed to the hidden instance parameter of `method`.</span></span>  
  
-   <span data-ttu-id="f8d6a-554">경우 서명을 `method` 및 `type` 일치 (즉, 모든 매개 변수 형식이 호환 되는) 경우 대리자는 null 참조 닫혀 있는 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-554">If the signatures of `method` and `type` match (that is, all parameter types are compatible), then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="f8d6a-555">대리자를 호출 하는 것은 그다지 유용한 작업이 수행 되지 않는 null 인스턴스에서 인스턴스 메서드를 호출 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-555">Invoking the delegate is like calling an instance method on a null instance, which is not a particularly useful thing to do.</span></span>  
  
 <span data-ttu-id="f8d6a-556">하는 경우 `firstArgument` 가 null 참조 하 고 `method` 는 정적 결과에 따라 달라 집니다 서명이 대리자 형식의 `type` 및 `method`:</span><span class="sxs-lookup"><span data-stu-id="f8d6a-556">If `firstArgument` is a null reference and `method` is static, the result depends on the signatures of the delegate type `type` and of `method`:</span></span>  
  
-   <span data-ttu-id="f8d6a-557">경우 서명의 `method` 및 `type` 일치 (즉, 모든 매개 변수 형식이 호환 되는) 경우 열려 있는 정적 메서드를 나타내는 대리자 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-557">If the signature of `method` and `type` match (that is, all parameter types are compatible), the delegate is said to represent an open static method.</span></span> <span data-ttu-id="f8d6a-558">이것이 정적 메서드에 대 한 가장 일반적인 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-558">This is the most common case for static methods.</span></span> <span data-ttu-id="f8d6a-559">사용 하 여 약간 더 나은 성능을 얻을 수는 경우에 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-559">In this case, you can get slightly better performance by using the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%2CSystem.Boolean%29> method overload.</span></span>  
  
-   <span data-ttu-id="f8d6a-560">경우 서명의 `type` 의 두 번째 매개 변수를 사용 하 여 시작 `method` 나머지 매개 변수 형식과 호환 되 고 대리자는 null 참조에 대해 닫혀 있는 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-560">If the signature of `type` begins with the second parameter of `method` and the rest of the parameter types are compatible, then the delegate is said to be closed over a null reference.</span></span> <span data-ttu-id="f8d6a-561">첫 번째 매개 변수는 null 참조가 전달 되는 대리자를 호출 하는 경우 `method`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-561">When the delegate is invoked, a null reference is passed to the first parameter of `method`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-562">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를 호출자에 게 부여 된 경우 public이 아닌 메서드에 액세스 하려면이 메서드를 사용할 수 있습니다 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그 및 public이 아닌 메서드의 권한 부여 집합 호출자 에게만 부여 된 집합 또는 하위 집합 그 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-562">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="f8d6a-563">(참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-563">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="f8d6a-564">이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-564">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
## <a name="compatible-parameter-types-and-return-type"></a><span data-ttu-id="f8d6a-565">호환 되는 매개 변수 형식 및 반환 형식</span><span class="sxs-lookup"><span data-stu-id="f8d6a-565">Compatible Parameter Types and Return Type</span></span>  
 <span data-ttu-id="f8d6a-566">매개 변수 형식 및 대리자의 반환 형식은 매개 변수 형식 및 대리자가 나타내는; 메서드의 반환 형식을 사용 하 여 호환 되어야 합니다. 형식을 정확 하 게 일치 하지 않아도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-566">The parameter types and return type of a delegate must be compatible with the parameter types and return type of the method the delegate represents; the types do not have to match exactly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-567">.NET Framework 버전 1.0 및 1.1의에서 형식이 정확 하 게 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-567">In the .NET Framework version 1.0 and 1.1 the types must match exactly.</span></span>  
  
 <span data-ttu-id="f8d6a-568">대리자 매개 변수의 형식이 메서드 매개 변수의 형식보다 제한적인 경우 대리자의 매개 변수는 메서드의 해당 매개 변수와 호환됩니다. 이 경우 대리자로 전달된 인수를 안전하게 메서드로 전달할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-568">A parameter of a delegate is compatible with the corresponding parameter of a method if the type of the delegate parameter is more restrictive than the type of the method parameter, because this guarantees that an argument passed to the delegate can be passed safely to the method.</span></span>  
  
 <span data-ttu-id="f8d6a-569">마찬가지로 메서드의 반환 형식이 대리자의 반환 형식보다 제한적인 경우 대리자의 반환 형식은 메서드의 반환 형식과 호환됩니다. 이 경우 메서드의 반환 값을 안전하게 대리자의 반환 형식으로 캐스팅할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-569">Similarly, the return type of a delegate is compatible with the return type of a method if the return type of the method is more restrictive than the return type of the delegate, because this guarantees that the return value of the method can be cast safely to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="f8d6a-570">예를 들어, 형식의 매개 변수를 사용 하 여 대리자 <xref:System.Collections.Hashtable> 의 반환 형식이 <xref:System.Object> 형식의 매개 변수를 사용 하 여 메서드를 나타낼 수 있습니다 <xref:System.Object> 형식의 반환 값 및 <xref:System.Collections.Hashtable>합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-570">For example, a delegate with a parameter of type <xref:System.Collections.Hashtable> and a return type of <xref:System.Object> can represent a method with a parameter of type <xref:System.Object> and a return value of type <xref:System.Collections.Hashtable>.</span></span>  
  
## <a name="determining-the-methods-a-delegate-can-represent"></a><span data-ttu-id="f8d6a-571">메서드를 결정 하는 대리자 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-571">Determining the Methods a Delegate Can Represent</span></span>  
 <span data-ttu-id="f8d6a-572">또 다른 유용한 방법은이 오버 로드에서 제공 하는 유연성을 생각할 <xref:System.Delegate.CreateDelegate%2A> 모든 지정 된 대리자 메서드 시그니처 및 메서드 종류 (정적 및 인스턴스)의 4 가지 다른 조합을 나타낼 수 있다는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-572">Another useful way to think of the flexibility provided by this overload of <xref:System.Delegate.CreateDelegate%2A> is that any given delegate can represent four different combinations of method signature and method kind (static versus instance).</span></span> <span data-ttu-id="f8d6a-573">대리자 형식이 있다고 가정 `D` 인수 형식 중 하나를 사용 하 여 `C`입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-573">Consider a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="f8d6a-574">다음 방법을 설명 합니다. `D` 항상에서 일치 해야 하므로 반환 형식은 무시 하 고 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-574">The following describes the methods `D` can represent, ignoring the return type since it must match in all cases:</span></span>  
  
-   <span data-ttu-id="f8d6a-575">`D` 형식의 인수를 하나만 있는 모든 인스턴스 메서드를 나타낼 수 있습니다 `C`인스턴스 메서드가 속하는 형식을에 관계 없이 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-575">`D` can represent any instance method that has exactly one argument of type `C`, regardless of what type the instance method belongs to.</span></span> <span data-ttu-id="f8d6a-576">때 <xref:System.Delegate.CreateDelegate%2A> 가 호출 `firstArgument` 형식의 인스턴스인 `method` 속한 결과로 얻은 대리자는 해당 인스턴스가 닫혀 있는 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-576">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of the type `method` belongs to, and the resulting delegate is said to be closed over that instance.</span></span> <span data-ttu-id="f8d6a-577">(일반적으로, `D` 하는 경우 null 참조에 대해 닫을 수도 있습니다 `firstArgument` 는 `null`.)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-577">(Trivially, `D` can also be closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
-   <span data-ttu-id="f8d6a-578">`D` 인스턴스 메서드를 나타낼 수 있습니다 `C` 는 인수가 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-578">`D` can represent an instance method of `C` that has no arguments.</span></span> <span data-ttu-id="f8d6a-579">때 <xref:System.Delegate.CreateDelegate%2A> 가 호출 `firstArgument` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-579">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="f8d6a-580">결과로 얻은 대리자 열려 있는 인스턴스 메서드를 나타내고 인스턴스의 `C` 는 호출할 때마다 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-580">The resulting delegate represents an open instance method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="f8d6a-581">`D` 형식의 인수 하나를 사용 하는 정적 메서드를 나타낼 수 있습니다 `C`, 및 메서드는 모든 형식에 속할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-581">`D` can represent a static method that takes one argument of type `C`, and that method can belong to any type.</span></span> <span data-ttu-id="f8d6a-582">때 <xref:System.Delegate.CreateDelegate%2A> 가 호출 `firstArgument` 가 null 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-582">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is a null reference.</span></span> <span data-ttu-id="f8d6a-583">열려 있는 정적 메서드 및 인스턴스의 결과 대리자가 나타내는 `C` 는 호출할 때마다 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-583">The resulting delegate represents an open static method, and an instance of `C` must be supplied each time it is invoked.</span></span>  
  
-   <span data-ttu-id="f8d6a-584">`D` 입력 속한 정적 메서드를 나타낼 수 있습니다 `F` 형식의 두 인수를 포함 하 고 `F` 유형과 `C`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-584">`D` can represent a static method that belongs to type `F` and has two arguments, of type `F` and type `C`.</span></span> <span data-ttu-id="f8d6a-585">때 <xref:System.Delegate.CreateDelegate%2A> 가 호출 `firstArgument` 의 인스턴스가 `F`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-585">When <xref:System.Delegate.CreateDelegate%2A> is called, `firstArgument` is an instance of `F`.</span></span> <span data-ttu-id="f8d6a-586">결과로 얻은 대리자의 해당 인스턴스에 대해 닫혀 있는 정적 메서드를 나타냅니다. `F`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-586">The resulting delegate represents a static method that is closed over that instance of `F`.</span></span> <span data-ttu-id="f8d6a-587">대/소문자에서 위치 `F` 및 `C` 동일한 형식은 정적 메서드는 두 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-587">Note that in the case where `F` and `C` are the same type, the static method has two arguments of that type.</span></span> <span data-ttu-id="f8d6a-588">(이 예에서 `D` 하는 경우 null 참조에 대해 닫혀 `firstArgument` 는 `null`.)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-588">(In this case, `D` is closed over a null reference if `firstArgument` is `null`.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d6a-589">이 섹션에는 세 가지 코드 예제가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-589">This section contains three code examples.</span></span> <span data-ttu-id="f8d6a-590">첫 번째 예제에서는 만들 수 있는 대리자의 네 가지 종류: 정적 메서드에 대해 닫은 인스턴스 메서드를 정적 메서드를 통해 열기 인스턴스 메서드를 통해 열기에 대해 닫혀 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-590">The first example demonstrates the four kinds of delegates that can be created: closed over an instance method, open over an instance method, open over a static method, and closed over a static method.</span></span>  
  
 <span data-ttu-id="f8d6a-591">두 번째 코드 예제에서는 호환 매개 변수 형식을 보여 줍니다 및 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-591">The second code example demonstrates compatible parameter types and return types.</span></span>  
  
 <span data-ttu-id="f8d6a-592">세 번째 코드 예제에서는 단일 대리자 형식을 정의 하 고 모든 메서드를 대리자 형식을 나타낼 수를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-592">The third code example defines a single delegate type, and shows all the methods that delegate type can represent.</span></span>  
  
 <span data-ttu-id="f8d6a-593">**예제 1**</span><span class="sxs-lookup"><span data-stu-id="f8d6a-593">**Example 1**</span></span>  
  
 <span data-ttu-id="f8d6a-594">다음 코드 예제에서는이 오버 로드를 사용 하 여 대리자를 만들 수 있습니다 네 가지 방법을 보여 줍니다는 <xref:System.Delegate.CreateDelegate%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-594">The following code example demonstrates the four ways a delegate can be created using this overload of the <xref:System.Delegate.CreateDelegate%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-595">두 개의 오버 로드가 있습니다 합니다 <xref:System.Delegate.CreateDelegate%2A> 메서드를 지정 하는 `firstArgument` 및 <xref:System.Reflection.MethodInfo>; 해당 기능을 바인딩하려는 경우 실패 시 throw 할 것인지를 지정할 수 있습니다 하나 인수가 있다는 점을 제외 하면 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-595">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="f8d6a-596">이 코드 예제에서는 두 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-596">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="f8d6a-597">이 예제에서는 클래스를 선언 `C` 정적 메서드를 사용 하 여 `M2` 및 인스턴스 메서드 `M1`, 대리자 형식이 세: `D1` 의 인스턴스를 사용 하 `C` 및 문자열 `D2` 문자열, 그리고 `D3`인수가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-597">The example declares a class `C` with a static method `M2` and an instance method `M1`, and three delegate types: `D1` takes an instance of `C` and a string, `D2` takes a string, and `D3` has no arguments.</span></span>  
  
 <span data-ttu-id="f8d6a-598">두 번째 클래스가 `Example` 는 대리자를 만드는 코드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-598">A second class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="f8d6a-599">형식의 대리자 `D2`인스턴스에 대해 닫혀 `C`, 인스턴스 메서드가 만들어집니다 `M1`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-599">A delegate of type `D2`, closed over an instance of `C`, is created for the instance method `M1`.</span></span> <span data-ttu-id="f8d6a-600">바인딩된 인스턴스를 표시 하는 다른 문자열을 사용 하 여 호출 `C` 항상 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-600">It is invoked with different strings, to show that the bound instance of `C` is always used.</span></span>  
  
-   <span data-ttu-id="f8d6a-601">형식의 대리자 `D1`열려 있는 인스턴스 메서드를 나타내는, 인스턴스 메서드 만들어집니다 `M1`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-601">A delegate of type `D1`, representing an open instance method, is created for the instance method `M1`.</span></span> <span data-ttu-id="f8d6a-602">대리자가 호출 되 면 인스턴스를 전달 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-602">An instance must be passed when the delegate is invoked.</span></span>  
  
-   <span data-ttu-id="f8d6a-603">형식의 대리자 `D2`열려 있는 정적 메서드를 나타내는, 정적 메서드에 대 한 만들어집니다 `M2`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-603">A delegate of type `D2`, representing an open static method, is created for the static method `M2`.</span></span>  
  
-   <span data-ttu-id="f8d6a-604">마지막으로, 형식의 대리자 `D3`문자열에 대해 닫혀, 정적 메서드에 대해 생성 됩니다 `M2`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-604">Finally, a delegate of type `D3`, closed over a string, is created for the static method `M2`.</span></span> <span data-ttu-id="f8d6a-605">메서드는 바인딩된 문자열을 사용 하기를 나타내기 위해 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-605">The method is invoked to show that it uses the bound string.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM/cs/openClosedOver.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM/VB/openClosedOver.vb#1)]  
  
 <span data-ttu-id="f8d6a-606">**예제 2**</span><span class="sxs-lookup"><span data-stu-id="f8d6a-606">**Example 2**</span></span>  
  
 <span data-ttu-id="f8d6a-607">다음 코드 예제에서는 매개 변수 형식 호환성을 보여 줍니다 및 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-607">The following code example demonstrates compatibility of parameter types and return types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-608">이 코드 예제에서는 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-608">This code example uses the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Reflection.MethodInfo%29> method overload.</span></span> <span data-ttu-id="f8d6a-609">다른 사용 오버 <xref:System.Reflection.MethodInfo> 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-609">The use of other overloads that take <xref:System.Reflection.MethodInfo> is similar.</span></span>  
  
 <span data-ttu-id="f8d6a-610">코드 예제에서는 라는 기본 클래스를 정의 `Base` 라는 클래스 `Derived` 에서 파생 되는 `Base`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-610">The code example defines a base class named `Base` and a class named `Derived` that derives from `Base`.</span></span> <span data-ttu-id="f8d6a-611">파생된 클래스에는 `static` (`Shared` Visual basic에서) 라는 메서드 `MyMethod` 형식의 매개 변수 하나를 사용 하 여 `Base` 의 반환 형식이 `Derived`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-611">The derived class has a `static` (`Shared` in Visual Basic) method named `MyMethod` with one parameter of type `Base` and a return type of `Derived`.</span></span> <span data-ttu-id="f8d6a-612">코드 예제에서는 또한 라는 대리자를 정의 `Example` 형식의 매개 변수 `Derived` 의 반환 형식이 `Base`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-612">The code example also defines a delegate named `Example` that has one parameter of type `Derived` and a return type of `Base`.</span></span>  
  
 <span data-ttu-id="f8d6a-613">코드 예제에서는 대리자를 지정 하는 방법을 보여 줍니다 `Example` 메서드를 나타내는 데 사용할 수 있습니다 `MyMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-613">The code example demonstrates that the delegate named `Example` can be used to represent the method `MyMethod`.</span></span> <span data-ttu-id="f8d6a-614">때문에 메서드를 대리자에 바인딩할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-614">The method can be bound to the delegate because:</span></span>  
  
-   <span data-ttu-id="f8d6a-615">대리자의 매개 변수 형식 (`Derived`) 매개 변수 형식 보다 더 제한적인 `MyMethod` (`Base`)를 항상 안전 하 게 대리자의 인수를 전달 하는, `MyMethod`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-615">The parameter type of the delegate (`Derived`) is more restrictive than the parameter type of `MyMethod` (`Base`), so that it is always safe to pass the argument of the delegate to `MyMethod`.</span></span>  
  
-   <span data-ttu-id="f8d6a-616">반환 형식은 `MyMethod` (`Derived`) 대리자의 매개 변수 형식 보다 더 제한적인 (`Base`)는 항상 대리자의 반환 형식 메서드의 반환 형식을 캐스팅 하지 않아도 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-616">The return type of `MyMethod` (`Derived`) is more restrictive than the parameter type of the delegate (`Base`), so that it is always safe to cast the return type of the method to the return type of the delegate.</span></span>  
  
 <span data-ttu-id="f8d6a-617">코드 예제에는 출력이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-617">The code example produces no output.</span></span>  
  
 [!code-cpp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cpp/source.cpp#1)]
 [!code-csharp[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegate_RelaxedFit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegate_RelaxedFit/vb/source.vb#1)]  
  
 <span data-ttu-id="f8d6a-618">**예제 3**</span><span class="sxs-lookup"><span data-stu-id="f8d6a-618">**Example 3**</span></span>  
  
 <span data-ttu-id="f8d6a-619">다음 코드 예제에서는 단일 대리자 형식이 나타낼 수는 모든 메서드를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-619">The following code example shows all the methods a single delegate type can represent.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-620">두 개의 오버 로드가 있습니다 합니다 <xref:System.Delegate.CreateDelegate%2A> 메서드를 지정 하는 `firstArgument` 및 <xref:System.Reflection.MethodInfo>; 해당 기능을 바인딩하려는 경우 실패 시 throw 할 것인지를 지정할 수 있습니다 하나 인수가 있다는 점을 제외 하면 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-620">There are two overloads of the <xref:System.Delegate.CreateDelegate%2A> method that specify `firstArgument` and a <xref:System.Reflection.MethodInfo>; their functionality is the same except that one allows you to specify whether to throw on failure to bind, and the other always throws.</span></span> <span data-ttu-id="f8d6a-621">이 코드 예제에서는 두 오버 로드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-621">This code example uses both overloads.</span></span>  
  
 <span data-ttu-id="f8d6a-622">코드 예제에서는 두 개의 클래스를 정의 `C` 하 고 `F`, 및 대리자 형식이 `D` 인수 형식 중 하나를 사용 하 여 `C`입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-622">The code example defines two classes, `C` and `F`, and a delegate type `D` with one argument of type `C`.</span></span> <span data-ttu-id="f8d6a-623">클래스는 동일한 정적 메서드와 인스턴스 메서드 `M1`, `M3`, 및 `M4`, 및 클래스 `C` 인스턴스 메서드도 있습니다 `M2` 는 인수가 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-623">The classes have matching static and instance methods `M1`, `M3`, and `M4`, and class `C` also has an instance method `M2` that has no arguments.</span></span>  
  
 <span data-ttu-id="f8d6a-624">라는 세 번째 클래스 `Example` 는 대리자를 만드는 코드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-624">A third class named `Example` contains the code that creates the delegates.</span></span>  
  
-   <span data-ttu-id="f8d6a-625">대리자가 인스턴스 메서드 `M1` 형식의 `C` 유형과 `F`; 각 해당 형식의 인스턴스에 대해 닫혀 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-625">Delegates are created for instance method `M1` of type `C` and type `F`; each is closed over an instance of the respective type.</span></span> <span data-ttu-id="f8d6a-626">메서드 `M1` 형식의 `C` 표시는 `ID` 인수 및 바인딩된 인스턴스의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-626">Method `M1` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
-   <span data-ttu-id="f8d6a-627">메서드에 대 한 대리자가 만들어진 `M2` 형식의 `C`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-627">A delegate is created for method `M2` of type `C`.</span></span> <span data-ttu-id="f8d6a-628">인스턴스 열기 대리자를 대리자의 인수는 인스턴스 메서드에 숨겨진된 첫 번째 인수를 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-628">This is an open instance delegate, in which the argument of the delegate represents the hidden first argument on the instance method.</span></span> <span data-ttu-id="f8d6a-629">메서드는 다른 인수가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-629">The method has no other arguments.</span></span>  
  
-   <span data-ttu-id="f8d6a-630">대리자가 정적 메서드에 대 한 `M3` 형식의 `C` 유형과 `F`; 이러한 대리자는 정적 대리자입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-630">Delegates are created for static method `M3` of type `C` and type `F`; these are open static delegates.</span></span>  
  
-   <span data-ttu-id="f8d6a-631">마지막으로, 대리자가 정적 메서드 `M4` 형식의 `C` 유형과 `F`각 메서드에 첫 번째 인수로 선언 형식이 고 형식의 인스턴스 제공 되므로 대리자를 해당 인수에 대해 닫혀 .</span><span class="sxs-lookup"><span data-stu-id="f8d6a-631">Finally, delegates are created for static method `M4` of type `C` and type `F`; each method has the declaring type as its first argument, and an instance of the type is supplied, so the delegates are closed over their first arguments.</span></span> <span data-ttu-id="f8d6a-632">메서드 `M4` 형식의 `C` 표시는 `ID` 인수 및 바인딩된 인스턴스의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-632">Method `M4` of type `C` displays the `ID` properties of the bound instance and of the argument.</span></span>  
  
 [!code-csharp[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/cs/source.cs#1)]
 [!code-vb[Delegate.CreateDelegateTOM_2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Delegate.CreateDelegateTOM_2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d6a-633">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-633">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-634">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-634">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-635">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-635">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-636">
            <paramref name="type" />은 <see cref="T:System.MulticastDelegate" />를 상속하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-636">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="f8d6a-637">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-637">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-638">
            <paramref name="type" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-638">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-639">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-639">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="f8d6a-640">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-640">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-641">
            <paramref name="method" />를 바인딩할 수 없으므로 <paramref name="throwOnBindFailure" />가 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-641">
              <paramref name="method" /> cannot be bound, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="f8d6a-642">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-642">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-643">
            <paramref name="method" />가 <see langword="RuntimeMethodInfo" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-643">
              <paramref name="method" /> is not a <see langword="RuntimeMethodInfo" />.</span>
          </span>
          <span data-ttu-id="f8d6a-644">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-644">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="f8d6a-645">
            <paramref name="type" />의 <see langword="Invoke" /> 메서드를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-645">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="f8d6a-646">호출자에게 <paramref name="method" />에 액세스하는 데 필요한 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-646">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-647">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-647">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-648">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-648">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="f8d6a-649">만들 대리자의 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-649">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="f8d6a-650">
            <c>메서드</c>가 호출되는 클래스 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-650">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="f8d6a-651">대리자가 나타내는 인스턴스 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-651">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="f8d6a-652">메서드의 이름을 비교할 때 대/소문자 구분을 무시할지를 나타내는 부울입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-652">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-653">지정된 대/소문자 구분 여부를 기반으로 지정된 클래스 인스턴스에서 호출하는 지정된 인스턴스 메서드를 나타내는 지정된 형식의 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-653">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-654">지정된 클래스 인스턴스에서 호출하는 지정된 인스턴스 메서드를 나타내는 지정된 형식의 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-654">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-655">이 메서드가 대리자 예를 들어만 메서드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-655">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="f8d6a-656">클래스의 인스턴스와 연결 된 메서드가 인스턴스 메서드 정적 메서드는 클래스 자체에 연결 되는 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-656">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="f8d6a-657">이 메서드 오버 로드는 호출에 해당 하는 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> 메서드 오버 로드를 지정 하 `true` 에 대 한 `throwOnBindFailure`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-657">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-658">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를 호출자에 게 부여 된 경우 public이 아닌 메서드에 액세스 하려면이 메서드를 사용할 수 있습니다 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그 및 public이 아닌 메서드의 권한 부여 집합 호출자 에게만 부여 된 집합 또는 하위 집합 그 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-658">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="f8d6a-659">(참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-659">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="f8d6a-660">이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-660">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d6a-661">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-661">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-662">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-662">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-663">
            <paramref name="target" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-663">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-664">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-664">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-665">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-665">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-666">
            <paramref name="type" />은 <see cref="T:System.MulticastDelegate" />를 상속하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-666">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="f8d6a-667">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-667">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-668">
            <paramref name="type" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-668">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-669">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-669">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="f8d6a-670">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-670">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-671">
            <paramref name="method" />는 인스턴스 메서드가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-671">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="f8d6a-672">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-672">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-673">예를 들어 <paramref name="method" />는 찾을 수 없기 때문에 바인딩할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-673">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="f8d6a-674">
            <paramref name="type" />의 <see langword="Invoke" /> 메서드를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-674">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="f8d6a-675">호출자에게 <paramref name="method" />에 액세스하는 데 필요한 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-675">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-676">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-676">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-677">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-677">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="f8d6a-678">만들 대리자의 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-678">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="f8d6a-679">
            <c>메서드</c>를 구현하는 클래스를 나타내는 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-679">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="f8d6a-680">대리자가 나타내는 정적 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-680">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="f8d6a-681">메서드의 이름을 비교할 때 대/소문자 구분을 무시할지를 나타내는 부울입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-681">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-682">지정한 대/소문자 구분 여부를 기반으로 지정한 클래스의 지정한 정적 메서드를 나타내는 지정한 형식의 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-682">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-683">지정된 클래스의 지정된 정적 메서드를 나타내는 지정된 형식의 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-683">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-684">이 메서드는 정적 메서드만 대 한 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-684">This method creates delegates for static methods only.</span></span> <span data-ttu-id="f8d6a-685">클래스의 인스턴스와 연결 된 메서드가 인스턴스 메서드 정적 메서드는 클래스 자체에 연결 되는 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-685">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="f8d6a-686">이 메서드 오버 로드는 호출에 해당 하는 <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> 메서드 오버 로드를 지정 하 `true` 에 대 한 `throwOnBindFailure`합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-686">This method overload is equivalent to calling the <xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload, specifying `true` for `throwOnBindFailure`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-687">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를 호출자에 게 부여 된 경우 public이 아닌 메서드에 액세스 하려면이 메서드를 사용할 수 있습니다 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그 및 public이 아닌 메서드의 권한 부여 집합 호출자 에게만 부여 된 집합 또는 하위 집합 그 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-687">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="f8d6a-688">(참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-688">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="f8d6a-689">이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-689">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d6a-690">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-690">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-691">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-691">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-692">
            <paramref name="target" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-692">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-693">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-693">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-694">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-694">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-695">
            <paramref name="type" />은 <see cref="T:System.MulticastDelegate" />를 상속하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-695">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="f8d6a-696">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-696">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-697">
            <paramref name="type" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-697">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-698">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-698">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="f8d6a-699">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-699">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-700">
            <paramref name="target" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-700">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-701">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-701">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-702">
            <paramref name="target" />이 개방형 제네릭 형식인 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-702">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="f8d6a-703">즉, 해당 <see cref="P:System.Type.ContainsGenericParameters" /> 속성이 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-703">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="f8d6a-704">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-704">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-705">
            <paramref name="method" />가 <see langword="static" /> 메서드(Visual Basic의 경우 <see langword="Shared" /> 메서드)가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-705">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="f8d6a-706">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-706">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-707">예를 들어 <paramref name="method" />는 찾을 수 없기 때문에 바인딩할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-707">
              <paramref name="method" /> cannot be bound, for example because it cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="f8d6a-708">
            <paramref name="type" />의 <see langword="Invoke" /> 메서드를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-708">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="f8d6a-709">호출자에게 <paramref name="method" />에 액세스하는 데 필요한 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-709">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-710">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-710">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-711">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-711">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, System::Object ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * obj * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="f8d6a-712">만들 대리자의 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-712">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="f8d6a-713">
            <c>메서드</c>가 호출되는 클래스 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-713">The class instance on which <c>method</c> is invoked.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="f8d6a-714">대리자가 나타내는 인스턴스 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-714">The name of the instance method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="f8d6a-715">메서드의 이름을 비교할 때 대/소문자 구분을 무시할지를 나타내는 부울입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-715">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="f8d6a-716">
            <c>메서드</c>를 바인딩할 수 없습니다. 예외가 발생하면 <see langword="true" />이고, 예외가 발생하지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-716">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-717">지정한 대/소문자 구분과 바인딩 실패 시 지정한 동작을 기반으로 지정한 클래스 인스턴스에서 호출하는 지정한 인스턴스 메서드를 나타내는 지정한 형식의 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-717">Creates a delegate of the specified type that represents the specified instance method to invoke on the specified class instance, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-718">지정된 클래스 인스턴스에서 호출하는 지정된 인스턴스 메서드를 나타내는 지정된 형식의 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-718">A delegate of the specified type that represents the specified instance method to invoke on the specified class instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-719">이 메서드가 대리자 예를 들어만 메서드를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-719">This method creates delegates for instance methods only.</span></span> <span data-ttu-id="f8d6a-720">클래스의 인스턴스와 연결 된 메서드가 인스턴스 메서드 정적 메서드는 클래스 자체에 연결 되는 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-720">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-721">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를 호출자에 게 부여 된 경우 public이 아닌 메서드에 액세스 하려면이 메서드를 사용할 수 있습니다 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그 및 public이 아닌 메서드의 권한 부여 집합 호출자 에게만 부여 된 집합 또는 하위 집합 그 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-721">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="f8d6a-722">(참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-722">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="f8d6a-723">이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-723">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d6a-724">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-724">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-725">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-725">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-726">
            <paramref name="target" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-726">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-727">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-727">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-728">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-728">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-729">
            <paramref name="type" />은 <see cref="T:System.MulticastDelegate" />를 상속하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-729">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="f8d6a-730">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-730">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-731">
            <paramref name="type" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-731">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-732">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-732">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="f8d6a-733">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-733">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-734">
            <paramref name="method" />는 인스턴스 메서드가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-734">
              <paramref name="method" /> is not an instance method.</span>
          </span>
          <span data-ttu-id="f8d6a-735">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-735">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-736">예를 들어 찾을 수 없고 <paramref name="throwOnBindFailure" />가 <see langword="true" />이기 때문에 <paramref name="method" />를 바인딩할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-736">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="f8d6a-737">
            <paramref name="type" />의 <see langword="Invoke" /> 메서드를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-737">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="f8d6a-738">호출자에게 <paramref name="method" />에 액세스하는 데 필요한 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-738">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-739">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-739">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-740">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-740">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate CreateDelegate(class System.Type type, class System.Type target, string method, bool ignoreCase, bool throwOnBindFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ CreateDelegate(Type ^ type, Type ^ target, System::String ^ method, bool ignoreCase, bool throwOnBindFailure);" />
      <MemberSignature Language="F#" Value="static member CreateDelegate : Type * Type * string * bool * bool -&gt; Delegate" Usage="System.Delegate.CreateDelegate (type, target, method, ignoreCase, throwOnBindFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="target" Type="System.Type" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="throwOnBindFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="f8d6a-741">만들 대리자의 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-741">The <see cref="T:System.Type" /> of delegate to create.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="f8d6a-742">
            <c>메서드</c>를 구현하는 클래스를 나타내는 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-742">The <see cref="T:System.Type" /> representing the class that implements <c>method</c>.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="f8d6a-743">대리자가 나타내는 정적 메서드의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-743">The name of the static method that the delegate is to represent.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="f8d6a-744">메서드의 이름을 비교할 때 대/소문자 구분을 무시할지를 나타내는 부울입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-744">A Boolean indicating whether to ignore the case when comparing the name of the method.</span>
          </span>
        </param>
        <param name="throwOnBindFailure">
          <span data-ttu-id="f8d6a-745">
            <c>메서드</c>를 바인딩할 수 없습니다. 예외가 발생하면 <see langword="true" />이고, 예외가 발생하지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-745">
              <see langword="true" /> to throw an exception if <c>method</c> cannot be bound; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-746">지정한 대/소문자 구분과 바인딩 실패 시 지정한 동작을 기반으로 지정한 클래스의 지정한 정적 메서드를 나타내는 지정한 형식의 대리자를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-746">Creates a delegate of the specified type that represents the specified static method of the specified class, with the specified case-sensitivity and the specified behavior on failure to bind.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-747">지정된 클래스의 지정된 정적 메서드를 나타내는 지정된 형식의 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-747">A delegate of the specified type that represents the specified static method of the specified class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-748">이 메서드는 정적 메서드만 대 한 대리자를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-748">This method creates delegates for static methods only.</span></span> <span data-ttu-id="f8d6a-749">클래스의 인스턴스와 연결 된 메서드가 인스턴스 메서드 정적 메서드는 클래스 자체에 연결 되는 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-749">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f8d6a-750">부터 합니다 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]를 호출자에 게 부여 된 경우 public이 아닌 메서드에 액세스 하려면이 메서드를 사용할 수 있습니다 <xref:System.Security.Permissions.ReflectionPermission> 사용 하 여는 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그 및 public이 아닌 메서드의 권한 부여 집합 호출자 에게만 부여 된 집합 또는 하위 집합 그 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-750">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public methods if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public methods is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="f8d6a-751">(참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="f8d6a-751">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="f8d6a-752">이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-752">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="f8d6a-753">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-753">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-754">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-754">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-755">
            <paramref name="target" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-755">
              <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-756">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-756">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-757">
            <paramref name="method" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-757">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-758">
            <paramref name="type" />은 <see cref="T:System.MulticastDelegate" />를 상속하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-758">
              <paramref name="type" /> does not inherit <see cref="T:System.MulticastDelegate" />.</span>
          </span>
          <span data-ttu-id="f8d6a-759">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-759">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-760">
            <paramref name="type" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-760">
              <paramref name="type" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-761">[리플렉션의 런타임 형식](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858)을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-761">See [Runtime Types in Reflection](http://msdn.microsoft.com/library/c1439fb5-cf76-475d-a9d2-fe64ba858858).</span>
          </span>
          <span data-ttu-id="f8d6a-762">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-762">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-763">
            <paramref name="target" />가 <see langword="RuntimeType" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-763">
              <paramref name="target" /> is not a <see langword="RuntimeType" />.</span>
          </span>
          <span data-ttu-id="f8d6a-764">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-764">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-765">
            <paramref name="target" />이 개방형 제네릭 형식인 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-765">
              <paramref name="target" /> is an open generic type.</span>
          </span>
          <span data-ttu-id="f8d6a-766">즉, 해당 <see cref="P:System.Type.ContainsGenericParameters" /> 속성이 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-766">That is, its <see cref="P:System.Type.ContainsGenericParameters" /> property is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="f8d6a-767">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-767">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-768">
            <paramref name="method" />가 <see langword="static" /> 메서드(Visual Basic의 경우 <see langword="Shared" /> 메서드)가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-768">
              <paramref name="method" /> is not a <see langword="static" /> method (<see langword="Shared" /> method in Visual Basic).</span>
          </span>
          <span data-ttu-id="f8d6a-769">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-769">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-770">예를 들어 찾을 수 없고 <paramref name="throwOnBindFailure" />가 <see langword="true" />이기 때문에 <paramref name="method" />를 바인딩할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-770">
              <paramref name="method" /> cannot be bound, for example because it cannot be found, and <paramref name="throwOnBindFailure" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="f8d6a-771">
            <paramref name="type" />의 <see langword="Invoke" /> 메서드를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-771">The <see langword="Invoke" /> method of <paramref name="type" /> is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="f8d6a-772">호출자에게 <paramref name="method" />에 액세스하는 데 필요한 권한이 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-772">The caller does not have the permissions necessary to access <paramref name="method" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-773">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-773">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-774">연관된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-774">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.MulticastDelegate" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvoke">
      <MemberSignature Language="C#" Value="public object DynamicInvoke (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object DynamicInvoke(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvoke(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function DynamicInvoke (ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ DynamicInvoke(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.DynamicInvoke : obj[] -&gt; obj" Usage="delegate.DynamicInvoke args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="f8d6a-775">현재 대리자가 나타내는 메서드로 전달할 인수인 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-775">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="f8d6a-776">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-776">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-777">현재 대리자가 나타내는 메서드에 인수가 필요하지 않으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-777">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-778">현재 대리자가 나타내는 메서드를 동적으로 호출(런타임에 바인딩)합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-778">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-779">대리자가 나타내는 메서드에서 반환되는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-779">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-780">이 메서드는 <xref:System.Delegate.DynamicInvokeImpl%2A> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-780">This method calls the <xref:System.Delegate.DynamicInvokeImpl%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="f8d6a-781">호출자에게 대리자가 나타내는 메서드에 대한 액세스 권한이 없는 경우(예를 들어 메서드가 private인 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-781">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="f8d6a-782">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-782">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-783">
            <paramref name="args" />에 열거된 매개 변수의 개수, 순서, 형식이 유효하지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-783">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-784">대리자가 나타내는 메서드가 해당 메서드를 지원하지 않는 개체 또는 클래스에서 호출되는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-784">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="f8d6a-785">대리자가 나타내는 메서드가 인스턴스 메서드이고 대상 개체가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-785">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-786">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-786">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-787">캡슐화된 메서드 중 하나에서 예외를 throw하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-787">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-788">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-788">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-789">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-789">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="DynamicInvokeImpl">
      <MemberSignature Language="C#" Value="protected virtual object DynamicInvokeImpl (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object DynamicInvokeImpl(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.DynamicInvokeImpl(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function DynamicInvokeImpl (args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Object ^ DynamicInvokeImpl(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member DynamicInvokeImpl : obj[] -&gt; obj&#xA;override this.DynamicInvokeImpl : obj[] -&gt; obj" Usage="delegate.DynamicInvokeImpl args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="f8d6a-790">현재 대리자가 나타내는 메서드로 전달할 인수인 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-790">An array of objects that are the arguments to pass to the method represented by the current delegate.</span>
          </span>
          <span data-ttu-id="f8d6a-791">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-791">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-792">현재 대리자가 나타내는 메서드에 인수가 필요하지 않으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-792">
              <see langword="null" />, if the method represented by the current delegate does not require arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-793">현재 대리자가 나타내는 메서드를 동적으로 호출(런타임에 바인딩)합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-793">Dynamically invokes (late-bound) the method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-794">대리자가 나타내는 메서드에서 반환되는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-794">The object returned by the method represented by the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-795">이 메서드는 <xref:System.Delegate.DynamicInvoke%2A> 메서드를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-795">This method implements the <xref:System.Delegate.DynamicInvoke%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="f8d6a-796">호출자에게 대리자가 나타내는 메서드에 대한 액세스 권한이 없는 경우(예를 들어 메서드가 private인 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-796">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
          <span data-ttu-id="f8d6a-797">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-797">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-798">
            <paramref name="args" />에 열거된 매개 변수의 개수, 순서, 형식이 유효하지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-798">The number, order, or type of parameters listed in <paramref name="args" /> is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-799">대리자가 나타내는 메서드가 해당 메서드를 지원하지 않는 개체 또는 클래스에서 호출되는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-799">The method represented by the delegate is invoked on an object or a class that does not support it.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="f8d6a-800">대리자가 나타내는 메서드가 인스턴스 메서드이고 대상 개체가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-800">The method represented by the delegate is an instance method and the target object is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="f8d6a-801">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-801">-or-</span>
          </span>
          <span data-ttu-id="f8d6a-802">캡슐화된 메서드 중 하나에서 예외를 throw하는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-802">One of the encapsulated methods throws an exception.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-803">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-803">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-804">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-804">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.DynamicInvoke(System.Object[])" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="delegate.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="f8d6a-805">현재 대리자와 비교할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-805">The object to compare with the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-806">지정한 개체와 현재 대리자가 같은 형식이고 같은 대상, 메서드 및 호출 목록을 공유하는지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-806">Determines whether the specified object and the current delegate are of the same type and share the same targets, methods, and invocation list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-807">
            <paramref name="obj" />와 현재 대리자가 같은 대상, 메서드 및 호출 목록을 가지면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-807">
              <see langword="true" /> if <paramref name="obj" /> and the current delegate have the same targets, methods, and invocation list; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-808">동일한 형식의 두 대리자를 없으면 같은 간주 되지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-808">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f8d6a-809">.NET framework 버전 1.0 및 1.1에서 두 명의 대리자가 다른 형식의 해당 대상, 메서드 및 호출 목록을 같으면 고려 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-809">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="f8d6a-810">메서드 및 대상에 같음에 대 한 다음과 같은 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-810">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="f8d6a-811">비교 되는 두 가지 방법 모두 정적 같은 클래스에 있는 같은 메서드를 메서드는 같다고 간주 됩니다 및 대상도 같다고 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-811">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="f8d6a-812">비교할 두 메서드는 인스턴스 메서드, 동일한 개체의 동일한 메서드에 경우 메서드는 같다고 간주 됩니다 및 대상도 같다고 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-812">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="f8d6a-813">이 고, 그렇지 메서드 같다고 간주 되지 않습니다 및 대상도 하다 고 간주 되지 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-813">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="f8d6a-814">동일한 순서 있는 메서드 및 대상이 동일한 두 목록의 해당 요소가 나타내는 경우에 두 호출 목록은 동일한 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-814">Two invocation lists are considered identical only if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="f8d6a-815">호출자에게 대리자가 나타내는 메서드에 대한 액세스 권한이 없는 경우(예를 들어 메서드가 private인 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-815">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-816">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-816">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-817">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-817">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="delegate.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f8d6a-818">대리자의 해시 코드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-818">Returns a hash code for the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-819">대리자의 해시 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-819">A hash code for the delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-820">이 메서드의 반환 값을 두 가지 이유로 유지 되지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-820">The return value of this method must not be persisted for two reasons.</span></span> <span data-ttu-id="f8d6a-821">먼저 이전 해시 함수에서 값을 쓸모 향상 된 분포를 생성 하려면 클래스의 해시 함수를 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-821">First, the hash function of a class might be altered to generate a better distribution, rendering any values from the old hash function useless.</span></span> <span data-ttu-id="f8d6a-822">둘째,이 클래스의 기본 구현은 동일한 값이 서로 다른 인스턴스에서 반환 될을 보장 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-822">Second, the default implementation of this class does not guarantee that the same value will be returned by different instances.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-823">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-823">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-824">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-824">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetInvocationList">
      <MemberSignature Language="C#" Value="public virtual Delegate[] GetInvocationList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Delegate[] GetInvocationList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetInvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInvocationList () As Delegate()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Delegate ^&gt; ^ GetInvocationList();" />
      <MemberSignature Language="F#" Value="abstract member GetInvocationList : unit -&gt; Delegate[]&#xA;override this.GetInvocationList : unit -&gt; Delegate[]" Usage="delegate.GetInvocationList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f8d6a-825">대리자의 호출 목록을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-825">Returns the invocation list of the delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-826">현재 대리자의 호출 목록을 나타내는 대리자의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-826">An array of delegates representing the invocation list of the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-827">배열의 각 대리자는 정확히 하나의 메서드를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-827">Each delegate in the array represents exactly one method.</span></span>  
  
 <span data-ttu-id="f8d6a-828">배열의 대리자의 순서가 현재 대리자가 해당 대리자가 나타내는 메서드를 호출 하는 순서와 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-828">The order of the delegates in the array is the same order in which the current delegate invokes the methods that those delegates represent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f8d6a-829">다음 예제에서는 대리자에 세 가지 메서드를 할당합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-829">The following example assigns three methods to a delegate.</span></span> <span data-ttu-id="f8d6a-830">그런 다음 호출 하는 <xref:System.Delegate.GetInvocationList%2A> "File" 대리자를 역순으로 실행 하 고 이름이 부분 문자열이 없는 메서드를 실행 하는 대리자에 할당할 메서드의 총 개수를 가져올 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-830">It then calls the  <xref:System.Delegate.GetInvocationList%2A> method to get a total count of the methods assigned to the delegate, to execute the delegates in reverse order, and to execute the methods whose name do not include the substring "File".</span></span>  
  
 [!code-csharp[System.Delegate.GetInvocationList#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/cs/GetInvocationList1.cs#1)]
 [!code-vb[System.Delegate.GetInvocationList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Delegate.GetInvocationList/vb/GetInvocationList1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-831">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-831">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-832">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-832">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetMethodImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetMethodImpl () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : unit -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : unit -&gt; System.Reflection.MethodInfo" Usage="delegate.GetMethodImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f8d6a-833">현재 대리자가 나타내는 정적 메서드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-833">Gets the static method represented by the current delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-834">현재 대리자가 나타내는 정적 메서드를 설명하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-834">A <see cref="T:System.Reflection.MethodInfo" /> describing the static method represented by the current delegate.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-835">이 메서드는 현재 대리자가 나타내는 정적 메서드의 경우에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-835">This method applies only if the current delegate represents a static method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="f8d6a-836">호출자에게 대리자가 나타내는 메서드에 대한 액세스 권한이 없는 경우(예를 들어 메서드가 private인 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-836">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-837">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-837">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-838">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-838">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Delegate.Method" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="delegate.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="f8d6a-839">지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-839">Not supported.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="f8d6a-840">지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-840">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-841">지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-841">Not supported.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="f8d6a-842">이 메서드는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-842">This method is not supported.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="f8d6a-843">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-843">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="f8d6a-844">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-844">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo Method { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodInfo Method" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Method" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Method As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodInfo ^ Method { System::Reflection::MethodInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Method : System.Reflection.MethodInfo" Usage="System.Delegate.Method" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f8d6a-845">대리자가 나타내는 메서드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-845">Gets the method represented by the delegate.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f8d6a-846">대리자가 나타내는 메서드를 설명하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-846">A <see cref="T:System.Reflection.MethodInfo" /> describing the method represented by the delegate.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="f8d6a-847">호출자에게 대리자가 나타내는 메서드에 대한 액세스 권한이 없는 경우(예를 들어 메서드가 private인 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-847">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-848">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-848">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-849">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-849">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Delegate.GetMethodImpl" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Delegate * Delegate -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="f8d6a-850">비교할 첫째 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-850">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="f8d6a-851">비교할 둘째 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-851">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-852">지정된 대리자가 같은지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-852">Determines whether the specified delegates are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-853">
            <see langword="true" />가 <paramref name="d1" />와 같으면 <paramref name="d2" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-853">
              <see langword="true" /> if <paramref name="d1" /> is equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-854">같은 대상, 메서드 및 호출 목록을 가진 같은 형식의 두 대리자는 같은 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-854">Two delegates of the same type with the same targets, methods, and invocation lists are considered equal.</span></span>  
  
 <span data-ttu-id="f8d6a-855">동일한 형식의 두 대리자를 없으면 같은 간주 되지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-855">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f8d6a-856">.NET framework 버전 1.0 및 1.1에서 두 명의 대리자가 다른 형식의 해당 대상, 메서드 및 호출 목록을 같으면 고려 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-856">In the .NET Framework version 1.0 and 1.1, two delegates were considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="f8d6a-857">메서드 및 대상에 같음에 대 한 다음과 같은 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-857">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="f8d6a-858">비교 되는 두 가지 방법 모두 정적 같은 클래스에 있는 같은 메서드를 메서드는 같다고 간주 됩니다 및 대상도 같다고 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-858">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="f8d6a-859">비교할 두 메서드는 인스턴스 메서드, 동일한 개체의 동일한 메서드에 경우 메서드는 같다고 간주 됩니다 및 대상도 같다고 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-859">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="f8d6a-860">이 고, 그렇지 메서드 같다고 간주 되지 않습니다 및 대상도 하다 고 간주 되지 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-860">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="f8d6a-861">두 호출 목록은 순서 같고 메서드 및 대상이 동일한 두 목록의 해당 요소가 나타내는 같다고 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-861">Two invocation lists are considered identical if they have the same order and the corresponding elements from the two lists represent the same method and target.</span></span>  
  
 <span data-ttu-id="f8d6a-862">이 연산자에 대 한 해당 메서드는 <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="f8d6a-862">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-863">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-863">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-864">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-864">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Delegate d1, Delegate d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Delegate d1, class System.Delegate d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As Delegate, d2 As Delegate) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Delegate ^ d1, Delegate ^ d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Delegate * Delegate -&gt; bool" Usage="System.Delegate.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.Delegate" />
        <Parameter Name="d2" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d1">
          <span data-ttu-id="f8d6a-865">비교할 첫째 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-865">The first delegate to compare.</span>
          </span>
        </param>
        <param name="d2">
          <span data-ttu-id="f8d6a-866">비교할 둘째 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-866">The second delegate to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-867">지정된 대리자가 다른지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-867">Determines whether the specified delegates are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-868">
            <see langword="true" />가 <paramref name="d1" />와 다르면 <paramref name="d2" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-868">
              <see langword="true" /> if <paramref name="d1" /> is not equal to <paramref name="d2" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-869">두 명의 대리자는 것으로 간주 하거나 다양 한 방법, 다양 한 대상에 또는 다른 호출 목록을 가지 서로 다른 형식의 경우.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-869">Two delegates are considered not equal if they are of different types, or have different methods, different targets, or different invocation lists.</span></span>  
  
 <span data-ttu-id="f8d6a-870">동일한 형식의 두 대리자를 없으면 같은 간주 되지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-870">If the two delegates are not of the same type, they are not considered equal.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f8d6a-871">.NET framework 버전 1.0 및 1.1에서 두 대리자는 서로 다른 형식의 해당 대상, 메서드 및 호출 목록을 같으면 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-871">In the .NET Framework version 1.0 and 1.1, two delegates are considered equal if their targets, methods, and invocation list were equal, even if the delegates were of different types.</span></span>  
  
 <span data-ttu-id="f8d6a-872">메서드 및 대상에 같음에 대 한 다음과 같은 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-872">The methods and targets are compared for equality as follows:</span></span>  
  
-   <span data-ttu-id="f8d6a-873">비교 되는 두 가지 방법 모두 정적 같은 클래스에 있는 같은 메서드를 메서드는 같다고 간주 됩니다 및 대상도 같다고 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-873">If the two methods being compared are both static and are the same method on the same class, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="f8d6a-874">비교할 두 메서드는 인스턴스 메서드, 동일한 개체의 동일한 메서드에 경우 메서드는 같다고 간주 됩니다 및 대상도 같다고 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-874">If the two methods being compared are instance methods and are the same method on the same object, the methods are considered equal and the targets are also considered equal.</span></span>  
  
-   <span data-ttu-id="f8d6a-875">이 고, 그렇지 메서드 같다고 간주 되지 않습니다 및 대상도 하다 고 간주 되지 같아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-875">Otherwise, the methods are not considered to be equal and the targets are also not considered to be equal.</span></span>  
  
 <span data-ttu-id="f8d6a-876">다르게 정렬 하는 경우 다양 한 크기가는 경우 또는 메서드 또는 다른 목록의 해당 요소가 나타내는 다른 대상 하나 목록에서 하나 이상의 요소를 나타내는 경우에 호출 목록을 가지 두은 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-876">Two invocation lists are not equal if they have different sizes, if they are ordered differently, or if at least one element from one list represents a method or target that is different from that represented by its corresponding element in the other list.</span></span>  
  
 <span data-ttu-id="f8d6a-877">이 연산자에 대 한 해당 메서드는 <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="f8d6a-877">The equivalent method for this operator is <xref:System.Delegate.Equals%28System.Object%29?displayProperty=nameWithType></span></span>]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-878">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-878">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-879">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-879">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static Delegate Remove (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate Remove(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Remove (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ Remove(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member Remove : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.Remove (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="f8d6a-880">
            <c>값</c>의 호출 목록을 제거하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-880">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="f8d6a-881">
            <c>원본</c>의 호출 목록에서 제거할 호출 목록을 제공하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-881">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-882">한 대리자의 호출 목록에 있는 마지막 항목을 다른 대리자의 호출 목록에서 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-882">Removes the last occurrence of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-883">
            <paramref name="source" />의 호출 목록이 <paramref name="value" />의 호출 목록에 있는 경우, <paramref name="value" />의 호출 목록을 가져오고 <paramref name="source" />의 호출 목록에 있는 마지막 항목을 제거해서 만들어진 호출 목록을 가진 새로운 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-883">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing the last occurrence of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="f8d6a-884">
            <paramref name="source" />가 <see langword="null" />이거나 <paramref name="value" />의 호출 목록이 <paramref name="value" />의 호출 목록에 없는 경우 <paramref name="source" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-884">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="f8d6a-885">
            <paramref name="value" />의 호출 목록이 <paramref name="source" />의 호출 목록과 같거나 <paramref name="source" />가 null 참조인 경우 null 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-885">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" /> or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-886">경우의 호출 목록이 `value` 연속 호출 목록에서 요소 집합을 매칭합니다 `source`, 다음의 호출 목록이 `value` 의 호출 목록 내에서 발생 한다고 `source`.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-886">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="f8d6a-887">하는 경우의 호출 목록이 `value` 의 호출 목록에서 두 번 이상 발생 `source`, 마지막으로 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-887">If the invocation list of `value` occurs more than once in the invocation list of `source`, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="f8d6a-888">호출자에게 대리자가 나타내는 메서드에 대한 액세스 권한이 없는 경우(예를 들어 메서드가 private인 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-888">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-889">대리자 형식이 일치하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-889">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-890">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-890">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-891">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-891">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public static Delegate RemoveAll (Delegate source, Delegate value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveAll (source As Delegate, value As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Delegate ^ RemoveAll(Delegate ^ source, Delegate ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveAll : Delegate * Delegate -&gt; Delegate" Usage="System.Delegate.RemoveAll (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Delegate" />
        <Parameter Name="value" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="f8d6a-892">
            <c>값</c>의 호출 목록을 제거하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-892">The delegate from which to remove the invocation list of <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="f8d6a-893">
            <c>원본</c>의 호출 목록에서 제거할 호출 목록을 제공하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-893">The delegate that supplies the invocation list to remove from the invocation list of <c>source</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-894">한 대리자의 호출 목록에 있는 모든 항목을 다른 대리자의 호출 목록에서 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-894">Removes all occurrences of the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-895">
            <paramref name="source" />의 호출 목록이 <paramref name="value" />의 호출 목록에 있는 경우, <paramref name="value" />의 호출 목록을 가져오고 <paramref name="source" />의 호출 목록에 있는 모든 항목을 제거해서 만들어진 호출 목록을 가진 새로운 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-895">A new delegate with an invocation list formed by taking the invocation list of <paramref name="source" /> and removing all occurrences of the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="f8d6a-896">
            <paramref name="source" />가 <see langword="null" />이거나 <paramref name="value" />의 호출 목록이 <paramref name="value" />의 호출 목록에 없는 경우 <paramref name="source" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-896">Returns <paramref name="source" /> if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the invocation list of <paramref name="source" />.</span>
          </span>
          <span data-ttu-id="f8d6a-897">
            <paramref name="value" />의 호출 목록이 <paramref name="source" />의 호출 목록과 같거나 <paramref name="source" />에 <paramref name="value" />의 호출 목록과 같은 일련의 호출 목록만 있거나 <paramref name="source" />가 null 참조인 경우 null 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-897">Returns a null reference if the invocation list of <paramref name="value" /> is equal to the invocation list of <paramref name="source" />, if <paramref name="source" /> contains only a series of invocation lists that are equal to the invocation list of <paramref name="value" />, or if <paramref name="source" /> is a null reference.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-898">경우의 호출 목록이 `value` 연속 호출 목록에서 요소 집합을 매칭합니다 `source`, 다음의 호출 목록이 `value` 의 호출 목록 내에서 발생 한다고 `source`.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-898">If the invocation list of `value` matches a contiguous set of elements in the invocation list of `source`, then the invocation list of `value` is said to occur within the invocation list of `source`.</span></span> <span data-ttu-id="f8d6a-899">하는 경우의 호출 목록이 `value` 의 호출 목록에서 두 번 이상 발생 `source`, 모든 항목이 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-899">If the invocation list of `value` occurs more than once in the invocation list of `source`, all occurrences are removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="f8d6a-900">호출자에게 대리자가 나타내는 메서드에 대한 액세스 권한이 없는 경우(예를 들어 메서드가 private인 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-900">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f8d6a-901">대리자 형식이 일치하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-901">The delegate types do not match.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-902">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-902">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-903">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-903">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.RemoveImpl(System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveImpl">
      <MemberSignature Language="C#" Value="protected virtual Delegate RemoveImpl (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Delegate RemoveImpl(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Delegate.RemoveImpl(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function RemoveImpl (d As Delegate) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Delegate ^ RemoveImpl(Delegate ^ d);" />
      <MemberSignature Language="F#" Value="abstract member RemoveImpl : Delegate -&gt; Delegate&#xA;override this.RemoveImpl : Delegate -&gt; Delegate" Usage="delegate.RemoveImpl d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="f8d6a-904">현재 대리자의 호출 목록에서 제거할 호출 목록을 제공하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-904">The delegate that supplies the invocation list to remove from the invocation list of the current delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f8d6a-905">한 대리자의 호출 목록을 다른 대리자의 호출 목록에서 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-905">Removes the invocation list of a delegate from the invocation list of another delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f8d6a-906">
            <paramref name="value" />의 호출 목록이 현재 대리자의 호출 목록에 있는 경우, 현재 대리자의 호출 목록을 가져오고 <paramref name="value" />의 호출 목록을 제거해서 만들어진 호출 목록을 가진 새로운 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-906">A new delegate with an invocation list formed by taking the invocation list of the current delegate and removing the invocation list of <paramref name="value" />, if the invocation list of <paramref name="value" /> is found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="f8d6a-907">
            <paramref name="value" />가 <see langword="null" />이거나 <paramref name="value" />의 호출 목록이 현재 대리자의 호출 목록에 없는 경우 현재 대리자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-907">Returns the current delegate if <paramref name="value" /> is <see langword="null" /> or if the invocation list of <paramref name="value" /> is not found within the current delegate's invocation list.</span>
          </span>
          <span data-ttu-id="f8d6a-908">
            <paramref name="value" />의 호출 목록이 현재 대리자의 호출 목록과 같으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-908">Returns <see langword="null" /> if the invocation list of <paramref name="value" /> is equal to the current delegate's invocation list.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-909">하는 경우의 호출 목록이 `value` 의 호출 목록이 현재 대리자의 호출 목록에 요소 집합과 연속 일치 `value` 현재 대리자의 호출 목록 내에서 발생 한다고 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-909">If the invocation list of `value` matches a contiguous set of elements in the current delegate's invocation list, then the invocation list of `value` is said to occur within the current delegate's invocation list.</span></span> <span data-ttu-id="f8d6a-910">하는 경우의 호출 목록이 `value` 두 번 이상 발생 현재 대리자의 호출 목록에서 마지막으로 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-910">If the invocation list of `value` occurs more than once in the current delegate's invocation list, the last occurrence is removed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="f8d6a-911">호출자에게 대리자가 나타내는 메서드에 대한 액세스 권한이 없는 경우(예를 들어 메서드가 private인 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-911">The caller does not have access to the method represented by the delegate (for example, if the method is private).</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-912">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-912">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-913">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-913">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Delegate.Remove(System.Delegate,System.Delegate)" />
        <altmember cref="M:System.Delegate.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberSignature Language="DocId" Value="P:System.Delegate.Target" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Target As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Target { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Target : obj" Usage="System.Delegate.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f8d6a-914">현재 대리자가 인스턴스 메서드를 호출하는 클래스 인스턴스를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-914">Gets the class instance on which the current delegate invokes the instance method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f8d6a-915">대리자가 인스턴스 메서드를 나타내는 경우 현재 대리자가 인스턴스 메서드를 호출하는 개체이고, 대리자가 정적 메서드를 나타내는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-915">The object on which the current delegate invokes the instance method, if the delegate represents an instance method; <see langword="null" /> if the delegate represents a static method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f8d6a-916">클래스의 인스턴스와 연결 된 메서드가 인스턴스 메서드 정적 메서드는 클래스 자체에 연결 되는 메서드.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-916">An instance method is a method that is associated with an instance of a class; a static method is a method that is associated with the class itself.</span></span>  
  
 <span data-ttu-id="f8d6a-917">하나 이상의 인스턴스 메서드를 호출 하는 대리자 호출 목록에서 마지막 인스턴스 메서드의 대상이이 속성에 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="f8d6a-917">If the delegate invokes one or more instance methods, this property returns the target of the last instance method in the invocation list.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="f8d6a-918">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-918">when invoked late-bound through mechanisms such as <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
          <span data-ttu-id="f8d6a-919">연결 된 열거형: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f8d6a-919">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>