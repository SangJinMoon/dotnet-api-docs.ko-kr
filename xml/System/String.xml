<Type Name="String" FullName="System.String">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bca6cb70cbbc34b4d8170b379576027df0dbb65e" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37731854" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class String : ICloneable, IComparable, IComparable&lt;string&gt;, IConvertible, IEquatable&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit string extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;char&gt;, class System.Collections.IEnumerable, class System.ICloneable, class System.IComparable, class System.IComparable`1&lt;string&gt;, class System.IConvertible, class System.IEquatable`1&lt;string&gt;" />
  <TypeSignature Language="DocId" Value="T:System.String" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class String&#xA;Implements ICloneable, IComparable, IComparable(Of String), IConvertible, IEnumerable(Of Char), IEquatable(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class String sealed : ICloneable, IComparable, IComparable&lt;System::String ^&gt;, IConvertible, IEquatable&lt;System::String ^&gt;, System::Collections::Generic::IEnumerable&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface IComparable&#xA;    interface ICloneable&#xA;    interface IConvertible&#xA;    interface IEnumerable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface seq&lt;char&gt;&#xA;    interface IEquatable&lt;string&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.String&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="3723c-101">텍스트를 UTF-16 코드 단위의 시퀀스로 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3723c-101">Represents text as a sequence of UTF-16 code units.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 <span data-ttu-id="3723c-102">문자열은 텍스트를 나타내는 데 사용 되는 문자의 순차적인 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-102">A string is a sequential collection of characters that is used to represent text.</span></span> <span data-ttu-id="3723c-103">A <xref:System.String> 개체의 순차 컬렉션이 <xref:System.Char?displayProperty=nameWithType> 있으며 문자열을 나타내는 개체를 개체 <xref:System.Char?displayProperty=nameWithType> utf-16 코드 단위에 해당 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-103">A <xref:System.String> object is a sequential collection of <xref:System.Char?displayProperty=nameWithType> objects that represent a string; a <xref:System.Char?displayProperty=nameWithType> object corresponds to a UTF-16 code unit.</span></span> <span data-ttu-id="3723c-104">값을 <xref:System.String> 개체의 순차 컬렉션의 콘텐츠가 <xref:System.Char?displayProperty=nameWithType> 개체 및 값은 변경할 수 없습니다 (즉,이 읽기 전용).</span><span class="sxs-lookup"><span data-stu-id="3723c-104">The value of the <xref:System.String> object is the content of the sequential collection of <xref:System.Char?displayProperty=nameWithType> objects, and that value is immutable (that is, it is read-only).</span></span> <span data-ttu-id="3723c-105">문자열의 불변성에 대 한 자세한 내용은 참조는 [불변성 및 StringBuilder 클래스](#Immutability) 이 항목의 뒷부분에 나오는 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-105">For more information about the immutability of strings, see the [Immutability and the StringBuilder class](#Immutability) section later in this topic.</span></span> <span data-ttu-id="3723c-106">최대 크기는 <xref:System.String> 메모리에서 개체는 약 1 십억 자 2GB입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-106">The maximum size of a <xref:System.String> object in memory is 2GB, or about 1 billion characters.</span></span>  
  
 <span data-ttu-id="3723c-107">섹션 내용</span><span class="sxs-lookup"><span data-stu-id="3723c-107">In this section:</span></span>  
  
 <span data-ttu-id="3723c-108">[문자열 개체 인스턴스화](#Instantiation) </span><span class="sxs-lookup"><span data-stu-id="3723c-108">[Instantiating a String object](#Instantiation) </span></span>  
 <span data-ttu-id="3723c-109">[개체 및 유니코드 문자를 문자](#Characters) </span><span class="sxs-lookup"><span data-stu-id="3723c-109">[Char objects and Unicode characters](#Characters) </span></span>  
 <span data-ttu-id="3723c-110">[문자열과 유니코드 표준](#Unicode) </span><span class="sxs-lookup"><span data-stu-id="3723c-110">[Strings and The Unicode Standard](#Unicode) </span></span>  
 <span data-ttu-id="3723c-111">[문자열 및 포함 된 null 문자](#EmbeddedNulls) </span><span class="sxs-lookup"><span data-stu-id="3723c-111">[Strings and embedded null characters](#EmbeddedNulls) </span></span>  
 <span data-ttu-id="3723c-112">[문자열 및 인덱스](#Indexes) </span><span class="sxs-lookup"><span data-stu-id="3723c-112">[Strings and indexes](#Indexes) </span></span>  
 <span data-ttu-id="3723c-113">[Null 문자열 및 빈 문자열](#Nulls) </span><span class="sxs-lookup"><span data-stu-id="3723c-113">[Null strings and empty strings](#Nulls) </span></span>  
 <span data-ttu-id="3723c-114">[불변성 및 StringBuilder 클래스](#Immutability) </span><span class="sxs-lookup"><span data-stu-id="3723c-114">[Immutability and the StringBuilder class](#Immutability) </span></span>  
 <span data-ttu-id="3723c-115">[문화권 구분 작업 및 서 수](#CultureSensitive) </span><span class="sxs-lookup"><span data-stu-id="3723c-115">[Ordinal vs. culture-sensitive operations](#CultureSensitive) </span></span>  
 <span data-ttu-id="3723c-116">[정규화](#Normalization) </span><span class="sxs-lookup"><span data-stu-id="3723c-116">[Normalization](#Normalization) </span></span>  
 [<span data-ttu-id="3723c-117">범주별 문자열 작업</span><span class="sxs-lookup"><span data-stu-id="3723c-117">String operations by category</span></span>](#ByCategory)  
  
<a name="Instantiation"></a>   
## <a name="instantiating-a-string-object"></a><span data-ttu-id="3723c-118">문자열 개체 인스턴스화</span><span class="sxs-lookup"><span data-stu-id="3723c-118">Instantiating a String object</span></span>  
 <span data-ttu-id="3723c-119">인스턴스화할 수 있습니다는 <xref:System.String> 다음과 같은 방법으로 개체:</span><span class="sxs-lookup"><span data-stu-id="3723c-119">You can instantiate a <xref:System.String> object in the following ways:</span></span>  
  
-   <span data-ttu-id="3723c-120">문자열 리터럴을 할당 하 여를 <xref:System.String> 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-120">By assigning a string literal to a <xref:System.String> variable.</span></span> <span data-ttu-id="3723c-121">이 방법은 문자열을 만들기 위해 가장 일반적으로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-121">This is the most commonly used method for creating a string.</span></span> <span data-ttu-id="3723c-122">다음 예제에서는 할당을 사용 하 여 여러 문자열을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-122">The following example uses assignment to create several strings.</span></span> <span data-ttu-id="3723c-123">때문에 C#에서 유의 백슬래시 (\\)는 이스케이프 문자, 문자열에서 리터럴 백슬래시를 이스케이프 해야 합니다 또는 전체 문자열 이어야 합니다 @-quoted합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-123">Note that in C#, because the backslash (\\) is an escape character, literal backslashes in a string must be escaped or the entire string must be @-quoted.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate1.cpp#1)]
     [!code-csharp[System.String.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#1)]
     [!code-vb[System.String.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#1)]  
  
-   <span data-ttu-id="3723c-124">호출 하 여를 <xref:System.String> 클래스 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-124">By calling a <xref:System.String> class constructor.</span></span> <span data-ttu-id="3723c-125">다음 예제에서는 몇 가지 클래스 생성자를 호출 하 여 문자열을 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-125">The following example instantiates strings by calling several class constructors.</span></span> <span data-ttu-id="3723c-126">문자 배열 또는 매개 변수 사용 되는 부호 있는 바이트 배열에 대 한 포인터를 포함 하는 생성자 중 일부를 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-126">Note that some of the constructors include pointers to character arrays or signed byte arrays as parameters.</span></span> <span data-ttu-id="3723c-127">Visual Basic에서 이러한 생성자에 대 한 호출을 지원 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-127">Visual Basic does not support calls to these constructors.</span></span> <span data-ttu-id="3723c-128">에 대 한 자세한 내용은 <xref:System.String> 생성자를 참조 합니다 <xref:System.String.%23ctor%2A> 생성자 요약 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-128">For detailed information about <xref:System.String> constructors, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate2.cpp#2)]
     [!code-csharp[System.String.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#2)]
     [!code-vb[System.String.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#2)]  
  
-   <span data-ttu-id="3723c-129">문자열 연결 연산자를 사용 하 여 (+, C# 및 & 또는 + Visual Basic의) 단일 문자열로 조합 중에서 만들려는 <xref:System.String> 인스턴스 및 문자열 리터럴.</span><span class="sxs-lookup"><span data-stu-id="3723c-129">By using the string concatenation operator (+ in C# and & or + in Visual Basic) to create a single string from any combination of <xref:System.String> instances and string literals.</span></span> <span data-ttu-id="3723c-130">다음 예제에서는 문자열 연결 연산자를 사용을 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-130">The following example illustrates the use of the string concatenation operator.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#3)]
     [!code-csharp[System.String.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#3)]
     [!code-vb[System.String.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#3)]  
  
-   <span data-ttu-id="3723c-131">속성을 검색 하거나 메서드를 호출 하 여 문자열을 반환 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-131">By retrieving a property or calling a method that returns a string.</span></span> <span data-ttu-id="3723c-132">메서드를 사용 하는 다음 예제는 <xref:System.String> 클래스를 더 큰 문자열에서 부분 문자열을 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-132">The following example uses the methods of the <xref:System.String> class to extract a substring from a larger string.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#4)]
     [!code-csharp[System.String.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#4)]
     [!code-vb[System.String.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#4)]  
  
-   <span data-ttu-id="3723c-133">값 또는 개체를 문자열 표현으로 변환 하는 형식 지정 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-133">By calling a formatting method to convert a value or object to its string representation.</span></span> <span data-ttu-id="3723c-134">다음 예제에서는 합니다 [복합 서식 지정](~/docs/standard/base-types/composite-formatting.md) 문자열로 두 개체의 문자열 표현을 포함 하는 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-134">The following example uses the                [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature to embed the string representation of two objects into a string.</span></span>  
  
     [!code-cpp[System.String.Class.Instantiate#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#5)]
     [!code-csharp[System.String.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#5)]
     [!code-vb[System.String.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#5)]  
  
<a name="Characters"></a>   
## <a name="char-objects-and-unicode-characters"></a><span data-ttu-id="3723c-135">개체 및 유니코드 문자를 문자</span><span class="sxs-lookup"><span data-stu-id="3723c-135">Char objects and Unicode characters</span></span>  
 <span data-ttu-id="3723c-136">문자열의 각 문자는 유니코드 코드 포인트 또는 유니코드 문자의 서 수 (숫자) 값을 유니코드 스칼라 값으로 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-136">Each character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character.</span></span> <span data-ttu-id="3723c-137">Utf-16 인코딩을 사용 하 여 각 코드 포인트를 인코딩하고 인코딩을의 각 요소 숫자 값은 표현 된 <xref:System.Char> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-137">Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <xref:System.Char> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-138">때문에 <xref:System.String> utf-16 코드 단위 순차 컬렉션의 인스턴스 구성, 만들 수 있기를 <xref:System.String> 개체는 올바른된 유니코드 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-138">Note that, because a <xref:System.String> instance consists of a sequential collection of UTF-16 code units, it is possible to create a <xref:System.String> object that is not a well-formed Unicode string.</span></span> <span data-ttu-id="3723c-139">예를 들어, 해당 상위 서로게이트 없이 하위 서로게이트 된 문자열을 만들 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-139">For example, it is possible to create a string that has a low surrogate without a corresponding high surrogate.</span></span> <span data-ttu-id="3723c-140">하지만 인코딩 및 디코딩에서 개체의 메서드와 같은 일부 메서드는 <xref:System.Text> 네임 스페이스 문자열이 제대로 구성 되어 있는지 확인 하는 검사를 수행 될 수 있습니다 <xref:System.String> 문자열은 올바른 형식의 클래스 멤버 보장할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-140">Although some methods, such as the methods of encoding and decoding objects in the <xref:System.Text> namespace, may performs checks to ensure that strings are well-formed, <xref:System.String> class members don't ensure that a string is well-formed.</span></span>  
  
 <span data-ttu-id="3723c-141">단일 <xref:System.Char> 개체에는 일반적으로 단일 나타냅니다 코드 포인트의 숫자 값, 즉는 <xref:System.Char> 코드 포인트와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-141">A single <xref:System.Char> object usually represents a single code point; that is, the numeric value of the <xref:System.Char> equals the code point.</span></span> <span data-ttu-id="3723c-142">예를 들어, 코드 포인트를 "문자에 대 한 a"가 단어로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-142">For example, the code point for the character "a" is U+0061.</span></span> <span data-ttu-id="3723c-143">그러나 코드 포인트를 인코딩된 요소가 둘 이상 필요할 수도 있습니다 (둘 이상의 <xref:System.Char> 개체).</span><span class="sxs-lookup"><span data-stu-id="3723c-143">However, a code point might require more than one encoded element (more than one <xref:System.Char> object).</span></span> <span data-ttu-id="3723c-144">유니코드 표준은 여러 문자에 해당 하는 두 가지 유형의 정의 <xref:System.Char> 개체: 제자, 및에서 유니코드 보조 평면 문자에 해당 하는 유니코드 보충 코드 포인트입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-144">The Unicode standard defines two types of characters that correspond to multiple <xref:System.Char> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes.</span></span>  
  
-   <span data-ttu-id="3723c-145">기본 문자 뒤에 하나 이상의 조합 문자는 문자 소 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-145">A grapheme is represented by a base character followed by one or more combining characters.</span></span> <span data-ttu-id="3723c-146">문자 ä는 표현 예를 들어 <xref:System.Char> 단어로 뒤에 해당 코드 포인트 개체 <xref:System.Char> 해당 코드 포인트 + 0308 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-146">For example, the character ä is represented by a <xref:System.Char> object whose code point is U+0061 followed by a <xref:System.Char> object whose code point is U+0308.</span></span> <span data-ttu-id="3723c-147">이 문자는 단일 정의할 수도 있습니다 <xref:System.Char> 00 e U + 4 인 코드 포인트를 가진 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-147">This character can also be defined by a single <xref:System.Char> object that has a code point of U+00E4.</span></span> <span data-ttu-id="3723c-148">다음 예제와 같이 일반 서 수 비교 하지 않습니다 하지만 이러한 두 표현은 같음, 같음에 대 한 문화권 구분 비교를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-148">As the following example shows, a culture-sensitive comparison for equality indicates that these two representations are equal, although an ordinary ordinal comparison does not.</span></span> <span data-ttu-id="3723c-149">그러나 두 문자열 정규화 되는 경우 서 수 비교를 나타내기도 같은지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-149">However, if the two strings are normalized, an ordinal comparison also indicates that they are equal.</span></span> <span data-ttu-id="3723c-150">(문자열 정규화에 대 한 자세한 내용은 참조는 [정규화](#Normalization) 섹션입니다.)</span><span class="sxs-lookup"><span data-stu-id="3723c-150">(For more information on normalizing strings, see the [Normalization](#Normalization) section.)</span></span>  
  
     [!code-cpp[System.String.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char1.cpp#2)]
     [!code-csharp[System.String.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/grapheme1.cs#2)]
     [!code-vb[System.String.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/grapheme1.vb#2)]  
  
-   <span data-ttu-id="3723c-151">보조 코드 포인트 (서로게이트 쌍)가 나타내는 유니코드를 <xref:System.Char> 뒤에 상위 서로게이트 코드 포인트가 개체는 <xref:System.Char> 하위 서로게이트 코드 포인트가 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-151">A Unicode supplementary code point (a surrogate pair) is represented by a <xref:System.Char> object whose code point is a high surrogate followed by a <xref:System.Char> object whose code point is a low surrogate.</span></span> <span data-ttu-id="3723c-152">U+d800부터 U + dbff 사이의 높은 서로게이트가 범위의 코드 단위입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-152">The code units of high surrogates range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="3723c-153">이 U+dc00부터 U + dfff 낮은 서로게이트가 범위의 코드 단위입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-153">The code units of low surrogates range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="3723c-154">서로게이트 쌍에 16 유니코드 보조 평면 문자를 나타내기 위해 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-154">Surrogate pairs are used to represent characters in the 16 Unicode supplementary planes.</span></span> <span data-ttu-id="3723c-155">다음 예제에서는 서로게이트 문자를 만들어 전달 된 <xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=nameWithType> 이 서로게이트 쌍인지 여부를 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-155">The following example creates a surrogate character and passes it to the <xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=nameWithType> method to determine whether it is a surrogate pair.</span></span>  
  
     [!code-cpp[System.String.Class#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char2.cpp#3)]
     [!code-csharp[System.String.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/surrogate1.cs#3)]
     [!code-vb[System.String.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/surrogate1.vb#3)]  
  
<a name="Unicode"></a>   
## <a name="strings-and-the-unicode-standard"></a><span data-ttu-id="3723c-156">문자열과 유니코드 표준</span><span class="sxs-lookup"><span data-stu-id="3723c-156">Strings and The Unicode Standard</span></span>  
 <span data-ttu-id="3723c-157">문자열의 문자는 해당 하는 u t F-16으로 인코딩된 코드 단위를 나타내는 <xref:System.Char> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-157">Characters in a string are represented by UTF-16 encoded code units, which correspond to <xref:System.Char> values.</span></span>  
  
 <span data-ttu-id="3723c-158">문자열의 각 문자에.NET Framework에서 표현 되는 연결 된 유니코드 문자 범주는 <xref:System.Globalization.UnicodeCategory> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-158">Each character in a string has an associated Unicode character category, which is represented in the .NET Framework by the <xref:System.Globalization.UnicodeCategory> enumeration.</span></span> <span data-ttu-id="3723c-159">호출 하 여 문자 또는 서로게이트 쌍의 범주를 확인할 수 있습니다는 <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-159">The category of a character or a surrogate pair can be determined by calling the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="3723c-160">.NET의 문자 및 해당 범주에 다른 플랫폼에서 실행 되는.NET 구현의 특정 버전을 동일한 문자 범주 정보를 반환 하는지 확인 하는 자체 테이블 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-160">.NET maintains its own table of characters and their corresponding categories, which ensures that a specific version of a .NET implementation running on different platforms returns identical character category information.</span></span> <span data-ttu-id="3723c-161">다음 표에서.NET 버전 및 해당 문자 범주의 기반이 되는 유니코드 표준의 버전을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-161">The following table lists .NET versions and the versions of the Unicode Standard on which their character categories are based.</span></span>  
  
|<span data-ttu-id="3723c-162">.NET Framework 버전</span><span class="sxs-lookup"><span data-stu-id="3723c-162">.NET Framework version</span></span>|<span data-ttu-id="3723c-163">유니코드 표준의 버전</span><span class="sxs-lookup"><span data-stu-id="3723c-163">Version of the Unicode Standard</span></span>|  
|----------------------------|-------------------------------------|  
|[!INCLUDE[net_v11_long](~/includes/net-v11-long-md.md)]|[<span data-ttu-id="3723c-164">유니코드 표준 버전 4.0.0</span><span class="sxs-lookup"><span data-stu-id="3723c-164">The Unicode Standard, Version 4.0.0</span></span>](https://www.unicode.org/versions/Unicode4.0.0/)|  
|<span data-ttu-id="3723c-165">.NET Framework 2.0</span><span class="sxs-lookup"><span data-stu-id="3723c-165">The .NET Framework 2.0</span></span>|[<span data-ttu-id="3723c-166">유니코드 표준, 버전 5.0.0</span><span class="sxs-lookup"><span data-stu-id="3723c-166">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]|[<span data-ttu-id="3723c-167">유니코드 표준, 버전 5.0.0</span><span class="sxs-lookup"><span data-stu-id="3723c-167">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]|[<span data-ttu-id="3723c-168">유니코드 표준, 버전 5.0.0</span><span class="sxs-lookup"><span data-stu-id="3723c-168">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]|[<span data-ttu-id="3723c-169">유니코드 표준, 버전 6.3.0</span><span class="sxs-lookup"><span data-stu-id="3723c-169">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|  
|[!INCLUDE[net_v451](~/includes/net-v451-md.md)]|[<span data-ttu-id="3723c-170">유니코드 표준, 버전 6.3.0</span><span class="sxs-lookup"><span data-stu-id="3723c-170">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|  
|[!INCLUDE[net_v452](~/includes/net-v452-md.md)]|[<span data-ttu-id="3723c-171">유니코드 표준, 버전 6.3.0</span><span class="sxs-lookup"><span data-stu-id="3723c-171">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|  
|[!INCLUDE[net_v46](~/includes/net-v46-md.md)]|[<span data-ttu-id="3723c-172">유니코드 표준, 버전 6.3.0</span><span class="sxs-lookup"><span data-stu-id="3723c-172">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|  
|[!INCLUDE[net_v461](~/includes/net-v461-md.md)]|[<span data-ttu-id="3723c-173">유니코드 표준, 버전 6.3.0</span><span class="sxs-lookup"><span data-stu-id="3723c-173">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|  
|[!INCLUDE[net_v462](~/includes/net-v462-md.md)]|[<span data-ttu-id="3723c-174">유니코드 표준 버전 8.0.0</span><span class="sxs-lookup"><span data-stu-id="3723c-174">The Unicode Standard, Version 8.0.0</span></span>](https://www.unicode.org/versions/Unicode8.0.0/)|  
|<span data-ttu-id="3723c-175">.NET core (모든 버전)</span><span class="sxs-lookup"><span data-stu-id="3723c-175">.NET Core (all versions)</span></span>|[<span data-ttu-id="3723c-176">유니코드 표준 버전 8.0.0</span><span class="sxs-lookup"><span data-stu-id="3723c-176">The Unicode Standard, Version 8.0.0</span></span>](https://www.unicode.org/versions/Unicode8.0.0/)|
  
 <span data-ttu-id="3723c-177">또한.NET Framework는 문자열 비교를 지원 하 고 유니코드 표준에 따라 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-177">In addition, the .NET Framework supports string comparison and sorting based on the Unicode standard.</span></span> <span data-ttu-id="3723c-178">통해.NET Framework의 버전에서을 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)],.NET Framework에 문자열 데이터의 자체 테이블 유지 관리 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-178">In versions of the .NET Framework through the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework maintains its own table of string data.</span></span> <span data-ttu-id="3723c-179">부터.NET Framework의 버전도 마찬가지 여 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] Windows 7을 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-179">This is also true of versions of the .NET Framework starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Windows 7.</span></span> <span data-ttu-id="3723c-180">부터 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] Window 8 및 이후 버전의 Windows 운영 체제를 실행, 런타임 대리자 문자열 비교 및 정렬 작업의 운영 체제입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-180">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Window 8 and later versions of the Windows operating system, the runtime delegates string comparison and sorting operations to the operating system.</span></span> <span data-ttu-id="3723c-181">다음 표에서.NET Framework의 버전 및 문자 비교 및 정렬 기반으로 하는 유니코드 표준의 버전을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-181">The following table lists the versions of the .NET Framework and the versions of the Unicode Standard on which character comparison and sorting are based.</span></span>  
  
|<span data-ttu-id="3723c-182">.NET Framework 버전</span><span class="sxs-lookup"><span data-stu-id="3723c-182">.NET Framework version</span></span>|<span data-ttu-id="3723c-183">유니코드 표준의 버전</span><span class="sxs-lookup"><span data-stu-id="3723c-183">Version of the Unicode Standard</span></span>|  
|----------------------------|-------------------------------------|  
|[!INCLUDE[net_v11_long](~/includes/net-v11-long-md.md)]|[<span data-ttu-id="3723c-184">유니코드 표준 버전 4.0.0</span><span class="sxs-lookup"><span data-stu-id="3723c-184">The Unicode Standard, Version 4.0.0</span></span>](https://www.unicode.org/versions/Unicode4.0.0/)|  
|<span data-ttu-id="3723c-185">.NET Framework 2.0</span><span class="sxs-lookup"><span data-stu-id="3723c-185">The .NET Framework 2.0</span></span>|[<span data-ttu-id="3723c-186">유니코드 표준, 버전 5.0.0</span><span class="sxs-lookup"><span data-stu-id="3723c-186">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]|[<span data-ttu-id="3723c-187">유니코드 표준, 버전 5.0.0</span><span class="sxs-lookup"><span data-stu-id="3723c-187">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]|[<span data-ttu-id="3723c-188">유니코드 표준, 버전 5.0.0</span><span class="sxs-lookup"><span data-stu-id="3723c-188">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]<span data-ttu-id="3723c-189"> Windows 7 이상</span><span class="sxs-lookup"><span data-stu-id="3723c-189"> and later on Windows 7</span></span>|[<span data-ttu-id="3723c-190">유니코드 표준, 버전 5.0.0</span><span class="sxs-lookup"><span data-stu-id="3723c-190">The Unicode Standard, Version 5.0.0</span></span>](http://www.unicode.org/versions/Unicode5.0.0)|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]<span data-ttu-id="3723c-191"> 나중에 Windows 8 및 이후 Windows 운영 체제</span><span class="sxs-lookup"><span data-stu-id="3723c-191"> and later on Windows 8 and later Windows operating systems</span></span>|[<span data-ttu-id="3723c-192">유니코드 표준, 버전 6.3.0</span><span class="sxs-lookup"><span data-stu-id="3723c-192">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|  

<span data-ttu-id="3723c-193">.NET core에서는 정렬 및 비교 연산에 기반한 [유니코드 표준 버전 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-193">In .NET Core, sorting and comparison operations are based on [Version 8.0.0 of the Unicode Standard](https://www.unicode.org/versions/Unicode8.0.0/).</span></span>

<a name="EmbeddedNulls"></a>   
## <a name="strings-and-embedded-null-characters"></a><span data-ttu-id="3723c-194">문자열 및 포함 된 null 문자</span><span class="sxs-lookup"><span data-stu-id="3723c-194">Strings and embedded null characters</span></span>  
 <span data-ttu-id="3723c-195">.NET Framework에는 <xref:System.String> 개체 계산에 포함 된 문자열의 길이 포함 된 null 문자를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-195">In the .NET Framework, a <xref:System.String> object can include embedded null characters, which count as a part of the string's length.</span></span> <span data-ttu-id="3723c-196">C 및 c + +와 같은 일부 언어에서 null 문자를 문자열의 끝을 나타냅니다. 그러나 문자열의 일부로 간주 되지 않습니다 하 고 문자열의 길이의 일부로 계산 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-196">However, in some languages such as C and C++, a null character indicates the end of a string;it is not considered a part of the string and is not counted as part of the string's length.</span></span> <span data-ttu-id="3723c-197">즉, 문자열에 대 한 C 및 c + + 프로그래머 또는 C 또는 c + +로 작성 된 라이브러리 적합할 수 있는 다음과 같은 일반적인 가정을 유효 하지 않음을 반드시 적용할 때 <xref:System.String> 개체:</span><span class="sxs-lookup"><span data-stu-id="3723c-197">This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to <xref:System.String> objects:</span></span>  
  
-   <span data-ttu-id="3723c-198">값을 반환 합니다 `strlen` 또는 `wcslen` 함수를 반드시 같지 않습니다 <xref:System.String.Length%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-198">The value returned by the `strlen` or `wcslen` functions does not necessarily equal <xref:System.String.Length%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="3723c-199">만든 문자열을 `strcpy_s` 또는 `wcscpy_s` 함수에서 생성 된 문자열을 반드시 동일 하지 않습니다는 <xref:System.String.Copy%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-199">The string created by the `strcpy_s` or `wcscpy_s` functions is not necessarily identical to the string created by the <xref:System.String.Copy%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="3723c-200">인스턴스화하는 네이티브 C 및 c + + 코드를 확인 해야 <xref:System.String> 개체 및 전달 되는 코드 <xref:System.String> 플랫폼을 통해 개체 호출, 포함 된 null 문자는 문자열의 끝을 표시는 가정 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="3723c-200">You should ensure that native C and C++ code that instantiates <xref:System.String> objects, and code that is passed <xref:System.String> objects through platform invoke, don't assume that an embedded null character marks the end of the string.</span></span>  
  
 <span data-ttu-id="3723c-201">또한 문자열에 포함 된 null 문자 및 문자열 정렬 (또는 비교) 하는 경우 문자열을 검색할 때 다르게 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-201">Embedded null characters in a string are also treated differently when a string is sorted (or compared) and when a string is searched.</span></span> <span data-ttu-id="3723c-202">Null 문자는 두 문자열을 고정 문화권을 사용한 비교를 포함 하 여 문화권 구분 비교를 수행 하는 경우 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-202">Null characters are ignored when performing culture-sensitive comparisons between two strings, including comparisons using the invariant culture.</span></span> <span data-ttu-id="3723c-203">서 수 비교를 서 수 또는 대/소문자에 대해서만 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-203">They are considered only for ordinal or case-insensitive ordinal comparisons.</span></span> <span data-ttu-id="3723c-204">반면에 포함 된 null 문자를 항상 고려와 같은 메서드를 사용 하 여 문자열을 검색 하는 경우 <xref:System.String.Contains%2A>하십시오 <xref:System.String.StartsWith%2A>, 및 <xref:System.String.IndexOf%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-204">On the other hand, embedded null characters are always considered when searching a string with methods such as <xref:System.String.Contains%2A>, <xref:System.String.StartsWith%2A>, and <xref:System.String.IndexOf%2A>.</span></span>  
  
<a name="Indexes"></a>   
## <a name="strings-and-indexes"></a><span data-ttu-id="3723c-205">문자열 및 인덱스</span><span class="sxs-lookup"><span data-stu-id="3723c-205">Strings and indexes</span></span>  
 <span data-ttu-id="3723c-206">인덱스의 위치를는 <xref:System.Char> (유니코드 문자가 아님)에서 개체를 <xref:System.String>입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-206">An index is the position of a <xref:System.Char> object (not a Unicode character) in a <xref:System.String>.</span></span> <span data-ttu-id="3723c-207">인덱스는 인덱스 위치 0에 해당 하는 문자열의 첫 번째 위치에서 시작 하는 음수가 아닌 숫자 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-207">An index is a zero-based, nonnegative number that starts from the first position in the string, which is index position zero.</span></span> <span data-ttu-id="3723c-208">검색 방법의 수와 같은 <xref:System.String.IndexOf%2A> 및 <xref:System.String.LastIndexOf%2A>, 문자의 인덱스를 반환 하거나 문자열 인스턴스에서 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-208">A number of search methods, such as <xref:System.String.IndexOf%2A> and <xref:System.String.LastIndexOf%2A>, return the index of a character or substring in the string instance.</span></span>  
  
 <span data-ttu-id="3723c-209">합니다 <xref:System.String.Chars%2A> 속성에 액세스할 수 있게 개별 <xref:System.Char> 문자열의 인덱스 위치에 의해 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-209">The <xref:System.String.Chars%2A> property lets you access individual <xref:System.Char> objects by their index position in the string.</span></span> <span data-ttu-id="3723c-210">때문에 합니다 <xref:System.String.Chars%2A> 속성이 (Visual Basic)의 기본 속성 또는 인덱서 (C#), 개별에 액세스할 수 있습니다 <xref:System.Char> 다음과 같은 코드를 사용 하 여 문자열에서 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-210">Because the <xref:System.String.Chars%2A> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <xref:System.Char> objects in a string by using code such as the following.</span></span> <span data-ttu-id="3723c-211">이 코드에서는 공백이 나 문장 부호 문자 문자열이 단어의 개수를 결정 하는 문자열에서 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-211">This code looks for white space or punctuation characters in a string to determine how many words the string contains.</span></span>  
  
 [!code-cpp[System.String.Class#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index1.cpp#4)]
 [!code-csharp[System.String.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index1.cs#4)]
 [!code-vb[System.String.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index1.vb#4)]  
  
 <span data-ttu-id="3723c-212">때문에 <xref:System.String> 구현 클래스를 <xref:System.Collections.IEnumerable> 인터페이스를 반복할 수 있습니다도 <xref:System.Char> 를 사용 하 여 문자열에서 개체를 `foreach` 다음 예제와 같이 구문.</span><span class="sxs-lookup"><span data-stu-id="3723c-212">Because the <xref:System.String> class implements the <xref:System.Collections.IEnumerable> interface, you can also iterate through the <xref:System.Char> objects in a string by using a `foreach` construct, as the following example shows.</span></span>  
  
 [!code-cpp[System.String.Class#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index2.cpp#5)]
 [!code-csharp[System.String.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index2.cs#5)]
 [!code-vb[System.String.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index2.vb#5)]  
  
 <span data-ttu-id="3723c-213">연속 되는 인덱스 값 서로 다를 수 연속 유니코드 문자를 유니코드 문자 수 인코딩된 개 이상의 있으므로 <xref:System.Char> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-213">Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <xref:System.Char> object.</span></span> <span data-ttu-id="3723c-214">특히, 문자열에 기본 문자 뒤에 하나 이상의 조합 문자 또는 서로게이트 쌍에 의해 형성 된 텍스트 단위의 여러 문자를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-214">In particular, a string may contain multi-character units of text that are formed by a base character followed by one or more combining characters or by surrogate pairs.</span></span> <span data-ttu-id="3723c-215">대신 유니코드 문자로 작업 해야 <xref:System.Char> 개체를 사용 합니다 <xref:System.Globalization.StringInfo?displayProperty=nameWithType> 및 <xref:System.Globalization.TextElementEnumerator> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-215">To work with Unicode characters instead of <xref:System.Char> objects, use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> and <xref:System.Globalization.TextElementEnumerator> classes.</span></span> <span data-ttu-id="3723c-216">다음 예제에서는 작동 하는 코드 간의 차이점을 보여 줍니다. <xref:System.Char> 개체 및 유니코드 문자를 사용 하 여 작동 하는 코드입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-216">The following example illustrates the difference between code that works with <xref:System.Char> objects and code that works with Unicode characters.</span></span> <span data-ttu-id="3723c-217">문자 또는 문장의 각 단어의 텍스트 요소 수를 비교합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-217">It compares the number of characters or text elements in each word of a sentence.</span></span> <span data-ttu-id="3723c-218">문자열 기본 문자와 조합 문자 뒤에 두 개의 시퀀스를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-218">The string includes two sequences of a base character followed by a combining character.</span></span>  
  
 [!code-cpp[System.String.Class#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index3.cpp#6)]
 [!code-csharp[System.String.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index3.cs#6)]
 [!code-vb[System.String.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index3.vb#6)]  
  
 <span data-ttu-id="3723c-219">이 예제를 사용 하 여 텍스트 요소를 사용 하 여 작동 합니다 <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType> 메서드 및 <xref:System.Globalization.TextElementEnumerator> 문자열의 모든 텍스트 요소를 열거 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-219">This example works with text elements by using the <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType> method and the <xref:System.Globalization.TextElementEnumerator> class to enumerate all the text elements in a string.</span></span> <span data-ttu-id="3723c-220">호출 하 여 각 텍스트 요소의 시작 하는 인덱스를 포함 하는 배열을 검색할 수도 있습니다는 <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-220">You can also retrieve an array that contains the starting index of each text element by calling the <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="3723c-221">개별이 아닌 텍스트의 단위를 사용 하는 방법에 대 한 자세한 내용은 <xref:System.Char> 값, 참조는 <xref:System.Globalization.StringInfo> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-221">For more information about working with units of text rather than individual <xref:System.Char> values, see the <xref:System.Globalization.StringInfo> class.</span></span>  
  
<a name="Nulls"></a>   
## <a name="null-strings-and-empty-strings"></a><span data-ttu-id="3723c-222">Null 문자열 및 빈 문자열</span><span class="sxs-lookup"><span data-stu-id="3723c-222">Null strings and empty strings</span></span>  
 <span data-ttu-id="3723c-223">선언 되었지만 값 할당 되지 않았습니다 하는 문자열은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-223">A string that has been declared but has not been assigned a value is `null`.</span></span> <span data-ttu-id="3723c-224">문자열에서 메서드를 호출 하는 동안 throw 된 <xref:System.NullReferenceException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-224">Attempting to call methods on that string throws a <xref:System.NullReferenceException>.</span></span> <span data-ttu-id="3723c-225">Null 문자열을 문자열 값이 빈 문자열인 경우와 다릅니다. "" 또는 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-225">A null string is different from an empty string, which is a string whose value is "" or <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-226">일부 경우에는 예외를 throw 메서드 호출에서 인수로 null 문자열 또는 빈 문자열을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-226">In some cases, passing either a null string or an empty string as an argument in a method call throws an exception.</span></span> <span data-ttu-id="3723c-227">예를 들어, null 문자열을 전달 합니다 <xref:System.Int32.Parse%2A?displayProperty=nameWithType> 메서드가 throw를 <xref:System.ArgumentNullException>, throw 빈 문자열을 전달 하는 <xref:System.FormatException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-227">For example, passing a null string to the <xref:System.Int32.Parse%2A?displayProperty=nameWithType> method throws an <xref:System.ArgumentNullException>, and passing an empty string throws a <xref:System.FormatException>.</span></span> <span data-ttu-id="3723c-228">다른 경우에는 null 문자열 또는 빈 문자열 메서드 인수 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-228">In other cases, a method argument can be either a null string or an empty string.</span></span> <span data-ttu-id="3723c-229">예를 들어, 제공 하는 경우는 <xref:System.IFormattable> 일반 ("G") 서식 지정자를 사용 하 여 null 문자열 및 빈 문자열을 모두 같게 하려는 클래스의 구현입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-229">For example, if you are providing an <xref:System.IFormattable> implementation for a class, you want to equate both a null string and an empty string with the general ("G") format specifier.</span></span>  
  
 <span data-ttu-id="3723c-230">합니다 <xref:System.String> 문자열 인지 여부를 테스트할 수 있도록 하는 다음 두 가지 편의 메서드를 포함 하는 클래스 `null` 또는 빈:</span><span class="sxs-lookup"><span data-stu-id="3723c-230">The <xref:System.String> class includes the following two convenience methods that enable you to test whether a string is `null` or empty:</span></span>  
  
-   <span data-ttu-id="3723c-231"><xref:System.String.IsNullOrEmpty%2A>를 문자열 중 하나 인지를 나타내는 `null` 와 같은지를 <xref:System.String.Empty?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-231"><xref:System.String.IsNullOrEmpty%2A>, which indicates whether a string is either `null` or is equal to  <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-232">이 메서드는 다음과 같은 코드를 사용할 필요를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-232">This method eliminates the need to use code such as the following:</span></span>  
  
     [!code-cpp[System.String.Class.Null#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#1)]
     [!code-csharp[System.String.Class.Null#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#1)]
     [!code-vb[System.String.Class.Null#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#1)]  
  
-   <span data-ttu-id="3723c-233"><xref:System.String.IsNullOrWhiteSpace%2A>를 문자열 인지 여부를 나타내는 `null`, 같음 <xref:System.String.Empty?displayProperty=nameWithType>, 모두 공백 문자로 구성 되어 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-233"><xref:System.String.IsNullOrWhiteSpace%2A>, which indicates whether a string is `null`, equals <xref:System.String.Empty?displayProperty=nameWithType>, or consists exclusively of white-space characters.</span></span> <span data-ttu-id="3723c-234">이 메서드는 다음과 같은 코드를 사용할 필요를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-234">This method eliminates the need to use code such as the following:</span></span>  
  
     [!code-cpp[System.String.Class.Null#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#2)]
     [!code-csharp[System.String.Class.Null#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#2)]
     [!code-vb[System.String.Class.Null#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#2)]  
  
 <span data-ttu-id="3723c-235">다음 예제에서는 합니다 <xref:System.String.IsNullOrEmpty%2A> 의 메서드를 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 사용자 지정 구현의 `Temperature` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-235">The following example uses the <xref:System.String.IsNullOrEmpty%2A> method in the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation of a custom `Temperature` class.</span></span> <span data-ttu-id="3723c-236">메서드는 "G", "C", "F" 및 "K" 형식 문자열을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-236">The method supports the "G", "C", "F", and "K" format strings.</span></span> <span data-ttu-id="3723c-237">형식 문자열이 비어 또는 형식 문자열 값인 경우 `null` 전달 되는 메서드를 "G" 형식 문자열에 해당 값을 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-237">If an empty format string or a format string whose value is `null` is passed to the method, its value is changed to the "G" format string.</span></span>  
  
 [!code-cpp[System.String.Class.Null#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#3)]
 [!code-csharp[System.String.Class.Null#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#3)]
 [!code-vb[System.String.Class.Null#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#3)]  
  
<a name="Immutability"></a>   
## <a name="immutability-and-the-stringbuilder-class"></a><span data-ttu-id="3723c-238">불변성 및 StringBuilder 클래스</span><span class="sxs-lookup"><span data-stu-id="3723c-238">Immutability and the StringBuilder class</span></span>  
 <span data-ttu-id="3723c-239"><xref:System.String> 개체를 변경할 수 없는 호출 (읽기 전용)를 만든 후 값을 수정할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-239">A <xref:System.String> object is called immutable (read-only), because its value cannot be modified after it has been created.</span></span> <span data-ttu-id="3723c-240">수정 하는 메서드를 <xref:System.String> 개체는 실제로 새 반환 <xref:System.String> 수정을 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-240">Methods that appear to modify a <xref:System.String> object actually return a new <xref:System.String> object that contains the modification.</span></span>  
  
 <span data-ttu-id="3723c-241">문자열을 변경할 수 없기 때문에 추가 또는 단일 문자열에는 성능이 크게 저하 정확한 수를 표시 하는 삭제를 수행 하는 문자열 조작 루틴 반복 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-241">Because strings are immutable, string manipulation routines that perform repeated additions or deletions to what appears to be a single string can exact a significant performance penalty.</span></span> <span data-ttu-id="3723c-242">예를 들어, 다음 코드는 1000 ~ 0x052F 0x0001 범위의 문자를 사용 하 여 문자열을 만들려면 난수 생성기를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-242">For example, the following code uses a random number generator to create a string with 1000 characters in the range 0x0001 to 0x052F.</span></span> <span data-ttu-id="3723c-243">문자열 연결 이라는 기존 문자열에 새 문자를 추가 하는 데 코드 보이지만 `str`를 실제로 만드는 새 <xref:System.String> 각 연결 작업에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-243">Although the code appears to use string concatenation to append a new character to the existing string named `str`, it actually creates a new <xref:System.String> object for each concatenation operation.</span></span>  
  
 [!code-cpp[System.String.Class#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder1.cpp#15)]
 [!code-csharp[System.String.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable.cs#15)]
 [!code-vb[System.String.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable.vb#15)]  
  
 <span data-ttu-id="3723c-244">사용할 수는 <xref:System.Text.StringBuilder> 대신 클래스는 <xref:System.String> 문자열의 값에 대 한 여러 변경 하는 작업에 대 한 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-244">You can use the <xref:System.Text.StringBuilder> class instead of the <xref:System.String> class for operations that make multiple changes to the value of a string.</span></span> <span data-ttu-id="3723c-245">인스턴스와 달리 합니다 <xref:System.String> 클래스 <xref:System.Text.StringBuilder> 개체는 변경할 수, 연결, 추가 또는 문자열에서 부분 문자열을 삭제 작업을 단일 문자열에 대해 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-245">Unlike instances of the <xref:System.String> class, <xref:System.Text.StringBuilder> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string.</span></span> <span data-ttu-id="3723c-246">값을 수정 했으면 하는 경우는 <xref:System.Text.StringBuilder> 개체를 호출할 수 있습니다 해당 <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> 를 문자열로 변환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-246">When you have finished modifying the value of a <xref:System.Text.StringBuilder> object, you can call its <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> method to convert it to a string.</span></span> <span data-ttu-id="3723c-247">다음 예제에서는 대체 합니다 <xref:System.String> 0x052F 0x0001로 범위에서 임의의 문자 1000을 연결 하려면 이전 예제에서 사용을 <xref:System.Text.StringBuilder> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-247">The following example replaces the <xref:System.String> used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <xref:System.Text.StringBuilder> object.</span></span>  
  
 [!code-cpp[System.String.Class#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder2.cpp#16)]
 [!code-csharp[System.String.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable1.cs#16)]
 [!code-vb[System.String.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable1.vb#16)]  
  
<a name="CultureSensitive"></a>   
## <a name="ordinal-vs-culture-sensitive-operations"></a><span data-ttu-id="3723c-248">문화권 구분 작업 및 서 수</span><span class="sxs-lookup"><span data-stu-id="3723c-248">Ordinal vs. culture-sensitive operations</span></span>  
 <span data-ttu-id="3723c-249">멤버는 <xref:System.String> 서 수 또는 문화권 (언어) 작업을 수행 하는 클래스를 <xref:System.String> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-249">Members of the <xref:System.String> class perform either ordinal or culture-sensitive (linguistic) operations on a <xref:System.String> object.</span></span> <span data-ttu-id="3723c-250">각각의 숫자 값에는 서 수이 연산은 <xref:System.Char> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-250">An ordinal operation acts on the numeric value of each <xref:System.Char> object.</span></span> <span data-ttu-id="3723c-251">값에 문화권 구분 작업을 수행 합니다 <xref:System.String> 개체 및는 문화권별 대/소문자 구분, 정렬, 형식 및 계정에 규칙을 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-251">A culture-sensitive operation acts on the value of the <xref:System.String> object, and takes culture-specific casing, sorting, formatting, and parsing rules into account.</span></span> <span data-ttu-id="3723c-252">문화권 구분 작업을 명시적으로 선언 된 문화권 이나 암시적 현재 문화권의 컨텍스트에서 실행합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-252">Culture-sensitive operations execute in the context of an explicitly declared culture or the implicit current culture.</span></span> <span data-ttu-id="3723c-253">동일한 문자열에 수행 하는 경우 두 종류의 작업에서 매우 다른 결과 생성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-253">The two kinds of operations can produce very different results when they are performed on the same string.</span></span>  
  
 <span data-ttu-id="3723c-254">.NET Framework 고정 문화권을 사용 하 여 문화권을 구분 하지 않는 언어적 문자열 작업도 지원 (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>), 영어 영역의 독립의 culture 설정을 기준으로 하는 느슨하게 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-254">The .NET Framework also supports culture-insensitive linguistic string operations by using the invariant culture (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>), which is loosely based on the culture settings of the English language independent of region.</span></span> <span data-ttu-id="3723c-255">달리 <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> 설정, 고정 문화권의 설정 및.NET Framework의 버전에 시스템에 시스템에서 단일 컴퓨터에서 일관성을 유지 하도록 보장 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-255">Unlike other <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of the .NET Framework.</span></span> <span data-ttu-id="3723c-256">고정 문화권은 대기 모든 문화권에서 문자열 비교의 안정성을 보장 하는 블랙 박스 형태의 표시 및 순서 지정 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-256">The invariant culture can be seen as a kind of black box that ensures stability of string comparisons and ordering across all cultures.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3723c-257">응용 프로그램 파일 이름과 같은 기호 식별자에 대 한 보안 결정을 내리는 또는 명명 된 파이프 하는 경우, XML 파일에 텍스트 기반 데이터와 같은 지속형된 데이터에 대 한 작업 대신 문화권 구분 비교는 서 수 비교를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-257">If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or about persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison.</span></span> <span data-ttu-id="3723c-258">서 수 비교를 문자를 비교의 이진 값에 따라서만 달라 집니다 하지만 문화권 구분 비교를 문화권에 따라 다른 결과 실제로 생성 수 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-258">This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3723c-259">형식의 매개 변수가 있는 오버 로드를 포함 하는 문자열 작업을 수행 하는 대부분의 메서드가 <xref:System.StringComparison>, 메서드는 서 수 또는 문화권 구분 작업을 수행 하는지 여부를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-259">Most methods that perform string operations include an overload that has a parameter of type <xref:System.StringComparison>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation.</span></span> <span data-ttu-id="3723c-260">일반적으로 지우기 호출 메서드의 의도 확인 합니다.이 오버 로드를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-260">In general, you should call this overload to make the intent of your method call clear.</span></span> <span data-ttu-id="3723c-261">모범 사례 및 문자열의 서 수 및 문화권 구분 작업을 사용 하기 위한 지침을 참조 하세요 [를 사용 하 여 문자열에 대 한 모범 사례](~/docs/standard/base-types/best-practices-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-261">For best practices and guidance for using ordinal and culture-sensitive operations on strings, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="3723c-262">에 대 한 작업 [대/소문자 구분](#casing)를 [구문 분석 및 서식 지정](#parsing)를 [비교 및 정렬](#comparison), 및 [같은지 테스트](#equality) 수 두 서 수 또는 문화권을 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-262">Operations for [casing](#casing), [parsing and formatting](#parsing), [comparison and sorting](#comparison), and [testing for equality](#equality) can be either ordinal or culture-sensitive.</span></span> <span data-ttu-id="3723c-263">다음 섹션에서는 각 범주의 작업을 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-263">The following sections discuss each category of operation.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="3723c-264">지우기 호출 메서드의 의도 메서드 오버 로드를 호출 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-264">You should always call a method overload that makes the intent of your method call clear.</span></span> <span data-ttu-id="3723c-265">호출 하는 대신에 예를 들어, 합니다 <xref:System.String.Compare%28System.String%2CSystem.String%29> 현재 문화권의 규칙을 사용 하 여 두 문자열의 문화권 구분 비교를 수행 하는 방법 호출 해야 합니다 <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> 값을 사용 하 여 메서드 <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> 에 대 한는 `comparisonType` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-265">For example, instead of calling the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with a value of <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> for the `comparisonType` argument.</span></span> <span data-ttu-id="3723c-266">자세한 내용은 [문자열 사용에 대한 모범 사례](~/docs/standard/base-types/best-practices-strings.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-266">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
<a name="casing"></a>   
### <a name="casing"></a><span data-ttu-id="3723c-267">대/소문자 구분</span><span class="sxs-lookup"><span data-stu-id="3723c-267">Casing</span></span>  
 <span data-ttu-id="3723c-268">대/소문자 규칙 확인 된 유니코드 문자의 대/소문자를 변경 하는 방법 예를 들어 대문자 소문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-268">Casing rules determine how to change the capitalization of a Unicode character; for example, from lowercase to uppercase.</span></span> <span data-ttu-id="3723c-269">종종 작업을 대/소문자 구분 문자열 비교 전에 수행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-269">Often, a casing operation is performed before a string comparison.</span></span> <span data-ttu-id="3723c-270">예를 들어, 다른 대문자 문자열을 사용 하 여 비교할 수 있도록 하는 문자열을 대문자로 변환 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-270">For example, a string might be converted to uppercase so that it can be compared with another uppercase string.</span></span> <span data-ttu-id="3723c-271">호출 하 여 소문자로 문자열의 문자를 변환할 수 있습니다는 <xref:System.String.ToLower%2A> 나 <xref:System.String.ToLowerInvariant%2A> 메서드를 호출 하 여 대문자로으로 변환할 수는 <xref:System.String.ToUpper%2A> 또는 <xref:System.String.ToUpperInvariant%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-271">You can convert the characters in a string to lowercase by calling the <xref:System.String.ToLower%2A> or <xref:System.String.ToLowerInvariant%2A> method, and you can convert them to uppercase by calling the <xref:System.String.ToUpper%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="3723c-272">또한 사용할 수 있습니다는 <xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=nameWithType> 문자열 첫 글자를 대문자로 변환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-272">In addition, you can use the <xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=nameWithType> method to convert a string to title case.</span></span>  
  
 <span data-ttu-id="3723c-273">대/소문자 구분 작업은 현재 문화권, 지정된 된 문화권 이나 고정 문화권의 규칙에 기반 할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-273">Casing operations can be based on the rules of the current culture, a specified culture, or the invariant culture.</span></span> <span data-ttu-id="3723c-274">대/소문자 매핑 사용 하는 문화권에 따라 달라질 수 있으므로 대/소문자 구분 작업의 결과 문화권에 따라 달라질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-274">Because case mappings can vary depending on the culture used, the result of casing operations can vary based on culture.</span></span> <span data-ttu-id="3723c-275">실제 대/소문자 차이 세 가지 종류입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-275">The actual differences in casing are of three kinds:</span></span>  
  
-   <span data-ttu-id="3723c-276">LATIN CAPITAL LETTER I의 대/소문자 매핑에의 차이점 (U + 0049), 라틴 문자 작은 문자 I (라는)를 LATIN CAPITAL LETTER I (U + 0130), 위에서 점 및 라틴 작은 문자 점 없는 I를 사용 하 여 (U + 0131).</span><span class="sxs-lookup"><span data-stu-id="3723c-276">Differences in the case mapping of LATIN CAPITAL LETTER I (U+0049), LATIN SMALL LETTER I (U+0069), LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130), and LATIN SMALL LETTER DOTLESS I (U+0131).</span></span> <span data-ttu-id="3723c-277">TR-TR (터키어 (터키)) 및 Latn-AZ-AZ (아제르바이잔, 라틴 문자) 문화권 및 tr, az, az Latn 중립 문화권에 해당 하는 라틴어 대문자 I의 소문자 라틴어 작은 문자 점 없는 I, 이며 라틴어 작은 문자 I의 대문자에 해당 라틴어 대문자 I 점 위를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-277">In the tr-TR (Turkish (Turkey)) and az-Latn-AZ (Azerbaijan, Latin) cultures, and in the tr, az, and az-Latn neutral cultures, the lowercase equivalent of LATIN CAPITAL LETTER I is LATIN SMALL LETTER DOTLESS I, and the uppercase equivalent of LATIN SMALL LETTER I is LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span> <span data-ttu-id="3723c-278">다른 모든 문화권에서 라틴 문자 작은 문자 I 및 LATIN CAPITAL LETTER 필자는 대 / 소문자 해당 하는 고정 문화권을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-278">In all other cultures, including the invariant culture, LATIN SMALL LETTER I and LATIN CAPITAL LETTER I are lowercase and uppercase equivalents.</span></span>  
  
     <span data-ttu-id="3723c-279">다음 예제에서는 어떻게 설계 하는 문자열 비교를 파일 시스템 액세스를 방지 하기 위해는 대/소문자 문화권 구분 비교를 사용 하는 경우 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-279">The following example demonstrates how a string comparison designed to prevent file system access can fail if it relies on a culture-sensitive casing comparison.</span></span> <span data-ttu-id="3723c-280">(고정 문화권의 대/소문자 규칙을 사용 합니다.)</span><span class="sxs-lookup"><span data-stu-id="3723c-280">(The casing conventions of the invariant culture should have been used.)</span></span>  
  
     [!code-csharp[System.String.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case2.cs#17)]
     [!code-vb[System.String.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case2.vb#17)]  
  
-   <span data-ttu-id="3723c-281">대/소문자 매핑 고정 문화권 및 다른 모든 문화권 간의 차이점입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-281">Differences in case mappings between the invariant culture and all other cultures.</span></span> <span data-ttu-id="3723c-282">이러한 경우 고정 문화권의 대/소문자 규칙을 사용 하 여 문자를 대문자 또는 소문자를 변경 하려면 같은 문자를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-282">In these cases, using the casing rules of the invariant culture to change a character to uppercase or lowercase returns the same character.</span></span> <span data-ttu-id="3723c-283">다른 모든 문화권에 다른 문자를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-283">For all other cultures, it returns a different character.</span></span> <span data-ttu-id="3723c-284">일부 영향을 받는 문자는 다음 표에 나열 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-284">Some of the affected characters are listed in the following table.</span></span>  
  
    |<span data-ttu-id="3723c-285">문자</span><span class="sxs-lookup"><span data-stu-id="3723c-285">Character</span></span>|<span data-ttu-id="3723c-286">로 변경 하는 경우</span><span class="sxs-lookup"><span data-stu-id="3723c-286">If changed to</span></span>|<span data-ttu-id="3723c-287">반환 값</span><span class="sxs-lookup"><span data-stu-id="3723c-287">Returns</span></span>|  
    |---------------|-------------------|-------------|  
    |<span data-ttu-id="3723c-288">미크론 기호 (U + 00B5)</span><span class="sxs-lookup"><span data-stu-id="3723c-288">MICRON SIGN (U+00B5)</span></span>|<span data-ttu-id="3723c-289">대문자</span><span class="sxs-lookup"><span data-stu-id="3723c-289">Uppercase</span></span>|<span data-ttu-id="3723c-290">그리스어 대문자 MU (U +-39 C)</span><span class="sxs-lookup"><span data-stu-id="3723c-290">GREEK CAPITAL LETTER MU (U+-39C)</span></span>|  
    |<span data-ttu-id="3723c-291">라틴어 대문자 I 점이 (U + 0130) 위에</span><span class="sxs-lookup"><span data-stu-id="3723c-291">LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)</span></span>|<span data-ttu-id="3723c-292">소문자</span><span class="sxs-lookup"><span data-stu-id="3723c-292">Lowercase</span></span>|<span data-ttu-id="3723c-293">작은 라틴 문자 I (라는)</span><span class="sxs-lookup"><span data-stu-id="3723c-293">LATIN SMALL LETTER I (U+0069)</span></span>|  
    |<span data-ttu-id="3723c-294">라틴어 소문자 점 없는 I (U + 0131)</span><span class="sxs-lookup"><span data-stu-id="3723c-294">LATIN SMALL LETTER DOTLESS I (U+0131)</span></span>|<span data-ttu-id="3723c-295">대문자</span><span class="sxs-lookup"><span data-stu-id="3723c-295">Uppercase</span></span>|<span data-ttu-id="3723c-296">라틴어 대문자 I (U + 0049)</span><span class="sxs-lookup"><span data-stu-id="3723c-296">LATIN CAPITAL LETTER I (U+0049)</span></span>|  
    |<span data-ttu-id="3723c-297">영문 소문자 긴 S (U + 017F)</span><span class="sxs-lookup"><span data-stu-id="3723c-297">LATIN SMALL LETTER LONG S (U+017F)</span></span>|<span data-ttu-id="3723c-298">대문자</span><span class="sxs-lookup"><span data-stu-id="3723c-298">Uppercase</span></span>|<span data-ttu-id="3723c-299">라틴어 대문자 S (U + 0053)</span><span class="sxs-lookup"><span data-stu-id="3723c-299">LATIN CAPITAL LETTER S (U+0053)</span></span>|  
    |<span data-ttu-id="3723c-300">파이프 기호 있는 작은 문자 Z로 영문 대문자 D (U + 01C 5)</span><span class="sxs-lookup"><span data-stu-id="3723c-300">LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON (U+01C5)</span></span>|<span data-ttu-id="3723c-301">소문자</span><span class="sxs-lookup"><span data-stu-id="3723c-301">Lowercase</span></span>|<span data-ttu-id="3723c-302">파이프 기호 있는 DZ 영문 소문자 (U + 01C 6)</span><span class="sxs-lookup"><span data-stu-id="3723c-302">LATIN SMALL LETTER DZ WITH CARON (U+01C6)</span></span>|  
    |<span data-ttu-id="3723c-303">그리스어 YPOGEGRAMMENI 결합 (U + 0345)</span><span class="sxs-lookup"><span data-stu-id="3723c-303">COMBINING GREEK YPOGEGRAMMENI (U+0345)</span></span>|<span data-ttu-id="3723c-304">대문자</span><span class="sxs-lookup"><span data-stu-id="3723c-304">Uppercase</span></span>|<span data-ttu-id="3723c-305">그리스어 대문자 IOTA (U + 0399)</span><span class="sxs-lookup"><span data-stu-id="3723c-305">GREEK CAPITAL LETTER IOTA (U+0399)</span></span>|  
  
-   <span data-ttu-id="3723c-306">ASCII 문자 범위에서 두 문자의 소문자가 혼합 쌍의 대/소문자 매핑 차이입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-306">Differences in case mappings of two-letter mixed-case pairs in the ASCII character range.</span></span> <span data-ttu-id="3723c-307">대부분의 문화권에서 두 문자의 소문자가 혼합 쌍은 해당 두 문자의 대문자 또는 소문자 쌍과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-307">In most cultures, a two-letter mixed-case pair is equal to the equivalent two-letter uppercase or lowercase pair.</span></span> <span data-ttu-id="3723c-308">이 아니므로 다음 문화에 다음 두 문자 쌍에 대 한 true 각각의 경우에서에 digraph 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-308">This is not true for the following two-letter pairs in the following cultures, because in each case they are compared to a digraph:</span></span>  
  
    -   <span data-ttu-id="3723c-309">"lJ" 및 "nJ" HR-HR (크로아티아어 (크로아티아)) 문화권에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-309">"lJ" and "nJ" in the hr-HR (Croatian (Croatia)) culture.</span></span>  
  
    -   <span data-ttu-id="3723c-310">"cH" sk-SK (슬로바키아어 (슬로바키아)) 문화권에 CS-CZ (체코어 (체코 공화국)).</span><span class="sxs-lookup"><span data-stu-id="3723c-310">"cH" in the cs-CZ (Czech (Czech Republic)) and sk-SK (Slovak (Slovakia)) cultures.</span></span>  
  
    -   <span data-ttu-id="3723c-311">"aA" DA-DK (덴마크어 (덴마크)) 문화권에서.</span><span class="sxs-lookup"><span data-stu-id="3723c-311">"aA" in the da-DK (Danish (Denmark)) culture.</span></span>  
  
    -   <span data-ttu-id="3723c-312">"cS", "dZ", "dZS", "nY", "sZ", "tY" 및 "zS" HU-HU (헝가리어 (헝가리)) 문화권에서</span><span class="sxs-lookup"><span data-stu-id="3723c-312">"cS", "dZ", "dZS", "nY", "sZ", "tY", and "zS" in the hu-HU (Hungarian (Hungary)) culture.</span></span>  
  
    -   <span data-ttu-id="3723c-313">"cH" 및 "lL" es-es_tradnl (스페인어 (스페인, 전통 정렬)) 문화권에서.</span><span class="sxs-lookup"><span data-stu-id="3723c-313">"cH" and "lL" in the es-ES_tradnl (Spanish (Spain, Traditional Sort)) culture.</span></span>  
  
    -   <span data-ttu-id="3723c-314">"cH", "gI", "kH", "nG" "nH", "pH", "qU',"tH"및"tR"vi-VN (베트남어 (베트남)) 문화권에서.</span><span class="sxs-lookup"><span data-stu-id="3723c-314">"cH", "gI", "kH", "nG" "nH", "pH", "qU', "tH", and "tR" in the vi-VN (Vietnamese (Vietnam)) culture.</span></span>  
  
     <span data-ttu-id="3723c-315">그러나 이러한 쌍 고정된 문자열 또는 식별자에서 일반적으로 없기 때문에 이러한 쌍의 문화권 구분 비교를 만드는 문제의 상황이 발생 하는 데 평소 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-315">However, it is unusual to encounter a situation in which a culture-sensitive comparison of these pairs creates problems, because these pairs are uncommon in fixed strings or identifiers.</span></span>  
  
 <span data-ttu-id="3723c-316">다음 예제에서는 대/소문자 규칙의 문화권 문자열을 대문자로 변환 하는 경우 간의 차이점 중 일부를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-316">The following example illustrates some of the differences in casing rules between cultures when converting strings to uppercase.</span></span>  
  
 [!code-cpp[System.String.Class#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.casing.cpp#7)]
 [!code-csharp[System.String.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case1.cs#7)]
 [!code-vb[System.String.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case1.vb#7)]  
  
<a name="parsing"></a>   
### <a name="parsing-and-formatting"></a><span data-ttu-id="3723c-317">구문 분석 및 서식 지정</span><span class="sxs-lookup"><span data-stu-id="3723c-317">Parsing and formatting</span></span>  
 <span data-ttu-id="3723c-318">서식 지정 및 구문 분석은 역 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-318">Formatting and parsing are inverse operations.</span></span> <span data-ttu-id="3723c-319">서식 설정 규칙 구문 분석 규칙에는 날짜 및 시간과 같은 값으로 문자열 표현을 변환 하는 방법을 결정 하는 반면 같은 날짜 및 시간 또는 숫자 값을 문자열 표현으로 변환 하는 방법을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-319">Formatting rules determine how to convert a value, such as a date and time or a number, to its string representation, whereas parsing rules determine how to convert a string representation to a value such as a date and time.</span></span> <span data-ttu-id="3723c-320">서식 지정 및 구문 분석 규칙에는 문화권 규칙에 따라 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-320">Both formatting and parsing rules are dependent on cultural conventions.</span></span> <span data-ttu-id="3723c-321">다음 예에서는 culture 별 날짜 문자열을 해석할 때 발생할 수 있는 모호성을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-321">The following example illustrates the ambiguity that can arise when interpreting a culture-specific date string.</span></span> <span data-ttu-id="3723c-322">날짜 문자열을 생성 하는 데 사용 된 문화권의 규칙을 알고 있으면 없이 불가능 2011 년 03 월 01, 2011 년 3 월 1/및 2011/01/03 2011 년 1 월 3 일 또는 2011 년 3 월 1 표현 하는지 여부를 알아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-322">Without knowing the conventions of the culture that was used to produce a date string, it is not possible to know whether 03/01/2011, 3/1/2011, and 01/03/2011 represent January 3, 2011 or March 1, 2011.</span></span>  
  
 [!code-cpp[System.String.Class#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.format1.cpp#8)]
 [!code-csharp[System.String.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/format1.cs#8)]
 [!code-vb[System.String.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/format1.vb#8)]  
  
 <span data-ttu-id="3723c-323">마찬가지로, 다음 예제와 같이 단일 문자열을 구문 분석 작업에서 규칙이 포함 되는 문화권에 따라 서로 다른 날짜를 생성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-323">Similarly, as the following example shows, a single string can produce different dates depending on the culture whose conventions are used in the parsing operation.</span></span>  
  
 [!code-cpp[System.String.Class#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.parse1.cpp#9)]
 [!code-csharp[System.String.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/parse1.cs#9)]
 [!code-vb[System.String.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/parse1.vb#9)]  
  
<a name="comparison"></a>   
### <a name="string-comparison-and-sorting"></a><span data-ttu-id="3723c-324">문자열 비교 및 정렬</span><span class="sxs-lookup"><span data-stu-id="3723c-324">String comparison and sorting</span></span>  
 <span data-ttu-id="3723c-325">문자열 정렬 및 비교에 대 한 규칙에는 문화권 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-325">Conventions for comparing and sorting strings vary from culture to culture.</span></span> <span data-ttu-id="3723c-326">예를 들어, 정렬 순서 음성 또는 문자의 시각적 표현을 기반 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-326">For example, the sort order may be based on phonetics or on the visual representation of characters.</span></span> <span data-ttu-id="3723c-327">동아시아 언어에서는 표의 문자의 부수와 획에 따라 문자가 정렬됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-327">In East Asian languages, characters are sorted by the stroke and radical of ideographs.</span></span> <span data-ttu-id="3723c-328">언어와 문화권이 알파벳에 사용하는 순서에 따라 정렬 순서가 달라지기도 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-328">Sorting also depends on the order languages and cultures use for the alphabet.</span></span> <span data-ttu-id="3723c-329">예를 들어 덴마크어 알파벳의 "Æ" 문자는 "Z" 다음에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-329">For example, the Danish language has an "Æ" character that it sorts after "Z" in the alphabet.</span></span> <span data-ttu-id="3723c-330">또한 대/소문자 구분 또는 대/소문자를 비교 될 수 있습니다 및 일부 경우에서 대/소문자 규칙에 따라서도 문화권입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-330">In addition, comparisons can be case-sensitive or case-insensitive, and in some cases casing rules also differ by culture.</span></span> <span data-ttu-id="3723c-331">반면에 서 수 비교를 비교 하 고 문자열을 정렬 하는 경우 문자열에서 개별 문자의 유니코드 코드 포인트를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-331">Ordinal comparison, on the other hand, uses the Unicode code points of individual characters in a string when comparing and sorting strings.</span></span>  
  
 <span data-ttu-id="3723c-332">정렬 규칙을 서로 비교 하는 알파벳이 유니코드 문자 순서와 두 문자열을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-332">Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other.</span></span> <span data-ttu-id="3723c-333">예를 들어 합니다 <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> 기반으로 하는 두 문자열을 비교 하는 메서드는 <xref:System.StringComparison> 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-333">For example, the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method compares two strings based on the <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="3723c-334">매개 변수 값이 <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, 메서드 매개 변수 값이 현재 문화권의 규칙을 사용 하는 언어 비교를 수행 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>, 메서드는 서 수 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-334">If the parameter value is <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>, the method performs an ordinal comparison.</span></span> <span data-ttu-id="3723c-335">따라서 다음 예와 같이, 현재 문화권이 미국 영어, 첫 번째 호출은 <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> 메서드 (문화권 구분 비교 사용) "A", "a" 작음 되었지만 두 번째 호출 (서 수 비교 사용) 같은 방법으로 간주 "a" "A" 보다 큰 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-335">Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method (using culture-sensitive comparison) considers "a" less than "A", but the second call to the same method (using ordinal comparison) considers "a" greater than "A".</span></span>  
  
 [!code-cpp[System.String.Class#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare1.cpp#10)]
 [!code-csharp[System.String.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare1.cs#10)]
 [!code-vb[System.String.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare1.vb#10)]  
  
 <span data-ttu-id="3723c-336">.NET Framework는 word, 문자열 및 서 수 정렬 규칙을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-336">The .NET Framework supports word, string, and ordinal sort rules:</span></span>  
  
-   <span data-ttu-id="3723c-337">단어 정렬 특정 영숫자가 아닌 유니코드 문자에 특별 한 가중치가 할당 해야 할 수 있는 문자열의 문화권 구분 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-337">A word sort performs a culture-sensitive comparison of strings in which certain nonalphanumeric Unicode characters might have special weights assigned to them.</span></span> <span data-ttu-id="3723c-338">예를 들어, 하이픈 (-)는 매우 작은 가중치가 할당 "coop" 및 "co-op" 정렬된 된 목록에 나란히 표시 되도록 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-338">For example, the hyphen (-) might have a very small weight assigned to it so that "coop" and "co-op" appear next to each other in a sorted list.</span></span> <span data-ttu-id="3723c-339">목록은 <xref:System.String> 단어 정렬 규칙을 사용 하 여 두 문자열을 비교 하는 메서드를 참조 합니다 [범주별 문자열 작업](#ByCategory) 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-339">For a list of the <xref:System.String> methods that compare two strings using word sort rules, see the [String operations by category](#ByCategory) section.</span></span>  
  
-   <span data-ttu-id="3723c-340">또한 문자열 정렬 문화권 구분 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-340">A string sort also performs a culture-sensitive comparison.</span></span> <span data-ttu-id="3723c-341">이 특수 한 사례가 없습니다, 모든 영숫자 유니코드 문자를 앞으로 모든 영숫자가 아닌 기호가 있다는 점을 제외 하면에 단어 정렬 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-341">It is similar to a word sort, except that there are no special cases, and all nonalphanumeric symbols come before all alphanumeric Unicode characters.</span></span> <span data-ttu-id="3723c-342">문자열 정렬 규칙을 사용 하 여 호출 하 여 두 문자열을 비교할 수는 <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> 메서드 오버 로드의 경우는 `options` 의 값이 제공 되는 매개 변수가 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-342">Two strings can be compared using string sort rules by calling the <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> method overloads that have an `options` parameter that is supplied a value of <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-343">이.NET Framework에서는 문자열 정렬 규칙을 사용 하 여 두 문자열을 비교 하는 유일한 방법은 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-343">Note that this is the only method that the .NET Framework provides to compare two strings using string sort rules.</span></span>  
  
-   <span data-ttu-id="3723c-344">각각의 숫자 값을 기반으로 하는 문자열을 비교 하는 서 수 정렬 <xref:System.Char> 문자열에는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-344">An ordinal sort compares strings based on the numeric value of each <xref:System.Char> object in the string.</span></span> <span data-ttu-id="3723c-345">서 수 비교는 대 / 소문자 버전의 문자는 점이 다른 코드 때문에 자동으로 대/소문자 구분입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-345">An ordinal comparison is automatically case-sensitive because the lowercase and uppercase versions of a character have different code points.</span></span> <span data-ttu-id="3723c-346">그러나 대/소문자는 중요 하지 않습니다, 경우에 대/소문자를 구분 하지 않는 서 수 비교를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-346">However, if case is not important, you can specify an ordinal comparison that ignores case.</span></span> <span data-ttu-id="3723c-347">문자열을 고정 문화권을 사용 하 고 다음 결과에 서 수 비교를 수행 하 여 대문자로 변환 하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-347">This is equivalent to converting the string to uppercase by using the invariant culture and then performing an ordinal comparison on the result.</span></span> <span data-ttu-id="3723c-348">목록은 <xref:System.String> 서 수 정렬 규칙을 사용 하 여 두 문자열을 비교 하는 메서드를 참조 합니다 [범주별 문자열 작업](#ByCategory) 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-348">For a list of the <xref:System.String> methods that compare two strings using ordinal sort rules, see the [String operations by category](#ByCategory) section.</span></span>  
  
 <span data-ttu-id="3723c-349">문화권 구분 비교는 명시적 또는 암시적으로 사용 하는 모든 비교는 <xref:System.Globalization.CultureInfo> 에 지정 된 고정 문화권을 포함 하 여 개체를 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 속성.</span><span class="sxs-lookup"><span data-stu-id="3723c-349">A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <xref:System.Globalization.CultureInfo> object, including the invariant culture that is specified by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="3723c-350">암시적 문화권은 현재 문화권으로 지정 되는 <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> 고 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-350">The implicit culture is the current culture, which is specified by the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> and <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="3723c-351">영문자의 정렬 순서에서 상당한 변화는 (는 문자, 합니다 <xref:System.Char.IsLetter%2A?displayProperty=nameWithType> 속성이 반환 `true`) 문화권에 걸쳐 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-351">There is considerable variation in the sort order of alphabetic characters (that is, characters for which the <xref:System.Char.IsLetter%2A?displayProperty=nameWithType> property returns `true`) across cultures.</span></span> <span data-ttu-id="3723c-352">제공 하 여 특정 문화권의 규칙을 사용 하는 문화권 구분 비교를 지정할 수 있습니다는 <xref:System.Globalization.CultureInfo> 와 같은 개체는 문자열 비교 메서드를 <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-352">You can specify a culture-sensitive comparison that uses the conventions of a specific culture by supplying a <xref:System.Globalization.CultureInfo> object to a string comparison method such as <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>.</span></span> <span data-ttu-id="3723c-353">제공 하 여 현재 문화권의 규칙을 사용 하는 문화권 구분 비교를 지정할 수 있습니다 <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>, 또는의 모든 멤버는 <xref:System.Globalization.CompareOptions> 이외의 열거형 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> 또는 <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> 를 적절 한 오버 로드는 <xref:System.String.Compare%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-353">You can specify a culture-sensitive comparison that uses the conventions of the current culture by supplying <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>, or any member of the <xref:System.Globalization.CompareOptions> enumeration other than <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> to an appropriate overload of the <xref:System.String.Compare%2A> method.</span></span> <span data-ttu-id="3723c-354">문화권 구분 비교는 서 수 비교 하는 반면 정렬에 대 한 일반적으로 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-354">A culture-sensitive comparison is generally appropriate for sorting whereas an ordinal comparison is not.</span></span> <span data-ttu-id="3723c-355">서 수 비교는 두 문자열이 같은지 여부를 결정 하는 데 일반적으로 적절 한 (즉, id 확인에 대 한) 문화권 구분 비교는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-355">An ordinal comparison is generally appropriate for determining whether two strings are equal (that is, for determining identity) whereas a culture-sensitive comparison is not.</span></span>  
  
 <span data-ttu-id="3723c-356">다음 예제에서는 문화권 구분 및 서 수 비교 간의 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-356">The following example illustrates the difference between culture-sensitive and ordinal comparison.</span></span> <span data-ttu-id="3723c-357">이 예제에서는 세 문자열, "Apple", "æ b l e" 및 "AEble", 서 수 비교 및 DA-DK 및 EN-US 문화권의 규칙을 사용 하 여 평가 (시 기본 문화권은 각각는 <xref:System.String.Compare%2A> 메서드는).</span><span class="sxs-lookup"><span data-stu-id="3723c-357">The example evaluates three strings, "Apple", "Æble", and "AEble", using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <xref:System.String.Compare%2A> method is called).</span></span> <span data-ttu-id="3723c-358">덴마크어 "→" 문자는 개별 문자를 처리 하 고 문자에서 "Z" 뒤에 정렬 하기 때문에 문자열 "æ b l e"는 "Apple" 보다 큽니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-358">Because the Danish language treats the character "Æ" as an individual letter and sorts it after "Z" in the alphabet, the string "Æble" is greater than "Apple".</span></span> <span data-ttu-id="3723c-359">그러나 "æ b l e" 간주 되지 않습니다 "AEble" 같음 "æ b l e"를 "AEble" 보다 큰 이기도 하므로.</span><span class="sxs-lookup"><span data-stu-id="3723c-359">However, "Æble" is not considered equivalent to "AEble", so "Æble" is also greater than "AEble".</span></span> <span data-ttu-id="3723c-360">EN-US 문화권 "→" 문자를 포함 하지 않습니다 하지만 동일한 "AE" 이유 "æ b l e"는 "Apple" 보다 작지만 "AEble" 같은 설명 하는 것으로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-360">The en-US culture doesn't include the letter"Æ" but treats it as equivalent to "AE", which explains why  "Æble" is less than "Apple" but equal to "AEble".</span></span> <span data-ttu-id="3723c-361">서 수 비교는 반면에 "Apple" "AEble" 보다 큰 값으로 "æ b l e" 및 "æ b l e" 보다 작아야를 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-361">Ordinal comparison, on the other hand, considers "Apple" to be less than "Æble", and "Æble" to be greater than "AEble".</span></span>  
  
 [!code-csharp[System.String.Class#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare4.cs#21)]
 [!code-vb[System.String.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare4.vb#21)]  
  
 <span data-ttu-id="3723c-362">적절 한 정렬 또는 문자열 비교 방법을 선택 하려면 다음 일반 지침을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-362">Use the following general guidelines to choose an appropriate sorting or string comparison method:</span></span>  
  
-   <span data-ttu-id="3723c-363">문자열을 정렬할 수를 지정 하지 않고 사용자의 문화권을 기반으로 하려는 경우 현재 문화권의 규칙을 기반으로 주문할 해야 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-363">If you want the strings to be ordered based on the user's culture, you should order them based on the conventions of the current culture.</span></span> <span data-ttu-id="3723c-364">사용자의 문화권 변경 되 면 정렬 된 문자열의 순서도 그에 따라 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-364">If the user's culture changes, the order of sorted strings will also change accordingly.</span></span> <span data-ttu-id="3723c-365">예를 들어 동의어 사전 응용 프로그램을 사용자의 문화권을 기준으로 단어를 항상 정렬 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-365">For example, a thesaurus application should always sort words based on the user's culture.</span></span>  
  
-   <span data-ttu-id="3723c-366">문자열을 정렬할 수를 지정 하지 않고 특정 문화권의 규칙에 따라 하려는 경우 제공에 따라 정렬 해야 하는 <xref:System.Globalization.CultureInfo> 비교 메서드에 해당 문화권을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-366">If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <xref:System.Globalization.CultureInfo> object that represents that culture to a comparison method.</span></span> <span data-ttu-id="3723c-367">예를 들어, 학생에 게 특정 언어를 설명 하도록 응용 프로그램에서 원하는 문자열을 정렬할 익히면 해당 하는 문화권 중 하나로의 규칙에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-367">For example, in an application designed to teach students a particular language, you want strings to be ordered based on the conventions of one of the cultures that speaks that language.</span></span>  
  
-   <span data-ttu-id="3723c-368">문화권에 걸쳐 그대로 문자열의 순서를 하려는 경우에 고정 문화권의 규칙을 기준으로 정렬 하거나 서 수 비교를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-368">If you want the order of strings to remain unchanged across cultures, you should order them based on the conventions of the invariant culture or use an ordinal comparison.</span></span> <span data-ttu-id="3723c-369">예를 들어, 파일, 프로세스, 뮤텍스 이름을 구성 하는 서 수 정렬 사용 또는 명명 된 파이프 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-369">For example, you would use an ordinal sort to organize the names of files, processes, mutexes, or named pipes.</span></span>  
  
-   <span data-ttu-id="3723c-370">보안 의사 결정 (예: 사용자가 유효한 지 여부)를 포함 하는 비교를 항상 수행 해야 같음에 대 한 서 수는 테스트의 오버 로드를 호출 하 여는 <xref:System.String.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-370">For a comparison that involves a security decision (such as whether a username is valid), you should always perform an ordinal test for equality by calling an overload of the <xref:System.String.Equals%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-371">문화권 구분 정렬 및 문자열 비교에 사용 되는 규칙을 대/소문자는.NET Framework의 버전에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-371">The culture-sensitive sorting and casing rules used in string comparison depend on the version of the .NET Framework.</span></span> <span data-ttu-id="3723c-372">.NET framework에서 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 에서 실행 되는 [!INCLUDE[win8](~/includes/win8-md.md)] 유니코드 6.0 표준을 따르는 운영 체제, 정렬, 대/소문자 구분, 정규화 및 유니코드 문자 정보입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-372">In the .NET Framework [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on the [!INCLUDE[win8](~/includes/win8-md.md)] operating system, sorting, casing, normalization, and Unicode character information conforms to the Unicode 6.0 standard.</span></span> <span data-ttu-id="3723c-373">다른 운영 체제에서 유니코드 5.0 표준을 준수 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-373">On other operating systems, it conforms to the Unicode 5.0 standard.</span></span>  
  
 <span data-ttu-id="3723c-374">Word, 문자열 및 서 수 정렬 규칙에 대 한 자세한 내용은 참조는 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-374">For more information about word, string, and ordinal sort rules, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> topic.</span></span> <span data-ttu-id="3723c-375">각 규칙을 사용 하는 경우에 추가 권장 사항을 참조 하세요 [를 사용 하 여 문자열에 대 한 모범 사례](~/docs/standard/base-types/best-practices-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-375">For additional recommendations on when to use each rule, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="3723c-376">일반적으로 호출 하지 않으면 문자열 비교와 같은 메서드와 <xref:System.String.Compare%2A> 문자열의 정렬 순서를 결정 하려면 직접.</span><span class="sxs-lookup"><span data-stu-id="3723c-376">Ordinarily, you don't call string comparison methods such as <xref:System.String.Compare%2A> directly to determine the sort order of strings.</span></span> <span data-ttu-id="3723c-377">와 같은 메서드를 정렬 하 여 비교 메서드는 호출 하는 대신 <xref:System.Array.Sort%2A?displayProperty=nameWithType> 또는 <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-377">Instead, comparison methods are called by sorting methods such as <xref:System.Array.Sort%2A?displayProperty=nameWithType> or <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-378">다음 예제에서는 명시적으로 문자열 비교 메서드를 호출 하지 않고 네 가지 정렬 작업 (현재 문화권, 고정 문화권을 사용 하 여 단어 정렬, 서 수 정렬 및 고정 문화권을 사용 하 여 문자열 정렬을 사용 하 여 단어 정렬) 수행 사용할 비교 형식을 지정지 않습니다 하지만.</span><span class="sxs-lookup"><span data-stu-id="3723c-378">The following example performs four different sorting operations (word sort using the current culture, word sort using the invariant culture, ordinal sort, and string sort using the invariant culture) without explicitly calling a string comparison method, although they do specify the type of comparison to use.</span></span> <span data-ttu-id="3723c-379">각 유형의 정렬 배열에서 문자열의 고유한 순서를 생성 하는 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-379">Note that each type of sort produces a unique ordering of strings in its array.</span></span>  
  
 [!code-cpp[System.String.Class#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare2.cpp#12)]
 [!code-csharp[System.String.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare2.cs#12)]
 [!code-vb[System.String.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare2.vb#12)]  
  
> [!TIP]
>  <span data-ttu-id="3723c-380">내부적으로.net Framework culturallysensitive 문자열 비교를 지원 하기 위해 정렬 키를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-380">Internally, the.NET Framework uses sort keys to support culturallysensitive string comparison.</span></span> <span data-ttu-id="3723c-381">문자열의 각 문자에는 사전순, 대/소문자 및 분음 부호를 포함하여 여러 범주의 정렬 가중치가 적용됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-381">Each character in a string is given several categories of sort weights, including alphabetic, case, and diacritic.</span></span> <span data-ttu-id="3723c-382">정렬 키를 나타내는 <xref:System.Globalization.SortKey> 클래스, 특정 문자열에 대 한 이러한 가중치의 리포지토리를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-382">A sort key, represented by the <xref:System.Globalization.SortKey> class, provides a repository of these weights for a particular string.</span></span> <span data-ttu-id="3723c-383">앱을 많은 수의 검색 또는 정렬 문자열의 동일한 집합에 대 한 작업을 수행 하는 경우 생성 하 고 사용 되는 모든 문자열에 대 한 정렬 키를 저장 하 여 성능을 개선할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-383">If your app performs a large number of searching or sorting operations on the same set of strings, you can improve its performance by generating and storing sort keys for all the strings that it uses.</span></span> <span data-ttu-id="3723c-384">정렬 또는 비교 작업이 필요한 경우에 문자열 대신 정렬 키를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-384">When a sort or comparison operation is required, you use the sort keys instead of the strings.</span></span> <span data-ttu-id="3723c-385">자세한 내용은 <xref:System.Globalization.SortKey> 클래스를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-385">For more information, see the <xref:System.Globalization.SortKey> class.</span></span>  
  
 <span data-ttu-id="3723c-386">문자열 비교 규칙을 지정 하지 않으면, 메서드 같은 정렬 <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> 문자열에서 문화권 구분 및 대/소문자 구분 정렬을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-386">If you don't specify a string comparison convention, sorting methods such as <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> perform a culture-sensitive, case-sensitive sort on strings.</span></span> <span data-ttu-id="3723c-387">다음 예제에서는 배열에서 정렬 된 문자열의 순서에 미치는 현재 문화권을 변경 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-387">The following example illustrates how changing the current culture affects the order of sorted strings in an array.</span></span> <span data-ttu-id="3723c-388">세 문자열의 배열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-388">It creates an array of three strings.</span></span> <span data-ttu-id="3723c-389">우선 `System.Threading.Thread.CurrentThread.CurrentCulture` 속성을 "en-US"로 설정하고 <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> 메서드를 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-389">First, it sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to en-US and calls the <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3723c-390">결과 정렬 순서는 정렬 규칙 영어 (미국) 문화권을 기반으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-390">The resulting sort order is based on sorting conventions for the English (United States) culture.</span></span> <span data-ttu-id="3723c-391">다음으로 예제에서는 `System.Threading.Thread.CurrentThread.CurrentCulture` 속성을 da-DK로 설정하고 <xref:System.Array.Sort%2A?displayProperty=nameWithType> 메서드를 다시 호출합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-391">Next, the example sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to da-DK and calls the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method again.</span></span> <span data-ttu-id="3723c-392">덴마크어(덴마크)의 정렬 규칙을 사용하는 경우 결과 정렬 순서가 en-US 결과와 어떻게 다른지 확인해 봅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-392">Notice how the resulting sort order differs from the en-US results because it uses the sorting conventions for Danish (Denmark).</span></span>  
  
 [!code-csharp[Conceptual.Strings.Comparing#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.strings.comparing/cs/sort1.cs#3)]
 [!code-vb[Conceptual.Strings.Comparing#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.strings.comparing/vb/sort1.vb#3)]  
  
> [!WARNING]
>  <span data-ttu-id="3723c-393">기본 문자열 비교의 목적이 호출 해야 해당 값이 같은지 여부를 결정 하는 경우는 <xref:System.String.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-393">If your primary purpose in comparing strings is to determine whether they are equal, you should call the <xref:System.String.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3723c-394">일반적으로 사용 해야 <xref:System.String.Equals%2A> 는 서 수 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-394">Typically, you should use <xref:System.String.Equals%2A> to perform an ordinal comparison.</span></span> <span data-ttu-id="3723c-395"><xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드가 기본적으로 문자열을 정렬 하기에 적합 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-395">The <xref:System.String.Compare%2A?displayProperty=nameWithType> method is intended primarily to sort strings.</span></span>  
  
 <span data-ttu-id="3723c-396">와 같은 문자열 검색 메서드를 <xref:System.String.StartsWith%2A?displayProperty=nameWithType> 고 <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, 또한 문화권 구분 또는 서 수 문자열 비교를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-396">String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=nameWithType> and <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, also can perform culture-sensitive or ordinal string comparisons.</span></span> <span data-ttu-id="3723c-397">다음 예제에서는 서 수 및 문화권 구분 비교를 사용 하 여 차이 보여 줍니다.는 <xref:System.String.IndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-397">The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="3723c-398">현재 문화권의 영어 (미국) 문화권 구분 검색을 부분 문자열 "oe" 합자 "œ"와 일치 하도록 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-398">A culture-sensitive search in which the current culture is English (United States) considers the substring "oe" to match the ligature "œ".</span></span> <span data-ttu-id="3723c-399">검색에서 동등 하 게 사용자 지정 하이픈을 처리 하는 하이픈이 (U + 00AD)는 너비가 0 인 문자 이므로 <xref:System.String.Empty> 문자열의 시작 부분에서 일치 하는 항목을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-399">Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <xref:System.String.Empty> and finds a match at the beginning of the string.</span></span> <span data-ttu-id="3723c-400">서 수 검색, 다른 한편으로 찾지 일치 하는 두 경우 모두.</span><span class="sxs-lookup"><span data-stu-id="3723c-400">An ordinal search, on the other hand, does not find a match in either case.</span></span>  
  
 [!code-cpp[System.String.Class#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare3.cpp#13)]
 [!code-csharp[System.String.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare3.cs#13)]
 [!code-vb[System.String.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare3.vb#13)]  
  
### <a name="searching-strings"></a><span data-ttu-id="3723c-401">문자열 검색</span><span class="sxs-lookup"><span data-stu-id="3723c-401">Searching Strings</span></span>  
 <span data-ttu-id="3723c-402">와 같은 문자열 검색 메서드를 <xref:System.String.StartsWith%2A?displayProperty=nameWithType> 및 <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, 또한 문화권별으로 수행할 수 있습니다 또는 지정된 된 문자열의 서 수 문자열 비교 문자나 부분 문자열을 여부를 확인 하려면가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-402">String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=nameWithType> and <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, also can perform culture-sensitive or ordinal string comparisons to determine whether a character or substring is found in a specified string.</span></span>  
  
 <span data-ttu-id="3723c-403">에 검색 메서드는 <xref:System.String> 와 같은 개별 문자를 검색 하는 클래스를 <xref:System.String.IndexOf%2A> 메서드 또는 문자 집합 중 하나 같은 <xref:System.String.IndexOfAny%2A> 메서드를 모든 서 수 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-403">The search methods in the <xref:System.String> class that search for an individual character, such as the <xref:System.String.IndexOf%2A> method, or one of a set of characters,   such as the <xref:System.String.IndexOfAny%2A> method, all perform an ordinal search.</span></span> <span data-ttu-id="3723c-404">호출 된 문자에 대 한 문화권 구분 검색을 수행 해야 합니다는 <xref:System.Globalization.CompareInfo> 메서드와 같은 <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType> 또는 <xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-404">To perform a culture-sensitive search for a character, you must call a <xref:System.Globalization.CompareInfo> method such as <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType> or <xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-405">참고 서 수 및 문화권 구분 비교를 사용 하 여 문자에 대 한 검색 결과 매우 달라질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-405">Note that the results of searching for a character using ordinal and culture-sensitive comparison can be very different.</span></span> <span data-ttu-id="3723c-406">예를 들어 합자 "→"와 같은 미리 구성 된 유니코드 문자에 대 한 검색 (U + 00 C 6) 수 찾습니다 모든 "AE"와 같은 올바른 순서로 구성 요소 (U + 041U + 0045) 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-406">For example, a search for a precomposed Unicode character such as the ligature "Æ" (U+00C6) might match any occurrence of its components in the correct sequence, such as "AE" (U+041U+0045), depending on the culture.</span></span> <span data-ttu-id="3723c-407">다음 예제에서는 차이점을 보여 줍니다.는 <xref:System.String.IndexOf%28System.Char%29?displayProperty=nameWithType> 고 <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType> 개별 문자를 검색할 때 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-407">The following example illustrates the difference between the <xref:System.String.IndexOf%28System.Char%29?displayProperty=nameWithType> and <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType> methods when searching for an individual character.</span></span> <span data-ttu-id="3723c-408">합자 "→" (U + 00E6)가 문자열에 "항공" EN-US 문화권의 규칙을 사용 하는 경우 있지만 DA-DK 문화권의 규칙을 사용 하 여 때가 아니라 또는 서 수 비교를 수행 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="3723c-408">The ligature "æ" (U+00E6) is found in the string "aerial" when using the conventions of the en-US culture, but not when using the conventions of the da-DK culture or when performing an ordinal comparison.</span></span>  
  
 [!code-csharp[System.String.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/search1.cs#22)]
 [!code-vb[System.String.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/search1.vb#22)]  
  
 <span data-ttu-id="3723c-409">다른 한편 <xref:System.String> 검색할 문자가 아니라 문자열 검색 옵션 형식의 매개 변수를 통해 명시적으로 지정 되지 않은 경우 문화권 구분 검색을 수행 하는 메서드를 클래스 <xref:System.StringComparison>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-409">On the other hand, <xref:System.String> class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <xref:System.StringComparison>.</span></span> <span data-ttu-id="3723c-410">한 가지 예외는 <xref:System.String.Contains%2A>, 서 수 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-410">The sole exception is <xref:System.String.Contains%2A>, which performs an ordinal search.</span></span>  
  
<a name="equality"></a>   
### <a name="testing-for-equality"></a><span data-ttu-id="3723c-411">같음에 대 한 테스트</span><span class="sxs-lookup"><span data-stu-id="3723c-411">Testing for equality</span></span>  
 <span data-ttu-id="3723c-412">사용 된 <xref:System.String.Compare%2A?displayProperty=nameWithType> 정렬 순서에서 두 문자열의 관계를 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-412">Use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method to determine the relationship of two strings in the sort order.</span></span> <span data-ttu-id="3723c-413">일반적으로 문화권 구분 작업입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-413">Typically, this is a culture-sensitive operation.</span></span> <span data-ttu-id="3723c-414">반면, 호출 된 <xref:System.String.Equals%2A?displayProperty=nameWithType> 같은지 테스트 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-414">In contrast, call the <xref:System.String.Equals%2A?displayProperty=nameWithType> method to test for equality.</span></span> <span data-ttu-id="3723c-415">같음 테스트는 일반적으로 파일 시스템 경로 올바른 사용자 이름, 암호 등의 몇 가지 알려진된 문자열을 사용 하 여 사용자 입력을 비교 하기 때문에 일반적으로 서 수에 연산입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-415">Because the test for equality usually compares user input with some known string, such as a valid user name, a password, or a file system path, it is typically an ordinal operation.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="3723c-416">호출 하 여 같은지 테스트 하는 것이 불가능 합니다 <xref:System.String.Compare%2A?displayProperty=nameWithType> 메서드와 반환 값이 0 인지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-416">It is possible to test for equality by calling the <xref:System.String.Compare%2A?displayProperty=nameWithType> method and determining whether the return value is zero.</span></span> <span data-ttu-id="3723c-417">그러나이 방법은 권장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-417">However, this practice is not recommended.</span></span> <span data-ttu-id="3723c-418">두 문자열이 같은지를 확인 하려면 호출 해야 오버 로드 중 하나는 <xref:System.String.Equals%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-418">To determine whether two strings are equal, you should call one of the overloads of the <xref:System.String.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3723c-419">기본 오버 로드를 호출 되는 인스턴스 <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> 메서드 또는 정적 <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> 메서드를 두 방법 모두 포함 되므로 <xref:System.StringComparison?displayProperty=nameWithType> 비교의 형식을 명시적으로 지정 하는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-419">The preferred overload to call is either the instance <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method or the static <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, because both methods include a <xref:System.StringComparison?displayProperty=nameWithType> parameter that explicitly specifies the type of comparison.</span></span>  
  
 <span data-ttu-id="3723c-420">다음 예제에서는 같음 경우 하나를 대신 사용 해야 하는 서 수에 대 한 문화권 구분 비교를 수행 하는 위험을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-420">The following example illustrates the danger of performing a culture-sensitive comparison for equality when an ordinal one should be used instead.</span></span> <span data-ttu-id="3723c-421">이 경우 코드의 의도 "FILE://" 문자열을 사용 하 여 URL 부분에 대 한 대/소문자 구분 비교를 수행 하 여 "FILE://" 또는 "file://"로 시작 하는 Url에서 파일 시스템 액세스를 금지 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-421">In this case, the intent of the code is to prohibit file system access from URLs that begin with "FILE://" or "file://" by performing a case-insensitive comparison of the beginning of a URL with the string "FILE://".</span></span> <span data-ttu-id="3723c-422">그러나 터키어 (터키) 문화권 "file://"로 시작 하는 URL에서 사용 하 여 문화권 구분 비교를 수행 하는 경우 같음 비교가 실패할 Turkish 대문자 소문자 "i"은 "i" 대신 "I" 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-422">However, if a culture-sensitive comparison is performed using the Turkish (Turkey) culture on a URL that begins with "file://", the comparison for equality fails, because the Turkish uppercase equivalent of the lowercase "i" is "İ" instead of "I".</span></span> <span data-ttu-id="3723c-423">결과적으로, 파일 시스템 액세스 실수로 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-423">As a result, file system access is inadvertently permitted.</span></span> <span data-ttu-id="3723c-424">반면에 서 수 비교를 수행 하는 경우 같음 비교가 성공 하 고 파일 시스템 액세스가 거부 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-424">On the other hand, if an ordinal comparison is performed, the comparison for equality succeeds, and file system access is denied.</span></span>  
  
 [!code-cpp[System.String.Class#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.equals.cpp#11)]
 [!code-csharp[System.String.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/equality1.cs#11)]
 [!code-vb[System.String.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/equality1.vb#11)]  
  
<a name="Normalization"></a>   
## <a name="normalization"></a><span data-ttu-id="3723c-425">표준화</span><span class="sxs-lookup"><span data-stu-id="3723c-425">Normalization</span></span>  
 <span data-ttu-id="3723c-426">일부 유니코드 문자에 여러 표현이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-426">Some Unicode characters have multiple representations.</span></span> <span data-ttu-id="3723c-427">예를 들어, 다음 코드 지점 중 하나는 문자 "ắ"을 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-427">For example, any of the following code points can represent the letter "ắ":</span></span>  
  
-   <span data-ttu-id="3723c-428">U + 1EAF</span><span class="sxs-lookup"><span data-stu-id="3723c-428">U+1EAF</span></span>  
  
-   <span data-ttu-id="3723c-429">U + 0103 U + 0301</span><span class="sxs-lookup"><span data-stu-id="3723c-429">U+0103 U+0301</span></span>  
  
-   <span data-ttu-id="3723c-430">U + 0061 U + 0306 U + 0301</span><span class="sxs-lookup"><span data-stu-id="3723c-430">U+0061 U+0306 U+0301</span></span>  
  
 <span data-ttu-id="3723c-431">단일 문자에 대 한 여러 표현을 검색, 정렬, 일치 및 기타 작업이 복잡해 집니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-431">Multiple representations for a single character complicate searching, sorting, matching, and other string operations.</span></span>  
  
 <span data-ttu-id="3723c-432">유니코드 표준 라는 해당 하는 이진 표현에 대 한 유니코드 문자에 대 한 이진 표현을 반환 하는 정규화 프로세스를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-432">The Unicode standard defines a process called normalization that returns one binary representation of a Unicode character for any of its equivalent binary representations.</span></span> <span data-ttu-id="3723c-433">정규화에는 다양 한 규칙을 따르는 정규화 형식 이라는 다양 한 알고리즘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-433">Normalization can use several algorithms, called normalization forms, that follow different rules.</span></span> <span data-ttu-id="3723c-434">.NET Framework는 유니코드 정규화 형식 C, D, KC 및 KD를 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-434">The .NET Framework supports Unicode normalization forms C, D, KC, and KD.</span></span> <span data-ttu-id="3723c-435">문자열 같은 정규화로 표준화 되었으므로, 경우 서 수 비교를 사용 하 여 비교할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-435">When strings have been normalized to the same normalization form, they can be compared by using ordinal comparison.</span></span>  
  
 <span data-ttu-id="3723c-436">서 수 비교는 해당 유니코드 스칼라 값에 대 한 이진 비교 <xref:System.Char> 각 문자열에서 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-436">An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <xref:System.Char> objects in each string.</span></span> <span data-ttu-id="3723c-437"><xref:System.String> 클래스는 다양 한 다음을 비롯 한 서 수 비교를 수행할 수 있는 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-437">The <xref:System.String> class includes a number of methods that can perform an ordinal comparison, including the following:</span></span>  
  
-   <span data-ttu-id="3723c-438">오버 로드는 <xref:System.String.Compare%2A>, <xref:System.String.Equals%2A>, <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, <xref:System.String.IndexOf%2A>, 및 <xref:System.String.LastIndexOf%2A> 포함 하는 메서드를 <xref:System.StringComparison> 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-438">Any overload of the <xref:System.String.Compare%2A>, <xref:System.String.Equals%2A>, <xref:System.String.StartsWith%2A>,  <xref:System.String.EndsWith%2A>, <xref:System.String.IndexOf%2A>, and <xref:System.String.LastIndexOf%2A> methods that includes a <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="3723c-439">값을 제공 하는 경우 메서드는 서 수 비교를 수행 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> 또는 <xref:System.StringComparison.OrdinalIgnoreCase> 이 매개 변수에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-439">The method performs an ordinal comparison if you supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase> for this parameter.</span></span>  
  
-   <span data-ttu-id="3723c-440">오버 로드는 <xref:System.String.CompareOrdinal%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-440">The overloads of the <xref:System.String.CompareOrdinal%2A> method.</span></span>  
  
-   <span data-ttu-id="3723c-441">기본적으로 같은 서 수 비교를 사용 하는 방법 <xref:System.String.Contains%2A>, <xref:System.String.Replace%2A>, 및 <xref:System.String.Split%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-441">Methods that use ordinal comparison by default, such as <xref:System.String.Contains%2A>, <xref:System.String.Replace%2A>, and <xref:System.String.Split%2A>.</span></span>  
  
-   <span data-ttu-id="3723c-442">검색 하는 메서드를 <xref:System.Char> 값 또는 요소에 대 한는 <xref:System.Char> 문자열 인스턴스의 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-442">Methods that search for a <xref:System.Char> value or for the elements in a <xref:System.Char> array in a string instance.</span></span> <span data-ttu-id="3723c-443">이러한 메서드를 포함 <xref:System.String.IndexOf%28System.Char%29> 고 <xref:System.String.Split%28System.Char%5B%5D%29>입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-443">Such methods include <xref:System.String.IndexOf%28System.Char%29> and <xref:System.String.Split%28System.Char%5B%5D%29>.</span></span>  
  
 <span data-ttu-id="3723c-444">호출 하 여 정규화 형식 C 문자열이 정규화 되는지 여부를 확인할 수 있습니다 합니다 <xref:System.String.IsNormalized?displayProperty=nameWithType> 하거나 메서드를 호출할 수는 <xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=nameWithType> 문자열에 지정 된 정규화 형식인 정규화 되는지 여부를 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-444">You can determine whether a string is normalized to normalization form C by calling the <xref:System.String.IsNormalized?displayProperty=nameWithType> method, or you can call the <xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=nameWithType> method to determine whether a string is normalized to a specified normalization form.</span></span> <span data-ttu-id="3723c-445">호출할 수도 있습니다는 <xref:System.String.Normalize?displayProperty=nameWithType> 정규화 형식 C에 문자열을 변환 하는 메서드를 호출할 수는 <xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=nameWithType> 지정한 정규화 형식을 문자열로 변환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-445">You can also call the <xref:System.String.Normalize?displayProperty=nameWithType> method to convert a string to normalization form C, or you can call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=nameWithType> method to convert a string to a specified normalization form.</span></span> <span data-ttu-id="3723c-446">정규화 및 문자열 비교에 대 한 단계별 정보를 참조 하세요. 합니다 <xref:System.String.Normalize> 고 <xref:System.String.Normalize%28System.Text.NormalizationForm%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-446">For step-by-step information about normalizing and comparing strings, see the <xref:System.String.Normalize> and <xref:System.String.Normalize%28System.Text.NormalizationForm%29> methods.</span></span>  
  
 <span data-ttu-id="3723c-447">다음의 간단한 예제에서는 문자열 정규화를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-447">The following simple example illustrates string normalization.</span></span> <span data-ttu-id="3723c-448">세 개의 다른 문자열의 세 가지 방법으로 "ố" 문자를 정의 하 고 같음에 대 한 서 수 비교를 사용 하 여 각 문자열에서 다른 두 문자열이 다른 것을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-448">It defines the letter "ố" in three different ways in three different strings, and uses an ordinal comparison for equality to determine that each string differs from the other two strings.</span></span> <span data-ttu-id="3723c-449">그런 다음 지원 되는 정규화 폼, 각 문자열을 변환 하 고 다시 지정 된 정규화 형식인 각 문자열의 서 수 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-449">It then converts each string to the supported normalization forms, and again performs an ordinal comparison of each string in a specified normalization form.</span></span> <span data-ttu-id="3723c-450">각각의 경우에서 같음에 대 한 두 번째 테스트에서는 문자열이 같은지를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-450">In each case, the second test for equality shows that the strings are equal.</span></span>  
  
 [!code-cpp[System.String.Class#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.normalize.cpp#14)]
 [!code-csharp[System.String.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/normalize1.cs#14)]
 [!code-vb[System.String.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/normalize1.vb#14)]  
  
 <span data-ttu-id="3723c-451">정규화 및 정규화 형식에 대 한 자세한 내용은 참조 하세요. <xref:System.Text.NormalizationForm?displayProperty=nameWithType>, 뿐만 [Unicode Standard Annex #15: Unicode Normalization Forms](https://unicode.org/reports/tr15/) 하며 [정규화 FAQ](https://www.unicode.org/faq/normalization.html) 에 unicode.org 웹 사이트입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-451">For more information about normalization and normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>, as well as [Unicode Standard Annex #15: Unicode Normalization Forms](https://unicode.org/reports/tr15/) and the [Normalization FAQ](https://www.unicode.org/faq/normalization.html) on the unicode.org website.</span></span>  
  
<a name="ByCategory"></a>   
## <a name="string-operations-by-category"></a><span data-ttu-id="3723c-452">범주별 문자열 작업</span><span class="sxs-lookup"><span data-stu-id="3723c-452">String operations by category</span></span>  
 <span data-ttu-id="3723c-453">합니다 <xref:System.String> 클래스는 같음, 문자 또는 형식을 지정 하는 문자열을 복사 하는 값을 문자열을 결합 하는 문자열에서 부분 문자열을 추출 하는 문자열을 수정 하는 문자열의 부분 문자열 찾기에 대 한 문자열을 테스트 하는 문자열 비교에 대 한 멤버를 제공 하 고 문자열을 정규화 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-453">The <xref:System.String> class provides members for comparing strings, testing strings for equality, finding characters or substrings in a string, modifying a string, extracting substrings from a string, combining strings, formatting values, copying a string, and normalizing a string.</span></span>  
  
### <a name="comparing-strings"></a><span data-ttu-id="3723c-454">문자열 비교</span><span class="sxs-lookup"><span data-stu-id="3723c-454">Comparing strings</span></span>  
 <span data-ttu-id="3723c-455">다음을 사용 하 여 정렬 순서에서 상대 위치를 결정 하는 문자열을 비교할 수 있습니다 <xref:System.String> 메서드:</span><span class="sxs-lookup"><span data-stu-id="3723c-455">You can compare strings to determine their relative position in the sort order by using the following <xref:System.String> methods:</span></span>  
  
-   <span data-ttu-id="3723c-456"><xref:System.String.Compare%2A> 정렬 순서에서 두 번째 문자열을 하나의 문자열로의 관계를 나타내는 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-456"><xref:System.String.Compare%2A> returns an integer that indicates the relationship of one string to a second string in the sort order.</span></span>  
  
-   <span data-ttu-id="3723c-457"><xref:System.String.CompareOrdinal%2A> 두 번째 문자열의 코드 포인트 비교를 기반으로 하는 문자열 하나의 관계를 나타내는 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-457"><xref:System.String.CompareOrdinal%2A> returns an integer that indicates the relationship of one string to a second string based on a comparison of their code points.</span></span>  
  
-   <span data-ttu-id="3723c-458"><xref:System.String.CompareTo%2A> 정렬 순서에서 두 번째 문자열에는 현재 문자열 인스턴스가의 관계를 나타내는 정수를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-458"><xref:System.String.CompareTo%2A> returns an integer that indicates the relationship of the current string instance to a second string in the sort order.</span></span> <span data-ttu-id="3723c-459"><xref:System.String.CompareTo%28System.String%29> 메서드를 제공 합니다 <xref:System.IComparable> 및 <xref:System.IComparable%601> 에 대 한 구현을 <xref:System.String> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-459">The <xref:System.String.CompareTo%28System.String%29> method provides the <xref:System.IComparable> and <xref:System.IComparable%601> implementations for the <xref:System.String> class.</span></span>  
  
### <a name="testing-strings-for-equality"></a><span data-ttu-id="3723c-460">문자열이 같은지를 테스트합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-460">Testing strings for equality</span></span>  
 <span data-ttu-id="3723c-461">호출 하 여 <xref:System.String.Equals%2A> 두 문자열이 같은지 여부를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-461">You call the <xref:System.String.Equals%2A> method to determine whether two strings are equal.</span></span> <span data-ttu-id="3723c-462">인스턴스 <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> 및 정적 <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> 오버 로드를 통해 문화권 구분 또는 서 수 비교 인지 및 대/소문자가 고려 되거나 무시 하는지 여부를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-462">The instance <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> and the static <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored.</span></span> <span data-ttu-id="3723c-463">같음에 대 한 대부분의 테스트는 서 수 및 시스템 리소스 (예: 파일 시스템 개체)에 대 한 액세스를 결정 하는 같음 비교 항상 서 수 여야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-463">Most tests for equality are ordinal, and comparisons for equality that determine access to a system resource (such as a file system object) should always be ordinal.</span></span>  
  
### <a name="finding-characters-in-a-string"></a><span data-ttu-id="3723c-464">문자열의 문자를 찾기</span><span class="sxs-lookup"><span data-stu-id="3723c-464">Finding characters in a string</span></span>  
 <span data-ttu-id="3723c-465"><xref:System.String> 클래스는 두 가지 검색 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-465">The <xref:System.String> class includes two kinds of search methods:</span></span>  
  
-   <span data-ttu-id="3723c-466">반환 하는 메서드를 <xref:System.Boolean> 문자열 인스턴스에서 특정 하위 문자열이 있는지 여부를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-466">Methods that return a <xref:System.Boolean> value to indicate whether a particular substring is present in a string instance.</span></span> <span data-ttu-id="3723c-467">여기에 포함 된 <xref:System.String.Contains%2A>, <xref:System.String.EndsWith%2A>, 및 <xref:System.String.StartsWith%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-467">These include the <xref:System.String.Contains%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.StartsWith%2A> methods.</span></span>  
  
-   <span data-ttu-id="3723c-468">문자열 인스턴스의 하위 문자열의 시작 위치를 나타내는 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-468">Methods that indicate the starting position of a substring in a string instance.</span></span> <span data-ttu-id="3723c-469">여기에 <xref:System.String.IndexOf%2A>, <xref:System.String.IndexOfAny%2A>, <xref:System.String.LastIndexOf%2A>, 및 <xref:System.String.LastIndexOfAny%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-469">These include the <xref:System.String.IndexOf%2A>, <xref:System.String.IndexOfAny%2A>, <xref:System.String.LastIndexOf%2A>, and <xref:System.String.LastIndexOfAny%2A> methods.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="3723c-470">특정 부분 문자열 보다는 특정 패턴에 대 한 문자열을 검색 하려는 경우 정규식을 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-470">If you want to search a string for a particular pattern rather than a specific substring, you should use regular expressions.</span></span> <span data-ttu-id="3723c-471">자세한 내용은 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-471">For more information, see [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).</span></span>  
  
### <a name="modifying-a-string"></a><span data-ttu-id="3723c-472">문자열을 수정합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-472">Modifying a string</span></span>  
 <span data-ttu-id="3723c-473"><xref:System.String> 클래스는 문자열의 값을 수정 하는 다음 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-473">The <xref:System.String> class includes the following methods that appear to modify the value of a string:</span></span>  
  
-   <span data-ttu-id="3723c-474"><xref:System.String.Insert%2A> 현재 문자열 삽입 <xref:System.String> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="3723c-474"><xref:System.String.Insert%2A> inserts a string into the current <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="3723c-475"><xref:System.String.PadLeft%2A> 문자열의 시작 부분에는 지정 된 문자 하나 이상의 항목을 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-475"><xref:System.String.PadLeft%2A> inserts one or more occurrences of a specified character at the beginning of a string.</span></span>  
  
-   <span data-ttu-id="3723c-476"><xref:System.String.PadRight%2A> 문자열의 끝에 지정 된 문자의 하나 이상의 항목을 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-476"><xref:System.String.PadRight%2A> inserts one or more occurrences of a specified character at the end of a string.</span></span>  
  
-   <span data-ttu-id="3723c-477"><xref:System.String.Remove%2A> 부분 문자열을 현재에서 삭제 <xref:System.String> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="3723c-477"><xref:System.String.Remove%2A> deletes a substring from the current <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="3723c-478"><xref:System.String.Replace%2A> 현재에서 다른 부분 문자열을 사용 하 여 부분 문자열을 대체 <xref:System.String> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="3723c-478"><xref:System.String.Replace%2A> replaces a substring with another substring in the current <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="3723c-479"><xref:System.String.ToLower%2A> 및 <xref:System.String.ToLowerInvariant%2A> 문자열의 모든 문자를 소문자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-479"><xref:System.String.ToLower%2A> and <xref:System.String.ToLowerInvariant%2A> convert all the characters in a string to lowercase.</span></span>  
  
-   <span data-ttu-id="3723c-480"><xref:System.String.ToUpper%2A> 및 <xref:System.String.ToUpperInvariant%2A> 문자열의 모든 문자를 대문자로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-480"><xref:System.String.ToUpper%2A> and <xref:System.String.ToUpperInvariant%2A> convert all the characters in a string to uppercase.</span></span>  
  
-   <span data-ttu-id="3723c-481"><xref:System.String.Trim%2A> 문자열의 시작과 끝에서 모든 문자를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-481"><xref:System.String.Trim%2A> removes all occurrences of a character from the beginning and end of a string.</span></span>  
  
-   <span data-ttu-id="3723c-482"><xref:System.String.TrimEnd%2A> 문자열의 끝에서 모든 문자를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-482"><xref:System.String.TrimEnd%2A> removes all occurrences of a character from the end of a string.</span></span>  
  
-   <span data-ttu-id="3723c-483"><xref:System.String.TrimStart%2A> 문자열의 시작 부분에서 모든 문자를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-483"><xref:System.String.TrimStart%2A> removes all occurrences of a character from the beginning of a string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3723c-484">모든 문자열 수정 메서드 반환 새 <xref:System.String> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-484">All string modification methods return a new <xref:System.String> object.</span></span> <span data-ttu-id="3723c-485">현재 인스턴스의 값을 수정 하지 마세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-485">They don't modify the value of the current instance.</span></span>  
  
### <a name="extracting-substrings-from-a-string"></a><span data-ttu-id="3723c-486">문자열에서 부분 문자열을 추출합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-486">Extracting substrings from a string</span></span>  
 <span data-ttu-id="3723c-487"><xref:System.String.Split%2A?displayProperty=nameWithType> 메서드는 여러 문자열으로 단일 문자열을 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-487">The <xref:System.String.Split%2A?displayProperty=nameWithType> method separates a single string into multiple strings.</span></span> <span data-ttu-id="3723c-488">메서드의 오버 로드를 사용 하면 메서드를 추출 하는 부분 문자열의 최대 수를 확인 하려면 및 빈 문자열 (발생 하는 구분 기호 옆에 있는 경우) 반환 된 문자열 중 포함 되는지 여부를 확인 하려면 여러 개의 구분 기호를 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-488">Overloads of the method allow you to specify multiple delimiters, to determine the maximum number of substrings that the method extracts, and to determine whether empty strings (which occur when delimiters are adjacent) are included among the returned strings.</span></span>  
  
### <a name="combining-strings"></a><span data-ttu-id="3723c-489">결합 문자열</span><span class="sxs-lookup"><span data-stu-id="3723c-489">Combining strings</span></span>  
 <span data-ttu-id="3723c-490">다음 <xref:System.String> 문자열 연결에 대 한 메서드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-490">The following <xref:System.String> methods can be used for string concatenation:</span></span>  
  
-   <span data-ttu-id="3723c-491"><xref:System.String.Concat%2A> 하나 이상의 부분 문자열을 단일 문자열로 결합합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-491"><xref:System.String.Concat%2A> combines one or more substrings into a single string.</span></span>  
  
-   <span data-ttu-id="3723c-492"><xref:System.String.Join%2A> 단일 요소에 하나 이상의 부분 문자열을 연결 하 고 각 부분 문자열 사이의 구분 기호를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-492"><xref:System.String.Join%2A> concatenates one or more substrings into a single element and adds a separator between each substring.</span></span>  
  
### <a name="formatting-values"></a><span data-ttu-id="3723c-493">값의 서식 지정</span><span class="sxs-lookup"><span data-stu-id="3723c-493">Formatting values</span></span>  
 <span data-ttu-id="3723c-494"><xref:System.String.Format%2A?displayProperty=nameWithType> 메서드 복합 서식 지정 기능을 사용 하 여 문자열에서 하나 이상의 자리 표시자 일부 개체 또는 값의 문자열 표현으로 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-494">The <xref:System.String.Format%2A?displayProperty=nameWithType> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value.</span></span> <span data-ttu-id="3723c-495"><xref:System.String.Format%2A> 메서드는 종종 다음을 수행 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-495">The <xref:System.String.Format%2A> method is often used to do the following:</span></span>  
  
-   <span data-ttu-id="3723c-496">문자열에서 숫자 값의 문자열 표현을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-496">To embed the string representation of a numeric value in a string.</span></span>  
  
-   <span data-ttu-id="3723c-497">문자열에서 날짜 및 시간 값의 문자열 표현을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-497">To embed the string representation of a date and time value in a string.</span></span>  
  
-   <span data-ttu-id="3723c-498">문자열에서 열거형 값의 문자열 표현을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-498">To embed the string representation of an enumeration value in a string.</span></span>  
  
-   <span data-ttu-id="3723c-499">지 원하는 일부 개체의 문자열 표현을 포함 하는 <xref:System.IFormattable> 문자열에 대 한 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-499">To embed the string representation of some object that supports the <xref:System.IFormattable> interface in a string.</span></span>  
  
-   <span data-ttu-id="3723c-500">오른쪽 맞춤 또는 더 큰 문자열 내에서 필드의 부분 문자열을 왼쪽에 맞춥니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-500">To right-justify or left-justify a substring in a field within a larger string.</span></span>  
  
 <span data-ttu-id="3723c-501">작업 및 예 형식에 대 한 자세한 내용은 참조는 <xref:System.String.Format%2A> 요약 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-501">For detailed information about formatting operations and examples, see the <xref:System.String.Format%2A> overload summary.</span></span>  
  
### <a name="copying-a-string"></a><span data-ttu-id="3723c-502">문자열 복사</span><span class="sxs-lookup"><span data-stu-id="3723c-502">Copying a string</span></span>  
 <span data-ttu-id="3723c-503">다음을 호출할 수 있습니다 <xref:System.String> 문자열의 복사본을 확인 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="3723c-503">You can call the following <xref:System.String> methods to make a copy of a string:</span></span>  
  
-   <span data-ttu-id="3723c-504"><xref:System.String.Clone%2A> 기존에 대 한 참조를 반환 합니다. <xref:System.String> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-504"><xref:System.String.Clone%2A> returns a reference to an existing <xref:System.String> object.</span></span>  
  
-   <span data-ttu-id="3723c-505"><xref:System.String.Copy%2A> 기존 문자열의 복사본을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-505"><xref:System.String.Copy%2A> creates a copy of an existing string.</span></span>  
  
-   <span data-ttu-id="3723c-506"><xref:System.String.CopyTo%2A> 문자 배열에 있는 문자열 부분을 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-506"><xref:System.String.CopyTo%2A> copies a portion of a string to a character array.</span></span>  
  
### <a name="normalizing-a-string"></a><span data-ttu-id="3723c-507">문자열 정규화</span><span class="sxs-lookup"><span data-stu-id="3723c-507">Normalizing a string</span></span>  
 <span data-ttu-id="3723c-508">유니코드, 단일 문자 코드 포인트를 여러 개 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-508">In Unicode, a single character can have multiple code points.</span></span> <span data-ttu-id="3723c-509">정규화 같은 이진 표현으로 이러한 동등한 문자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-509">Normalization converts these equivalent characters into the same binary representation.</span></span> <span data-ttu-id="3723c-510">합니다 <xref:System.String.Normalize%2A?displayProperty=nameWithType> 정규화를 수행 하는 메서드 및 <xref:System.String.IsNormalized%2A?displayProperty=nameWithType> 메서드 문자열이 정규화 되는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-510">The <xref:System.String.Normalize%2A?displayProperty=nameWithType> method performs the normalization, and the <xref:System.String.IsNormalized%2A?displayProperty=nameWithType> method determines whether a string is normalized.</span></span>  
  
 <span data-ttu-id="3723c-511">자세한 내용 및 예제에 대 한 참조를 [정규화](#Normalization) 이 항목의 앞부분에 나오는 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-511">For more information and an example, see the [Normalization](#Normalization) section earlier in this topic.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="3723c-512">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="3723c-512">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.ICloneable" />
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Text.StringBuilder" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-513">
            <see cref="T:System.String" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-513">Initializes a new instance of the <see cref="T:System.String" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-514">섹션 내용</span><span class="sxs-lookup"><span data-stu-id="3723c-514">In this section:</span></span>  
  
 <span data-ttu-id="3723c-515">[오버 로드 된 생성자 구문](#Syntax) </span><span class="sxs-lookup"><span data-stu-id="3723c-515">[Overloaded constructor syntax](#Syntax) </span></span>  
 <span data-ttu-id="3723c-516">[매개 변수](#Params) </span><span class="sxs-lookup"><span data-stu-id="3723c-516">[Parameters](#Params) </span></span>  
 <span data-ttu-id="3723c-517">[예외](#Exceptions) </span><span class="sxs-lookup"><span data-stu-id="3723c-517">[Exceptions](#Exceptions) </span></span>  
 <span data-ttu-id="3723c-518">[메서드 호출 합니까?](#Tasks) </span><span class="sxs-lookup"><span data-stu-id="3723c-518">[Which method do I call?](#Tasks) </span></span>  
 <span data-ttu-id="3723c-519">[문자열 만들기](#Creating_Strings) </span><span class="sxs-lookup"><span data-stu-id="3723c-519">[Creating strings](#Creating_Strings) </span></span>  
 <span data-ttu-id="3723c-520">[반복적인 문자열 처리](#Repetitive) </span><span class="sxs-lookup"><span data-stu-id="3723c-520">[Handling repetitive strings](#Repetitive) </span></span>  
 <span data-ttu-id="3723c-521">인스턴스화하 문자열의 예:</span><span class="sxs-lookup"><span data-stu-id="3723c-521">Examples of instantiating strings:</span></span>   
 [<span data-ttu-id="3723c-522">문자열 할당을 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="3723c-522">Using string assignment</span></span>](#Ctor1_Example)  
 [<span data-ttu-id="3723c-523">문자 배열을 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="3723c-523">Using a character array</span></span>](#Ctor2_Example)  
 [<span data-ttu-id="3723c-524">문자 배열의 일부를 사용 하 고 단일 문자를 반복 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-524">Using a portion of a character array and repeating a single character</span></span>](#Ctor3_Example)  
 [<span data-ttu-id="3723c-525">문자 배열에 대 한 포인터를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="3723c-525">Using a pointer to a character array</span></span>](#Ctor4_Example)  
 [<span data-ttu-id="3723c-526">에 대 한 포인터 및 배열 범위를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="3723c-526">Using  a pointer and a range of an array</span></span>](#Ctor5_Example)  
 [<span data-ttu-id="3723c-527">부호 있는 바이트 배열에 대 한 포인터를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="3723c-527">Using a pointer to a signed byte array</span></span>](#Ctor6_Example)  
[<span data-ttu-id="3723c-528">버전 정보</span><span class="sxs-lookup"><span data-stu-id="3723c-528">Version information</span></span>](#Versions)  
  
<a name="Syntax"></a>   
## <a name="overloaded-constructor-syntax"></a><span data-ttu-id="3723c-529">오버 로드 된 생성자 구문</span><span class="sxs-lookup"><span data-stu-id="3723c-529">Overloaded constructor syntax</span></span>  
 <span data-ttu-id="3723c-530">문자열 생성자 두 가지 범주로 나뉩니다: 포인터 매개 변수 없이 포인터 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-530">String constructors fall into two categories: those without pointer parameters, and those with pointer parameters.</span></span> <span data-ttu-id="3723c-531">포인터를 사용 하는 생성자는 CLS 규격이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-531">The constructors that use pointers are not CLS-compliant.</span></span> <span data-ttu-id="3723c-532">또한 Visual Basic 포인터 사용을 지원 하지 않습니다 하 고 C# 코드를 사용 하 여 포인터 안전 하지 않은 컨텍스트에서 실행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-532">In addition, Visual Basic does not support the use of pointers, and C# requires code that uses pointers to run in an unsafe context.</span></span> <span data-ttu-id="3723c-533">자세한 내용은 [unsafe](~/docs/csharp/language-reference/keywords/unsafe.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-533">For more information, see [unsafe](~/docs/csharp/language-reference/keywords/unsafe.md).</span></span>  
  
 <span data-ttu-id="3723c-534">오버 로드를 선택 하면 추가 지침을 참조 하세요. [메서드 호출 합니까?](#Tasks)</span><span class="sxs-lookup"><span data-stu-id="3723c-534">For additional guidance on choosing an overload, see [Which method do I call?](#Tasks)</span></span>  
  
 `String(Char[] value)`  
 <span data-ttu-id="3723c-535">유니코드 문자의 배열에 의해 표시 되는 값의 새 인스턴스를 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-535">Initializes the new instance to the value indicated by an array of Unicode characters.</span></span> <span data-ttu-id="3723c-536">유니코드 문자를 복사 하는이 생성자 ([예제](#Ctor2_Example)).</span><span class="sxs-lookup"><span data-stu-id="3723c-536">This constructor copies Unicode characters([example](#Ctor2_Example)).</span></span>  
  
 `String(Char[] value, Int32 startIndex, Int32 length)`  
 <span data-ttu-id="3723c-537">길이 및 해당 배열 내의 시작 문자 위치를 유니코드 문자 배열에서 나타내는 값으로 새 인스턴스를 초기화 ([예제](#Ctor3_Example)).</span><span class="sxs-lookup"><span data-stu-id="3723c-537">Initializes the new instance to the value indicated by an array of Unicode characters, a starting character position within that array, and a length ([example](#Ctor3_Example)).</span></span>  
  
 `String(Char c, Int32 count)`  
 <span data-ttu-id="3723c-538">지정 된 유니코드 문자로 표시 된 값으로 새 인스턴스를 초기화 합니다. 지정된 된 횟수 만큼 반복 ([예제](#Ctor3_Example)).</span><span class="sxs-lookup"><span data-stu-id="3723c-538">Initializes the new instance to the value indicated by a specified Unicode character repeated a specified number of times ([example](#Ctor3_Example)).</span></span>  
  
 `String(char* value)`  
 <span data-ttu-id="3723c-539">**(CLS 규격이 아닙니다.) ** Null 문자로 종료 되는 유니코드 문자의 배열에 대 한 포인터가 나타내는 값으로 새 인스턴스를 초기화 (u+0000 또는 '\0').</span><span class="sxs-lookup"><span data-stu-id="3723c-539">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of Unicode characters that is terminated by a null character (U+0000 or '\0').</span></span> <span data-ttu-id="3723c-540">([예제](#Ctor4_Example)).</span><span class="sxs-lookup"><span data-stu-id="3723c-540">([example](#Ctor4_Example)).</span></span>  
  
 <span data-ttu-id="3723c-541">권한: <xref:System.Security.SecurityCriticalAttribute>, 직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-541">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="3723c-542">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-542">This member cannot be used by partially trusted or transparent code.</span></span>  
  
 `String(char* value, Int32 startIndex, Int32 length)`  
 <span data-ttu-id="3723c-543">**(CLS 규격이 아닙니다.) ** 유니코드 문자, 길이 및 해당 배열 내의 시작 문자 위치를 배열에 대 한 포인터가 가리키는 값으로 새 인스턴스를 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-543">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of Unicode characters, a starting character position within that array, and a length.</span></span> <span data-ttu-id="3723c-544">유니코드 문자를 복사 하는 생성자 `value` 인덱스부터 `startIndex` 인덱스에서 끝나는 `startIndex`  +  `length` – 1 ([예제](#Ctor5_Example)).</span><span class="sxs-lookup"><span data-stu-id="3723c-544">The constructor copies the Unicode characters from `value` starting at index `startIndex` and ending at index `startIndex` + `length` – 1 ([example](#Ctor5_Example)).</span></span>  
  
 <span data-ttu-id="3723c-545">권한: <xref:System.Security.SecurityCriticalAttribute>, 직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-545">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="3723c-546">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-546">This member cannot be used by partially trusted or transparent code.</span></span>  
  
 `String(SByte* value)`  
 <span data-ttu-id="3723c-547">**(CLS 규격이 아닙니다.) ** 8 비트 부호 있는 정수 배열에 대 한 포인터가 나타내는 값으로 새 인스턴스를 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-547">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers.</span></span> <span data-ttu-id="3723c-548">배열 현재 시스템 코드 페이지를 사용 하 여 인코딩된 문자열을 나타내는 것으로 간주 됩니다 (즉, 지정한 인코딩을 <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="3723c-548">The array is assumed to represent a string encoded using the current system code page (that is, the encoding specified by <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>).</span></span> <span data-ttu-id="3723c-549">문자를 처리 하는 생성자 `value` null 문자 (0x00)에 도달할 때까지 포인터에 의해 지정 된 위치에서 시작 ([예제](#Ctor6_Example)).</span><span class="sxs-lookup"><span data-stu-id="3723c-549">The constructor processes characters from `value` starting from the location specified by the pointer until a null character (0x00) is reached ([example](#Ctor6_Example)).</span></span>  
  
 <span data-ttu-id="3723c-550">권한: <xref:System.Security.SecurityCriticalAttribute>, 직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-550">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="3723c-551">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-551">This member cannot be used by partially trusted or transparent code.</span></span>  
  
 `String(SByte* value, Int32 startIndex, Int32 length)`  
 <span data-ttu-id="3723c-552">**(CLS 규격이 아닙니다.) ** 길이 및 해당 배열 내의 시작 위치, 8 비트 부호 있는 정수 배열에 대 한 포인터가 나타내는 값으로 새 인스턴스를 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-552">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</span></span>  <span data-ttu-id="3723c-553">배열 현재 시스템 코드 페이지를 사용 하 여 인코딩된 문자열을 나타내는 것으로 간주 됩니다 (즉, 지정한 인코딩을 <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="3723c-553">The array is assumed to represent a string encoded using the current system code page (that is, the encoding specified by <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>).</span></span> <span data-ttu-id="3723c-554">시작 하는 값에서 문자를 처리 하는 생성자 `startIndex` 에서 끝나는 `startIndex`  +  `length` – 1 ([예제](#Ctor6_Example)).</span><span class="sxs-lookup"><span data-stu-id="3723c-554">The constructor processes characters from value starting at `startIndex` and ending at `startIndex` + `length` – 1 ([example](#Ctor6_Example)).</span></span>  
  
 <span data-ttu-id="3723c-555">권한: <xref:System.Security.SecurityCriticalAttribute>, 직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-555">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="3723c-556">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-556">This member cannot be used by partially trusted or transparent code.</span></span>  
  
 `String(SByte* value, Int32 startIndex, Int32 length, Encoding enc)`  
 <span data-ttu-id="3723c-557">**(CLS 규격이 아닙니다.) ** 길이 해당 배열 내의 시작 위치를 8 비트 부호 있는 정수 배열에 대 한 포인터가 나타내는 값으로 새 인스턴스를 초기화 및 <xref:System.Text.Encoding> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-557">**(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <xref:System.Text.Encoding> object.</span></span>  
  
 <span data-ttu-id="3723c-558">권한: <xref:System.Security.SecurityCriticalAttribute>, 직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-558">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="3723c-559">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-559">This member cannot be used by partially trusted or transparent code.</span></span>  
  
<a name="Params"></a>   
## <a name="parameters"></a><span data-ttu-id="3723c-560">매개 변수</span><span class="sxs-lookup"><span data-stu-id="3723c-560">Parameters</span></span>  
 <span data-ttu-id="3723c-561">사용 하는 매개 변수의 전체 목록은 다음과 같습니다 <xref:System.String> 포인터 매개 변수를 포함 하지 않는 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-561">Here is a complete list of parameters used by <xref:System.String> constructors that don't include a pointer parameter.</span></span> <span data-ttu-id="3723c-562">각 오버 로드에서 사용 하는 매개 변수를 위의 구문은 오버 로드를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-562">For the parameters used by each overload, see the overload syntax above.</span></span>  
  
|<span data-ttu-id="3723c-563">매개 변수</span><span class="sxs-lookup"><span data-stu-id="3723c-563">Parameter</span></span>|<span data-ttu-id="3723c-564">형식</span><span class="sxs-lookup"><span data-stu-id="3723c-564">Type</span></span>|<span data-ttu-id="3723c-565">설명</span><span class="sxs-lookup"><span data-stu-id="3723c-565">Description</span></span>|  
|---------------|----------|-----------------|  
|`value`|<span data-ttu-id="3723c-566"><xref:System.Char>[]</span><span class="sxs-lookup"><span data-stu-id="3723c-566"><xref:System.Char>[]</span></span>|<span data-ttu-id="3723c-567">유니코드 문자 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-567">An array of Unicode characters.</span></span>|  
|`c`|<xref:System.Char>|<span data-ttu-id="3723c-568">유니코드 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-568">A Unicode character.</span></span>|  
|`startIndex`|<xref:System.Int32>|<span data-ttu-id="3723c-569">시작 위치 `value` 새 문자열의 첫 번째 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-569">The starting position in `value` of the first character in the new string.</span></span><br /><br /> <span data-ttu-id="3723c-570">기본값: 0</span><span class="sxs-lookup"><span data-stu-id="3723c-570">Default value: 0</span></span>|  
|`length`|<xref:System.Int32>|<span data-ttu-id="3723c-571">문자 수가 `value` 새 문자열에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-571">The number of characters in `value` to include in the new string.</span></span><br /><br /> <span data-ttu-id="3723c-572">기본값: <xref:System.Array.Length%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="3723c-572">Default value: <xref:System.Array.Length%2A?displayProperty=nameWithType></span></span>|  
|`count`|<xref:System.Int32>|<span data-ttu-id="3723c-573">횟수 문자 `c` 새 문자열에서 반복 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-573">The number of times the character `c` is repeated in the new string.</span></span> <span data-ttu-id="3723c-574">하는 경우 `count` 가 0 이면 새 개체의 값은 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-574">If `count` is zero, the value of the new object is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>|  
  
 <span data-ttu-id="3723c-575">사용 하는 매개 변수의 전체 목록은 다음과 같습니다 <xref:System.String> 포인터 매개 변수를 포함 하는 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-575">Here is a complete list of parameters used by <xref:System.String> constructors that include a pointer parameter.</span></span> <span data-ttu-id="3723c-576">각 오버 로드에서 사용 하는 매개 변수를 위의 구문은 오버 로드를 참조 하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-576">For the parameters used by each overload, see the overload syntax above.</span></span>  
  
|<span data-ttu-id="3723c-577">매개 변수</span><span class="sxs-lookup"><span data-stu-id="3723c-577">Parameter</span></span>|<span data-ttu-id="3723c-578">형식</span><span class="sxs-lookup"><span data-stu-id="3723c-578">Type</span></span>|<span data-ttu-id="3723c-579">설명</span><span class="sxs-lookup"><span data-stu-id="3723c-579">Description</span></span>|  
|---------------|----------|-----------------|  
|`value`|<xref:System.Char>*<br /><br /> <span data-ttu-id="3723c-580">또는</span><span class="sxs-lookup"><span data-stu-id="3723c-580">-or-</span></span><br /><br /> <xref:System.SByte>\*|<span data-ttu-id="3723c-581">유니코드 문자를 null로 끝나는 배열 또는 8 비트 부호 있는 정수 배열에 대 한 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-581">A pointer to a null-terminated array of Unicode characters or an array of 8-bit signed integers.</span></span> <span data-ttu-id="3723c-582">하는 경우 `value` 됩니다 `null` 이거나 빈 배열이 면 새 문자열의 값이 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-582">If `value` is `null` or an empty array, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>|  
|`startIndex`|<xref:System.Int32>|<span data-ttu-id="3723c-583">새 문자열에서 첫 번째 문자를 정의 하는 배열 요소의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-583">The index of the array element that defines the first character in the new string.</span></span><br /><br /> <span data-ttu-id="3723c-584">기본값: 0</span><span class="sxs-lookup"><span data-stu-id="3723c-584">Default value: 0</span></span>|  
|`length`|<xref:System.Int32>|<span data-ttu-id="3723c-585">새 문자열을 만드는 데 사용 되는 배열 요소의 수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-585">The number of array elements to use to create the new string.</span></span> <span data-ttu-id="3723c-586">길이가 0 인 경우 생성자 값인 문자열을 만듭니다. <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-586">If length is zero, the constructor creates a string whose value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span><br /><br /> <span data-ttu-id="3723c-587">기본값: <xref:System.Array.Length%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="3723c-587">Default value: <xref:System.Array.Length%2A?displayProperty=nameWithType></span></span>|  
|`enc`|<xref:System.Text.Encoding>|<span data-ttu-id="3723c-588">지정 하는 개체를 어떻게 `value` 배열 인코딩됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-588">An object that specifies how the `value` array is encoded.</span></span><br /><br /> <span data-ttu-id="3723c-589">기본값: <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>, 또는 시스템의 현재 ANSI 코드 페이지</span><span class="sxs-lookup"><span data-stu-id="3723c-589">Default value: <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>, or the system's current ANSI code page</span></span>|  
  
<a name="Exceptions"></a>   
## <a name="exceptions"></a><span data-ttu-id="3723c-590">예외</span><span class="sxs-lookup"><span data-stu-id="3723c-590">Exceptions</span></span>  
 <span data-ttu-id="3723c-591">포인터 매개 변수를 포함 하지 않는 생성자에서 throw 된 예외 목록은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-591">Here's a list of exceptions thrown by constructors that don't include pointer parameters.</span></span>  
  
|<span data-ttu-id="3723c-592">예외</span><span class="sxs-lookup"><span data-stu-id="3723c-592">Exception</span></span>|<span data-ttu-id="3723c-593">조건</span><span class="sxs-lookup"><span data-stu-id="3723c-593">Condition</span></span>|<span data-ttu-id="3723c-594">throw</span><span class="sxs-lookup"><span data-stu-id="3723c-594">Thrown by</span></span>|  
|---------------|---------------|---------------|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="3723c-595">`value`가 `null`인 경우</span><span class="sxs-lookup"><span data-stu-id="3723c-595">`value` is `null`.</span></span>|<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="3723c-596">`startIndex`를`length`, 또는 `count` 가 0 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-596">`startIndex`,`length`, or `count` is less than zero.</span></span><br /><br /> <span data-ttu-id="3723c-597">또는</span><span class="sxs-lookup"><span data-stu-id="3723c-597">-or-</span></span><br /><br /> <span data-ttu-id="3723c-598">`startIndex`와 `length`의 합계가 `value`에 포함된 요소의 수보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="3723c-598">The sum of `startIndex` and `length` is greater than the number of elements in `value`.</span></span><br /><br /> <span data-ttu-id="3723c-599">또는</span><span class="sxs-lookup"><span data-stu-id="3723c-599">-or-</span></span><br /><br /> <span data-ttu-id="3723c-600">`count`가 0보다 작은 경우</span><span class="sxs-lookup"><span data-stu-id="3723c-600">`count` is less than zero.</span></span>|<xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29><br /><br /> <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>|  
  
 <span data-ttu-id="3723c-601">포인터 매개 변수를 포함 하는 생성자에서 throw 된 예외 목록은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-601">Here's a list of exceptions thrown by constructors that include pointer parameters.</span></span>  
  
|<span data-ttu-id="3723c-602">예외</span><span class="sxs-lookup"><span data-stu-id="3723c-602">Exception</span></span>|<span data-ttu-id="3723c-603">조건</span><span class="sxs-lookup"><span data-stu-id="3723c-603">Condition</span></span>|<span data-ttu-id="3723c-604">throw</span><span class="sxs-lookup"><span data-stu-id="3723c-604">Thrown by</span></span>|  
|---------------|---------------|---------------|  
|<xref:System.ArgumentException>|<span data-ttu-id="3723c-605">`value` 잘못 된 유니코드 문자가 포함 된 배열을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-605">`value` specifies an array that contains an invalid Unicode character.</span></span><br /><br /> <span data-ttu-id="3723c-606">또는</span><span class="sxs-lookup"><span data-stu-id="3723c-606">-or-</span></span><br /><br /> <span data-ttu-id="3723c-607">`value` 또는 `value`  +  `startIndex` 있는 64k 보다 작은 주소를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-607">`value` or `value` + `startIndex` specifies an address that is less than 64K.</span></span><br /><br /> <span data-ttu-id="3723c-608">또는</span><span class="sxs-lookup"><span data-stu-id="3723c-608">-or-</span></span><br /><br /> <span data-ttu-id="3723c-609">새 <xref:System.String> 에서 인스턴스를 초기화 하지 못했습니다 합니다 `value` 때문에 바이트 배열 `value` 기본 코드 페이지 인코딩을 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-609">A new <xref:System.String> instance could not be initialized from the `value` byte array because `value` does not use the default code page encoding.</span></span>|<span data-ttu-id="3723c-610">포인터를 사용 하 여 모든 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-610">All constructors with pointers.</span></span>|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="3723c-611">`value`가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="3723c-611">`value` is null.</span></span>|<xref:System.String.%23ctor%28System.SByte%2A%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding%29>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="3723c-612">현재 프로세스에 주소가 지정된 모든 문자에 대한 읽기 액세스 권한이 있는 것은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-612">The current process does not have read access to all the addressed characters.</span></span><br /><br /> <span data-ttu-id="3723c-613">또는</span><span class="sxs-lookup"><span data-stu-id="3723c-613">-or-</span></span><br /><br /> <span data-ttu-id="3723c-614">`startIndex` 또는 `length`가 0보다 작거나 `value` + `startIndex`로 인해 포인터 오버플로가 발생하거나, 현재 프로세스에서 주소가 지정된 모든 문자에 대한 읽기 액세스 권한을 갖지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-614">`startIndex` or `length` is less than zero, `value` + `startIndex` cause a pointer overflow, or the current process does not have read access to all the addressed characters.</span></span><br /><br /> <span data-ttu-id="3723c-615">또는</span><span class="sxs-lookup"><span data-stu-id="3723c-615">-or-</span></span><br /><br /> <span data-ttu-id="3723c-616">새 문자열의 길이가 너무 커서 할당할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-616">The length of the new string is too large to allocate.</span></span>|<span data-ttu-id="3723c-617">포인터를 사용 하 여 모든 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-617">All constructors with pointers.</span></span>|  
|<xref:System.AccessViolationException>|<span data-ttu-id="3723c-618">`value`또는 `value`  +  `startIndex`  +  `length` – 1, 잘못 된 주소를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-618">`value`, or `value` + `startIndex` + `length` – 1, specifies an invalid address.</span></span>|<xref:System.String.%23ctor%28System.SByte%2A%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding%29>|  
  
<a name="Tasks"></a>   
## <a name="which-method-do-i-call"></a><span data-ttu-id="3723c-619">메서드 호출 합니까?</span><span class="sxs-lookup"><span data-stu-id="3723c-619">Which method do I call?</span></span>  
  
|<span data-ttu-id="3723c-620">대상</span><span class="sxs-lookup"><span data-stu-id="3723c-620">To</span></span>|<span data-ttu-id="3723c-621">호출 또는 사용</span><span class="sxs-lookup"><span data-stu-id="3723c-621">Call or use</span></span>|  
|--------|-----------------|  
|<span data-ttu-id="3723c-622">문자열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-622">Create a string.</span></span>|<span data-ttu-id="3723c-623">기존 문자열 또는 문자열 리터럴을 할당 ([예제](#Ctor1_Example))</span><span class="sxs-lookup"><span data-stu-id="3723c-623">Assignment from a string literal or an existing string ([example](#Ctor1_Example))</span></span>|  
|<span data-ttu-id="3723c-624">전체 문자 배열에서 문자열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-624">Create a string from an entire character array.</span></span>|<span data-ttu-id="3723c-625"><xref:System.String.%23ctor%28System.Char%5B%5D%29> ([예제](#Ctor2_Example))</span><span class="sxs-lookup"><span data-stu-id="3723c-625"><xref:System.String.%23ctor%28System.Char%5B%5D%29> ([example](#Ctor2_Example))</span></span>|  
|<span data-ttu-id="3723c-626">연관 된 문자 배열의 부분 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-626">Createa string from a portion of a character array.</span></span>|<span data-ttu-id="3723c-627"><xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> ([예제](#Ctor3_Example))</span><span class="sxs-lookup"><span data-stu-id="3723c-627"><xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> ([example](#Ctor3_Example))</span></span>|  
|<span data-ttu-id="3723c-628">같은 문자를 여러 번 반복 하는 문자열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-628">Create a string that repeats the same character multiple times.</span></span>|<span data-ttu-id="3723c-629"><xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> ([예제](#Ctor3_Example))</span><span class="sxs-lookup"><span data-stu-id="3723c-629"><xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> ([example](#Ctor3_Example))</span></span>|  
|<span data-ttu-id="3723c-630">유니코드 또는 와이드 문자 배열에 대 한 포인터에서 문자열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-630">Create a string from a pointer to a Unicode or wide character array.</span></span>|<xref:System.String.%23ctor%28System.Char%2A%29>|  
|<span data-ttu-id="3723c-631">해당 포인터를 사용 하 여 부분으로 된 유니코드 또는 와이드 문자 배열에서 문자열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-631">Create a string from a portion of a Unicode or wide character array by using its pointer.</span></span>|<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>|  
|<span data-ttu-id="3723c-632">C + +에서 문자열을 만들려면 `char` 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-632">Create a string from a C++ `char` array.</span></span>|<span data-ttu-id="3723c-633"><xref:System.String.%23ctor%28System.SByte%2A%29>, <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29></span><span class="sxs-lookup"><span data-stu-id="3723c-633"><xref:System.String.%23ctor%28System.SByte%2A%29>, <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29></span></span><br /><br /> <span data-ttu-id="3723c-634">또는</span><span class="sxs-lookup"><span data-stu-id="3723c-634">-or-</span></span><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding%29>|  
|<span data-ttu-id="3723c-635">ASCII 문자에서 문자열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-635">Create a string from ASCII characters.</span></span>|<xref:System.Text.ASCIIEncoding.GetString%2A?displayProperty=nameWithType>|  
  
<a name="Creating_Strings"></a>   
## <a name="creating-strings"></a><span data-ttu-id="3723c-636">문자열 만들기</span><span class="sxs-lookup"><span data-stu-id="3723c-636">Creating strings</span></span>  
 <span data-ttu-id="3723c-637">가장 일반적으로 사용 되는 기법에 문자열을 프로그래밍 방식으로 만드는 단순한 할당을에 설명 된 대로 [이 예제에서는](#Ctor1_Example)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-637">The most commonly used technique for creating strings programmatically is simple assignment, as illustrated in [this example](#Ctor1_Example).</span></span> <span data-ttu-id="3723c-638"><xref:System.String> 클래스에 네 가지 유형의 다음 값 중에서 문자열을 만들 수 있도록 하는 생성자 오버 로드도 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-638">The <xref:System.String> class also includes four types of constructor overloads that let you create strings from the following values:</span></span>  
  
-   <span data-ttu-id="3723c-639">문자 배열 (u t F-16으로 인코딩된 문자 배열)입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-639">From a character array (an array of UTF-16-encoded characters).</span></span> <span data-ttu-id="3723c-640">새로 만들 수 있습니다 <xref:System.String> 개체에서 배열 전체 또는 그 일부에 있는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-640">You can create a new <xref:System.String> object from the characters in the entire array or a portion of it.</span></span> <span data-ttu-id="3723c-641"><xref:System.String.%23ctor%28System.Char%5B%5D%29> 생성자 새 문자열을 배열에 있는 모든 문자를 복사 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-641">The <xref:System.String.%23ctor%28System.Char%5B%5D%29> constructor copies all the characters in the array to the new string.</span></span> <span data-ttu-id="3723c-642"><xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 인덱스에서 문자를 복사 하는 생성자 `startIndex` 인덱스로 `startIndex`  +  `length` – 새 문자열을 1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-642">The <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor copies the characters from index `startIndex` to index `startIndex` + `length` – 1 to the new string.</span></span> <span data-ttu-id="3723c-643">하는 경우 `length` 가 0 인 새 문자열의 값은 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-643">If `length` is zero, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
     <span data-ttu-id="3723c-644">코드 반복적으로 동일한 값이 있는 문자열을 인스턴스화하는 경우 문자열을 작성 하는 대체 방법을 사용 하 여 응용 프로그램 성능을 개선할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-644">If your code repeatedly instantiates strings that have the same value, you can improve application performance by using an alternate means of creating strings.</span></span> <span data-ttu-id="3723c-645">자세한 내용은 [반복적인 문자열 처리](#Repetitive)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-645">For more information, see [Handling repetitive strings](#Repetitive).</span></span>  
  
-   <span data-ttu-id="3723c-646">단일에서 문자를 한 번 이상를 사용 하 여 중복 된 0은 <xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-646">From a single character that is duplicated zero, one, or more times, by using the <xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> constructor.</span></span> <span data-ttu-id="3723c-647">하는 경우 `count` 가 0 인 새 문자열의 값은 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-647">If `count` is zero, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="3723c-648">null로 끝나는 문자 배열에 대 한 포인터를 사용 합니다 <xref:System.String.%23ctor%28System.Char%2A%29> 또는 <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-648">From a pointer to a null-terminated character array, by using the <xref:System.String.%23ctor%28System.Char%2A%29> or <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> constructor.</span></span> <span data-ttu-id="3723c-649">전체 배열 또는 지정된 된 범위 수 데 사용할 문자열을 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-649">Either the entire array or a specified range can be used to initialize the string.</span></span> <span data-ttu-id="3723c-650">생성자는 지정된 된 포인터가 더하기 또는 지정된 된 포인터에서 시작 하는 유니코드 문자의 시퀀스를 복사 `startIndex` 또는 배열의 끝까지 계속 `length` 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-650">The constructor copies a sequence of Unicode characters starting from the specified pointer or from the specified pointer plus `startIndex` and continuing to the end of the array or for `length` characters.</span></span> <span data-ttu-id="3723c-651">하는 경우 `value` 가 null 포인터 또는 `length` 가 0 이면 생성자 값인 문자열을 만듭니다 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-651">If `value` is a null pointer or `length` is zero, the constructor creates a string whose value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-652">배열의 끝에 복사 작업이 진행 하 고 null로 끝나는 배열 하지 않는 경우 생성자 동작은 시스템에 따라 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-652">If the copy operation proceeds to the end of the array and the array is not null-terminated, the constructor behavior is system-dependent.</span></span> <span data-ttu-id="3723c-653">이러한 조건이 액세스 위반이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-653">Such a condition might cause an access violation.</span></span>  
  
     <span data-ttu-id="3723c-654">배열에 포함 된 null 문자가 포함 된 경우 (u+0000 또는 '\0') 및 <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> 오버 로드 호출 되 면 포함 된 문자열 인스턴스 `length` 문자를 포함 하 여 null을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-654">If the array contains any embedded null characters (U+0000 or '\0') and the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> overload is called, the string instance contains `length` characters including any embedded nulls.</span></span> <span data-ttu-id="3723c-655">다음 예제에서는 두 개의 null 문자를 포함 하는 요소가 10 개인 배열에 대 한 포인터에 전달 될 때 일어나는 <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-655">The following example shows what happens when a pointer to an array of 10 elements that includes two null characters is passed to the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="3723c-656">주소는 배열의 시작 부분 문자열에 추가할 배열의 모든 요소 이기 때문에 생성자 내장된 된 null이 두 가지를 포함 하는 10 개의 문자를 사용 하 여 문자열을 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-656">Because the address is the beginning of the array and all elements in the array are to be added to the string, the constructor instantiates a string with ten characters, including two embedded nulls.</span></span> <span data-ttu-id="3723c-657">반면, 동일한 배열을 전달 하는 경우는 <xref:System.String.%23ctor%28System.Char%2A%29> 생성자의 결과 첫 번째 null 문자를 포함 하지 않는 4 자의 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-657">On the other hand, if the same array is passed to the <xref:System.String.%23ctor%28System.Char%2A%29> constructor, the result is a four-character string that does not include the first null character.</span></span>  
  
     [!code-cpp[System.String.ctor#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/chptrctor_null.cpp#5)]
     [!code-csharp[System.String.ctor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/chptrctor_null.cs#5)]  
  
     <span data-ttu-id="3723c-658">배열의는 유니코드 문자를 포함 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-658">The array must contain Unicode characters.</span></span> <span data-ttu-id="3723c-659">문자 배열 되도록 즉 c + +에서 관리 되는 것으로 정의 하거나 <xref:System.Char>형식 또는 관리 되지 않는`wchar_t`형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-659">In C++, this means that the character array must be defined either as the managed <xref:System.Char>[] type or the unmanaged`wchar_t`[] type.</span></span>  
  
     <span data-ttu-id="3723c-660">경우는 <xref:System.String.%23ctor%28System.Char%2A%29> 오버 로드 호출 되 고 때 배열의 null로 종료 하지 않은 경우는 <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> 오버 로드가 호출 됩니다 및 `startIndex`  +  `length`외부 메모리를 할당 된 문자 시퀀스에 대 한 범위를 포함 하는-1 생성자의 동작은 시스템에 종속 된 및 액세스 위반이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-660">If the <xref:System.String.%23ctor%28System.Char%2A%29> overload is called and the array is not null-terminated, or if the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> overload is called and `startIndex` + `length`-1 includes a range that it outside the memory allocated for the sequence of characters, the behavior of the constructor is system-dependent, and an access violation may occur.</span></span> <span data-ttu-id="3723c-661">또한 Intel Itanium 프로세서에 호출을 <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> 생성자가 throw 될 수 있습니다는 <xref:System.DataMisalignedException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-661">In addition, on the Intel Itanium processor, calls to the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> constructor may throw a <xref:System.DataMisalignedException> exception.</span></span> <span data-ttu-id="3723c-662">이 경우 호출 된 <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-662">If this occurs, call the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> instead.</span></span>  
  
-   <span data-ttu-id="3723c-663">부호 있는 바이트 배열에 대 한 포인터입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-663">From a pointer to a signed byte array.</span></span> <span data-ttu-id="3723c-664">전체 배열 또는 지정된 된 범위 수 데 사용할 문자열을 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-664">Either the entire array or a specified range can be used to initialize the string.</span></span> <span data-ttu-id="3723c-665">인코딩 기본 코드 페이지를 사용 하 여 바이트 시퀀스를 해석할 수 있습니다 또는 생성자 호출에서 인코딩을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-665">The sequence of bytes can be interpreted by using the default code page encoding, or an encoding can be specified in the constructor call.</span></span> <span data-ttu-id="3723c-666">생성자를 null로 종료 되지 않는 전체 배열에서 문자열을 인스턴스화하려고 시도 아니면에서 배열의 범위 `value`  +  `startIndex` 하려면 `value`  +  `startIndex`  +  `length` 배열에 대해 할당 된 메모리 외부-1은,이 생성자의 동작은 시스템에 종속 된 및 액세스 위반이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-666">If the constructor tries to instantiate a string from an entire array that is not null-terminated, or if the range of the array from `value` + `startIndex` to `value` + `startIndex` + `length` -1 is outside of the memory allocated for the array, the behavior of this constructor is system-dependent, and an access violation may occur.</span></span>  
  
     <span data-ttu-id="3723c-667">부호 있는 바이트 배열을 매개 변수로 포함 하는 세 가지 생성자는 주로 c + +를 변환할 설계 `char` 이 예와 같이 문자열로 배열:</span><span class="sxs-lookup"><span data-stu-id="3723c-667">The three constructors that include a signed byte array as a parameter are designed primarily to convert a C++ `char` array to a string, as shown in this example:</span></span>  
  
     [!code-cpp[System.String.Ctor#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/sbyte_ctor1.cpp#4)]  
  
     <span data-ttu-id="3723c-668">값이 0 인 모든 null 문자 ('\0') 또는 바이트 배열에 있는 경우와 <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> 오버 로드 호출 되 면 포함 된 문자열 인스턴스 `length` 문자를 포함 하 여 null을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-668">If the array contains any null characters ('\0') or bytes whose value is 0 and the <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> overload is called, the string instance contains `length` characters including any embedded nulls.</span></span> <span data-ttu-id="3723c-669">다음 예제에서는 두 개의 null 문자를 포함 하는 요소가 10 개인 배열에 대 한 포인터에 전달 될 때 일어나는 <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-669">The following example shows what happens when a pointer to an array of 10 elements that includes two null characters is passed to the <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="3723c-670">주소는 배열의 시작 부분 문자열에 추가할 배열의 모든 요소 이기 때문에 생성자 내장된 된 null이 두 가지를 포함 하는 10 개의 문자를 사용 하 여 문자열을 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-670">Because the address is the beginning of the array and all elements in the array are to be added to the string, the constructor instantiates a string with ten characters, including two embedded nulls.</span></span> <span data-ttu-id="3723c-671">반면, 동일한 배열을 전달 하는 경우는 <xref:System.String.%23ctor%28System.SByte%2A%29> 생성자의 결과 첫 번째 null 문자를 포함 하지 않는 4 자의 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-671">On the other hand, if the same array is passed to the <xref:System.String.%23ctor%28System.SByte%2A%29> constructor, the result is a four-character string that does not include the first null character.</span></span>  
  
     [!code-cpp[System.String.ctor#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/ptrctor_null.cpp#6)]
     [!code-csharp[System.String.ctor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ptrctor_null.cs#6)]  
  
     <span data-ttu-id="3723c-672">때문에 합니다 <xref:System.String.%23ctor%28System.SByte%2A%29> 하 고 <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> 생성자 해석 `value` 기본 ANSI 코드 페이지를 사용 하 여 동일한 바이트 배열 사용 하는 이러한 생성자를 호출 합니다. 만들 수 있습니다 다른 시스템에서 다른 값이 있는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-672">Because the <xref:System.String.%23ctor%28System.SByte%2A%29> and <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> constructors interpret `value` by using the default ANSI code page, calling these constructors with identical byte arrays may create strings that have different values on different systems.</span></span>  
  
<a name="Repetitive"></a>   
## <a name="handling-repetitive-strings"></a><span data-ttu-id="3723c-673">반복적인 문자열 처리</span><span class="sxs-lookup"><span data-stu-id="3723c-673">Handling repetitive strings</span></span>  
 <span data-ttu-id="3723c-674">구문 분석 하거나 자주 스트림의 텍스트를 디코딩하는 앱을 사용 합니다 <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 생성자 또는 <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 문자의 시퀀스를 문자열로 변환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-674">Apps that parse or decode streams of text often use the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor or the <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to convert sequences of characters into a string.</span></span> <span data-ttu-id="3723c-675">반복적으로 만들고 하나의 문자열을 다시 사용 하는 대신 동일한 값을 사용 하 여 새 문자열 만들기 메모리가 낭비 되 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-675">Repeatedly creating new strings with the same value instead of creating and reusing one string wastes memory.</span></span> <span data-ttu-id="3723c-676">동일한 문자열 값을 반복적으로 호출 하 여 만들 수 있는 경우는 <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 생성자에서 알 수 없는 경우에 이동 수 있는 이러한 동일한 문자열 값을 조회 테이블을 대신 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-676">If you are likely to create the same string value repeatedly by calling the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor, even if you don't know in advance what those identical string values may be, you can use a lookup table instead.</span></span>  
  
 <span data-ttu-id="3723c-677">예를 들어 읽고 XML 태그 및 특성을 포함 하는 파일에서 문자 스트림 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-677">For example, suppose you read and parse a stream of characters from a file that contains XML tags and attributes.</span></span> <span data-ttu-id="3723c-678">스트림을 구문 분석 하는 경우 특정 토큰 (즉, 기호화 된 의미가 있는 문자 시퀀스) 반복적으로 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-678">When you parse the stream, you repeatedly encounter certain tokens (that is, sequences of characters that have a symbolic meaning).</span></span> <span data-ttu-id="3723c-679">"0", "1", "true" 및 "false" 문자열에 해당 하는 토큰은 XML 스트림에서 자주 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-679">Tokens equivalent to the strings "0", "1", "true", and "false" are likely to occur frequently in an XML stream.</span></span>  
  
 <span data-ttu-id="3723c-680">각 토큰으로 새 문자열로 변환 하는 대신 만들 수 있습니다는 <xref:System.Xml.NameTable?displayProperty=nameWithType> 일반적으로 발생 하는 문자열을 저장 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-680">Instead of converting each token into a new string, you can create a <xref:System.Xml.NameTable?displayProperty=nameWithType> object to hold commonly occurring strings.</span></span> <span data-ttu-id="3723c-681"><xref:System.Xml.NameTable> 개체 임시 메모리를 할당 하지 않고 저장 된 문자열을 검색 하므로 성능이 향상 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-681">The <xref:System.Xml.NameTable> object improves performance, because it retrieves stored strings without allocating temporary memory.</span></span> <span data-ttu-id="3723c-682">사용 하 여 토큰을 발생 하는 경우는 <xref:System.Xml.NameTable.Get%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 테이블에서 토큰을 검색 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-682">When you encounter a token, use the <xref:System.Xml.NameTable.Get%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to retrieve the token from the table.</span></span> <span data-ttu-id="3723c-683">토큰이 있으면 메서드는 해당 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-683">If the token exists, the method returns the corresponding string.</span></span> <span data-ttu-id="3723c-684">토큰 존재 하지 않는 경우 사용 하 여를 <xref:System.Xml.NameTable.Add%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 메서드 테이블을 사용 하 여 토큰을 삽입 하는 데 해당 문자열을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-684">If the token does not exist, use the <xref:System.Xml.NameTable.Add%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to insert the token into the table and to get the corresponding string.</span></span>  
  
<a name="Ctor1_Example"></a>   
## <a name="example-1-using-string-assignment"></a><span data-ttu-id="3723c-685">문자열 할당을 사용 하는 예 1:</span><span class="sxs-lookup"><span data-stu-id="3723c-685">Example 1: Using string assignment</span></span>  
 <span data-ttu-id="3723c-686">다음 예제에서는 문자열 리터럴을 할당 하 여 새 문자열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-686">The following example creates a new string by assigning it a string literal.</span></span> <span data-ttu-id="3723c-687">두 번째 문자열에 첫 번째 문자열의 값을 할당 하 여 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-687">It creates a second string by assigning the value of the first string to it.</span></span> <span data-ttu-id="3723c-688">이 두 가지 가장 일반적인 새 <xref:System.String> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-688">These are the two most common ways to instantiate a new <xref:System.String> object.</span></span>  
  
 [!code-cpp[System.String.ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/assignment.cpp#1)]
 [!code-csharp[System.String.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.String.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.ctor/vb/ctor1.vb#1)]  
  
<a name="Ctor2_Example"></a>   
## <a name="example-2-using-a-character-array"></a><span data-ttu-id="3723c-689">예제 2: 문자 배열 사용</span><span class="sxs-lookup"><span data-stu-id="3723c-689">Example 2: Using a character array</span></span>  
 <span data-ttu-id="3723c-690">다음 예제에서는 새 <xref:System.String> 문자 배열에서 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-690">The following example demonstrates how to create a new <xref:System.String> object from a character array.</span></span>  
  
 [!code-cpp[stringexample1#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp#1)]
 [!code-csharp[stringexample1#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs#1)]
 [!code-vb[stringexample1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringexample1/VB/source.vb#1)]  
  
<a name="Ctor3_Example"></a>   
## <a name="example-3-using-a-portion-of-a-character-array-and-repeating-a-single-character"></a><span data-ttu-id="3723c-691">예제 3: 문자 배열의 일부를 사용 하 고 단일 문자를 반복 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-691">Example 3: Using a portion of a character array and repeating a single character</span></span>  
 <span data-ttu-id="3723c-692">다음 예제에서는 새로 만드는 방법을 보여 줍니다 <xref:System.String> 개체를 만들기 위한 방법과 문자 배열에 부분에서 <xref:System.String> 단일 문자를 여러 번 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-692">The following example demonstrates how to create a new <xref:System.String> object from a portion of a character array, and how to create a new <xref:System.String> object that contains multiple occurrences of a single character.</span></span>  
  
 [!code-cpp[stringexample1#3](~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp#3)]
 [!code-csharp[stringexample1#3](~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs#3)]
 [!code-vb[stringexample1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringexample1/VB/source.vb#3)]  
  
<a name="Ctor4_Example"></a>   
## <a name="example-4-using-a-pointer-to-a-character-array"></a><span data-ttu-id="3723c-693">예제 4: 문자 배열에 대 한 포인터를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="3723c-693">Example 4: Using a pointer to a character array</span></span>  
 <span data-ttu-id="3723c-694">다음 예제에서는 새 <xref:System.String> 문자의 배열에 대 한 포인터에서 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-694">The following example demonstrates how to create a new <xref:System.String> object from a pointer to an array of characters.</span></span> <span data-ttu-id="3723c-695">C# 예제를 사용 하 여 컴파일해야 합니다 `/unsafe` 컴파일러 스위치입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-695">The C# example must be compiled by using the `/unsafe` compiler switch.</span></span>  
  
 [!code-cpp[System.String.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/char1_ctor.cpp#2)]
 [!code-csharp[System.String.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ctor2.cs#2)]  
  
<a name="Ctor5_Example"></a>   
## <a name="example-5-instantiating-a-string-from-a-pointer-and-a-range-of-an-array"></a><span data-ttu-id="3723c-696">예제 5: 포인터 및 배열 범위에서 문자열로 인스턴스화</span><span class="sxs-lookup"><span data-stu-id="3723c-696">Example 5: Instantiating a string from a pointer and a range of an array</span></span>  
 <span data-ttu-id="3723c-697">다음 예제에서는 마침표 또는 느낌표를 문자 배열의 요소를 검사합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-697">The following example examines the elements of a character array for either a period or an exclamation point.</span></span> <span data-ttu-id="3723c-698">을 찾으면 문장 부호 기호가 앞에 있는 배열의 문자에서 문자열을 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-698">If one is found, it instantiates a string from the characters in the array that precede the punctuation symbol.</span></span> <span data-ttu-id="3723c-699">그렇지 않은 경우 문자열 배열의 전체 내용으로 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-699">If not, it instantiates a string with the entire contents of the array.</span></span> <span data-ttu-id="3723c-700">C# 예제를 사용 하 여 컴파일해야 합니다 `/unsafe` 컴파일러 스위치입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-700">The C# example must be compiled using the `/unsafe` compiler switch.</span></span>  
  
 [!code-cpp[System.String.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/char2_ctor.cpp#3)]
 [!code-csharp[System.String.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/char2_ctor.cs#3)]  
  
<a name="Ctor6_Example"></a>   
## <a name="example-6-instantiating-a-string-from-a-pointer-to-a-signed-byte-array"></a><span data-ttu-id="3723c-701">예제 6: 부호 있는 바이트 배열에 대 한 포인터에서 문자열을 인스턴스화</span><span class="sxs-lookup"><span data-stu-id="3723c-701">Example 6: Instantiating a string from a pointer to a signed byte array</span></span>  
 <span data-ttu-id="3723c-702">다음 예제에서는 어떻게의 인스턴스를 만들 수 있습니다 합니다 <xref:System.String> 클래스는 <xref:System.String.%23ctor%28System.SByte%2A%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-702">The following example demonstrates how you can create an instance of the <xref:System.String> class with the <xref:System.String.%23ctor%28System.SByte%2A%29> constructor.</span></span>  
  
 [!code-cpp[stringexample1#2](~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp#2)]
 [!code-csharp[stringexample1#2](~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs#2)]  
  
<a name="Versions"></a>   
## <a name="version-information"></a><span data-ttu-id="3723c-703">버전 정보</span><span class="sxs-lookup"><span data-stu-id="3723c-703">Version information</span></span>  
 <span data-ttu-id="3723c-704">.NET Framework</span><span class="sxs-lookup"><span data-stu-id="3723c-704">.NET Framework</span></span>  
 <span data-ttu-id="3723c-705">모든 오버 로드에 지원 됩니다: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span><span class="sxs-lookup"><span data-stu-id="3723c-705">All overloads are supported in: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span></span>  
  
 <span data-ttu-id="3723c-706">.NET Framework Client Profile</span><span class="sxs-lookup"><span data-stu-id="3723c-706">.NET Framework Client Profile</span></span>  
 <span data-ttu-id="3723c-707">모든 오버 로드에 지원 됩니다: 4, 3.5 SP1</span><span class="sxs-lookup"><span data-stu-id="3723c-707">All overloads are supported in: 4, 3.5 SP1</span></span>  
  
 <span data-ttu-id="3723c-708">이식 가능한 클래스 라이브러리</span><span class="sxs-lookup"><span data-stu-id="3723c-708">Portable Class Library</span></span>  
 <span data-ttu-id="3723c-709">없이 모든 오버 로드는 <xref:System.SByte> `*` 매개 변수는 지원</span><span class="sxs-lookup"><span data-stu-id="3723c-709">All overloads without an <xref:System.SByte>`*` parameter are supported</span></span>  
  
 <span data-ttu-id="3723c-710">Windows 스토어 앱용 .NET</span><span class="sxs-lookup"><span data-stu-id="3723c-710">.NET for Windows Store apps</span></span>  
 <span data-ttu-id="3723c-711">없이 모든 오버 로드는 <xref:System.SByte> `*` 매개 변수에서 지원 됩니다: Windows 8</span><span class="sxs-lookup"><span data-stu-id="3723c-711">All overloads without an <xref:System.SByte>`*` parameter are supported in: Windows 8</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char* value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char* value);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;char&gt; -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-712">null로 끝나는 유니코드 문자 배열에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-712">A pointer to a null-terminated array of Unicode characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-713">유니코드 문자 배열에 대한 지정된 포인터가 가리키는 값으로 <see cref="T:System.String" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-713">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3723c-714">이 및 기타에 대 한 포괄적인 사용 정보와 예제 `String` 생성자 오버 로드를 참조 합니다 <xref:System.String.%23ctor%2A> 생성자 요약 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-714">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-715">현재 프로세스에 주소가 지정된 모든 문자에 대한 읽기 액세스 권한이 있는 것은 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-715">The current process does not have read access to all the addressed characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-716">
            <paramref name="value" />에 잘못된 유니코드 문자가 들어 있는 배열이 지정되거나 <paramref name="value" />에 64000보다 작은 주소가 지정된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-716">
              <paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> specifies an address less than 64000.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="3723c-717">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-717">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="3723c-718">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-718">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(cli::array &lt;char&gt; ^ value);" />
      <MemberSignature Language="F#" Value="new string : char[] -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-719">유니코드 문자 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-719">An array of Unicode characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-720">유니코드 문자 배열에서 나타내는 값으로 <see cref="T:System.String" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-720">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3723c-721">이 및 기타에 대 한 포괄적인 사용 정보와 예제 `String` 생성자 오버 로드를 참조 합니다 <xref:System.String.%23ctor%2A> 생성자 요약 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-721">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="new string : ReadOnlySpan&lt;char&gt; -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;sbyte&gt; -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-722">null로 끝나는 8비트 부호 있는 정수 배열에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-722">A pointer to a null-terminated array of 8-bit signed integers.</span>
          </span>
          <span data-ttu-id="3723c-723">정수는 현재 시스템 코드 페이지 인코딩(즉, <see cref="P:System.Text.Encoding.Default" />로 지정된 인코딩)을 사용하여 해석됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-723">The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-724">8비트 부호 있는 정수 배열에 대한 포인터가 나타내는 값으로 <see cref="T:System.String" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-724">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a pointer to an array of 8-bit signed integers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3723c-725">이 및 기타에 대 한 포괄적인 사용 정보와 예제 `String` 생성자 오버 로드를 참조 합니다 <xref:System.String.%23ctor%2A> 생성자 요약 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-725">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-726">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-726">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-727">
            <paramref name="value" />가 ANSI로 인코딩되었다고 가정하고 <see cref="T:System.String" />의 새 인스턴스를 <paramref name="value" />를 사용하여 초기화할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-727">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-728">
            <paramref name="value" />의 null 종결 문자로 결정되는 초기화할 새 문자열의 길이가 너무 커서 할당할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-728">The length of the new string to initialize, which is determined by the null termination character of <paramref name="value" />, is too large to allocate.</span>
          </span>
        </exception>
        <exception cref="T:System.AccessViolationException">
          <span data-ttu-id="3723c-729">
            <paramref name="value" />가 잘못된 주소를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-729">
              <paramref name="value" /> specifies an invalid address.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="3723c-730">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-730">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="3723c-731">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-731">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char c, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char c, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (c As Char, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char c, int count);" />
      <MemberSignature Language="F#" Value="new string : char * int -&gt; string" Usage="new System.string (c, count)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="3723c-732">유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-732">A Unicode character.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-733">
            <c>c</c>가 발생하는 횟수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-733">The number of times <c>c</c> occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-734">지정한 횟수만큼 반복되는 지정된 유니코드 문자가 나타내는 값으로 <see cref="T:System.String" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-734">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified Unicode character repeated a specified number of times.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3723c-735">이 및 기타에 대 한 포괄적인 사용 정보와 예제 `String` 생성자 오버 로드를 참조 합니다 <xref:System.String.%23ctor%2A> 생성자 요약 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-735">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-736">
            <paramref name="count" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-736">
              <paramref name="count" /> is less than zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char* value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char* value, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;char&gt; * int * int -&gt; string" Usage="new System.string (value, startIndex, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-737">유니코드 문자 배열에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-737">A pointer to an array of Unicode characters.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-738">
            <c>값</c> 내의 시작 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-738">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3723c-739">
            <c>value</c> 내에서 사용할 문자의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-739">The number of characters within <c>value</c> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-740">유니코드 문자 배열에 대한 지정된 포인터가 나타내는 값, 해당 배열 내의 시작 문자 위치 및 길이로 <see cref="T:System.String" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-740">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3723c-741">이 및 기타에 대 한 포괄적인 사용 정보와 예제 `String` 생성자 오버 로드를 참조 합니다 <xref:System.String.%23ctor%2A> 생성자 요약 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-741">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-742">
            <paramref name="startIndex" /> 또는 <paramref name="length" />가 0보다 작거나 <paramref name="value" /> + <paramref name="startIndex" />로 인해 포인터 오버플로가 발생하거나, 현재 프로세스에서 주소가 지정된 모든 문자에 대한 읽기 액세스 권한을 갖지는 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-742">
              <paramref name="startIndex" /> or <paramref name="length" /> is less than zero, <paramref name="value" /> + <paramref name="startIndex" /> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-743">
            <paramref name="value" />는 잘못된 유니코드 문자가 포함된 배열을 지정하거나 <paramref name="value" /> + <paramref name="startIndex" />가 64000보다 작은 주소를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-743">
              <paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> + <paramref name="startIndex" /> specifies an address less than 64000.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="3723c-744">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-744">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="3723c-745">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-745">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char[] value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char[] value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Char(), startIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(cli::array &lt;char&gt; ^ value, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="new string : char[] * int * int -&gt; string" Usage="new System.string (value, startIndex, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-746">유니코드 문자 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-746">An array of Unicode characters.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-747">
            <c>값</c> 내의 시작 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-747">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3723c-748">
            <c>value</c> 내에서 사용할 문자의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-748">The number of characters within <c>value</c> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-749">유니코드 문자 배열에서 나타내는 값, 해당 배열 내의 시작 문자 위치 및 길이로 <see cref="T:System.String" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-749">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3723c-750">이 및 기타에 대 한 포괄적인 사용 정보와 예제 `String` 생성자 오버 로드를 참조 합니다 <xref:System.String.%23ctor%2A> 생성자 요약 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-750">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-751">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-751">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-752">
            <paramref name="startIndex" /> 또는 <paramref name="length" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-752">
              <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span>
          </span>
          <span data-ttu-id="3723c-753">-또는-  <paramref name="startIndex" />와 <paramref name="length" />의 합계가 <paramref name="value" />의 요소 수보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-753">-or-  The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the number of elements in <paramref name="value" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;sbyte&gt; * int * int -&gt; string" Usage="new System.string (value, startIndex, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-754">8비트 부호 있는 정수에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-754">A pointer to an array of 8-bit signed integers.</span>
          </span>
          <span data-ttu-id="3723c-755">정수는 현재 시스템 코드 페이지 인코딩(즉, <see cref="P:System.Text.Encoding.Default" />로 지정된 인코딩)을 사용하여 해석됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-755">The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-756">
            <c>값</c> 내의 시작 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-756">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3723c-757">
            <c>value</c> 내에서 사용할 문자의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-757">The number of characters within <c>value</c> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-758">8비트 부호 있는 정수 배열에 대한 지정된 포인터가 나타내는 값, 해당 배열 내의 시작 위치 및 길이로 <see cref="T:System.String" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-758">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3723c-759">이 및 기타에 대 한 포괄적인 사용 정보와 예제 `String` 생성자 오버 로드를 참조 합니다 <xref:System.String.%23ctor%2A> 생성자 요약 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-759">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-760">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-760">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-761">
            <paramref name="startIndex" /> 또는 <paramref name="length" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-761">
              <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span>
          </span>
          <span data-ttu-id="3723c-762">-또는-  <paramref name="value" /> + <paramref name="startIndex" />로 지정된 주소가 현재 플랫폼에 비해 너무 큽니다. 즉, 주소 계산이 오버플로됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-762">-or-  The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.</span>
          </span>
          <span data-ttu-id="3723c-763">-또는-  초기화할 새 문자열의 길이가 너무 커서 할당할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-763">-or-  The length of the new string to initialize is too large to allocate.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-764">
            <paramref name="value" /> + <paramref name="startIndex" />로 지정된 주소가 64K 미만입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-764">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.</span>
          </span>
          <span data-ttu-id="3723c-765">-또는-  <paramref name="value" />가 ANSI로 인코딩되었다고 가정하고 <see cref="T:System.String" />의 새 인스턴스를 <paramref name="value" />를 사용하여 초기화할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-765">-or-  A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</span>
          </span>
        </exception>
        <exception cref="T:System.AccessViolationException">
          <span data-ttu-id="3723c-766">
            <paramref name="value" />, <paramref name="startIndex" /> 및 <paramref name="length" />가 전체적으로 잘못된 주소를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-766">
              <paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="3723c-767">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-767">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="3723c-768">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-768">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value, int startIndex, int length, System.Text.Encoding enc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value, int32 startIndex, int32 length, class System.Text.Encoding enc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value, int startIndex, int length, System::Text::Encoding ^ enc);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;sbyte&gt; * int * int * System.Text.Encoding -&gt; string" Usage="new System.string (value, startIndex, length, enc)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="enc" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-769">8비트 부호 있는 정수에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-769">A pointer to an array of 8-bit signed integers.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-770">
            <c>값</c> 내의 시작 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-770">The starting position within <c>value</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3723c-771">
            <c>value</c> 내에서 사용할 문자의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-771">The number of characters within <c>value</c> to use.</span>
          </span>
        </param>
        <param name="enc">
          <span data-ttu-id="3723c-772">
            <c>value</c>에서 참조하는 배열이 인코딩되는 방법을 지정하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-772">An object that specifies how the array referenced by <c>value</c> is encoded.</span>
          </span>
          <span data-ttu-id="3723c-773">
            <c>enc</c>가 <see langword="null" />이면 ANSI 인코딩으로 간주됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-773">If <c>enc</c> is <see langword="null" />, ANSI encoding is assumed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-774">8비트 부호 있는 정수 배열에 대한 지정된 포인터가 나타내는 값, 해당 배열 내의 시작 문자 위치, 길이 및 <see cref="T:System.String" /> 개체로 <see cref="T:System.Text.Encoding" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-774">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <see cref="T:System.Text.Encoding" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3723c-775">이 및 기타에 대 한 포괄적인 사용 정보와 예제 `String` 생성자 오버 로드를 참조 합니다 <xref:System.String.%23ctor%2A> 생성자 요약 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-775">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-776">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-776">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-777">
            <paramref name="startIndex" /> 또는 <paramref name="length" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-777">
              <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span>
          </span>
          <span data-ttu-id="3723c-778">-또는-  <paramref name="value" /> + <paramref name="startIndex" />로 지정된 주소가 현재 플랫폼에 비해 너무 큽니다. 즉, 주소 계산이 오버플로됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-778">-or-  The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.</span>
          </span>
          <span data-ttu-id="3723c-779">-또는-  초기화할 새 문자열의 길이가 너무 커서 할당할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-779">-or-  The length of the new string to initialize is too large to allocate.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-780">
            <paramref name="value" /> + <paramref name="startIndex" />로 지정된 주소가 64K 미만입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-780">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.</span>
          </span>
          <span data-ttu-id="3723c-781">-또는-  <paramref name="value" />가 <paramref name="enc" />로 지정된 대로 인코딩되었다고 가정하고 <see cref="T:System.String" />의 새 인스턴스를 <paramref name="value" />를 사용하여 초기화할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-781">-or-  A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded as specified by <paramref name="enc" />.</span>
          </span>
        </exception>
        <exception cref="T:System.AccessViolationException">
          <span data-ttu-id="3723c-782">
            <paramref name="value" />, <paramref name="startIndex" /> 및 <paramref name="length" />가 전체적으로 잘못된 주소를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-782">
              <paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="3723c-783">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-783">requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="3723c-784">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-784">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Chars">
      <MemberSignature Language="C#" Value="public char this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Chars(int32)" />
      <MemberSignature Language="DocId" Value="P:System.String.Chars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Chars(index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char default[int] { char get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Chars(int) : char" Usage="System.string.Chars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3723c-785">현재 문자열의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-785">A position in the current string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-786">현재 <see cref="T:System.Char" /> 개체에서 지정된 문자 위치에 있는 <see cref="T:System.String" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-786">Gets the <see cref="T:System.Char" /> object at a specified position in the current <see cref="T:System.String" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3723c-787">
            <paramref name="index" /> 위치에 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-787">The object at position <paramref name="index" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-788">`index` 매개 변수는 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-788">The `index` parameter is zero-based.</span></span>  
  
 <span data-ttu-id="3723c-789">이 속성을 반환 합니다 <xref:System.Char> 로 지정 된 위치에 있는 개체는 `index` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-789">This property returns the <xref:System.Char> object at the position specified by the `index` parameter.</span></span> <span data-ttu-id="3723c-790">그러나 둘 이상의 유니코드 문자를 표현 될 수 있습니다 <xref:System.Char>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-790">However, a Unicode character might be represented by more than one <xref:System.Char>.</span></span> <span data-ttu-id="3723c-791">사용 된 <xref:System.Globalization.StringInfo?displayProperty=nameWithType> 유니코드를 사용 하는 클래스는 문자 대신 <xref:System.Char> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-791">Use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> class to work with Unicode characters instead of <xref:System.Char> objects.</span></span> <span data-ttu-id="3723c-792">자세한 내용은 "개체 및 유니코드 문자 문자" 섹션을 참조 하세요.를 <xref:System.String> 클래스 개요입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-792">For more information, see the "Char Objects and Unicode Characters" section in the <xref:System.String> class overview.</span></span>  
  
 <span data-ttu-id="3723c-793">C#에서 <xref:System.String.Chars%2A> 속성 인덱서입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-793">In C#, the <xref:System.String.Chars%2A> property is an indexer.</span></span> <span data-ttu-id="3723c-794">Visual Basic에서는의 기본 속성을 <xref:System.String> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-794">In Visual Basic, it is the default property of the <xref:System.String> class.</span></span> <span data-ttu-id="3723c-795">각 <xref:System.Char> 다음과 같은 코드를 사용 하 여 문자열에서 개체를 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-795">Each <xref:System.Char> object in the string can be accessed by using code such as the following.</span></span>  
  
 [!code-csharp[System.String.Chars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.chars/cs/chars1.cs#1)]
 [!code-vb[System.String.Chars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.chars/vb/chars1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-796">다음 예제에서는 문자열의 유효성을 검사 하는 루틴에이 인덱서를 사용할 수는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-796">The following example demonstrates how you can use this indexer in a routine to validate a string.</span></span>  
  
 [!code-cpp[Uri_IsHexDigit#1](~/samples/snippets/cpp/VS_Snippets_CLR/Uri_IsHexDigit/CPP/uri_ishexdigit.cpp#1)]
 [!code-csharp[Uri_IsHexDigit#1](~/samples/snippets/csharp/VS_Snippets_CLR/Uri_IsHexDigit/CS/uri_ishexdigit.cs#1)]
 [!code-vb[Uri_IsHexDigit#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Uri_IsHexDigit/VB/uri_ishexdigit.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="3723c-797">
            <paramref name="index" />가 이 개체의 길이보다 크거나 같거나 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-797">
              <paramref name="index" /> is greater than or equal to the length of this object or less than zero.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.GetEnumerator" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="string.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-798">이 <see cref="T:System.String" />의 이 인스턴스에 대한 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-798">Returns a reference to this instance of <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-799">이 <see cref="T:System.String" />의 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-799">This instance of <see cref="T:System.String" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-800">반환 값이이 인스턴스;의 독립 복사본 아닙니다. 동일한 데이터의 다른 뷰입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-800">The return value is not an independent copy of this instance; it is simply another view of the same data.</span></span> <span data-ttu-id="3723c-801">사용 된 <xref:System.String.Copy%2A> 또는 <xref:System.String.CopyTo%2A> 메서드를 별도 <xref:System.String> 이 인스턴스와 같은 값을 가진 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-801">Use the <xref:System.String.Copy%2A> or <xref:System.String.CopyTo%2A> method to create a separate <xref:System.String> object with the same value as this instance.</span></span>  
  
 <span data-ttu-id="3723c-802">때문에 <xref:System.String.Clone%2A> 메서드를 직접 호출할 필요가 거의 메서드는 단순히 기존 문자열 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-802">Because the <xref:System.String.Clone%2A> method simply returns the existing string instance, there is little reason to call it directly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Copy(System.String)" />
        <altmember cref="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-803">지정된 두 <see cref="T:System.String" /> 개체를 비교하고 정렬 순서에서 두 개체의 상대 위치를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-803">Compares two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-804"><xref:System.String.Compare%2A> 메서드의 모든 오버로드는 두 비교 대상 간의 어휘 관계를 나타내는 부호 있는 32비트 정수를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-804">All overloads of the <xref:System.String.Compare%2A> method return a 32-bit signed integer indicating the lexical relationship between the two comparands.</span></span>  
  
|<span data-ttu-id="3723c-805">값</span><span class="sxs-lookup"><span data-stu-id="3723c-805">Value</span></span>|<span data-ttu-id="3723c-806">조건</span><span class="sxs-lookup"><span data-stu-id="3723c-806">Condition</span></span>|  
|-----------|---------------|  
|<span data-ttu-id="3723c-807">0보다 작음</span><span class="sxs-lookup"><span data-stu-id="3723c-807">Less than zero</span></span>|<span data-ttu-id="3723c-808">첫 번째 부분 정렬 순서에서 두 번째 부분 문자열 앞에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-808">The first substring precedes the second substring in the sort order.</span></span>|  
|<span data-ttu-id="3723c-809">0</span><span class="sxs-lookup"><span data-stu-id="3723c-809">Zero</span></span>|<span data-ttu-id="3723c-810">부분 문자열이 정렬 순서에서 같은 위치에 나오거나 `length`가 0인 경우</span><span class="sxs-lookup"><span data-stu-id="3723c-810">The substrings occur in the same position in the sort order, or `length` is zero.</span></span>|  
|<span data-ttu-id="3723c-811">0보다 큼</span><span class="sxs-lookup"><span data-stu-id="3723c-811">Greater than zero</span></span>|<span data-ttu-id="3723c-812">첫 번째 부분 문자열이 정렬 순서에서 두 번째 부분 문자열을 따릅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-812">The first substring follows the second substring in the sort order.</span></span>|  
  
> [!WARNING]
>  <span data-ttu-id="3723c-813">가능한 경우 항상 오버 로드를 호출 해야 합니다 <xref:System.String.Compare%2A> 포함 하는 메서드를 <xref:System.StringComparison> 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="3723c-813">Whenever possible, you should call an overload of the <xref:System.String.Compare%2A> method that includes a <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="3723c-814">자세한 내용은 [문자열 사용에 대한 모범 사례](~/docs/standard/base-types/best-practices-strings.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-814">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string -&gt; int" Usage="System.string.Compare (strA, strB)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strA">
          <span data-ttu-id="3723c-815">비교할 첫째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-815">The first string to compare.</span>
          </span>
        </param>
        <param name="strB">
          <span data-ttu-id="3723c-816">비교할 둘째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-816">The second string to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-817">지정된 두 <see cref="T:System.String" /> 개체를 비교하고 정렬 순서에서 두 개체의 상대 위치를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-817">Compares two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-818">두 비교 대상 간의 어휘 관계를 나타내는 32비트 부호 있는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-818">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span>
          </span>
          <span data-ttu-id="3723c-819">
            <list type="table">
              <listheader>
                <term> 값  </term>
                <description> 조건  </description>
              </listheader>
              <item>
                <term> 0 보다 작음  </term>
                <description>
                  <paramref name="strA" />가 정렬 순서에서 <paramref name="strB" /> 앞에 옵니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <paramref name="strA" />가 정렬 순서에서 <paramref name="strB" />와 동일한 위치에서 발생합니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description>
                  <paramref name="strA" />가 정렬 순서에서 <paramref name="strB" /> 뒤에 옵니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-819">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description>
                    <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description>
                    <paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description>
                    <paramref name="strA" /> follows <paramref name="strB" /> in the sort order.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-820">비교는 대/소문자 규칙 등의 개별 문자가 사전순 문화권별 형식 정보를 가져올 현재 문화권을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-820">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="3723c-821">예를 들어, 특정 문자 조합의 단일 문자로 처리 되거나 대 문자와 소문자를 특정 방식으로 비교는 문화권을 지정할 수 있습니다 또는 문자의 정렬 순서 앞에 있는 문자에 따라 달라 지는 또는 따라서 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-821">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="3723c-822">단어 정렬 규칙을 사용 하 여 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-822">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="3723c-823">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-823">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="3723c-824">문자열을 비교할 때 호출 해야 합니다 <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> 메서드를 메서드를 사용 하는 문자열 비교의 형식을 명시적으로 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-824">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="3723c-825">자세한 내용은 [문자열 사용에 대한 모범 사례](~/docs/standard/base-types/best-practices-strings.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-825">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="3723c-826">하나 또는 둘 다 비교 대상이 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-826">One or both comparands can be `null`.</span></span> <span data-ttu-id="3723c-827">기본적으로 모든 문자열을 포함 하 여 빈 문자열 (""), null 참조일; 보다 큼 비교 와 두 null 참조가 서로 같은지 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-827">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="3723c-828">비교는 같지 않음 검색 하거나 두 문자열 요소가 비교 된 때를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-828">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="3723c-829">그러나 두 문자열을 비교 하 여 한 문자열의 끝을 다른 문자열에 문자가 남아 다음 나머지 문자를 사용 하 여 문자열은 큰 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-829">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="3723c-830">반환 값은 마지막으로 수행한 비교의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-830">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="3723c-831">비교는 문화권별 대/소문자 규칙에 의해 영향을 받는 예기치 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-831">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="3723c-832">예를 들어, 터키어, 다음 예제에서는 잘못 된 결과가 발생의 파일 시스템에서 문자 "i"에 대 한 대/소문자 규칙을 사용 하지 않으므로 "파일"에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-832">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#10)]
 [!code-csharp[System.String.Compare#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#10)]
 [!code-vb[System.String.Compare#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#10)]  
  
 <span data-ttu-id="3723c-833">"File"는 서 수 비교를 사용 하 여 경로 이름을 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-833">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="3723c-834">이렇게 하려면 올바른 코드를 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-834">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#11)]
 [!code-csharp[System.String.Compare#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#11)]
 [!code-vb[System.String.Compare#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#11)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-835">다음 예제에서는 <xref:System.String.Compare%28System.String%2CSystem.String%29> 세 가지 문자열을 비교 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-835">The following example calls the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to compare three sets of strings.</span></span>  
  
 [!code-cpp[System.String.Compare#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/compare02.cpp#18)]
 [!code-csharp[System.String.Compare#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare02.cs#18)]
 [!code-vb[System.String.Compare#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare02.vb#18)]  
  
 <span data-ttu-id="3723c-836">다음 예제에서는 `ReverseStringComparer` 클래스에서는 두 문자열을 계산 하는 방법을 보여 줍니다.를 <xref:System.String.Compare%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-836">In the following example, the `ReverseStringComparer` class demonstrates how you can evaluate two strings with the <xref:System.String.Compare%2A> method.</span></span>  
  
 [!code-cpp[ArrayList#7](~/samples/snippets/cpp/VS_Snippets_CLR/ArrayList/CPP/ArrayListSample.cpp#7)]
 [!code-csharp[ArrayList#7](~/samples/snippets/csharp/VS_Snippets_CLR/ArrayList/CS/ArrayListSample.cs#7)]
 [!code-vb[ArrayList#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/ArrayList/VB/ArrayListSample.vb#7)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-837">
            <para>문자 집합에는 무시할 수 있는 문자가 포함 됩니다. <see cref="M:System.String.Compare(System.String,System.String)" /> 메서드 문화권 구분 비교를 수행 하는 경우 이러한 문자를 고려 하지 않습니다. 예를 들어 다음 코드에서 실행 되는 [! INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 하거나 나중에 "ani-잘못 되었습니다." (사용자 지정 하이픈, 또는 U + 00AD 사용)를 사용 하 여 "animal"의 문화권 구분 비교를 두 문자열이 같은지를 나타냅니다.  [! csharp 코드 [System.String.Compare#21] (~/samples/snippets/csharp/VS_Snippets_CLR_System/시스템입니다. String.Compare/cs/compare21.cs#21)] [! vb 코드 [System.String.Compare#21] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/시스템입니다. String.Compare/vb/compare21.vb#21)] 호출의 문자열 비교를 무시할 수 있는 문자를 인식 하는 <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> 메서드와의 값을 제공 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 또는 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> 'comparisonType' 매개 변수에 대 한 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-837">
              <para>Character sets include ignorable characters. The <see cref="M:System.String.Compare(System.String,System.String)" /> method does not consider such characters when it performs a culture-sensitive comparison. For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a culture-sensitive comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.  [!code-csharp[System.String.Compare#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare21.cs#21)] [!code-vb[System.String.Compare#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare21.vb#21)]  To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the `comparisonType` parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, ignoreCase As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * bool -&gt; int" Usage="System.string.Compare (strA, strB, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="strA">
          <span data-ttu-id="3723c-838">비교할 첫째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-838">The first string to compare.</span>
          </span>
        </param>
        <param name="strB">
          <span data-ttu-id="3723c-839">비교할 둘째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-839">The second string to compare.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="3723c-840">비교 시 대/소문자를 무시하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-840">
              <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-841">대/소문자를 구분하거나 구분하지 않고 지정된 두 <see cref="T:System.String" /> 개체를 비교하여 정렬 순서에서 두 개체의 상대 위치를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-841">Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-842">두 비교 대상 간의 어휘 관계를 나타내는 32비트 부호 있는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-842">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span>
          </span>
          <span data-ttu-id="3723c-843">
            <list type="table">
              <listheader>
                <term> 값  </term>
                <description> 조건  </description>
              </listheader>
              <item>
                <term> 0 보다 작음  </term>
                <description>
                  <paramref name="strA" />가 정렬 순서에서 <paramref name="strB" /> 앞에 옵니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <paramref name="strA" />가 정렬 순서에서 <paramref name="strB" />와 동일한 위치에서 발생합니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description>
                  <paramref name="strA" />가 정렬 순서에서 <paramref name="strB" /> 뒤에 옵니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-843">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description>
                    <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description>
                    <paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description>
                    <paramref name="strA" /> follows <paramref name="strB" /> in the sort order.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-844">비교는 대/소문자 규칙 등의 개별 문자가 사전순 문화권별 형식 정보를 가져올 현재 문화권을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-844">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="3723c-845">예를 들어, 특정 문자 조합의 단일 문자로 처리 되거나 대 문자와 소문자를 특정 방식으로 비교는 문화권을 지정할 수 있습니다 또는 문자의 정렬 순서 앞에 있는 문자에 따라 달라 지는 또는 따라서 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-845">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="3723c-846">단어 정렬 규칙을 사용 하 여 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-846">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="3723c-847">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-847">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="3723c-848">문자열을 비교할 때 호출 해야 합니다 <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> 메서드를 메서드를 사용 하는 문자열 비교의 형식을 명시적으로 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-848">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="3723c-849">자세한 내용은 [문자열 사용에 대한 모범 사례](~/docs/standard/base-types/best-practices-strings.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-849">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="3723c-850">하나 또는 둘 다 비교 대상이 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-850">One or both comparands can be `null`.</span></span> <span data-ttu-id="3723c-851">기본적으로 모든 문자열을 포함 하 여 빈 문자열 (""), null 참조일; 보다 큼 비교 와 두 null 참조가 서로 같은지 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-851">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="3723c-852">비교는 같지 않음 검색 하거나 두 문자열 요소가 비교 된 때를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-852">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="3723c-853">그러나 두 문자열을 비교 하 여 한 문자열의 끝을 다른 문자열에 문자가 남아 다음 나머지 문자를 사용 하 여 문자열은 큰 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-853">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="3723c-854">반환 값은 마지막으로 수행한 비교의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-854">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="3723c-855">비교는 문화권별 대/소문자 규칙에 의해 영향을 받는 예기치 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-855">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="3723c-856">예를 들어, 터키어, 다음 예제에서는 잘못 된 결과가 발생의 파일 시스템에서 문자 "i"에 대 한 대/소문자 규칙을 사용 하지 않으므로 "파일"에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-856">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#12)]
 [!code-csharp[System.String.Compare#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#12)]
 [!code-vb[System.String.Compare#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#12)]  
  
 <span data-ttu-id="3723c-857">"File"는 서 수 비교를 사용 하 여 경로 이름을 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-857">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="3723c-858">이렇게 하려면 올바른 코드를 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-858">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#13)]
 [!code-csharp[System.String.Compare#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#13)]
 [!code-vb[System.String.Compare#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#13)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-859">다음 예제에 나와 있는 합니다 <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%29> 사용 하는 것과 같습니다 <xref:System.String.ToUpper%2A> 또는 <xref:System.String.ToLower%2A> 문자열을 비교할 때.</span><span class="sxs-lookup"><span data-stu-id="3723c-859">The following example demonstrates that the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%29> method is equivalent to using <xref:System.String.ToUpper%2A> or <xref:System.String.ToLower%2A> when comparing strings.</span></span>  
  
 [!code-cpp[System.String.Compare#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/compare02.cpp#18)]
 [!code-csharp[System.String.Compare#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare02.cs#18)]
 [!code-vb[System.String.Compare#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare02.vb#18)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-860">
            <para>문자 집합에는 무시할 수 있는 문자가 포함 됩니다. <see cref="M:System.String.Compare(System.String,System.String,System.Boolean)" /> 메서드 문화권 구분 비교를 수행 하는 경우 이러한 문자를 고려 하지 않습니다. 예를 들어 다음 코드에서 실행 되는 [! INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 하거나 나중에 "Ani-잘못 되었습니다." (사용자 지정 하이픈, 또는 U + 00AD 사용)를 사용 하 여 "animal"의 문화권 구분 및 대/소문자 구분 비교를 두 문자열이 같은지를 나타냅니다.  [! csharp 코드 [System.String.Compare#22] (~/samples/snippets/csharp/VS_Snippets_CLR_System/시스템입니다. String.Compare/cs/compare22.cs#22)] [! vb 코드 [System.String.Compare#22] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/시스템입니다. String.Compare/vb/compare22.vb#22)] 호출의 문자열 비교를 무시할 수 있는 문자를 인식 하는 <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> 메서드와의 값을 제공 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 또는 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> 에 대 한는 <paramref name="comparisonType" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-860">
              <para>Character sets include ignorable characters. The <see cref="M:System.String.Compare(System.String,System.String,System.Boolean)" /> method does not consider such characters when it performs a culture-sensitive comparison. For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a culture-sensitive, case-insensitive comparison of "animal" with "Ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.  [!code-csharp[System.String.Compare#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare22.cs#22)] [!code-vb[System.String.Compare#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare22.vb#22)]  To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * StringComparison -&gt; int" Usage="System.string.Compare (strA, strB, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="strA">
          <span data-ttu-id="3723c-861">비교할 첫째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-861">The first string to compare.</span>
          </span>
        </param>
        <param name="strB">
          <span data-ttu-id="3723c-862">비교할 둘째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-862">The second string to compare.</span>
          </span>
        </param>
        <param name="comparisonType">
          <span data-ttu-id="3723c-863">비교에 사용할 규칙을 지정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-863">One of the enumeration values that specifies the rules to use in the comparison.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-864">지정된 규칙을 사용하여 지정된 두 <see cref="T:System.String" /> 개체를 비교하고 정렬 순서에서 두 개체의 상대 위치를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-864">Compares two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-865">두 비교 대상 간의 어휘 관계를 나타내는 32비트 부호 있는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-865">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span>
          </span>
          <span data-ttu-id="3723c-866">
            <list type="table">
              <listheader>
                <term> 값  </term>
                <description> 조건  </description>
              </listheader>
              <item>
                <term> 0 보다 작음  </term>
                <description>
                  <paramref name="strA" />가 정렬 순서에서 <paramref name="strB" /> 앞에 옵니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <paramref name="strA" />가 정렬 순서에서 <paramref name="strB" />와 동일한 위치에 있습니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description>
                  <paramref name="strA" />가 정렬 순서에서 <paramref name="strB" /> 뒤에 옵니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-866">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description>
                    <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description>
                    <paramref name="strA" /> is in the same position as <paramref name="strB" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description>
                    <paramref name="strA" /> follows <paramref name="strB" /> in the sort order.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-867">`comparisonType` 매개 변수 여부를 나타냅니다 비교에서 현재 또는 고정 문화권을 사용 해야 인식 또는 비교 대상을의 대/소문자 무시 (문화권별) 단어를 사용 하 여 또는 서 수 (문화권) 정렬 규칙.</span><span class="sxs-lookup"><span data-stu-id="3723c-867">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</span></span>  
  
 <span data-ttu-id="3723c-868">하나 또는 둘 다 비교 대상이 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-868">One or both comparands can be `null`.</span></span> <span data-ttu-id="3723c-869">기본적으로 모든 문자열을 포함 하 여 빈 문자열 (""), null 참조일; 보다 큼 비교 와 두 null 참조가 서로 같은지 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-869">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="3723c-870">비교는 같지 않음 검색 하거나 두 문자열 요소가 비교 된 때를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-870">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="3723c-871">그러나 두 문자열을 비교 하 여 한 문자열의 끝을 다른 문자열에 문자가 남아 경우 나머지 문자를 사용 하 여 문자열 큰 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-871">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.</span></span> <span data-ttu-id="3723c-872">반환 값은 마지막으로 수행한 비교의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-872">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="3723c-873">비교는 문화권별 대/소문자 규칙에 의해 영향을 받는 예기치 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-873">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="3723c-874">예를 들어, 터키어, 다음 예제에서는 잘못 된 결과가 발생의 파일 시스템에서 문자 "i"에 대 한 대/소문자 규칙을 사용 하지 않으므로 "파일"에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-874">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#16)]
 [!code-csharp[System.String.Compare#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#16)]
 [!code-vb[System.String.Compare#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#16)]  
  
 <span data-ttu-id="3723c-875">"File"는 서 수 비교를 사용 하 여 경로 이름을 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-875">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="3723c-876">이렇게 하려면 올바른 코드를 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-876">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#17)]
 [!code-csharp[System.String.Compare#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#17)]
 [!code-vb[System.String.Compare#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#17)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-877">다음 예제에서는 세 가지 버전의 문자를 비교 "I" 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-877">The following example compares three versions of the letter "I".</span></span> <span data-ttu-id="3723c-878">문화권, 대/소문자가 무시 여부 및 서 수 비교를 수행 하는 지 여부를 선택 하면 영향을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-878">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span>  
  
 [!code-cpp[System.String.CompareCmp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.CompareCmp/cpp/cmpcmp.cpp#1)]
 [!code-csharp[System.String.CompareCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.CompareCmp/cs/cmpcmp.cs#1)]
 [!code-vb[System.String.CompareCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.CompareCmp/vb/cmpcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-879">
            <paramref name="comparisonType" />이 <see cref="T:System.StringComparison" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-879">
              <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="3723c-880">
            <see cref="T:System.StringComparison" />은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-880">
              <see cref="T:System.StringComparison" /> is not supported.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-881">
            <para>문자 집합에는 무시할 수 있는 문자가 포함 됩니다. <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> 메서드 문화권 구분 비교를 수행 하는 경우 이러한 문자를 고려 하지 않습니다. 비교에서 무시할 수 있는 문자를 인식 하도록 값을 제공 <see cref="F:System.StringComparison.Ordinal" /> 나 <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> 에 대 한는 <paramref name="comparisonType" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-881">
              <para>Character sets include ignorable characters. The <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method does not consider such characters when it performs a culture-sensitive comparison. To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, ignoreCase As Boolean, culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * bool * System.Globalization.CultureInfo -&gt; int" Usage="System.string.Compare (strA, strB, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="strA">
          <span data-ttu-id="3723c-882">비교할 첫째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-882">The first string to compare.</span>
          </span>
        </param>
        <param name="strB">
          <span data-ttu-id="3723c-883">비교할 둘째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-883">The second string to compare.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="3723c-884">비교 시 대/소문자를 무시하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-884">
              <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="3723c-885">문화권별 비교 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-885">An object that supplies culture-specific comparison information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-886">대/소문자를 구분하거나 구분하지 않고 지정된 두 <see cref="T:System.String" /> 개체를 비교하여 정렬 순서에서 두 개체의 상대 위치를 나타내는 정수를 반환합니다. 문화권별 정보가 비교에 영향을 줍니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-886">Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-887">두 비교 대상 간의 어휘 관계를 나타내는 32비트 부호 있는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-887">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span>
          </span>
          <span data-ttu-id="3723c-888">
            <list type="table">
              <listheader>
                <term> 값  </term>
                <description> 조건  </description>
              </listheader>
              <item>
                <term> 0 보다 작음  </term>
                <description>
                  <paramref name="strA" />가 정렬 순서에서 <paramref name="strB" /> 앞에 옵니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <paramref name="strA" />가 정렬 순서에서 <paramref name="strB" />와 동일한 위치에서 발생합니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description>
                  <paramref name="strA" />가 정렬 순서에서 <paramref name="strB" /> 뒤에 옵니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-888">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description>
                    <paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description>
                    <paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description>
                    <paramref name="strA" /> follows <paramref name="strB" /> in the sort order.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-889">비교를 사용 하 여 `culture` 대/소문자 규칙 등의 개별 문자가 사전순 문화권별 형식 정보를 얻으려면 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="3723c-889">The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="3723c-890">예를 들어, 특정 문자 조합의 단일 문자로 처리 되거나 대 문자와 소문자를 특정 방식으로 비교는 문화권을 지정할 수 있습니다 또는 문자의 정렬 순서 앞에 있는 문자에 따라 달라 지는 또는 따라서 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-890">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="3723c-891">단어 정렬 규칙을 사용 하 여 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-891">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="3723c-892">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-892">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="3723c-893">하나 또는 둘 다 비교 대상이 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-893">One or both comparands can be `null`.</span></span> <span data-ttu-id="3723c-894">기본적으로 모든 문자열을 포함 하 여 빈 문자열 (""), null 참조일; 보다 큼 비교 와 두 null 참조가 서로 같은지 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-894">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="3723c-895">비교는 같지 않음 검색 하거나 두 문자열 요소가 비교 된 때를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-895">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="3723c-896">그러나 두 문자열을 비교 하 여 한 문자열의 끝을 다른 문자열에 문자가 남아 다음 나머지 문자를 사용 하 여 문자열은 큰 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-896">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="3723c-897">반환 값은 마지막으로 수행한 비교의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-897">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="3723c-898">비교는 문화권별 대/소문자 규칙에 의해 영향을 받는 예기치 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-898">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="3723c-899">예를 들어, 터키어, 다음 예제에서는 잘못 된 결과가 발생의 파일 시스템에서 문자 "i"에 대 한 대/소문자 규칙을 사용 하지 않으므로 "파일"에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-899">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#14)]
 [!code-csharp[System.String.Compare#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#14)]
 [!code-vb[System.String.Compare#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#14)]  
  
 <span data-ttu-id="3723c-900">"File"는 서 수 비교를 사용 하 여 경로 이름을 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-900">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="3723c-901">이렇게 하려면 올바른 코드를 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-901">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#15)]
 [!code-csharp[System.String.Compare#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#15)]
 [!code-vb[System.String.Compare#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#15)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-902">다음 예제에서는 문화권 비교에 영향을 줄 수 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-902">The following example demonstrates how culture can affect a comparison.</span></span> <span data-ttu-id="3723c-903">체코어-체코 공화국 문화권 "ch" 단일 문자 "d" 보다 큰 경우</span><span class="sxs-lookup"><span data-stu-id="3723c-903">In Czech - Czech Republic culture, "ch" is a single character that is greater than "d".</span></span> <span data-ttu-id="3723c-904">그러나 영어-미국 culture에서에서 두 문자의 "ch" 구성 되며 "c"를 사용 하면 "d" 보다 작습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-904">However, in English - United States culture, "ch" consists of two characters, and "c" is less than "d".</span></span>  
  
 [!code-cpp[string.comp4#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.comp4/CPP/string.comp4.cpp#1)]
 [!code-csharp[string.comp4#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.comp4/CS/string.comp4.cs#1)]
 [!code-vb[string.comp4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.comp4/VB/string.comp4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-905">
            <paramref name="culture" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-905">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-906">
            <para>문자 집합에는 무시할 수 있는 문자가 포함 됩니다. <see cref="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" /> 메서드 문화권 구분 비교를 수행 하는 경우 이러한 문자를 고려 하지 않습니다. 예를 들어 다음 코드에서 실행 되는 [! INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 또는 "Ani-잘못 되었습니다." (사용자 지정 하이픈, 또는 U + 00AD 사용)를 사용 하 여 "animal"의 대/소문자 구분 비교를 고정을 사용 하 여 나중에 문화권 두 문자열이 같은지를 나타냅니다.  [! csharp 코드 [System.String.Compare#23] (~/samples/snippets/csharp/VS_Snippets_CLR_System/시스템입니다. String.Compare/cs/compare23.cs#23)] [! vb 코드 [System.String.Compare#23] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/시스템입니다. String.Compare/vb/compare23.vb#23)] 호출의 문자열 비교를 무시할 수 있는 문자를 인식 하는 <see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> 메서드와의 값을 제공 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 또는 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> 에 대 한는 <paramref name="options" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-906">
              <para>Character sets include ignorable characters. The <see cref="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" /> method does not consider such characters when it performs a culture-sensitive comparison. For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a case-insensitive comparison of "animal" with "Ani-mal" (using a soft hyphen, or U+00AD) using the invariant culture indicates that the two strings are equivalent.  [!code-csharp[System.String.Compare#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare23.cs#23)] [!code-vb[System.String.Compare#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare23.vb#23)]  To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, culture As CultureInfo, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * System.Globalization.CultureInfo * System.Globalization.CompareOptions -&gt; int" Usage="System.string.Compare (strA, strB, culture, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="strA">
          <span data-ttu-id="3723c-907">비교할 첫째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-907">The first string to compare.</span>
          </span>
        </param>
        <param name="strB">
          <span data-ttu-id="3723c-908">비교할 둘째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-908">The second string to compare.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="3723c-909">문화권별 비교 정보를 제공하는 문화권입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-909">The culture that supplies culture-specific comparison information.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="3723c-910">대/소문자 또는 기호 무시 여부와 같이 비교를 수행할 때 사용할 옵션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-910">Options to use when performing the comparison (such as ignoring case or symbols).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-911">지정된 두 <see cref="T:System.String" /> 개체를 비교하고 정렬 순서에서 두 문자열 간의 관계를 나타내는 정수를 반환합니다. 지정된 비교 옵션 및 문화권별 정보가 비교에 영향을 줍니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-911">Compares two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-912">다음 표와 같이 <paramref name="strA" />와 <paramref name="strB" /> 간의 어휘 관계를 나타내는 부호 있는 32비트 정수입니다.  <list type="table"><listheader><term> 값  </term><description> 조건  </description></listheader><item><term> 0보다 작음  </term><description><paramref name="strA" />가 정렬 순서에서 <paramref name="strB" /> 앞에 옵니다.  </description></item><item><term> 0  </term><description><paramref name="strA" />가 정렬 순서에서 <paramref name="strB" />와 동일한 위치에서 발생합니다.  </description></item><item><term> 0보다 큼  </term><description><paramref name="strA" />가 정렬 순서에서 <paramref name="strB" /> 뒤에 옵니다.  </description></item></list></span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-912">A 32-bit signed integer that indicates the lexical relationship between <paramref name="strA" /> and <paramref name="strB" />, as shown in the following table  <list type="table"><listheader><term> Value  </term><description> Condition  </description></listheader><item><term> Less than zero  </term><description><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.  </description></item><item><term> Zero  </term><description><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.  </description></item><item><term> Greater than zero  </term><description><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.  </description></item></list></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-913">비교를 사용 하는 `culture` 대/소문자 규칙 등의 개별 문자가 사전순 문화권별 형식 정보를 얻는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-913">The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.</span></span> <span data-ttu-id="3723c-914">예를 들어, 특정 문자 조합을 단일 문자로 처리 함을, 대 / 소문자를 특정 방식으로 비교는 특정 문화권을 지정할 수 있습니다 또는 문자의 정렬 순서 문자에 따라 달라 지는 앞 이나 뒤 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-914">For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3723c-915"><xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> 메서드 사용 되기 위한 주로 정렬 또는 작업을 사전순으로 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-915">The <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="3723c-916">메서드 호출의 주요 목적은 (즉, 메서드 호출의 목적은 인 경우 반환 값이 0에 대 한 테스트를) 두 문자열이 같은지 여부를 결정할 때 하지 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-916">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).</span></span> <span data-ttu-id="3723c-917">두 문자열이 같은지 여부를 확인, 호출 된 <xref:System.String.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-917">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="3723c-918">비교 하 여 추가로 지정할 수 있습니다 합니다 `options` 의 하나 이상의 멤버로 구성 하는 매개 변수는 <xref:System.Globalization.CompareOptions> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-918">The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions> enumeration.</span></span> <span data-ttu-id="3723c-919">그러나이 메서드는 문화권 구분 문자열 비교를 수행 하는 것 이므로, 합니다 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> 및 <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> 값 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-919">However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> and <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> values have no effect.</span></span>  
  
 <span data-ttu-id="3723c-920">하나 또는 모두 비교 대상이 될 수 있습니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-920">Either or both comparands can be `null`.</span></span> <span data-ttu-id="3723c-921">정의상, 모든 문자열을 포함 하 여 <xref:System.String.Empty?displayProperty=nameWithType>, 비교는 null 참조 및 두 개의 null 참조 보다 큰 서로 같은지 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-921">By definition, any string, including <xref:System.String.Empty?displayProperty=nameWithType>, compares greater than a null reference, and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="3723c-922">비교는 같지 않음 검색 하거나 두 문자열 요소가 비교 된 때를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-922">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="3723c-923">그러나 두 문자열을 비교 하 여 한 문자열의 끝을 다른 문자열에 문자가 남아 경우 나머지 문자를 사용 하 여 문자열 큰 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-923">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-924">다음 예제에서는 세 가지 방법으로 두 문자열을 비교 합니다: 언어 비교를 사용 하 여 EN-US 문화권에 대 한 EN-US 문화권에 대 한 언어는 대/소문자 구분 비교를 사용 하 여 및 서 수 비교를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-924">The following example compares two strings in three different ways: using linguistic comparison for the en-US culture; using linguistic case-sensitive comparison for the en-US culture; and using an ordinal comparison.</span></span> <span data-ttu-id="3723c-925">비교의 세 가지 방법에서 세 가지 다른 결과 생성 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-925">It illustrates how the three methods of comparison produce three different results.</span></span>  
  
 [!code-cpp[System.String.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/example.cpp#1)]
 [!code-csharp[System.String.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/Example.cs#1)]
 [!code-vb[System.String.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-926">
            <paramref name="options" />이 <see cref="T:System.Globalization.CompareOptions" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-926">
              <paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-927">
            <paramref name="culture" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-927">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-928">
            <para>문자 집합에는 언어 또는 문화권 구분 비교를 수행 하는 경우 간주 되지 않는 문자는 무시할 수 있는 문자가 포함 됩니다. <see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> 메서드 문화권 구분 비교를 수행 하는 경우 이러한 문자를 고려 하지 않습니다. 비교에서 무시할 수 있는 문자를 인식 하도록 값을 제공 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 나 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> 에 대 한는 <paramref name="options" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-928">
              <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. The <see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method does not consider such characters when it performs a culture-sensitive comparison. To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="Overload:System.String.CompareOrdinal" />
        <altmember cref="Overload:System.String.CompareTo" />
        <altmember cref="Overload:System.String.Equals" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strA">
          <span data-ttu-id="3723c-929">비교에 사용할 첫 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-929">The first string to use in the comparison.</span>
          </span>
        </param>
        <param name="indexA">
          <span data-ttu-id="3723c-930">
            <c>strA</c>에 있는 부분 문자열의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-930">The position of the substring within <c>strA</c>.</span>
          </span>
        </param>
        <param name="strB">
          <span data-ttu-id="3723c-931">비교에 사용할 두 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-931">The second string to use in the comparison.</span>
          </span>
        </param>
        <param name="indexB">
          <span data-ttu-id="3723c-932">
            <c>strB</c>에 있는 부분 문자열의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-932">The position of the substring within <c>strB</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3723c-933">비교할 부분 문자열의 최대 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-933">The maximum number of characters in the substrings to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-934">지정된 두 <see cref="T:System.String" /> 개체의 부분 문자열을 비교하고 정렬 순서에서 두 개체의 상대 위치를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-934">Compares substrings of two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-935">두 비교 대상 간의 어휘 관계를 나타내는 부호 있는 32비트 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-935">A 32-bit signed integer indicating the lexical relationship between the two comparands.</span>
          </span>
          <span data-ttu-id="3723c-936">
            <list type="table">
              <listheader>
                <term> 값  </term>
                <description> 조건  </description>
              </listheader>
              <item>
                <term> 0보다 작음  </term>
                <description>
                  <paramref name="strA" />의 부분 문자열이 정렬 순서에서 <paramref name="strB" />의 부분 문자열 앞에 옵니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description> 부분 문자열이 정렬 순서에서 같은 위치에 나오거나 <paramref name="length" />가 0입니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description>
                  <paramref name="strA" />의 부분 문자열이 정렬 순서에서 <paramref name="strB" />의 부분 문자열 뒤에 옵니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-936">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-937">비교할 부분 문자열 시작 `strA` 언제 `indexA` 고 `strB` 에서 `indexB`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-937">The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`.</span></span> <span data-ttu-id="3723c-938">둘 다 `indexA` 하 고 `indexB` 는 0부터 시작, 즉 첫 번째 문자의 `strA` 및 `strB` 위치 0에 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-938">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero.</span></span> <span data-ttu-id="3723c-939">첫 번째 부분 문자열의 길이가의 길이 같고 `strA` 빼기 `indexA` 1을 더한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-939">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="3723c-940">두 번째 부분 문자열의 길이가의 길이 같고 `strB` 빼기 `indexB` 1을 더한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-940">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>  
  
 <span data-ttu-id="3723c-941">비교할 문자 수는 두 부분 문자열의 길이 중 더 작은 값 및 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-941">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="3723c-942">합니다 `indexA`, `indexB`, 및 `length` 매개 변수는 음수일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-942">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="3723c-943">비교는 대/소문자 규칙 등의 개별 문자가 사전순 문화권별 형식 정보를 가져올 현재 문화권을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-943">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="3723c-944">예를 들어, 특정 문자 조합의 단일 문자로 처리 되거나 대 문자와 소문자를 특정 방식으로 비교는 문화권을 지정할 수 있습니다 또는 문자의 정렬 순서 앞에 있는 문자에 따라 달라 지는 또는 따라서 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-944">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="3723c-945">단어 정렬 규칙을 사용 하 여 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-945">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="3723c-946">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-946">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="3723c-947">문자열을 비교할 때 호출 해야 합니다 <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> 메서드를 메서드를 사용 하는 문자열 비교의 형식을 명시적으로 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-947">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="3723c-948">자세한 내용은 [문자열 사용에 대한 모범 사례](~/docs/standard/base-types/best-practices-strings.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-948">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="3723c-949">하나 또는 둘 다 비교 대상이 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-949">One or both comparands can be `null`.</span></span> <span data-ttu-id="3723c-950">기본적으로 모든 문자열을 포함 하 여 빈 문자열 (""), null 참조일; 보다 큼 비교 와 두 null 참조가 서로 같은지 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-950">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="3723c-951">같지 않음 검색 하거나 두 부분 문자열 비교를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-951">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="3723c-952">그러나 두 문자열을 비교 하 여 한 문자열의 끝을 다른 문자열에 문자가 남아 다음 나머지 문자를 사용 하 여 문자열은 큰 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-952">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="3723c-953">반환 값은 마지막으로 수행한 비교의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-953">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="3723c-954">비교는 문화권별 대/소문자 규칙에 의해 영향을 받는 예기치 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-954">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="3723c-955">예를 들어, 터키어, 다음 예제에서는 잘못 된 결과가 발생의 파일 시스템에서 문자 "i"에 대 한 대/소문자 규칙을 사용 하지 않으므로 "파일"에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-955">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#2)]
 [!code-csharp[System.String.Compare#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#2)]
 [!code-vb[System.String.Compare#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#2)]  
  
 <span data-ttu-id="3723c-956">"File"는 서 수 비교를 사용 하 여 경로 이름을 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-956">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="3723c-957">이렇게 하려면 올바른 코드를 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-957">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#3)]
 [!code-csharp[System.String.Compare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#3)]
 [!code-vb[System.String.Compare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-958">다음 예제에서는 두 부분 문자열을 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-958">The following example compares two substrings.</span></span>  
  
 [!code-cpp[string.compare3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare3/CPP/comp3.cpp#1)]
 [!code-csharp[string.compare3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare3/CS/comp3.cs#1)]
 [!code-vb[string.compare3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare3/VB/comp3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-959">
            <paramref name="indexA" />가 <paramref name="strA" />.<see cref="P:System.String.Length" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-959">
              <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span>
          </span>
          <span data-ttu-id="3723c-960">-또는-  <paramref name="indexB" />가 <paramref name="strB" />.<see cref="P:System.String.Length" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-960">-or-  <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span>
          </span>
          <span data-ttu-id="3723c-961">-또는-  <paramref name="indexA" />, <paramref name="indexB" /> 또는 <paramref name="length" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-961">-or-  <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-962">-또는-  <paramref name="indexA" /> 또는 <paramref name="indexB" />가 <see langword="null" />이고 <paramref name="length" />가 0보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-962">-or-  Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-963">
            <para>문자 집합에는 무시할 수 있는 문자가 포함 됩니다. <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" /> 메서드 언어 또는 문화권 구분 비교를 수행 하는 경우 이러한 문자를 고려 하지 않습니다. 비교에서 무시할 수 있는 문자를 인식 하도록 호출 합니다 <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> 메서드 값을 제공 하 고 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 또는 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> 에 대 한는 <paramref name="comparisonType" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-963">
              <para>Character sets include ignorable characters. The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison. To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, ignoreCase As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * bool -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="strA">
          <span data-ttu-id="3723c-964">비교에 사용할 첫 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-964">The first string to use in the comparison.</span>
          </span>
        </param>
        <param name="indexA">
          <span data-ttu-id="3723c-965">
            <c>strA</c>에 있는 부분 문자열의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-965">The position of the substring within <c>strA</c>.</span>
          </span>
        </param>
        <param name="strB">
          <span data-ttu-id="3723c-966">비교에 사용할 두 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-966">The second string to use in the comparison.</span>
          </span>
        </param>
        <param name="indexB">
          <span data-ttu-id="3723c-967">
            <c>strB</c>에 있는 부분 문자열의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-967">The position of the substring within <c>strB</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3723c-968">비교할 부분 문자열의 최대 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-968">The maximum number of characters in the substrings to compare.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="3723c-969">비교 시 대/소문자를 무시하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-969">
              <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-970">대/소문자를 구분하거나 구분하지 않고 지정된 두 <see cref="T:System.String" /> 개체의 부분 문자열을 비교하여 정렬 순서에서 두 개체의 상대 위치를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-970">Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-971">두 비교 대상 간의 어휘 관계를 나타내는 32비트 부호 있는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-971">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span>
          </span>
          <span data-ttu-id="3723c-972">
            <list type="table">
              <listheader>
                <term> 값  </term>
                <description> 조건  </description>
              </listheader>
              <item>
                <term> 0보다 작음  </term>
                <description>
                  <paramref name="strA" />의 부분 문자열이 정렬 순서에서 <paramref name="strB" />의 부분 문자열 앞에 옵니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description> 부분 문자열이 정렬 순서에서 같은 위치에 나오거나 <paramref name="length" />가 0입니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description>
                  <paramref name="strA" />의 부분 문자열이 정렬 순서에서 <paramref name="strB" />의 부분 문자열 뒤에 옵니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-972">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-973">비교할 부분 문자열 시작 `strA` 언제 `indexA`, 및 `strB` 에서 `indexB`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-973">The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`.</span></span> <span data-ttu-id="3723c-974">둘 다 `indexA` 하 고 `indexB` 는 0부터 시작, 즉 첫 번째 문자의 `strA` 및 `strB` 위치 0에 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-974">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero.</span></span> <span data-ttu-id="3723c-975">첫 번째 부분 문자열의 길이가의 길이 같고 `strA` 빼기 `indexA` 1을 더한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-975">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="3723c-976">두 번째 부분 문자열의 길이가의 길이 같고 `strB` 빼기 `indexB` 1을 더한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-976">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>  
  
 <span data-ttu-id="3723c-977">비교할 문자 수는 두 부분 문자열의 길이 중 더 작은 값 및 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-977">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="3723c-978">합니다 `indexA`, `indexB`, 및 `length` 매개 변수는 음수일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-978">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="3723c-979">비교는 대/소문자 규칙 등의 개별 문자가 사전순 문화권별 형식 정보를 가져올 현재 문화권을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-979">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="3723c-980">예를 들어, 특정 문자 조합의 단일 문자로 처리 되거나 대 문자와 소문자를 특정 방식으로 비교는 문화권을 지정할 수 있습니다 또는 문자의 정렬 순서 앞에 있는 문자에 따라 달라 지는 또는 따라서 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-980">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="3723c-981">단어 정렬 규칙을 사용 하 여 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-981">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="3723c-982">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-982">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="3723c-983">문자열을 비교할 때 호출 해야 합니다 <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> 메서드를 메서드를 사용 하는 문자열 비교의 형식을 명시적으로 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-983">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="3723c-984">자세한 내용은 [문자열 사용에 대한 모범 사례](~/docs/standard/base-types/best-practices-strings.md)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-984">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>  
  
 <span data-ttu-id="3723c-985">하나 또는 둘 다 비교 대상이 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-985">One or both comparands can be `null`.</span></span> <span data-ttu-id="3723c-986">기본적으로 모든 문자열을 포함 하 여 빈 문자열 (""), null 참조일; 보다 큼 비교 와 두 null 참조가 서로 같은지 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-986">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="3723c-987">같지 않음 검색 하거나 두 부분 문자열 비교를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-987">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="3723c-988">그러나 두 문자열을 비교 하 여 한 문자열의 끝을 다른 문자열에 문자가 남아 다음 나머지 문자를 사용 하 여 문자열은 큰 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-988">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="3723c-989">반환 값은 마지막으로 수행한 비교의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-989">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="3723c-990">비교는 문화권별 대/소문자 규칙에 의해 영향을 받는 예기치 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-990">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="3723c-991">예를 들어, 터키어, 다음 예제에서는 잘못 된 결과가 발생의 파일 시스템에서 문자 "i"에 대 한 대/소문자 규칙을 사용 하지 않으므로 "파일"에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-991">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#4)]
 [!code-csharp[System.String.Compare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#4)]
 [!code-vb[System.String.Compare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#4)]  
  
 <span data-ttu-id="3723c-992">경로 이름에서 고정 된 방식으로 비교 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-992">The path name needs to be compared in an invariant manner.</span></span> <span data-ttu-id="3723c-993">이렇게 하려면 올바른 코드는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-993">The correct code to do this is as follows.</span></span>  
  
 [!code-cpp[System.String.Compare#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#5)]
 [!code-csharp[System.String.Compare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#5)]
 [!code-vb[System.String.Compare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#5)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-994">다음 예제에서는에서는 대/소문자만 다른 두 부분 문자열의 두 가지 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-994">The following example performs two comparisons of two substrings that only differ in case.</span></span> <span data-ttu-id="3723c-995">첫 번째 비교는 대/소문자를 무시 하 고 두 번째 비교는 대/소문자를 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-995">The first comparison ignores case and the second comparison considers case.</span></span>  
  
 [!code-cpp[string.compare4#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare4/CPP/comp4.cpp#1)]
 [!code-csharp[string.compare4#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare4/CS/comp4.cs#1)]
 [!code-vb[string.compare4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare4/VB/comp4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-996">
            <paramref name="indexA" />가 <paramref name="strA" />.<see cref="P:System.String.Length" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-996">
              <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span>
          </span>
          <span data-ttu-id="3723c-997">-또는-  <paramref name="indexB" />가 <paramref name="strB" />.<see cref="P:System.String.Length" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-997">-or-  <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span>
          </span>
          <span data-ttu-id="3723c-998">-또는-  <paramref name="indexA" />, <paramref name="indexB" /> 또는 <paramref name="length" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-998">-or-  <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-999">-또는-  <paramref name="indexA" /> 또는 <paramref name="indexB" />가 <see langword="null" />이고 <paramref name="length" />가 0보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-999">-or-  Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1000">
            <para>문자 집합에는 무시할 수 있는 문자가 포함 됩니다. <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" /> 메서드 언어 또는 문화권 구분 비교를 수행 하는 경우 이러한 문자를 고려 하지 않습니다. 비교에서 무시할 수 있는 문자를 인식 하도록 호출 합니다 <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> 메서드 값을 제공 하 고 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 또는 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> 에 대 한는 <paramref name="comparisonType" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1000">
              <para>Character sets include ignorable characters. The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison. To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * StringComparison -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="strA">
          <span data-ttu-id="3723c-1001">비교에 사용할 첫 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1001">The first string to use in the comparison.</span>
          </span>
        </param>
        <param name="indexA">
          <span data-ttu-id="3723c-1002">
            <c>strA</c>에 있는 부분 문자열의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1002">The position of the substring within <c>strA</c>.</span>
          </span>
        </param>
        <param name="strB">
          <span data-ttu-id="3723c-1003">비교에 사용할 두 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1003">The second string to use in the comparison.</span>
          </span>
        </param>
        <param name="indexB">
          <span data-ttu-id="3723c-1004">
            <c>strB</c>에 있는 부분 문자열의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1004">The position of the substring within <c>strB</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3723c-1005">비교할 부분 문자열의 최대 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1005">The maximum number of characters in the substrings to compare.</span>
          </span>
        </param>
        <param name="comparisonType">
          <span data-ttu-id="3723c-1006">비교에 사용할 규칙을 지정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1006">One of the enumeration values that specifies the rules to use in the comparison.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1007">지정된 규칙을 사용하여 지정된 두 <see cref="T:System.String" /> 개체의 부분 문자열을 비교하고 정렬 순서에서 두 개체의 상대 위치를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1007">Compares substrings of two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1008">두 비교 대상 간의 어휘 관계를 나타내는 32비트 부호 있는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1008">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span>
          </span>
          <span data-ttu-id="3723c-1009">
            <list type="table">
              <listheader>
                <term> 값  </term>
                <description> 조건  </description>
              </listheader>
              <item>
                <term> 0보다 작음  </term>
                <description>
                  <paramref name="strA" />의 부분 문자열이 정렬 순서에서 <paramref name="strB" />의 부분 문자열 앞에 옵니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description> 부분 문자열이 정렬 순서에서 같은 위치에 나오거나 <paramref name="length" /> 매개변수가 0입니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description>
                  <paramref name="strA" />의 부분 문자열이 정렬 순서에서 <paramref name="strB" />의 부분 문자열 뒤에 옵니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1009">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> The substrings occur in the same position in the sort order, or the <paramref name="length" /> parameter is zero.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> The substring in <paramref name="strA" /> follllows the substring in <paramref name="strB" /> in the sort order.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1010">비교할 부분 문자열 시작 `strA` 언제 `indexA` 고 `strB` 에서 `indexB`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1010">The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`.</span></span> <span data-ttu-id="3723c-1011">둘 다 `indexA` 하 고 `indexB` 는 0부터 시작, 즉 첫 번째 문자의 `strA` 및 `strB` 0 인 하나를 배치 하지.</span><span class="sxs-lookup"><span data-stu-id="3723c-1011">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one.</span></span> <span data-ttu-id="3723c-1012">첫 번째 부분 문자열의 길이가의 길이 같고 `strA` 빼기 `indexA` 1을 더한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1012">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="3723c-1013">두 번째 부분 문자열의 길이가의 길이 같고 `strB` 빼기 `indexB` 1을 더한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1013">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>  
  
 <span data-ttu-id="3723c-1014">비교할 문자 수는 두 부분 문자열의 길이 중 더 작은 값 및 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1014">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="3723c-1015">합니다 `indexA`, `indexB`, 및 `length` 매개 변수는 음수일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1015">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="3723c-1016">`comparisonType` 매개 변수 여부를 나타냅니다 비교에서 현재 또는 고정 문화권을 사용 해야 인식 또는 비교 대상을의 대/소문자 무시 (문화권별) 단어를 사용 하 여 또는 서 수 (문화권) 정렬 규칙.</span><span class="sxs-lookup"><span data-stu-id="3723c-1016">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</span></span>  
  
 <span data-ttu-id="3723c-1017">하나 또는 둘 다 비교 대상이 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1017">One or both comparands can be `null`.</span></span> <span data-ttu-id="3723c-1018">기본적으로 모든 문자열을 포함 하 여 빈 문자열 (""), null 참조일; 보다 큼 비교 와 두 null 참조가 서로 같은지 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1018">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="3723c-1019">같지 않음 검색 하거나 두 부분 문자열 비교를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1019">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="3723c-1020">그러나 두 문자열을 비교 하 여 한 문자열의 끝을 다른 문자열에 문자가 남아 경우 나머지 문자를 사용 하 여 문자열 큰 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1020">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.</span></span> <span data-ttu-id="3723c-1021">반환 값은 마지막으로 수행한 비교의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1021">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="3723c-1022">비교는 문화권별 대/소문자 규칙에 의해 영향을 받는 예기치 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1022">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="3723c-1023">예를 들어, 터키어, 다음 예제에서는 잘못 된 결과가 발생의 파일 시스템에서 문자 "i"에 대 한 대/소문자 규칙을 사용 하지 않으므로 "파일"에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1023">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#8)]
 [!code-csharp[System.String.Compare#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#8)]
 [!code-vb[System.String.Compare#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#8)]  
  
 <span data-ttu-id="3723c-1024">"File"는 서 수 비교를 사용 하 여 경로 이름을 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1024">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="3723c-1025">이렇게 하려면 올바른 코드를 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1025">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#9)]
 [!code-csharp[System.String.Compare#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#9)]
 [!code-vb[System.String.Compare#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#9)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1026">다음 예제에서는 두 부분 문자열을 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1026">The following example compares two substrings.</span></span>  
  
 [!code-cpp[string.compare3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare3/CPP/comp3.cpp#1)]
 [!code-csharp[string.compare3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare3/CS/comp3.cs#1)]
 [!code-vb[string.compare3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare3/VB/comp3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1027">
            <paramref name="indexA" />가 <paramref name="strA" />.<see cref="P:System.String.Length" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1027">
              <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span>
          </span>
          <span data-ttu-id="3723c-1028">-또는-  <paramref name="indexB" />가 <paramref name="strB" />.<see cref="P:System.String.Length" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1028">-or-  <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span>
          </span>
          <span data-ttu-id="3723c-1029">-또는-  <paramref name="indexA" />, <paramref name="indexB" /> 또는 <paramref name="length" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1029">-or-  <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-1030">-또는-  <paramref name="indexA" /> 또는 <paramref name="indexB" />가 <see langword="null" />이고 <paramref name="length" />가 0보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1030">-or-  Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-1031">
            <paramref name="comparisonType" />이 <see cref="T:System.StringComparison" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1031">
              <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1032">
            <para>문자 집합에는 무시할 수 있는 문자가 포함 됩니다. <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> 메서드 언어 또는 문화권 구분 비교를 수행 하는 경우 이러한 문자를 고려 하지 않습니다. 비교에서 무시할 수 있는 문자를 인식 하도록 값을 제공 <see cref="F:System.StringComparison.Ordinal" /> 나 <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> 에 대 한는 <paramref name="comparisonType" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1032">
              <para>Character sets include ignorable characters. The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison. To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, ignoreCase As Boolean, culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * bool * System.Globalization.CultureInfo -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="strA">
          <span data-ttu-id="3723c-1033">비교에 사용할 첫 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1033">The first string to use in the comparison.</span>
          </span>
        </param>
        <param name="indexA">
          <span data-ttu-id="3723c-1034">
            <c>strA</c>에 있는 부분 문자열의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1034">The position of the substring within <c>strA</c>.</span>
          </span>
        </param>
        <param name="strB">
          <span data-ttu-id="3723c-1035">비교에 사용할 두 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1035">The second string to use in the comparison.</span>
          </span>
        </param>
        <param name="indexB">
          <span data-ttu-id="3723c-1036">
            <c>strB</c>에 있는 부분 문자열의 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1036">The position of the substring within <c>strB</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3723c-1037">비교할 부분 문자열의 최대 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1037">The maximum number of characters in the substrings to compare.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="3723c-1038">비교 시 대/소문자를 무시하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1038">
              <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="3723c-1039">문화권별 비교 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1039">An object that supplies culture-specific comparison information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1040">대/소문자를 구분하거나 구분하지 않고 지정된 두 <see cref="T:System.String" /> 개체의 부분 문자열을 비교하여 정렬 순서에서 두 개체의 상대 위치를 나타내는 정수를 반환합니다. 문화권별 정보가 비교에 영향을 줍니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1040">Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1041">두 비교 대상 간의 어휘 관계를 나타내는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1041">An integer that indicates the lexical relationship between the two comparands.</span>
          </span>
          <span data-ttu-id="3723c-1042">
            <list type="table">
              <listheader>
                <term> 값  </term>
                <description> 조건  </description>
              </listheader>
              <item>
                <term> 0보다 작음  </term>
                <description>
                  <paramref name="strA" />의 부분 문자열이 정렬 순서에서 <paramref name="strB" />의 부분 문자열 앞에 옵니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description> 부분 문자열이 정렬 순서에서 같은 위치에 나오거나 <paramref name="length" />가 0입니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description>
                  <paramref name="strA" />의 부분 문자열이 정렬 순서에서 <paramref name="strB" />의 부분 문자열 뒤에 옵니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1042">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1043">비교할 부분 문자열 시작 `strA` 언제 `indexA`, 및 `strB` 에서 `indexB`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1043">The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`.</span></span> <span data-ttu-id="3723c-1044">둘 다 `indexA` 하 고 `indexB` 는 0부터 시작, 즉 첫 번째 문자의 `strA` 및 `strB` 0 인 하나를 배치 하지.</span><span class="sxs-lookup"><span data-stu-id="3723c-1044">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one.</span></span> <span data-ttu-id="3723c-1045">첫 번째 부분 문자열의 길이가의 길이 같고 `strA` 빼기 `indexA` 1을 더한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1045">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="3723c-1046">두 번째 부분 문자열의 길이가의 길이 같고 `strB` 빼기 `indexB` 1을 더한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1046">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>  
  
 <span data-ttu-id="3723c-1047">비교할 문자 수는 두 부분 문자열의 길이 중 더 작은 값 및 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1047">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="3723c-1048">합니다 `indexA`, `indexB`, 및 `length` 매개 변수는 음수일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1048">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="3723c-1049">비교를 사용 하 여 `culture` 대/소문자 규칙 등의 개별 문자가 사전순 문화권별 형식 정보를 얻으려면 매개 변수.</span><span class="sxs-lookup"><span data-stu-id="3723c-1049">The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="3723c-1050">예를 들어, 특정 문자 조합의 단일 문자로 처리 되거나 대 문자와 소문자를 특정 방식으로 비교는 문화권을 지정할 수 있습니다 또는 문자의 정렬 순서 앞에 있는 문자에 따라 달라 지는 또는 따라서 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1050">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>  
  
 <span data-ttu-id="3723c-1051">단어 정렬 규칙을 사용 하 여 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1051">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="3723c-1052">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1052">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="3723c-1053">하나 또는 둘 다 비교 대상이 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1053">One or both comparands can be `null`.</span></span> <span data-ttu-id="3723c-1054">기본적으로 모든 문자열을 포함 하 여 빈 문자열 (""), null 참조일; 보다 큼 비교 와 두 null 참조가 서로 같은지 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1054">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="3723c-1055">같지 않음 검색 하거나 두 부분 문자열 비교를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1055">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="3723c-1056">그러나 두 문자열을 비교 하 여 한 문자열의 끝을 다른 문자열에 문자가 남아 다음 나머지 문자를 사용 하 여 문자열은 큰 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1056">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="3723c-1057">반환 값은 마지막으로 수행한 비교의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1057">The return value is the result of the last comparison performed.</span></span>  
  
 <span data-ttu-id="3723c-1058">비교는 문화권별 대/소문자 규칙에 의해 영향을 받는 예기치 않은 결과가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1058">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="3723c-1059">예를 들어, 터키어, 다음 예제에서는 잘못 된 결과가 발생의 파일 시스템에서 문자 "i"에 대 한 대/소문자 규칙을 사용 하지 않으므로 "파일"에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1059">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>  
  
 [!code-cpp[System.String.Compare#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#6)]
 [!code-csharp[System.String.Compare#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#6)]
 [!code-vb[System.String.Compare#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#6)]  
  
 <span data-ttu-id="3723c-1060">"File"는 서 수 비교를 사용 하 여 경로 이름을 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1060">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="3723c-1061">이렇게 하려면 올바른 코드를 아래와 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1061">The correct code to do this is as follows:</span></span>  
  
 [!code-cpp[System.String.Compare#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#7)]
 [!code-csharp[System.String.Compare#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#7)]
 [!code-vb[System.String.Compare#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#7)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1062">다음 예제에서는 두 부분 문자열을 비교 다른 문화권을 사용 하 여 부분 문자열의 대/소문자를 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1062">The following example compares two substrings using different cultures and ignoring the case of the substrings.</span></span> <span data-ttu-id="3723c-1063">문화권 선택에 문자 "I"는 어떻게 영향을 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1063">The choice of culture affects how the letter "I" is compared.</span></span>  
  
 [!code-cpp[string.compare5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare5/CPP/comp5.cpp#1)]
 [!code-csharp[string.compare5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare5/CS/comp5.cs#1)]
 [!code-vb[string.compare5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare5/VB/comp5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1064">
            <paramref name="indexA" />가 <paramref name="strA" />.<see cref="P:System.String.Length" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1064">
              <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span>
          </span>
          <span data-ttu-id="3723c-1065">-또는-  <paramref name="indexB" />가 <paramref name="strB" />.<see cref="P:System.String.Length" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1065">-or-  <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span>
          </span>
          <span data-ttu-id="3723c-1066">-또는-  <paramref name="indexA" />, <paramref name="indexB" /> 또는 <paramref name="length" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1066">-or-  <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-1067">-또는-  <paramref name="strA" /> 또는 <paramref name="strB" />가 <see langword="null" />이고 <paramref name="length" />가 0보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1067">-or-  Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1068">
            <paramref name="culture" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1068">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1069">
            <para>문자 집합에는 무시할 수 있는 문자가 포함 됩니다. <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" /> 메서드 언어 또는 문화권 구분 비교를 수행 하는 경우 이러한 문자를 고려 하지 않습니다. 비교에서 무시할 수 있는 문자를 인식 하도록 호출 합니다 <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> 메서드 값을 제공 하 고 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 또는 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> 에 대 한는 <paramref name="options" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1069">
              <para>Character sets include ignorable characters. The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison. To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, culture As CultureInfo, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * System.Globalization.CultureInfo * System.Globalization.CompareOptions -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, culture, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="strA">
          <span data-ttu-id="3723c-1070">비교에 사용할 첫 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1070">The first string to use in the comparison.</span>
          </span>
        </param>
        <param name="indexA">
          <span data-ttu-id="3723c-1071">
            <c>strA</c>에 있는 부분 문자열의 시작 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1071">The starting position of the substring within <c>strA</c>.</span>
          </span>
        </param>
        <param name="strB">
          <span data-ttu-id="3723c-1072">비교에 사용할 두 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1072">The second string to use in the comparison.</span>
          </span>
        </param>
        <param name="indexB">
          <span data-ttu-id="3723c-1073">
            <c>strB</c>에 있는 부분 문자열의 시작 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1073">The starting position of the substring within <c>strB</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3723c-1074">비교할 부분 문자열의 최대 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1074">The maximum number of characters in the substrings to compare.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="3723c-1075">문화권별 비교 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1075">An object that supplies culture-specific comparison information.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="3723c-1076">대/소문자 또는 기호 무시 여부와 같이 비교를 수행할 때 사용할 옵션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1076">Options to use when performing the comparison (such as ignoring case or symbols).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1077">지정된 두 <see cref="T:System.String" /> 개체의 부분 문자열을 비교하고 정렬 순서에서 두 부분 문자열 간의 관계를 나타내는 정수를 반환합니다. 지정된 비교 옵션 및 문화권별 정보가 비교에 영향을 줍니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1077">Compares substrings of two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1078">다음 표와 같이 두 부분 문자열 간의 어휘 관계를 나타내는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1078">An integer that indicates the lexical relationship between the two substrings, as shown in the following table.</span>
          </span>
          <span data-ttu-id="3723c-1079">
            <list type="table">
              <listheader>
                <term> 값  </term>
                <description> 조건  </description>
              </listheader>
              <item>
                <term> 0보다 작음  </term>
                <description>
                  <paramref name="strA" />의 부분 문자열이 정렬 순서에서 <paramref name="strB" />의 부분 문자열 앞에 옵니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description> 부분 문자열이 정렬 순서에서 같은 위치에 나오거나 <paramref name="length" />가 0입니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description>
                  <paramref name="strA" />의 부분 문자열이 정렬 순서에서 <paramref name="strB" />의 부분 문자열 뒤에 옵니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1079">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1080">비교할 부분 문자열 시작 `strA` 위치의 `indexA` 고 `strB` 위치의 `indexB`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1080">The substrings to compare start in `strA` at position `indexA` and in `strB` at position `indexB`.</span></span> <span data-ttu-id="3723c-1081">첫 번째 부분 문자열의 길이가 길이의 `strA` 빼기 `indexA`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1081">The length of the first substring is the length of `strA` minus `indexA`.</span></span> <span data-ttu-id="3723c-1082">두 번째 부분 문자열의 길이가 길이의 `strB` 빼기 `indexB`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1082">The length of the second substring is the length of `strB` minus `indexB`.</span></span>  
  
 <span data-ttu-id="3723c-1083">비교할 문자 수는 두 부분 문자열의 길이 중 더 작은 값 및 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1083">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="3723c-1084">합니다 `indexA`, `indexB`, 및 `length` 매개 변수는 음수일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1084">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="3723c-1085">비교를 사용 하는 `culture` 대/소문자 규칙 등의 개별 문자가 사전순 문화권별 형식 정보를 얻는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1085">The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.</span></span> <span data-ttu-id="3723c-1086">예를 들어, 특정 문자 조합을 단일 문자로 처리 함을, 대 / 소문자를 특정 방식으로 비교는 특정 문화권을 지정할 수 있습니다 또는 문자의 정렬 순서 문자에 따라 달라 지는 앞 이나 뒤 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1086">For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3723c-1087"><xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> 메서드 사용 되기 위한 주로 정렬 또는 작업을 사전순으로 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1087">The <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="3723c-1088">메서드 호출의 주요 목적은 (즉, 메서드 호출의 목적은 인 경우 반환 값이 0에 대 한 테스트를) 두 부분 문자열이 같은지 여부를 결정할 때 하지 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1088">It should not be used when the primary purpose of the method call is to determine whether two substrings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).</span></span> <span data-ttu-id="3723c-1089">두 문자열이 같은지 여부를 확인, 호출 된 <xref:System.String.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1089">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="3723c-1090">하나 또는 둘 다 `strA` 하 고 `strB` 수 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1090">One or both of `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="3723c-1091">정의상, 모든 문자열을 포함 하 여 <xref:System.String.Empty?displayProperty=nameWithType>, 비교는 null 참조 및 두 개의 null 참조 보다 큰 서로 같은지 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1091">By definition, any string, including <xref:System.String.Empty?displayProperty=nameWithType>, compares greater than a null reference, and two null references compare equal to each other.</span></span>  
  
 <span data-ttu-id="3723c-1092">비교 하 여 추가로 지정할 수 있습니다 합니다 `options` 의 하나 이상의 멤버로 구성 하는 매개 변수는 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1092">The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="3723c-1093">그러나이 메서드는 문화권 구분 문자열 비교를 수행 하는 것 이므로, 합니다 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> 및 <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> 값 효과가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1093">However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> and <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> values have no effect.</span></span>  
  
 <span data-ttu-id="3723c-1094">같지 않음 검색 하거나 두 부분 문자열 비교를 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1094">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="3723c-1095">그러나 두 문자열을 비교 하 여 한 문자열의 끝을 다른 문자열에 문자가 남아 경우 나머지 문자를 사용 하 여 문자열 큰 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1095">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</span></span> <span data-ttu-id="3723c-1096">반환 값은 마지막으로 수행한 비교의 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1096">The return value is the result of the last comparison performed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1097">다음 예제에서는 <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> 마지막 두 사용자 이름을 비교 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1097">The following example uses the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method to compare the last names of two people.</span></span> <span data-ttu-id="3723c-1098">사전순에서으로 나열합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1098">It then lists them in alphabetical order.</span></span>  
  
 [!code-csharp[System.String.Compare5#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare5/cs/Example.cs#1)]
 [!code-vb[System.String.Compare5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare5/vb/Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-1099">
            <paramref name="options" />이 <see cref="T:System.Globalization.CompareOptions" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1099">
              <paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1100">
            <paramref name="indexA" />가 <paramref name="strA" /><see langword=".Length" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1100">
              <paramref name="indexA" /> is greater than <paramref name="strA" /><see langword=".Length" />.</span>
          </span>
          <span data-ttu-id="3723c-1101">-또는- <paramref name="indexB" />가 <paramref name="strB" /><see langword=".Length" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1101">-or-  <paramref name="indexB" /> is greater than <paramref name="strB" /><see langword=".Length" />.</span>
          </span>
          <span data-ttu-id="3723c-1102">-또는-  <paramref name="indexA" />, <paramref name="indexB" /> 또는 <paramref name="length" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1102">-or-  <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-1103">-또는-  <paramref name="strA" /> 또는 <paramref name="strB" />가 <see langword="null" />이고 <paramref name="length" />가 0보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1103">-or-  Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1104">
            <paramref name="culture" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1104">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1105">
            <para>문자 집합에는 무시할 수 있는 문자가 포함 됩니다. <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> 메서드 언어 또는 문화권 구분 비교를 수행 하는 경우 이러한 문자를 고려 하지 않습니다. 비교에서 무시할 수 있는 문자를 인식 하도록 값을 제공 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 나 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> 에 대 한는 <paramref name="options" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1105">
              <para>Character sets include ignorable characters. The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison. To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="Overload:System.String.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareOrdinal">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-1106">각 문자열에서 해당하는 <see cref="T:System.String" /> 개체의 숫자 값을 계산해서 두 <see cref="T:System.Char" /> 개체를 비교합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1106">Compares two <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareOrdinal">
      <MemberSignature Language="C#" Value="public static int CompareOrdinal (string strA, string strB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareOrdinal(string strA, string strB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareOrdinal(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareOrdinal (strA As String, strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareOrdinal(System::String ^ strA, System::String ^ strB);" />
      <MemberSignature Language="F#" Value="static member CompareOrdinal : string * string -&gt; int" Usage="System.string.CompareOrdinal (strA, strB)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strA">
          <span data-ttu-id="3723c-1107">비교할 첫째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1107">The first string to compare.</span>
          </span>
        </param>
        <param name="strB">
          <span data-ttu-id="3723c-1108">비교할 둘째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1108">The second string to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1109">각 문자열에서 해당하는 <see cref="T:System.String" /> 개체의 숫자 값을 계산해서 두 지정된 <see cref="T:System.Char" /> 개체를 비교합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1109">Compares two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1110">두 비교 대상 간의 어휘 관계를 나타내는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1110">An integer that indicates the lexical relationship between the two comparands.</span>
          </span>
          <span data-ttu-id="3723c-1111">
            <list type="table">
              <listheader>
                <term> 값  </term>
                <description> 조건  </description>
              </listheader>
              <item>
                <term> 0보다 작음  </term>
                <description>
                  <paramref name="strA" />가 <paramref name="strB" />보다 작습니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description>
                  <paramref name="strA" />와 <paramref name="strB" />가 같습니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description>
                  <paramref name="strA" />이 <paramref name="strB" />보다 큽니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1111">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description>
                    <paramref name="strA" /> is less than <paramref name="strB" />.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description>
                    <paramref name="strA" /> and <paramref name="strB" /> are equal.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description>
                    <paramref name="strA" /> is greater than <paramref name="strB" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1112">이 메서드는 서 수 정렬 규칙을 사용 하 여 대/소문자 구분 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1112">This method performs a case-sensitive comparison using ordinal sort rules.</span></span> <span data-ttu-id="3723c-1113">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1113">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-1114">서 수 정렬 규칙을 사용 하 여 대/소문자 구분 비교를 수행 하려면 호출을 <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> 메서드를 `comparisonType` 인수와 함께 <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1114">To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with the `comparisonType` argument set to <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="3723c-1115">때문에 <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> 는 정적 메서드입니다 `strA` 하 고 `strB` 수 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1115">Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> is a static method, `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="3723c-1116">두 값이 `null`, 메서드를 나타내는 0 (영)을 반환 합니다 `strA` 고 `strB` 같은지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1116">If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal.</span></span> <span data-ttu-id="3723c-1117">값 중 하나인 경우 `null`, 메서드는 null이 아닌 큰 값을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1117">If only one of the values is `null`, the method considers the non-null value to be greater.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1118">다음 예제에서는 수행 하 고 문자열 2의 서 수 비교에서 대/소문자만 다릅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1118">The following example performs and ordinal comparison of two strings that only differ in case.</span></span>  
  
 [!code-cpp[string.compareordinal#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compareordinal/CPP/comp0.cpp#1)]
 [!code-csharp[string.compareordinal#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compareordinal/CS/comp0.cs#1)]
 [!code-vb[string.compareordinal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compareordinal/VB/comp0.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareOrdinal">
      <MemberSignature Language="C#" Value="public static int CompareOrdinal (string strA, int indexA, string strB, int indexB, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareOrdinal(string strA, int32 indexA, string strB, int32 indexB, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareOrdinal (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareOrdinal(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length);" />
      <MemberSignature Language="F#" Value="static member CompareOrdinal : string * int * string * int * int -&gt; int" Usage="System.string.CompareOrdinal (strA, indexA, strB, indexB, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strA">
          <span data-ttu-id="3723c-1119">비교에 사용할 첫 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1119">The first string to use in the comparison.</span>
          </span>
        </param>
        <param name="indexA">
          <span data-ttu-id="3723c-1120">
            <c>strA</c>에 있는 부분 문자열의 시작 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1120">The starting index of the substring in <c>strA</c>.</span>
          </span>
        </param>
        <param name="strB">
          <span data-ttu-id="3723c-1121">비교에 사용할 두 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1121">The second string to use in the comparison.</span>
          </span>
        </param>
        <param name="indexB">
          <span data-ttu-id="3723c-1122">
            <c>strB</c>에 있는 부분 문자열의 시작 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1122">The starting index of the substring in <c>strB</c>.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3723c-1123">비교할 부분 문자열의 최대 문자 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1123">The maximum number of characters in the substrings to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1124">각 부분 문자열에서 해당하는 <see cref="T:System.String" /> 개체의 숫자 값을 계산하여 지정된 두 <see cref="T:System.Char" /> 개체의 부분 문자열을 비교합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1124">Compares substrings of two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each substring.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1125">두 비교 대상 간의 어휘 관계를 나타내는 32비트 부호 있는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1125">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span>
          </span>
          <span data-ttu-id="3723c-1126">
            <list type="table">
              <listheader>
                <term> 값  </term>
                <description> 조건  </description>
              </listheader>
              <item>
                <term> 0보다 작음  </term>
                <description>
                  <paramref name="strA" />의 부분 문자열이 <paramref name="strB" />의 부분 문자열보다 작습니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description> 부분 문자열이 같거나 <paramref name="length" />가 0입니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description>
                  <paramref name="strA" />의 부분 문자열이 <paramref name="strB" />의 부분 문자열보다 큽니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1126">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> The substrings are equal, or <paramref name="length" /> is zero.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1127">합니다 `indexA`, `indexB`, 및 `length` 매개 변수는 음수일 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1127">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>  
  
 <span data-ttu-id="3723c-1128">비교 되는 문자 수가 더 작고 길이 대 한 `strA` 적은 `indexA`, 길이의 `strB` less `indexB`, 및 `length`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1128">The number of characters compared is the lesser of the length of `strA` less `indexA`, the length of `strB` less `indexB`, and `length`.</span></span>  
  
 <span data-ttu-id="3723c-1129">이 메서드는 서 수 정렬 규칙을 사용 하 여 대/소문자 구분 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1129">This method performs a case-sensitive comparison using ordinal sort rules.</span></span> <span data-ttu-id="3723c-1130">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1130">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-1131">서 수 정렬 규칙을 사용 하 여 대/소문자 구분 비교를 수행 하려면 호출을 <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> 메서드를 `comparisonType` 인수와 함께 <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1131">To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method with the `comparisonType` argument set to <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="3723c-1132">때문에 <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> 는 정적 메서드입니다 `strA` 하 고 `strB` 수 `null`입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1132">Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> is a static method, `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="3723c-1133">두 값이 `null`, 메서드를 나타내는 0 (영)을 반환 합니다 `strA` 고 `strB` 같은지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1133">If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal.</span></span> <span data-ttu-id="3723c-1134">값 중 하나인 경우 `null`, 메서드는 null이 아닌 큰 값을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1134">If only one of the values is `null`, the method considers the non-null value to be greater.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1135">다음 예제에서는 함을 <xref:System.String.CompareOrdinal%2A> 및 <xref:System.String.Compare%2A> 다른 정렬 순서를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1135">This following example demonstrates that <xref:System.String.CompareOrdinal%2A> and <xref:System.String.Compare%2A> use different sort orders.</span></span>  
  
 [!code-cpp[StringCompareOrdinal#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringCompareOrdinal/CPP/stringcompareordinal.cpp#1)]
 [!code-csharp[StringCompareOrdinal#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringCompareOrdinal/CS/stringcompareordinal.cs#1)]
 [!code-vb[StringCompareOrdinal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringCompareOrdinal/VB/stringcompareordinal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1136">
            <paramref name="strA" />가 <see langword="null" />이 아니고, <paramref name="indexA" />가 <paramref name="strA" />.<see cref="P:System.String.Length" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1136">
              <paramref name="strA" /> is not <see langword="null" /> and <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span>
          </span>
          <span data-ttu-id="3723c-1137">-또는-  <paramref name="strB" />가 <see langword="null" />이 아니고, <paramref name="indexB" />가 <paramref name="strB" />.<see cref="P:System.String.Length" />보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1137">-or-  <paramref name="strB" /> is not <see langword="null" /> and <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span>
          </span>
          <span data-ttu-id="3723c-1138">-또는-  <paramref name="indexA" />, <paramref name="indexB" /> 또는 <paramref name="length" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1138">-or-  <paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-1139">이 인스턴스를 지정된 개체 또는 <see cref="T:System.String" />과 비교하고 정렬 순서에서 이 인스턴스의 위치가 지정된 개체 또는 <see cref="T:System.String" />보다 앞인지, 뒤인지 또는 동일한지를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1139">Compares this instance with a specified object or <see cref="T:System.String" /> and returns an integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object or <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1140">두 오버 로드는 <xref:System.String.CompareTo%2A> 메서드는 문화권 구분 및 대/소문자 구분 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1140">Both overloads of the <xref:System.String.CompareTo%2A> method perform culture-sensitive and case-sensitive comparison.</span></span> <span data-ttu-id="3723c-1141">문화권을 구분 또는 서 수 비교를 수행 하려면이 메서드를 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1141">You cannot use this method to perform culture-insensitive or ordinal comparisons.</span></span> <span data-ttu-id="3723c-1142">코드의 명확성을 권장 하지 않는 합니다 <xref:System.String.CompareTo%2A> 메서드를 호출 합니다 <xref:System.String.Compare%2A> 메서드 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1142">For code clarity, we recommend that you avoid the <xref:System.String.CompareTo%2A> method and call the <xref:System.String.Compare%2A> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="string.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1143">
            <see cref="T:System.String" />이 되는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1143">An object that evaluates to a <see cref="T:System.String" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1144">이 인스턴스를 지정된 <see cref="T:System.Object" />와 비교하고 정렬 순서에서 이 인스턴스의 위치가 지정된 <see cref="T:System.Object" />보다 앞인지, 뒤인지 또는 동일한지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1144">Compares this instance with a specified <see cref="T:System.Object" /> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1145">정렬 순서에서 이 인스턴스의 위치가 <paramref name="value" /> 매개 변수보다 앞인지, 뒤인지 또는 동일한지를 나타내는 32비트 부호 있는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1145">A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.</span>
          </span>
          <span data-ttu-id="3723c-1146">
            <list type="table">
              <listheader>
                <term> 값  </term>
                <description> 조건  </description>
              </listheader>
              <item>
                <term> 0보다 작음  </term>
                <description> 이 인스턴스가 <paramref name="value" /> 앞에 옵니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description> 이 인스턴스의 위치가 정렬 순서에서 <paramref name="value" />와 같습니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description> 이 인스턴스가 <paramref name="value" /> 뒤에 옵니다.  -또는-  <paramref name="value" />가 <see langword="null" />입니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1146">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> This instance precedes <paramref name="value" />.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> This instance has the same position in the sort order as <paramref name="value" />.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> This instance follows <paramref name="value" />.  -or-  <paramref name="value" /> is <see langword="null" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1147">`value` 해야는 <xref:System.String> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1147">`value` must be a <xref:System.String> object.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3723c-1148"><xref:System.String.CompareTo%2A> 메서드를 사용 하도록 설계 된 주로 정렬 또는 작업을 사전순으로 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1148">The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="3723c-1149">메서드 호출의 주요 목적은 두 문자열이 같은지 여부를 결정할 때 하지 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1149">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</span></span> <span data-ttu-id="3723c-1150">두 문자열이 같은지 여부를 확인, 호출 된 <xref:System.String.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1150">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="3723c-1151">이 메서드는 현재 문화권을 사용 하 여 단어 (대/소문자 구분 및 문화권) 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1151">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span> <span data-ttu-id="3723c-1152">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1152">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="3723c-1153">이 메서드는 동작에 대 한 자세한 내용은의 설명 섹션을 참조 하세요.를 <xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1153">For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1154">다음 예제에서는 합니다 <xref:System.String.CompareTo%2A> 메서드는 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1154">The following example uses the <xref:System.String.CompareTo%2A> method with an <xref:System.Object>.</span></span> <span data-ttu-id="3723c-1155">비교 하려고 했기 때문에 <xref:System.String> 인스턴스를 `TestClass` 개체에 메서드가 throw는 <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="3723c-1155">Because it attempts to compare a <xref:System.String> instance to a `TestClass` object, the method throws an <xref:System.ArgumentException>.</span></span>  
  
 [!code-cpp[ExToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ExToString/CPP/extostring.cpp#1)]
 [!code-csharp[ExToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ExToString/CS/extostring.cs#1)]
 [!code-vb[ExToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ExToString/VB/extostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-1156">
            <paramref name="value" />가 <see cref="T:System.String" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1156">
              <paramref name="value" /> is not a <see cref="T:System.String" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1157">
            <para>문자 집합에는 무시할 수 있는 문자가 포함 됩니다. <see cref="M:System.String.CompareTo(System.Object)" /> 메서드 문화권 구분 비교를 수행 하는 경우 이러한 문자를 고려 하지 않습니다. 예를 들어 다음 코드에서 실행 되는 [! INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 하거나 나중에 "ani-잘못 되었습니다." (사용자 지정 하이픈, 또는 U + 00AD 사용)를 사용 하 여 "animal" 비교 두 문자열이 같은지를 나타냅니다.  [! code-csharp[System.String.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto1.cs#1)] [! code-vb[System.String.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto1.vb#1)]  문자열 비교에서 무시할 수 있는 문자를 인식 하려면 호출을 <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> 메서드.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1157">
              <para>Character sets include ignorable characters. The <see cref="M:System.String.CompareTo(System.Object)" /> method does not consider such characters when it performs a culture-sensitive comparison. For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.  [!code-csharp[System.String.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto1.cs#1)] [!code-vb[System.String.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto1.vb#1)]  To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (string strB);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(string strB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareTo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::String ^ strB);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : string -&gt; int&#xA;override this.CompareTo : string -&gt; int" Usage="string.CompareTo strB" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strB">
          <span data-ttu-id="3723c-1158">이 인스턴스와 비교할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1158">The string to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1159">이 인스턴스를 지정된 <see cref="T:System.String" /> 개체와 비교하고 정렬 순서에서 이 인스턴스의 위치가 지정된 문자열보다 앞인지, 뒤인지 또는 동일한지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1159">Compares this instance with a specified <see cref="T:System.String" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1160">정렬 순서에서 이 인스턴스의 위치가 <paramref name="strB" /> 매개 변수보다 앞인지, 뒤인지 또는 동일한지를 나타내는 32비트 부호 있는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1160">A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="strB" /> parameter.</span>
          </span>
          <span data-ttu-id="3723c-1161">
            <list type="table">
              <listheader>
                <term> 값  </term>
                <description> 조건  </description>
              </listheader>
              <item>
                <term> 0보다 작음  </term>
                <description> 이 인스턴스가 <paramref name="strB" /> 앞에 옵니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description> 이 인스턴스의 위치가 정렬 순서에서 <paramref name="strB" />와 같습니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description> 이 인스턴스가 <paramref name="strB" /> 뒤에 옵니다.  -또는-  <paramref name="strB" />가 <see langword="null" />입니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1161">
              <list type="table">
                <listheader>
                  <term> Value  </term>
                  <description> Condition  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> This instance precedes <paramref name="strB" />.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> This instance has the same position in the sort order as <paramref name="strB" />.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> This instance follows <paramref name="strB" />.  -or-  <paramref name="strB" /> is <see langword="null" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1162">이 메서드는 현재 문화권을 사용 하 여 단어 (대/소문자 구분 및 문화권) 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1162">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span> <span data-ttu-id="3723c-1163">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1163">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="3723c-1164"><xref:System.String.CompareTo%2A> 메서드를 사용 하도록 설계 된 주로 정렬 또는 작업을 사전순으로 정렬 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1164">The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="3723c-1165">메서드 호출의 주요 목적은 두 문자열이 같은지 여부를 결정할 때 하지 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1165">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</span></span> <span data-ttu-id="3723c-1166">두 문자열이 같은지 여부를 확인, 호출 된 <xref:System.String.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1166">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="3723c-1167">이 메서드는 동작에 대 한 자세한 내용은의 설명 섹션을 참조 하세요.를 <xref:System.String.Compare%28System.String%2CSystem.String%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1167">For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29> method.</span></span>  
  
 <span data-ttu-id="3723c-1168">이 메서드를 구현 하는 <xref:System.IComparable%601?displayProperty=nameWithType> 인터페이스 및 수행 보다 조금 더 나은 <xref:System.String.CompareTo%28System.Object%29?displayProperty=nameWithType> 메서드를 확인할 필요가 없기 때문에 있는지 여부를 `strB` 인수가 넣을 해야 하는 변경할 수 있는 값 형식 및 캐스팅 하지 않아도 해당 매개 변수를 <xref:System.Object> 에 <xref:System.String>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1168">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.String.CompareTo%28System.Object%29?displayProperty=nameWithType> method, because it does not have to determine whether the `strB` argument is a mutable value type that must be boxed, and it does not have to cast its parameter from an <xref:System.Object> to a <xref:System.String>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1169">다음 예제에서는 <xref:System.String.CompareTo%2A> 다른 문자열을 사용 하 여 현재 문자열 인스턴스를 비교 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1169">The following example uses the <xref:System.String.CompareTo%2A> method to compare the current string instance with another string.</span></span>  
  
 [!code-cpp[stringcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringCompareTo/CPP/stringcompareto.cpp#1)]
 [!code-csharp[stringcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringCompareTo/CS/stringcompareto.cs#1)]
 [!code-vb[stringcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringCompareTo/VB/stringcompareto.vb#1)]  
  
 <span data-ttu-id="3723c-1170">다음 예제에서는 여러 값 및 참조 형식에 대 한 CompareTo 메서드의 제네릭 및 제네릭이 아닌 버전을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1170">The following example demonstrates generic and non-generic versions of the CompareTo method for several value and reference types.</span></span>  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1171">
            <para>문자 집합에는 무시할 수 있는 문자가 포함 됩니다. <see cref="M:System.String.CompareTo(System.String)" /> 메서드 문화권 구분 비교를 수행 하는 경우 이러한 문자를 고려 하지 않습니다. 예를 들어 다음 코드에서 실행 되는 [! INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 하거나 나중에 "ani-잘못 되었습니다." (사용자 지정 하이픈, 또는 U + 00AD 사용)를 사용 하 여 "animal" 비교 두 문자열이 같은지를 나타냅니다.  [! code-csharp[System.String.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto2.cs#2)] [! code-vb[System.String.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto2.vb#2)]  문자열 비교에서 무시할 수 있는 문자를 인식 하려면 호출을 <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> 메서드.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1171">
              <para>Character sets include ignorable characters. The <see cref="M:System.String.CompareTo(System.String)" /> method does not consider such characters when it performs a culture-sensitive comparison. For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.  [!code-csharp[System.String.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto2.cs#2)] [!code-vb[System.String.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto2.vb#2)]  To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Concat">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-1172">
            <see cref="T:System.String" />의 인스턴스를 하나 이상 연결하거나 <see cref="T:System.String" />의 인스턴스 값에 해당하는 <see cref="T:System.Object" /> 표현을 하나 이상 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1172">Concatenates one or more instances of <see cref="T:System.String" />, or the <see cref="T:System.String" /> representations of the values of one or more instances of <see cref="T:System.Object" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (System.Collections.Generic.IEnumerable&lt;string&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(class System.Collections.Generic.IEnumerable`1&lt;string&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (values As IEnumerable(Of String)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;string&gt; -&gt; string" Usage="System.string.Concat values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="values">
          <span data-ttu-id="3723c-1173">
            <see cref="T:System.Collections.Generic.IEnumerable`1" />을 구현하고 제네릭 형식 인수가 <see cref="T:System.String" />인 컬렉션 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1173">A collection object that implements <see cref="T:System.Collections.Generic.IEnumerable`1" /> and whose generic type argument is <see cref="T:System.String" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1174">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 형식의 생성된 <see cref="T:System.String" /> 컬렉션의 멤버를 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1174">Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1175">
            <paramref name="values" />의 연결된 문자열이거나, <paramref name="values" />가 빈 <see langword="IEnumerable(Of String)" />이면 <see cref="F:System.String.Empty" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1175">The concatenated strings in <paramref name="values" />, or <see cref="F:System.String.Empty" /> if <paramref name="values" /> is an empty <see langword="IEnumerable(Of String)" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1176">각 개체에 연결 하는 메서드 `values`; 구분 기호를 추가 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1176">The method concatenates each object in `values`; it does not add any delimiters.</span></span> <span data-ttu-id="3723c-1177">각 멤버 사이 구분 기호를 지정 하려면 `values`를 호출 합니다 <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1177">To specify a delimiter between each member of `values`, call the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.</span></span>  
  
 <span data-ttu-id="3723c-1178"><xref:System.String.Empty> 문자열에 있는 모든 null 요소 대신 사용 됩니다 `values`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1178">An <xref:System.String.Empty> string is used in place of any null element in `values`.</span></span>  
  
 <span data-ttu-id="3723c-1179">하는 경우 `values` 빈 `IEnumerable(Of String)`, 메서드가 반환 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1179">If `values` is an empty `IEnumerable(Of String)`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-1180">하는 경우 `values` 됩니다 `null`, 메서드에서 throw는 <xref:System.ArgumentNullException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1180">If `values` is `null`, the method throws an <xref:System.ArgumentNullException> exception.</span></span>  
  
 <span data-ttu-id="3723c-1181"><xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> 각 요소에 연결할 수 있는 메서드는 `IEnumerable(Of String)` 문자열 배열에 첫 번째 요소를 변환 하지 않고 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1181"><xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array.</span></span> <span data-ttu-id="3723c-1182">LINQ (Language-Integrated Query) 쿼리 식을 사용 하 여 특히 유용합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1182">It is particularly useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="3723c-1183">다음 예제에서는 전달 된 `List(Of String)` 알파벳 문자를 특정 문자 (예에서는 "M") 보다 크거나 같은 선택 하는 람다 식으로 대 / 소문자 구분 문자를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1183">The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is "M").</span></span> <span data-ttu-id="3723c-1184">`IEnumerable(Of String)` 에서 반환 되는 컬렉션 합니다 <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> 메서드에 전달 됩니다는 <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> 단일 문자열로 결과 표시 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="3723c-1184">The `IEnumerable(Of String)` collection that is returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> method is passed to the <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.</span></span>  
  
 [!code-csharp[System.String.Concat#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat2.cs#3)]
 [!code-vb[System.String.Concat#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat2.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1185">다음 예에서는 소수 100 보다 작거나를 계산 하는 에라토스테네스의 체 알고리즘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1185">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="3723c-1186">결과를 할당 한 <xref:System.Collections.Generic.List%601> 형식의 개체 <xref:System.String>에 전달 되는 <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1186">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type <xref:System.String>, which it then passes to the <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.</span></span>  
  
 [!code-csharp[System.String.Concat#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat1.cs#2)]
 [!code-vb[System.String.Concat#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1187">
            <paramref name="values" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1187">
              <paramref name="values" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Concat : obj -&gt; string" Usage="System.string.Concat arg0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="3723c-1188">나타낼 개체나 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1188">The object to represent, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1189">지정된 개체의 문자열 표현을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1189">Creates the string  representation of a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1190">
            <paramref name="arg0" />이 <see cref="F:System.String.Empty" />인 경우 <paramref name="arg0" /> 또는 <see langword="null" /> 값의 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1190">The string representation of the value of <paramref name="arg0" />, or <see cref="F:System.String.Empty" /> if <paramref name="arg0" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1191">합니다 <xref:System.String.Concat%28System.Object%29> 메서드를 나타냅니다 `arg0` 는 매개 변수가 없는 호출 하 여 문자열로 `ToString` 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1191">The <xref:System.String.Concat%28System.Object%29> method represents `arg0` as a string by calling its parameterless `ToString` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1192">다음 예제는 <xref:System.String.Concat%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1192">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>  
  
 [!code-cpp[string.concat5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp#1)]
 [!code-csharp[string.concat5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs#1)]
 [!code-vb[string.concat5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Concat : obj[] -&gt; string" Usage="System.string.Concat args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="3723c-1193">연결할 요소가 포함된 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1193">An object array that contains the elements to concatenate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1194">지정된 <see cref="T:System.Object" /> 배열에 있는 요소의 문자열 표현을 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1194">Concatenates the string representations of the elements in a specified <see cref="T:System.Object" /> array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1195">
            <paramref name="args" />에 있는 요소 값의 연결된 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1195">The concatenated string representations of the values of the elements in <paramref name="args" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1196">각 개체에 연결 하는 메서드 `args` 매개 변수가 없는 호출 하 여 `ToString` 메서드는 개체의 모든 구분 기호를 추가 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1196">The method concatenates each object in `args` by calling the parameterless `ToString` method of that object; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="3723c-1197"><xref:System.String.Empty?displayProperty=nameWithType> 배열에 있는 빈 개체 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1197"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null object in the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1198">다음 예제에서는 사용 합니다 <xref:System.String.Concat%2A> 메서드는 <xref:System.Object> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1198">The following example demonstrates the use of the <xref:System.String.Concat%2A> method with an <xref:System.Object> array.</span></span>  
  
 [!code-csharp[stringconcat1#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat1/CS/stringconcat1.cs#1)]
 [!code-vb[stringconcat1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat1/VB/stringconcat1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1199">
            <paramref name="args" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1199">
              <paramref name="args" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="3723c-1200">메모리가 부족합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1200">Out of memory.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1201">
            <para>이 메서드는 c + + 코드에서 호출 되지 않습니다. C + + 컴파일러에 대 한 호출을 확인 <see cref="Overload:System.String.Concat" /> 호출으로 4 개 이상의 개체 매개 변수 있는 <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1201">
              <para>This method is not called by C++ code. The C++ compiler resolves calls to <see cref="Overload:System.String.Concat" /> that have four or more object parameters as a call to <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (params string[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (ParamArray values As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(... cli::array &lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Concat : string[] -&gt; string" Usage="System.string.Concat values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="values">
          <span data-ttu-id="3723c-1202">문자열 인스턴스의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1202">An array of string instances.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1203">지정된 <see cref="T:System.String" /> 배열의 요소를 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1203">Concatenates the elements of a specified <see cref="T:System.String" /> array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1204">
            <paramref name="values" />의 연결된 요소를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1204">The concatenated elements of <paramref name="values" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1205">각 개체에 연결 하는 메서드 `values`; 구분 기호를 추가 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1205">The method concatenates each object in `values`; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="3723c-1206"><xref:System.String.Empty> 문자열 배열에 있는 빈 개체 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1206">An <xref:System.String.Empty> string is used in place of any null object in the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1207">다음 예제에서는 사용 합니다 <xref:System.String.Concat%2A> 메서드는 <xref:System.String> 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1207">The following example demonstrates the use of the <xref:System.String.Concat%2A> method with a <xref:System.String> array.</span></span>  
  
 [!code-cpp[stringconcat3#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringconcat3/CPP/stringconcat3.cpp#1)]
 [!code-csharp[stringconcat3#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat3/CS/stringconcat3.cs#1)]
 [!code-vb[stringconcat3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat3/VB/stringconcat3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1208">
            <paramref name="values" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1208">
              <paramref name="values" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="3723c-1209">메모리가 부족합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1209">Out of memory.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Concat : obj * obj -&gt; string" Usage="System.string.Concat (arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="3723c-1210">연결할 첫 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1210">The first object to concatenate.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="3723c-1211">연결할 두 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1211">The second object to concatenate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1212">지정된 두 개체의 문자열 표현을 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1212">Concatenates the string representations of two specified objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1213">
            <paramref name="arg0" /> 및 <paramref name="arg1" /> 값의 연결된 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1213">The concatenated string representations of the values of <paramref name="arg0" /> and <paramref name="arg1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1214">메서드를 연결 `arg0` 하 고 `arg1` 매개 변수가 없는 호출 하 여 `ToString` 메서드의 `arg0` 및 `arg1`; 구분 기호를 추가 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1214">The method concatenates `arg0` and `arg1` by calling the parameterless `ToString` method of `arg0` and `arg1`; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="3723c-1215"><xref:System.String.Empty?displayProperty=nameWithType> null 인수 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1215"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>  
  
 <span data-ttu-id="3723c-1216">경우 인수는 배열 참조, 해당 멤버 (예를 들어, "System.String[]") 대신 해당 배열을 나타내는 문자열을 연결 하는 메서드 중 하나.</span><span class="sxs-lookup"><span data-stu-id="3723c-1216">If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, "System.String[]").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1217">다음 예제는 <xref:System.String.Concat%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1217">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>  
  
 [!code-cpp[string.concat5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp#1)]
 [!code-csharp[string.concat5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs#1)]
 [!code-vb[string.concat5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1);" />
      <MemberSignature Language="F#" Value="static member Concat : string * string -&gt; string" Usage="System.string.Concat (str0, str1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0">
          <span data-ttu-id="3723c-1218">연결할 첫 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1218">The first string to concatenate.</span>
          </span>
        </param>
        <param name="str1">
          <span data-ttu-id="3723c-1219">연결할 두 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1219">The second string to concatenate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1220">
            <see cref="T:System.String" />의 지정된 두 인스턴스를 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1220">Concatenates two specified instances of <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1221">연결된 <paramref name="str0" /> 및 <paramref name="str1" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1221">The concatenation of <paramref name="str0" /> and <paramref name="str1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1222">메서드를 연결 `str0` 고 `str1`; 구분 기호를 추가 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1222">The method concatenates `str0` and `str1`; it does not add any delimiters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-1223">사용할 수도 있습니다 언어의 문자열 연결 연산자와 같은 `+` C#에서 또는 `&` 고 `+` Visual basic에서)</span><span class="sxs-lookup"><span data-stu-id="3723c-1223">You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)</span></span>  
>   
>  <span data-ttu-id="3723c-1224">에서 문자열을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1224">, to concatenate strings.</span></span>  
  
 <span data-ttu-id="3723c-1225"><xref:System.String.Empty> 문자열이 null 인수 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1225">An <xref:System.String.Empty> string is used in place of any null argument.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1226">다음 예제에서는 사용자의 첫 번째, 중간 및 마지막 이름을 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1226">The following example concatenates a person's first, middle, and last name.</span></span>  
  
 [!code-cpp[stringconcat4#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringconcat4/CPP/stringconcat4.cpp#1)]
 [!code-csharp[stringconcat4#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat4/CS/stringconcat4.cs#1)]
 [!code-vb[stringconcat4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat4/VB/stringconcat4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Concat : obj * obj * obj -&gt; string" Usage="System.string.Concat (arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="3723c-1227">연결할 첫 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1227">The first object to concatenate.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="3723c-1228">연결할 두 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1228">The second object to concatenate.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="3723c-1229">연결할 세 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1229">The third object to concatenate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1230">지정된 세 개체의 문자열 표현을 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1230">Concatenates the string representations of three specified objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1231">
            <paramref name="arg0" />, <paramref name="arg1" /> 및 <paramref name="arg2" /> 값의 연결된 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1231">The concatenated string representations of the values of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1232">메서드를 연결 `arg0`, `arg1`, 및 `arg2` 매개 변수가 없는 호출 하 여 `ToString` 개체당; 메서드의 모든 구분 기호를 추가 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1232">The method concatenates `arg0`, `arg1`, and `arg2` by calling the parameterless `ToString` method of each object; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="3723c-1233"><xref:System.String.Empty?displayProperty=nameWithType> null 인수 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1233"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1234">다음 예제는 <xref:System.String.Concat%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1234">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>  
  
 [!code-cpp[string.concat5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp#1)]
 [!code-csharp[string.concat5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs#1)]
 [!code-vb[string.concat5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1, string str2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1, string str2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String, str2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1, System::String ^ str2);" />
      <MemberSignature Language="F#" Value="static member Concat : string * string * string -&gt; string" Usage="System.string.Concat (str0, str1, str2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
        <Parameter Name="str2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0">
          <span data-ttu-id="3723c-1235">연결할 첫 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1235">The first string to concatenate.</span>
          </span>
        </param>
        <param name="str1">
          <span data-ttu-id="3723c-1236">연결할 두 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1236">The second string to concatenate.</span>
          </span>
        </param>
        <param name="str2">
          <span data-ttu-id="3723c-1237">연결할 세 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1237">The third string to concatenate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1238">
            <see cref="T:System.String" />의 지정된 세 인스턴스를 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1238">Concatenates three specified instances of <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1239">연결된 <paramref name="str0" />, <paramref name="str1" /> 및 <paramref name="str2" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1239">The concatenation of <paramref name="str0" />, <paramref name="str1" />, and <paramref name="str2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1240">메서드를 연결 `str0`, `str1`, 및 `str2`; 구분 기호를 추가 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1240">The method concatenates `str0`, `str1`, and `str2`; it does not add any delimiters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-1241">사용할 수도 있습니다 언어의 문자열 연결 연산자와 같은 `+` C#에서 또는 `&` 고 `+` Visual basic에서)</span><span class="sxs-lookup"><span data-stu-id="3723c-1241">You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)</span></span>  
>   
>  <span data-ttu-id="3723c-1242">에서 문자열을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1242">, to concatenate strings.</span></span>  
  
 <span data-ttu-id="3723c-1243"><xref:System.String.Empty> 문자열이 null 인수 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1243">An <xref:System.String.Empty> string is used in place of any null argument.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1244">다음 예제에서는 <xref:System.String.Concat%2A> 메서드 3 개를 연결 문자열 및 결과 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1244">The following example uses the <xref:System.String.Concat%2A> method to concatenate three strings and displays the result.</span></span>  
  
 [!code-cpp[System.String.Concat#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.concat/cpp/Concat6.cpp#6)]
 [!code-csharp[System.String.Concat#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/Concat6.cs#6)]
 [!code-vb[System.String.Concat#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/Concat6.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Concat : obj * obj * obj * obj -&gt; string" Usage="System.string.Concat (arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="3723c-1245">연결할 첫 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1245">The first object to concatenate.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="3723c-1246">연결할 두 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1246">The second object to concatenate.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="3723c-1247">연결할 세 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1247">The third object to concatenate.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="3723c-1248">연결할 네 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1248">The fourth object to concatenate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1249">지정된 네 개체의 문자열 표현과 선택적 변수 길이 매개 변수 목록에 지정된 개체를 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1249">Concatenates the string representations of four specified objects and any objects specified in an optional variable length parameter list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1250">매개 변수 목록에서 각 값의 연결된 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1250">The concatenated string representation of each value in the parameter list.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3723c-1251">이 API는 CLS 규격이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1251">This API is not CLS-compliant.</span></span> <span data-ttu-id="3723c-1252">CLS 규격 대체 항목은 <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1252">The CLS-compliant alternative is <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-1253">C# 및 Visual Basic 컴파일러에 대 한 호출으로이 메서드에 대 한 호출을 자동으로 해결 <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1253">The C# and Visual Basic compilers automatically resolve a call to this method as a call to <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="3723c-1254">메서드는 매개 변수가 없는 호출 하 여 매개 변수 목록의 각 개체를 연결 `ToString` 메서드; 구분 기호를 추가 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1254">The method concatenates each object in the parameter list by calling its parameterless `ToString` method; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="3723c-1255"><xref:System.String.Empty?displayProperty=nameWithType> null 인수 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1255"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-1256">마지막 매개 변수는 <xref:System.String.Concat%2A> 메서드는 연결할 하나 이상의 추가 개체의 선택적 쉼표로 구분 된 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1256">The last parameter of the  <xref:System.String.Concat%2A> method is an optional comma-delimited list of one or more additional objects to concatenate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1257">다음 예제를 사용 하 여 <xref:System.String.Concat%28System.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> 가변 매개 변수 목록을 연결 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="3723c-1257">The following example illustrates the use of the <xref:System.String.Concat%28System.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method to concatenate a list of variable parameters.</span></span> <span data-ttu-id="3723c-1258">이 경우에 메서드는 9 개의 매개 변수를 사용 하 여 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1258">In this case, the method is called with nine parameters.</span></span>  
  
 [!code-csharp[System.String.Concat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat4.cs#1)]
 [!code-vb[System.String.Concat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat4.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1259">
            <para>이 메서드가로 표시는 <see langword="vararg" /> 가변 개수의 매개 변수를 지원함을 의미 하는 키워드입니다. Visual c + +에서 메서드를 호출할 수 있지만 C# 또는 Visual Basic 코드에서 호출할 수 없습니다. C# 및 Visual Basic 컴파일러에 대 한 호출을 해결할 <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" /> 호출로 <see cref="M:System.String.Concat(System.Object[])" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1259">
              <para>This method is marked with the <see langword="vararg" /> keyword, which means that it supports a variable number of parameters. The method can be called from Visual C++, but it cannot be called from C# or Visual Basic code. The C# and Visual Basic compilers resolve calls to <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" /> as calls to <see cref="M:System.String.Concat(System.Object[])" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1, string str2, string str3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1, string str2, string str3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String, str2 As String, str3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1, System::String ^ str2, System::String ^ str3);" />
      <MemberSignature Language="F#" Value="static member Concat : string * string * string * string -&gt; string" Usage="System.string.Concat (str0, str1, str2, str3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
        <Parameter Name="str2" Type="System.String" />
        <Parameter Name="str3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0">
          <span data-ttu-id="3723c-1260">연결할 첫 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1260">The first string to concatenate.</span>
          </span>
        </param>
        <param name="str1">
          <span data-ttu-id="3723c-1261">연결할 두 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1261">The second string to concatenate.</span>
          </span>
        </param>
        <param name="str2">
          <span data-ttu-id="3723c-1262">연결할 세 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1262">The third string to concatenate.</span>
          </span>
        </param>
        <param name="str3">
          <span data-ttu-id="3723c-1263">연결할 네 번째 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1263">The fourth string to concatenate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1264">
            <see cref="T:System.String" />의 지정된 네 인스턴스를 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1264">Concatenates four specified instances of <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1265">연결된 <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" /> 및 <paramref name="str3" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1265">The concatenation of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" />, and <paramref name="str3" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1266">메서드를 연결 `str0`, `str1`를 `str2`, 및 `str3`; 구분 기호를 추가 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1266">The method concatenates `str0`, `str1`, `str2`, and `str3`; it does not add any delimiters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-1267">사용할 수도 있습니다 언어의 문자열 연결 연산자와 같은 `+` C#에서 또는 `&` 고 `+` Visual basic에서)</span><span class="sxs-lookup"><span data-stu-id="3723c-1267">You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic)</span></span>  
>   
>  <span data-ttu-id="3723c-1268">에서 문자열을 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1268">, to concatenate strings.</span></span>  
  
 <span data-ttu-id="3723c-1269"><xref:System.String.Empty> 문자열 배열에 있는 빈 개체 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1269">An <xref:System.String.Empty> string is used in place of any null object in the array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1270">다음 예에서는 4 자 단어의 배열을 정의 하 고 스크램블 하기 위해 문자열 배열에 개별 문자를 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1270">The following example defines an array of four-letter words and stores their individual letters to a string array in order to scramble them.</span></span> <span data-ttu-id="3723c-1271">그런 다음 호출 하 여 <xref:System.String.Concat%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> 암호화 된 단어를 어셈블해야 하기 때문에 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1271">It then calls the <xref:System.String.Concat%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> method to reassemble the scrambled words.</span></span>  
  
 [!code-csharp[System.String.Concat#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat4.cs#1)]
 [!code-vb[System.String.Concat#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Concat&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat(Of T) (values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Concat(System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;'T&gt; -&gt; string" Usage="System.string.Concat values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3723c-1272">멤버의 형식을 <c>값</c>합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1272">The type of the members of <c>values</c>.</span>
          </span>
        </typeparam>
        <param name="values">
          <span data-ttu-id="3723c-1273">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 인터페이스를 구현하는 컬렉션 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1273">A collection object that implements the <see cref="T:System.Collections.Generic.IEnumerable`1" /> interface.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1274">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> 구현의 멤버를 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1274">Concatenates the members of an <see cref="T:System.Collections.Generic.IEnumerable`1" /> implementation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1275">
            <paramref name="values" />의 연결된 멤버입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1275">The concatenated members in <paramref name="values" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1276">각 개체에 연결 하는 메서드 `values`; 구분 기호를 추가 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1276">The method concatenates each object in `values`; it does not add any delimiters.</span></span>  
  
 <span data-ttu-id="3723c-1277"><xref:System.String.Empty> 문자열이 null 인수 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1277">An <xref:System.String.Empty> string is used in place of any null argument.</span></span>  
  
 <span data-ttu-id="3723c-1278"><xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 각 요소에 연결할 수 있는 메서드는 <xref:System.Collections.Generic.IEnumerable%601> 문자열에 첫 번째 요소를 변환 하지 않고 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1278"><xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each element in an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting the elements to strings.</span></span> <span data-ttu-id="3723c-1279">예제와 같이 것 LINQ (Language-Integrated Query) 쿼리 식을 사용 하 여 특히 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1279">It is particularly useful with Language-Integrated Query (LINQ) query expressions, as the example illustrates.</span></span> <span data-ttu-id="3723c-1280">각 개체의 문자열 표현 합니다 <xref:System.Collections.Generic.IEnumerable%601> 컬렉션 개체를 호출 하 여 파생 된 `ToString` 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1280">The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1281">다음 예제에서는 간단한 정의 `Animal` animal과 속한 주문의 이름을 포함 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1281">The following example defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs.</span></span> <span data-ttu-id="3723c-1282">그런 다음 정의 <xref:System.Collections.Generic.List%601> 개체의 번호를 포함 하도록 `Animal` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1282">It then defines a <xref:System.Collections.Generic.List%601> object to contain a number of `Animal` objects.</span></span> <span data-ttu-id="3723c-1283"><xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> 추출에 확장 메서드를 호출 합니다 `Animal` 갖는 개체 `Order` 속성이 같으면 "바위"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1283">The <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> extension method is called to extract the `Animal` objects whose `Order` property equals "Rodent".</span></span> <span data-ttu-id="3723c-1284">결과에 전달 되는 <xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> 메서드 및 콘솔에 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1284">The result is passed to the <xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method and displayed to the console.</span></span>  
  
 [!code-csharp[System.String.Concat#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat3.cs#4)]
 [!code-vb[System.String.Concat#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat3.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1285">
            <paramref name="values" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1285">
              <paramref name="values" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(char value);" />
      <MemberSignature Language="F#" Value="member this.Contains : char -&gt; bool" Usage="string.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="string.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1286">검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1286">The string to seek.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1287">이 문자열 내에서 지정한 하위 문자열이 발생하는지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1287">Returns a value indicating whether a specified substring occurs within this string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1288">이 문자열 내에서 <see langword="true" /> 매개 변수가 발생하거나 <paramref name="value" />가 빈 문자열("")이면 <paramref name="value" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1288">
              <see langword="true" /> if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1289">이 메서드는 서 수 (대/소문자 구분 및 문화권을 구분 하지 않는) 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1289">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span> <span data-ttu-id="3723c-1290">검색이이 문자열의 첫 번째 문자 위치에서 시작 하 고 마지막 문자 위치부터 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1290">The search begins at the first character position of this string and continues through the last character position.</span></span>  
  
 <span data-ttu-id="3723c-1291">문자열로 여부를 확인 하려면 이외의 문화권 구분 비교 또는 서 수 대/소문자 구분 비교와 같은 서 수 비교를 사용 하 여 지정된 된 부분 문자열을 포함, 사용자 지정 메서드를 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1291">To determine whether a string contains a specified substring by using something other than ordinal comparison (such as culture-sensitive comparison, or ordinal case-insensitive comparison), you can create a custom method.</span></span> <span data-ttu-id="3723c-1292">다음 예제에서는 이러한 한 가지 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1292">The following example illustrates one such approach.</span></span> <span data-ttu-id="3723c-1293">정의 <xref:System.String> 포함 된 확장 메서드는 <xref:System.StringComparison> 매개 변수 지정 된 형식의 문자열 비교를 사용 하는 경우 문자열에 하위 문자열이 포함 하는지 여부를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1293">It defines a <xref:System.String> extension method  that includes a <xref:System.StringComparison> parameter and indicates whether a string contains a substring when using the specified form of string comparison.</span></span>  
  
 [!code-csharp[System.String.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#1)]
 [!code-vb[System.String.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#1)]  
  
 <span data-ttu-id="3723c-1294">다음 예제에서는 호출 된 `Contains` 확장 메서드를 서 수 비교 및 대/소문자 서 수 비교를 사용 하는 경우 문자열의 부분 문자열은 찾을 지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1294">The following example then calls the `Contains` extension method to determine whether a substring is found in a string when using ordinal comparison and case-insensitive ordinal comparison.</span></span>  
  
 [!code-csharp[System.String.Contains#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#2)]
 [!code-vb[System.String.Contains#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#2)]  
  
 <span data-ttu-id="3723c-1295">경우 관심 있는 부분 문자열의 위치 `value` 현재 인스턴스를 호출할 수 있습니다는 <xref:System.String.IndexOf%2A> 해당 첫 번째 발생의 시작 위치를 가져오는 메서드를 호출할 수는 <xref:System.String.LastIndexOf%2A> 가져오기 시작 하는 방법의 위치가 해당 마지막으로 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1295">If you are interested in the position of the substring `value` in the current instance, you can call the <xref:System.String.IndexOf%2A> method to get the starting position of its first occurrence, or you can call the <xref:System.String.LastIndexOf%2A> method to get the starting position of its last occurrence.</span></span> <span data-ttu-id="3723c-1296">예제에 대 한 호출을 포함 합니다 <xref:System.String.IndexOf%28System.String%29> 메서드 문자열 인스턴스에서 부분 문자열이 발견 되 면 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1296">The example includes a call to the <xref:System.String.IndexOf%28System.String%29> method if a substring is found in a string instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1297">다음 예제에서는 문자열 "fox" 일반적인 따옴표 부분 인지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1297">The following example determines whether the string "fox" is a substring of a familiar quotation.</span></span> <span data-ttu-id="3723c-1298">문자열에서 "fox" 발견 되는 경우 또한 해당 시작 위치를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1298">If "fox" is found in the string, it also displays its starting position.</span></span>  
  
 [!code-cpp[String.Contains#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.contains/CPP/cont.cpp#1)]
 [!code-csharp[String.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.contains/CS/cont.cs#1)]
 [!code-vb[String.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.contains/VB/cont.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1299">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1299">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (char value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(char value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.Char,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Char, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(char value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.Contains : char * StringComparison -&gt; bool" Usage="string.Contains (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.Contains : string * StringComparison -&gt; bool" Usage="string.Contains (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static string Copy (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Copy(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Copy(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Copy (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Copy(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Copy : string -&gt; string" Usage="System.string.Copy str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="3723c-1300">복사할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1300">The string to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1301">지정된 <see cref="T:System.String" />과 동일한 값을 갖는 <see cref="T:System.String" />의 새 인스턴스를 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1301">Creates a new instance of <see cref="T:System.String" /> with the same value as a specified <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1302">
            <paramref name="str" />과 동일한 값을 갖는 새 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1302">A new string with the same value as <paramref name="str" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1303">합니다 <xref:System.String.Copy%2A> 메서드가 반환 되는 <xref:System.String> 개체는 원래 문자열과 같은 값을 가지는 다른 개체 참조를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1303">The <xref:System.String.Copy%2A> method returns a <xref:System.String> object that has the same value as the original string but represents a different object reference.</span></span> <span data-ttu-id="3723c-1304">기존 문자열 참조 추가 개체 변수에 할당 하는 할당 작업에서 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1304">It differs from an assignment operation, which assigns an existing string reference to an additional object variable.</span></span> <span data-ttu-id="3723c-1305">이 예제에서는 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1305">The example illustrates the difference.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1306">다음 예제에서는 값이 서로 다른 두 문자열 개체를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1306">The following example creates two string objects with different values.</span></span> <span data-ttu-id="3723c-1307">호출할 때를 <xref:System.String.Copy%2A> 두 번째 문자열에 첫 번째 값을 할당 하는 메서드 출력 문자열을 나타내는 다른 개체 참조 하지만 해당 값이 같으면 이제 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1307">When it calls the <xref:System.String.Copy%2A> method to assign the first value to the second string, the output indicates that the strings represent different object references although their values are now equal.</span></span> <span data-ttu-id="3723c-1308">반면에 첫 번째 문자열이 두 번째 문자열에 할당할 때 두 문자열이 동일한 값을 갖는 같은 개체 참조를 나타내므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1308">On the other hand, when the first string is assigned to the second string, the two strings have identical values because they represent the same object reference.</span></span>  
  
 [!code-csharp[System.String.Copy#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.copy/cs/copy1.cs#1)]
 [!code-vb[System.String.Copy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.copy/vb/copy1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1309">
            <paramref name="str" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1309">
              <paramref name="str" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 sourceIndex, char[] destination, int32 destinationIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (sourceIndex As Integer, destination As Char(), destinationIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int sourceIndex, cli::array &lt;char&gt; ^ destination, int destinationIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * char[] * int * int -&gt; unit" Usage="string.CopyTo (sourceIndex, destination, destinationIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.Char[]" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceIndex">
          <span data-ttu-id="3723c-1310">이 인스턴스에서 복사할 첫 번째 문자의 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1310">The index of the first character in this instance to copy.</span>
          </span>
        </param>
        <param name="destination">
          <span data-ttu-id="3723c-1311">이 인스턴스의 문자가 복사되는 유니코드 문자의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1311">An array of Unicode characters to which characters in this instance are copied.</span>
          </span>
        </param>
        <param name="destinationIndex">
          <span data-ttu-id="3723c-1312">
            <c>destination</c>에서 복사 작업이 시작되는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1312">The index in <c>destination</c> at which the copy operation begins.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-1313">이 인스턴스에서 <c>destination</c>에 복사할 문자의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1313">The number of characters in this instance to copy to <c>destination</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1314">이 인스턴스의 지정한 위치에 있는 지정한 수의 문자를 유니코드 문자 배열의 특정 위치에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1314">Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1315">이 메서드는 복사 `count` 에서 문자를 `sourceIndex` 이 인스턴스의 위치를 `destinationIndex` 의 위치가 `destination` 문자 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1315">This method copies `count` characters from the `sourceIndex` position of this instance to the `destinationIndex` position of `destination` character array.</span></span> <span data-ttu-id="3723c-1316">이 메서드는 크기를 조정 하지 합니다 `destination` 문자 배열; 요소는 복사한 문자에 맞게 충분 한 수 있어야 또는 메서드에서 throw는 <xref:System.ArgumentOutOfRangeException>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1316">This method does not resize the `destination` character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <xref:System.ArgumentOutOfRangeException>.</span></span>  
  
 <span data-ttu-id="3723c-1317">`sourceIndex` 및 `destinationIndex` 0부터 시작 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1317">`sourceIndex` and `destinationIndex` are zero-based.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1318">다음 예제는 <xref:System.String.CopyTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1318">The following example demonstrates the <xref:System.String.CopyTo%2A> method.</span></span>  
  
 [!code-cpp[stringcopyto#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringcopyto/CPP/stringcopyto.cpp#1)]
 [!code-csharp[stringcopyto#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringcopyto/CS/stringcopyto.cs#1)]
 [!code-vb[stringcopyto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringcopyto/VB/stringcopyto.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1319">
            <paramref name="destination" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1319">
              <paramref name="destination" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1320">
            <paramref name="sourceIndex" />, <paramref name="destinationIndex" /> 또는 <paramref name="count" />가 음수입니다.  -또는-  <paramref name="sourceIndex" />가 현재 인스턴스의 위치를 식별하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1320">
              <paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" /> is negative  -or-  <paramref name="sourceIndex" /> does not identify a position in the current instance.</span>
          </span>
          <span data-ttu-id="3723c-1321">-또는-  <paramref name="destinationIndex" />가 <paramref name="destination" /> 배열에서 유효한 인덱스를 식별하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1321">-or-  <paramref name="destinationIndex" /> does not identify a valid index in the <paramref name="destination" /> array.</span>
          </span>
          <span data-ttu-id="3723c-1322">-또는- <paramref name="count" />가 <paramref name="sourceIndex" />부터 이 인스턴스 끝까지의 하위 문자열 길이보다 큽니다.  -또는-  <paramref name="count" />가 <paramref name="destinationIndex" />부터 <paramref name="destination" /> 배열 끝까지의 부분 배열 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1322">-or-  <paramref name="count" /> is greater than the length of the substring from <paramref name="sourceIndex" /> to the end of this instance  -or-  <paramref name="count" /> is greater than the length of the subarray from <paramref name="destinationIndex" /> to the end of the <paramref name="destination" /> array.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static string Create&lt;TState&gt; (int length, TState state, System.Buffers.SpanAction&lt;char,TState&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Create&lt;TState&gt;(int32 length, !!TState state, class System.Buffers.SpanAction`2&lt;char, !!TState&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Create``1(System.Int32,``0,System.Buffers.SpanAction{System.Char,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TState) (length As Integer, state As TState, action As SpanAction(Of Char, TState)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; static System::String ^ Create(int length, TState state, System::Buffers::SpanAction&lt;char, TState&gt; ^ action);" />
      <MemberSignature Language="F#" Value="static member Create : int * 'State * System.Buffers.SpanAction&lt;char, 'State&gt; -&gt; string" Usage="System.string.Create (length, state, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="action" Type="System.Buffers.SpanAction&lt;System.Char,TState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="length">To be added.</param>
        <param name="state">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly string Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string Empty" />
      <MemberSignature Language="DocId" Value="F:System.String.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ Empty;" />
      <MemberSignature Language="F#" Value=" staticval mutable Empty : string" Usage="System.string.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-1323">빈 문자열을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1323">Represents the empty string.</span>
          </span>
          <span data-ttu-id="3723c-1324">이 필드는 읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1324">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1325">이 필드의 값 길이가 0 인 문자열인 ""입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1325">The value of this field is the zero-length string, "".</span></span>  
  
 <span data-ttu-id="3723c-1326">응용 프로그램 코드에서이 필드는 가장 일반적으로 할당에 문자열 변수를 빈 문자열로 초기화에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1326">In application code, this field is most commonly used in assignments to initialize a string variable to an empty string.</span></span> <span data-ttu-id="3723c-1327">문자열의 값이 있는지 여부를 테스트할 `null` 또는 <xref:System.String.Empty?displayProperty=nameWithType>를 사용 하 여를 <xref:System.String.IsNullOrEmpty%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1327">To test whether the value of a string is either `null` or <xref:System.String.Empty?displayProperty=nameWithType>, use the <xref:System.String.IsNullOrEmpty%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrEmpty(System.String)" />
        <altmember cref="M:System.String.IsNullOrWhiteSpace(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EndsWith">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-1328">이 문자열 인스턴스의 끝 부분과 지정한 문자열이 일치하는지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1328">Determines whether the end of this string instance matches a specified string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(char value);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : char -&gt; bool" Usage="string.EndsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : string -&gt; bool" Usage="string.EndsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1329">이 인스턴스의 끝 부분에 있는 부분 문자열과 비교할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1329">The string to compare to the substring at the end of this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1330">이 문자열 인스턴스의 끝 부분과 지정한 문자열이 일치하는지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1330">Determines whether the end of this string instance matches the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1331">이 인스턴스의 끝이 <see langword="true" />와 일치하면 <paramref name="value" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1331">
              <see langword="true" /> if <paramref name="value" /> matches the end of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1332">이 메서드는 비교 `value` 와 같은 길이이 인스턴스의 끝에 있는 부분 문자열과 `value`와 같은지 여부를 나타내는 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1332">This method compares `value` to the substring at the end of this instance that is the same length as `value`, and returns an indication whether they are equal.</span></span> <span data-ttu-id="3723c-1333">같은 문자로 `value` 이 동일한 인스턴스에 대 한 참조 이거나이 인스턴스의 끝 부분과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1333">To be equal, `value` must be a reference to this same instance or match the end of this instance.</span></span>  
  
 <span data-ttu-id="3723c-1334">이 메서드는 현재 문화권을 사용 하 여 단어 (대/소문자 구분 및 문화권) 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1334">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1335">다음 예제에서는 배열의 각 문자열을 기간으로 끝나는지 여부를 나타냅니다 (".").</span><span class="sxs-lookup"><span data-stu-id="3723c-1335">The following example indicates whether each string in an array ends with a period (".").</span></span>  
  
 [!code-csharp[System.String.EndsWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.EndsWith/cs/EndsWith1.cs#1)]
 [!code-vb[System.String.EndsWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.EndsWith/vb/EndsWith1.vb#1)]  
  
 <span data-ttu-id="3723c-1336">다음 예제에서는 정의 `StripEndTags` 메서드를 사용 하는 <xref:System.String.EndsWith%28System.String%29> 줄의 끝에서 끝 태그를 HTML을 제거 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1336">The following example defines a `StripEndTags` method that uses the <xref:System.String.EndsWith%28System.String%29> method to remove HTML end tags from the end of a line.</span></span> <span data-ttu-id="3723c-1337">`StripEndTags` 줄의 끝에 여러 HTML 끝 태그가 제거 되도록에 재귀적으로 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1337">Note that the  `StripEndTags` method is called recursively to ensure that multiple HTML end tags at the end of the line are removed.</span></span>  
  
 [!code-cpp[stringendswith#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringendswith/CPP/stringendswith.cpp#1)]
 [!code-csharp[stringendswith#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringendswith/CS/stringendswith.cs#1)]
 [!code-vb[stringendswith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringendswith/VB/stringendswith.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1338">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1338">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1339">
            <para>에 설명 된 대로 [Strings](~/docs/standard/base-types/best-practices-strings.md) 사용에 대 한 모범 사례 권장 기본값을 대체 하 고 대신 매개 변수를 필요로 하는 메서드를 호출 하는 문자열 비교 메서드를 호출 하지 명시적으로 지정 합니다. 현재 문화권의 문자열 비교 규칙을 사용 하 여 특정 문자열이 부분 문자열로 끝나는지 여부를 결정할 호출을 <see cref="M:System.String.EndsWith(System.String,System.StringComparison)" /> 값을 사용 하 여 메서드 오버 로드 <see cref="F:System.StringComparison.CurrentCulture" /> 에 대 한 해당 <paramref name="comparisonType" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1339">
              <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified. To determine whether a string ends with a particular substring by using the string comparison rules of the current culture, call the <see cref="M:System.String.EndsWith(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.StartsWith(System.String)" />
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : string * StringComparison -&gt; bool" Usage="string.EndsWith (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1340">이 인스턴스의 끝 부분에 있는 부분 문자열과 비교할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1340">The string to compare to the substring at the end of this instance.</span>
          </span>
        </param>
        <param name="comparisonType">
          <span data-ttu-id="3723c-1341">이 문자열과 <c>value</c>를 비교하는 방법을 결정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1341">One of the enumeration values that determines how this string and <c>value</c> are compared.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1342">지정한 비교 옵션을 사용하여 비교할 때 지정한 문자열과 이 문자열 인스턴스의 끝 부분이 일치하는지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1342">Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1343">이 문자열의 끝이 <see langword="true" /> 매개 변수와 일치하면 <paramref name="value" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1343">
              <see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1344">합니다 <xref:System.String.EndsWith%2A> 메서드 비교는 `value` 이 문자열의 끝에 있는 부분 문자열과 매개 변수 같은지 여부를 나타내는 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1344">The <xref:System.String.EndsWith%2A> method compares the `value` parameter to the substring at the end of this string and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="3723c-1345">같은 문자로 `value` 이 동일한 문자열에 대 한 참조를 여야 하며, 빈 문자열 이어야 합니다 (""), 또는이 문자열의 끝과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1345">To be equal, `value` must be a reference to this same string, must be the empty string (""), or must match the end of this string.</span></span> <span data-ttu-id="3723c-1346">수행할 비교 유형을 합니다 <xref:System.String.EndsWith%2A> 메서드 값에 따라 달라 집니다는 `comparisonType` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1346">The type of comparison performed by the <xref:System.String.EndsWith%2A> method depends on the value of the `comparisonType` parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1347">다음 예제에서는 특정 하위 문자열로 끝나는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1347">The following example determines whether a string ends with a particular substring.</span></span> <span data-ttu-id="3723c-1348">문화권, 대/소문자가 무시 여부 및 서 수 비교를 수행 하는 지 여부를 선택 하면 영향을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1348">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span>  
  
 [!code-cpp[System.String.EndsWithCmp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.EndsWithCmp/cpp/ewcmp.cpp#1)]
 [!code-csharp[System.String.EndsWithCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.EndsWithCmp/cs/ewcmp.cs#1)]
 [!code-vb[System.String.EndsWithCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.EndsWithCmp/vb/ewcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1349">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1349">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-1350">
            <paramref name="comparisonType" />이 <see cref="T:System.StringComparison" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1350">
              <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span>
          </span>
        </exception>
        <altmember cref="T:System.StringComparison" />
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String, ignoreCase As Boolean, culture As CultureInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : string * bool * System.Globalization.CultureInfo -&gt; bool" Usage="string.EndsWith (value, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1351">이 인스턴스의 끝 부분에 있는 부분 문자열과 비교할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1351">The string to compare to the substring at the end of this instance.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="3723c-1352">비교 시 대/소문자를 무시하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1352">
              <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="3723c-1353">이 인스턴스와 <c>value</c>의 비교 방법을 결정하는 문화권 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1353">Cultural information that determines how this instance and <c>value</c> are compared.</span>
          </span>
          <span data-ttu-id="3723c-1354">
            <c>culture</c>가 <see langword="null" />이면 현재 문화권이 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1354">If <c>culture</c> is <see langword="null" />, the current culture is used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1355">지정한 문화권을 사용하여 비교할 때 이 문자열 인스턴스의 끝 부분과 지정한 문자열이 일치하는지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1355">Determines whether the end of this string instance matches the specified string when compared using the specified culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1356">이 문자열의 끝이 <see langword="true" /> 매개 변수와 일치하면 <paramref name="value" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1356">
              <see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1357">이 메서드를 비교 합니다 `value` 와 같은 길이이 문자열의 끝에 있는 부분 문자열과 매개 변수 `value`, 같은지 여부를 나타내는 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1357">This method compares the `value` parameter to the substring at the end of this string that is the same length as `value`, and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="3723c-1358">같은 문자로 `value` 이 동일한 인스턴스에 대 한 참조 하거나이 문자열의 끝과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1358">To be equal, `value` must be a reference to this same instance or match the end of this string.</span></span>  
  
 <span data-ttu-id="3723c-1359">이 메서드는 지정 된 대/소문자 구분 및 문화권을 사용 하 여 단어 (문화권별) 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1359">This method performs a word (culture-sensitive) comparison using the specified casing and culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1360">다음 예제에서는 문자열을 다른 문자열의 끝에서 발생 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1360">The following example determines whether a string occurs at the end of another string.</span></span> <span data-ttu-id="3723c-1361"><xref:System.String.EndsWith%2A> 메서드가 여러 번 대/소문자 구분, 소문자, 및 검색 결과 영향을 주는 다른 문화권을 사용 하 여 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1361">The <xref:System.String.EndsWith%2A> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.</span></span>  
  
 [!code-csharp[system.string.EndsWithCI#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.EndsWithCI/cs/ewci.cs#1)]
 [!code-vb[system.string.EndsWithCI#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.EndsWithCI/vb/ewci.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1362">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1362">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-1363">두 <see cref="T:System.String" /> 개체의 값이 같은지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1363">Determines whether two <see cref="T:System.String" /> objects have the same value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="string.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="3723c-1364">이 인스턴스와 비교할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1364">The string to compare to this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1365">이 인스턴스와 지정한 개체의 값이 같은지를 확인합니다. 이 개체도 <see cref="T:System.String" /> 개체여야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1365">Determines whether this instance and a specified object, which must also be a <see cref="T:System.String" /> object, have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1366">
            <see langword="true" />가 <paramref name="obj" />이고 이 인스턴스와 같은 값을 가지면 <see cref="T:System.String" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1366">
              <see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.String" /> and its value is the same as this instance; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="3723c-1367">
            <paramref name="obj" />가 <see langword="null" />이면 메서드에서 <see langword="false" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1367">If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1368">이 메서드는 서 수 (대/소문자 구분 및 문화권을 구분 하지 않는) 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1368">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1369">다음 예제는 <xref:System.String.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1369">The following example demonstrates the <xref:System.String.Equals%2A> method.</span></span>  
  
 [!code-cpp[string.equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.equals/CPP/equals.cpp#1)]
 [!code-csharp[string.equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.equals/CS/equals.cs#1)]
 [!code-vb[string.equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::String ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : string -&gt; bool" Usage="string.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1370">이 인스턴스와 비교할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1370">The string to compare to this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1371">이 인스턴스와 지정한 다른 <see cref="T:System.String" /> 개체의 값이 같은지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1371">Determines whether this instance and another specified <see cref="T:System.String" /> object have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1372">
            <see langword="true" /> 매개 변수와 이 인스턴스의 값이 같으면 <paramref name="value" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1372">
              <see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as the value of this instance; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="3723c-1373">
            <paramref name="value" />가 <see langword="null" />이면 메서드에서 <see langword="false" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1373">If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1374">이 메서드는 서 수 (대/소문자 구분 및 문화권을 구분 하지 않는) 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1374">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1375">다음 예제는 <xref:System.String.Equals%2A> 메서드. 와 해당 단어를 해당 소문자로, 해당 대문자로 라틴 작은 문자 점 없는 I를 포함 하는 단어 "File"을 제목 대/소문자 단어 비교 (U + 0131) 대신 라틴어 작은 문자 I (라는).</span><span class="sxs-lookup"><span data-stu-id="3723c-1375">The following example demonstrates the <xref:System.String.Equals%2A> method.It compares the title-cased word "File" with an equivalent word, its lowercase equivalent, its uppercase equivalent, and a word that contains LATIN SMALL LETTER DOTLESS I (U+0131) instead of LATIN SMALL LETTER I (U+0069).</span></span> <span data-ttu-id="3723c-1376">때문에 합니다 <xref:System.String.Equals%28System.String%29> 서 수 비교를 수행 하는 메서드를 동일한 단어를 사용 하 여 비교만 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1376">Because the <xref:System.String.Equals%28System.String%29> method performs an ordinal comparison, only the comparison with an identical word returns `true`.</span></span>  
  
 [!code-csharp[System.String.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equalsex1.cs#2)]
 [!code-vb[System.String.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equalsex1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (string a, string b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::String ^ a, System::String ^ b);" />
      <MemberSignature Language="F#" Value="static member Equals : string * string -&gt; bool" Usage="System.string.Equals (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="3723c-1377">비교할 첫 번째 문자열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1377">The first string to compare, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="3723c-1378">비교할 두 번째 문자열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1378">The second string to compare, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1379">지정된 두 <see cref="T:System.String" /> 개체의 값이 같은지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1379">Determines whether two specified <see cref="T:System.String" /> objects have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1380">
            <see langword="true" />의 값이 <paramref name="a" />의 값과 같으면 <paramref name="b" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1380">
              <see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="3723c-1381">
            <paramref name="a" /> 및 <paramref name="b" />가 <see langword="null" />인 경우 이 메서드는 <see langword="true" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1381">If both <paramref name="a" /> and <paramref name="b" /> are <see langword="null" />, the method returns <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1382">이 메서드는 서 수 (대/소문자 구분 및 문화권을 구분 하지 않는) 비교를 수행합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1382">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1383">다음 예제는 <xref:System.String.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1383">The following example demonstrates the <xref:System.String.Equals%2A> method.</span></span>  
  
 [!code-cpp[string.equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.equals/CPP/equals.cpp#1)]
 [!code-csharp[string.equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.equals/CS/equals.cs#1)]
 [!code-vb[string.equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="override this.Equals : string * StringComparison -&gt; bool" Usage="string.Equals (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1384">이 인스턴스와 비교할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1384">The string to compare to this instance.</span>
          </span>
        </param>
        <param name="comparisonType">
          <span data-ttu-id="3723c-1385">문자열 비교 방법을 지정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1385">One of the enumeration values that specifies how the strings will be compared.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1386">이 문자열과 지정한 <see cref="T:System.String" /> 개체의 값이 같은지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1386">Determines whether this string and a specified <see cref="T:System.String" /> object have the same value.</span>
          </span>
          <span data-ttu-id="3723c-1387">매개 변수는 비교에 사용되는 문화권, 대/소문자 및 정렬 규칙을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1387">A parameter specifies the culture, case, and sort rules used in the comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1388">
            <see langword="true" /> 매개 변수와 이 문자열의 값이 같으면 <paramref name="value" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1388">
              <see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as this string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1389">`comparisonType` 매개 변수 인지를 나타냅니다 비교에서 현재 또는 고정 문화권을 사용 해야 인식 또는 비교 되는 두 문자열의 대/소문자 무시 단어 또는 서 수 정렬 규칙을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1389">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1390">다음 예제에는 "I", "i", 소문자 및 점 "ı"의 대문자 구성 된 문자열 배열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1390">The following example creates a string array that consists of an uppercase "I", a lowercase "i", and a dotless "ı".</span></span> <span data-ttu-id="3723c-1391">그런 다음 호출 하는 <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> 각 가능한을 사용 하 여 비교할 메서드 <xref:System.StringComparison> 열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1391">It then calls the <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method to compare them by using each possible <xref:System.StringComparison> enumeration value.</span></span>  
  
 [!code-csharp[System.String.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/eqcmp.cs#1)]
 [!code-vb[System.String.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/eqcmp.vb#1)]  
  
 <span data-ttu-id="3723c-1392">다음 예제에서는 각 멤버를 사용 하 여 4 개의 집합이 단어 비교는 <xref:System.StringComparison> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1392">The following example compares four sets of words by using each member of the <xref:System.StringComparison> enumeration.</span></span>  <span data-ttu-id="3723c-1393">영어 (미국) 및 라프어 (위 스웨덴) 문화권의 규칙을 사용 하는 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1393">The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures.</span></span> <span data-ttu-id="3723c-1394">Note encyclopædia"문자열" 및 "백과 사전"는 EN-US 문화권 있지만 라프어 (북부 스웨덴) 문화권에 없는 해당 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1394">Note that the strings "encyclopædia" and "encyclopedia" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.</span></span>  
  
 [!code-csharp[System.String.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equals_ex4.cs#4)]
 [!code-vb[System.String.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equals_ex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-1395">
            <paramref name="comparisonType" />이 <see cref="T:System.StringComparison" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1395">
              <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (string a, string b, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(string a, string b, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (a As String, b As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::String ^ a, System::String ^ b, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Equals : string * string * StringComparison -&gt; bool" Usage="System.string.Equals (a, b, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="3723c-1396">비교할 첫 번째 문자열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1396">The first string to compare, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="3723c-1397">비교할 두 번째 문자열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1397">The second string to compare, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="comparisonType">
          <span data-ttu-id="3723c-1398">비교 규칙을 지정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1398">One of the enumeration values that specifies the rules for the comparison.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1399">지정된 두 <see cref="T:System.String" /> 개체의 값이 같은지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1399">Determines whether two specified <see cref="T:System.String" /> objects have the same value.</span>
          </span>
          <span data-ttu-id="3723c-1400">매개 변수는 비교에 사용되는 문화권, 대/소문자 및 정렬 규칙을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1400">A parameter specifies the culture, case, and sort rules used in the comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1401">
            <see langword="true" /> 매개 변수와 <paramref name="a" /> 매개 변수의 값이 같으면 <paramref name="b" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1401">
              <see langword="true" /> if the value of the <paramref name="a" /> parameter is equal to the value of the <paramref name="b" /> parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1402">`comparisonType` 매개 변수 인지를 나타냅니다 비교에서 현재 또는 고정 문화권을 사용 해야 인식 또는 비교 되는 두 문자열의 대/소문자 무시 단어 또는 서 수 정렬 규칙을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1402">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1403">다음 예제에서는 각 멤버를 사용 하 여 4 개의 집합이 단어 비교는 <xref:System.StringComparison> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1403">The following example compares four sets of words by using each member of the <xref:System.StringComparison> enumeration.</span></span>  <span data-ttu-id="3723c-1404">영어 (미국) 및 라프어 (위 스웨덴) 문화권의 규칙을 사용 하는 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1404">The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures.</span></span> <span data-ttu-id="3723c-1405">Note encyclopædia"문자열" 및 "백과 사전"는 EN-US 문화권 있지만 라프어 (북부 스웨덴) 문화권에 없는 해당 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1405">Note that the strings "encyclopædia" and "encyclopedia" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.</span></span>  
  
 [!code-csharp[System.String.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equals_ex3.cs#3)]
 [!code-vb[System.String.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equals_ex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-1406">
            <paramref name="comparisonType" />이 <see cref="T:System.StringComparison" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1406">
              <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Format">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-1407">지정된 형식에 따라 개체의 값을 문자열로 변환하여 다른 문자열에 삽입 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1407">Converts the value of objects to strings based on the formats specified and inserts them into another string.</span>
          </span>
          <span data-ttu-id="3723c-1408">`String.Format` 메서드를 처음 사용하는 경우 [String.Format 메서드 시작](#Starting) 섹션에서 대략적인 내용을 살펴보세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1408">If you are new to the `String.Format` method, see the [Get started with the String.Format method](#Starting) section for a quick overview.</span>
          </span>
          <span data-ttu-id="3723c-1409">`String.Format` 메서드에 대한 일반 설명서는 [설명](#remarks-top) 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1409">See the [Remarks](#remarks-top) section for general documentation for the `String.Format` method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
<a name="remarks-top"></a>   
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
 
 <span data-ttu-id="3723c-1410">섹션 내용</span><span class="sxs-lookup"><span data-stu-id="3723c-1410">In this section:</span></span>  
  
 <span data-ttu-id="3723c-1411">[String.Format 메서드 시작](#Starting) </span><span class="sxs-lookup"><span data-stu-id="3723c-1411">[Get started with the String.Format method](#Starting) </span></span>  
 <span data-ttu-id="3723c-1412">[메서드 호출 합니까?](#FTaskList) </span><span class="sxs-lookup"><span data-stu-id="3723c-1412">[Which method do I call?](#FTaskList) </span></span>  
 <span data-ttu-id="3723c-1413">[개요에서 Format 메서드](#Format_Brief) </span><span class="sxs-lookup"><span data-stu-id="3723c-1413">[The Format method in brief](#Format_Brief) </span></span>  
 <span data-ttu-id="3723c-1414">[형식 항목](#FormatItem) </span><span class="sxs-lookup"><span data-stu-id="3723c-1414">[The Format item](#FormatItem) </span></span>  
 <span data-ttu-id="3723c-1415">[인수 형식 지정 방법을](#HowFormatted) </span><span class="sxs-lookup"><span data-stu-id="3723c-1415">[How arguments are formatted](#HowFormatted) </span></span>  
 <span data-ttu-id="3723c-1416">[동일한 인덱스에 있는 형식 항목](#SameIndex) </span><span class="sxs-lookup"><span data-stu-id="3723c-1416">[Format items that have the same index](#SameIndex) </span></span>  
 <span data-ttu-id="3723c-1417">[서식 지정 및 문화권](#Format_Culture) </span><span class="sxs-lookup"><span data-stu-id="3723c-1417">[Formatting and culture](#Format_Culture) </span></span>  
 <span data-ttu-id="3723c-1418">[사용자 지정 서식 지정 작업](#Format_Custom) </span><span class="sxs-lookup"><span data-stu-id="3723c-1418">[Custom formatting operations](#Format_Custom) </span></span>  
 [<span data-ttu-id="3723c-1419">String.Format q&a</span><span class="sxs-lookup"><span data-stu-id="3723c-1419">String.Format Q & A</span></span>](#QA)  
  
<a name="Starting"></a>   
## <a name="get-started-with-the-stringformat-method"></a><span data-ttu-id="3723c-1420">String.Format 메서드 시작</span><span class="sxs-lookup"><span data-stu-id="3723c-1420">Get started with the String.Format method</span></span>  
 <span data-ttu-id="3723c-1421">사용 하 여 <xref:System.String.Format%2A?displayProperty=nameWithType> 다른 문자열에는 개체, 변수 또는 식의 값을 삽입 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="3723c-1421">Use <xref:System.String.Format%2A?displayProperty=nameWithType> if you need to insert the value of an object, variable, or expression into another string.</span></span> <span data-ttu-id="3723c-1422">예를 들어,의 값을 삽입할 수 있습니다를 <xref:System.Decimal> 값을 단일 문자열로 사용자에 게 표시할 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1422">For example, you can insert the value of a <xref:System.Decimal> value into a string to display it to the user as a single string:</span></span>  
  
 [!code-cpp[System.String.Format#35](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting2.cpp#35)]
 [!code-csharp-interactive[System.String.Format#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting2.cs#35)]
 [!code-vb[System.String.Format#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting2.vb#35)]  
  
 <span data-ttu-id="3723c-1423">및 해당 값의 서식을 제어할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1423">And you can control that value's formatting:</span></span>  
  
 [!code-cpp[System.String.Format#36](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting2.cpp#36)]
 [!code-csharp-interactive[System.String.Format#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting2.cs#36)]
 [!code-vb[System.String.Format#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting2.vb#36)]  
  
 <span data-ttu-id="3723c-1424">서식 지정 하는 것 외에도 맞춤 및 간격을 제어할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1424">Besides formatting, you can also control alignment and spacing.</span></span>  
  
 ### <a name="inserting-a-string"></a><span data-ttu-id="3723c-1425">문자열을 삽입</span><span class="sxs-lookup"><span data-stu-id="3723c-1425">Inserting a string</span></span>  

 <span data-ttu-id="3723c-1426"><xref:System.String.Format%2A?displayProperty=nameWithType> 하나 이상의 개체 또는 문자열로 변환 되며 형식 문자열에서 지정된 된 위치에 삽입 하는 식 뒤에 형식 문자열을 사용 하 여 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1426"><xref:System.String.Format%2A?displayProperty=nameWithType> starts with a format string, followed by one or more objects or expressions that will be converted to strings and inserted at a specified place in the format string.</span></span> <span data-ttu-id="3723c-1427">예:</span><span class="sxs-lookup"><span data-stu-id="3723c-1427">For example:</span></span>  
  
 [!code-cpp[System.String.Format#30](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#30)]
 [!code-csharp-interactive[System.String.Format#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#30)]
 [!code-vb[System.String.Format#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#30)]  
  
 <span data-ttu-id="3723c-1428">`{0}` 형식 문자열의 형식 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1428">The `{0}` in the format string is a format item.</span></span> <span data-ttu-id="3723c-1429">`0` 문자열 값인 해당 위치에 삽입할 개체의 인덱스가입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1429">`0` is the index of the object whose string value will be inserted at that position.</span></span> <span data-ttu-id="3723c-1430">(인덱스 0부터 시작)입니다. 삽입할 개체는 문자열이 아닌 경우 해당 `ToString` 메서드를 호출 하는 결과 문자열에 삽입 하기 전에 하나를 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1430">(Indexes start at 0.) If the object to be inserted is not a string, its `ToString` method is called to convert it to one before inserting it in the result string.</span></span>  
  
 <span data-ttu-id="3723c-1431">개체 목록에서 두 개의 형식 항목이 및 두 개의 개체를 사용 하는 또 다른 예는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1431">Here's another example that uses two format items and two objects in the object list:</span></span>  
  
 [!code-cpp[System.String.Format#31](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#31)]
 [!code-csharp-interactive[System.String.Format#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#31)]
 [!code-vb[System.String.Format#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#31)]  
  
 <span data-ttu-id="3723c-1432">만큼 서식 항목이 있을 수 있으며 모든 서식 항목의 인덱스 개체 목록에서 일치 하는 개체에 많은 개체와 개체 목록에서 원하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1432">You can have as many format items and as many objects in the object list as you want, as long as the index of every format item has a matching object in the object list.</span></span> <span data-ttu-id="3723c-1433">또한 필요가 걱정는 오버 로드에 대 한 호출입니다. 컴파일러는 적절 한 수를 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1433">You also don't have to worry about which overload you call; the compiler will select the appropriate one for you.</span></span>  
  
 ### <a name="controlling-formatting"></a><span data-ttu-id="3723c-1434">서식 제어</span><span class="sxs-lookup"><span data-stu-id="3723c-1434">Controlling formatting</span></span>  
 <span data-ttu-id="3723c-1435">개체의 서식 지정 하는 방법을 제어 하는 서식 문자열을 사용 하 여 형식 항목의 인덱스를 따를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1435">You can follow the index in a format item with a format string to control how an object is formatted.</span></span> <span data-ttu-id="3723c-1436">예를 들어 `{0:d}` "d" 서식 문자열 개체 목록의 첫 번째 개체에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1436">For example, `{0:d}` applies the "d" format string to the first object in the object list.</span></span> <span data-ttu-id="3723c-1437">다음은 단일 개체를 사용 하 여 예제 및 두 항목의 서식을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1437">Here is an example with a single object and two format items:</span></span>  
  
 [!code-cpp[System.String.Format#32](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#32)]
 [!code-csharp-interactive[System.String.Format#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#32)]
 [!code-vb[System.String.Format#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#32)]  
  
 <span data-ttu-id="3723c-1438">형식 문자열, 모든 숫자 형식을 비롯 한 다양 한 형식 지원 (둘 다 [표준](~/docs/standard/base-types/standard-numeric-format-strings.md) 및 [사용자 지정](~/docs/standard/base-types/custom-numeric-format-strings.md) 형식 문자열), 모든 날짜 및 시간 (둘 다 [표준](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하고[사용자 지정](~/docs/standard/base-types/custom-date-and-time-format-strings.md) 형식 문자열) 및 시간 간격 (둘 다 [표준](~/docs/standard/base-types/standard-timespan-format-strings.md) 하 고 [사용자 지정](~/docs/standard/base-types/custom-timespan-format-strings.md) 형식 문자열), 모든 열거형 형식은 [열거형 형식 ](~/docs/standard/base-types/enumeration-format-strings.md), 및 [Guid](https://msdn.microsoft.com/library/97af8hh4.aspx)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1438">A number of types support format strings, including all numeric types (both [standard](~/docs/standard/base-types/standard-numeric-format-strings.md) and [custom](~/docs/standard/base-types/custom-numeric-format-strings.md) format strings), all dates and times (both [standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [custom](~/docs/standard/base-types/custom-date-and-time-format-strings.md) format strings) and time intervals (both [standard](~/docs/standard/base-types/standard-timespan-format-strings.md) and [custom](~/docs/standard/base-types/custom-timespan-format-strings.md) format strings), all enumeration types [enumeration types](~/docs/standard/base-types/enumeration-format-strings.md), and [GUIDs](https://msdn.microsoft.com/library/97af8hh4.aspx).</span></span> <span data-ttu-id="3723c-1439">또한 사용자 고유의 형식에 형식 문자열에 대 한 지원을 추가할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1439">You can also add support for format strings to your own types.</span></span>  
  
 ### <a name="controlling-spacing"></a><span data-ttu-id="3723c-1440">간격을 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1440">Controlling spacing</span></span>  
 <span data-ttu-id="3723c-1441">와 같은 구문을 사용 하 여 결과 문자열에 삽입 되는 문자열의 너비를 정의할 수 있습니다 `{0,12}`, 12 문자열 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1441">You can define the width of the string that is inserted into the result string by using syntax such as `{0,12}`, which inserts a 12-character string.</span></span> <span data-ttu-id="3723c-1442">이 예제의 첫 번째 개체의 문자열 표현을 12 자 필드에 오른쪽 맞춤를 경우.</span><span class="sxs-lookup"><span data-stu-id="3723c-1442">In this case, the string representation of the first object is right-aligned in the 12-character field.</span></span>  <span data-ttu-id="3723c-1443">(첫 번째 개체의 문자열 표현을 길이가 12 개 이상의 문자 이면 그러나 기본 필드 너비를 무시 되 고 전체 문자열이 결과 문자열에 삽입 됩니다.)</span><span class="sxs-lookup"><span data-stu-id="3723c-1443">(If the string representation of the first object is more than 12 characters in length, though, the preferred field width is ignored, and the entire string is inserted into the result string.)</span></span>  
  
 <span data-ttu-id="3723c-1444">다음 예제에서는 문자열을 보관할 6 자리 필드 정의 "Year" 및 일부 연도 문자열 뿐만 15 자 필드를 "채우기" 문자열을 보유할 수 및 일부 인구 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1444">The following example defines a 6-character field to hold the string "Year" and some year strings, as well as an 15-character field to hold the string "Population" and some population data.</span></span> <span data-ttu-id="3723c-1445">문자는 오른쪽 맞춤 필드 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1445">Note that the characters are right-aligned in the field.</span></span>  
  
 [!code-cpp[System.String.Format#33](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#33)]
 [!code-csharp-interactive[System.String.Format#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting3.cs)]
 [!code-vb[System.String.Format#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#33)]  
  
 ### <a name="controlling-alignment"></a><span data-ttu-id="3723c-1446">맞춤을 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1446">Controlling alignment</span></span>  
 <span data-ttu-id="3723c-1447">기본적으로 문자열은 해당 필드 내에서 오른쪽 정렬 필드 너비를 지정 하는 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1447">By default, strings are right-aligned within their field if you specify a field width.</span></span> <span data-ttu-id="3723c-1448">문자열 필드에서를 왼쪽에 맞추려면 앞 음수 기호를 사용 하 여 필드 너비와 같은 `{0,-12}` 12 자로 오른쪽 정렬 필드를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1448">To left-align strings in a field, you preface the field width with a negative sign, such as `{0,-12}` to define a 12-character right-aligned field.</span></span>  
  
 <span data-ttu-id="3723c-1449">다음 예제에서는 왼쪽 맞춤 레이블 및 데이터를 둘 다는 점을 제외 하 고 이전 쿼리와 비슷합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1449">The following example is similar to the previous one, except that it left-aligns both labels and data.</span></span>  
  
 [!code-cpp[System.String.Format#34](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#34)]
 [!code-csharp-interactive[System.String.Format#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#34)]
 [!code-vb[System.String.Format#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#34)]  
  
 <span data-ttu-id="3723c-1450"><xref:System.String.Format%2A?displayProperty=nameWithType> 에서는 복합 서식 지정 기능을 활용합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1450"><xref:System.String.Format%2A?displayProperty=nameWithType> makes use of the composite formatting feature.</span></span> <span data-ttu-id="3723c-1451">자세한 내용은 [복합 서식 지정](~/docs/standard/base-types/composite-formatting.md)을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-1451">For more information, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>  
  
<a name="FTaskList"></a>   
## <a name="which-method-do-i-call"></a><span data-ttu-id="3723c-1452">메서드 호출 합니까?</span><span class="sxs-lookup"><span data-stu-id="3723c-1452">Which method do I call?</span></span>  
  
|<span data-ttu-id="3723c-1453">대상</span><span class="sxs-lookup"><span data-stu-id="3723c-1453">To</span></span>|<span data-ttu-id="3723c-1454">Call</span><span class="sxs-lookup"><span data-stu-id="3723c-1454">Call</span></span>|  
|--------|----------|  
|<span data-ttu-id="3723c-1455">현재 문화권의 규칙을 사용 하 여 하나 이상의 개체 형식을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1455">Format one or more objects by using the conventions of the current culture.</span></span>|<span data-ttu-id="3723c-1456">포함 하는 오버 로드를 제외 하 고는 `provider` 매개 변수를 나머지 <xref:System.String.Format%2A> 오버 로드 포함을 <xref:System.String> 하나 이상의 개체 매개 변수 뒤에 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1456">Except for the overloads that include a `provider` parameter, the remaining <xref:System.String.Format%2A> overloads include a <xref:System.String> parameter followed by one or more object parameters.</span></span> <span data-ttu-id="3723c-1457">이 인해 결정 필요가 <xref:System.String.Format%2A> 호출 하려는 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1457">Because of this, you don't have to determine which <xref:System.String.Format%2A> overload you intend to call.</span></span> <span data-ttu-id="3723c-1458">없는 오버 로드 중에서 적절 한 오버 로드를 선택 하는 언어 컴파일러는 `provider` 매개 변수를 인수 목록에 기반 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1458">Your language compiler selects the appropriate overload from among the overloads that don't have a `provider` parameter, based on your argument list.</span></span> <span data-ttu-id="3723c-1459">예를 들어, 인수 목록에 다섯 개의 인수, 있는 경우 컴파일러를 호출 합니다 <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1459">For example, if your argument list has five arguments, the compiler calls the <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> method.</span></span>|  
|<span data-ttu-id="3723c-1460">특정 문화권의 규칙을 사용 하 여 하나 이상의 개체 형식을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1460">Format one or more objects by using the conventions of a specific culture.</span></span>|<span data-ttu-id="3723c-1461">각 <xref:System.String.Format%2A> 시작 하는 오버 로드 된 `provider` 뒤에 매개 변수를 <xref:System.String> 매개 변수 및 하나 이상의 매개 변수 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1461">Each <xref:System.String.Format%2A> overload that begins with a `provider` parameter is followed by a <xref:System.String> parameter and one or more object parameters.</span></span> <span data-ttu-id="3723c-1462">이 인해 특정 확인할 필요가 <xref:System.String.Format%2A> 호출 하려는 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1462">Because of this, you don't have to determine which specific <xref:System.String.Format%2A> overload you intend to call.</span></span> <span data-ttu-id="3723c-1463">언어 컴파일러는 오버 로드 중에서 적절 한 오버 로드를 선택는 `provider` 매개 변수를 인수 목록에 기반 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1463">Your language compiler selects the appropriate overload from among the overloads that have a `provider` parameter, based on your argument list.</span></span> <span data-ttu-id="3723c-1464">예를 들어, 인수 목록에 다섯 개의 인수, 있는 경우 컴파일러를 호출 합니다 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1464">For example, if your argument list has five arguments, the compiler calls the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method.</span></span>|  
|<span data-ttu-id="3723c-1465">사용 하 여 사용자 지정 서식 지정 작업 수행을 <xref:System.ICustomFormatter> 구현 또는 <xref:System.IFormattable> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1465">Perform a custom formatting operation either with an <xref:System.ICustomFormatter> implementation or an <xref:System.IFormattable> implementation.</span></span>|<span data-ttu-id="3723c-1466">4 개의 오버 로드 중 하나는 `provider` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1466">Any of the four overloads with a `provider` parameter.</span></span> <span data-ttu-id="3723c-1467">컴파일러는 오버 로드 중에서 적절 한 오버 로드를 선택는 `provider` 매개 변수를 인수 목록에 기반 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1467">The compiler selects the appropriate overload from among the overloads that have a `provider` parameter, based on your argument list.</span></span>|  
  
<a name="Format_Brief"></a>   
## <a name="the-format-method-in-brief"></a><span data-ttu-id="3723c-1468">개요에서 Format 메서드</span><span class="sxs-lookup"><span data-stu-id="3723c-1468">The Format method in brief</span></span> 

 <span data-ttu-id="3723c-1469">각 오버 로드는 <xref:System.String.Format%2A> 메서드를 [복합 서식 지정 기능](~/docs/standard/base-types/composite-formatting.md) 호출부터 인덱싱된 자리 표시자를 포함 하도록 *항목의 서식을 지정*, 복합 형식 문자열에 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1469">Each overload of the <xref:System.String.Format%2A> method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to include zero-based indexed placeholders, called *format items*, in a composite format string.</span></span> <span data-ttu-id="3723c-1470">런타임 시 각 서식 항목 매개 변수 목록에서 해당 인수의 문자열 표현으로 바뀝니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1470">At run time, each format item is replaced with the string representation of the corresponding argument in a parameter list.</span></span> <span data-ttu-id="3723c-1471">인수의 값이 `null`, 형식 항목으로 바뀝니다. <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1471">If the value of the argument is `null`, the format item is replaced with <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-1472">다음을 호출 하는 예를 들어를 <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> 메서드는 세 가지 형식 항목을 사용 하 여 형식 문자열을 포함할 {0}, {1}, 및 {2}, 및 세 개 항목으로 인수 목록.</span><span class="sxs-lookup"><span data-stu-id="3723c-1472">For example, the following call to the <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method includes a format string with three format items, {0}, {1}, and {2}, and an argument list with three items.</span></span>  
  
 [!code-cpp[System.String.Format#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatoverload1.cpp#8)]
 [!code-csharp-interactive[System.String.Format#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatoverload1.cs#8)]
 [!code-vb[System.String.Format#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatoverload1.vb#8)]  
  
<a name="FormatItem"></a>   
## <a name="the-format-item"></a><span data-ttu-id="3723c-1473">형식 항목</span><span class="sxs-lookup"><span data-stu-id="3723c-1473">The format item</span></span>  
 <span data-ttu-id="3723c-1474">형식 항목에이 구문이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1474">A format item has this syntax:</span></span>  
  
```  
{index[,alignment][:formatString]}  
```  
 
 <span data-ttu-id="3723c-1475">대괄호는 선택적 요소를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1475">Brackets denote optional elements.</span></span> <span data-ttu-id="3723c-1476">여는 태그와 닫는 중괄호는 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1476">The opening and closing braces are required.</span></span> <span data-ttu-id="3723c-1477">(리터럴 여 포함 하거나 참조 형식 문자열에서는 닫는 중괄호는 [중괄호 이스케이프](~/docs/standard/base-types/composite-formatting.md#escaping-braces) 섹션을 [복합 서식 지정](~/docs/standard/base-types/composite-formatting.md) 문서입니다.)</span><span class="sxs-lookup"><span data-stu-id="3723c-1477">(To include a literal opening or closing brace in the format string, see the [Escaping Braces](~/docs/standard/base-types/composite-formatting.md#escaping-braces) section in the [Composite Formatting](~/docs/standard/base-types/composite-formatting.md) article.)</span></span>  
  
 <span data-ttu-id="3723c-1478">예를 들어 통화 값 서식을 지정 하려면 형식 항목은 다음과 같이 나타날 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1478">For example, a format item to format a currency value might appear like this:</span></span>  
  
 [!code-cpp[System.String.Format#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatsyntax1.cpp#12)]
 [!code-csharp-interactive[System.String.Format#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatsyntax1.cs#12)]  
 [!code-vb[System.String.Format#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatsyntax1.vb#12)]  

 <span data-ttu-id="3723c-1479">형식 항목에는 다음 요소가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1479">A format item has the following elements:</span></span>  
  
 <span data-ttu-id="3723c-1480">*index*</span><span class="sxs-lookup"><span data-stu-id="3723c-1480">*index*</span></span>  
 <span data-ttu-id="3723c-1481">문자열 표현의 인수의 인덱스 문자열의이 위치에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1481">The zero-based index of the argument whose string representation is to be included at this position in the string.</span></span> <span data-ttu-id="3723c-1482">이 인수가 `null`, 빈 문자열은 문자열의이 위치에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1482">If this argument is `null`, an empty string will be included at this position in the string.</span></span>  
  
 <span data-ttu-id="3723c-1483">*alignment*</span><span class="sxs-lookup"><span data-stu-id="3723c-1483">*alignment*</span></span>  
 <span data-ttu-id="3723c-1484">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1484">Optional.</span></span> <span data-ttu-id="3723c-1485">인수 삽입 되는 지, 오른쪽 맞춤 되 (양의 정수) 왼쪽 맞춤 (음의 정수)에 필드의 총 길이 나타내는 부호 있는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1485">A signed integer that indicates the total length of the field into which the argument is inserted and whether it is right-aligned (a positive integer) or left-aligned (a negative integer).</span></span> <span data-ttu-id="3723c-1486">생략 하면 *맞춤*, 선행 또는 후행 공백 없이 필드에 해당 인수의 문자열 표현을 삽입 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1486">If you omit *alignment*, the string representation of the corresponding argument is inserted in a field with no leading or trailing spaces.</span></span>  
  
 <span data-ttu-id="3723c-1487">경우 값 *맞춤* 삽입할 인수의 길이 보다 작으면 *맞춤* 무시 됩니다 및 인수의 문자열 표현의 길이가 필드 너비로 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1487">If the value of *alignment* is less than the length of the argument to be inserted, *alignment* is ignored and the length of the string representation of the argument is used as the field width.</span></span>  
  
 <span data-ttu-id="3723c-1488">*formatString*</span><span class="sxs-lookup"><span data-stu-id="3723c-1488">*formatString*</span></span>  
 <span data-ttu-id="3723c-1489">선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1489">Optional.</span></span> <span data-ttu-id="3723c-1490">해당 인수의 결과 문자열의 형식을 지정 하는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1490">A string that specifies the format of the corresponding argument's result string.</span></span> <span data-ttu-id="3723c-1491">생략 하면 *formatString*에 해당 인수가 매개 변수가 없는 `ToString` 메서드를 호출 하는 문자열 표현을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1491">If you omit *formatString*, the corresponding argument's parameterless `ToString` method is called to produce its string representation.</span></span> <span data-ttu-id="3723c-1492">지정 하는 경우 *formatString*, 형식 항목에서 참조 하는 인수를 구현 해야 합니다는 <xref:System.IFormattable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1492">If you specify *formatString*, the argument referenced by the format item must implement the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="3723c-1493">형식 문자열을 지 원하는 형식이 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1493">Types that support format strings include:</span></span>  
  
-   <span data-ttu-id="3723c-1494">모든 정수 계열 및 부동 소수점 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1494">All integral and floating-point types.</span></span> <span data-ttu-id="3723c-1495">(참조 [표준 숫자 서식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 하 고 [사용자 지정 숫자 서식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md).)</span><span class="sxs-lookup"><span data-stu-id="3723c-1495">(See [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).)</span></span>  
  
-   <span data-ttu-id="3723c-1496"><xref:System.DateTime>와 <xref:System.DateTimeOffset>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-1496"><xref:System.DateTime> and <xref:System.DateTimeOffset>.</span></span> <span data-ttu-id="3723c-1497">(참조 [표준 날짜 및 시간 형식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md).)</span><span class="sxs-lookup"><span data-stu-id="3723c-1497">(See [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).)</span></span>  
  
-   <span data-ttu-id="3723c-1498">모든 열거형 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1498">All enumeration types.</span></span> <span data-ttu-id="3723c-1499">(참조 [열거형 형식 문자열](~/docs/standard/base-types/enumeration-format-strings.md).)</span><span class="sxs-lookup"><span data-stu-id="3723c-1499">(See [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).)</span></span>  
  
-   <span data-ttu-id="3723c-1500"><xref:System.TimeSpan> 값</span><span class="sxs-lookup"><span data-stu-id="3723c-1500"><xref:System.TimeSpan> values.</span></span> <span data-ttu-id="3723c-1501">(참조 [표준 TimeSpan 서식 문자열](~/docs/standard/base-types/standard-timespan-format-strings.md) 하 고 [사용자 지정 TimeSpan 형식 문자열](~/docs/standard/base-types/custom-timespan-format-strings.md).)</span><span class="sxs-lookup"><span data-stu-id="3723c-1501">(See [Standard TimeSpan Format Strings](~/docs/standard/base-types/standard-timespan-format-strings.md) and [Custom TimeSpan Format Strings](~/docs/standard/base-types/custom-timespan-format-strings.md).)</span></span>  
  
-   <span data-ttu-id="3723c-1502">GUID입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1502">GUIDs.</span></span> <span data-ttu-id="3723c-1503">(참조는 <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> 메서드.)</span><span class="sxs-lookup"><span data-stu-id="3723c-1503">(See the <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> method.)</span></span>  
  
 <span data-ttu-id="3723c-1504">그러나 모든 사용자 지정 형식을 구현할 수 있습니다 <xref:System.IFormattable> 기존 형식을 확장할 또는 <xref:System.IFormattable> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1504">However, note that any custom type can implement <xref:System.IFormattable> or extend an existing type's <xref:System.IFormattable> implementation.</span></span>  
  
 <span data-ttu-id="3723c-1505">다음 예제에서는 합니다 `alignment` 및 `formatString` 인수 형식이 지정 된 출력을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1505">The following example uses the `alignment` and `formatString` arguments to produce formatted output.</span></span>  
  
 [!code-cpp[System.String.Format#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatoverload2.cpp#9)]
 [!code-csharp-interactive[System.String.Format#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatoverload2.cs#9)]
 [!code-vb[System.String.Format#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatoverload2.vb#9)]  
  
<a name="HowFormatted"></a>   
## <a name="how-arguments-are-formatted"></a><span data-ttu-id="3723c-1506">인수 형식 지정 방법을</span><span class="sxs-lookup"><span data-stu-id="3723c-1506">How arguments are formatted</span></span>  
 <span data-ttu-id="3723c-1507">형식 항목 문자열의 시작 부분에서 순차적으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1507">Format items are processed sequentially from the beginning of the string.</span></span> <span data-ttu-id="3723c-1508">각 서식 항목 메서드의 인수 목록에서 개체에 해당 하는 인덱스를 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1508">Each format item has an index that corresponds to an object in the method's argument list.</span></span> <span data-ttu-id="3723c-1509"><xref:System.String.Format%2A> 메서드 인수를 검색 하 고 해당 문자열 표현에 다음과 같이 파생 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1509">The <xref:System.String.Format%2A> method retrieves the argument and derives its string representation as follows:</span></span>  
  
-   <span data-ttu-id="3723c-1510">인수가 `null`를 삽입 <xref:System.String.Empty?displayProperty=nameWithType> 결과 문자열에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1510">If the argument is `null`, the method inserts <xref:System.String.Empty?displayProperty=nameWithType> into the result string.</span></span> <span data-ttu-id="3723c-1511">처리에 신경 쓸 필요가 없습니다를 <xref:System.NullReferenceException> null 인수에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1511">You don't have to be concerned with handling a <xref:System.NullReferenceException> for null arguments.</span></span> 
  
-   <span data-ttu-id="3723c-1512">호출 하는 경우는 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> 오버 로드 하며 `provider` 개체의 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 구현은 null이 아닌 <xref:System.ICustomFormatter> 구현에는 전달 된 인수 해당 <xref:System.ICustomFormatter.Format%28System.String%2CSystem.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1512">If you call the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> overload and the `provider` object's <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> implementation returns a non-null <xref:System.ICustomFormatter> implementation, the argument is passed to its <xref:System.ICustomFormatter.Format%28System.String%2CSystem.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3723c-1513">형식 항목에 포함 된 경우는 *formatString* 인수 하는 첫 번째 인수로 메서드에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1513">If the format item includes a *formatString* argument, it is passed as the first argument to the method.</span></span> <span data-ttu-id="3723c-1514">경우는 <xref:System.ICustomFormatter> 다음 단계 실행이 고, 그렇지 않으면 구현 제공 되며 문자열 인수를 문자열 표현으로 반환 되는 null이 아닌 문자열을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1514">If the <xref:System.ICustomFormatter> implementation is available and produces a non-null string, that string is returned as the string representation of the argument; otherwise, the next step executes.</span></span>  
  
-   <span data-ttu-id="3723c-1515">인수를 구현 하는 경우는 <xref:System.IFormattable> 인터페이스를 해당 <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 구현이 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1515">If the argument implements the <xref:System.IFormattable> interface, its <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation is called.</span></span>  
  
-   <span data-ttu-id="3723c-1516">인수의 매개 변수가 없는 `ToString` 메서드를 재정의 하거나 기본 클래스 구현에서 상속, 라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1516">The argument's parameterless `ToString` method, which either overrides or inherits from a base class implementation, is called.</span></span>  
  
 <span data-ttu-id="3723c-1517">에 대 한 호출을 가로채는 예는 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 메서드 어떤 정보를 볼 수 있습니다 합니다 <xref:System.String.Format%2A> 메서드가 전달 복합 형식 문자열의 각 서식 항목에 대 한 형식 지정 메서드를 참조 하세요 [예제: 절편 공급자로 및 로마 숫자 포맷터](#Format7_Example)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1517">For an example that intercepts calls to the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method and allows you to see what information the <xref:System.String.Format%2A> method passes to a formatting method for each format item in a composite format string, see [Example: An intercept provider and Roman numeral formatter](#Format7_Example).</span></span>  

 <span data-ttu-id="3723c-1518">자세한 내용은 참조 하세요. 합니다 [처리 순서](~/docs/standard/base-types/composite-formatting.md##processing-order) 섹션을 [복합 서식 지정](~/docs/standard/base-types/composite-formatting.md) 문서.</span><span class="sxs-lookup"><span data-stu-id="3723c-1518">For more information, see the [Processing Order](~/docs/standard/base-types/composite-formatting.md##processing-order) section in the [Composite Formatting](~/docs/standard/base-types/composite-formatting.md) article.</span></span>  
  
<a name="SameIndex"></a>   
## <a name="format-items-that-have-the-same-index"></a><span data-ttu-id="3723c-1519">동일한 인덱스에 있는 형식 항목</span><span class="sxs-lookup"><span data-stu-id="3723c-1519">Format items that have the same index</span></span>  
 <span data-ttu-id="3723c-1520">합니다 <xref:System.String.Format%2A> 메서드가 throw를 <xref:System.FormatException> 인덱스 항목의 인덱스는 인수 목록의 인수 개수 보다 크거나 같으면 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1520">The <xref:System.String.Format%2A> method throws a <xref:System.FormatException> exception if the index of an index item is greater than or equal to the number of arguments in the argument list.</span></span> <span data-ttu-id="3723c-1521">그러나 `format` 여러 서식 항목이 동일한 인덱스를가지고 있다면 인수가 있으면 것 보다 많은 수의 서식 항목이 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1521">However, `format` can include more format items than there are arguments, as long as multiple format items have the same index.</span></span> <span data-ttu-id="3723c-1522">호출에는 <xref:System.String.Format%28System.String%2CSystem.Object%29> 다음 예제에서는 인수 목록에에서 메서드는 단일 인수를 갖지만 형식 문자열에 두 개의 형식 항목이 포함 되어: 숫자의 소수 값이 표시 됩니다 하나 및 다른 16 진수 값을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1522">In the call to the <xref:System.String.Format%28System.String%2CSystem.Object%29> method in following example, the argument list has a single argument, but the format string includes two format items: one displays the decimal value of a number, and the other displays its hexadecimal value.</span></span>  
  
 [!code-csharp-interactive[System.String.Format2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format2/cs/Example1.cs#1)]
 [!code-vb[System.String.Format2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format2/vb/Example1.vb#1)]  
  
<a name="Format_Culture"></a>   
## <a name="formatting-and-culture"></a><span data-ttu-id="3723c-1523">서식 지정 및 문화권</span><span class="sxs-lookup"><span data-stu-id="3723c-1523">Formatting and culture</span></span>  
 <span data-ttu-id="3723c-1524">일반적으로 인수 목록의 개체에서 반환 하는 현재 문화권의 규칙을 사용 하 여 해당 문자열 표현으로 변환 됩니다는 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1524">Generally, objects in the argument list are converted to their string representations by using the conventions of the current culture, which is returned by the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="3723c-1525">오버 로드 중 하나를 호출 하 여이 동작을 제어할 수 있습니다 <xref:System.String.Format%2A> 포함 하는 한 `provider` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1525">You can control this behavior by calling one of the overloads of <xref:System.String.Format%2A> that includes a `provider` parameter.</span></span> <span data-ttu-id="3723c-1526">합니다 `provider` 매개 변수는는 <xref:System.IFormatProvider> 구현 형식을 조정 하는 데 사용 되는 사용자 지정 및 문화권별 형식 지정 정보를 제공 하는 프로세스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1526">The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies custom and culture-specific formatting information that is used to moderate the formatting process.</span></span>  
  
 <span data-ttu-id="3723c-1527">합니다 <xref:System.IFormatProvider> 인터페이스에는 단일 멤버인 <xref:System.IFormatProvider.GetFormat%2A>는 서식 지정 정보를 제공 하는 개체를 반환 하는 일을 담당 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1527">The <xref:System.IFormatProvider> interface has a single member, <xref:System.IFormatProvider.GetFormat%2A>, which is responsible for returning the object that provides formatting information.</span></span> <span data-ttu-id="3723c-1528">.NET Framework에는 3 개의 <xref:System.IFormatProvider> culture 별 서식 지정을 제공 하는 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1528">The .NET Framework has three <xref:System.IFormatProvider> implementations that provide culture-specific formatting:</span></span>  
  
-   <span data-ttu-id="3723c-1529"><xref:System.Globalization.CultureInfo>.</span><span class="sxs-lookup"><span data-stu-id="3723c-1529"><xref:System.Globalization.CultureInfo>.</span></span> <span data-ttu-id="3723c-1530">해당 <xref:System.Globalization.CultureInfo.GetFormat%2A> 메서드는 문화권별 <xref:System.Globalization.NumberFormatInfo> 숫자 값 및 culture 별 서식 지정에 대 한 개체 <xref:System.Globalization.DateTimeFormatInfo> 날짜 및 시간 값의 서식을 지정 하는 것에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1530">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns a culture-specific <xref:System.Globalization.NumberFormatInfo> object for formatting numeric values and a culture-specific <xref:System.Globalization.DateTimeFormatInfo> object for formatting date and time values.</span></span>  
  
-   <span data-ttu-id="3723c-1531"><xref:System.Globalization.DateTimeFormatInfo>에서 날짜 및 시간 값의 문화권별 서식 지정에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1531"><xref:System.Globalization.DateTimeFormatInfo>, which is used for culture-specific formatting of date and time values.</span></span> <span data-ttu-id="3723c-1532">해당 <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A> 메서드 자체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1532">Its <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A> method returns itself.</span></span>  
  
-   <span data-ttu-id="3723c-1533"><xref:System.Globalization.NumberFormatInfo>에서 숫자 값의 문화권별 서식 지정에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1533"><xref:System.Globalization.NumberFormatInfo>, which is used for culture-specific formatting of numeric values.</span></span> <span data-ttu-id="3723c-1534">해당 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 속성 자체를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1534">Its <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> property returns itself.</span></span> 

<a name="Format_Custom"></a>   
## <a name="custom-formatting-operations"></a><span data-ttu-id="3723c-1535">사용자 지정 서식 지정 작업</span><span class="sxs-lookup"><span data-stu-id="3723c-1535">Custom formatting operations</span></span>  
 <span data-ttu-id="3723c-1536">오버 로드 중 하나를 호출할 수도 있습니다는 <xref:System.String.Format%2A> 있는 메서드를 `provider` 형식의 매개 변수 <xref:System.IFormatProvider> 사용자 지정 서식 지정 작업을 수행 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1536">You can also call the any of the overloads of the <xref:System.String.Format%2A> method that have a `provider` parameter of type <xref:System.IFormatProvider> to perform custom formatting operations.</span></span> <span data-ttu-id="3723c-1537">예를 들어, 전화 번호 또는 id로 정수를 서식을 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1537">For example, you could format an integer as an identification number or as a telephone number.</span></span> <span data-ttu-id="3723c-1538">사용자 지정 형식 지정을 수행 하 여 `provider` 인수 둘 다 구현 해야 합니다는 <xref:System.IFormatProvider> 및 <xref:System.ICustomFormatter> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1538">To perform custom formatting, your `provider` argument must implement both the <xref:System.IFormatProvider> and <xref:System.ICustomFormatter> interfaces.</span></span> <span data-ttu-id="3723c-1539">경우는 <xref:System.String.Format%2A> 메서드에 전달 됩니다는 <xref:System.ICustomFormatter> 구현으로는 `provider` 인수를를 <xref:System.String.Format%2A> 메서드 호출 해당 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 구현 형식의 개체를 요청 하 고 <xref:System.ICustomFormatter>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1539">When the <xref:System.String.Format%2A> method is passed an <xref:System.ICustomFormatter> implementation as the `provider` argument, the <xref:System.String.Format%2A> method calls its   <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> implementation and requests an object of type <xref:System.ICustomFormatter>.</span></span> <span data-ttu-id="3723c-1540">그런 다음 반환 된 호출 <xref:System.ICustomFormatter> 개체의 <xref:System.ICustomFormatter.Format%2A> 복합 문자열의 각 서식 항목 형식을 지정 메서드를 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1540">It then calls the returned <xref:System.ICustomFormatter> object's <xref:System.ICustomFormatter.Format%2A> method to format each format item in the composite string passed to it.</span></span>  
  
 <span data-ttu-id="3723c-1541">사용자 지정 형식 지정 솔루션을 제공 하는 방법에 대 한 자세한 내용은 참조 하세요. [방법: 정의 및 사용 하 여 사용자 지정 숫자 서식 공급자](~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md) 고 <xref:System.ICustomFormatter>입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1541">For more information about providing custom formatting solutions, see [How to: Define and Use Custom Numeric Format Providers](~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md) and <xref:System.ICustomFormatter>.</span></span> <span data-ttu-id="3723c-1542">서식이 지정 된 사용자 지정 숫자 정수를 변환 하는 예제를 보려면 [예제: 사용자 지정 서식 지정 작업](#Format6_Example)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1542">For an example that converts integers to formatted custom numbers, see [Example: A custom formatting operation](#Format6_Example).</span></span> <span data-ttu-id="3723c-1543">부호 없는 바이트 로마 숫자 변환 하는 예제를 보려면 [예제: 절편 공급자 및 로마 숫자 포맷터를](#Format7_Example)입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1543">For an example that converts unsigned bytes to Roman numerals, see [Example: An intercept provider and Roman numeral formatter](#Format7_Example).</span></span>  
  
<a name="Format6_Example" />  
### <a name="example-a-custom-formatting-operation"></a><span data-ttu-id="3723c-1544">예: 사용자 지정 서식 지정 작업</span><span class="sxs-lookup"><span data-stu-id="3723c-1544">Example: A custom formatting operation</span></span>  
 <span data-ttu-id="3723c-1545">이 예제에서는 폼 x-xxxxx-xx에서 고객 계정 번호로 정수 값의 서식을 지정 하는 형식 공급자를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1545">This example defines a format provider that formats an integer value as a customer account number in the form x-xxxxx-xx.</span></span>  
  
 [!code-cpp[System.String.Format#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatexample2.cpp#2)]
 [!code-csharp-interactive[System.String.Format#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/FormatExample2.cs#2)]
 [!code-vb[System.String.Format#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/FormatExample2.vb#2)]  
  
<a name="Format7_Example" />  
### <a name="example-an-intercept-provider-and-roman-numeral-formatter"></a><span data-ttu-id="3723c-1546">예:는 절편 공급자 및 로마 숫자 포맷터</span><span class="sxs-lookup"><span data-stu-id="3723c-1546">Example: An intercept provider and Roman numeral formatter</span></span>  
 <span data-ttu-id="3723c-1547">구현 하는 사용자 지정 형식 공급자를 정의 하는이 예제는 <xref:System.ICustomFormatter> 고 <xref:System.IFormatProvider> 두 작업을 수행 하는 인터페이스:</span><span class="sxs-lookup"><span data-stu-id="3723c-1547">This example defines a custom format provider that implements the <xref:System.ICustomFormatter> and <xref:System.IFormatProvider> interfaces to do two things:</span></span>  
  
-   <span data-ttu-id="3723c-1548">전달 된 매개 변수 표시 해당 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1548">It displays the parameters passed to its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="3723c-1549">매개 변수를 볼 수 있게 된 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> 메서드 형식을 지정 하려고 하는 각 개체에 대 한 사용자 지정 서식 지정 구현에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1549">This enables us to see what parameters the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method is passing to the custom formatting implementation for each object that it tries to format.</span></span> <span data-ttu-id="3723c-1550">이 응용 프로그램을 디버깅할 때 유용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1550">This can be useful when you're debugging your application.</span></span>  
  
-   <span data-ttu-id="3723c-1551">서식을 지정할 개체는 "R" 표준 서식 문자열을 사용 하 여 형식을 지정할 수 있는 부호 없는 바이트 값 이면 사용자 지정 포맷터 서식을 로마 숫자를 숫자 값을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1551">If the object to be formatted is an unsigned byte value that is to be formatted by using the "R" standard format string, the custom formatter formats the numeric value as a Roman numeral.</span></span>  
  
 [!code-cpp[System.String.Format#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/interceptor2.cpp#11)]
 [!code-csharp-interactive[System.String.Format#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/interceptor2.cs#11)]
 [!code-vb[System.String.Format#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/interceptor2.vb#11)]  
  
<a name="QA"></a>   
## <a name="stringformat-q--a"></a><span data-ttu-id="3723c-1552">String.Format q&a</span><span class="sxs-lookup"><span data-stu-id="3723c-1552">String.Format Q & A</span></span>  
  
### <a name="why-do-you-recommend-string-interpolation-over-calls-to-the-stringformat-method"></a><span data-ttu-id="3723c-1553">왜 합니까 문자열 보간에 대 한 호출을 통해는 `String.Format` 메서드?</span><span class="sxs-lookup"><span data-stu-id="3723c-1553">Why do you recommend string interpolation over calls to the `String.Format` method?</span></span>

<span data-ttu-id="3723c-1554">문자열 보간 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1554">String interpolation is:</span></span>

- <span data-ttu-id="3723c-1555">더 유연 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1555">More flexible.</span></span> <span data-ttu-id="3723c-1556">사용할 수 있습니다 임의의 문자열 합성 서식 지정을 지 원하는 메서드를 호출 하지 않아도 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1556">It can be used in any string without requiring a call to a method that supports composite formatting.</span></span> <span data-ttu-id="3723c-1557">호출 해야 하는 고, 그렇지 합니다 <xref:System.String.Format%2A> 와 같은 복합 서식 지정을 지 원하는 다른 메서드나 메서드 <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> 또는 <xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1557">Otherwise, you have to call the <xref:System.String.Format%2A> method or another method that supports composite formatting, such as <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType>.</span></span> 

- <span data-ttu-id="3723c-1558">더 쉽게 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1558">More readable.</span></span> <span data-ttu-id="3723c-1559">식을 문자열에 삽입 하려면 보간된 식에서 보다 인수 목록에 나타나므로 보간된 문자열은 코드를 읽기를 훨씬 간단 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1559">Because the expression to insert into a string appears in the interpolated expression rather than in a argument list, interpolated strings are far easier to code and to read.</span></span> <span data-ttu-id="3723c-1560">큰 가독성을 위해 인해 보간된 문자열 뿐만 아니라 메서드 호출을 복합 형식, 바꿀 있지만 데도 사용할 수 있습니다 문자열 연결 연산에서 보다 간결 하 고 명확 하 게 코드를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1560">Because of their greater readability, interpolated strings can replace not only calls to composite format methods, but they can also be used in string concatenation operations to produce more concise, clearer code.</span></span> 

<span data-ttu-id="3723c-1561">다음 두 코드 예제에서는 비교 문자열 연결 및 복합 형식 지정 메서드 호출을 통해 보간된 문자열의 우월성을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1561">A comparison of the following two code examples illustrates the superiority of interpolated strings over string concatenation and calls to composite formatting methods.</span></span> <span data-ttu-id="3723c-1562">다음 예제에서는 여러 문자열 연결 작업 사용 세부 정보 표시 및 읽기에 하드 코드를 생성합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1562">The use of multiple string concatenation operations in the following example produces verbose and hard-to-read code.</span></span>

[!code-csharp-interactive[non-interpolated string operations](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa-interpolated1.cs)]
[!code-vb[non-interpolated string operations](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa-interpolated1.vb)]  

<span data-ttu-id="3723c-1563">다음 예제에서 보간된 문자열을 사용할 문자열 연결 문 및 호출 보다 훨씬 명확 하 게, 더 간결한 코드를 생성 하는 반면,는 <xref:System.String.Format%2A> 이전 예제의 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1563">In contrast, the use of interpolated strings in the following example produce much clearer, more concise code than the string concatenation statement and the call to the <xref:System.String.Format%2A> method in the previous example.</span></span>

[!code-csharp-interactive[interpolated string operations](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa-interpolated2.cs)]
[!code-vb[interpolated string operations](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa-interpolated2.vb)]  

### <a name="where-can-i-find-a-list-of-the-predefined-format-strings-that-can-be-used-with-format-items"></a><span data-ttu-id="3723c-1564">형식 항목을 사용 하 여 사용할 수 있는 미리 정의 된 형식 문자열 목록을 찾기</span><span class="sxs-lookup"><span data-stu-id="3723c-1564">Where can I find a list of the predefined format strings that can be used with format items?</span></span>  
  
-   <span data-ttu-id="3723c-1565">모든 정수 계열 및 부동 소수점 형식에 대 한 참조 [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) 하 고 [사용자 지정 숫자 서식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1565">For all integral and floating-point types, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="3723c-1566">날짜 및 시간 값에 대 한 참조 [표준 날짜 및 시간 서식 문자열](~/docs/standard/base-types/standard-date-and-time-format-strings.md) 하 고 [사용자 지정 날짜 및 시간 형식 문자열](~/docs/standard/base-types/custom-date-and-time-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1566">For date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="3723c-1567">열거형 값을 참조 하세요 [열거형 형식 문자열](~/docs/standard/base-types/enumeration-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1567">For enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>  
  
-   <span data-ttu-id="3723c-1568">에 대 한 <xref:System.TimeSpan> 값을 참조 하세요 [표준 TimeSpan 서식 문자열](~/docs/standard/base-types/standard-timespan-format-strings.md) 하 고 [사용자 지정 TimeSpan 서식 문자열](~/docs/standard/base-types/custom-timespan-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1568">For <xref:System.TimeSpan> values, see  [Standard TimeSpan Format Strings](~/docs/standard/base-types/standard-timespan-format-strings.md) and [Custom TimeSpan Format Strings](~/docs/standard/base-types/custom-timespan-format-strings.md).</span></span>  
  
-   <span data-ttu-id="3723c-1569">에 대 한 <xref:System.Guid> 의 설명 섹션을 참조 하는 값은 <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> 참조 페이지입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1569">For <xref:System.Guid> values, see the Remarks section of the <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> reference page.</span></span>  
  
### <a name="how-do-i-control-the-alignment-of-the-result-strings-that-replace-format-items"></a><span data-ttu-id="3723c-1570">형식 항목을 대체 하는 결과 문자열의 맞춤을 제어 하는 방법</span><span class="sxs-lookup"><span data-stu-id="3723c-1570">How do I control the alignment of the result strings that replace format items?</span></span>  
 <span data-ttu-id="3723c-1571">형식 항목의 일반 구문은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1571">The general syntax of a format item is:</span></span>  
  
```  
{index[,alignment][: formatString]}  
```  
  
 <span data-ttu-id="3723c-1572">여기서 *맞춤* 필드 너비를 정의 하는 부호 있는 정수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1572">where *alignment* is a signed integer that defines the field width.</span></span> <span data-ttu-id="3723c-1573">이 값이 음수 이면 필드의 텍스트를 왼쪽에 맞춥니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1573">If this value is negative, text in the field is left-aligned.</span></span> <span data-ttu-id="3723c-1574">양수 이면 텍스트를 오른쪽에 맞춥니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1574">If it is positive, text is right-aligned.</span></span>  
  
### <a name="how-do-i-control-the-number-of-digits-after-the-decimal-separator"></a><span data-ttu-id="3723c-1575">소수 구분 기호 뒤의 자릿수를 제어 하는 방법</span><span class="sxs-lookup"><span data-stu-id="3723c-1575">How do I control the number of digits after the decimal separator?</span></span>  
 <span data-ttu-id="3723c-1576">모든 [표준 숫자 서식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) (정수로 사용 됨)는 "D", "G", "R"을 제외 하 고 및 "X"는 결과 문자열의 소수 자릿수를 정의 하는 전체 자릿수 지정자를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1576">All [standard numeric format strings](~/docs/standard/base-types/standard-numeric-format-strings.md) except "D" (which is used with integers only), "G", "R", and "X" allow a precision specifier that defines the number of decimal digits in the result string.</span></span> <span data-ttu-id="3723c-1577">다음 예제에서는 결과 문자열의 소수 자릿수의 수를 제어 하려면 표준 숫자 서식 문자열을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1577">The following example uses standard numeric format strings to control the number of decimal digits in the result string.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa26.cs#26)]
 [!code-vb[System.String.Format#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa26.vb#26)]  
  
 <span data-ttu-id="3723c-1578">사용 중인 경우는 [사용자 지정 숫자 서식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md), "0" 형식 지정자를 사용 하 여 다음 예와 같이 결과 문자열에서 소수 자릿수를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1578">If you're using a [custom numeric format string](~/docs/standard/base-types/custom-numeric-format-strings.md), use the "0" format specifier to control the number of decimal digits in the result string, as the following example shows.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa27.cs#27)]
 [!code-vb[System.String.Format#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa27.vb#27)]  
  
### <a name="how-do-i-control-the-number-of-integral-digits"></a><span data-ttu-id="3723c-1579">정수 자릿수를 제어 하는 방법</span><span class="sxs-lookup"><span data-stu-id="3723c-1579">How do I control the number of integral digits?</span></span>  
 <span data-ttu-id="3723c-1580">기본적으로 서식 지정 작업만 0이 아닌 정수 자릿수를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1580">By default, formatting operations only display non-zero integral digits.</span></span> <span data-ttu-id="3723c-1581">정수 형식을 지정 하는 경우 소수 자릿수를 제어 하는 전체 자릿수 지정자 "D"와 "X" 표준 서식 문자열을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1581">If you are formatting integers, you can use a precision specifier with the "D" and "X" standard format strings to control the number of digits.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa29.cs#29)]
 [!code-vb[System.String.Format#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa29.vb#29)]  
  
 <span data-ttu-id="3723c-1582">"0"을 사용 하 여 지정된 된 수의 정수 자릿수를 사용 하 여 결과 문자열을 생성 하는 정수 또는 부동 소수점 숫자 앞에 오는 0를 채울 수 있습니다 [사용자 지정 숫자 서식 지정자](~/docs/standard/base-types/custom-numeric-format-strings.md)다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1582">You can pad an integer or floating-point number with leading zeros to produce a result string with a specified number of integral digits by using the "0" [custom numeric format specifier](~/docs/standard/base-types/custom-numeric-format-strings.md), as the following example shows.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa28.cs#28)]
 [!code-vb[System.String.Format#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa28.vb#28)]  
  
### <a name="how-many-items-can-i-include-in-the-format-list"></a><span data-ttu-id="3723c-1583">형식 목록에서 포함할 수 있는 항목 수는 있습니까?</span><span class="sxs-lookup"><span data-stu-id="3723c-1583">How many items can I include in the format list?</span></span>  
 <span data-ttu-id="3723c-1584">실용적인 제한은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1584">There is no practical limit.</span></span> <span data-ttu-id="3723c-1585">두 번째 매개 변수를 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> 메서드는으로 태그가 지정 됩니다는 <xref:System.ParamArrayAttribute> 특성을 구분 기호로 분리 된 목록 또는 형식 목록으로 개체 배열을 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1585">The second parameter of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method is tagged with the <xref:System.ParamArrayAttribute> attribute, which allows you to include either a delimited list or an object array as your format list.</span></span>  
  
<a name="braces" />
### <a name="how-do-i-include-literal-braces--and--in-the-result-string"></a><span data-ttu-id="3723c-1586">리터럴 중괄호를 포함 하는 방법 ("{" 및 "}")는 결과 문자열에?</span><span class="sxs-lookup"><span data-stu-id="3723c-1586">How do I include literal braces ("{" and "}") in the result string?</span></span>  
 <span data-ttu-id="3723c-1587">예를 들어, 영향을 최소화 하는 다음 메서드 호출에서 throw 된 <xref:System.FormatException> 예외?</span><span class="sxs-lookup"><span data-stu-id="3723c-1587">For example, how do you prevent the following method call from throwing a <xref:System.FormatException> exception?</span></span>  
  
 [!code-csharp[System.String.Format#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#23)]
 [!code-vb[System.String.Format#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#23)]  
  
 <span data-ttu-id="3723c-1588">항상 여는 중괄호와 닫는 중괄호의 단일 시작 또는 형식 항목의 끝으로 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1588">A single opening or closing brace is always interpreted as the beginning or end of a format item.</span></span> <span data-ttu-id="3723c-1589">문자 그대로 해석 되도록 이스케이프 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1589">To be interpreted literally, it must be escaped.</span></span> <span data-ttu-id="3723c-1590">다른 중괄호를 추가 하 여 중괄호를 이스케이프 ("{{" 및 "}}" 대신 "{0}" 및 "}"), 다음 메서드 호출 에서처럼에서:</span><span class="sxs-lookup"><span data-stu-id="3723c-1590">You escape a brace by adding another brace ("{{" and "}}" instead of "{" and "}"), as in the following method call:</span></span>  
  
 [!code-csharp-interactive[System.String.Format#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#24)]
 [!code-vb[System.String.Format#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#24)]  
  
 <span data-ttu-id="3723c-1591">그러나 이스케이프 된 중괄호는 쉽게 잘못 해석 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1591">However, even escaped braces are easily misinterpreted.</span></span> <span data-ttu-id="3723c-1592">형식 목록에서 중괄호를 포함 하는 형식 항목을 사용 하 여 다음 예와 같이 결과 문자열에 삽입 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1592">We recommend that you include braces in the format list and use format items to insert them in the result string, as the following example shows.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#25)]
 [!code-vb[System.String.Format#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#25)]  
  
### <a name="why-does-my-call-to-the-stringformat-method-throw-a-formatexception"></a><span data-ttu-id="3723c-1593">String.Format 메서드 호출 내는 FormatException를 throw 하는 이유</span><span class="sxs-lookup"><span data-stu-id="3723c-1593">Why does my call to the String.Format method throw a FormatException?</span></span>  
 <span data-ttu-id="3723c-1594">예외는 가장 일반적인 원인은 아니지만 형식 항목의 인덱스 형식 목록에서 개체에 해당 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1594">The most common cause of the exception is that the index of a format item doesn't correspond to an object in the format list.</span></span> <span data-ttu-id="3723c-1595">일반적으로이 형식 항목의 인덱스를 misnumbered 했습니다 또는 형식 목록에서 개체를 포함 하려면 잊어버린 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1595">Usually this indicates that you've misnumbered the indexes of format items or you've forgotten to include an object in the format list.</span></span> <span data-ttu-id="3723c-1596">문자는 이스케이프 되지 않은 왼쪽 또는 오른쪽 중괄호를 포함 하는 동안도 throw를 <xref:System.FormatException>입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1596">Attempting to include an unescaped left or right brace character also throws a <xref:System.FormatException>.</span></span> <span data-ttu-id="3723c-1597">경우에 따라 예외 결과인 오타가; 일반적인 실수를 잘못 입력 방법은 예를 들어, "[" (왼쪽된 대괄호) 대신 "{0}" (왼쪽된 중괄호).</span><span class="sxs-lookup"><span data-stu-id="3723c-1597">Occasionally, the exception is the result of a typo; for example, a typical mistake is to mistype "[" (the left bracket) instead of "{" (the left brace).</span></span>  
  
### <a name="if-the-formatsystemiformatprovidersystemstringsystemobject-method-supports-parameter-arrays-why-does-my-code-throw-an-exception-when-i-use-an-array"></a><span data-ttu-id="3723c-1598">Format(System.IFormatProvider,System.String,System.Object[]) 메서드 매개 변수 배열을 지 원하는 경우 이유 코드 예외를 throw지 않습니다 배열을 사용 하는 경우?</span><span class="sxs-lookup"><span data-stu-id="3723c-1598">If the Format(System.IFormatProvider,System.String,System.Object[]) method supports parameter arrays, why does my code throw an exception when I use an array?</span></span>  
 <span data-ttu-id="3723c-1599">예를 들어, 다음 코드 throw를 <xref:System.FormatException> 예외:</span><span class="sxs-lookup"><span data-stu-id="3723c-1599">For example, the following code throws a <xref:System.FormatException> exception:</span></span>  
  
 [!code-csharp[System.String.Format#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa1.cs#21)]
 [!code-vb[System.String.Format#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa1.vb#21)]  
  
 <span data-ttu-id="3723c-1600">이 컴파일러 오버 로드 확인에 문제가 있는 경우</span><span class="sxs-lookup"><span data-stu-id="3723c-1600">This is a problem of compiler overload resolution.</span></span> <span data-ttu-id="3723c-1601">호출 하므로 정수 배열을 단일 인수로 처리 컴파일러 정수 배열을 개체 배열을으로 변환할 수 없는 때문에 <xref:System.String.Format%28System.String%2CSystem.Object%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1601">Because the compiler cannot convert an array of integers to an object array, it treats the integer array as a single argument, so it calls the <xref:System.String.Format%28System.String%2CSystem.Object%29> method.</span></span> <span data-ttu-id="3723c-1602">4 개의 형식 항목이 있지만 형식 목록에서 항목을 단일 있기 때문에 예외가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1602">The exception is thrown because there are four format items but only a single item in the format list.</span></span>  
  
 <span data-ttu-id="3723c-1603">호출 하기 전에 사용자가 직접 변환을 수행 해야 하는 Visual Basic 또는 C# 모두 정수 배열을 개체 배열로 변환할 수, 있으므로 <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1603">Because neither Visual Basic nor C# can convert an integer array to an object array, you have to perform the conversion yourself before calling the <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> method.</span></span> <span data-ttu-id="3723c-1604">다음 예제에는 하나의 구현을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1604">The following example provides one implementation.</span></span>  
  
 [!code-csharp-interactive[System.String.Format#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa2.cs#22)]
 [!code-vb[System.String.Format#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa2.vb#22)]  

## Examples

<span data-ttu-id="3723c-1605">호출 하는 다양 한 예제는 <xref:System.String.Format%2A> 메서드를 통해 섞여는 합니다 [주의](#remarks) 이 문서의 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1605">Numerous examples that call the <xref:System.String.Format%2A> method are interspersed through the [Remarks](#remarks) section of this article.</span></span>  

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note.md)]

<span data-ttu-id="3723c-1606">전체 집합을 다운로드할 수도 있습니다 `String.Format` 포함 된 예는 [C#에 대 한.NET Core 2.0 프로젝트](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/String.Format.zip) 와 [Visual basic.NET Core 2.0 프로젝트](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/String.Format.zip)에서 [dotnet / 샘플 GitHub 리포지토리](https://github.com/dotnet/samples)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1606">You can also download a complete set of `String.Format` examples, which are included a [.NET Core 2.0 project for C#](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/String.Format.zip) and a [.NET Core 2.0 project for Visual Basic](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/String.Format.zip), from the [dotnet/samples GitHub repository](https://github.com/dotnet/samples).</span></span>

<span data-ttu-id="3723c-1607">다음은 일부 문서에 포함 된 예제입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1607">The following are some of the examples included in the article:</span></span>

### <a name="create-a-format-string"></a><span data-ttu-id="3723c-1608">형식 문자열을 만들려면</span><span class="sxs-lookup"><span data-stu-id="3723c-1608">Create a format string</span></span>

[<span data-ttu-id="3723c-1609">문자열을 삽입</span><span class="sxs-lookup"><span data-stu-id="3723c-1609">Inserting a string</span></span>](#inserting-a-string)  
[<span data-ttu-id="3723c-1610">형식 항목</span><span class="sxs-lookup"><span data-stu-id="3723c-1610">The format item</span></span>](#the-format-item)  
[<span data-ttu-id="3723c-1611">동일한 인덱스에 있는 형식 항목</span><span class="sxs-lookup"><span data-stu-id="3723c-1611">Format items that have the same index</span></span>](#format-items-that-have-the-same-index)

### <a name="control-formatted-output"></a><span data-ttu-id="3723c-1612">서식이 지정 된 출력 제어</span><span class="sxs-lookup"><span data-stu-id="3723c-1612">Control formatted output</span></span>

[<span data-ttu-id="3723c-1613">서식 제어</span><span class="sxs-lookup"><span data-stu-id="3723c-1613">Controlling formatting</span></span>](#controlling-formatting)  
[<span data-ttu-id="3723c-1614">간격을 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1614">Controlling spacing</span></span>](#controlling-spacing)  
[<span data-ttu-id="3723c-1615">맞춤을 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1615">Controlling alignment</span></span>](#controlling-alignment)  
[<span data-ttu-id="3723c-1616">정수 자릿수를 제어합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1616">Controlling the number of integral digits</span></span>](#how-do-i-control-the-number-of-integral-digits)  
[<span data-ttu-id="3723c-1617">소수 자릿수를 소수 구분 기호 뒤 제어</span><span class="sxs-lookup"><span data-stu-id="3723c-1617">Controlling the number of digits after the decimal separator</span></span>](#how-do-i-control-the-number-of-digits-after-the-decimal-separator)  
[<span data-ttu-id="3723c-1618">결과 문자열에 리터럴 중괄호를 포함 하 여</span><span class="sxs-lookup"><span data-stu-id="3723c-1618">Including literal braces in a result string</span></span>](#braces)  

### <a name="make-format-strings-culture-sensitive"></a><span data-ttu-id="3723c-1619">문화권 구분 서식 문자열 확인</span><span class="sxs-lookup"><span data-stu-id="3723c-1619">Make format strings culture-sensitive</span></span>

[<span data-ttu-id="3723c-1620">문화권 구분 서식 지정</span><span class="sxs-lookup"><span data-stu-id="3723c-1620">Culture-sensitive formatting</span></span>](#culture-sensitive-formatting)  

### <a name="customize-the-formatting-operation"></a><span data-ttu-id="3723c-1621">서식 지정 작업을 사용자 지정</span><span class="sxs-lookup"><span data-stu-id="3723c-1621">Customize the formatting operation</span></span>

[<span data-ttu-id="3723c-1622">사용자 지정 서식 지정 작업</span><span class="sxs-lookup"><span data-stu-id="3723c-1622">A custom formatting operation</span></span>](#example-a-custom-formatting-operation)  
[<span data-ttu-id="3723c-1623">절편 공급자 및 로마 숫자 포맷터</span><span class="sxs-lookup"><span data-stu-id="3723c-1623">An intercept provider and Roman numeral formatter</span></span>](#example-an-intercept-provider-and-roman-numeral-formatter)  

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj -&gt; string" Usage="System.string.Format (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="3723c-1624">[합성 서식 문자열](~/docs/standard/base-types/composite-formatting.md)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1624">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="3723c-1625">형식을 지정할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1625">The object to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1626">문자열에 있는 하나 이상의 형식 항목을 지정된 개체의 문자열 표현으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1626">Replaces one or more format items in a string with the string representation of a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1627">서식 지정 항목이 <paramref name="format" />의 문자열 표현으로 바뀌는 <paramref name="arg0" />의 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1627">A copy of <paramref name="format" /> in which any format items are replaced by the string representation of <paramref name="arg0" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="3723c-1628">이 메서드를 사용 합니다 [복합 서식 지정 기능](~/docs/standard/base-types/composite-formatting.md) 값 식의 문자열 표현으로 변환 하 고 문자열에서 표현을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1628">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of an expression to its string representation and to embed that representation in a string.</span></span> 

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-a-single-argument"></a><span data-ttu-id="3723c-1629">예: 단일 인수를 서식 지정</span><span class="sxs-lookup"><span data-stu-id="3723c-1629">Example: Formatting a single argument</span></span>  
 
 <span data-ttu-id="3723c-1630">다음 예제에서는 <xref:System.String.Format%28System.String%2CSystem.Object%29> 문자열 중 개인의 기간을 포함 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1630">The following example uses the <xref:System.String.Format%28System.String%2CSystem.Object%29> method to embed an individual's age in the middle of a string.</span></span>  
  
 [!code-cpp[System.String.Format#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format7.cpp#7)]
 [!code-csharp-interactive[System.String.Format#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format7.cs#7)]
 [!code-vb[System.String.Format#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format7.vb#7)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1631">
            <paramref name="format" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1631">
              <paramref name="format" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-1632">
            <paramref name="format" />의 형식 항목이 잘못된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1632">The format item in <paramref name="format" /> is invalid.</span>
          </span>
          <span data-ttu-id="3723c-1633">-또는-  서식 항목의 인덱스가 0이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1633">-or-  The index of a format item is not zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj[] -&gt; string" Usage="System.string.Format (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="3723c-1634">[합성 서식 문자열](~/docs/standard/base-types/composite-formatting.md)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1634">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="3723c-1635">형식을 지정할 개체를 0개 이상 포함하는 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1635">An object array that contains zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1636">지정된 문자열의 형식 항목을 지정된 배열에 있는 해당 개체의 문자열 표현으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1636">Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1637">형식 항목을 <paramref name="format" />에 있는 해당 개체의 문자열 표현으로 바꾼 <paramref name="args" />의 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1637">A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="3723c-1638">이 메서드를 사용 합니다 [복합 서식 지정 기능](~/docs/standard/base-types/composite-formatting.md) 4 개 이상의 식의 값을 해당 문자열 표현으로 변환 하 고 문자열에 이러한 표현이 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1638">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of four or more expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="3723c-1639">하므로 합니다 `args` 매개 변수를 사용 하 여으로 <xref:System.ParamArrayAttribute?displayProperty=nameWithType> 특성을 전달할 수 있습니다 개체 메서드 또는 개별 인수로 <xref:System.Object> 배열 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1639">Since the `args` parameter is marked with the <xref:System.ParamArrayAttribute?displayProperty=nameWithType> attribute, you can pass the objects to the method as individual arguments or as an <xref:System.Object> array.</span></span> 

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-more-than-three-arguments"></a><span data-ttu-id="3723c-1640">예: 세 개 이상의 인수를 서식 지정</span><span class="sxs-lookup"><span data-stu-id="3723c-1640">Example: Formatting more than three arguments</span></span>  
 
 <span data-ttu-id="3723c-1641">이 예제에서는 특정 날짜에서 최고 / 최저 온도 데이터를 포함 하는 문자열을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1641">This example creates a string that contains data on the high and low temperature on a particular date.</span></span> <span data-ttu-id="3723c-1642">복합 형식 문자열에 C# 예제에서 5 개의 형식 항목이 및 Visual Basic 예제에서 6 개 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1642">The composite format string has five format items in the C# example and six in the Visual Basic example.</span></span> <span data-ttu-id="3723c-1643">해당 값의 문자열 표현 너비를 정의 하는 형식 항목의 두 및 첫 번째 형식 항목인 표준 날짜 및 시간 서식 문자열도 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1643">Two of the format items define the width of their corresponding value's string representation, and the first format item also includes a standard date and time format string.</span></span>  
  
 [!code-cpp[System.String.Format#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format5.cpp#5)]
 [!code-csharp-interactive[System.String.Format#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format5.cs#5)]
 [!code-vb[System.String.Format#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format5.vb#5)]  
  
 <span data-ttu-id="3723c-1644">배열 형식을 지정할 개체를 전달할 수도 있습니다 아니라 인수 목록입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1644">You can also pass the objects to be formatted as an array rather than a an argument list.</span></span>  
  
 [!code-cpp[System.String.Format#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format_paramarray1.cpp#10)]
 [!code-csharp-interactive[System.String.Format#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format_paramarray1.cs#10)]
 [!code-vb[System.String.Format#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format_paramarray1.vb#10)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1645">
            <paramref name="format" /> 또는 <paramref name="args" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1645">
              <paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-1646">
            <paramref name="format" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1646">
              <paramref name="format" /> is invalid.</span>
          </span>
          <span data-ttu-id="3723c-1647">-또는-  서식 항목의 인덱스가 0보다 작거나 <paramref name="args" /> 배열의 길이보다 크거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1647">-or-  The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj -&gt; string" Usage="System.string.Format (provider, format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-1648">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1648">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <param name="format">
          <span data-ttu-id="3723c-1649">[합성 서식 문자열](~/docs/standard/base-types/composite-formatting.md)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1649">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="3723c-1650">형식을 지정할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1650">The object to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1651">지정된 문자열에 있는 하나의 형식 항목 또는 여러 개의 형식 항목을 해당하는 개체의 문자열 표현으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1651">Replaces the format item or items in a specified string with the string representation of the corresponding object.</span>
          </span>
          <span data-ttu-id="3723c-1652">매개 변수에서 문화권별 서식 지정 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1652">A parameter supplies culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1653">하나의 형식 항목 또는 여러 개의 형식 항목이 <paramref name="format" />의 문자열 표현으로 바뀌는 <paramref name="arg0" />의 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1653">A copy of <paramref name="format" /> in which the format item or items have been replaced by the string representation of <paramref name="arg0" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="3723c-1654">이 메서드를 사용 합니다 [복합 서식 지정 기능](~/docs/standard/base-types/composite-formatting.md) 값 식의 문자열 표현으로 변환 하 고 문자열에서 표현을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1654">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of an expression to its string representation and to embed that representation in a string.</span></span> <span data-ttu-id="3723c-1655">변환 수행, 메서드가 문화권 구분 서식 지정 또는 사용자 지정 포맷터를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1655">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="3723c-1656">메서드 변환 `arg0` 를 호출 하 여 해당 문자열 표현에 해당 **ToString(IFormatProvider)** 메서드 또는 서식 항목 형식 문자열을 호출 하 여 포함 개체의 해당 하는 경우 해당 **ToString ( String, IFormatProvider)** 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1656">The method converts `arg0` to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="3723c-1657">이러한 메서드는 존재 하지 않거나, 호출 개체의 매개 변수가 없는 **ToString** 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1657">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>  

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1658">
            <paramref name="format" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1658">
              <paramref name="format" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-1659">
            <paramref name="format" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1659">
              <paramref name="format" /> is invalid.</span>
          </span>
          <span data-ttu-id="3723c-1660">-또는-  서식 항목의 인덱스가 0이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1660">-or-  The index of a format item is not zero.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj[] -&gt; string" Usage="System.string.Format (provider, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-1661">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1661">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <param name="format">
          <span data-ttu-id="3723c-1662">[합성 서식 문자열](~/docs/standard/base-types/composite-formatting.md)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1662">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="3723c-1663">형식을 지정할 개체를 0개 이상 포함하는 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1663">An object array that contains zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1664">문자열의 형식 항목을 지정된 배열에 있는 해당 개체의 문자열 표현으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1664">Replaces the format items in a string with the string representations of corresponding objects in a specified array.</span>
          </span>
          <span data-ttu-id="3723c-1665">매개 변수에서 문화권별 서식 지정 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1665">A parameter supplies culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1666">형식 항목을 <paramref name="format" />에 있는 해당 개체의 문자열 표현으로 바꾼 <paramref name="args" />의 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1666">A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="3723c-1667">이 메서드를 사용 합니다 [복합 서식 지정 기능](~/docs/standard/base-types/composite-formatting.md) 4 개 이상의 식을 해당 문자열 표현으로 변환 하 고 이러한 표현이 문자열에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1667">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert four or more expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="3723c-1668">변환 수행, 메서드가 문화권 구분 서식 지정 또는 사용자 지정 포맷터를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1668">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="3723c-1669">메서드가 변환 하는 각 <xref:System.Object> 인수를 호출 하 여 해당 문자열 표현에 해당 **ToString(IFormatProvider)** 메서드 서식 항목 형식 문자열을 해당 를호출하여포함개체의해당하는경우또는**ToString(String,IFormatProvider)** 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1669">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="3723c-1670">이러한 메서드는 존재 하지 않거나, 호출 개체의 매개 변수가 없는 **ToString** 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1670">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>  

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]
  
## <a name="example-culture-sensitive-formatting"></a><span data-ttu-id="3723c-1671">예: 문화권 구분 서식 지정</span><span class="sxs-lookup"><span data-stu-id="3723c-1671">Example: Culture-sensitive formatting</span></span>  
 <span data-ttu-id="3723c-1672">이 예제에서는 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> 몇 가지 다른 문화권을 사용 하 여 일부 날짜 및 시간 값 및 숫자 값의 문자열 표현을 표시 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1672">This example uses the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method to display the string representation of some date and time values and numeric values by using several different cultures.</span></span>  
  
 [!code-csharp-interactive[System.String.Format2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format2/cs/Example2.cs#2)]
 [!code-vb[System.String.Format2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format2/vb/Example2.vb#2)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1673">
            <paramref name="format" /> 또는 <paramref name="args" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1673">
              <paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-1674">
            <paramref name="format" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1674">
              <paramref name="format" /> is invalid.</span>
          </span>
          <span data-ttu-id="3723c-1675">-또는-  서식 항목의 인덱스가 0보다 작거나 <paramref name="args" /> 배열의 길이보다 크거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1675">-or-  The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</span>
          </span>
        </exception>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.ICustomFormatter" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj * obj -&gt; string" Usage="System.string.Format (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="3723c-1676">[합성 서식 문자열](~/docs/standard/base-types/composite-formatting.md)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1676">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="3723c-1677">서식을 지정할 첫 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1677">The first object to format.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="3723c-1678">서식을 지정할 두 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1678">The second object to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1679">문자열에 있는 서식 지정 항목을 지정된 두 개체의 문자열 표현으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1679">Replaces the format items in a string with the string representation of two specified objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1680">서식 지정 항목이 <paramref name="format" /> 및 <paramref name="arg0" />의 문자열 표현으로 바뀌는 <paramref name="arg1" />의 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1680">A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="3723c-1681">이 메서드를 사용 합니다 [복합 서식 지정 기능](~/docs/standard/base-types/composite-formatting.md) 두 식의 값을 해당 문자열 표현으로 변환 하 고 이러한 표현이 문자열에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1681">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of two expressions to their string representations and to embed those representations in a string.</span></span> 

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-two-arguments"></a><span data-ttu-id="3723c-1682">예: 두 개의 인수를 서식 지정</span><span class="sxs-lookup"><span data-stu-id="3723c-1682">Example: Formatting two arguments</span></span>  
 
 <span data-ttu-id="3723c-1683">이 예제에서는 합니다 <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> 제네릭에 저장 하는 시간 및 온도 데이터를 표시 하는 방법 <xref:System.Collections.Generic.Dictionary%602> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1683">This example uses the <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> method to display time and temperature data stored in a generic <xref:System.Collections.Generic.Dictionary%602> object.</span></span> <span data-ttu-id="3723c-1684">형식 문자열에 세 개의 형식 항목이 있더라도 다음 두 개의 형식을 지정할 개체를 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1684">Note that the format string has three format items, although there are only two objects to format.</span></span> <span data-ttu-id="3723c-1685">(날짜 및 시간 값) 목록에서 첫 번째 개체를 사용 하는 두 형식 항목 이므로: 첫 번째 형식 항목 표시 하는 시간 및 두 번째 날짜를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1685">This is because the first object in the list (a date and time value) is used by two format items: The first format item displays the time, and the second displays the date.</span></span>  
  
 [!code-cpp[System.String.Format#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatexample4.cpp#6)]
 [!code-csharp-interactive[System.String.Format#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatexample4.cs#6)]
 [!code-vb[System.String.Format#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatexample4.vb#6)]  
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1686">
            <paramref name="format" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1686">
              <paramref name="format" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-1687">
            <paramref name="format" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1687">
              <paramref name="format" /> is invalid.</span>
          </span>
          <span data-ttu-id="3723c-1688">-또는-  서식 항목의 인덱스가 0 또는 1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1688">-or-  The index of a format item is not zero or one.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj * obj -&gt; string" Usage="System.string.Format (provider, format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-1689">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1689">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <param name="format">
          <span data-ttu-id="3723c-1690">[합성 서식 문자열](~/docs/standard/base-types/composite-formatting.md)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1690">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="3723c-1691">서식을 지정할 첫 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1691">The first object to format.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="3723c-1692">서식을 지정할 두 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1692">The second object to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1693">문자열에 있는 서식 지정 항목을 지정된 두 개체의 문자열 표현으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1693">Replaces the format items in a string with the string representation of two specified objects.</span>
          </span>
          <span data-ttu-id="3723c-1694">매개 변수에서 문화권별 서식 지정 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1694">A parameter supplies culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1695">서식 지정 항목이 <paramref name="format" /> 및 <paramref name="arg0" />의 문자열 표현으로 바뀌는 <paramref name="arg1" />의 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1695">A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="3723c-1696">이 메서드를 사용 합니다 [복합 서식 지정 기능](~/docs/standard/base-types/composite-formatting.md) 두 식을 해당 문자열 표현으로 변환 하 고 이러한 표현이 문자열에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1696">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert two expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="3723c-1697">변환 수행, 메서드가 문화권 구분 서식 지정 또는 사용자 지정 포맷터를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1697">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="3723c-1698">메서드가 변환 하는 각 <xref:System.Object> 인수를 호출 하 여 해당 문자열 표현에 해당 **ToString(IFormatProvider)** 메서드 서식 항목 형식 문자열을 해당 를호출하여포함개체의해당하는경우또는**ToString(String,IFormatProvider)** 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1698">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="3723c-1699">이러한 메서드는 존재 하지 않거나, 호출 개체의 매개 변수가 없는 **ToString** 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1699">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>  

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1700">
            <paramref name="format" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1700">
              <paramref name="format" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-1701">
            <paramref name="format" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1701">
              <paramref name="format" /> is invalid.</span>
          </span>
          <span data-ttu-id="3723c-1702">-또는-  서식 항목의 인덱스가 0 또는 1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1702">-or-  The index of a format item is not zero or one.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj * obj * obj -&gt; string" Usage="System.string.Format (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="3723c-1703">[합성 서식 문자열](~/docs/standard/base-types/composite-formatting.md)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1703">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="3723c-1704">서식을 지정할 첫 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1704">The first object to format.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="3723c-1705">서식을 지정할 두 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1705">The second object to format.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="3723c-1706">서식을 지정할 세 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1706">The third object to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1707">문자열에 있는 서식 지정 항목을 지정된 세 개체의 문자열 표현으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1707">Replaces the format items in a string with the string representation of three specified objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1708">형식 항목이 <paramref name="format" />, <paramref name="arg0" /> 및 <paramref name="arg1" />의 문자열 표현으로 바뀌는 <paramref name="arg2" />의 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1708">A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="3723c-1709">이 메서드를 사용 합니다 [복합 서식 지정 기능](~/docs/standard/base-types/composite-formatting.md) 세 가지 식의 값을 해당 문자열 표현으로 변환 하 고 문자열에 이러한 표현이 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1709">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of three expressions to their string representations and to embed those representations in a string.</span></span> 

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-three-arguments"></a><span data-ttu-id="3723c-1710">예: 세 개의 인수를 서식 지정</span><span class="sxs-lookup"><span data-stu-id="3723c-1710">Example: Formatting three arguments</span></span>  
 
 <span data-ttu-id="3723c-1711">이 예제에서는 합니다 <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> 메서드는 부울 결과 보여 주는 문자열을 만들려면 `And` 두 정수 값을 사용 하 여 작업 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1711">This example uses the <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method to create a string that illustrates the result of a Boolean `And` operation with two integer values.</span></span> <span data-ttu-id="3723c-1712">두 가지 방법으로 각 항목 형식이 있으므로 형식 문자열에 6 개의 형식 항목이 포함 되지만 메서드 매개 변수 목록에서 세 개의 항목이 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1712">Note that the format string includes six format items, but the method has only three items in its parameter list, because each item is formatted in two different ways.</span></span>  
  
 [!code-cpp[System.String.Format#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format4.cpp#4)]
 [!code-csharp-interactive[System.String.Format#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format4.cs#4)]
 [!code-vb[System.String.Format#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format4.vb#4)]  
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1713">
            <paramref name="format" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1713">
              <paramref name="format" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-1714">
            <paramref name="format" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1714">
              <paramref name="format" /> is invalid.</span>
          </span>
          <span data-ttu-id="3723c-1715">-또는-  서식 항목의 인덱스가 0보다 작거나, 2보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1715">-or-  The index of a format item is less than zero, or greater than two.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj * obj * obj -&gt; string" Usage="System.string.Format (provider, format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-1716">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1716">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <param name="format">
          <span data-ttu-id="3723c-1717">[합성 서식 문자열](~/docs/standard/base-types/composite-formatting.md)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1717">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="3723c-1718">서식을 지정할 첫 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1718">The first object to format.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="3723c-1719">서식을 지정할 두 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1719">The second object to format.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="3723c-1720">서식을 지정할 세 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1720">The third object to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1721">문자열에 있는 서식 지정 항목을 지정된 세 개체의 문자열 표현으로 바꿉니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1721">Replaces the format items in a string with the string representation of three specified objects.</span>
          </span>
          <span data-ttu-id="3723c-1722">매개 변수에서 문화권별 형식 지정 정보를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1722">An parameter supplies culture-specific formatting information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1723">형식 항목이 <paramref name="format" />, <paramref name="arg0" /> 및 <paramref name="arg1" />의 문자열 표현으로 바뀌는 <paramref name="arg2" />의 복사본입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1723">A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)] 
  
<span data-ttu-id="3723c-1724">이 메서드를 사용 합니다 [복합 서식 지정 기능](~/docs/standard/base-types/composite-formatting.md) 세 개의 식을 해당 문자열 표현으로 변환 하 고 이러한 표현이 문자열에 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1724">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert three expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="3723c-1725">변환 수행, 메서드가 문화권 구분 서식 지정 또는 사용자 지정 포맷터를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1725">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="3723c-1726">메서드가 변환 하는 각 <xref:System.Object> 인수를 호출 하 여 해당 문자열 표현에 해당 **ToString(IFormatProvider)** 메서드 서식 항목 형식 문자열을 해당 를호출하여포함개체의해당하는경우또는**ToString(String,IFormatProvider)** 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1726">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="3723c-1727">이러한 메서드는 존재 하지 않거나, 호출 개체의 매개 변수가 없는 **ToString** 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1727">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>  

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]
    
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1728">
            <paramref name="format" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1728">
              <paramref name="format" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-1729">
            <paramref name="format" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1729">
              <paramref name="format" /> is invalid.</span>
          </span>
          <span data-ttu-id="3723c-1730">-또는-  서식 항목의 인덱스가 0보다 작거나, 2보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1730">-or-  The index of a format item is less than zero, or greater than two.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public CharEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CharEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As CharEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CharEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; CharEnumerator" Usage="string.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CharEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-1731">이 문자열의 개별 문자에서 반복될 수 있는 개체를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1731">Retrieves an object that can iterate through the individual characters in this string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1732">열거자 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1732">An enumerator object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
> <span data-ttu-id="3723c-1733">호출 하는 대신 합니다 <xref:System.String.GetEnumerator%2A> 검색 하는 메서드를 <xref:System.CharEnumerator> 개체는 다음 문자열을 열거 하려면 사용할 언어의 반복 구문을 대신 사용 해야 (C#, C + + CLR 및 Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="3723c-1733">Rather than calling the <xref:System.String.GetEnumerator%2A> method to retrieve a <xref:System.CharEnumerator> object that you then use to enumerate a string, you should instead use your language's iteration construct (in C#, in C++/CLR, and in Visual Basic).</span></span> <span data-ttu-id="3723c-1734">[foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) C#에서는 [각각에 대해](/cpp/dotnet/for-each-in) C + + CLR 및 [각각에 대해](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="3723c-1734">[foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) in C#, [for each](/cpp/dotnet/for-each-in) in C++/CLR, and [For Each](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) in Visual Basic).</span></span>
  
 <span data-ttu-id="3723c-1735">이 메서드를 사용 하면 문자열의 개별 문자를 반복할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1735">This method enables you to iterate the individual characters in a string.</span></span> <span data-ttu-id="3723c-1736">예를 들어, Visual Basic `For Each` 및 C# `foreach` 문을 반환 하도록이 메서드를 호출을 <xref:System.CharEnumerator> 이 문자열 인스턴스의 문자에 대 한 읽기 전용 액세스를 제공할 수 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1736">For example, the Visual Basic `For Each` and C# `foreach` statements invoke this method to return a <xref:System.CharEnumerator> object that can provide read-only access to the characters in this string instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1737">다음 예제에서는 여러 문자열의 문자를 반복 하 고 해당 개별 문자에 대 한 정보를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1737">The following example iterates the characters in several strings and displays information about their individual characters.</span></span> <span data-ttu-id="3723c-1738">호출 하지 않고 언어 반복 구문을 사용 하 여는 <xref:System.String.GetEnumerator%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1738">It uses the language iteration construct rather than a call to the <xref:System.String.GetEnumerator%2A> method.</span></span>  
  
 [!code-cpp[system.string.getenumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.GetEnumerator/CPP/getenumerator.cpp#1)]
 [!code-csharp[system.string.getenumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetEnumerator/CS/getenumerator.cs#1)]
 [!code-vb[system.string.getenumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetEnumerator/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="P:System.String.Chars(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="string.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-1739">해당 문자열에 대한 해시 코드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1739">Returns the hash code for this string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1740">부호 있는 32비트 정수 해시 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1740">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1741">동작 <xref:System.String.GetHashCode%2A> 다른 공용 언어 런타임의 버전 간에 변경 될 수 있는 해당 구현에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1741">The behavior of <xref:System.String.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another.</span></span> <span data-ttu-id="3723c-1742">이 문제가 발생 하는 이유는 성능을 개선 하기 위해 <xref:System.String.GetHashCode%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1742">A reason why this might happen is to improve the performance of <xref:System.String.GetHashCode%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3723c-1743">두 string 개체 같으면는 <xref:System.String.GetHashCode%2A> 메서드 같은 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1743">If two string objects are equal, the <xref:System.String.GetHashCode%2A> method returns identical values.</span></span> <span data-ttu-id="3723c-1744">그러나 각 고유한 문자열 값에 대 한 고유 해시 코드 값 하지입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1744">However, there is not a unique hash code value for each unique string value.</span></span> <span data-ttu-id="3723c-1745">다른 문자열에는 같은 해시 코드를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1745">Different strings can return the same hash code.</span></span>  
>   
>  <span data-ttu-id="3723c-1746">자체 해시 코드를 안정적인 것으로 보장 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1746">The hash code itself is not guaranteed to be stable.</span></span> <span data-ttu-id="3723c-1747">동일한 문자열에 대 한 해시 코드를 단일 버전의.NET Framework에 대 한 플랫폼 (예: 32 비트 및 64 비트) 및.NET Framework의 버전 간에 다를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1747">Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework.</span></span> <span data-ttu-id="3723c-1748">일부 경우에도 응용 프로그램 도메인 별로 다릅니다 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1748">In some cases, they can even differ by application domain.</span></span> <span data-ttu-id="3723c-1749">즉, 동일한 프로그램의 후속 실행을 두 개의 서로 다른 해시 코드를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1749">This implies two subsequent runs of the same program may return different hash codes.</span></span>  
>   
>  <span data-ttu-id="3723c-1750">결과적으로 코드 생성 된 응용 프로그램 도메인 외부에서 사용 되지 않아야 하는 해시 컬렉션의 키 필드를 사용 하지 않아야 및 유지 되지 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1750">As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.</span></span>  
>   
>  <span data-ttu-id="3723c-1751">마지막으로 없는 암호화 된 강력한 해시 해야 하는 경우 암호화 해시 함수에서 반환 된 값 대신 해시 코드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1751">Finally, don't use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash.</span></span> <span data-ttu-id="3723c-1752">암호화 해시, 파생 클래스를 사용 합니다 <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> 또는 <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1752">For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> class.</span></span>  
>   
>  <span data-ttu-id="3723c-1753">해시 코드에 대 한 자세한 내용은 참조 하세요. <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1753">For more information about hash codes, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="3723c-1754">데스크톱 앱에서 사용할 수 있습니다 합니다 [ \<UseRandomizedStringHashAlgorithm > 요소](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md) 의 고유 해시 코드를 생성 하는 응용 프로그램 도메인 별로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1754">In desktop apps, you can use the             [\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md) to generate unique hash codes on a per application domain basis.</span></span> <span data-ttu-id="3723c-1755">이 충돌을 줄이려면 하 고 삽입 및 해시 테이블을 사용 하는 조회의 전반적인 성능을 향상 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1755">This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables.</span></span> <span data-ttu-id="3723c-1756">다음 예제에서는 사용 하는 방법을 보여 줍니다 합니다 [ \<UseRandomizedStringHashAlgorithm > 요소](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1756">The following example shows how to use the                [\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md).</span></span> <span data-ttu-id="3723c-1757">정의의 고유 해시 코드를 생성 하는 응용 프로그램 도메인 별로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1757">It defines a  to generate unique hash codes on a per application domain basis.</span></span> <span data-ttu-id="3723c-1758">이 충돌을 줄이려면 하 고 삽입 및 해시 테이블을 사용 하는 조회의 전반적인 성능을 향상 시킬 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1758">This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables.</span></span> <span data-ttu-id="3723c-1759">다음 예제에서는 사용 하는 방법을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1759">The following example shows how to use the .</span></span> <span data-ttu-id="3723c-1760">정의 된 `DisplayString` private 문자열 상수를 포함 하는 클래스 `s`, 값인 "는 문자열입니다."</span><span class="sxs-lookup"><span data-stu-id="3723c-1760">It defines a `DisplayString` class that includes a private string constant, `s`, whose value is "This is a string."</span></span> <span data-ttu-id="3723c-1761">메서드를 실행하는 응용 프로그램 도메인의 이름과 함께 문자열 값 및 해시 코드를 표시하는 `ShowStringHashCode` 메서드도 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1761">It also includes a `ShowStringHashCode` method that displays the string value and its hash code along with the name of the application domain in which the method is executing.</span></span>  
  
 [!code-csharp[System.String.GetHashCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/perdomain.cs#2)]
 [!code-vb[System.String.GetHashCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/perdomain.vb#2)]  
  
 <span data-ttu-id="3723c-1762">구성 파일을 지정하지 않고 이 예제를 실행할 경우 다음과 유사한 출력이 표시됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1762">When you run the example without supplying a configuration file, it displays output similar to the following.</span></span> <span data-ttu-id="3723c-1763">문자열의 해시 코드는 두 응용 프로그램 도메인에서 동일합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1763">Note that the hash codes for the string are identical in the two application domains.</span></span>  
  
```  
  
String 'This is a string.' in domain 'PerDomain.exe': 941BCEAC  
String 'This is a string.' in domain 'NewDomain': 941BCEAC  
  
```  
  
 <span data-ttu-id="3723c-1764">하지만 샘플 디렉터리에 다음의 구성을 추가하고 샘플을 실행하는 경우 동일 문자열의 해시 코드는 응용 프로그램 도메인에 의해 달라집니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1764">However, if you add the following configuration file to the example's directory and then run the example, the hash codes for the same string will differ by application domain.</span></span>  
  
```xml  
  
<?xml version ="1.0"?>  
<configuration>  
   <runtime>  
      <UseRandomizedStringHashAlgorithm enabled="1" />  
   </runtime>  
</configuration>  
  
```  
  
 <span data-ttu-id="3723c-1765">구성 파일이 있는 경우 예제는 다음과 같은 출력을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1765">When the configuration file is present, the example displays the following output:</span></span>  
  
```  
  
String 'This is a string.' in domain 'PerDomain.exe': 5435776D  
String 'This is a string.' in domain 'NewDomain': 75CC8236  
  
```  
  
> [!IMPORTANT]
>  <span data-ttu-id="3723c-1766">해시 코드는 삽입 및 해시 테이블에서 키가 지정 된 개체를 효율적으로 검색에 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1766">Hash codes are used to insert and retrieve keyed objects from hash tables efficiently.</span></span> <span data-ttu-id="3723c-1767">그러나 해시 코드 문자열을 고유 하 게 식별 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1767">However, hash codes don't uniquely identify strings.</span></span> <span data-ttu-id="3723c-1768">동일한 문자열은 같은 해시 코드를 갖지만 공용 언어 런타임에서 다른 문자열에는 같은 해시 코드를 할당할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1768">Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings.</span></span> <span data-ttu-id="3723c-1769">또한 해시 코드는.NET Framework의 버전, 단일 버전 내에서 플랫폼 및 응용 프로그램 도메인 별로 달라질 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1769">In addition, hash codes can vary by version of the .NET Framework, by platform within a single version, and by application domain.</span></span> <span data-ttu-id="3723c-1770">이 인해 직렬화 또는 해시 코드 값을 유지 해야 하거나 해시 테이블 또는 사전에서 키로 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1770">Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.</span></span>  
  
 <span data-ttu-id="3723c-1771">해시 코드를 사용 하는 방법에 대 한 자세한 내용은 하며 `GetHashCode` 메서드를 참조 하세요 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1771">For additional information about the use of hash codes and the `GetHashCode` method, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1772">다음 예제는 <xref:System.String.GetHashCode%2A> 다양 한를 사용 하 여 메서드 입력 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1772">The following example demonstrates the <xref:System.String.GetHashCode%2A> method using various input strings.</span></span>  
  
 [!code-cpp[system.string.gethashcode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.GetHashCode/CPP/gethashcode.cpp#1)]
 [!code-csharp[system.string.gethashcode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/gethashcode.cs#1)]
 [!code-vb[system.string.gethashcode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/gethashcode.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1773">
            <para>반환한 값 <see cref="M:System.String.GetHashCode" /> 은 플랫폼에 따라 다릅니다. 32 비트 및 64 비트 버전의.NET Framework에서 달라 집니다. .NET Framework의 버전 간에 달라질 수 있습니다 것입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1773">
              <para>The value returned by <see cref="M:System.String.GetHashCode" /> is platform-dependent. It differs on the 32-bit and 64-bit versions of the .NET Framework. It also can differ between versions of the .NET Framework.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetHashCode(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : StringComparison -&gt; int" Usage="string.GetHashCode comparisonType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="string.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-1774">
            <see cref="T:System.TypeCode" /> 클래스에 대한 <see cref="T:System.String" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1774">Returns the <see cref="T:System.TypeCode" /> for class <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1775">열거형 상수인 <see cref="F:System.TypeCode.String" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1775">The enumerated constant, <see cref="F:System.TypeCode.String" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3723c-1776">다음 예제에서는 표시를 <xref:System.TypeCode> 에 대 한 열거 된 상수를 <xref:System.String> 형식.</span><span class="sxs-lookup"><span data-stu-id="3723c-1776">The following example displays the <xref:System.TypeCode> enumerated constant for the <xref:System.String> type.</span></span>  
  
 [!code-cpp[string.gettypecode#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.gettypecode/CPP/gtc.cpp#1)]
 [!code-csharp[string.gettypecode#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.gettypecode/CS/gtc.cs#1)]
 [!code-vb[string.gettypecode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.gettypecode/VB/gtc.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-1777">이 인스턴스에서 맨 처음 발견되는 지정된 유니코드 문자 또는 문자열의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1777">Reports the zero-based index of the first occurrence of a specified Unicode character or string within this instance.</span>
          </span>
          <span data-ttu-id="3723c-1778">이 인스턴스에 해당 문자나 문자열이 없으면 이 메서드는 -1을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1778">The method returns -1 if the character or string is not found in this instance.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char -&gt; int" Usage="string.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1779">검색할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1779">A Unicode character to seek.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1780">이 문자열에서 맨 처음 발견되는 지정된 유니코드 문자의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1780">Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1781">해당 문자가 있으면 <paramref name="value" />의 인덱스 위치(0부터 시작)이고, 그러지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1781">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1782">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1782">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="3723c-1783">이 메서드는 유니코드 스칼라 값이 같은 서 수 (문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1783">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="3723c-1784">문화권 구분 검색을 수행 하려면 사용 합니다 <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> 메서드, 여기서는 미리 구성 된 문자를 나타내는 합자 "→"와 같은 (U + 00 6), 유니코드 스칼라 값 간주 될 수 있습니다 문자 구성 요소에서의 모든 항목에는 "AE" 등 시퀀스를 수정 (u+0041, U + 0045) 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1784">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1785">다음 예제에서는 방법을 검색할 수 있습니다는 <xref:System.String> 사용 하 여 문자를 <xref:System.String.IndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1785">The following example demonstrates how you can search a <xref:System.String> for a character using the <xref:System.String.IndexOf%2A> method.</span></span>  
  
 [!code-cpp[System.String.IndexOf#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/indexof_c.cpp#5)]
 [!code-csharp[System.String.IndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/indexof_c.cs#5)]
 [!code-vb[System.String.IndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/indexof_c.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string -&gt; int" Usage="string.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1786">검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1786">The string to seek.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1787">이 인스턴스에서 맨 처음 발견되는 지정된 문자열의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1787">Reports the zero-based index of the first occurrence of the specified string in this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1788">해당 문자열이 있으면 <paramref name="value" />의 인덱스 위치(0부터 시작)이고, 그러지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1788">The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not.</span>
          </span>
          <span data-ttu-id="3723c-1789">
            <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우 반환 값은 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1789">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1790">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1790">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="3723c-1791">이 메서드는 현재 문화권을 사용 하는 단어 (대/소문자 구분 및 문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1791">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="3723c-1792">검색이 인스턴스의 첫 번째 문자 위치에서 시작 하 고 마지막 문자 위치까지 계속 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1792">The search begins at the first character position of this instance and continues until the last character position.</span></span>  
  
 <span data-ttu-id="3723c-1793">문자 집합에는 무시할 수 있는 문자가 포함되며, 이들 문자는 언어 또는 문화권 구분 비교를 수행하는 경우 고려되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1793">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="3723c-1794">문화권 구분 검색에서는 `value`에 무시할 수 있는 문자가 포함된 경우 결과는 해당 문자가 제거된 대상을 검색하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1794">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="3723c-1795">하는 경우 `value` 하나 이상의 무시할 수 있는 문자로 구성 되어 합니다 <xref:System.String.IndexOf%28System.String%29> 메서드는 항상 일치 항목은 현재 인스턴스의 시작 부분에 있음을 나타내기 위해 0 (영)을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1795">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%29> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance.</span></span> <span data-ttu-id="3723c-1796">다음 예제에서는 <xref:System.String.IndexOf%28System.String%29> 메서드는 두 문자열의 세 가지 부분 문자열 (하이픈이 (U + 00AD), "n" 뒤에 하이픈이 및 하이픈이 뒤에 "m")을 찾는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1796">In the following example, the <xref:System.String.IndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="3723c-1797">문자열 중 하나에만 사용자 지정 하이픈이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1797">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="3723c-1798">예제를 실행 합니다 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 이상 버전을 각각의 경우에서 사용자 지정 하이픈은 무시할 수 있는 문자 때문에 결과 동일한 사용자 지정 하이픈의 포함 되지 않았던 것 처럼 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1798">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`.</span></span> <span data-ttu-id="3723c-1799">하이픈이을 검색할 때 메서드는 문자열의 시작 부분에서 일치 항목을 발견 했다는 것을 나타내려면 0 (영)을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1799">When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.</span></span>  
  
 [!code-csharp[System.String.IndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable21.cs#21)]
 [!code-vb[System.String.IndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable21.vb#21)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1800">다음 예제에서는 "animal"에서 "n"를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1800">The following example searches for the "n" in "animal".</span></span> <span data-ttu-id="3723c-1801">문자열 인덱스를 보다는 0부터 시작 하므로 <xref:System.String.IndexOf%28System.String%29> 메서드 "n" 위치 1 임을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1801">Because string indexes begin at zero rather than one, the <xref:System.String.IndexOf%28System.String%29> method indicates that the "n" is at position 1.</span></span>  
  
 [!code-cpp[System.String.IndexOf#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/simple1.cpp#12)]
 [!code-csharp[System.String.IndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/simple1.cs#12)]
 [!code-vb[System.String.IndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/simple1.vb#12)]  
  
 <span data-ttu-id="3723c-1802">다음 예제에서는 <xref:System.String.IndexOf%2A> 문장에서 동물 이름의 시작 위치를 결정 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1802">The following example uses the <xref:System.String.IndexOf%2A> method to determine the starting position of an animal name in a sentence.</span></span> <span data-ttu-id="3723c-1803">그런 다음이 위치를 사용 하 여 형용사를 문장에 동물을 설명 하는 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1803">It then uses this position to insert an adjective that describes the animal into the sentence.</span></span>  
  
 [!code-cpp[stringinsert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringinsert/CPP/stringinsert.cpp#1)]
 [!code-csharp[stringinsert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringinsert/CS/stringinsert.cs#1)]
 [!code-vb[stringinsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringinsert/VB/stringinsert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1804">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1804">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1805">
            <para>에 설명 된 대로 [Strings](~/docs/standard/base-types/best-practices-strings.md) 사용에 대 한 모범 사례 권장 기본값을 대체 하 고 대신 매개 변수를 필요로 하는 메서드를 호출 하는 문자열 비교 메서드를 호출 하지 명시적으로 지정 합니다. 현재 문화권의 비교 규칙을 사용 하 여 문자열 인스턴스 내에서 부분 문자열의 첫 번째 인덱스를 찾으려고 호출을 <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> 값을 사용 하 여 메서드 오버 로드 <see cref="F:System.StringComparison.CurrentCulture" /> 'comparisonType' 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1805">
              <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified. To find the first index of a substring within a string instance by using the comparison rules of the current culture, call the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char * int -&gt; int" Usage="string.IndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1806">검색할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1806">A Unicode character to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-1807">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1807">The search starting position.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1808">이 문자열에서 맨 처음 발견되는 지정된 유니코드 문자의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1808">Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</span>
          </span>
          <span data-ttu-id="3723c-1809">검색은 지정된 문자 위치에서 시작됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1809">The search starts at a specified character position.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1810">해당 문자열이 있으면 <paramref name="value" />의 인덱스 위치는 문자열의 시작 부분에서 0부터 시작되고 해당 문자열이 없으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1810">The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1811">인덱스 번호 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1811">Index numbering starts from 0.</span></span> <span data-ttu-id="3723c-1812">`startIndex` 매개 변수의 범위는 0에서 문자열 인스턴스 길이 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1812">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="3723c-1813">경우 `startIndex` 문자열 인스턴스 길이 같으면,-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1813">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>  
  
 <span data-ttu-id="3723c-1814">검색 범위에서 `startIndex` 문자열의 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1814">The search ranges from `startIndex` to the end of the string.</span></span>  
  
 <span data-ttu-id="3723c-1815">이 메서드는 유니코드 스칼라 값이 같은 서 수 (문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1815">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="3723c-1816">문화권 구분 검색을 수행 하려면 사용 합니다 <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> 메서드, 여기서는 미리 구성 된 문자를 나타내는 합자 "→"와 같은 (U + 00 6), 유니코드 스칼라 값 간주 될 수 있습니다 문자 구성 요소에서의 모든 항목에는 "AE" 등 시퀀스를 수정 (u+0041, U + 0045) 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1816">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1817">다음 예제는 <xref:System.String.IndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1817">The following example demonstrates the <xref:System.String.IndexOf%2A> method.</span></span>  
  
 [!code-cpp[string.indexof1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexof1/CPP/ixof1.cpp#1)]
 [!code-csharp[string.indexof1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexof1/CS/ixof1.cs#1)]
 [!code-vb[string.indexof1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexof1/VB/ixof1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1818">
            <paramref name="startIndex" />가 0보다 작거나 문자열의 길이보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1818">
              <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of the string.</span>
          </span>
        </exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char * StringComparison -&gt; int" Usage="string.IndexOf (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int -&gt; int" Usage="string.IndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1819">검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1819">The string to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-1820">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1820">The search starting position.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1821">이 인스턴스에서 맨 처음 발견되는 지정된 문자열의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1821">Reports the zero-based index of the first occurrence of the specified string in this instance.</span>
          </span>
          <span data-ttu-id="3723c-1822">검색은 지정된 문자 위치에서 시작됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1822">The search starts at a specified character position.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1823">해당 문자열이 있으면 현재 인스턴스의 시작 부분에서 <paramref name="value" /> 인덱스 위치(0부터 시작)이고, 해당 문자열이 없으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1823">The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not.</span>
          </span>
          <span data-ttu-id="3723c-1824">
            <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우 반환 값은 <paramref name="startIndex" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1824">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1825">인덱스 번호 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1825">Index numbering starts from 0.</span></span> <span data-ttu-id="3723c-1826">`startIndex` 매개 변수의 범위는 0에서 문자열 인스턴스 길이 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1826">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="3723c-1827">경우 `startIndex` 문자열 인스턴스 길이 같으면,-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1827">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>  
  
 <span data-ttu-id="3723c-1828">이 메서드는 현재 문화권을 사용 하는 단어 (대/소문자 구분 및 문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1828">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="3723c-1829">검색이 시작 된 `startIndex` 문자이 인스턴스의 위치 및 마지막 문자 위치까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1829">The search begins at the `startIndex` character position of this instance and continues until the last character position.</span></span>  
  
 <span data-ttu-id="3723c-1830">문자 집합에는 무시할 수 있는 문자가 포함되며, 이들 문자는 언어 또는 문화권 구분 비교를 수행하는 경우 고려되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1830">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="3723c-1831">문화권 구분 검색에서는 `value`에 무시할 수 있는 문자가 포함된 경우 결과는 해당 문자가 제거된 대상을 검색하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1831">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="3723c-1832">하는 경우 `value` 하나 이상의 무시할 수 있는 문자로 구성 되어 합니다 <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> 메서드는 항상 반환 `startIndex`, 검색을 시작할 문자 위치는입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1832">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="3723c-1833">다음 예제에서는 <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> 메서드는 두 문자열의 "m" 뒤에 하이픈이 (U + 00AD)의 위치를 찾는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1833">In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in two strings.</span></span> <span data-ttu-id="3723c-1834">문자열 중 하나에만 필수 부분 문자열이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1834">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="3723c-1835">예제를 실행 하는 경우는 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 이상, 두 경우 모두 사용자 지정 하이픈은 무시할 수 있는 문자 때문에 메서드 반환 문자열에 "m"의 인덱스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1835">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string.</span></span> <span data-ttu-id="3723c-1836">"m"이 앞에 붙은 사용자 지정 하이픈이 포함된 첫 번째 문자열의 경우, 메서드가 사용자 지정 하이픈의 인덱스를 반환하지 못하고 대신 "m"의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1836">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>  
  
 [!code-csharp[System.String.IndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable22.cs#22)]
 [!code-vb[System.String.IndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable22.vb#22)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1837">다음 예제에서는 대상 문자열에 지정된 된 문자열의 모든 항목에 대 한 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1837">The following example searches for all occurrences of a specified string within a target string.</span></span>  
  
 [!code-cpp[stringindexof4#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringindexof4/CPP/stringindexof4.cpp#1)]
 [!code-csharp[stringindexof4#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringindexof4/CS/stringindexof4.cs#1)]
 [!code-vb[stringindexof4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringindexof4/VB/stringindexof4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1838">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1838">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1839">
            <paramref name="startIndex" />가 0보다 작거나 이 문자열의 길이보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1839">
              <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1840">
            <para>에 설명 된 대로 [Strings](~/docs/standard/base-types/best-practices-strings.md) 사용에 대 한 모범 사례 권장 기본값을 대체 하 고 대신 매개 변수를 필요로 하는 메서드를 호출 하는 문자열 비교 메서드를 호출 하지 명시적으로 지정 합니다. 현재 문화권의 비교 규칙을 사용 하 여 특정 문자 위치 후 발생 하는 부분 문자열의 첫 번째 인덱스를 찾으려면를 호출 합니다 <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> 값을 사용 하 여 메서드 오버 로드 <see cref="F:System.StringComparison.CurrentCulture" /> 'comparisonType' 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1840">
              <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified. To find the first index of a substring that occurs after a particular character position by using the comparison rules of the current culture, call the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * StringComparison -&gt; int" Usage="string.IndexOf (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1841">검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1841">The string to seek.</span>
          </span>
        </param>
        <param name="comparisonType">
          <span data-ttu-id="3723c-1842">검색 규칙을 지정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1842">One of the enumeration values that specifies the rules for the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1843">현재 <see cref="T:System.String" /> 개체에서 맨 처음 발견되는 지정된 문자열의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1843">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span>
          </span>
          <span data-ttu-id="3723c-1844">매개 변수는 지정된 문자열에 사용할 검색 유형을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1844">A parameter specifies the type of search to use for the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1845">문자열이 있으면 <paramref name="value" /> 매개 변수의 인덱스 위치이고, 그러지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1845">The index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not.</span>
          </span>
          <span data-ttu-id="3723c-1846">
            <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우 반환 값은 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1846">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1847">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1847">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="3723c-1848">합니다 `comparisonType` 매개 변수를 검색 하도록 지정 합니다 `value` 현재 또는 고정 문화권을 사용 하 고 대/소문자 구분 또는 대/소문자 구분 검색을 사용 하 여 단어 또는 서 수 비교 규칙을 사용 하 여 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1848">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1849">다음 exampledemonstrates 세 오버 로드는 <xref:System.String.IndexOf%2A> 의 다른 값을 사용 하 여 다른 문자열 내에 있는 문자열의 처음 발견 하는 메서드를 <xref:System.StringComparison> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1849">The following exampledemonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1850">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1850">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-1851">
            <paramref name="comparisonType" />은 유효한 <see cref="T:System.StringComparison" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1851">
              <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1852">
            <para>문자 집합에는 언어 또는 문화권 구분 비교를 수행 하는 경우 간주 되지 않는 문자는 무시할 수 있는 문자가 포함 됩니다. 문화권 구분 검색(즉, <paramref name="comparisonType" />이 <see cref="F:System.StringComparison.Ordinal" /> 또는 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />가 아닌 경우)에서는 <paramref name="value" />에 무시할 수 있는 문자가 포함된 경우 결과는 해당 문자가 제거된 대상을 검색하는 것과 같습니다. 하는 경우 <paramref name="value" /> 하나 이상의 무시할 수 있는 문자로 구성 되어 합니다 <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> 메서드는 항상 일치 항목은 현재 인스턴스의 시작 부분에 있음을 나타내기 위해 0 (영)을 반환 합니다.  다음 예제에서는 <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> 메서드는 두 문자열의 세 가지 부분 문자열 (하이픈이 (U + 00AD), "n" 뒤에 하이픈이 및 하이픈이 뒤에 "m")을 찾는 데 사용 됩니다. 문자열 중 하나에만 사용자 지정 하이픈이 포함되어 있습니다. 예제를 실행 하는 경우는 [! INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 나중에 사용자 지정 하이픈을 무시할 수 있는 문자 이기 때문에 문화권 구분 검색을 반환 하거나 검색 문자열에 사용자 지정 하이픈이 포함 되지 않은 경우 반환 된 값과 같아야 합니다. 그러나 서 수 검색을 성공적으로 사용자 지정 하이픈 한 문자열에서 찾아 보고 없는 것에서 두 번째 문자열입니다.  [! csharp 코드 [System.String.IndexOf#26] (~/samples/snippets/csharp/VS_Snippets_CLR_System/시스템입니다. String.IndexOf/CS/ignorable26.cs#26)] [! vb 코드 [System.String.IndexOf#26] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/시스템입니다. String.IndexOf/VB/ignorable26.vb#26)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1852">
              <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance.  In the following example, the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings. Only one of the strings contains a soft hyphen. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string. An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.  [!code-csharp[System.String.IndexOf#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable26.cs#26)] [!code-vb[System.String.IndexOf#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable26.vb#26)]</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char * int * int -&gt; int" Usage="string.IndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1853">검색할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1853">A Unicode character to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-1854">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1854">The search starting position.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-1855">검사할 문자 위치의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1855">The number of character positions to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1856">이 인스턴스에서 맨 처음 발견되는 지정된 문자의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1856">Reports the zero-based index of the first occurrence of the specified character in this instance.</span>
          </span>
          <span data-ttu-id="3723c-1857">검색은 지정된 문자 위치에서 시작하여 지정된 수의 문자 위치를 검사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1857">The search starts at a specified character position and examines a specified number of character positions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1858">해당 문자열이 있으면 <paramref name="value" />의 인덱스 위치는 문자열의 시작 부분에서 0부터 시작되고 해당 문자열이 없으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1858">The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1859">검색이 시작 `startIndex` 계속 `startIndex`  +  `count` -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1859">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="3723c-1860">에 있는 문자가 `startIndex`  +  `count` 검색에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1860">The character at `startIndex` + `count` is not included in the search.</span></span>  
  
 <span data-ttu-id="3723c-1861">인덱스 번호 0 (영)부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1861">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="3723c-1862">`startIndex` 매개 변수의 범위는 0에서 문자열 인스턴스 길이 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1862">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>  
  
 <span data-ttu-id="3723c-1863">이 메서드는 유니코드 스칼라 값이 같은 서 수 (문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1863">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="3723c-1864">문화권 구분 검색을 수행 하려면 사용 합니다 <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> 메서드, 여기서는 미리 구성 된 문자를 나타내는 합자 "→"와 같은 (U + 00 6), 유니코드 스칼라 값 간주 될 수 있습니다 문자 구성 요소에서의 모든 항목에는 "AE" 등 시퀀스를 수정 (u+0041, U + 0045) 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1864">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1865">다음 예제는 <xref:System.String.IndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-1865">The following example demonstrates the <xref:System.String.IndexOf%2A> method.</span></span>  
  
 [!code-cpp[system.string.indexof#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/indexofcii.cpp#1)]
 [!code-csharp[system.string.indexof#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/indexofcii.cs#1)]
 [!code-vb[system.string.indexof#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/indexofcii.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1866">
            <paramref name="count" /> 또는 <paramref name="startIndex" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1866">
              <paramref name="count" /> or <paramref name="startIndex" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-1867">-또는-  <paramref name="startIndex" />가 이 문자열의 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1867">-or-  <paramref name="startIndex" /> is greater than the length of this string.</span>
          </span>
          <span data-ttu-id="3723c-1868">-또는-  <paramref name="count" />가 이 문자열의 길이에서 <paramref name="startIndex" />를 뺀 값보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1868">-or-  <paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int * int -&gt; int" Usage="string.IndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1869">검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1869">The string to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-1870">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1870">The search starting position.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-1871">검사할 문자 위치의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1871">The number of character positions to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1872">이 인스턴스에서 맨 처음 발견되는 지정된 문자열의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1872">Reports the zero-based index of the first occurrence of the specified string in this instance.</span>
          </span>
          <span data-ttu-id="3723c-1873">검색은 지정된 문자 위치에서 시작하여 지정된 수의 문자 위치를 검사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1873">The search starts at a specified character position and examines a specified number of character positions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1874">해당 문자열이 있으면 현재 인스턴스의 시작 부분에서 <paramref name="value" /> 인덱스 위치(0부터 시작)이고, 해당 문자열이 없으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1874">The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not.</span>
          </span>
          <span data-ttu-id="3723c-1875">
            <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우 반환 값은 <paramref name="startIndex" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1875">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1876">인덱스 번호 0 (영)부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1876">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="3723c-1877">`startIndex` 매개 변수의 범위는 0에서 문자열 인스턴스 길이 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1877">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>  
  
 <span data-ttu-id="3723c-1878">이 메서드는 현재 문화권을 사용 하는 단어 (대/소문자 구분 및 문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1878">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="3723c-1879">검색이 시작 `startIndex` 계속 `startIndex`  +  `count` -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1879">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="3723c-1880">에 있는 문자가 `startIndex`  +  `count` 검색에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1880">The character at `startIndex` + `count` is not included in the search.</span></span>  
  
 <span data-ttu-id="3723c-1881">문자 집합에는 무시할 수 있는 문자가 포함되며, 이들 문자는 언어 또는 문화권 구분 비교를 수행하는 경우 고려되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1881">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="3723c-1882">문화권 구분 검색에서는 `value`에 무시할 수 있는 문자가 포함된 경우 결과는 해당 문자가 제거된 대상을 검색하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1882">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="3723c-1883">하는 경우 `value` 하나 이상의 무시할 수 있는 문자로 구성 되어 합니다 <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> 메서드는 항상 반환 `startIndex`, 검색을 시작할 문자 위치는입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1883">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="3723c-1884">다음 예제에서는 <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> 메서드는 두 문자열의 여섯 번째 문자 위치부터 세 번째에서 시작 "m" 뒤에 하이픈이 (U + 00AD)의 위치를 찾는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1884">In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings.</span></span> <span data-ttu-id="3723c-1885">문자열 중 하나에만 필수 부분 문자열이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1885">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="3723c-1886">예제를 실행 하는 경우는 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 이상, 두 경우 모두 사용자 지정 하이픈은 무시할 수 있는 문자 때문에 메서드 반환 문자열에 "m"의 인덱스 문화권 구분 비교를 수행 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="3723c-1886">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="3723c-1887">"m"이 앞에 붙은 사용자 지정 하이픈이 포함된 첫 번째 문자열의 경우, 메서드가 사용자 지정 하이픈의 인덱스를 반환하지 못하고 대신 "m"의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1887">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>  
  
 [!code-csharp[System.String.IndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable23.cs#23)]
 [!code-vb[System.String.IndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable23.vb#23)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1888">다음 예제에서는 문자열의 모든 항목의 인덱스를 찾습니다 다른 문자열의 부분 문자열에 있는 "he"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1888">The following example finds the index of all occurrences of the string "he" within a substring of another string.</span></span> <span data-ttu-id="3723c-1889">참고 검색할 문자의 수 검색 반복할 때마다 다시 계산 되어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1889">Note that the number of characters to be searched must be recalculated for each search iteration.</span></span>  
  
 [!code-cpp[string.indexof8#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexof8/CPP/ixof8.cpp#1)]
 [!code-csharp[string.indexof8#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexof8/CS/ixof8.cs#1)]
 [!code-vb[string.indexof8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexof8/VB/ixof8.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1890">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1890">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1891">
            <paramref name="count" /> 또는 <paramref name="startIndex" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1891">
              <paramref name="count" /> or <paramref name="startIndex" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-1892">-또는-  <paramref name="startIndex" />가 이 문자열의 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1892">-or-  <paramref name="startIndex" /> is greater than the length of this string.</span>
          </span>
          <span data-ttu-id="3723c-1893">-또는-  <paramref name="count" />가 이 문자열의 길이에서 <paramref name="startIndex" />를 뺀 값보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1893">-or-  <paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1894">
            <para>에 설명 된 대로 [Strings](~/docs/standard/base-types/best-practices-strings.md) 사용에 대 한 모범 사례 권장 기본값을 대체 하 고 대신 매개 변수를 필요로 하는 메서드를 호출 하는 문자열 비교 메서드를 호출 하지 명시적으로 지정 합니다. 이 작업을 수행 하려면 현재 문화권의 비교 규칙을 사용 하려면 호출을 <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> 값을 사용 하 여 메서드 오버 로드 <see cref="F:System.StringComparison.CurrentCulture" /> 'comparisonType' 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1894">
              <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified. To use the comparison rules of the current culture to perform this operation, call the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int * StringComparison -&gt; int" Usage="string.IndexOf (value, startIndex, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1895">검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1895">The string to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-1896">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1896">The search starting position.</span>
          </span>
        </param>
        <param name="comparisonType">
          <span data-ttu-id="3723c-1897">검색 규칙을 지정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1897">One of the enumeration values that specifies the rules for the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1898">현재 <see cref="T:System.String" /> 개체에서 맨 처음 발견되는 지정된 문자열의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1898">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span>
          </span>
          <span data-ttu-id="3723c-1899">매개 변수는 현재 문자열의 검색 시작 위치와 지정된 문자열에 사용할 검색 유형을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1899">Parameters specify the starting search position in the current string and the type of search to use for the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1900">해당 문자열이 있으면 현재 인스턴스의 시작 부분에서 <paramref name="value" /> 매개 변수의 인덱스 위치(0부터 시작)이고, 없으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1900">The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not.</span>
          </span>
          <span data-ttu-id="3723c-1901">
            <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우 반환 값은 <paramref name="startIndex" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1901">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1902">인덱스 번호 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1902">Index numbering starts from 0.</span></span> <span data-ttu-id="3723c-1903">`startIndex` 매개 변수의 범위는 0에서 문자열 인스턴스 길이 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1903">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="3723c-1904">경우 `startIndex` 문자열 인스턴스 길이 같으면,-1을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1904">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>  
  
 <span data-ttu-id="3723c-1905">합니다 `comparisonType` 매개 변수를 검색 하도록 지정 합니다 `value` 현재 또는 고정 문화권을 사용 하 고 대/소문자 구분 또는 대/소문자 구분 검색을 사용 하 여 단어 또는 서 수 비교 규칙을 사용 하 여 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1905">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1906">다음 exampledemonstrates 세 오버 로드는 <xref:System.String.IndexOf%2A> 의 다른 값을 사용 하 여 다른 문자열 내에 있는 문자열의 처음 발견 하는 메서드를 <xref:System.StringComparison> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1906">The following exampledemonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1907">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1907">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1908">
            <paramref name="startIndex" />가 0보다 작거나 이 문자열의 길이보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1908">
              <paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-1909">
            <paramref name="comparisonType" />은 유효한 <see cref="T:System.StringComparison" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1909">
              <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1910">
            <para>문자 집합에는 언어 또는 문화권 구분 비교를 수행 하는 경우 간주 되지 않는 문자는 무시할 수 있는 문자가 포함 됩니다. 문화권 구분 검색(즉, <paramref name="comparisonType" />이 <see cref="F:System.StringComparison.Ordinal" /> 또는 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />가 아닌 경우)에서는 <paramref name="value" />에 무시할 수 있는 문자가 포함된 경우 결과는 해당 문자가 제거된 대상을 검색하는 것과 같습니다. 하는 경우 <paramref name="value" /> 하나 이상의 무시할 수 있는 문자로 구성 되어 합니다 <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> 메서드는 항상 반환 <paramref name="startIndex" />, 검색을 시작할 문자 위치는입니다.  다음 예제에서는 <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> 메서드는 "m"가 포함 된 두 문자열의 세 번째 문자 위치부터 뒤에 하이픈이 (U + 00AD)의 위치를 찾는 데 사용 됩니다. 문자열 중 하나에만 필수 부분 문자열이 포함 되어 있습니다. 예제를 실행 하는 경우는 [! INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 이상, 두 경우 모두 사용자 지정 하이픈은 무시할 수 있는 문자 때문에 메서드 반환 문자열에 "m"의 인덱스 문화권 구분 비교를 수행 하는 경우. "m"이 앞에 붙은 사용자 지정 하이픈이 포함된 첫 번째 문자열의 경우, 메서드가 사용자 지정 하이픈의 인덱스를 반환하지 못하고 대신 "m"의 인덱스를 반환합니다. 메서드는 서 수 비교를 수행 하는 경우에 첫 번째 문자열에 사용자 지정 하이픈의 인덱스를 반환 합니다.  [! csharp 코드 [System.String.IndexOf#25] (~/samples/snippets/csharp/VS_Snippets_CLR_System/시스템입니다. String.IndexOf/CS/ignorable25.cs#25)] [! vb 코드 [System.String.IndexOf#25] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/시스템입니다. String.IndexOf/VB/ignorable25.vb#25)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1910">
              <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.  In the following example, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting with the third character position in two strings. Only one of the strings contains the required substring.If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m". The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.  [!code-csharp[System.String.IndexOf#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable25.cs#25)] [!code-vb[System.String.IndexOf#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable25.vb#25)]</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, int32 count, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int * int * StringComparison -&gt; int" Usage="string.IndexOf (value, startIndex, count, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-1911">검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1911">The string to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-1912">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1912">The search starting position.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-1913">검사할 문자 위치의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1913">The number of character positions to examine.</span>
          </span>
        </param>
        <param name="comparisonType">
          <span data-ttu-id="3723c-1914">검색 규칙을 지정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1914">One of the enumeration values that specifies the rules for the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1915">현재 <see cref="T:System.String" /> 개체에서 맨 처음 발견되는 지정된 문자열의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1915">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span>
          </span>
          <span data-ttu-id="3723c-1916">매개 변수는 현재 문자열의 검색 시작 위치, 검색할 현재 문자열의 문자 수 및 지정된 문자열에 사용할 검색 유형을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1916">Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1917">해당 문자열이 있으면 현재 인스턴스의 시작 부분에서 <paramref name="value" /> 매개 변수의 인덱스 위치(0부터 시작)이고, 없으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1917">The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not.</span>
          </span>
          <span data-ttu-id="3723c-1918">
            <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우 반환 값은 <paramref name="startIndex" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1918">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1919">인덱스 번호 0 (영)부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1919">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="3723c-1920">`startIndex` 매개 변수의 범위는 0에서 문자열 인스턴스 길이 사이입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1920">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>  
  
 <span data-ttu-id="3723c-1921">검색이 시작 `startIndex` 계속 `startIndex`  +  `count` -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1921">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="3723c-1922">에 있는 문자가 `startIndex`  +  `count` 검색에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1922">The character at `startIndex` + `count` is not included in the search.</span></span>  
  
 <span data-ttu-id="3723c-1923">합니다 `comparisonType` 매개 변수를 검색 하도록 지정 합니다 `value` 현재 또는 고정 문화권을 사용 하 고 대/소문자 구분 또는 대/소문자 구분 검색을 사용 하 여 단어 또는 서 수 비교 규칙을 사용 하 여 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1923">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1924">다음 exampledemonstrates 세 오버 로드는 <xref:System.String.IndexOf%2A> 의 다른 값을 사용 하 여 다른 문자열 내에 있는 문자열의 처음 발견 하는 메서드를 <xref:System.StringComparison> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1924">The following exampledemonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1925">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1925">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1926">
            <paramref name="count" /> 또는 <paramref name="startIndex" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1926">
              <paramref name="count" /> or <paramref name="startIndex" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-1927">-또는-  <paramref name="startIndex" />가 이 인스턴스의 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1927">-or-  <paramref name="startIndex" /> is greater than the length of this instance.</span>
          </span>
          <span data-ttu-id="3723c-1928">-또는-  <paramref name="count" />가 이 문자열의 길이에서 <paramref name="startIndex" />를 뺀 값보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1928">-or-  <paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-1929">
            <paramref name="comparisonType" />은 유효한 <see cref="T:System.StringComparison" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1929">
              <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-1930">
            <para>문자 집합에는 언어 또는 문화권 구분 비교를 수행 하는 경우 간주 되지 않는 문자는 무시할 수 있는 문자가 포함 됩니다. 문화권 구분 검색(즉, <paramref name="comparisonType" />이 <see cref="F:System.StringComparison.Ordinal" /> 또는 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />가 아닌 경우)에서는 <paramref name="value" />에 무시할 수 있는 문자가 포함된 경우 결과는 해당 문자가 제거된 대상을 검색하는 것과 같습니다. 하는 경우 <paramref name="value" /> 하나 이상의 무시할 수 있는 문자로 구성 되어 합니다 <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> 메서드는 항상 반환 <paramref name="startIndex" />, 검색을 시작할 문자 위치는입니다.  다음 예제에서는 <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> 메서드는 두 문자열의 여섯 번째 문자 위치부터 세 번째에서 시작 "m" 뒤에 하이픈이 (U + 00AD)의 위치를 찾는 데 사용 됩니다. 문자열 중 하나에만 필수 부분 문자열이 포함되어 있습니다. 예제를 실행 하는 경우는 [! INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 이상, 두 경우 모두 사용자 지정 하이픈은 무시할 수 있는 문자 때문에 메서드 반환 문자열에 "m"의 인덱스 문화권 구분 비교를 수행 하는 경우. 그러나 서 수 비교를 수행할 때 부분만에서 찾은 첫 번째 문자열입니다. 참고 첫 번째 문자열 뒤에 "m" 사용자 지정 하이픈을 포함 하는 메서드를 사용자 지정 하이픈의 인덱스를 반환 하지 못하고 있지만 문화권 구분 비교를 수행 하는 경우 대신 "m"의 인덱스를 반환 합니다. 메서드는 서 수 비교를 수행 하는 경우에 첫 번째 문자열에 사용자 지정 하이픈의 인덱스를 반환 합니다.  [! csharp 코드 [System.String.IndexOf#24] (~/samples/snippets/csharp/VS_Snippets_CLR_System/시스템입니다. String.IndexOf/CS/ignorable24.cs#24)] [! vb 코드 [System.String.IndexOf#24] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/시스템입니다. String.IndexOf/VB/ignorable24.vb#24)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1930">
              <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.  In the following example, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings. Only one of the strings contains the required substring. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison. When it performs an ordinal comparison, however, it finds the substring only in the first string. Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m" when it performs a culture-sensitive comparison. The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.  [!code-csharp[System.String.IndexOf#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable24.cs#24)] [!code-vb[System.String.IndexOf#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable24.vb#24)]</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOfAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-1931">지정된 유니코드 문자 배열에 있는 문자 중에서 이 인스턴스에서 맨 처음 발견되는 문자의 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1931">Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span>
          </span>
          <span data-ttu-id="3723c-1932">이 인스턴스에 해당 문자가 없으면 메서드는 -1을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1932">The method returns -1 if the characters in the array are not found in this instance.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf);" />
      <MemberSignature Language="F#" Value="member this.IndexOfAny : char[] -&gt; int" Usage="string.IndexOfAny anyOf" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="anyOf">
          <span data-ttu-id="3723c-1933">검색할 문자를 하나 이상 포함하는 유니코드 문자 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1933">A Unicode character array containing one or more characters to seek.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1934">지정된 유니코드 문자 배열에 있는 문자 중에 이 인스턴스에서 맨 처음 발견되는 문자의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1934">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1935">이 인스턴스에서 <paramref name="anyOf" />의 문자가 처음 발견된 인덱스 위치(0부터 시작)입니다. <paramref name="anyOf" />의 문자가 발견되지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1935">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1936">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1936">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="3723c-1937">검색 `anyOf` 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1937">The search for `anyOf` is case-sensitive.</span></span> <span data-ttu-id="3723c-1938">경우 `anyOf` 빈 배열에서 문자열의 시작 부분에서 일치 하는 방법 찾습니다 (즉, 인덱스 0에).</span><span class="sxs-lookup"><span data-stu-id="3723c-1938">If `anyOf` is an empty array, the method finds a match at the beginning of the string (that  is, at index zero).</span></span>  
  
 <span data-ttu-id="3723c-1939">이 메서드는 유니코드 스칼라 값이 같은 서 수 (문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1939">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="3723c-1940">문화권 구분 검색을 수행 하려면 사용 합니다 <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> 메서드, 여기서는 미리 구성 된 문자를 나타내는 합자 "→"와 같은 (U + 00 6), 유니코드 스칼라 값 간주 될 수 있습니다 문자 구성 요소에서의 모든 항목에는 "AE" 등 시퀀스를 수정 (u+0041, U + 0045) 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1940">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1941">다음 예제에서는 문자열에서 첫 번째 자음을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1941">The following example finds the first vowel in a string.</span></span>  
  
 [!code-csharp[System.String.IndexOfAny#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.IndexOfAny/cs/IndexOfAny1.cs#1)]
 [!code-vb[System.String.IndexOfAny#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.IndexOfAny/vb/IndexOfAny1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1942">
            <paramref name="anyOf" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1942">
              <paramref name="anyOf" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char(), startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOfAny : char[] * int -&gt; int" Usage="string.IndexOfAny (anyOf, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf">
          <span data-ttu-id="3723c-1943">검색할 문자를 하나 이상 포함하는 유니코드 문자 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1943">A Unicode character array containing one or more characters to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-1944">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1944">The search starting position.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1945">지정된 유니코드 문자 배열에 있는 문자 중에 이 인스턴스에서 맨 처음 발견되는 문자의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1945">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span>
          </span>
          <span data-ttu-id="3723c-1946">검색은 지정된 문자 위치에서 시작됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1946">The search starts at a specified character position.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1947">이 인스턴스에서 <paramref name="anyOf" />의 문자가 처음 발견된 인덱스 위치(0부터 시작)입니다. <paramref name="anyOf" />의 문자가 발견되지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1947">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1948">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1948">Index numbering starts from zero.</span></span> <span data-ttu-id="3723c-1949">`startIndex` 매개 변수의 범위는 0에서 1 문자열 인스턴스 길이 보다 작은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1949">The `startIndex` parameter can range from 0 to one less than the length of the string instance.</span></span>  
  
 <span data-ttu-id="3723c-1950">검색 범위에서 `startIndex` 문자열의 끝에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1950">The search ranges from `startIndex` to the end of the string.</span></span>  
  
 <span data-ttu-id="3723c-1951">검색 `anyOf` 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1951">The search for `anyOf` is case-sensitive.</span></span>  
  
 <span data-ttu-id="3723c-1952">이 메서드는 유니코드 스칼라 값은 동일한 서 수 (문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1952">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="3723c-1953">문화권 구분 검색을 수행 하려면 사용 합니다 <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> 메서드, 여기서는 미리 구성 된 문자를 나타내는 합자 "→"와 같은 (U + 00 6), 유니코드 스칼라 값 간주 될 수 있습니다 문자 구성 요소에서의 모든 항목에는 "AE" 등 시퀀스를 수정 (u+0041, U + 0045) 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1953">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1954">다음 예제에서는 다른 문자열의 부분 문자열에 있는 "is"는 문자열의 문자 인덱스를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1954">The following example finds the index of the occurrence of any character of the string "is" within a substring of another string.</span></span>  
  
 [!code-cpp[string.indexofany2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexofany2/CPP/ixany2.cpp#1)]
 [!code-csharp[string.indexofany2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexofany2/CS/ixany2.cs#1)]
 [!code-vb[string.indexofany2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexofany2/VB/ixany2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1955">
            <paramref name="anyOf" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1955">
              <paramref name="anyOf" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1956">
            <paramref name="startIndex" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1956">
              <paramref name="startIndex" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-1957">-또는-  <paramref name="startIndex" />가 이 인스턴스의 문자 수보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1957">-or-  <paramref name="startIndex" /> is greater than the number of characters in this instance.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOfAny : char[] * int * int -&gt; int" Usage="string.IndexOfAny (anyOf, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf">
          <span data-ttu-id="3723c-1958">검색할 문자를 하나 이상 포함하는 유니코드 문자 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1958">A Unicode character array containing one or more characters to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-1959">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1959">The search starting position.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-1960">검사할 문자 위치의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1960">The number of character positions to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1961">지정된 유니코드 문자 배열에 있는 문자 중에 이 인스턴스에서 맨 처음 발견되는 문자의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1961">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span>
          </span>
          <span data-ttu-id="3723c-1962">검색은 지정된 문자 위치에서 시작하여 지정된 수의 문자 위치를 검사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1962">The search starts at a specified character position and examines a specified number of character positions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1963">이 인스턴스에서 <paramref name="anyOf" />의 문자가 처음 발견된 인덱스 위치(0부터 시작)입니다. <paramref name="anyOf" />의 문자가 발견되지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1963">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1964">검색이 시작 `startIndex` 계속 `startIndex`  +  `count` -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1964">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="3723c-1965">에 있는 문자가 `startIndex`  +  `count` 검색에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1965">The character at `startIndex` + `count` is not included in the search.</span></span>  
  
 <span data-ttu-id="3723c-1966">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1966">Index numbering starts from zero.</span></span> <span data-ttu-id="3723c-1967">`startIndex` 매개 변수의 범위는 0에서 1 문자열 인스턴스 길이 보다 작은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1967">The `startIndex` parameter can range from 0 to one less than the length of the string instance.</span></span>  
  
 <span data-ttu-id="3723c-1968">검색 `anyOf` 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1968">The search for `anyOf` is case-sensitive.</span></span>  
  
 <span data-ttu-id="3723c-1969">이 메서드는 유니코드 스칼라 값은 동일한 서 수 (문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1969">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="3723c-1970">문화권 구분 검색을 수행 하려면 사용 합니다 <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> 메서드, 여기서는 미리 구성 된 문자를 나타내는 합자 "→"와 같은 (U + 00 6), 유니코드 스칼라 값 간주 될 수 있습니다 문자 구성 요소에서의 모든 항목에는 "AE" 등 시퀀스를 수정 (u+0041, U + 0045) 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1970">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1971">다음 예제에서는 다른 문자열의 부분 문자열에 있는 "참조" 문자열의 문자 검색 된 항목의 인덱스를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1971">The following example finds the index of the occurrence of any character of the string "aid" within a substring of another string.</span></span>  
  
 [!code-cpp[string.indexofany3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexofany3/CPP/ixany3.cpp#1)]
 [!code-csharp[string.indexofany3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexofany3/CS/ixany3.cs#1)]
 [!code-vb[string.indexofany3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexofany3/VB/ixany3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1972">
            <paramref name="anyOf" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1972">
              <paramref name="anyOf" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1973">
            <paramref name="count" /> 또는 <paramref name="startIndex" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1973">
              <paramref name="count" /> or <paramref name="startIndex" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-1974">-또는-  <paramref name="count" /> + <paramref name="startIndex" />가 이 인스턴스의 문자 수보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1974">-or-  <paramref name="count" /> + <paramref name="startIndex" /> is greater than the number of characters in this instance.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public string Insert (int startIndex, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Insert(int32 startIndex, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (startIndex As Integer, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Insert(int startIndex, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * string -&gt; string" Usage="string.Insert (startIndex, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="3723c-1975">삽입의 0부터 시작하는 인덱스 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1975">The zero-based index position of the insertion.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="3723c-1976">삽입할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1976">The string to insert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1977">이 인스턴스의 지정된 인덱스 위치에 지정한 문자열이 삽입되는 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1977">Returns a new string in which a specified string is inserted at a specified index position in this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1978">이 인스턴스와 동일하지만 <paramref name="value" /> 위치에 <paramref name="startIndex" />가 삽입된 새 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1978">A new string that is equivalent to this instance, but with <paramref name="value" /> inserted at position <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1979">하는 경우 `startIndex` 가이 인스턴스의 길이 같고 `value` 이 인스턴스의 끝에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1979">If `startIndex` is equal to the length of this instance, `value` is appended to the end of this instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-1980">이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1980">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-1981">새 문자열을 반환 하는 대신 `value` 가 현재 인스턴스에 삽입 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1981">Instead, it returns a new string in which `value` is inserted into the current instance.</span></span>  
  
 <span data-ttu-id="3723c-1982">반환 값의 예를 들어 `"abc".Insert(2, "XYZ")` "abXYZc" 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1982">For example, the return value of `"abc".Insert(2, "XYZ")` is "abXYZc".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-1983">다음 예제에서는 네 번째 문자 위치에 있는 (인덱스 3에는 문자) 문자열의 공백 문자를 삽입합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1983">The following example inserts a space character in the fourth character position (the character at index 3) of a string.</span></span>  
  
 [!code-csharp[System.String.Insert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Insert/cs/Insert1.cs#1)]
 [!code-vb[System.String.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Insert/vb/Insert1.vb#1)]  
  
 <span data-ttu-id="3723c-1984">다음 콘솔 응용 프로그램 사용자에 게 두 동물을 설명 하기 위해 하나 이상의 형용사를 입력 합니다. 라는 메시지가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1984">The following console application prompts the users to enter one or more adjectives to describe two animals.</span></span> <span data-ttu-id="3723c-1985">그런 다음 호출 하 여 <xref:System.String.Insert%2A> 문자열로 사용자가 입력 한 텍스트를 삽입 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1985">It then calls the <xref:System.String.Insert%2A> method to insert the text entered by the user into a string.</span></span>  
  
 [!code-cpp[stringinsert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringinsert/CPP/stringinsert.cpp#1)]
 [!code-csharp[stringinsert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringinsert/CS/stringinsert.cs#1)]
 [!code-vb[stringinsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringinsert/VB/stringinsert.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-1986">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1986">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-1987">
            <paramref name="startIndex" />가 음수이거나 이 인스턴스의 길이보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1987">
              <paramref name="startIndex" /> is negative or greater than the length of this instance.</span>
          </span>
        </exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Intern">
      <MemberSignature Language="C#" Value="public static string Intern (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Intern(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Intern(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Intern (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Intern(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Intern : string -&gt; string" Usage="System.string.Intern str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="3723c-1988">내부 풀에서 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1988">A string to search for in the intern pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-1989">지정된 <see cref="T:System.String" />에 대한 시스템의 참조를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1989">Retrieves the system's reference to the specified <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-1990">
            <paramref name="str" />이 내부 풀에 추가되었으면 해당 시스템 참조이고, 그러지 않으면 <paramref name="str" /> 값을 가진 문자열에 대한 새 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-1990">The system's reference to <paramref name="str" />, if it is interned; otherwise, a new reference to a string with the value of <paramref name="str" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-1991">공용 언어 런타임 내부 풀 고유한 각 리터럴 문자열 선언 또는 프로그램에서 프로그래밍 방식으로 생성에 대 한 단일 참조를 포함 하는 라는 테이블을 유지 하 여 문자열 저장소를 절약 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1991">The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program.</span></span> <span data-ttu-id="3723c-1992">따라서 특정 값을 사용 하 여 리터럴 문자열의 인스턴스만 한 번 시스템에 존재 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1992">Consequently, an instance of a literal string with a particular value only exists once in the system.</span></span>  
  
 <span data-ttu-id="3723c-1993">예를 들어, 여러 변수에 동일한 리터럴 문자열을 할당 하는 경우 런타임 내부 풀에서 리터럴 문자열에 같은 참조를 검색 및 각 변수에 할당 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1993">For example, if you assign the same literal string to several variables, the runtime retrieves the same reference to the literal string from the intern pool and assigns it to each variable.</span></span>  
  
 <span data-ttu-id="3723c-1994">합니다 <xref:System.String.Intern%2A> 메서드 내부 풀을 사용 하 여 문자열의 값을 검색 하려면 `str`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1994">The <xref:System.String.Intern%2A> method uses the intern pool to search for a string equal to the value of `str`.</span></span> <span data-ttu-id="3723c-1995">해당 문자열이 있으면 내부 풀에 해당 참조가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1995">If such a string exists, its reference in the intern pool is returned.</span></span> <span data-ttu-id="3723c-1996">문자열 존재 하지 않는 경우에 대 한 참조를 `str` 반환 되 고 참조 하는 내부 풀에 추가 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1996">If the string does not exist, a reference to `str` is added to the intern pool, then that reference is returned.</span></span>  
  
 <span data-ttu-id="3723c-1997">다음 예제에서는 "MyTest"의 값에는 문자열 s1에 프로그램의 리터럴 이기 때문에 인턴 지정 이미 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1997">In the following example, the string s1, which has a value of "MyTest", is already interned because it is a literal in the program.</span></span> <span data-ttu-id="3723c-1998"><xref:System.Text.StringBuilder?displayProperty=nameWithType> 클래스 s1으로 동일한 값을 갖는 새 문자열 개체를 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1998">The <xref:System.Text.StringBuilder?displayProperty=nameWithType> class generates a new string object that has the same value as s1.</span></span> <span data-ttu-id="3723c-1999">이 문자열에 대 한 참조는 s2에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-1999">A reference to that string is assigned to s2.</span></span> <span data-ttu-id="3723c-2000"><xref:System.String.Intern%2A> 메서드는 s2와 같은 값을 가진 문자열을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2000">The <xref:System.String.Intern%2A> method searches for a string that has the same value as s2.</span></span> <span data-ttu-id="3723c-2001">이러한 문자열에서 알 수 있으므로 메서드 s1에 할당 되는 동일한 참조를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2001">Because such a string exists, the method returns the same reference that is assigned to s1.</span></span> <span data-ttu-id="3723c-2002">참조 하는 s3에 할당 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2002">That reference is then assigned to s3.</span></span> <span data-ttu-id="3723c-2003">참조 s1 및 s2의 경우 같지 않은 다른 개체를 참조 하므로 동일한 문자열을 참조 하기 때문에 참조 s1과 s3 같다고 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2003">References s1 and s2 compare unequal because they refer to different objects; references s1 and s3 compare equal because they refer to the same string.</span></span>  
  
 [!code-csharp[System.String.Intern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern1.cs#1)]
 [!code-vb[System.String.Intern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern1.vb#1)]  
  
 <span data-ttu-id="3723c-2004">이 메서드를 비교 합니다 <xref:System.String.IsInterned%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2004">Compare this method to the <xref:System.String.IsInterned%2A> method.</span></span>  
  
## <a name="version-considerations"></a><span data-ttu-id="3723c-2005">버전 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-2005">Version Considerations</span></span>  
 <span data-ttu-id="3723c-2006">에 [!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)], <xref:System.String.Intern%2A> 메서드.NET Framework 1.0 및 1.1 빈 문자열 인터닝 관련 하 여 해당 동작으로 돌아갑니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2006">In the [!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)], the <xref:System.String.Intern%2A> method reverts to its behavior in the .NET Framework 1.0 and 1.1 with regard to interning the empty string.</span></span> <span data-ttu-id="3723c-2007">다음 예에서 변수 `str1` 에 대 한 참조를 할당 됩니다 <xref:System.String.Empty>, 및 변수 `str2` 에 대 한 참조를 할당 하는 <xref:System.String.Empty> 호출 하 여 반환 되는 <xref:System.String.Intern%2A> 메서드는 변환한후<xref:System.Text.StringBuilder>값인 개체 <xref:System.String.Empty> 문자열로 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2007">In the following example, the variable `str1` is assigned a reference to <xref:System.String.Empty>, and the variable `str2` is assigned the reference to <xref:System.String.Empty> that is returned by calling the <xref:System.String.Intern%2A> method after converting a <xref:System.Text.StringBuilder> object whose value is <xref:System.String.Empty> to a string.</span></span> <span data-ttu-id="3723c-2008">에 포함 된 참조 한 다음 `str1` 고 `str2` 서로 같은지 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2008">Then the references contained in `str1` and `str2` are compared for equality.</span></span>  
  
 [!code-csharp[System.String.Intern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern2.cs#2)]
 [!code-vb[System.String.Intern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern2.vb#2)]  
  
 <span data-ttu-id="3723c-2009">에 [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)], [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], 및 [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)]를 `str1` 및 `str2` 같은지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2009">In the [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)], [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], and [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)], `str1` and `str2` are equal.</span></span> <span data-ttu-id="3723c-2010">에 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] 하 고 [!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)], `str1` 및 `str2` 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2010">In the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] and [!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)], `str1` and `str2` are not equal.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="3723c-2011">성능 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-2011">Performance Considerations</span></span>  
 <span data-ttu-id="3723c-2012">총 메모리 양을 줄이기 위해 시도 하는 경우 응용 프로그램 할당, 문자열 인터닝 두 원치 않는 부작용을 염두에 둡니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2012">If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects.</span></span> <span data-ttu-id="3723c-2013">인턴 지정에 대 한 메모리가 할당 하는 먼저 <xref:System.String> 개체는 가능성이 릴리스되지는 CLR (공용 언어 런타임)이 종료 될 때까지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2013">First, the memory allocated for interned <xref:System.String> objects is not likely be released until the common language runtime (CLR) terminates.</span></span> <span data-ttu-id="3723c-2014">이유는 풀에 대 한 참조를 CLR의 <xref:System.String> 개체 후 응용 프로그램 또는 응용 프로그램 도메인도 유지할 수 있습니다, 종료 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2014">The reason is that the CLR's reference to the interned <xref:System.String> object can persist after your application, or even your application domain, terminates.</span></span> <span data-ttu-id="3723c-2015">둘째, 문자열, 내부 화 하려면 문자열을 먼저 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2015">Second, to intern a string, you must first create the string.</span></span> <span data-ttu-id="3723c-2016">사용 하는 메모리는 <xref:System.String> 개체 해야 계속를 할당할 수 있지만 메모리는 결국 가비지 수집 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2016">The memory used by the <xref:System.String> object must still be allocated, even though the memory will eventually be garbage collected.</span></span>  
  
 <span data-ttu-id="3723c-2017">.NET Framework 버전 2.0에 도입 된 <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning?displayProperty=nameWithType> 열거형 멤버입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2017">The .NET Framework version 2.0 introduces the <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning?displayProperty=nameWithType> enumeration member.</span></span> <span data-ttu-id="3723c-2018"><xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> 멤버 문자열 리터럴 인터닝을 요구 하지 않는 어셈블리를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2018">The <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> member marks an assembly as not requiring string-literal interning.</span></span> <span data-ttu-id="3723c-2019">적용할 수 있습니다 <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> 를 사용 하 여 어셈블리에는 <xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2019">You can apply <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> to an assembly using the <xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute> attribute.</span></span> <span data-ttu-id="3723c-2020">또한 사용 하는 경우는 [Ngen.exe (네이티브 이미지 생성기)](~/docs/framework/tools/ngen-exe-native-image-generator.md) 런타임 이전에 어셈블리를 컴파일하려면 문자열은 인턴 지정 되지 모듈에서.</span><span class="sxs-lookup"><span data-stu-id="3723c-2020">Also, when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to compile an assembly in advance of run time, strings are not interned across modules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2021">다음 예제에서는 새로 만든된 문자열로 지 여부를 결정 하는 값과 동일한 3 개의 문자열 및 인턴 지정된 문자열을 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2021">The following example uses three strings that are equal in value to determine whether a newly created string and an interned string are equal.</span></span>  
  
 [!code-cpp[string.intern#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.intern/CPP/string_intern.cpp#1)]
 [!code-csharp[string.intern#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.intern/CS/string_intern.cs#1)]
 [!code-vb[string.intern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.intern/VB/string_intern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2022">
            <paramref name="str" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2022">
              <paramref name="str" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.IsInterned(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsInterned">
      <MemberSignature Language="C#" Value="public static string IsInterned (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string IsInterned(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsInterned(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInterned (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ IsInterned(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member IsInterned : string -&gt; string" Usage="System.string.IsInterned str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="3723c-2023">내부 풀에서 검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2023">The string to search for in the intern pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2024">지정된 <see cref="T:System.String" />에 대한 참조를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2024">Retrieves a reference to a specified <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2025">
            <paramref name="str" />이 공용 언어 런타임 내부 풀에 있으면 해당 참조이고, 그렇지 않으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2025">A reference to <paramref name="str" /> if it is in the common language runtime intern pool; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2026">공용 언어 런타임 내부 풀의 모든 고유한 인스턴스를 비롯 하 여 프로그램에 선언 된 각 고유 리터럴 문자열 상수의 단일 인스턴스를 포함 하는 라는 테이블을를 자동으로 유지 관리 <xref:System.String> 호출 하 여 프로그래밍 방식으로 추가 <xref:System.String.Intern%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2026">The common language runtime automatically maintains a table, called the intern pool, which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <xref:System.String> you add programmatically by calling the <xref:System.String.Intern%2A> method.</span></span>  
  
 <span data-ttu-id="3723c-2027">내부 풀 문자열 저장소를 절약합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2027">The intern pool conserves string storage.</span></span> <span data-ttu-id="3723c-2028">각 변수를 내부 풀의 여러 인스턴스를 참조 하는 대신 동일한 상수 참조로 여러 변수에 리터럴 문자열 상수를 할당 하는 경우 <xref:System.String> 동일한 값을 갖습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2028">If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <xref:System.String> that have identical values.</span></span>  
  
 <span data-ttu-id="3723c-2029">이 메서드를 조회 `str` 내부 풀에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2029">This method looks up `str` in the intern pool.</span></span> <span data-ttu-id="3723c-2030">하는 경우 `str` 이미이 고, 그렇지 않으면 해당 인스턴스에 대 한 참조는 인턴 지정, `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2030">If `str` has already been interned, a reference to that instance is returned; otherwise, `null` is returned.</span></span>  
  
 <span data-ttu-id="3723c-2031">이 메서드를 비교 합니다 <xref:System.String.Intern%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2031">Compare this method to the <xref:System.String.Intern%2A> method.</span></span>  
  
 <span data-ttu-id="3723c-2032">이 메서드는 부울 값을 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2032">This method does not return a Boolean value.</span></span> <span data-ttu-id="3723c-2033">특정 문자열은 인턴 지정 하는지 여부를 나타내는 부울 값 때문에 메서드를 호출 하는 경우에 다음과 같은 코드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2033">If you call the method because you want a Boolean value that indicates whether a particular string is interned, you can use code such as the following.</span></span>  
  
 [!code-csharp[System.String.IsInterned#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isinterned/cs/isinternedex1.cs#1)]
 [!code-vb[System.String.IsInterned#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isinterned/vb/isinternedex1.vb#1)]  
  
> [!NOTE]
>  <span data-ttu-id="3723c-2034">.NET Framework 버전 2.0부터 재정의할 수 있습니다 내부 풀 사용 사용 하는 경우는 [Ngen.exe (네이티브 이미지 생성기)](~/docs/framework/tools/ngen-exe-native-image-generator.md) 로컬 컴퓨터에서 네이티브 이미지 캐시에 어셈블리를 설치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2034">Starting with the .NET Framework version 2.0, you can override the use of the intern pool when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to install an assembly to the native image cache on a local computer.</span></span> <span data-ttu-id="3723c-2035">자세한 내용은 설명 섹션의 성능 고려 사항을 참조 합니다 <xref:System.String.Intern%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2035">For more information, see Performance Considerations in the Remarks section for the <xref:System.String.Intern%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2036">다음 예에서는 리터럴 문자열은 컴파일러에 의해 자동으로 인턴 지정 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2036">The following example demonstrates that literal strings are interned automatically by the compiler.</span></span>  
  
 [!code-cpp[string.isinterned#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.isinterned/CPP/isin.cpp#1)]
 [!code-csharp[string.isinterned#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.isinterned/CS/isin.cs#1)]
 [!code-vb[string.isinterned#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.isinterned/VB/isin.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2037">
            <paramref name="str" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2037">
              <paramref name="str" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.Intern(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsNormalized">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2038">이 문자열의 형식이 특정 유니코드 정규화 형식인지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2038">Indicates whether this string is in a particular Unicode normalization form.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsNormalized">
      <MemberSignature Language="C#" Value="public bool IsNormalized ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNormalized() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNormalized" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNormalized () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNormalized();" />
      <MemberSignature Language="F#" Value="member this.IsNormalized : unit -&gt; bool" Usage="string.IsNormalized " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2039">이 문자열의 형식이 유니코드 정규화 형식 C인지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2039">Indicates whether this string is in Unicode normalization form C.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2040">이 문자열의 형식이 정규화 형식 C이면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2040">
              <see langword="true" /> if this string is in normalization form C; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2041">일부 유니코드 문자는 해당 집합 조합으로 구성 된 여러 이진 표현 및/또는 복합 유니코드 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2041">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="3723c-2042">단일 문자에 대 한 여러 표현이 검색, 정렬, 일치 및 기타 작업을 복잡 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2042">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>  
  
 <span data-ttu-id="3723c-2043">표준 유니코드 문자의 해당 이진 표현을 제공 하는 경우 하나의 이진 표현을 반환 하는 정규화 라고 하는 프로세스를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2043">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="3723c-2044">다른 규칙을 따르는 정규화 형식 이라는 다양 한 알고리즘을 사용 하 여 정규화를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2044">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="3723c-2045">.NET Framework는 현재 정규화 형식 C, D, KC 및 KD를 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2045">The .NET Framework currently supports normalization forms C, D, KC, and KD.</span></span>  
  
 <span data-ttu-id="3723c-2046">지원 되는 유니코드 정규화 형식에 대 한 참조 <xref:System.Text.NormalizationForm?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2046">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2047">다음 예제에서는 다양 한 정규화 형식으로 문자열을 성공적으로 정규화 되는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2047">The following example determines whether a string is successfully normalized to various normalization forms.</span></span>  
  
 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-2048">현재 인스턴스에 잘못된 유니코드 문자가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2048">The current instance contains invalid Unicode characters.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2049">
            <para>합니다 <see cref="Overload:System.String.IsNormalized" /> 메서드가 반환 되는 <see langword="false" /> 문자열의 첫 번째 정규화 되지 않은 문자가 발견 되는 즉시 합니다. 따라서 문자열 뒤에 잘못 된 유니코드 문자를 정규화 되지 않은 문자를 포함 하는 경우는 <see cref="Overload:System.String.Normalize" /> 메서드는 throw를 <see cref="T:System.ArgumentException" /> 있지만 <see cref="Overload:System.String.IsNormalized" /> 반환 <see langword="false" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2049">
              <para>The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string. Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.Normalize" />
      </Docs>
    </Member>
    <Member MemberName="IsNormalized">
      <MemberSignature Language="C#" Value="public bool IsNormalized (System.Text.NormalizationForm normalizationForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNormalized(valuetype System.Text.NormalizationForm normalizationForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNormalized(System.Text.NormalizationForm)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNormalized(System::Text::NormalizationForm normalizationForm);" />
      <MemberSignature Language="F#" Value="member this.IsNormalized : System.Text.NormalizationForm -&gt; bool" Usage="string.IsNormalized normalizationForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizationForm" Type="System.Text.NormalizationForm" />
      </Parameters>
      <Docs>
        <param name="normalizationForm">
          <span data-ttu-id="3723c-2050">유니코드 정규화 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2050">A Unicode normalization form.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2051">이 문자열의 형식이 지정한 유니코드 정규화 형식인지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2051">Indicates whether this string is in the specified Unicode normalization form.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2052">이 문자열의 형식이 <see langword="true" /> 매개 변수로 지정된 정규화 형식이면 <paramref name="normalizationForm" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2052">
              <see langword="true" /> if this string is in the normalization form specified by the <paramref name="normalizationForm" /> parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2053">일부 유니코드 문자는 해당 집합 조합으로 구성 된 여러 이진 표현 및/또는 복합 유니코드 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2053">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="3723c-2054">단일 문자에 대 한 여러 표현이 검색, 정렬, 일치 및 기타 작업을 복잡 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2054">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>  
  
 <span data-ttu-id="3723c-2055">표준 유니코드 문자의 해당 이진 표현을 제공 하는 경우 하나의 이진 표현을 반환 하는 정규화 라고 하는 프로세스를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2055">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="3723c-2056">다른 규칙을 따르는 정규화 형식 이라는 다양 한 알고리즘을 사용 하 여 정규화를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2056">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="3723c-2057">.NET Framework는 현재 정규화 형식 C, D, KC 및 KD를 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2057">The .NET Framework currently supports normalization forms C, D, KC, and KD.</span></span>  
  
 <span data-ttu-id="3723c-2058">지원 되는 유니코드 정규화 형식에 대 한 참조 <xref:System.Text.NormalizationForm?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2058">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2059">다음 예제는 <xref:System.String.IsNormalized%2A> 고 <xref:System.String.Normalize%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2059">The following example demonstrates the <xref:System.String.IsNormalized%2A> and <xref:System.String.Normalize%2A> methods.</span></span>  
  
 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-2060">현재 인스턴스에 잘못된 유니코드 문자가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2060">The current instance contains invalid Unicode characters.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2061">
            <para>합니다 <see cref="Overload:System.String.IsNormalized" /> 메서드가 반환 되는 <see langword="false" /> 문자열의 첫 번째 정규화 되지 않은 문자가 발견 되는 즉시 합니다. 따라서 문자열 뒤에 잘못 된 유니코드 문자를 정규화 되지 않은 문자를 포함 하는 경우는 <see cref="Overload:System.String.Normalize" /> 메서드는 throw를 <see cref="T:System.ArgumentException" /> 있지만 <see cref="Overload:System.String.IsNormalized" /> 반환 <see langword="false" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2061">
              <para>The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string. Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.Normalize" />
      </Docs>
    </Member>
    <Member MemberName="IsNullOrEmpty">
      <MemberSignature Language="C#" Value="public static bool IsNullOrEmpty (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullOrEmpty(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNullOrEmpty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNullOrEmpty (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNullOrEmpty(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member IsNullOrEmpty : string -&gt; bool" Usage="System.string.IsNullOrEmpty value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2062">테스트할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2062">The string to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2063">지정된 문자열이 <see langword="null" />이거나 <see cref="F:System.String.Empty" /> 문자열인지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2063">Indicates whether the specified string is <see langword="null" /> or an <see cref="F:System.String.Empty" /> string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2064">
            <see langword="true" /> 매개 변수가 <paramref name="value" />이거나 빈 문자열("")이면 <see langword="null" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2064">
              <see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or an empty string (""); otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2065"><xref:System.String.IsNullOrEmpty%2A> 동시에 테스트할 수 있는 편리한 메서드입니다 여부를 <xref:System.String> 됩니다 `null` 여부나 해당 값이 <xref:System.String.Empty>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2065"><xref:System.String.IsNullOrEmpty%2A> is a convenience method that enables you to simultaneously test whether a <xref:System.String> is `null` or its value is <xref:System.String.Empty>.</span></span> <span data-ttu-id="3723c-2066">다음 코드는 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2066">It is equivalent to the following code:</span></span>  
  
 [!code-cpp[System.String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/isnullorempty1.cpp#1)]
 [!code-csharp[System.String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/isnullorempty1.cs#1)]
 [!code-vb[System.String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/isnullorempty1.vb#1)]  
  
 <span data-ttu-id="3723c-2067">사용할 수는 <xref:System.String.IsNullOrWhiteSpace%2A> 문자열 인지 여부를 테스트 하는 방법 `null`, 해당 값은 <xref:System.String.Empty?displayProperty=nameWithType>, 공백 문자 으로만 구성 또는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2067">You can use the <xref:System.String.IsNullOrWhiteSpace%2A> method to test whether a string is `null`, its value is <xref:System.String.Empty?displayProperty=nameWithType>,  or it consists only of white-space characters.</span></span>  
  
## <a name="what-is-a-null-string"></a><span data-ttu-id="3723c-2068">Null 문자열 이란?</span><span class="sxs-lookup"><span data-stu-id="3723c-2068">What is a null string?</span></span>  
 <span data-ttu-id="3723c-2069">문자열이 `null` 아니면 값이 명시적으로 할당 된 값 (c + + 및 Visual Basic) 할당 되지 않은 경우 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2069">A string is `null` if it has not been assigned a value (in C++ and Visual Basic) or if has explicitly been assigned a value of `null`.</span></span> <span data-ttu-id="3723c-2070">하지만 합니다 [복합 서식 지정](~/docs/standard/base-types/composite-formatting.md) 기능 해당 멤버를 throw 하는 경우 하나를 호출 하는 동안, 다음 예제와 같이 null 문자열을 정상적으로 처리할 수는 <xref:System.NullReferenceException>.</span><span class="sxs-lookup"><span data-stu-id="3723c-2070">Although the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature can gracefully handle a null string, as the following example shows, attempting to call one if its members throws a <xref:System.NullReferenceException>.</span></span>  
  
 [!code-cpp[System.String.IsNullOrEmpty#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#2)]
 [!code-csharp[System.String.IsNullOrEmpty#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#2)]
 [!code-vb[System.String.IsNullOrEmpty#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#2)]  
  
## <a name="what-is-an-empty-string"></a><span data-ttu-id="3723c-2071">빈 문자열 이란?</span><span class="sxs-lookup"><span data-stu-id="3723c-2071">What is an empty string?</span></span>  
 <span data-ttu-id="3723c-2072">문자열은 빈 문자열을 명시적으로 할당 하는 경우 빈 ("") 또는 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2072">A string is empty if it  is explicitly assigned an empty string ("") or <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-2073">빈 문자열에는 <xref:System.String.Length%2A> 0입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2073">An empty string has a <xref:System.String.Length%2A> of 0.</span></span>  <span data-ttu-id="3723c-2074">다음 예제에서는 빈 문자열을 만들고 해당 값 및 해당 길이 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2074">The following example creates an empty string and displays its value and its length.</span></span>  
  
 [!code-cpp[System.String.IsNullOrEmpty#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#3)]
 [!code-csharp[System.String.IsNullOrEmpty#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#3)]
 [!code-vb[System.String.IsNullOrEmpty#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2075">다음 예제에서는 세 개의 문자열을 검사 하 고 각 문자열 값, 빈 문자열이 면 중인지 여부를 결정 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2075">The following example examines three strings and determines whether each string has a value, is an empty string, or is `null`.</span></span>  
  
 [!code-cpp[String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.isNullOrEmpty/CPP/inoe.cpp#1)]
 [!code-csharp[String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.isNullOrEmpty/CS/inoe.cs#1)]
 [!code-vb[String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.isNullOrEmpty/VB/inoe.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrWhiteSpace(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsNullOrWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsNullOrWhiteSpace (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullOrWhiteSpace(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNullOrWhiteSpace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNullOrWhiteSpace (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNullOrWhiteSpace(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member IsNullOrWhiteSpace : string -&gt; bool" Usage="System.string.IsNullOrWhiteSpace value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2076">테스트할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2076">The string to test.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2077">지정된 문자열이 <see langword="null" />이거나 비어 있거나 공백 문자로만 구성되어 있는지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2077">Indicates whether a specified string is <see langword="null" />, empty, or consists only of white-space characters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2078">
            <see langword="true" /> 매개 변수가 <paramref name="value" /> 또는 <see langword="null" />이거나, <see cref="F:System.String.Empty" />가 모두 공백 문자로 구성되어 있으면 <paramref name="value" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2078">
              <see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, or if <paramref name="value" /> consists exclusively of white-space characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2079"><xref:System.String.IsNullOrWhiteSpace%2A> 메서드는 뛰어난 성능을 제공 한다는 점을 제외 하면 다음 코드는 비슷합니다는 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2079"><xref:System.String.IsNullOrWhiteSpace%2A> is a convenience method that is similar to the following  code, except that it offers superior performance:</span></span>  
  
 [!code-csharp[System.String.IsNullOrWhitespace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace.cs#2)]
 [!code-vb[System.String.IsNullOrWhitespace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace.vb#2)]  
  
 <span data-ttu-id="3723c-2080">공백 문자는 유니코드 표준에서 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2080">White-space characters are defined by the Unicode standard.</span></span> <span data-ttu-id="3723c-2081">합니다 <xref:System.String.IsNullOrWhiteSpace%2A> 메서드 값을 반환 하는 모든 문자를 해석 `true` 에 전달 될 때를 <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> 공백 문자로 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2081">The <xref:System.String.IsNullOrWhiteSpace%2A> method interprets any character that returns a value of `true` when it is passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method as a white-space character.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2082">다음 예제에서는 문자열 배열에 연결을 만들고 다음 배열의 각 요소를 전달 합니다 <xref:System.String.IsNullOrWhiteSpace%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2082">The following example creates a string array, and then passes each element of the array to the <xref:System.String.IsNullOrWhiteSpace%2A> method.</span></span>  
  
 [!code-csharp[System.String.IsNullOrWhiteSpace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace1.cs#1)]
 [!code-vb[System.String.IsNullOrWhiteSpace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrEmpty(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2083">각 요소 또는 멤버 사이에 지정된 구분 기호를 사용하여 지정된 배열 요소나 컬렉션 멤버를 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2083">Concatenates the elements of a specified array or the members of a collection, using the specified separator between each element or member.</span>
          </span>
        </summary>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, ParamArray values As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : char * obj[] -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, params string[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, ParamArray value As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, ... cli::array &lt;System::String ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="static member Join : char * string[] -&gt; string" Usage="System.string.Join (separator, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="value" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, System.Collections.Generic.IEnumerable&lt;string&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, class System.Collections.Generic.IEnumerable`1&lt;string&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, values As IEnumerable(Of String)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : string * seq&lt;string&gt; -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="separator">
          <span data-ttu-id="3723c-2084">구분 기호로 사용할 문자열입니다. <c>separator</c>는 <c>values</c>에 요소가 둘 이상 있는 경우에만 반환 문자열에 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2084">The string to use as a separator.<c>separator</c> is included in the returned string only if <c>values</c> has more than one element.</span>
          </span>
        </param>
        <param name="values">
          <span data-ttu-id="3723c-2085">연결할 문자열을 포함하는 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2085">A collection that contains the strings to concatenate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2086">각 멤버 사이에 지정된 구분 기호를 사용하여 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 형식의 생성된 <see cref="T:System.String" /> 컬렉션의 멤버를 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2086">Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />, using the specified separator between each member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2087">
            <paramref name="values" /> 문자열로 구분된 <paramref name="separator" />의 멤버로 구성된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2087">A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span>
          </span>
          <span data-ttu-id="3723c-2088">
            <paramref name="values" />에 멤버가 없는 경우 이 메서드는 <see cref="F:System.String.Empty" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2088">If <paramref name="values" /> has no members, the method returns <see cref="F:System.String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2089">하는 경우 `separator` 됩니다 `null`, 빈 문자열 (<xref:System.String.Empty?displayProperty=nameWithType>) 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2089">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="3723c-2090">하는 경우 모든 소속 `values` 는 `null`, 빈 문자열을 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2090">If any member of `values` is `null`, an empty string is used instead.</span></span>  
  
 <span data-ttu-id="3723c-2091"><xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> 각 요소에 연결할 수 있는 메서드는 `IEnumerable(Of String)` 문자열 배열에 첫 번째 요소를 변환 하지 않고 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2091"><xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array.</span></span> <span data-ttu-id="3723c-2092">LINQ (Language-Integrated Query) 쿼리 식을 사용 하 여 특히 유용합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2092">It is particularly useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="3723c-2093">다음 예제에서는 전달 된 `List(Of String)` 알파벳 문자를 특정 문자 (예에서는 "M") 보다 크거나 같은 선택 하는 람다 식으로 대 / 소문자 구분 문자를 포함 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2093">The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is "M").</span></span> <span data-ttu-id="3723c-2094">`IEnumerable(Of String)` 에서 반환 된 컬렉션을 <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> 메서드에 전달 됩니다는 <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> 단일 문자열로 결과 표시 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="3723c-2094">The `IEnumerable(Of String)` collection returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> method is passed to the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.</span></span>  
  
 [!code-csharp[System.String.Join#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join4.cs#4)]
 [!code-vb[System.String.Join#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join4.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2095">다음 예에서는 소수 100 보다 작거나를 계산 하는 에라토스테네스의 체 알고리즘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2095">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="3723c-2096">결과를 할당 한 <xref:System.Collections.Generic.List%601> 형식의 개체 <xref:System.String>에 전달 되는 <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2096">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type <xref:System.String>, which it then passes to the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.</span></span>  
  
 [!code-csharp[System.String.Join#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join3.cs#3)]
 [!code-vb[System.String.Join#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2097">
            <paramref name="values" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2097">
              <paramref name="values" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, ParamArray values As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : string * obj[] -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator">
          <span data-ttu-id="3723c-2098">구분 기호로 사용할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2098">The string to use as a separator.</span>
          </span>
          <span data-ttu-id="3723c-2099">
            <c>values</c>에 둘 이상의 요소가 있는 경우에만 <c>separator</c>가 반환된 문자열에 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2099">
              <c>separator</c> is included in the returned string only if <c>values</c> has more than one element.</span>
          </span>
        </param>
        <param name="values">
          <span data-ttu-id="3723c-2100">연결할 요소가 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2100">An array that contains the elements to concatenate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2101">각 요소 사이에 지정된 구분 기호를 사용하여 개체 배열의 요소를 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2101">Concatenates the elements of an object array, using the specified separator between each element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2102">
            <paramref name="values" /> 문자열로 구분된 <paramref name="separator" />의 요소로 구성된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2102">A string that consists of the elements of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span>
          </span>
          <span data-ttu-id="3723c-2103">
            <paramref name="values" />가 빈 배열인 경우 이 메서드는 <see cref="F:System.String.Empty" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2103">If <paramref name="values" /> is an empty array, the method returns <see cref="F:System.String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2104">경우 `separator` 은 `null` 이거나 모든 요소의 `values` 첫 번째 요소는 이외의 `null`, 빈 문자열 (<xref:System.String.Empty?displayProperty=nameWithType>) 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2104">If `separator` is `null` or if any element of `values` other than the first element is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="3723c-2105">경우 호출자에 게 섹션에 대 한 참고를 참조 하세요. 첫 번째 요소 `values` 는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2105">See the Notes for Callers section if the first element of `values` is `null`.</span></span>  
  
 <span data-ttu-id="3723c-2106"><xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> 문자열에 해당 요소를 명시적으로 변환 하지 않고 개체 배열의 각 요소를 연결할 수 있는 편리한 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2106"><xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings.</span></span> <span data-ttu-id="3723c-2107">배열의 각 개체의 문자열 표현을 해당 개체를 호출 하 여 파생 된 `ToString` 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2107">The string representation of each object in the array is derived by calling that object's `ToString` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2108">다음 예에서는 소수 100 보다 작거나를 계산 하는 에라토스테네스의 체 알고리즘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2108">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="3723c-2109">에 전달 되는 정수 배열에 결과 할당 합니다 <xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2109">It assigns the result to a integer array, which it then passes to the <xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> method.</span></span>  
  
 [!code-csharp[System.String.Join#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join1.cs#1)]
 [!code-vb[System.String.Join#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2110">
            <paramref name="values" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2110">
              <paramref name="values" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2111">
            <para>경우 첫 번째 요소 <paramref name="values" /> 됩니다 <see langword="null" />의 <see cref="M:System.String.Join(System.String,System.Object[])" /> 메서드의 요소를 연결 하지 않습니다 <paramref name="values" /> 대신 반환 하지만 <see cref="F:System.String.Empty" />. 다양 한이 문제에 대 한 해결 방법 사용할 수 있습니다. 값을 할당 하는 방법이 가장 쉬운 <see cref="F:System.String.Empty" /> 배열의 첫 번째 요소를 다음 예제와 같이 보여 줍니다.  [! code-csharp[System.String.Join#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/joinfix1.cs#6)] [! code-vb[System.String.Join#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/joinfix1.vb#6)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2111">
              <para>If the first element of <paramref name="values" /> is <see langword="null" />, the <see cref="M:System.String.Join(System.String,System.Object[])" /> method does not concatenate the elements in <paramref name="values" /> but instead returns <see cref="F:System.String.Empty" />. A number of workarounds for this issue are available. The easiest is to assign a value of <see cref="F:System.String.Empty" /> to the first element of the array, as the following example shows.  [!code-csharp[System.String.Join#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/joinfix1.cs#6)] [!code-vb[System.String.Join#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/joinfix1.vb#6)]</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, params string[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, ParamArray value As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, ... cli::array &lt;System::String ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="static member Join : string * string[] -&gt; string" Usage="System.string.Join (separator, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="value" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator">
          <span data-ttu-id="3723c-2112">구분 기호로 사용할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2112">The string to use as a separator.</span>
          </span>
          <span data-ttu-id="3723c-2113">
            <c>value</c>에 둘 이상의 요소가 있는 경우에만 <c>separator</c>가 반환된 문자열에 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2113">
              <c>separator</c> is included in the returned string only if <c>value</c> has more than one element.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="3723c-2114">연결할 요소가 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2114">An array that contains the elements to concatenate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2115">각 요소 사이에 지정된 구분 기호를 사용하여 문자열 배열의 모든 요소를 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2115">Concatenates all the elements of a string array, using the specified separator between each element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2116">
            <paramref name="value" /> 문자열로 구분된 <paramref name="separator" />의 요소로 구성된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2116">A string that consists of the elements in <paramref name="value" /> delimited by the <paramref name="separator" /> string.</span>
          </span>
          <span data-ttu-id="3723c-2117">
            <paramref name="value" />가 빈 배열인 경우 이 메서드는 <see cref="F:System.String.Empty" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2117">If <paramref name="value" /> is an empty array, the method returns <see cref="F:System.String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2118">예를 들어 경우 `separator` 는 "," 요소 `value` 은 "apple", "주황색", "grape" 및 "pear" `Join(separator, value)` "apple, orange, grape, pear"를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2118">For example, if `separator` is ", " and the elements of `value` are "apple", "orange", "grape", and "pear", `Join(separator, value)` returns "apple, orange, grape, pear".</span></span>  
  
 <span data-ttu-id="3723c-2119">하는 경우 `separator` 됩니다 `null`, 빈 문자열 (<xref:System.String.Empty?displayProperty=nameWithType>) 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2119">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="3723c-2120">경우에 있는 모든 요소 `value` 는 `null`, 빈 문자열을 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2120">If any element in `value` is `null`, an empty string is used instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2121">다음 예제는 <xref:System.String.Join%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2121">The following example demonstrates the <xref:System.String.Join%2A> method.</span></span>  
  
 [!code-cpp[stringjoin#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringjoin/CPP/stringjoin.cpp#1)]
 [!code-csharp[stringjoin#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringjoin/CS/stringjoin.cs#1)]
 [!code-vb[stringjoin#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringjoin/VB/stringjoin.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2122">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2122">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.Concat(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, string[] value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, string[] value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.String[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, value As String(), startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, cli::array &lt;System::String ^&gt; ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="static member Join : char * string[] * int * int -&gt; string" Usage="System.string.Join (separator, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="value" Type="System.String[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="value">To be added.</param>
        <param name="startIndex">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, string[] value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, string[] value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, value As String(), startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, cli::array &lt;System::String ^&gt; ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="static member Join : string * string[] * int * int -&gt; string" Usage="System.string.Join (separator, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="value" Type="System.String[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="separator">
          <span data-ttu-id="3723c-2123">구분 기호로 사용할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2123">The string to use as a separator.</span>
          </span>
          <span data-ttu-id="3723c-2124">
            <c>value</c>에 둘 이상의 요소가 있는 경우에만 <c>separator</c>가 반환된 문자열에 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2124">
              <c>separator</c> is included in the returned string only if <c>value</c> has more than one element.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="3723c-2125">연결할 요소가 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2125">An array that contains the elements to concatenate.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-2126">사용할 <c>value</c>의 첫 번째 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2126">The first element in <c>value</c> to use.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-2127">
            <c>value</c> 중에서 사용할 요소의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2127">The number of elements of <c>value</c> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2128">각 요소 사이에 지정된 구분 기호를 사용하여 문자열 배열의 지정된 요소를 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2128">Concatenates the specified elements of a string array, using the specified separator between each element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2129">
            <paramref name="value" /> 문자열로 구분된 <paramref name="separator" />의 문자열로 구성된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2129">A string that consists of the strings in <paramref name="value" /> delimited by the <paramref name="separator" /> string.</span>
          </span>
          <span data-ttu-id="3723c-2130">-또는-  <paramref name="count" />가 0이거나, <paramref name="value" />에 요소가 없거나, <paramref name="separator" /> 및 <paramref name="value" />의 모든 요소가 <see cref="F:System.String.Empty" />인 경우 <see cref="F:System.String.Empty" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2130">-or-  <see cref="F:System.String.Empty" /> if <paramref name="count" /> is zero, <paramref name="value" /> has no elements, or <paramref name="separator" /> and all the elements of <paramref name="value" /> are <see cref="F:System.String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2131">예를 들어 경우 `separator` 는 "," 요소 `value` 은 "apple", "주황색", "grape" 및 "pear" `Join(separator, value, 1, 2)` 반환 "주황색, grape"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2131">For example, if `separator` is ", " and the elements of `value` are "apple", "orange", "grape", and "pear", `Join(separator, value, 1, 2)` returns "orange, grape".</span></span>  
  
 <span data-ttu-id="3723c-2132">하는 경우 `separator` 됩니다 `null`, 빈 문자열 (<xref:System.String.Empty?displayProperty=nameWithType>) 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2132">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="3723c-2133">경우에 있는 모든 요소 `value` 는 `null`, 빈 문자열을 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2133">If any element in `value` is `null`, an empty string is used instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2134">다음 예제에서는 과일 이름의 배열에서 두 요소를 연결합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2134">The following example concatenates two elements from an array of names of fruit.</span></span>  
  
 [!code-cpp[string.join2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.join2/CPP/join2.cpp#1)]
 [!code-csharp[string.join2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.join2/CS/join2.cs#1)]
 [!code-vb[string.join2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.join2/VB/join2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2135">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2135">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2136">
            <paramref name="startIndex" /> 또는 <paramref name="count" />가 0 미만입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2136">
              <paramref name="startIndex" /> or <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3723c-2137">-또는-  <paramref name="startIndex" /> + <paramref name="count" />가 <paramref name="value" />의 요소 수보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2137">-or-  <paramref name="startIndex" /> plus <paramref name="count" /> is greater than the number of elements in <paramref name="value" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="3723c-2138">메모리가 부족합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2138">Out of memory.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Join&lt;T&gt; (char separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join&lt;T&gt;(char separator, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join(Of T) (separator As Char, values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Join(char separator, System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : char * seq&lt;'T&gt; -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="separator">To be added.</param>
        <param name="values">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Join&lt;T&gt; (string separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join&lt;T&gt;(string separator, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join(Of T) (separator As String, values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Join(System::String ^ separator, System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : string * seq&lt;'T&gt; -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="3723c-2139">멤버의 형식을 <c>값</c>합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2139">The type of the members of <c>values</c>.</span>
          </span>
        </typeparam>
        <param name="separator">
          <span data-ttu-id="3723c-2140">구분 기호로 사용할 문자열입니다. <c>separator</c>는 <c>values</c>에 요소가 둘 이상 있는 경우에만 반환 문자열에 포함됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2140">The string to use as a separator.<c>separator</c> is included in the returned string only if <c>values</c> has more than one element.</span>
          </span>
        </param>
        <param name="values">
          <span data-ttu-id="3723c-2141">연결할 개체를 포함하는 컬렉션입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2141">A collection that contains the objects to concatenate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2142">각 멤버 사이에 지정된 구분 기호를 사용하여 컬렉션의 멤버를 연결합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2142">Concatenates the members of a collection, using the specified separator between each member.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2143">
            <paramref name="values" /> 문자열로 구분된 <paramref name="separator" />의 멤버로 구성된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2143">A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span>
          </span>
          <span data-ttu-id="3723c-2144">
            <paramref name="values" />에 멤버가 없는 경우 이 메서드는 <see cref="F:System.String.Empty" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2144">If <paramref name="values" /> has no members, the method returns <see cref="F:System.String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2145">하는 경우 `separator` 됩니다 `null`, 빈 문자열 (<xref:System.String.Empty?displayProperty=nameWithType>) 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2145">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="3723c-2146">하는 경우 모든 소속 `values` 는 `null`, 빈 문자열을 대신 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2146">If any member of `values` is `null`, an empty string is used instead.</span></span>  
  
 <span data-ttu-id="3723c-2147"><xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> 각 멤버를 연결할 수 있는 메서드는 <xref:System.Collections.Generic.IEnumerable%601> 첫 번째 요소를 문자열로 변환 하지 않고 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2147"><xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each member of an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting them to strings.</span></span> <span data-ttu-id="3723c-2148">각 개체의 문자열 표현 합니다 <xref:System.Collections.Generic.IEnumerable%601> 컬렉션 개체를 호출 하 여 파생 된 `ToString` 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2148">The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.</span></span>  
  
 <span data-ttu-id="3723c-2149">이 메서드는 특정 LINQ (Language-Integrated Query) 쿼리 식을 사용 하 여 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2149">This method is particular useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="3723c-2150">예를 들어 다음 코드는 매우 간단한 정의 `Animal` animal과 속한 주문의 이름을 포함 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2150">For example, the following code defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs.</span></span> <span data-ttu-id="3723c-2151">그런 다음 정의 <xref:System.Collections.Generic.List%601> 의 번호가 포함 된 개체 `Animal` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2151">It then defines a <xref:System.Collections.Generic.List%601> object that contains a number of `Animal` objects.</span></span> <span data-ttu-id="3723c-2152"><xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> 추출에 확장 메서드를 호출 합니다 `Animal` 갖는 개체 `Order` 속성이 같으면 "바위"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2152">The <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> extension method is called to extract the `Animal` objects whose `Order` property equals "Rodent".</span></span> <span data-ttu-id="3723c-2153">결과에 전달 되는 <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2153">The result is passed to the <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method.</span></span>  
  
 [!code-csharp[System.String.Join#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join5.cs#5)]
 [!code-vb[System.String.Join#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join5.vb#5)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2154">다음 예에서는 소수 100 보다 작거나를 계산 하는 에라토스테네스의 체 알고리즘을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2154">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="3723c-2155">결과를 할당 한 <xref:System.Collections.Generic.List%601> 에 전달 되는 정수 형식의 개체는 <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2155">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type integer, which it then passes to the <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method.</span></span>  
  
 [!code-csharp[System.String.Join#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join2.cs#2)]
 [!code-vb[System.String.Join#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2156">
            <paramref name="values" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2156">
              <paramref name="values" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2157">이 인스턴스에서 마지막으로 발견되는 지정된 유니코드 문자 또는 문자열의 0부터 시작하는 인덱스 위치를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2157">Reports the zero-based index position of the last occurrence of a specified Unicode character or string within this instance.</span>
          </span>
          <span data-ttu-id="3723c-2158">이 인스턴스에 해당 문자나 문자열이 없으면 이 메서드는 -1을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2158">The method returns -1 if the character or string is not found in this instance.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : char -&gt; int" Usage="string.LastIndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2159">검색할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2159">The Unicode character to seek.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2160">이 인스턴스에서 마지막으로 발견되는 지정된 유니코드 문자의 0부터 시작하는 인덱스 위치를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2160">Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2161">해당 문자가 있으면 <paramref name="value" />의 인덱스 위치(0부터 시작)이고, 그러지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2161">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2162">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2162">Index numbering starts from zero.</span></span> <span data-ttu-id="3723c-2163">즉, 문자열의 첫 번째 문자 인덱스 0 이며 마지막에 <xref:System.String.Length%2A> -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2163">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="3723c-2164">이 메서드는이 인스턴스의 마지막 문자 위치에 있는 검색을 시작 하 고 될 때까지 시작 부분을 향해 뒤로 `value` 가 찾거나 첫 번째 문자 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2164">This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="3723c-2165">검색은 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2165">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="3723c-2166">이 메서드는 유니코드 스칼라 값이 같은 서 수 (문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2166">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="3723c-2167">문화권 구분 검색을 수행 하려면 사용 합니다 <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> 메서드, 여기서는 미리 구성 된 문자를 나타내는 합자 "→"와 같은 (U + 00 6), 유니코드 스칼라 값 간주 될 수 있습니다 문자 구성 요소에서의 모든 항목에는 "AE" 등 시퀀스를 수정 (u+0041, U + 0045) 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2167">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2168">다음 예제에서는 정의 `ExtractFilename` 메서드를 사용 하는 <xref:System.String.LastIndexOf%28System.Char%29> 문자열의 파일 이름을 추출 하려면 메서드를 문자열에서 마지막 디렉터리 구분 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2168">The following example defines an `ExtractFilename` method that uses the <xref:System.String.LastIndexOf%28System.Char%29> method to find the last directory separator character in a string and to extract the string's file name.</span></span> <span data-ttu-id="3723c-2169">파일이 존재 하는 경우 메서드는 해당 경로 없이 파일 이름만 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2169">If the file exists, the method returns the file name without its path.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/LastIndexOf_Example.cs#1)]
 [!code-vb[System.String.LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/LastIndexOf_Example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string -&gt; int" Usage="string.LastIndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2170">검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2170">The string to seek.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2171">이 인스턴스에서 마지막으로 발견되는 지정된 문자열의 0부터 시작하는 인덱스 위치를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2171">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2172">해당 문자열이 있으면 <paramref name="value" />의 0부터 시작하는 인덱스 위치이고, 그러지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2172">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not.</span>
          </span>
          <span data-ttu-id="3723c-2173">
            <paramref name="value" />가 <see cref="F:System.String.Empty" />이면 이 인스턴스의 마지막 인덱스 위치를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2173">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2174">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2174">Index numbering starts from zero.</span></span> <span data-ttu-id="3723c-2175">즉, 문자열의 첫 번째 문자 인덱스 0 이며 마지막에 <xref:System.String.Length%2A> -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2175">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="3723c-2176">검색이 인스턴스의 마지막 문자 위치에서 시작 하 고 될 때까지 시작 부분을 향해 뒤로 `value` 가 찾거나 첫 번째 문자 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2176">The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span>  
  
 <span data-ttu-id="3723c-2177">이 메서드는 현재 문화권을 사용 하는 단어 (대/소문자 구분 및 문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2177">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>  
  
 <span data-ttu-id="3723c-2178">문자 집합에는 무시할 수 있는 문자가 포함되며, 이들 문자는 언어 또는 문화권 구분 비교를 수행하는 경우 고려되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2178">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="3723c-2179">문화권 구분 검색에서는 `value`에 무시할 수 있는 문자가 포함된 경우 결과는 해당 문자가 제거된 대상을 검색하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2179">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="3723c-2180">하는 경우 `value` 하나 이상의 무시할 수 있는 문자로 구성 되어 합니다 <xref:System.String.LastIndexOf%28System.String%29> 메서드는 항상 반환 <xref:System.String.Length%2A?displayProperty=nameWithType> – 현재 인스턴스의 마지막 인덱스 위치를 나타내는 1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2180">If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%29> method always returns <xref:System.String.Length%2A?displayProperty=nameWithType> – 1, which represents the last index position in the current instance.</span></span> <span data-ttu-id="3723c-2181">다음 예제에서는 <xref:System.String.LastIndexOf%28System.String%29> 메서드는 두 문자열의 세 가지 부분 문자열 (하이픈이 (U + 00AD), "n" 뒤에 하이픈이 및 하이픈이 뒤에 "m")을 찾는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2181">In the following example, the <xref:System.String.LastIndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="3723c-2182">문자열 중 하나에만 사용자 지정 하이픈이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2182">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="3723c-2183">예제를 실행 합니다 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 이상 버전을 각각의 경우에서 사용자 지정 하이픈은 무시할 수 있는 문자 때문에 결과 동일한 사용자 지정 하이픈의 포함 되지 않았던 것 처럼 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2183">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`.</span></span> <span data-ttu-id="3723c-2184">하이픈이을 검색할 때 메서드 6 및 5를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2184">When searching for a soft hyphen only, the method returns 6 and 5.</span></span> <span data-ttu-id="3723c-2185">이러한 값의 두 문자열의 마지막 문자 인덱스에 해당합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2185">These values correspond to the index of the last character in the two strings.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof21.cs#21)]
 [!code-vb[System.String.LastIndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof21.vb#21)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2186">다음 예제에서는 태그 및 닫는 태그를 시작 하는 경우 문자열 및 문자열 끝에서 HTML 태그를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2186">The following example removes opening and closing HTML tags from a string if the tags begin and end the string.</span></span> <span data-ttu-id="3723c-2187">문자열에 닫는 끝나는 경우 괄호 문자 (">")를 사용 하 여는 <xref:System.String.LastIndexOf%2A> 끝 태그의 시작 부분을 찾는 방법.</span><span class="sxs-lookup"><span data-stu-id="3723c-2187">If a string ends with a closing bracket character (">"), the example uses the <xref:System.String.LastIndexOf%2A> method to locate the start of the end tag.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof_example2.cs#2)]
 [!code-vb[System.String.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof_example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2188">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2188">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2189">
            <para>에 설명 된 대로 [Strings](~/docs/standard/base-types/best-practices-strings.md) 사용에 대 한 모범 사례 권장 기본값을 대체 하 고 대신 매개 변수를 필요로 하는 메서드를 호출 하는 문자열 비교 메서드를 호출 하지 명시적으로 지정 합니다. 현재 문화권의 비교 규칙을 사용 하 여 문자열 인스턴스 내에서 부분 문자열의 마지막 인덱스를 찾으려고 호출을 <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> 값을 사용 하 여 메서드 오버 로드 <see cref="F:System.StringComparison.CurrentCulture" /> 에 대 한 해당 <paramref name="comparisonType" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2189">
              <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified. To find the last index of a substring within a string instance by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : char * int -&gt; int" Usage="string.LastIndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2190">검색할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2190">The Unicode character to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-2191">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2191">The starting position of the search.</span>
          </span>
          <span data-ttu-id="3723c-2192">
            <c>startIndex</c>에서 이 인스턴스의 시작 부분을 향해 검색이 진행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2192">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2193">이 인스턴스에서 마지막으로 발견되는 지정된 유니코드 문자의 0부터 시작하는 인덱스 위치를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2193">Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</span>
          </span>
          <span data-ttu-id="3723c-2194">지정된 문자 위치에서 시작하고 문자열의 시작 부분을 향해 뒤로 검색이 진행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2194">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2195">해당 문자가 있으면 <paramref name="value" />의 인덱스 위치(0부터 시작)이고, 해당 문자가 없거나 현재 인스턴스가 <see cref="F:System.String.Empty" />와 같으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2195">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2196">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2196">Index numbering starts from zero.</span></span> <span data-ttu-id="3723c-2197">즉, 문자열의 첫 번째 문자 인덱스 0 이며 마지막에 <xref:System.String.Length%2A> -1.가이 메서드 검색 시작 위치를 `startIndex` 문자이 인스턴스와 될 때까지 현재 인스턴스의 시작 부분을 향해 뒤로 위치 `value` 가 찾거나 첫 번째 문자 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2197">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning of the current instance until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="3723c-2198">예를 들어 있으면 `startIndex` 는 <xref:System.String.Length%2A> -1 메서드 시작 부분 문자열의 마지막 문자에서 모든 문자를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2198">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span> <span data-ttu-id="3723c-2199">검색은 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2199">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="3723c-2200">이 메서드는 유니코드 스칼라 값이 같은 서 수 (문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2200">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="3723c-2201">문화권 구분 검색을 수행 하려면 사용 합니다 <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> 메서드, 여기서는 미리 구성 된 문자를 나타내는 합자 "→"와 같은 (U + 00 6), 유니코드 스칼라 값 간주 될 수 있습니다 문자 구성 요소에서의 모든 항목에는 "AE" 등 시퀀스를 수정 (u+0041, U + 0045) 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2201">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2202">다음 예제에서는 문자열의 끝에서 작업 하는 문자열의 시작 문자열에서 문자의 모든 항목의 인덱스를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2202">The following example finds the index of all occurrences of a character in a string, working from the end of the string to the start of the string.</span></span>  
  
 [!code-cpp[string.lastindexof1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.lastindexof1/CPP/lastixof1.cpp#1)]
 [!code-csharp[string.lastindexof1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.lastindexof1/CS/lastixof1.cs#1)]
 [!code-vb[string.lastindexof1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.lastindexof1/VB/lastixof1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2203">현재 인스턴스가 <see cref="F:System.String.Empty" />와 같지 않고 <paramref name="startIndex" />가 0보다 작거나 이 인스턴스의 길이보다 크거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2203">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int -&gt; int" Usage="string.LastIndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2204">검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2204">The string to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-2205">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2205">The search starting position.</span>
          </span>
          <span data-ttu-id="3723c-2206">
            <c>startIndex</c>에서 이 인스턴스의 시작 부분을 향해 검색이 진행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2206">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2207">이 인스턴스에서 마지막으로 발견되는 지정된 문자열의 0부터 시작하는 인덱스 위치를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2207">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span>
          </span>
          <span data-ttu-id="3723c-2208">지정된 문자 위치에서 시작하고 문자열의 시작 부분을 향해 뒤로 검색이 진행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2208">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2209">해당 문자열이 있으면 <paramref name="value" />의 인덱스 위치(0부터 시작)이고, 해당 문자열이 없거나 현재 인스턴스가 <see cref="F:System.String.Empty" />와 같으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2209">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span>
          </span>
          <span data-ttu-id="3723c-2210">
            <paramref name="value" />가 <see cref="F:System.String.Empty" />이면 반환 값은 <paramref name="startIndex" />와 이 인스턴스의 마지막 인덱스 위치 중 작은 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2210">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2211">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2211">Index numbering starts from zero.</span></span> <span data-ttu-id="3723c-2212">즉, 문자열의 첫 번째 문자 인덱스 0 이며 마지막에 <xref:System.String.Length%2A> -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2212">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="3723c-2213">검색이 시작 합니다 `startIndex` 문자 및 시작 될 때까지 뒤로이 인스턴스의 위치 `value` 가 찾거나 첫 번째 문자 위치.</span><span class="sxs-lookup"><span data-stu-id="3723c-2213">The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="3723c-2214">예를 들어 있으면 `startIndex` 는 <xref:System.String.Length%2A> -1 메서드 시작 부분 문자열의 마지막 문자에서 모든 문자를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2214">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span>  
  
 <span data-ttu-id="3723c-2215">이 메서드는 현재 문화권을 사용 하는 단어 (대/소문자 구분 및 문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2215">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>  
  
 <span data-ttu-id="3723c-2216">문자 집합에는 무시할 수 있는 문자가 포함되며, 이들 문자는 언어 또는 문화권 구분 비교를 수행하는 경우 고려되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2216">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="3723c-2217">문화권 구분 검색에서는 `value`에 무시할 수 있는 문자가 포함된 경우 결과는 해당 문자가 제거된 대상을 검색하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2217">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="3723c-2218">하는 경우 `value` 하나 이상의 무시할 수 있는 문자로 구성 되어 합니다 <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> 메서드는 항상 반환 `startIndex`, 검색을 시작할 문자 위치는입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2218">If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="3723c-2219">다음 예제에서는 <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> 메서드 (U + 00AD) 하이픈을 포함 하 고 앞 또는 마지막 "m" 문자열에 포함 하는 부분 문자열을 찾는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2219">In the following example, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final "m" in a string.</span></span> <span data-ttu-id="3723c-2220">예제를 실행 하는 경우는 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 하거나 검색 문자열에 사용자 지정 하이픈은 무시 되므로 나중에 substrin를 찾으려고 호출 하는 반면 문자열에서 "m"의 위치를 반환 하는 사용자 지정 하이픈 및 "m"으로 구성 된 부분 문자열을 찾으려면 메서드를 호출 사용자 지정 하이픈 및 "n"으로 구성 된 g "n"의 위치를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2220">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and "m" returns the position of the "m" in the string, whereas calling it to find a substring that consists of the soft hyphen and "n" returns the position of the "n".</span></span> <span data-ttu-id="3723c-2221">검색 문자열에만 사용자 지정 하이픈이 포함 하는 경우 메서드는 "m"의 값을 나타내는의 인덱스를 반환 하는 `startIndex`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2221">When the search string contains only the soft hyphen, the method returns the index of the "m", which represents the value of `startIndex`.</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof22.cs#22)]
 [!code-vb[System.String.LastIndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof22.vb#22)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2222">다음 예제에서는 대상 문자열에 대상 문자열의 끝에서 작업 하는 대상 문자열의 시작 부분 문자열의 모든 항목의 인덱스를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2222">The following example finds the index of all occurrences of a string in target string, working from the end of the target string to the start of the target string.</span></span>  
  
 [!code-cpp[string.lastindexof7#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOf7/CPP/lastixof7.cpp#1)]
 [!code-csharp[string.lastindexof7#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOf7/CS/lastixof7.cs#1)]
 [!code-vb[string.lastindexof7#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOf7/VB/lastixof7.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2223">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2223">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2224">현재 인스턴스가 <see cref="F:System.String.Empty" />와 같지 않고 <paramref name="startIndex" />가 0보다 작거나 현재 인스턴스의 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2224">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.</span>
          </span>
          <span data-ttu-id="3723c-2225">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />이고 <paramref name="startIndex" />가 -1보다 작거나 0보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2225">-or-  The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2226">
            <para>에 설명 된 대로 [Strings](~/docs/standard/base-types/best-practices-strings.md) 사용에 대 한 모범 사례 권장 기본값을 대체 하 고 대신 매개 변수를 필요로 하는 메서드를 호출 하는 문자열 비교 메서드를 호출 하지 명시적으로 지정 합니다. 현재 문화권의 비교 규칙을 사용 하 여 특정 문자 위치를 앞에 있는 부분 문자열의 인덱스를 찾으려고 호출을 <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> 값을 사용 하 여 메서드 오버 로드 <see cref="F:System.StringComparison.CurrentCulture" /> 에 대 한 해당 <paramref name="comparisonType" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2226">
              <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified. To find the index of a substring that precedes a particular character position by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * StringComparison -&gt; int" Usage="string.LastIndexOf (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2227">검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2227">The string to seek.</span>
          </span>
        </param>
        <param name="comparisonType">
          <span data-ttu-id="3723c-2228">검색 규칙을 지정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2228">One of the enumeration values that specifies the rules for the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2229">현재 <see cref="T:System.String" /> 개체에서 마지막으로 발견되는 지정된 문자열의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2229">Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object.</span>
          </span>
          <span data-ttu-id="3723c-2230">매개 변수는 지정된 문자열에 사용할 검색 유형을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2230">A parameter specifies the type of search to use for the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2231">해당 문자열이 있으면 <paramref name="value" /> 매개 변수의 0부터 시작하는 인덱스 위치이고, 그러지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2231">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not.</span>
          </span>
          <span data-ttu-id="3723c-2232">
            <paramref name="value" />가 <see cref="F:System.String.Empty" />이면 이 인스턴스의 마지막 인덱스 위치를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2232">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2233">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2233">Index numbering starts from zero.</span></span> <span data-ttu-id="3723c-2234">즉, 문자열의 첫 번째 문자 인덱스 0 이며 마지막에 <xref:System.String.Length%2A> -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2234">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="3723c-2235">합니다 `comparisonType` 매개 변수를 검색 하도록 지정 합니다 `value` 현재 또는 고정 문화권을 사용 하 고 대/소문자 구분 또는 대/소문자 구분 검색을 사용 하 여 단어 또는 서 수 비교 규칙을 사용 하 여 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2235">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
 <span data-ttu-id="3723c-2236">검색이 인스턴스의 마지막 문자 위치에서 시작 하 고 될 때까지 시작 부분을 향해 뒤로 `value` 가 찾거나 첫 번째 문자 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2236">The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2237">다음 exampledemonstrates 세 오버 로드 된 <xref:System.String.LastIndexOf%2A> 메서드를 다른 값을 사용 하 여 다른 문자열 내에 있는 문자열의 마지막 항목을 찾을 <xref:System.StringComparison> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2237">The following exampledemonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2238">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2238">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-2239">
            <paramref name="comparisonType" />은 유효한 <see cref="T:System.StringComparison" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2239">
              <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2240">
            <para>문자 집합에는 언어 또는 문화권 구분 비교를 수행 하는 경우 간주 되지 않는 문자는 무시할 수 있는 문자가 포함 됩니다. 문화권 구분 검색(즉, <paramref name="options" />이 <see cref="F:System.StringComparison.Ordinal" /> 또는 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />가 아닌 경우)에서는 <paramref name="value" />에 무시할 수 있는 문자가 포함된 경우 결과는 해당 문자가 제거된 대상을 검색하는 것과 같습니다. 하는 경우 <paramref name="value" /> 하나 이상의 무시할 수 있는 문자로 구성 되어 합니다 <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> 메서드는 항상 반환 <see cref="P:System.String.Length" /> – 현재 인스턴스의 마지막 인덱스 위치를 나타내는 1입니다.  다음 예제에서는 <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> 메서드는 두 문자열의 세 가지 부분 문자열 (하이픈이 (U + 00AD), "n" 뒤에 하이픈이 및 하이픈이 뒤에 "m")을 찾는 데 사용 됩니다. 문자열 중 하나에만 사용자 지정 하이픈이 포함되어 있습니다. 예제를 실행 하는 경우는 [! INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 나중에 사용자 지정 하이픈을 무시할 수 있는 문자 이기 때문에 문화권 구분 검색을 반환 하거나 검색 문자열에 사용자 지정 하이픈이 포함 되지 않은 경우 반환 된 값과 같아야 합니다. 그러나 서 수 검색을 성공적으로 사용자 지정 하이픈 한 문자열에서 찾아 보고 없는 것에서 두 번째 문자열입니다.  [! csharp 코드 [System.String.LastIndexOf#26] (~/samples/snippets/csharp/VS_Snippets_CLR_System/시스템입니다. String.LastIndexOf/cs/lastindexof26.cs#26)] [! vb 코드 [System.String.LastIndexOf#26] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/시스템입니다. String.LastIndexOf/vb/lastindexof26.vb#26)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2240">
              <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search (that is, if <paramref name="options" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method always returns <see cref="P:System.String.Length" /> – 1, which represents the last index position in the current instance.  In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings. Only one of the strings contains a soft hyphen. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string. An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.  [!code-csharp[System.String.LastIndexOf#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof26.cs#26)] [!code-vb[System.String.LastIndexOf#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof26.vb#26)]</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : char * int * int -&gt; int" Usage="string.LastIndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2241">검색할 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2241">The Unicode character to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-2242">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2242">The starting position of the search.</span>
          </span>
          <span data-ttu-id="3723c-2243">
            <c>startIndex</c>에서 이 인스턴스의 시작 부분을 향해 검색이 진행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2243">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-2244">검사할 문자 위치의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2244">The number of character positions to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2245">이 인스턴스의 부분 문자열에서 마지막으로 발견되는 지정된 유니코드 문자의 0부터 시작하는 인덱스 위치를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2245">Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance.</span>
          </span>
          <span data-ttu-id="3723c-2246">지정된 문자 위치에서 검색을 시작하여 지정된 수의 문자 위치에 대한 문자열의 시작 부분 쪽으로 뒤로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2246">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2247">해당 문자가 있으면 <paramref name="value" />의 인덱스 위치(0부터 시작)이고, 해당 문자가 없거나 현재 인스턴스가 <see cref="F:System.String.Empty" />와 같으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2247">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2248">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2248">Index numbering starts from zero.</span></span> <span data-ttu-id="3723c-2249">즉, 문자열의 첫 번째 문자 인덱스 0 이며 마지막에 <xref:System.String.Length%2A> -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2249">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="3723c-2250">이 메서드 검색을 시작 합니다 `startIndex` 문자 위치 및 될 때까지이 인스턴스의 시작 부분을 향해 뒤로 `value` 가 또는 `count` 문자 위치를 검토 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2250">This method begins searching at the `startIndex` character position and proceeds backward toward the beginning of this instance until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="3723c-2251">예를 들어 경우 `startIndex` 됩니다 <xref:System.String.Length%2A> -1 메서드 뒤로 검색 `count` 문자열의 마지막 문자에서는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2251">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span> <span data-ttu-id="3723c-2252">검색은 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2252">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="3723c-2253">이 메서드는 유니코드 스칼라 값은 동일한 서 수 (문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2253">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="3723c-2254">문화권 구분 검색을 수행 하려면 사용 합니다 <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> 메서드, 여기서는 미리 구성 된 문자를 나타내는 합자 "→"와 같은 (U + 00 6), 유니코드 스칼라 값 간주 될 수 있습니다 문자 구성 요소에서의 모든 항목에는 "AE" 등 시퀀스를 수정 (u+0041, U + 0045) 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2254">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2255">다음 예제에서는 부분 문자열의 끝에서 작업 하는 부분 문자열의 시작 부분 문자열에서 문자의 모든 항목의 인덱스를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2255">The following example finds the index of all occurrences of a character in a substring, working from the end of the substring to the start of the substring.</span></span>  
  
 [!code-cpp[string.lastindexof2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.lastindexof2/CPP/lastixof2.cpp#1)]
 [!code-csharp[string.lastindexof2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.lastindexof2/CS/lastixof2.cs#1)]
 [!code-vb[string.lastindexof2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.lastindexof2/VB/lastixof2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2256">현재 인스턴스가 <see cref="F:System.String.Empty" />와 같지 않고 <paramref name="startIndex" />가 0보다 작거나 이 인스턴스의 길이보다 크거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2256">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</span>
          </span>
          <span data-ttu-id="3723c-2257">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />와 같지 않고 <paramref name="startIndex" /> - <paramref name="count" /> + 1이 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2257">-or-  The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" /> + 1 is less than zero.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int * int -&gt; int" Usage="string.LastIndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2258">검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2258">The string to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-2259">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2259">The search starting position.</span>
          </span>
          <span data-ttu-id="3723c-2260">
            <c>startIndex</c>에서 이 인스턴스의 시작 부분을 향해 검색이 진행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2260">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-2261">검사할 문자 위치의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2261">The number of character positions to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2262">이 인스턴스에서 마지막으로 발견되는 지정된 문자열의 0부터 시작하는 인덱스 위치를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2262">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span>
          </span>
          <span data-ttu-id="3723c-2263">지정된 문자 위치에서 검색을 시작하여 지정된 수의 문자 위치에 대한 문자열의 시작 부분 쪽으로 뒤로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2263">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2264">해당 문자열이 있으면 <paramref name="value" />의 인덱스 위치(0부터 시작)이고, 해당 문자열이 없거나 현재 인스턴스가 <see cref="F:System.String.Empty" />와 같으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2264">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span>
          </span>
          <span data-ttu-id="3723c-2265">
            <paramref name="value" />가 <see cref="F:System.String.Empty" />이면 반환 값은 <paramref name="startIndex" />와 이 인스턴스의 마지막 인덱스 위치 중 작은 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2265">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2266">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2266">Index numbering starts from zero.</span></span> <span data-ttu-id="3723c-2267">즉, 문자열의 첫 번째 문자 인덱스 0 이며 마지막에 <xref:System.String.Length%2A> -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2267">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="3723c-2268">검색이 시작 합니다 `startIndex` 문자 및 시작 될 때까지 뒤로이 인스턴스의 위치 `value` 가 또는 `count` 문자 위치를 검토 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2268">The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="3723c-2269">예를 들어 경우 `startIndex` 됩니다 <xref:System.String.Length%2A> -1 메서드 뒤로 검색 `count` 문자열의 마지막 문자에서는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2269">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span>  
  
 <span data-ttu-id="3723c-2270">이 메서드는 현재 문화권을 사용 하는 단어 (대/소문자 구분 및 문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2270">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>  
  
 <span data-ttu-id="3723c-2271">문자 집합에는 무시할 수 있는 문자가 포함되며, 이들 문자는 언어 또는 문화권 구분 비교를 수행하는 경우 고려되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2271">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="3723c-2272">문화권 구분 검색에서는 `value`에 무시할 수 있는 문자가 포함된 경우 결과는 해당 문자가 제거된 대상을 검색하는 것과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2272">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="3723c-2273">하는 경우 `value` 하나 이상의 무시할 수 있는 문자로 구성 되어 합니다 <xref:System.String.LastIndexOf%2A> 메서드는 항상 반환 `startIndex`, 검색을 시작할 문자 위치는입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2273">If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%2A> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="3723c-2274">다음 예제에서는 <xref:System.String.LastIndexOf%2A> 메서드 두 문자열의 마지막 "m" 앞에 있는 두 문자에는 사용자 지정 하이픈 (U + 00AD)의 위치를 찾는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2274">In the following example, the <xref:System.String.LastIndexOf%2A> method is used to find the position of a soft hyphen (U+00AD) in the two characters that precede the final "m" of two strings.</span></span> <span data-ttu-id="3723c-2275">문자열 중 하나에만 필수 부분 문자열이 포함되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2275">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="3723c-2276">예제를 실행 하는 경우는 [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 이상, 두 경우 모두 사용자 지정 하이픈은 무시할 수 있는 문자 때문에 메서드 반환 문자열에 "m"의 인덱스 문화권 구분 비교를 수행 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="3723c-2276">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="3723c-2277">"m"이 앞에 붙은 사용자 지정 하이픈이 포함된 첫 번째 문자열의 경우, 메서드가 사용자 지정 하이픈의 인덱스를 반환하지 못하고 대신 "m"의 인덱스를 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2277">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>  
  
 [!code-csharp[System.String.LastIndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof23.cs#23)]
 [!code-vb[System.String.LastIndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof23.vb#23)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2278">다음 예제에서는 부분 문자열의 시작 부분 문자열의 끝에서 작업 하는 부분 문자열에서 문자열의 모든 항목의 인덱스를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2278">The following example finds the index of all occurrences of a string in substring, working from the end of the substring to the start of the substring.</span></span>  
  
 [!code-cpp[string.lastindexof8#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOf8/CPP/lastixof8.cpp#1)]
 [!code-csharp[string.lastindexof8#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOf8/CS/lastixof8.cs#1)]
 [!code-vb[string.lastindexof8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOf8/VB/lastixof8.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2279">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2279">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2280">
            <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2280">
              <paramref name="count" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-2281">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />와 같지 않고 <paramref name="startIndex" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2281">-or-  The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-2282">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />와 같지 않고 <paramref name="startIndex" />가 이 인스턴스의 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2282">-or-  The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.</span>
          </span>
          <span data-ttu-id="3723c-2283">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />와 같지 않고 <paramref name="startIndex" /> - <paramref name="count" /> + 1이 인스턴스 외부의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2283">-or-  The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" />+ 1 specifies a position that is not within this instance.</span>
          </span>
          <span data-ttu-id="3723c-2284">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />이고 <paramref name="start" />가 -1보다 작거나 0보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2284">-or-  The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.</span>
          </span>
          <span data-ttu-id="3723c-2285">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />이고 <paramref name="count" />가 1보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2285">-or-  The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2286">
            <para>에 설명 된 대로 [Strings](~/docs/standard/base-types/best-practices-strings.md) 사용에 대 한 모범 사례 권장 기본값을 대체 하 고 대신 매개 변수를 필요로 하는 메서드를 호출 하는 문자열 비교 메서드를 호출 하지 명시적으로 지정 합니다. 현재 문화권의 비교 규칙을 사용 하 여이 작업을 수행 하려면 호출을 <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> 값을 사용 하 여 메서드 오버 로드 <see cref="F:System.StringComparison.CurrentCulture" /> 에 대 한 해당 <paramref name="comparisonType" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2286">
              <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified. To perform this operation by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int * StringComparison -&gt; int" Usage="string.LastIndexOf (value, startIndex, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2287">검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2287">The string to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-2288">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2288">The search starting position.</span>
          </span>
          <span data-ttu-id="3723c-2289">
            <c>startIndex</c>에서 이 인스턴스의 시작 부분을 향해 검색이 진행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2289">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span>
          </span>
        </param>
        <param name="comparisonType">
          <span data-ttu-id="3723c-2290">검색 규칙을 지정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2290">One of the enumeration values that specifies the rules for the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2291">현재 <see cref="T:System.String" /> 개체에서 마지막으로 발견되는 지정된 문자열의 0부터 시작하는 인덱스를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2291">Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object.</span>
          </span>
          <span data-ttu-id="3723c-2292">지정된 문자 위치에서 시작하고 문자열의 시작 부분을 향해 뒤로 검색이 진행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2292">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span>
          </span>
          <span data-ttu-id="3723c-2293">매개 변수는 지정된 문자열을 검색할 때 수행할 비교 유형을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2293">A parameter specifies the type of comparison to perform when searching for the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2294">해당 문자열이 있으면 <paramref name="value" /> 매개 변수의 인덱스 위치(0부터 시작)이고, 해당 문자열이 없거나 현재 인스턴스가 <see cref="F:System.String.Empty" />와 같으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2294">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span>
          </span>
          <span data-ttu-id="3723c-2295">
            <paramref name="value" />가 <see cref="F:System.String.Empty" />이면 반환 값은 <paramref name="startIndex" />와 이 인스턴스의 마지막 인덱스 위치 중 작은 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2295">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2296">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2296">Index numbering starts from zero.</span></span> <span data-ttu-id="3723c-2297">즉, 문자열의 첫 번째 문자 인덱스 0 이며 마지막에 <xref:System.String.Length%2A> -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2297">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="3723c-2298">검색이 시작 합니다 `startIndex` 문자 위치 및 진행 될 때까지 이전 버전과 `value` 가 찾거나 첫 번째 문자 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2298">The search begins at the `startIndex` character position and proceeds backward until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="3723c-2299">예를 들어 있으면 `startIndex` 는 <xref:System.String.Length%2A> -1 메서드 시작 부분 문자열의 마지막 문자에서 모든 문자를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2299">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span>  
  
 <span data-ttu-id="3723c-2300">합니다 `comparisonType` 매개 변수를 검색 하도록 지정 합니다 `value` 현재 또는 고정 문화권을 사용 하 고 대/소문자 구분 또는 대/소문자 구분 검색을 사용 하 여 단어 또는 서 수 비교 규칙을 사용 하 여 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2300">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2301">다음 exampledemonstrates 세 오버 로드 된 <xref:System.String.LastIndexOf%2A> 메서드를 다른 값을 사용 하 여 다른 문자열 내에 있는 문자열의 마지막 항목을 찾을 <xref:System.StringComparison> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2301">The following exampledemonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2302">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2302">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2303">현재 인스턴스가 <see cref="F:System.String.Empty" />와 같지 않고 <paramref name="startIndex" />가 0보다 작거나 현재 인스턴스의 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2303">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.</span>
          </span>
          <span data-ttu-id="3723c-2304">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />이고 <paramref name="startIndex" />가 -1보다 작거나 0보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2304">-or-  The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-2305">
            <paramref name="comparisonType" />은 유효한 <see cref="T:System.StringComparison" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2305">
              <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2306">
            <para>문자 집합에는 언어 또는 문화권 구분 비교를 수행 하는 경우 간주 되지 않는 문자는 무시할 수 있는 문자가 포함 됩니다. 문화권 구분 검색(즉, <paramref name="comparisonType" />이 <see cref="F:System.StringComparison.Ordinal" /> 또는 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />가 아닌 경우)에서는 <paramref name="value" />에 무시할 수 있는 문자가 포함된 경우 결과는 해당 문자가 제거된 대상을 검색하는 것과 같습니다. 하는 경우 <paramref name="value" /> 하나 이상의 무시할 수 있는 문자로 구성 되어 합니다 <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> 메서드는 항상 반환 <paramref name="startIndex" />, 검색을 시작할 문자 위치는입니다.  다음 예제에서는 <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> 메서드는 "m", 두 문자열의 마지막 "m"부터 뒤에 하이픈이 (U + 00AD)의 위치를 찾는 데 사용 됩니다. 문자열 중 하나에만 필수 부분 문자열이 포함되어 있습니다. 예제를 실행 하는 경우는 [! INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 이상, 두 경우 모두 사용자 지정 하이픈은 무시할 수 있는 문자 때문에 메서드 반환 문자열에 "m"의 인덱스 문화권 구분 비교를 수행 하는 경우. "m"이 앞에 붙은 사용자 지정 하이픈이 포함된 첫 번째 문자열의 경우, 메서드가 사용자 지정 하이픈의 인덱스를 반환하지 못하고 대신 "m"의 인덱스를 반환합니다. 메서드는 서 수 비교를 수행 하는 경우에 첫 번째 문자열에 사용자 지정 하이픈의 인덱스를 반환 합니다.  [! csharp 코드 [System.String.LastIndexOf#25] (~/samples/snippets/csharp/VS_Snippets_CLR_System/시스템입니다. String.LastIndexOf/cs/lastindexof25.cs#25)] [! vb 코드 [System.String.LastIndexOf#25] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/시스템입니다. String.LastIndexOf/vb/lastindexof25.vb#25)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2306">
              <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.  In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m", starting with the final "m" in two strings. Only one of the strings contains the required substring. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m". The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.  [!code-csharp[System.String.LastIndexOf#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof25.cs#25)] [!code-vb[System.String.LastIndexOf#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof25.vb#25)]</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, int32 count, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int * int * StringComparison -&gt; int" Usage="string.LastIndexOf (value, startIndex, count, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2307">검색할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2307">The string to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-2308">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2308">The search starting position.</span>
          </span>
          <span data-ttu-id="3723c-2309">
            <c>startIndex</c>에서 이 인스턴스의 시작 부분을 향해 검색이 진행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2309">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-2310">검사할 문자 위치의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2310">The number of character positions to examine.</span>
          </span>
        </param>
        <param name="comparisonType">
          <span data-ttu-id="3723c-2311">검색 규칙을 지정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2311">One of the enumeration values that specifies the rules for the search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2312">이 인스턴스에서 마지막으로 발견되는 지정된 문자열의 0부터 시작하는 인덱스 위치를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2312">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span>
          </span>
          <span data-ttu-id="3723c-2313">지정된 문자 위치에서 검색을 시작하여 지정된 수의 문자 위치에 대한 문자열의 시작 부분 쪽으로 뒤로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2313">The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions.</span>
          </span>
          <span data-ttu-id="3723c-2314">매개 변수는 지정된 문자열을 검색할 때 수행할 비교 유형을 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2314">A parameter specifies the type of comparison to perform when searching for the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2315">해당 문자열이 있으면 <paramref name="value" /> 매개 변수의 인덱스 위치(0부터 시작)이고, 해당 문자열이 없거나 현재 인스턴스가 <see cref="F:System.String.Empty" />와 같으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2315">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span>
          </span>
          <span data-ttu-id="3723c-2316">
            <paramref name="value" />가 <see cref="F:System.String.Empty" />이면 반환 값은 <paramref name="startIndex" />와 이 인스턴스의 마지막 인덱스 위치 중 작은 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2316">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2317">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2317">Index numbering starts from zero.</span></span> <span data-ttu-id="3723c-2318">즉, 문자열의 첫 번째 문자 인덱스 0 이며 마지막에 <xref:System.String.Length%2A> -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2318">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>  
  
 <span data-ttu-id="3723c-2319">검색이 시작 합니다 `startIndex` 문자 위치 및 진행 될 때까지 이전 버전과 `value` 가 또는 `count` 문자 위치를 검토 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2319">The search begins at the `startIndex` character position and proceeds backward until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="3723c-2320">예를 들어 경우 `startIndex` 됩니다 <xref:System.String.Length%2A> -1 메서드 뒤로 검색 `count` 문자열의 마지막 문자에서는 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2320">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span>  
  
 <span data-ttu-id="3723c-2321">합니다 `comparisonType` 매개 변수를 검색 하도록 지정 합니다 `value` 현재 또는 고정 문화권을 사용 하 고 대/소문자 구분 또는 대/소문자 구분 검색을 사용 하 여 단어 또는 서 수 비교 규칙을 사용 하 여 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2321">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2322">다음 exampledemonstrates 세 오버 로드 된 <xref:System.String.LastIndexOf%2A> 메서드를 다른 값을 사용 하 여 다른 문자열 내에 있는 문자열의 마지막 항목을 찾을 <xref:System.StringComparison> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2322">The following exampledemonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>  
  
 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2323">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2323">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2324">
            <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2324">
              <paramref name="count" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-2325">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />와 같지 않고 <paramref name="startIndex" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2325">-or-  The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-2326">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />와 같지 않고 <paramref name="startIndex" />가 이 인스턴스의 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2326">-or-  The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.</span>
          </span>
          <span data-ttu-id="3723c-2327">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />와 같지 않고 <paramref name="startIndex" /> + 1 - <paramref name="count" />가 이 인스턴스 외부의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2327">-or-  The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> specifies a position that is not within this instance.</span>
          </span>
          <span data-ttu-id="3723c-2328">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />이고 <paramref name="start" />가 -1보다 작거나 0보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2328">-or-  The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.</span>
          </span>
          <span data-ttu-id="3723c-2329">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />이고 <paramref name="count" />가 1보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2329">-or-  The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-2330">
            <paramref name="comparisonType" />은 유효한 <see cref="T:System.StringComparison" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2330">
              <paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2331">
            <para>문자 집합에는 언어 또는 문화권 구분 비교를 수행 하는 경우 간주 되지 않는 문자는 무시할 수 있는 문자가 포함 됩니다. 문화권 구분 검색(즉, <paramref name="comparisonType" />이 <see cref="F:System.StringComparison.Ordinal" /> 또는 <see cref="F:System.StringComparison.OrdinalIgnoreCase" />가 아닌 경우)에서는 <paramref name="value" />에 무시할 수 있는 문자가 포함된 경우 결과는 해당 문자가 제거된 대상을 검색하는 것과 같습니다. 하는 경우 <paramref name="value" /> 하나 이상의 무시할 수 있는 문자로 구성 되어 합니다 <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> 메서드는 항상 반환 <paramref name="startIndex" />, 검색을 시작할 문자 위치는입니다.  다음 예제에서는 <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> 메서드는 두 문자열의 모든 "m"을 뒤 하이픈이 (U + 00AD)의 위치 하지만 최종 "m" 앞의 첫 번째 문자 위치를 찾는 데 사용 됩니다. 문자열 중 하나에만 필수 부분 문자열이 포함되어 있습니다. 예제를 실행 하는 경우는 [! INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 이상, 두 경우 모두 사용자 지정 하이픈은 무시할 수 있는 문자 때문에 메서드 반환 문자열에 "m"의 인덱스 문화권 구분 비교를 수행 하는 경우. 그러나 서 수 비교를 수행할 때 부분만에서 찾은 첫 번째 문자열입니다. 참고 첫 번째 문자열 뒤에 "m" 사용자 지정 하이픈을 포함 하는 메서드를 사용자 지정 하이픈의 인덱스를 반환 하지 못하고 있지만 문화권 구분 비교를 수행 하는 경우 대신 "m"의 인덱스를 반환 합니다. 메서드는 서 수 비교를 수행 하는 경우에 첫 번째 문자열에 사용자 지정 하이픈의 인덱스를 반환 합니다.  [! csharp 코드 [System.String.LastIndexOf#24] (~/samples/snippets/csharp/VS_Snippets_CLR_System/시스템입니다. String.LastIndexOf/cs/lastindexof24.cs#24)] [! vb 코드 [System.String.LastIndexOf#24] (~/samples/snippets/visualbasic/VS_Snippets_CLR_System/시스템입니다. String.LastIndexOf/vb/lastindexof24.vb#24)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2331">
              <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.  In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in all but the first character position before the final "m" in two strings. Only one of the strings contains the required substring. If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison. When it performs an ordinal comparison, however, it finds the substring only in the first string. Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m" when it performs a culture-sensitive comparison. The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.  [!code-csharp[System.String.LastIndexOf#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof24.cs#24)] [!code-vb[System.String.LastIndexOf#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof24.vb#24)]</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOfAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2332">유니코드 배열에서 지정된 하나 이상의 문자 중에 이 인스턴스에서 마지막으로 발견되는 문자의 0부터 시작하는 인덱스 위치를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2332">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span>
          </span>
          <span data-ttu-id="3723c-2333">이 인스턴스에 해당 문자가 없으면 메서드는 -1을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2333">The method returns -1 if the characters in the array are not found in this instance.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOfAny : char[] -&gt; int" Usage="string.LastIndexOfAny anyOf" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="anyOf">
          <span data-ttu-id="3723c-2334">검색할 문자를 하나 이상 포함하는 유니코드 문자 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2334">A Unicode character array containing one or more characters to seek.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2335">유니코드 배열에서 지정된 하나 이상의 문자 중에 이 인스턴스에서 마지막으로 발견되는 문자의 0부터 시작하는 인덱스 위치를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2335">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2336">이 인스턴스에서 <paramref name="anyOf" />의 문자가 마지막으로 발견된 인덱스 위치입니다. <paramref name="anyOf" />의 문자가 발견되지 않으면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2336">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2337">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2337">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="3723c-2338">이 메서드는이 인스턴스의 마지막 문자 위치에 있는 검색을 시작 하 고의 문자까지 시작 부분을 향해 뒤로 `anyOf` 가 찾거나 첫 번째 문자 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2338">This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined.</span></span> <span data-ttu-id="3723c-2339">검색은 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2339">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="3723c-2340">이 메서드는 유니코드 스칼라 값이 같은 서 수 (문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2340">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="3723c-2341">문화권 구분 검색을 수행 하려면 사용 합니다 <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> 메서드, 여기서는 미리 구성 된 문자를 나타내는 합자 "→"와 같은 (U + 00 6), 유니코드 스칼라 값 간주 될 수 있습니다 문자 구성 요소에서의 모든 항목에는 "AE" 등 시퀀스를 수정 (u+0041, U + 0045) 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2341">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2342">다음 예제에서는 다른 문자열 내에서 "is" 문자열에 있는 문자 중 마지막 요소의 인덱스를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2342">The following example finds the index of the last occurrence of any character in the string "is" within another string.</span></span>  
  
 [!code-cpp[string.lastindexofany1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny1/CPP/lastixany1.cpp#1)]
 [!code-csharp[string.lastindexofany1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny1/CS/lastixany1.cs#1)]
 [!code-vb[string.lastindexofany1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny1/VB/lastixany1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2343">
            <paramref name="anyOf" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2343">
              <paramref name="anyOf" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char(), startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOfAny : char[] * int -&gt; int" Usage="string.LastIndexOfAny (anyOf, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf">
          <span data-ttu-id="3723c-2344">검색할 문자를 하나 이상 포함하는 유니코드 문자 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2344">A Unicode character array containing one or more characters to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-2345">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2345">The search starting position.</span>
          </span>
          <span data-ttu-id="3723c-2346">
            <c>startIndex</c>에서 이 인스턴스의 시작 부분을 향해 검색이 진행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2346">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2347">유니코드 배열에서 지정된 하나 이상의 문자 중에 이 인스턴스에서 마지막으로 발견되는 문자의 0부터 시작하는 인덱스 위치를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2347">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span>
          </span>
          <span data-ttu-id="3723c-2348">지정된 문자 위치에서 시작하고 문자열의 시작 부분을 향해 뒤로 검색이 진행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2348">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2349">이 인스턴스에서 <paramref name="anyOf" />의 문자가 마지막으로 발견된 인덱스 위치입니다. <paramref name="anyOf" />의 문자가 발견되지 않거나 현재 인스턴스가 <see cref="F:System.String.Empty" />와 동일하면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2349">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2350">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2350">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="3723c-2351">이 메서드 검색을 시작 합니다 `startIndex` 문자이 인스턴스의 위치에 문자가 올 때까지 뒤로 `anyOf` 가 찾거나 첫 번째 문자 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2351">This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined.</span></span> <span data-ttu-id="3723c-2352">검색은 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2352">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="3723c-2353">이 메서드는 유니코드 스칼라 값이 같은 서 수 (문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2353">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="3723c-2354">문화권 구분 검색을 수행 하려면 사용 합니다 <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> 메서드, 여기서는 미리 구성 된 문자를 나타내는 합자 "→"와 같은 (U + 00 6), 유니코드 스칼라 값 간주 될 수 있습니다 문자 구성 요소에서의 모든 항목에는 "AE" 등 시퀀스를 수정 (u+0041, U + 0045) 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2354">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2355">다음 예제에서는 다른 문자열의 부분 문자열에 있는 "is" 문자열에 있는 문자 중 마지막 요소의 인덱스를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2355">The following example finds the index of the last occurrence of any character in the string "is" within a substring of another string.</span></span>  
  
 [!code-cpp[string.lastindexofany2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny2/CPP/lastixany2.cpp#1)]
 [!code-csharp[string.lastindexofany2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny2/CS/lastixany2.cs#1)]
 [!code-vb[string.lastindexofany2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny2/VB/lastixany2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2356">
            <paramref name="anyOf" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2356">
              <paramref name="anyOf" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2357">현재 인스턴스가 <see cref="F:System.String.Empty" />와 같지 않고 <paramref name="startIndex" />가 인스턴스 외부의 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2357">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> specifies a position that is not within this instance.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOfAny : char[] * int * int -&gt; int" Usage="string.LastIndexOfAny (anyOf, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf">
          <span data-ttu-id="3723c-2358">검색할 문자를 하나 이상 포함하는 유니코드 문자 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2358">A Unicode character array containing one or more characters to seek.</span>
          </span>
        </param>
        <param name="startIndex">
          <span data-ttu-id="3723c-2359">검색을 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2359">The search starting position.</span>
          </span>
          <span data-ttu-id="3723c-2360">
            <c>startIndex</c>에서 이 인스턴스의 시작 부분을 향해 검색이 진행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2360">The search proceeds from <c>startIndex</c> toward the beginning of this instance.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-2361">검사할 문자 위치의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2361">The number of character positions to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2362">유니코드 배열에서 지정된 하나 이상의 문자 중에 이 인스턴스에서 마지막으로 발견되는 문자의 0부터 시작하는 인덱스 위치를 보고합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2362">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span>
          </span>
          <span data-ttu-id="3723c-2363">지정된 문자 위치에서 검색을 시작하여 지정된 수의 문자 위치에 대한 문자열의 시작 부분 쪽으로 뒤로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2363">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2364">이 인스턴스에서 <paramref name="anyOf" />의 문자가 마지막으로 발견된 인덱스 위치입니다. <paramref name="anyOf" />의 문자가 발견되지 않거나 현재 인스턴스가 <see cref="F:System.String.Empty" />와 동일하면 -1입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2364">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2365">인덱스 번호는 0부터 시작합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2365">Index numbering starts from zero.</span></span>  
  
 <span data-ttu-id="3723c-2366">이 메서드 검색을 시작 합니다 `startIndex` 문자이 인스턴스의 위치에 문자가 올 때까지 뒤로 `anyOf` 가 또는 `count` 문자 위치를 검토 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2366">This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="3723c-2367">검색은 대/소문자 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2367">The search is case-sensitive.</span></span>  
  
 <span data-ttu-id="3723c-2368">이 메서드는 유니코드 스칼라 값이 같은 서 수 (문화권) 검색을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2368">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="3723c-2369">문화권 구분 검색을 수행 하려면 사용 합니다 <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> 메서드, 여기서는 미리 구성 된 문자를 나타내는 합자 "→"와 같은 (U + 00 6), 유니코드 스칼라 값 간주 될 수 있습니다 문자 구성 요소에서의 모든 항목에는 "AE" 등 시퀀스를 수정 (u+0041, U + 0045) 문화권에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2369">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2370">다음 예제에서는 다른 문자열의 부분 문자열에 있는 문자열 "참조"에 있는 문자 중 마지막 요소의 인덱스를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2370">The following example finds the index of the last occurrence of any character in the string "aid" within a substring of another string.</span></span>  
  
 [!code-cpp[string.lastindexofany3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny3/CPP/lastixany3.cpp#1)]
 [!code-csharp[string.lastindexofany3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny3/CS/lastixany3.cs#1)]
 [!code-vb[string.lastindexofany3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny3/VB/lastixany3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2371">
            <paramref name="anyOf" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2371">
              <paramref name="anyOf" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2372">현재 인스턴스가 <see cref="F:System.String.Empty" /> 같지 않고 <paramref name="count" /> 또는 <paramref name="startIndex" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2372">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="count" /> or <paramref name="startIndex" /> is negative.</span>
          </span>
          <span data-ttu-id="3723c-2373">-또는-  현재 인스턴스가 <see cref="F:System.String.Empty" />와 같지 않고 <paramref name="startIndex" /> - <paramref name="count" /> + 1이 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2373">-or-  The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> minus <paramref name="count" /> + 1 is less than zero.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.String.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.string.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2374">현재 <see cref="T:System.String" /> 개체의 문자 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2374">Gets the number of characters in the current <see cref="T:System.String" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3723c-2375">현재 문자열의 문자 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2375">The number of characters in the current string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2376"><xref:System.String.Length%2A> 속성의 수를 반환 합니다. <xref:System.Char> 이 인스턴스의 개체를 유니코드 문자 수가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2376">The <xref:System.String.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters.</span></span> <span data-ttu-id="3723c-2377">이유는 둘 이상의 유니코드 문자를 표현 될 수 있습니다 <xref:System.Char>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2377">The reason is that a Unicode character might be represented by more than one <xref:System.Char>.</span></span> <span data-ttu-id="3723c-2378">사용 된 <xref:System.Globalization.StringInfo?displayProperty=nameWithType> 각 대신 각 유니코드 문자를 사용 하는 클래스 <xref:System.Char>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2378">Use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> class to work with each Unicode character instead of each <xref:System.Char>.</span></span>  
  
 <span data-ttu-id="3723c-2379">C 및 c + +와 같은 일부 언어에서 null 문자를 문자열의 끝을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2379">In some languages, such as C and C++, a null character indicates the end of a string.</span></span> <span data-ttu-id="3723c-2380">.NET framework에서 문자열에 null 문자를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2380">In the .NET Framework, a null character can be embedded in a string.</span></span> <span data-ttu-id="3723c-2381">문자열에서 하나 이상의 null 문자를 포함 하는 경우 전체 문자열의 길이가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2381">When a string includes one or more null characters, they are included in the length of the total string.</span></span> <span data-ttu-id="3723c-2382">예를 들어 다음 문자열을 부분 문자열 "abc"와 "def" null 문자로 구분 됩니다에서.</span><span class="sxs-lookup"><span data-stu-id="3723c-2382">For example, in the following string, the substrings "abc" and "def" are separated by a null character.</span></span> <span data-ttu-id="3723c-2383"><xref:System.String.Length%2A> 속성 6 알파벳 문자 뿐만 아니라 null 문자를 포함 하는 것이 나타내는 7을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2383">The <xref:System.String.Length%2A> property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.</span></span>  
  
 [!code-cpp[System.String.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/system.string.class.cpp#1)]
 [!code-csharp[System.String.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/System.String.Class.cs#1)]
 [!code-vb[System.String.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/System.String.Class.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2384">다음 예제는 <xref:System.String.Length%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2384">The following example demonstrates the <xref:System.String.Length%2A> property.</span></span>  
  
 [!code-cpp[string.length#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.length/CPP/length.cpp#1)]
 [!code-csharp[string.length#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.length/CS/length.cs#1)]
 [!code-vb[string.length#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.length/VB/length.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Normalize">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2385">이진 표현의 형식이 특정 유니코드 정규화 형식인 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2385">Returns a new string whose binary representation is in a particular Unicode normalization form.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public string Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Normalize" />
      <MemberSignature Language="VB.NET" Value="Public Function Normalize () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Normalize();" />
      <MemberSignature Language="F#" Value="member this.Normalize : unit -&gt; string" Usage="string.Normalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2386">텍스트 값이 이 문자열과 같지만 이진 표현의 형식이 유니코드 정규화 형식 C인 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2386">Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2387">텍스트 값이 이 문자열과 같지만 이진 표현의 형식이 정규화 형식 C인 정규화된 새 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2387">A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2388">일부 유니코드 문자는 해당 집합 조합으로 구성 된 여러 이진 표현 및/또는 복합 유니코드 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2388">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="3723c-2389">예를 들어, 다음 코드 지점 중 하나는 문자 "ắ"을 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2389">For example, any of the following code points can represent the letter "ắ":</span></span>  
  
-   <span data-ttu-id="3723c-2390">U + 1EAF</span><span class="sxs-lookup"><span data-stu-id="3723c-2390">U+1EAF</span></span>  
  
-   <span data-ttu-id="3723c-2391">U + 0103 U + 0301</span><span class="sxs-lookup"><span data-stu-id="3723c-2391">U+0103 U+0301</span></span>  
  
-   <span data-ttu-id="3723c-2392">U + 0061 U + 0306 U + 0301</span><span class="sxs-lookup"><span data-stu-id="3723c-2392">U+0061 U+0306 U+0301</span></span>  
  
 <span data-ttu-id="3723c-2393">단일 문자에 대 한 여러 표현이 검색, 정렬, 일치 및 기타 작업을 복잡 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2393">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>  
  
 <span data-ttu-id="3723c-2394">표준 유니코드 문자의 해당 이진 표현을 제공 하는 경우 하나의 이진 표현을 반환 하는 정규화 라고 하는 프로세스를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2394">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="3723c-2395">다른 규칙을 따르는 정규화 형식 이라는 다양 한 알고리즘을 사용 하 여 정규화를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2395">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="3723c-2396">.NET Framework에는 네 가지 정규화 형식 (C, D, KC 및 KD) 유니코드 표준에서 정의 된 지원 합니다. 두 문자열이 동일한 정규화 형태로 표시 되는 경우 서 수 비교를 사용 하 여 theycan 비교할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2396">The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, theycan be compared by using ordinal comparison.</span></span>  
  
 <span data-ttu-id="3723c-2397">정규화 하 고 두 문자열을 비교 하려면 다음을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2397">To normalize and compare two strings, do the following:</span></span>  
  
1.  <span data-ttu-id="3723c-2398">파일 또는 사용자 입력된 장치와 같은 입력된 원본에서 비교할 문자열을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2398">Obtain the strings to be compared from an input source, such as a file or a user input device.</span></span>  
  
2.  <span data-ttu-id="3723c-2399">호출 된 <xref:System.String.Normalize> 문자열 정규화 C. 정규화 하는 방법</span><span class="sxs-lookup"><span data-stu-id="3723c-2399">Call the <xref:System.String.Normalize> method to normalize the strings to normalization form C.</span></span>  
  
3.  <span data-ttu-id="3723c-2400">두 문자열을 비교 하려면 같은 서 수 문자열 비교를 지 원하는 메서드를 호출 합니다 <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> 메서드 값을 제공 하 고 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> 또는 <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> 으로 <xref:System.StringComparison> 인수.</span><span class="sxs-lookup"><span data-stu-id="3723c-2400">To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> as the <xref:System.StringComparison> argument.</span></span> <span data-ttu-id="3723c-2401">정규화 된 문자열 배열을 정렬 하려면 전달 된 `comparer` 값 <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> 또는 <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> 의 적절 한 오버 로드에 <xref:System.Array.Sort%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="3723c-2401">To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=nameWithType>.</span></span>  
  
4.  <span data-ttu-id="3723c-2402">이전 단계에서 표시 된 순서에 따라 정렬 된 출력에 문자열을 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2402">Emit the strings in the sorted output based on the order indicated by the previous step.</span></span>  
  
 <span data-ttu-id="3723c-2403">지원 되는 유니코드 정규화 형식에 대 한 참조 <xref:System.Text.NormalizationForm?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2403">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2404">다음 예제에서는 문자열을 각각 네 가지 정규화 형식으로 확인 문자열, 지정 된 정규화 형식인 정규화 된 한 다음 정규화 된 문자열에 코드 포인트를 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2404">The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.</span></span>  
  
 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-2405">현재 인스턴스에 잘못된 유니코드 문자가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2405">The current instance contains invalid Unicode characters.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2406">
            <para>합니다 <see cref="Overload:System.String.IsNormalized" /> 메서드가 반환 되는 <see langword="false" /> 문자열의 첫 번째 정규화 되지 않은 문자가 발견 되는 즉시 합니다. 따라서 문자열 뒤에 잘못 된 유니코드 문자를 정규화 되지 않은 문자를 포함 하는 경우는 <see cref="Overload:System.String.Normalize" /> 메서드는 throw를 <see cref="T:System.ArgumentException" /> 있지만 <see cref="Overload:System.String.IsNormalized" /> 반환 <see langword="false" />합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2406">
              <para>The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string. Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.IsNormalized" />
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public string Normalize (System.Text.NormalizationForm normalizationForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Normalize(valuetype System.Text.NormalizationForm normalizationForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Normalize(System.Text.NormalizationForm)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Normalize(System::Text::NormalizationForm normalizationForm);" />
      <MemberSignature Language="F#" Value="member this.Normalize : System.Text.NormalizationForm -&gt; string" Usage="string.Normalize normalizationForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizationForm" Type="System.Text.NormalizationForm" />
      </Parameters>
      <Docs>
        <param name="normalizationForm">
          <span data-ttu-id="3723c-2407">유니코드 정규화 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2407">A Unicode normalization form.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2408">텍스트 값이 이 문자열과 같지만 이진 표현의 형식이 지정한 유니코드 정규화 형식인 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2408">Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2409">텍스트 값이 이 문자열과 같지만 이진 표현의 형식이 <paramref name="normalizationForm" /> 매개 변수로 지정된 정규화 형식인 새 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2409">A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <paramref name="normalizationForm" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2410">일부 유니코드 문자는 해당 집합 조합으로 구성 된 여러 이진 표현 및/또는 복합 유니코드 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2410">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="3723c-2411">단일 문자에 대 한 여러 표현이 검색, 정렬, 일치 및 기타 작업을 복잡 하 게 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2411">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>  
  
 <span data-ttu-id="3723c-2412">표준 유니코드 문자의 해당 이진 표현을 제공 하는 경우 하나의 이진 표현을 반환 하는 정규화 라고 하는 프로세스를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2412">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="3723c-2413">다른 규칙을 따르는 정규화 형식 이라는 다양 한 알고리즘을 사용 하 여 정규화를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2413">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="3723c-2414">.NET Framework에는 네 가지 정규화 형식 (C, D, KC 및 KD) 유니코드 표준에서 정의 된 지원 합니다. 두 문자열이 동일한 정규화 형태로 표시 되는 경우 서 수 비교를 사용 하 여 비교할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2414">The .NET Framework supports the four normalization forms (C, D, KC, and KD)that are defined by the Unicode standard.When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.</span></span>  
  
 <span data-ttu-id="3723c-2415">정규화 하 고 두 문자열을 비교 하려면 다음을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2415">To normalize and compare two strings, do the following:</span></span>  
  
1.  <span data-ttu-id="3723c-2416">파일 또는 사용자 입력된 장치와 같은 입력된 원본에서 비교할 문자열을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2416">Obtain the strings to be compared from an input source, such as a file or a user input device.</span></span>  
  
2.  <span data-ttu-id="3723c-2417">호출 된 <xref:System.String.Normalize%28System.Text.NormalizationForm%29> 문자열을 지정 된 정규화 형식인 정규화 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2417">Call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29> method to normalize the strings to a specified normalization form.</span></span>  
  
3.  <span data-ttu-id="3723c-2418">두 문자열을 비교 하려면 같은 서 수 문자열 비교를 지 원하는 메서드를 호출 합니다 <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> 메서드 값을 제공 하 고 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> 또는 <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> 으로 <xref:System.StringComparison> 인수.</span><span class="sxs-lookup"><span data-stu-id="3723c-2418">To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> as the <xref:System.StringComparison> argument.</span></span> <span data-ttu-id="3723c-2419">정규화 된 문자열 배열을 정렬 하려면 전달 된 `comparer` 값 <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> 또는 <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> 의 적절 한 오버 로드에 <xref:System.Array.Sort%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="3723c-2419">To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=nameWithType>.</span></span>  
  
4.  <span data-ttu-id="3723c-2420">이전 단계에서 표시 된 순서에 따라 정렬 된 출력에 문자열을 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2420">Emit the strings in the sorted output based on the order indicated by the previous step.</span></span>  
  
 <span data-ttu-id="3723c-2421">지원 되는 유니코드 정규화 형식에 대 한 참조 <xref:System.Text.NormalizationForm?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2421">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2422">다음 예제에서는 문자열을 각각 네 가지 정규화 형식으로 확인 문자열, 지정 된 정규화 형식인 정규화 된 한 다음 정규화 된 문자열에 코드 포인트를 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2422">The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.</span></span>  
  
 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-2423">현재 인스턴스에 잘못된 유니코드 문자가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2423">The current instance contains invalid Unicode characters.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2424">
            <para>합니다 <see cref="Overload:System.String.IsNormalized" /> 메서드가 반환 되는 <see langword="false" /> 문자열의 첫 번째 정규화 되지 않은 문자가 발견 되는 즉시 합니다. 따라서 문자열 뒤에 잘못 된 유니코드 문자를 정규화 되지 않은 문자를 포함 하는 경우는 <see cref="Overload:System.String.Normalize" /> 메서드가 throw 할 수는 <see cref="T:System.ArgumentException" /> 있지만 <see cref="Overload:System.String.IsNormalized" /> 반환 <see langword="false" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2424">
              <para>The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string. Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method may throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.IsNormalized" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (string a, string b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Equality(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::String ^ a, System::String ^ b);" />
      <MemberSignature Language="F#" Value="static member ( = ) : string * string -&gt; bool" Usage="a = b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="3723c-2425">비교할 첫 번째 문자열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2425">The first string to compare, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="3723c-2426">비교할 두 번째 문자열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2426">The second string to compare, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2427">지정된 두 문자열의 값이 같은지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2427">Determines whether two specified strings have the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2428">
            <see langword="true" />의 값이 <paramref name="a" />의 값과 같으면 <paramref name="b" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2428">
              <see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2429">합니다 <xref:System.String.op_Equality%2A> 에 대 한 같음 연산자의 작업을 정의 하는 메서드를 <xref:System.String> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2429">The <xref:System.String.op_Equality%2A> method defines the operation of the equality operator for the <xref:System.String> class.</span></span> <span data-ttu-id="3723c-2430">코드를 예제에서는 섹션에 나와 있는 것과 같은 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2430">It enables code such as that shown in the Example section.</span></span> <span data-ttu-id="3723c-2431">연산자를 호출 하는 정적 <xref:System.String.Equals%28System.String%2CSystem.String%29> 메서드는 서 수 (대/소문자 구분 및 문화권을 구분 하지 않는) 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2431">The operator, in turn, calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-2432">Visual Basic 컴파일러 같음 연산자에 대 한 호출으로 해결 되지 않으면를 <xref:System.String.op_Equality%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2432">The Visual Basic compiler does not resolve the equality operator as a call to the <xref:System.String.op_Equality%2A> method.</span></span> <span data-ttu-id="3723c-2433">대신 같음 연산자에 대 한 호출을 래핑하는 <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2433">Instead, the equality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2434">다음 예제에서는 같음 연산자를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2434">The following example demonstrates the equality operator.</span></span>  
  
 [!code-cpp[system.string.equality#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Equality/CPP/equalityop.cpp#1)]
 [!code-csharp[system.string.equality#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Equality/CS/equalityop.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;char&gt; (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;char&gt; op_Implicit(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Implicit(System.String)~System.ReadOnlySpan{System.Char}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As String) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;char&gt;(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.string.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (string a, string b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Inequality(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::String ^ a, System::String ^ b);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : string * string -&gt; bool" Usage="System.string.op_Inequality (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a">
          <span data-ttu-id="3723c-2435">비교할 첫 번째 문자열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2435">The first string to compare, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="b">
          <span data-ttu-id="3723c-2436">비교할 두 번째 문자열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2436">The second string to compare, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2437">지정된 두 문자열의 값이 다른지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2437">Determines whether two specified strings have different values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2438">
            <see langword="true" />의 값이 <paramref name="a" />의 값과 다르면 <paramref name="b" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2438">
              <see langword="true" /> if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2439">합니다 <xref:System.String.op_Inequality%2A> 같지 않음 연산자에 대 한 작업을 정의 하는 메서드를 <xref:System.String> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2439">The <xref:System.String.op_Inequality%2A> method defines the operation of the inequality operator for the <xref:System.String> class.</span></span>   <span data-ttu-id="3723c-2440">코드를 예 섹션에 표시 된 것과 같은 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2440">It enables code such as that shown in the Examples section.</span></span>  
  
 <span data-ttu-id="3723c-2441">합니다 <xref:System.String.op_Inequality%2A> 연산자 호출 정적 <xref:System.String.Equals%28System.String%2CSystem.String%29> 서 수 (대/소문자 구분 및 문화권을 구분 하지 않는) 비교를 수행 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2441">The <xref:System.String.op_Inequality%2A> operator in turn calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-2442">Visual Basic 컴파일러 같지 않음 연산자에 대 한 호출으로 해결 되지 않으면를 <xref:System.String.op_Inequality%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2442">The Visual Basic compiler does not resolve the inequality operator as a call to the <xref:System.String.op_Inequality%2A> method.</span></span> <span data-ttu-id="3723c-2443">대신 같지 않음 연산자에 대 한 호출을 래핑하는 <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2443">Instead, the inequality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2444">다음 예에서는 같지 않음 연산자를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2444">The following example demonstrates the inequality operator.</span></span>  
  
 [!code-cpp[system.string.inequality#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Inequality/CPP/inequalityop.cpp#1)]
 [!code-csharp[system.string.inequality#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Inequality/CS/inequalityop.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PadLeft">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2445">현재 문자열의 시작 부분이 공백이나 지정된 유니코드 문자로 채워지는 지정된 길이의 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2445">Returns a new string of a specified length in which the beginning of the current string is padded with spaces or with a specified Unicode character.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PadLeft">
      <MemberSignature Language="C#" Value="public string PadLeft (int totalWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadLeft(int32 totalWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadLeft(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadLeft (totalWidth As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadLeft(int totalWidth);" />
      <MemberSignature Language="F#" Value="member this.PadLeft : int -&gt; string" Usage="string.PadLeft totalWidth" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="totalWidth">
          <span data-ttu-id="3723c-2446">결과 문자열에 있는 문자 수는 원래 문자 수와 추가 안쪽 여백 문자 수를 합한 값과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2446">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2447">지정한 길이만큼 왼쪽의 안쪽 여백을 공백으로 채워서 이 인스턴스의 문자를 오른쪽에 맞추는 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2447">Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2448">이 인스턴스와 동일하지만 오른쪽으로 맞춰지고 왼쪽의 안쪽 여백이 <paramref name="totalWidth" />의 길이만큼 공백 문자로 채워진 새 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2448">A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <paramref name="totalWidth" />.</span>
          </span>
          <span data-ttu-id="3723c-2449">그러나 <paramref name="totalWidth" />가 이 인스턴스의 길이보다 작을 경우 메서드는 기존 인스턴스에 대한 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2449">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span>
          </span>
          <span data-ttu-id="3723c-2450">
            <paramref name="totalWidth" />가 이 인스턴스의 길이와 같을 경우 메서드는 이 인스턴스와 동일한 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2450">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2451">유니코드 공백 문자는 16 진수 0x0020으로 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2451">A Unicode space is defined as hexadecimal 0x0020.</span></span>  
  
 <span data-ttu-id="3723c-2452"><xref:System.String.PadLeft%28System.Int32%29> 메서드는 반환된 된 문자열의 시작 부분을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2452">The <xref:System.String.PadLeft%28System.Int32%29> method pads the beginning of the returned string.</span></span> <span data-ttu-id="3723c-2453">즉, 오른쪽에서 왼쪽 언어를 사용할 때 문자열의 오른쪽 부분을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2453">This means that, when used with right-to-left languages, it pads the right portion of the string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-2454">경우는 <xref:System.String.PadLeft%2A> 메서드 채웁니다 공백 문자를 사용 하 여 현재 인스턴스,이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2454">If the <xref:System.String.PadLeft%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-2455">대신, 전체 길이가 되도록 선행 공백을 채운 하는 새 문자열을 반환 합니다 `totalWidth` 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2455">Instead, it returns a new string that is padded with leading white space so that its total length is `totalWidth` characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2456">다음 예제는 <xref:System.String.PadLeft%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2456">The following example demonstrates the <xref:System.String.PadLeft%2A> method.</span></span>  
  
 [!code-cpp[Classic String.PadLeft Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadLeft Example/CPP/source.cpp#1)]
 [!code-csharp[Classic String.PadLeft Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadLeft Example/CS/source.cs#1)]
 [!code-vb[Classic String.PadLeft Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadLeft Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2457">
            <paramref name="totalWidth" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2457">
              <paramref name="totalWidth" /> is less than zero.</span>
          </span>
        </exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadRight(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="PadLeft">
      <MemberSignature Language="C#" Value="public string PadLeft (int totalWidth, char paddingChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadLeft(int32 totalWidth, char paddingChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadLeft(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadLeft (totalWidth As Integer, paddingChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadLeft(int totalWidth, char paddingChar);" />
      <MemberSignature Language="F#" Value="member this.PadLeft : int * char -&gt; string" Usage="string.PadLeft (totalWidth, paddingChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
        <Parameter Name="paddingChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="totalWidth">
          <span data-ttu-id="3723c-2458">결과 문자열에 있는 문자 수는 원래 문자 수와 추가 안쪽 여백 문자 수를 합한 값과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2458">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span>
          </span>
        </param>
        <param name="paddingChar">
          <span data-ttu-id="3723c-2459">유니코드 안쪽 여백 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2459">A Unicode padding character.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2460">지정한 길이만큼 왼쪽의 안쪽 여백을 지정된 유니코드 문자로 채워서 이 인스턴스의 문자를 오른쪽에 맞추는 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2460">Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2461">이 인스턴스와 동일하지만 오른쪽으로 맞춰지고 왼쪽의 안쪽 여백이 <paramref name="paddingChar" />의 길이만큼 <paramref name="totalWidth" /> 문자로 채워진 새 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2461">A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />.</span>
          </span>
          <span data-ttu-id="3723c-2462">그러나 <paramref name="totalWidth" />가 이 인스턴스의 길이보다 작을 경우 메서드는 기존 인스턴스에 대한 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2462">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span>
          </span>
          <span data-ttu-id="3723c-2463">
            <paramref name="totalWidth" />가 이 인스턴스의 길이와 같을 경우 메서드는 이 인스턴스와 동일한 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2463">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2464"><xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29> 메서드는 반환된 된 문자열의 시작 부분을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2464">The <xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29> method pads the beginning of the returned string.</span></span> <span data-ttu-id="3723c-2465">즉, 오른쪽에서 왼쪽 언어를 사용할 때 문자열의 오른쪽 부분을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2465">This means that, when used with right-to-left languages, it pads the right portion of the string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-2466">경우는 <xref:System.String.PadLeft%2A> 메서드 채웁니다 공백 문자를 사용 하 여 현재 인스턴스,이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2466">If the <xref:System.String.PadLeft%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-2467">대신 최고의 채워집니다 하는 새 문자열을 반환 합니다 `paddingChar` 자로 전체 길이가 `totalWidth` 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2467">Instead, it returns a new string that is padded with leading `paddingChar` characters so that its total length is `totalWidth` characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2468">다음 예제는 <xref:System.String.PadLeft%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2468">The following example demonstrates the <xref:System.String.PadLeft%2A> method.</span></span>  
  
 [!code-cpp[Classic String.PadLeft1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic String.PadLeft1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/CS/source.cs#1)]
 [!code-vb[Classic String.PadLeft1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2469">
            <paramref name="totalWidth" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2469">
              <paramref name="totalWidth" /> is less than zero.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadRight(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PadRight">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2470">현재 문자열의 끝 부분이 공백이나 지정된 유니코드 문자로 채워지는 지정된 길이의 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2470">Returns a new string of a specified length in which the end of the current string is padded with spaces or with a specified Unicode character.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PadRight">
      <MemberSignature Language="C#" Value="public string PadRight (int totalWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadRight(int32 totalWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadRight(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadRight (totalWidth As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadRight(int totalWidth);" />
      <MemberSignature Language="F#" Value="member this.PadRight : int -&gt; string" Usage="string.PadRight totalWidth" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="totalWidth">
          <span data-ttu-id="3723c-2471">결과 문자열에 있는 문자 수는 원래 문자 수와 추가 안쪽 여백 문자 수를 합한 값과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2471">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2472">지정한 길이만큼 오른쪽의 안쪽 여백을 공백으로 채워서 이 문자열의 문자를 왼쪽에 맞추는 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2472">Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2473">이 인스턴스와 동일하지만 왼쪽으로 맞춰지고 오른쪽의 안쪽 여백이 <paramref name="totalWidth" />의 길이만큼 공백 문자로 채워진 새 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2473">A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <paramref name="totalWidth" />.</span>
          </span>
          <span data-ttu-id="3723c-2474">그러나 <paramref name="totalWidth" />가 이 인스턴스의 길이보다 작을 경우 메서드는 기존 인스턴스에 대한 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2474">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span>
          </span>
          <span data-ttu-id="3723c-2475">
            <paramref name="totalWidth" />가 이 인스턴스의 길이와 같을 경우 메서드는 이 인스턴스와 동일한 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2475">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2476">유니코드 공백 문자는 16 진수 0x0020으로 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2476">A Unicode space is defined as hexadecimal 0x0020.</span></span>  
  
 <span data-ttu-id="3723c-2477"><xref:System.String.PadRight%28System.Int32%29> 메서드는 반환된 된 문자열의 끝을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2477">The <xref:System.String.PadRight%28System.Int32%29> method pads the end of the returned string.</span></span> <span data-ttu-id="3723c-2478">즉, 오른쪽에서 왼쪽 언어를 사용할 때 문자열의 왼쪽된 부분을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2478">This means that, when used with right-to-left languages, it pads the left portion of the string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-2479">경우는 <xref:System.String.PadRight%2A> 메서드 채웁니다 공백 문자를 사용 하 여 현재 인스턴스,이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2479">If the <xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-2480">전체 길이가 되도록 후행 공백으로 채워집니다 있는 새 문자열을 반환 하는 대신 `totalWidth` 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2480">Instead, it returns a new string that is padded with trailing white space so that its total length is `totalWidth` characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2481">다음 예제는 <xref:System.String.PadRight%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2481">The following example demonstrates the <xref:System.String.PadRight%2A> method.</span></span>  
  
 [!code-cpp[Classic String.PadRight Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadRight Example/CPP/source.cpp#1)]
 [!code-csharp[Classic String.PadRight Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadRight Example/cs/source.cs#1)]
 [!code-vb[Classic String.PadRight Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadRight Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2482">
            <paramref name="totalWidth" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2482">
              <paramref name="totalWidth" /> is less than zero.</span>
          </span>
        </exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadLeft(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="PadRight">
      <MemberSignature Language="C#" Value="public string PadRight (int totalWidth, char paddingChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadRight(int32 totalWidth, char paddingChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadRight(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadRight (totalWidth As Integer, paddingChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadRight(int totalWidth, char paddingChar);" />
      <MemberSignature Language="F#" Value="member this.PadRight : int * char -&gt; string" Usage="string.PadRight (totalWidth, paddingChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
        <Parameter Name="paddingChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="totalWidth">
          <span data-ttu-id="3723c-2483">결과 문자열에 있는 문자 수는 원래 문자 수와 추가 안쪽 여백 문자 수를 합한 값과 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2483">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span>
          </span>
        </param>
        <param name="paddingChar">
          <span data-ttu-id="3723c-2484">유니코드 안쪽 여백 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2484">A Unicode padding character.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2485">지정한 길이만큼 오른쪽의 안쪽 여백을 지정된 유니코드 문자로 채워서 이 문자열의 문자를 왼쪽에 맞추는 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2485">Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2486">이 인스턴스와 동일하지만 왼쪽으로 맞춰지고 오른쪽의 안쪽 여백이 <paramref name="paddingChar" />의 길이만큼 <paramref name="totalWidth" /> 문자로 채워진 새 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2486">A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />.</span>
          </span>
          <span data-ttu-id="3723c-2487">그러나 <paramref name="totalWidth" />가 이 인스턴스의 길이보다 작을 경우 메서드는 기존 인스턴스에 대한 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2487">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span>
          </span>
          <span data-ttu-id="3723c-2488">
            <paramref name="totalWidth" />가 이 인스턴스의 길이와 같을 경우 메서드는 이 인스턴스와 동일한 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2488">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2489"><xref:System.String.PadRight%28System.Int32%2CSystem.Char%29> 메서드는 반환된 된 문자열의 끝을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2489">The <xref:System.String.PadRight%28System.Int32%2CSystem.Char%29> method pads the end of the returned string.</span></span> <span data-ttu-id="3723c-2490">즉, 오른쪽에서 왼쪽 언어를 사용할 때 문자열의 왼쪽된 부분을 채웁니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2490">This means that, when used with right-to-left languages, it pads the left portion of the string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-2491">경우는 <xref:System.String.PadRight%2A> 메서드 채웁니다 공백 문자를 사용 하 여 현재 인스턴스,이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2491">If the <xref:System.String.PadRight%2A> method pads the current instance with whitespace characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-2492">대신, 후행 채워집니다 하는 새 문자열을 반환 합니다 `paddingChar` 자로 전체 길이가 `totalWidth` 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2492">Instead, it returns a new string that is padded with trailing `paddingChar` characters so that its total length is `totalWidth` characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2493">다음 예제는 <xref:System.String.PadRight%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2493">The following example demonstrates the <xref:System.String.PadRight%2A> method.</span></span>  
  
 [!code-cpp[Classic String.PadRight1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic String.PadRight1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/cs/source.cs#1)]
 [!code-vb[Classic String.PadRight1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2494">
            <paramref name="totalWidth" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2494">
              <paramref name="totalWidth" /> is less than zero.</span>
          </span>
        </exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadLeft(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2495">현재 문자열에서 지정한 수의 문자가 삭제되는 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2495">Returns a new string in which a specified number of characters from the current string are deleted.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public string Remove (int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Remove(int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (startIndex As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Remove(int startIndex);" />
      <MemberSignature Language="F#" Value="member this.Remove : int -&gt; string" Usage="string.Remove startIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="3723c-2496">문자 삭제를 0부터 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2496">The zero-based position to begin deleting characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2497">지정된 위치부터 마지막 위치 사이에 현재 인스턴스의 모든 문자가 삭제되었던 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2497">Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2498">제거된 문자를 제외하고 이 문자열과 동일한 새 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2498">A new string that is equivalent to this string except for the removed characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2499">에 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], 문자열은 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2499">In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based.</span></span> <span data-ttu-id="3723c-2500">값을 `startIndex` 매개 변수의 범위는 0부터 1 문자열 인스턴스 길이 보다 작은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2500">The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-2501">이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2501">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-2502">대신, 새 문자열 반환 되는 모든 문자에 위치에서 `startIndex` 원래 문자열의 끝에 제거 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2502">Instead, it returns a new string in which all characters from position `startIndex` to the end of the original string have been removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2503">다음 예제는 <xref:System.String.Remove%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2503">The following example demonstrates the <xref:System.String.Remove%2A> method.</span></span> <span data-ttu-id="3723c-2504">다음 마지막 경우 문자열의 끝까지 지정된 된 인덱스에서 시작 하는 모든 텍스트를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2504">The next-to-last case removes all text starting from the specified index through the end of the string.</span></span> <span data-ttu-id="3723c-2505">마지막 경우 지정된 된 인덱스에서 시작 하는 세 개의 문자를 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2505">The last case removes three characters starting from the specified index.</span></span>  
  
 [!code-cpp[string.remove#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.remove/CPP/r.cpp#1)]
 [!code-csharp[string.remove#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.remove/CS/r.cs#1)]
 [!code-vb[string.remove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.remove/VB/r.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2506">
            <paramref name="startIndex" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2506">
              <paramref name="startIndex" /> is less than zero.</span>
          </span>
          <span data-ttu-id="3723c-2507">-또는-  <paramref name="startIndex" />가 이 문자열 내에 없는 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2507">-or-  <paramref name="startIndex" /> specifies a position that is not within this string.</span>
          </span>
        </exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public string Remove (int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Remove(int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Remove(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Remove(int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.Remove : int * int -&gt; string" Usage="string.Remove (startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="3723c-2508">문자 삭제를 0부터 시작할 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2508">The zero-based position to begin deleting characters.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-2509">삭제할 문자의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2509">The number of characters to delete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2510">현재 인스턴스의 지정된 위치에서 시작하여 지정된 수의 문자가 삭제되었던 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2510">Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2511">제거된 문자를 제외하고 이 인스턴스와 동일한 새 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2511">A new string that is equivalent to this instance except for the removed characters.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2512">에 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], 문자열은 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2512">In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based.</span></span> <span data-ttu-id="3723c-2513">값을 `startIndex` 매개 변수의 범위는 0부터 1 문자열 인스턴스 길이 보다 작은 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2513">The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-2514">이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2514">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-2515">대신 하 여 문자 수가 지정 된 새 문자열을 반환 합니다 `count` 매개 변수가 제거 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2515">Instead, it returns a new string in which the number of characters specified by the `count` parameter have been removed.</span></span> <span data-ttu-id="3723c-2516">문자에 지정 된 위치에서 제거 됩니다 `startIndex`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2516">The characters are removed at the position specified by `startIndex`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2517">다음 예제에서는 전체 이름에서 중간 이름을 제거 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2517">The following example demonstrates how you can remove the middle name from a complete name.</span></span>  
  
 [!code-cpp[stringremove#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringremove/CPP/stringremove.cpp#1)]
 [!code-csharp[stringremove#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringremove/CS/stringremove.cs#1)]
 [!code-vb[stringremove#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringremove/VB/stringremove.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2518">
            <paramref name="startIndex" /> 또는 <paramref name="count" />가 0보다 작은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2518">Either <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="3723c-2519">-또는-  <paramref name="startIndex" /> + <paramref name="count" />가 이 인스턴스 외부 위치를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2519">-or-  <paramref name="startIndex" /> plus <paramref name="count" /> specify a position outside this instance.</span>
          </span>
        </exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2520">현재 문자열에서 발견되는 지정된 유니코드 문자 또는 <see cref="T:System.String" />을 모두 지정된 다른 유니코드 문자 또는 <see cref="T:System.String" />으로 바꾼 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2520">Returns a new string in which all occurrences of a specified Unicode character or <see cref="T:System.String" /> in the current string are replaced with another specified Unicode character or <see cref="T:System.String" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (char oldChar, char newChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(char oldChar, char newChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldChar As Char, newChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(char oldChar, char newChar);" />
      <MemberSignature Language="F#" Value="member this.Replace : char * char -&gt; string" Usage="string.Replace (oldChar, newChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldChar" Type="System.Char" />
        <Parameter Name="newChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="oldChar">
          <span data-ttu-id="3723c-2521">바꿀 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2521">The Unicode character to be replaced.</span>
          </span>
        </param>
        <param name="newChar">
          <span data-ttu-id="3723c-2522">모든 <c>oldChar</c>를 바꿀 유니코드 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2522">The Unicode character to replace all occurrences of <c>oldChar</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2523">현재 인스턴스의 지정된 유니코드 문자가 지정된 다른 유니코드 문자로 모두 바뀌는 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2523">Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2524">
            <paramref name="oldChar" />의 모든 인스턴스를 <paramref name="newChar" />로 바꾼다는 점을 제외하고 이 인스턴스와 동일한 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2524">A string that is equivalent to this instance except that all instances of <paramref name="oldChar" /> are replaced with <paramref name="newChar" />.</span>
          </span>
          <span data-ttu-id="3723c-2525">
            <paramref name="oldChar" />를 현재 인스턴스에서 찾을 수 없으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2525">If <paramref name="oldChar" /> is not found in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2526">이 메서드는 서 수 (대/소문자 구분 및 문화권을 구분) 찾기 검색을 수행 `oldChar`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2526">This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldChar`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-2527">이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2527">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-2528">모두 바뀌는 새 문자열을 반환 하는 대신 `oldChar` 바뀝니다 `newChar`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2528">Instead, it returns a new string in which all occurrences of `oldChar` are replaced by `newChar`.</span></span>  
  
 <span data-ttu-id="3723c-2529">이 메서드는 수정 된 문자열을 반환 하므로 연결할 수 있습니다를 연속적으로 호출 된 <xref:System.String.Replace%2A> 원래 문자열에서 여러 대체를 수행 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2529">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="3723c-2530">메서드 호출 왼쪽에서 오른쪽으로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2530">Method calls are executed from left to right.</span></span> <span data-ttu-id="3723c-2531">다음 예제에서 이에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2531">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.String.Replace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace2.cs#2)]
 [!code-vb[System.String.Replace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace2.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2532">다음 예제에서는 일련의 숫자 사이 있는 공백 쉼표로 대체 하 여 쉼표로 구분 된 값 목록을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2532">The following example creates a comma separated value list by substituting commas for the blanks between a series of numbers.</span></span>  
  
 [!code-cpp[string.replace1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.replace1/CPP/string.replace1.cpp#1)]
 [!code-csharp[string.replace1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.replace1/CS/string.replace1.cs#1)]
 [!code-vb[string.replace1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.replace1/VB/string.replace1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string -&gt; string" Usage="string.Replace (oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" />
        <Parameter Name="newValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldValue">
          <span data-ttu-id="3723c-2533">바꿀 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2533">The string to be replaced.</span>
          </span>
        </param>
        <param name="newValue">
          <span data-ttu-id="3723c-2534">모든 <c>oldValue</c>를 바꿀 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2534">The string to replace all occurrences of <c>oldValue</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2535">현재 인스턴스의 지정된 문자열이 지정된 다른 문자열로 모두 바뀌는 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2535">Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2536">
            <paramref name="oldValue" />의 모든 인스턴스를 <paramref name="newValue" />로 바꾼다는 점을 제외하고 현재 문자열과 동일한 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2536">A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />.</span>
          </span>
          <span data-ttu-id="3723c-2537">
            <paramref name="oldValue" />를 현재 인스턴스에서 찾을 수 없으면 메서드가 변경되지 않은 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2537">If <paramref name="oldValue" /> is not found in the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2538">하는 경우 `newValue` 됩니다 `null`, 모든 `oldValue` 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2538">If `newValue` is `null`, all occurrences of `oldValue` are removed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-2539">이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2539">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-2540">모두 바뀌는 새 문자열을 반환 하는 대신 `oldValue` 바뀝니다 `newValue`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2540">Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`.</span></span>  
  
 <span data-ttu-id="3723c-2541">이 메서드는 서 수 (대/소문자 구분 및 문화권을 구분) 찾기 검색을 수행 `oldValue`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2541">This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldValue`.</span></span>  
  
 <span data-ttu-id="3723c-2542">이 메서드는 수정 된 문자열을 반환 하므로 연결할 수 있습니다를 연속적으로 호출 된 <xref:System.String.Replace%2A> 원래 문자열에서 여러 대체를 수행 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2542">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="3723c-2543">메서드 호출 왼쪽에서 오른쪽으로 실행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2543">Method calls are executed from left to right.</span></span> <span data-ttu-id="3723c-2544">다음 예제에서 이에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2544">The following example provides an illustration.</span></span>  
  
 [!code-csharp[System.String.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace1.cs#1)]
 [!code-vb[System.String.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2545">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.String.Replace%2A> 맞춤법 오류를 해결 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2545">The following example demonstrates how you can use the <xref:System.String.Replace%2A> method to correct a spelling error.</span></span>  
  
 [!code-cpp[stringreplace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringreplace/CPP/stringreplace.cpp#1)]
 [!code-csharp[stringreplace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringreplace/CS/stringreplace.cs#1)]
 [!code-vb[stringreplace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringreplace/VB/stringreplace.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2546">
            <paramref name="oldValue" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2546">
              <paramref name="oldValue" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-2547">
            <paramref name="oldValue" />가 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2547">
              <paramref name="oldValue" /> is the empty string ("").</span>
          </span>
        </exception>
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String, comparisonType As StringComparison) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * StringComparison -&gt; string" Usage="string.Replace (oldValue, newValue, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" />
        <Parameter Name="newValue" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="oldValue">To be added.</param>
        <param name="newValue">To be added.</param>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String, ignoreCase As Boolean, culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * bool * System.Globalization.CultureInfo -&gt; string" Usage="string.Replace (oldValue, newValue, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" />
        <Parameter Name="newValue" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="oldValue">To be added.</param>
        <param name="newValue">To be added.</param>
        <param name="ignoreCase">To be added.</param>
        <param name="culture">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Split">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2548">지정된 문자열 또는 유니코드 문자 배열의 요소로 구분된 이 인스턴스의 부분 문자열이 포함된 문자열 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2548">Returns a string array that contains the substrings in this instance that are delimited by elements of a specified string or Unicode character array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2549"><xref:System.String.Split%2A> 문자열로 구분 된 문자열을 중단 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2549"><xref:System.String.Split%2A> is used to break a delimited string into substrings.</span></span> <span data-ttu-id="3723c-2550">문자 배열 중 하나를 사용 하 여 0, 1 또는 여러 구분 문자를 지정 하려면 (의 <xref:System.String.Split%28System.Char%5B%5D%29> 메서드), 0, 1 또는 여러 개의 구분 기호 문자열을 지정 하는 문자 배열에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2550">You can use either a character array to specify zero, one, or multiple delimiting characters (the <xref:System.String.Split%28System.Char%5B%5D%29> method), or you can use a character array to specify zero, one, or multiple delimiting strings.</span></span> <span data-ttu-id="3723c-2551">오버 로드는 <xref:System.String.Split%2A> 메서드를 통해 메서드에서 반환 하는 부분 문자열의 수를 제한할 수 있습니다 (합니다 <xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%29> 메서드) 빈 문자열이 반환 된 부분 문자열에 포함 되는지 여부를 확인 하기 (는 <xref:System.String.Split%28System.Char%5B%5D%2CSystem.StringSplitOptions%29> 및 <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29> 메서드 또는 작업을 모두 (합니다 <xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29> 및 <xref:System.String.Split%28System.String%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29> 메서드).</span><span class="sxs-lookup"><span data-stu-id="3723c-2551">Overloads of the <xref:System.String.Split%2A> method allow you to limit the number of substrings returned by the method (the <xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%29> method), to determine whether empty strings are included in the returned substrings (the <xref:System.String.Split%28System.Char%5B%5D%2CSystem.StringSplitOptions%29> and <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29> methods, or to do both (the <xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29> and <xref:System.String.Split%28System.String%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29> methods).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3723c-2552">보다 자세한 정보에 대 한 합니다 <xref:System.String.Split%2A> 개별 오버 로드에 대 한 설명서를 참조 하는 메서드를 호출 하는 예제는 물론 각 오버 로드 <xref:System.String.Split%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2552">For more detailed information on the <xref:System.String.Split%2A> method, as well as for examples that call each overload, see the documentation for the individual overloads of <xref:System.String.Split%2A>.</span></span>  
  
 <span data-ttu-id="3723c-2553"><xref:System.String.Split%2A> 메서드는 항상 구분 된 문자열을 부분 문자열을 분할 하는 가장 좋은 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2553">The <xref:System.String.Split%2A> method is not always the best way to break a delimited string into substrings.</span></span> <span data-ttu-id="3723c-2554">모든 구분된 된 문자열의 부분 문자열을 추출 하지 않으려는 경우 또는 구분 기호 문자 집합이 아니라 패턴에 따라 문자열을 구문 분석 하려는 경우 다음 대안을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2554">If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.</span></span>  
  
## <a name="regular-expressions"></a><span data-ttu-id="3723c-2555">정규식</span><span class="sxs-lookup"><span data-stu-id="3723c-2555">Regular expressions</span></span>  
 <span data-ttu-id="3723c-2556">문자열 고정된 패턴을 준수 하는 경우 압축을 풀고 해당 요소를 처리 하는 정규식을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2556">If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements.</span></span> <span data-ttu-id="3723c-2557">예를 들어 문자열 형태로 "*수* *피연산자* *번호*" 사용할 수는 [정규식](~/docs/standard/base-types/regular-expressions.md) 압축을 풀어 처리는 문자열의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2557">For example, if strings take the form "*number* *operand* *number*" you can use a [regular expression](~/docs/standard/base-types/regular-expressions.md) to extract and handle the string's elements.</span></span> <span data-ttu-id="3723c-2558">예를 들면 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2558">Here's an example:</span></span>  
  
 [!code-csharp[System.String.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt1.cs#8)]
 [!code-vb[System.String.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt1.vb#8)]  
  
 <span data-ttu-id="3723c-2559">정규식 패턴 `(\d+)\s+([-+*/])\s+(\d+)` 다음과 같이 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2559">The regular expression pattern `(\d+)\s+([-+*/])\s+(\d+)` is defined like this:</span></span>  
  
|<span data-ttu-id="3723c-2560">무늬</span><span class="sxs-lookup"><span data-stu-id="3723c-2560">Pattern</span></span>|<span data-ttu-id="3723c-2561">설명</span><span class="sxs-lookup"><span data-stu-id="3723c-2561">Description</span></span>|  
|-------------|-----------------|  
|`(\d+)`|<span data-ttu-id="3723c-2562">하나 이상의 10진수 숫자가 일치하는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2562">Match one or more decimal digits.</span></span> <span data-ttu-id="3723c-2563">이 그룹은 첫 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2563">This is the first capturing group.</span></span>|  
|`\s+`|<span data-ttu-id="3723c-2564">하나 이상의 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2564">Match one or more whitespace characters.</span></span>|  
|`([-+*/])`|<span data-ttu-id="3723c-2565">일치는 산술 연산자 기호 (+,-, \*, 또는 /).</span><span class="sxs-lookup"><span data-stu-id="3723c-2565">Match an arithmetic operator sign (+, -, \*, or /).</span></span> <span data-ttu-id="3723c-2566">이 그룹은 두 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2566">This is the second capturing group.</span></span>|  
|`\s+`|<span data-ttu-id="3723c-2567">하나 이상의 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2567">Match one or more whitespace characters.</span></span>|  
|`(\d+)`|<span data-ttu-id="3723c-2568">하나 이상의 10진수 숫자가 일치하는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2568">Match one or more decimal digits.</span></span> <span data-ttu-id="3723c-2569">이 그룹은 세 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2569">This is the third capturing group.</span></span>|  
  
 <span data-ttu-id="3723c-2570">또한 고정된 문자 집합이 아닌 패턴을 기반으로 문자열에서 부분 문자열을 추출 하는 정규식을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2570">You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters.</span></span> <span data-ttu-id="3723c-2571">이러한 조건 중 하나가 발생 하면 일반적인 시나리오입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2571">This is a common scenario when either of these conditions occurs:</span></span>  
  
-   <span data-ttu-id="3723c-2572">하나 이상의 구분 기호 문자를 처리 하지 않는 경우 항상에서 구분 기호로 <xref:System.String> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="3723c-2572">One or more of the delimiter characters does not always serve as a delimiter in the <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="3723c-2573">순서 및 구분 기호 문자의 수를 변수 이거나 알 수는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2573">The sequence and number of delimiter characters is variable or unknown.</span></span>  
  
 <span data-ttu-id="3723c-2574">예를 들어, 합니다 <xref:System.String.Split%2A> 때문에 다음 문자열을 분할 메서드를 사용할 수 없습니다 수가 `\n` (에서 C#) 또는 `vbCrLf` (Visual Basic)의 문자는 변수 이며 항상 구분 기호로 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2574">For example, the <xref:System.String.Split%2A> method cannot be used to split the following string, because the number of `\n` (in C#) or `vbCrLf` (in Visual Basic) characters is variable, and they don't always serve as delimiters.</span></span>  
  
```  
  
[This is captured\ntext.]\n\n[\n[This is more captured text.]\n]  
\n[Some more captured text:\n   Option1\n   Option2][Terse text.]  
  
```  
  
 <span data-ttu-id="3723c-2575">정규식을 쉽게 다음 예와 같이이 문자열을 분할할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2575">A regular expression can split this string easily, as the following example shows.</span></span>  
  
 [!code-csharp[System.String.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt2.cs#9)]
 [!code-vb[System.String.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt2.vb#9)]  
  
 <span data-ttu-id="3723c-2576">정규식 패턴 `\[([^\[\]]+)\]` 다음과 같이 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2576">The regular expression pattern `\[([^\[\]]+)\]` is defined like this:</span></span>  
  
|<span data-ttu-id="3723c-2577">무늬</span><span class="sxs-lookup"><span data-stu-id="3723c-2577">Pattern</span></span>|<span data-ttu-id="3723c-2578">설명</span><span class="sxs-lookup"><span data-stu-id="3723c-2578">Description</span></span>|  
|-------------|-----------------|  
|`\[`|<span data-ttu-id="3723c-2579">여는 대괄호와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2579">Match an opening bracket.</span></span>|  
|`([^\[\]]+)`|<span data-ttu-id="3723c-2580">없는 열거나 닫는 대괄호를 한 번 이상 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2580">Match any character that is not an opening or a closing bracket one or more times.</span></span> <span data-ttu-id="3723c-2581">이 그룹은 첫 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2581">This is the first capturing group.</span></span>|  
|`\]`|<span data-ttu-id="3723c-2582">닫는 괄호를 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2582">Match a closing bracket.</span></span>|  
  
 <span data-ttu-id="3723c-2583">합니다 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 메서드는 거의 동일 <xref:System.String.Split%2A?displayProperty=nameWithType>고정된 문자 집합 대신 정규식 패턴에 따라 문자열을 분할 하는 점을 제외 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2583">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method is almost identical to <xref:System.String.Split%2A?displayProperty=nameWithType>, except that it splits a string based on a regular expression pattern instead of a fixed character set.</span></span> <span data-ttu-id="3723c-2584">예를 들어, 다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 하이픈와 기타 문자 다양 한 조합으로 구분 하는 부분 문자열을 포함 하는 문자열을 분할 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2584">For example, the following example uses the <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method to split a string that contains substrings delimited by various combinations of hyphens and other characters.</span></span>  
  
 [!code-csharp[System.String.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt3.cs#10)]
 [!code-vb[System.String.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt3.vb#10)]  
  
 <span data-ttu-id="3723c-2585">정규식 패턴 `\s-\s?[+*]?\s?-\s` 다음과 같이 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2585">The regular expression pattern `\s-\s?[+*]?\s?-\s` is defined like this:</span></span>  
  
|<span data-ttu-id="3723c-2586">무늬</span><span class="sxs-lookup"><span data-stu-id="3723c-2586">Pattern</span></span>|<span data-ttu-id="3723c-2587">설명</span><span class="sxs-lookup"><span data-stu-id="3723c-2587">Description</span></span>|  
|-------------|-----------------|  
|`\s-`|<span data-ttu-id="3723c-2588">하이픈 뒤에 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2588">Match a whitespace character followed by a hyphen.</span></span>|  
|`\s?`|<span data-ttu-id="3723c-2589">0 개 이상의 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2589">Match zero or one whitespace character.</span></span>|  
|`[+*]?`|<span data-ttu-id="3723c-2590">0 번 이상 찾습니다는 + 또는 \* 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2590">Match zero or one occurrence of either the + or \* character.</span></span>|  
|`\s?`|<span data-ttu-id="3723c-2591">0 개 이상의 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2591">Match zero or one whitespace character.</span></span>|  
|`-\s`|<span data-ttu-id="3723c-2592">공백 문자 뒤에 하이픈을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2592">Match a hyphen followed by a whitespace character.</span></span>|  
  
## <a name="search-methods-and-the-substring-method"></a><span data-ttu-id="3723c-2593">검색 방법 및 Substring 메서드</span><span class="sxs-lookup"><span data-stu-id="3723c-2593">Search methods and the Substring method</span></span>  
 <span data-ttu-id="3723c-2594">문자열의 부분 문자열의 모든 관심이 아닌 경우에 일치 하는 시작 되는 인덱스를 반환 하는 문자열 비교 방법 중 하나를 사용 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2594">If you aren't interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins.</span></span> <span data-ttu-id="3723c-2595">호출할 수 있습니다는 <xref:System.String.Substring%2A> 원하는 하위 문자열을 추출 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2595">You can then call the <xref:System.String.Substring%2A> method to extract the substring that you want.</span></span> <span data-ttu-id="3723c-2596">문자열 비교 메서드는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2596">The string comparison methods include:</span></span>  
  
-   <span data-ttu-id="3723c-2597"><xref:System.String.IndexOf%2A>에서 맨 처음 발견 되는 문자 또는 문자열의 0부터 시작 인덱스 문자열 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2597"><xref:System.String.IndexOf%2A>, which returns the zero-based index of the first occurrence of a character or string in a string instance.</span></span>  
  
-   <span data-ttu-id="3723c-2598"><xref:System.String.IndexOfAny%2A>에 현재 문자열 인스턴스가 문자 배열에 있는 문자 중 처음 나타나는 0부터 시작 인덱스를 반환 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2598"><xref:System.String.IndexOfAny%2A>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.</span></span>  
  
-   <span data-ttu-id="3723c-2599"><xref:System.String.LastIndexOf%2A>에 문자 또는 문자열의 마지막 요소의 0부터 시작 인덱스 문자열 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2599"><xref:System.String.LastIndexOf%2A>, which returns the zero-based index of the last occurrence of a character or string in a string instance.</span></span>  
  
-   <span data-ttu-id="3723c-2600"><xref:System.String.LastIndexOfAny%2A>을 현재 문자열 인스턴스에서 모든 문자는 문자 배열에서 마지막 요소의 0부터 시작 인덱스를 반환 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2600"><xref:System.String.LastIndexOfAny%2A>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.</span></span>  
  
 <span data-ttu-id="3723c-2601">다음 예제에서는 <xref:System.String.IndexOf%2A> 메서드를 문자열에서 기간을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2601">The following example uses the <xref:System.String.IndexOf%2A> method to find the periods in a string.</span></span> <span data-ttu-id="3723c-2602">사용 하 여는 <xref:System.String.Substring%2A> 전체 문장을 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2602">It then uses the <xref:System.String.Substring%2A> method to return full sentences.</span></span>  
  
 [!code-csharp[System.String.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt4.cs#11)]
 [!code-vb[System.String.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt4.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (params char[] separator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (ParamArray separator As Char()) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(... cli::array &lt;char&gt; ^ separator);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] -&gt; string[]" Usage="string.Split separator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator">
          <span data-ttu-id="3723c-2603">이 문자열의 부분 문자열을 구분하는 문자 배열, 구분 기호를 포함하지 않는 빈 배열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2603">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2604">문자열을 배열 내 문자에 기초하는 하위 문자열로 분할합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2604">Splits a string into substrings that are based on the characters in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2605">요소에 <paramref name="separator" />에 있는 하나 이상의 문자로 구분되는 이 인스턴스의 부분 문자열이 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2605">An array whose elements contain the substrings from this instance that are delimited by one or more characters in <paramref name="separator" />.</span>
          </span>
          <span data-ttu-id="3723c-2606">자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2606">For more information, see the Remarks section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2607">문자열은 알려진된 문자 집합으로 구분 되 면 하는 경우 사용할 수 있습니다는 <xref:System.String.Split%28System.Char%5B%5D%29> 부분 문자열을 구분 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2607">When a string is delimited by a known set of characters, you can use the <xref:System.String.Split%28System.Char%5B%5D%29> method to separate it into substrings.</span></span> <span data-ttu-id="3723c-2608">문자열에서 부분 문자열을 추출 하는 다른 방법에 대해서는 [String.Split에 대 한 대안](#Alternatives) 섹션입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2608">For other ways to extract substrings from a string, see the [Alternatives to String.Split](#Alternatives) section.</span></span>  
  
## <a name="return-value-details"></a><span data-ttu-id="3723c-2609">반환 값 정보</span><span class="sxs-lookup"><span data-stu-id="3723c-2609">Return value details</span></span>  
 <span data-ttu-id="3723c-2610">구분 기호 문자는 반환 된 배열의 요소에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2610">Delimiter characters are not included in the elements of the returned array.</span></span> <span data-ttu-id="3723c-2611">예를 들어, 배열 구분 기호 문자를 포함 하는 경우 "-"는 현재 문자열 인스턴스가의 값은 "cc-aa-bb", 메서드 3 개 요소가 포함 된 배열을 반환 하 고: "aa", "bb" 및 "cc"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2611">For example, if the separator array includes the character "-" and the value of the current string instance is "aa-bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>  
  
 <span data-ttu-id="3723c-2612">이 인스턴스가 없는 경우에 문자 `separator`, 반환된 된 배열에이 인스턴스를 포함 하는 단일 요소로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2612">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span>  
  
 <span data-ttu-id="3723c-2613">각 요소의 `separator` 별도 구분 기호 문자를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2613">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="3723c-2614">반환 된 배열의 해당 요소를 포함 하는 경우 두 구분 기호는 서로 인접 하는 구분 기호의 시작과 끝이 인스턴스의 위치, <xref:System.String.Empty>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2614">If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding element in the returned array contains <xref:System.String.Empty>.</span></span> <span data-ttu-id="3723c-2615">다음은 몇 가지 예입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2615">Here are some examples:</span></span>  
  
|<span data-ttu-id="3723c-2616">문자열 값</span><span class="sxs-lookup"><span data-stu-id="3723c-2616">String value</span></span>|<span data-ttu-id="3723c-2617">구분 기호</span><span class="sxs-lookup"><span data-stu-id="3723c-2617">Separator</span></span>|<span data-ttu-id="3723c-2618">반환 된 배열</span><span class="sxs-lookup"><span data-stu-id="3723c-2618">Returned array</span></span>|  
|------------------|---------------|--------------------|  
|<span data-ttu-id="3723c-2619">"42, 12, 19"</span><span class="sxs-lookup"><span data-stu-id="3723c-2619">"42, 12, 19"</span></span>|<span data-ttu-id="3723c-2620">new Char {',', ' '을 (를) (C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2620">new Char[] {',', ' '} (C#)</span></span><br /><br /> <span data-ttu-id="3723c-2621">Char () = {"," c "" c}) (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2621">Char() = {","c, " "c}) (Visual Basic)</span></span>|<span data-ttu-id="3723c-2622">{"42", "", "12", "", "19"}</span><span class="sxs-lookup"><span data-stu-id="3723c-2622">{"42", "", "12", "", "19"}</span></span>|  
|<span data-ttu-id="3723c-2623">"42..12..19"</span><span class="sxs-lookup"><span data-stu-id="3723c-2623">"42..12..19"</span></span>|<span data-ttu-id="3723c-2624">new 문자 {0} '.'}</span><span class="sxs-lookup"><span data-stu-id="3723c-2624">new Char[] {'.'}</span></span> <span data-ttu-id="3723c-2625">(C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2625">(C#)</span></span><br /><br /> <span data-ttu-id="3723c-2626">Char () = {"." c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2626">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="3723c-2627">{"42", "", "12", "", "19"}</span><span class="sxs-lookup"><span data-stu-id="3723c-2627">{"42", "", "12", "", "19"}</span></span>|  
|<span data-ttu-id="3723c-2628">"Banana"</span><span class="sxs-lookup"><span data-stu-id="3723c-2628">"Banana"</span></span>|<span data-ttu-id="3723c-2629">new 문자 {0} '.'}</span><span class="sxs-lookup"><span data-stu-id="3723c-2629">new Char[] {'.'}</span></span> <span data-ttu-id="3723c-2630">(C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2630">(C#)</span></span><br /><br /> <span data-ttu-id="3723c-2631">Char () = {"." c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2631">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="3723c-2632">{"Banana"}</span><span class="sxs-lookup"><span data-stu-id="3723c-2632">{"Banana"}</span></span>|  
|<span data-ttu-id="3723c-2633">"Darb\nSmarba" (C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2633">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="3723c-2634">"Darb" vbLf & "Smarba" (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2634">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="3723c-2635">new Char {} (C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2635">new Char[] {} (C#)</span></span><br /><br /> <span data-ttu-id="3723c-2636">Char () = {} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2636">Char() = {} (Visual Basic)</span></span>|<span data-ttu-id="3723c-2637">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="3723c-2637">{"Darb", "Smarba"}</span></span>|  
|<span data-ttu-id="3723c-2638">"Darb\nSmarba" (C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2638">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="3723c-2639">"Darb" vbLf & "Smarba" (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2639">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="3723c-2640">null(C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2640">null (C#)</span></span><br /><br /> <span data-ttu-id="3723c-2641">Nothing(Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2641">Nothing (Visual Basic)</span></span>|<span data-ttu-id="3723c-2642">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="3723c-2642">{"Darb", "Smarba"}</span></span>|  
  
## <a name="the-separator-array"></a><span data-ttu-id="3723c-2643">구분 기호 배열</span><span class="sxs-lookup"><span data-stu-id="3723c-2643">The separator array</span></span>  
 <span data-ttu-id="3723c-2644">각 요소의 구분 기호는 단일 문자로 구성 된 별도 구분 기호를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2644">Each element of separator defines a separate delimiter that consists of a single character.</span></span> <span data-ttu-id="3723c-2645">경우는 `separator` 인수가 `null` 문자가 없는 또는 메서드는 구분 기호로 공백 문자를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2645">If the `separator` argument is `null` or contains no characters, the method treats white-space characters as the delimiters.</span></span> <span data-ttu-id="3723c-2646">공백 문자는 유니코드 표준; 정의 돌아왔을 `true` 에 전달 하는 경우는 <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2646">White-space characters are defined by the Unicode standard; they return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
## <a name="stringsplitchar-and-compiler-overload-resolution"></a><span data-ttu-id="3723c-2647">String.Split(Char[]) 및 컴파일러 오버 로드 확인</span><span class="sxs-lookup"><span data-stu-id="3723c-2647">String.Split(Char[]) and compiler overload resolution</span></span>  
 <span data-ttu-id="3723c-2648">하지만이 오버 로드에 대 한 단일 매개 변수 <xref:System.String.Split%2A?displayProperty=nameWithType> 를 문자 배열에는 다음 예제와 같이 단일 문자를 사용 하 여 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2648">Although the single parameter for this overload of <xref:System.String.Split%2A?displayProperty=nameWithType> is a character array, you can call it with a single character, as the following example shows.</span></span>  
  
 [!code-csharp[System.String.Split#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/Split_CompilerResolution1.cs#12)]
 [!code-vb[System.String.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/Split_CompilerResolution1.vb#12)]  
  
 <span data-ttu-id="3723c-2649">때문에 `separator` 으로 데코 레이트 된 매개 변수는 <xref:System.ParamArrayAttribute> 특성인 컴파일러는 단일 요소 문자 배열로 단일 문자를 해석 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2649">Because the `separator` parameter is decorated  with the <xref:System.ParamArrayAttribute> attribute, compilers will interpret a single character as a single-element character array.</span></span> <span data-ttu-id="3723c-2650">다른 경우 이것이 <xref:System.String.Split%2A?displayProperty=nameWithType> 포함 하는 오버 로드를 `separator` 매개 변수 명시적으로 전달 해야 이러한 오버 로드로 문자 배열은 `separator` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2650">This is not the case for other <xref:System.String.Split%2A?displayProperty=nameWithType> overloads that include a `separator` parameter; you must explicitly pass these overloads a character array as the `separator` argument.</span></span>  
  
## <a name="comparison-details"></a><span data-ttu-id="3723c-2651">비교 세부 정보</span><span class="sxs-lookup"><span data-stu-id="3723c-2651">Comparison details</span></span>  
 <span data-ttu-id="3723c-2652">합니다 <xref:System.String.Split%28System.Char%5B%5D%29> 의 문자를 하나 이상의 구분 되는이 문자열의 부분 문자열을 추출 하는 메서드는 `separator` 배열 및 배열 요소로 해당 부분 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2652">The <xref:System.String.Split%28System.Char%5B%5D%29> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` array, and returns those substrings as elements of an array.</span></span>  
  
 <span data-ttu-id="3723c-2653"><xref:System.String.Split%28System.Char%5B%5D%29> 메서드가 서 수 대/소문자 구분 정렬 규칙을 사용 하 여 비교를 수행 하 여 구분 기호를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2653">The <xref:System.String.Split%28System.Char%5B%5D%29> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="3723c-2654">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2654">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>  
  
<a name="Alternatives"></a>   
## <a name="alternatives-to-stringsplit"></a><span data-ttu-id="3723c-2655">String.Split에 대 한 대안</span><span class="sxs-lookup"><span data-stu-id="3723c-2655">Alternatives to String.Split</span></span>  
 <span data-ttu-id="3723c-2656"><xref:System.String.Split%2A> 메서드는 항상 구분 된 문자열을 부분 문자열을 분할 하는 가장 좋은 방법은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2656">The <xref:System.String.Split%2A> method is not always the best way to break a delimited string into substrings.</span></span> <span data-ttu-id="3723c-2657">모든 구분된 된 문자열의 부분 문자열을 추출 하지 않으려는 경우 또는 구분 기호 문자 집합이 아니라 패턴에 따라 문자열을 구문 분석 하려는 경우 다음 대안을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2657">If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.</span></span>  
  
### <a name="regular-expressions"></a><span data-ttu-id="3723c-2658">정규식</span><span class="sxs-lookup"><span data-stu-id="3723c-2658">Regular expressions</span></span>  
 <span data-ttu-id="3723c-2659">문자열 고정된 패턴을 준수 하는 경우 압축을 풀고 해당 요소를 처리 하는 정규식을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2659">If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements.</span></span> <span data-ttu-id="3723c-2660">예를 들어 문자열 형태로 "*수* *피연산자* *번호*" 사용할 수는 [정규식](~/docs/standard/base-types/regular-expressions.md) 압축을 풀어 처리는 문자열의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2660">For example, if strings take the form "*number* *operand* *number*" you can use a [regular expression](~/docs/standard/base-types/regular-expressions.md) to extract and handle the string's elements.</span></span> <span data-ttu-id="3723c-2661">예를 들면 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2661">Here's an example:</span></span>  
  
 [!code-csharp[System.String.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt1.cs#8)]
 [!code-vb[System.String.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt1.vb#8)]  
  
 <span data-ttu-id="3723c-2662">정규식 패턴 `(\d+)\s+([-+*/])\s+(\d+)` 다음과 같이 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2662">The regular expression pattern `(\d+)\s+([-+*/])\s+(\d+)` is defined like this:</span></span>  
  
|<span data-ttu-id="3723c-2663">무늬</span><span class="sxs-lookup"><span data-stu-id="3723c-2663">Pattern</span></span>|<span data-ttu-id="3723c-2664">설명</span><span class="sxs-lookup"><span data-stu-id="3723c-2664">Description</span></span>|  
|-------------|-----------------|  
|`(\d+)`|<span data-ttu-id="3723c-2665">하나 이상의 10진수 숫자가 일치하는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2665">Match one or more decimal digits.</span></span> <span data-ttu-id="3723c-2666">이 그룹은 첫 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2666">This is the first capturing group.</span></span>|  
|`\s+`|<span data-ttu-id="3723c-2667">하나 이상의 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2667">Match one or more whitespace characters.</span></span>|  
|`([-+*/])`|<span data-ttu-id="3723c-2668">일치는 산술 연산자 기호 (+,-, \*, 또는 /).</span><span class="sxs-lookup"><span data-stu-id="3723c-2668">Match an arithmetic operator sign (+, -, \*, or /).</span></span> <span data-ttu-id="3723c-2669">이 그룹은 두 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2669">This is the second capturing group.</span></span>|  
|`\s+`|<span data-ttu-id="3723c-2670">하나 이상의 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2670">Match one or more whitespace characters.</span></span>|  
|`(\d+)`|<span data-ttu-id="3723c-2671">하나 이상의 10진수 숫자가 일치하는지 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2671">Match one or more decimal digits.</span></span> <span data-ttu-id="3723c-2672">이 그룹은 세 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2672">This is the third capturing group.</span></span>|  
  
 <span data-ttu-id="3723c-2673">또한 고정된 문자 집합이 아닌 패턴을 기반으로 문자열에서 부분 문자열을 추출 하는 정규식을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2673">You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters.</span></span> <span data-ttu-id="3723c-2674">이러한 조건 중 하나가 발생 하면 일반적인 시나리오입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2674">This is a common scenario when either of these conditions occurs:</span></span>  
  
-   <span data-ttu-id="3723c-2675">하나 이상의 구분 기호 문자를 처리 하지 않는 경우 항상에서 구분 기호로 <xref:System.String> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="3723c-2675">One or more of the delimiter characters does not always serve as a delimiter in the <xref:System.String> instance.</span></span>  
  
-   <span data-ttu-id="3723c-2676">순서 및 구분 기호 문자의 수를 변수 이거나 알 수는 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2676">The sequence and number of delimiter characters is variable or unknown.</span></span>  
  
 <span data-ttu-id="3723c-2677">예를 들어, 합니다 <xref:System.String.Split%2A> 때문에 다음 문자열을 분할 메서드를 사용할 수 없습니다 수가 `\n` (에서 C#) 또는 `vbCrLf` (Visual Basic)의 문자는 변수 이며 항상 구분 기호로 사용 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2677">For example, the <xref:System.String.Split%2A> method cannot be used to split the following string, because the number of `\n` (in C#) or `vbCrLf` (in Visual Basic) characters is variable, and they don't always serve as delimiters.</span></span>  
  
```  
  
[This is captured\ntext.]\n\n[\n[This is more captured text.]\n]  
\n[Some more captured text:\n   Option1\n   Option2][Terse text.]  
  
```  
  
 <span data-ttu-id="3723c-2678">정규식을 쉽게 다음 예와 같이이 문자열을 분할할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2678">A regular expression can split this string easily, as the following example shows.</span></span>  
  
 [!code-csharp[System.String.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt2.cs#9)]
 [!code-vb[System.String.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt2.vb#9)]  
  
 <span data-ttu-id="3723c-2679">정규식 패턴 `\[([^\[\]]+)\]` 다음과 같이 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2679">The regular expression pattern `\[([^\[\]]+)\]` is defined like this:</span></span>  
  
|<span data-ttu-id="3723c-2680">무늬</span><span class="sxs-lookup"><span data-stu-id="3723c-2680">Pattern</span></span>|<span data-ttu-id="3723c-2681">설명</span><span class="sxs-lookup"><span data-stu-id="3723c-2681">Description</span></span>|  
|-------------|-----------------|  
|`\[`|<span data-ttu-id="3723c-2682">여는 대괄호와 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2682">Match an opening bracket.</span></span>|  
|`([^\[\]]+)`|<span data-ttu-id="3723c-2683">없는 열거나 닫는 대괄호를 한 번 이상 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2683">Match any character that is not an opening or a closing bracket one or more times.</span></span> <span data-ttu-id="3723c-2684">이 그룹은 첫 번째 캡처링 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2684">This is the first capturing group.</span></span>|  
|`\]`|<span data-ttu-id="3723c-2685">닫는 괄호를 일치 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2685">Match a closing bracket.</span></span>|  
  
 <span data-ttu-id="3723c-2686">합니다 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 메서드는 거의 동일 <xref:System.String.Split%2A?displayProperty=nameWithType>고정된 문자 집합 대신 정규식 패턴에 따라 문자열을 분할 하는 점을 제외 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2686">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method is almost identical to <xref:System.String.Split%2A?displayProperty=nameWithType>, except that it splits a string based on a regular expression pattern instead of a fixed character set.</span></span> <span data-ttu-id="3723c-2687">예를 들어, 다음 예제에서는 <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> 하이픈와 기타 문자 다양 한 조합으로 구분 하는 부분 문자열을 포함 하는 문자열을 분할 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2687">For example, the following example uses the <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method to split a string that contains substrings delimited by various combinations of hyphens and other characters.</span></span>  
  
 [!code-csharp[System.String.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt3.cs#10)]
 [!code-vb[System.String.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt3.vb#10)]  
  
 <span data-ttu-id="3723c-2688">정규식 패턴 `\s-\s?[+*]?\s?-\s` 다음과 같이 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2688">The regular expression pattern `\s-\s?[+*]?\s?-\s` is defined like this:</span></span>  
  
|<span data-ttu-id="3723c-2689">무늬</span><span class="sxs-lookup"><span data-stu-id="3723c-2689">Pattern</span></span>|<span data-ttu-id="3723c-2690">설명</span><span class="sxs-lookup"><span data-stu-id="3723c-2690">Description</span></span>|  
|-------------|-----------------|  
|`\s-`|<span data-ttu-id="3723c-2691">하이픈 뒤에 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2691">Match a whitespace character followed by a hyphen.</span></span>|  
|`\s?`|<span data-ttu-id="3723c-2692">0 개 이상의 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2692">Match zero or one whitespace character.</span></span>|  
|`[+*]?`|<span data-ttu-id="3723c-2693">0 번 이상 찾습니다는 + 또는 \* 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2693">Match zero or one occurrence of either the + or \* character.</span></span>|  
|`\s?`|<span data-ttu-id="3723c-2694">0 개 이상의 공백 문자를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2694">Match zero or one whitespace character.</span></span>|  
|`-\s`|<span data-ttu-id="3723c-2695">공백 문자 뒤에 하이픈을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2695">Match a hyphen followed by a whitespace character.</span></span>|  
  
### <a name="search-methods-and-the-substring-method"></a><span data-ttu-id="3723c-2696">검색 방법 및 Substring 메서드</span><span class="sxs-lookup"><span data-stu-id="3723c-2696">Search methods and the Substring method</span></span>  
 <span data-ttu-id="3723c-2697">문자열의 부분 문자열의 모든 관심이 아닌 경우에 일치 하는 시작 되는 인덱스를 반환 하는 문자열 비교 방법 중 하나를 사용 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2697">If you aren't interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins.</span></span> <span data-ttu-id="3723c-2698">호출할 수 있습니다는 <xref:System.String.Substring%2A> 원하는 하위 문자열을 추출 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2698">You can then call the <xref:System.String.Substring%2A> method to extract the substring that you want.</span></span> <span data-ttu-id="3723c-2699">문자열 비교 메서드는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2699">The string comparison methods include:</span></span>  
  
-   <span data-ttu-id="3723c-2700"><xref:System.String.IndexOf%2A>에서 맨 처음 발견 되는 문자 또는 문자열의 0부터 시작 인덱스 문자열 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2700"><xref:System.String.IndexOf%2A>, which returns the zero-based index of the first occurrence of a character or string in a string instance.</span></span>  
  
-   <span data-ttu-id="3723c-2701"><xref:System.String.IndexOfAny%2A>에 현재 문자열 인스턴스가 문자 배열에 있는 문자 중 처음 나타나는 0부터 시작 인덱스를 반환 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2701"><xref:System.String.IndexOfAny%2A>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.</span></span>  
  
-   <span data-ttu-id="3723c-2702"><xref:System.String.LastIndexOf%2A>에 문자 또는 문자열의 마지막 요소의 0부터 시작 인덱스 문자열 인스턴스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2702"><xref:System.String.LastIndexOf%2A>, which returns the zero-based index of the last occurrence of a character or string in a string instance.</span></span>  
  
-   <span data-ttu-id="3723c-2703"><xref:System.String.LastIndexOfAny%2A>을 현재 문자열 인스턴스에서 모든 문자는 문자 배열에서 마지막 요소의 0부터 시작 인덱스를 반환 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2703"><xref:System.String.LastIndexOfAny%2A>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.</span></span>  
  
 <span data-ttu-id="3723c-2704">다음 예제에서는 <xref:System.String.IndexOf%2A> 메서드를 문자열에서 기간을 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2704">The following example uses the <xref:System.String.IndexOf%2A> method to find the periods in a string.</span></span> <span data-ttu-id="3723c-2705">사용 하 여는 <xref:System.String.Substring%2A> 전체 문장을 반환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2705">It then uses the <xref:System.String.Substring%2A> method to return full sentences.</span></span>  
  
 [!code-csharp[System.String.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt4.cs#11)]
 [!code-vb[System.String.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt4.vb#11)]  
  
## <a name="performance-considerations"></a><span data-ttu-id="3723c-2706">성능 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-2706">Performance Considerations</span></span>  
 <span data-ttu-id="3723c-2707">합니다 <xref:System.String.Split%2A> 메서드는 반환된 된 배열 개체에 대 한 메모리를 할당 및 <xref:System.String> 각 배열 요소에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2707">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="3723c-2708">응용 프로그램에 필요한 최적의 성능, 메모리 할당을 관리 하는 것이 중요 응용 프로그램 사용을 고려 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2708">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method.</span></span> <span data-ttu-id="3723c-2709">사용 하는 옵션도 있습니다를 <xref:System.String.Compare%2A> 문자열 내에서 부분 문자열을 찾을 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2709">You also have the option of using the <xref:System.String.Compare%2A> method to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="3723c-2710">구분 기호 문자에서 문자열을 분할 하려면 사용 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 문자열의 구분 기호 문자를 찾는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2710">To split a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="3723c-2711">구분 기호 문자열에서 문자열을 분할 하려면 사용 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 구분 기호 문자열의 첫 번째 문자를 찾기 위해 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2711">To split a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="3723c-2712">사용 하 여는 <xref:System.String.Compare%2A> 첫 번째 문자는 다음 구분 기호 문자열의 나머지 문자는와 같은지 여부를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2712">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="3723c-2713">또한 동일한 설정의 경우 문자는 여러에서 문자열을 분할 하 <xref:System.String.Split%2A> 메서드 호출을 단일 배열을 만들고 각 메서드 호출에서 참조 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2713">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="3723c-2714">이렇게 하면 각 메서드 호출의 추가 오버 헤드를 크게 줄어듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2714">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2715">다음 예제에서는 구분 기호로 공백 및 문장 부호를 처리 하 여 텍스트 블록에서 개별 단어를 추출 하는 방법에 설명 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2715">The following example demonstrates how to extract individual words from a block of text by treating white space and punctuation marks as delimiters.</span></span> <span data-ttu-id="3723c-2716">문자 배열에 전달 합니다 `separator` 의 매개 변수는 <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> 메서드 공백 문자 및 일부 일반적인 문장 부호 기호 함께 탭 문자를 구성 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2716">The character array passed to the `separator` parameter of the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method consists of a space character and a tab character, together with some common punctuation symbols.</span></span>  
  
 [!code-csharp[System.String.Split#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split2.cs#2)]
 [!code-vb[System.String.Split#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2717">
            <para>에 [! INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 및 이전 버전에서 경우는 <see cref="M:System.String.Split(System.Char[])" /> 메서드에 전달 됩니다는 <paramref name="separator" /> 즉 <see langword="null" /> 문자가 없는 또는 메서드 약간 다른 문자 집합을 사용 하 여 분할 합니다 문자열 보다는 <see cref="M:System.String.Trim(System.Char[])" /> 메서드는 문자열을 트리밍하는 않습니다. 에 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 두 방법 모두 유니코드 공백 문자가의 동일한 집합을 사용 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2717">
              <para>In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string. In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], both methods use an identical set of Unicode white-space characters.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char separator, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : char * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), count As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, int count);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] * int -&gt; string[]" Usage="string.Split (separator, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="separator">
          <span data-ttu-id="3723c-2718">이 문자열의 부분 문자열을 구분하는 문자 배열, 구분 기호를 포함하지 않는 빈 배열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2718">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-2719">반환할 부분 문자열의 최대 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2719">The maximum number of substrings to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2720">배열에 있는 문자에 따라 최대 개수의 부분 문자열로 문자열을 분할합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2720">Splits a string into a maximum number of substrings based on the characters in an array.</span>
          </span>
          <span data-ttu-id="3723c-2721">반환할 부분 문자열의 최대 수도 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2721">You also specify the maximum number of substrings to return.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2722">해당 요소에 <paramref name="separator" />에 있는 하나 이상의 문자로 구분되는 이 인스턴스의 부분 문자열이 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2722">An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator" />.</span>
          </span>
          <span data-ttu-id="3723c-2723">자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2723">For more information, see the Remarks section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2724">구분 기호 문자는 반환 된 배열의 요소에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2724">Delimiter characters are not included in the elements of the returned array.</span></span>  
  
 <span data-ttu-id="3723c-2725">이 인스턴스가 없는 경우에 문자 `separator`, 반환된 된 배열에이 인스턴스를 포함 하는 단일 요소로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2725">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span> <span data-ttu-id="3723c-2726">경우 `count` 가 0 이면 빈 배열이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2726">If `count` is zero, an empty array is returned.</span></span>  
  
 <span data-ttu-id="3723c-2727">경우는 `separator` 매개 변수는 `null` 문자가 없는 또는 공백 문자를 구분 기호로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2727">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="3723c-2728">공백 문자는 유니코드 표준 및 반환 정의한 `true` 에 전달 하는 경우는 <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2728">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="3723c-2729">각 요소의 `separator` 별도 구분 기호 문자를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2729">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="3723c-2730">해당 배열 요소를 포함 하는 경우 두 구분 기호는 서로 인접 하는 구분 기호의 시작과 끝이 인스턴스의 위치, <xref:System.String.Empty>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2730">If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="3723c-2731">있는 경우 둘 `count` 이 인스턴스의 부분 문자열이 첫 번째 `count` 빼기 1 부분 문자열에서 첫 번째 반환 됩니다 `count` 반환 값을이 인스턴스의 나머지 문자 요소는 마지막에 반환 됩니다 반환 값의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2731">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>  
  
 <span data-ttu-id="3723c-2732">경우 `count` 수보다 큰 부분을 사용할 수 있는 부분 문자열 반환 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2732">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>  
  
 <span data-ttu-id="3723c-2733">다음 표에서 예제를 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2733">The following table provides examples.</span></span>  
  
|<span data-ttu-id="3723c-2734">문자열 값</span><span class="sxs-lookup"><span data-stu-id="3723c-2734">String value</span></span>|<span data-ttu-id="3723c-2735">구분 기호</span><span class="sxs-lookup"><span data-stu-id="3723c-2735">Separator</span></span>|<span data-ttu-id="3723c-2736">개수</span><span class="sxs-lookup"><span data-stu-id="3723c-2736">Count</span></span>|<span data-ttu-id="3723c-2737">반환 된 배열</span><span class="sxs-lookup"><span data-stu-id="3723c-2737">Returned array</span></span>|  
|------------------|---------------|-----------|--------------------|  
|<span data-ttu-id="3723c-2738">"42, 12, 19"</span><span class="sxs-lookup"><span data-stu-id="3723c-2738">"42, 12, 19"</span></span>|<span data-ttu-id="3723c-2739">new Char {',', ' '을 (를) (C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2739">new Char[] {',', ' '} (C#)</span></span><br /><br /> <span data-ttu-id="3723c-2740">Char () = {"," c "" c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2740">Char() = {","c, " "c} (Visual Basic)</span></span>|<span data-ttu-id="3723c-2741">2</span><span class="sxs-lookup"><span data-stu-id="3723c-2741">2</span></span>|<span data-ttu-id="3723c-2742">{"42", " 12, 19"}</span><span class="sxs-lookup"><span data-stu-id="3723c-2742">{"42", " 12, 19"}</span></span>|  
|<span data-ttu-id="3723c-2743">"42..12..19"</span><span class="sxs-lookup"><span data-stu-id="3723c-2743">"42..12..19"</span></span>|<span data-ttu-id="3723c-2744">new 문자 {0} '.'}</span><span class="sxs-lookup"><span data-stu-id="3723c-2744">new Char[] {'.'}</span></span> <span data-ttu-id="3723c-2745">(C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2745">(C#)</span></span><br /><br /> <span data-ttu-id="3723c-2746">Char () = {"." c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2746">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="3723c-2747">4</span><span class="sxs-lookup"><span data-stu-id="3723c-2747">4</span></span>|<span data-ttu-id="3723c-2748">{"42", "", "12", ".19"}</span><span class="sxs-lookup"><span data-stu-id="3723c-2748">{"42", "", "12", ".19"}</span></span>|  
|<span data-ttu-id="3723c-2749">"Banana"</span><span class="sxs-lookup"><span data-stu-id="3723c-2749">"Banana"</span></span>|<span data-ttu-id="3723c-2750">new 문자 {0} '.'}</span><span class="sxs-lookup"><span data-stu-id="3723c-2750">new Char[] {'.'}</span></span> <span data-ttu-id="3723c-2751">(C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2751">(C#)</span></span><br /><br /> <span data-ttu-id="3723c-2752">Char () = {"." c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2752">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="3723c-2753">2</span><span class="sxs-lookup"><span data-stu-id="3723c-2753">2</span></span>|<span data-ttu-id="3723c-2754">{"Banana"}</span><span class="sxs-lookup"><span data-stu-id="3723c-2754">{"Banana"}</span></span>|  
|<span data-ttu-id="3723c-2755">"Darb\nSmarba" (C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2755">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="3723c-2756">"Darb" vbLf & "Smarba" (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2756">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="3723c-2757">new Char {} (C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2757">new Char[] {} (C#)</span></span><br /><br /> <span data-ttu-id="3723c-2758">Char () = {} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2758">Char() = {} (Visual Basic)</span></span>|<span data-ttu-id="3723c-2759">1</span><span class="sxs-lookup"><span data-stu-id="3723c-2759">1</span></span>|<span data-ttu-id="3723c-2760">{"Darb\nSmarba"} (C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2760">{"Darb\nSmarba"} (C#)</span></span><br /><br /> <span data-ttu-id="3723c-2761">"Darb" vbLf & "Smarba" (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2761">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|  
|<span data-ttu-id="3723c-2762">"Darb\nSmarba" (C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2762">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="3723c-2763">"Darb" vbLf & "Smarba" (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2763">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="3723c-2764">새 Char] null (C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2764">new Char[] null (C#)</span></span><br /><br /> <span data-ttu-id="3723c-2765">Char () = Nothing</span><span class="sxs-lookup"><span data-stu-id="3723c-2765">Char() = Nothing</span></span>|<span data-ttu-id="3723c-2766">2</span><span class="sxs-lookup"><span data-stu-id="3723c-2766">2</span></span>|<span data-ttu-id="3723c-2767">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="3723c-2767">{"Darb", "Smarba"}</span></span>|  
|<span data-ttu-id="3723c-2768">"Darb\nSmarba" (C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2768">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="3723c-2769">"Darb" vbLf & "Smarba" (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="3723c-2769">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="3723c-2770">새 Char] null (C#)</span><span class="sxs-lookup"><span data-stu-id="3723c-2770">new Char[] null (C#)</span></span><br /><br /> <span data-ttu-id="3723c-2771">Char () = Nothing</span><span class="sxs-lookup"><span data-stu-id="3723c-2771">Char() = Nothing</span></span>|<span data-ttu-id="3723c-2772">100</span><span class="sxs-lookup"><span data-stu-id="3723c-2772">100</span></span>|<span data-ttu-id="3723c-2773">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="3723c-2773">{"Darb", "Smarba"}</span></span>|  
  
## <a name="performance-considerations"></a><span data-ttu-id="3723c-2774">성능 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-2774">Performance Considerations</span></span>  
 <span data-ttu-id="3723c-2775">합니다 <xref:System.String.Split%2A> 메서드는 반환된 된 배열 개체에 대 한 메모리를 할당 및 <xref:System.String> 각 배열 요소에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2775">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="3723c-2776">응용 프로그램에 필요한 최적의 성능, 메모리 할당을 관리 하는 것이 중요 응용 프로그램 사용을 고려 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 메서드 및 필요에 따라는 <xref:System.String.Compare%2A> 문자열 내에서 부분 문자열을 찾을 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2776">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="3723c-2777">구분 기호 문자에서 문자열을 분할 하는 경우 사용 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 문자열의 구분 기호 문자를 찾는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2777">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="3723c-2778">구분 기호 문자열에서 문자열을 분할 하는 경우 사용 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 구분 기호 문자열의 첫 번째 문자를 찾기 위해 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2778">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="3723c-2779">사용 하 여는 <xref:System.String.Compare%2A> 첫 번째 문자는 다음 구분 기호 문자열의 나머지 문자는와 같은지 여부를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2779">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="3723c-2780">또한 동일한 설정의 경우 문자는 여러에서 문자열을 분할 하 <xref:System.String.Split%2A> 메서드 호출을 단일 배열을 만들고 각 메서드 호출에서 참조 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2780">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="3723c-2781">이렇게 하면 각 메서드 호출의 추가 오버 헤드를 크게 줄어듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2781">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2782">다음 예제에서는 어떻게 `count` 에서 반환 된 문자열의 영향을 줍니다 <xref:System.String.Split%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2782">The following example demonstrates how `count` affects the number of strings returned by <xref:System.String.Split%2A>.</span></span>  
  
 [!code-csharp[StringSplit2#10](~/samples/snippets/csharp/VS_Snippets_CLR/StringSplit2/CS/StringSplit10.cs#10)]
 [!code-vb[StringSplit2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringSplit2/VB/stringsplit10.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2783">
            <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2783">
              <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2784">
            <para>에 [! INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 및 이전 버전에서 경우는 <see cref="M:System.String.Split(System.Char[])" /> 메서드에 전달 됩니다는 <paramref name="separator" /> 즉 <see langword="null" /> 문자가 없는 또는 메서드 약간 다른 문자 집합을 사용 하 여 분할 합니다 문자열 보다는 <see cref="M:System.String.Trim(System.Char[])" /> 메서드는 문자열을 트리밍하는 않습니다. 에 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 두 방법 모두 유니코드 공백 문자가의 동일한 집합을 사용 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2784">
              <para>In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string. In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], both methods use an identical set of Unicode white-space characters.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator">
          <span data-ttu-id="3723c-2785">이 문자열의 부분 문자열을 구분하는 문자 배열, 구분 기호를 포함하지 않는 빈 배열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2785">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="3723c-2786">반환된 배열에서 빈 배열 요소를 생략하려면 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />이고, 반환된 배열에 빈 배열 요소를 포함하려면 <see cref="F:System.StringSplitOptions.None" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2786">
              <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2787">배열에 있는 문자에 따라 문자열을 부분 문자열로 분할합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2787">Splits a string into substrings based on the characters in an array.</span>
          </span>
          <span data-ttu-id="3723c-2788">부분 문자열이 빈 배열 요소를 포함하는지 여부를 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2788">You can specify whether the substrings include empty array elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2789">해당 요소에 <paramref name="separator" />에 있는 하나 이상의 문자로 구분되는 이 문자열의 부분 문자열이 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2789">An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />.</span>
          </span>
          <span data-ttu-id="3723c-2790">자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2790">For more information, see the Remarks section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="return-value-details"></a><span data-ttu-id="3723c-2791">반환 값 정보</span><span class="sxs-lookup"><span data-stu-id="3723c-2791">Return value details</span></span>  
 <span data-ttu-id="3723c-2792">구분 기호 문자 (문자는 `separator` 배열) 반환 된 배열의 요소에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2792">Delimiter characters (the characters in the `separator` array) are not included in the elements of the returned array.</span></span> <span data-ttu-id="3723c-2793">예를 들어 경우는 `separator` 문자를 포함 하는 배열 "-"는 현재 문자열 인스턴스가의 값은 "cc-aa-bb", 메서드 3 개 요소가 포함 된 배열을 반환 하 고: "aa", "bb" 및 "cc"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2793">For example, if the `separator` array includes the character "-" and the value of the current string instance is "aa-bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>  
  
 <span data-ttu-id="3723c-2794">이 인스턴스가 없는 경우에 문자 `separator`, 반환된 된 배열에이 인스턴스를 포함 하는 단일 요소로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2794">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span>  
  
 <span data-ttu-id="3723c-2795">경우는 `options` 매개 변수는 <xref:System.StringSplitOptions.RemoveEmptyEntries> 이 인스턴스의 길이 0을 메서드는 빈 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2795">If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.</span></span>  
  
 <span data-ttu-id="3723c-2796">각 요소의 `separator` 단일 문자로 구성 된 별도 구분 기호를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2796">Each element of `separator` defines a separate delimiter that consists of a single character.</span></span> <span data-ttu-id="3723c-2797">경우는 `options` 인수가 <xref:System.StringSplitOptions.None>, 및 두 구분 기호는 인접 한 있거나 구분 기호에 시작 또는 끝이 인스턴스의 해당 배열 요소에 포함 되어 <xref:System.String.Empty?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2797">If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-2798">예를 들어, 경우 `separator` 두 요소를 포함 "-" 및 "\_", 문자열 인스턴스의 값이 "-\_aa-\_"의 값을 `options` 인수가 <xref:System.StringSplitOptions.None>, 메서드를 사용 하 여 문자열 배열을 반환 합니다. 다음 5 개 요소:</span><span class="sxs-lookup"><span data-stu-id="3723c-2798">For example, if `separator` includes  two elements, "-" and "\_", the value of the string instance is "-\_aa-\_", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a string array with the following five elements:</span></span>  
  
1.  <span data-ttu-id="3723c-2799"><xref:System.String.Empty?displayProperty=nameWithType>를 앞에 있는 빈 문자열을 나타내는 "-" 인덱스 0에 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2799"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that precedes the "-" character at index 0.</span></span>  
  
2.  <span data-ttu-id="3723c-2800"><xref:System.String.Empty?displayProperty=nameWithType>사이의 빈 문자열을 나타내는 "-" 인덱스 0 및 1 인덱스에 있는 "_" 문자가 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2800"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string between the "-" character at index 0 and the "_" character at index 1.</span></span>  
  
3.  <span data-ttu-id="3723c-2801">"aa",</span><span class="sxs-lookup"><span data-stu-id="3723c-2801">"aa",</span></span>  
  
4.  <span data-ttu-id="3723c-2802"><xref:System.String.Empty?displayProperty=nameWithType>에서 인덱스 4에서 "_" 문자 뒤에 오는 빈 문자열을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2802"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "_" character at index 4.</span></span>  
  
5.  <span data-ttu-id="3723c-2803"><xref:System.String.Empty?displayProperty=nameWithType>에 빈 문자열을 나타내는 "-" 5 인덱스 문자.</span><span class="sxs-lookup"><span data-stu-id="3723c-2803"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "-" character at index 5.</span></span>  
  
## <a name="the-separator-array"></a><span data-ttu-id="3723c-2804">구분 기호 배열</span><span class="sxs-lookup"><span data-stu-id="3723c-2804">The separator array</span></span>  
 <span data-ttu-id="3723c-2805">경우는 `separator` 매개 변수는 `null` 문자가 없는 또는 공백 문자를 구분 기호로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2805">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="3723c-2806">공백 문자는 유니코드 표준 및 반환 정의한 `true` 에 전달 하는 경우는 <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2806">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="3723c-2807">경우는 `separator` 이 메서드 오버 로드에 대 한 호출에서 매개 변수는 `null`, 컴파일러 오버 로드 확인에 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2807">If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="3723c-2808">호출된 된 메서드를 명확 하 게 식별 하려면 코드의 형식을 나타내야 합니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2808">To unambiguously identify the called method, your code must indicate the type of the `null`.</span></span> <span data-ttu-id="3723c-2809">다음 예제에서는이 오버 로드를 명확 하 게 식별 하는 여러 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2809">The following example shows several ways to unambiguously identify this overload.</span></span>  
  
 [!code-csharp[System.String.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#5)]
 [!code-vb[System.String.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#5)]  
  
## <a name="comparison-details"></a><span data-ttu-id="3723c-2810">비교 세부 정보</span><span class="sxs-lookup"><span data-stu-id="3723c-2810">Comparison details</span></span>  
 <span data-ttu-id="3723c-2811">합니다 <xref:System.String.Split%2A> 의 문자를 하나 이상의 구분 되는이 문자열의 부분 문자열을 추출 하는 메서드는 `separator` 매개 변수를 배열 요소로 해당 부분 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2811">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` parameter, and returns those substrings as elements of an array.</span></span>  
  
 <span data-ttu-id="3723c-2812"><xref:System.String.Split%2A> 메서드가 서 수 대/소문자 구분 정렬 규칙을 사용 하 여 비교를 수행 하 여 구분 기호를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2812">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="3723c-2813">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2813">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="3723c-2814">성능 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-2814">Performance Considerations</span></span>  
 <span data-ttu-id="3723c-2815">합니다 <xref:System.String.Split%2A> 메서드는 반환된 된 배열 개체에 대 한 메모리를 할당 및 <xref:System.String> 각 배열 요소에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2815">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="3723c-2816">응용 프로그램에 필요한 최적의 성능, 메모리 할당을 관리 하는 것이 중요 응용 프로그램 사용을 고려 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 메서드 및 필요에 따라는 <xref:System.String.Compare%2A> 문자열 내에서 부분 문자열을 찾을 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2816">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="3723c-2817">구분 기호 문자에서 문자열을 분할 하는 경우 사용 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 문자열의 구분 기호 문자를 찾는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2817">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="3723c-2818">구분 기호 문자열에서 문자열을 분할 하는 경우 사용 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 구분 기호 문자열의 첫 번째 문자를 찾기 위해 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2818">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="3723c-2819">사용 하 여는 <xref:System.String.Compare%2A> 첫 번째 문자는 다음 구분 기호 문자열의 나머지 문자는와 같은지 여부를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2819">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="3723c-2820">또한 동일한 설정의 경우 문자는 여러에서 문자열을 분할 하 <xref:System.String.Split%2A> 메서드 호출을 단일 배열을 만들고 각 메서드 호출에서 참조 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2820">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="3723c-2821">이렇게 하면 각 메서드 호출의 추가 오버 헤드를 크게 줄어듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2821">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2822">다음 예제에서는 합니다 <xref:System.StringSplitOptions> 열거형을 포함 하거나 제외 하 여 생성 된 부분 문자열을 <xref:System.String.Split%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2822">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>  
  
 [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
 [!code-csharp[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]
 [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-2823">
            <paramref name="options" />가 <see cref="T:System.StringSplitOptions" /> 값 중 하나가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2823">
              <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2824">
            <para>에 [! INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 및 이전 버전에서 경우는 <see cref="M:System.String.Split(System.Char[])" /> 메서드에 전달 됩니다는 <paramref name="separator" /> 즉 <see langword="null" /> 문자가 없는 또는 메서드 약간 다른 문자 집합을 사용 하 여 분할 합니다 문자열 보다는 <see cref="M:System.String.Trim(System.Char[])" /> 메서드는 문자열을 트리밍하는 않습니다. 에 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 두 방법 모두 유니코드 공백 문자가의 동일한 집합을 사용 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2824">
              <para>In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string. In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], both methods use an identical set of Unicode white-space characters.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string separator, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : string * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string[] separator, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string[] separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String[],System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String(), options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;System::String ^&gt; ^ separator, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : string[] * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String[]" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator">
          <span data-ttu-id="3723c-2825">이 문자열의 부분 문자열을 구분하는 문자열 배열, 구분 기호를 포함하지 않는 빈 배열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2825">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="3723c-2826">반환된 배열에서 빈 배열 요소를 생략하려면 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />이고, 반환된 배열에 빈 배열 요소를 포함하려면 <see cref="F:System.StringSplitOptions.None" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2826">
              <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2827">배열에 있는 문자열에 따라 문자열을 부분 문자열로 분할합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2827">Splits a string into substrings based on the strings in an array.</span>
          </span>
          <span data-ttu-id="3723c-2828">부분 문자열이 빈 배열 요소를 포함하는지 여부를 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2828">You can specify whether the substrings include empty array elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2829">해당 요소에 <paramref name="separator" />에 있는 하나 이상의 문자열로 구분되는 이 문자열의 부분 문자열이 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2829">An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />.</span>
          </span>
          <span data-ttu-id="3723c-2830">자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2830">For more information, see the Remarks section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2831">문자열은 문자열의 알려진된 집합으로 구분 되 면 하는 경우 사용할 수 있습니다는 <xref:System.String.Split%2A> 부분 문자열을 구분 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2831">When a string is delimited by a known set of strings, you can use the <xref:System.String.Split%2A> method to separate it into substrings.</span></span>  
  
## <a name="return-value-details"></a><span data-ttu-id="3723c-2832">반환 값 정보</span><span class="sxs-lookup"><span data-stu-id="3723c-2832">Return value details</span></span>  
 <span data-ttu-id="3723c-2833">구분 기호 문자열로 반환 된 배열의 요소에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2833">Delimiter strings are not included in the elements of the returned array.</span></span> <span data-ttu-id="3723c-2834">예를 들어 경우는 `separator` 배열이 포함 된 문자열 "-"는 현재 문자열 인스턴스가의 값은 "aa-cc bb", 메서드 3 개 요소가 포함 된 배열을 반환 하 고: "aa", "bb" 및 "cc"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2834">For example, if the `separator` array includes the string "--" and the value of the current string instance is "aa--bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>  
  
 <span data-ttu-id="3723c-2835">이 인스턴스가 없으면의 해당 문자열이 하나라 `separator`, 반환된 된 배열에이 인스턴스를 포함 하는 단일 요소로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2835">If this instance does not contain any of the strings in `separator`, the returned array consists of a single element that contains this instance.</span></span>  
  
 <span data-ttu-id="3723c-2836">경우는 `options` 매개 변수는 <xref:System.StringSplitOptions.RemoveEmptyEntries> 이 인스턴스의 길이 0을 메서드는 빈 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2836">If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.</span></span>  
  
 <span data-ttu-id="3723c-2837">각 요소의 `separator` 하나 이상의 문자로 구성 된 별도 구분 기호를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2837">Each element of `separator` defines a separate delimiter that consists of one or more characters.</span></span> <span data-ttu-id="3723c-2838">경우는 `options` 인수가 <xref:System.StringSplitOptions.None>, 및 두 구분 기호는 인접 한 있거나 구분 기호에 시작 또는 끝이 인스턴스의 해당 배열 요소에 포함 되어 <xref:System.String.Empty?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2838">If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-2839">예를 들어 경우 `separator` 두 요소를 포함 "-" "_", 문자열 인스턴스의 값이 "-_aa-\_", 값과는 `options` 인수가 <xref:System.StringSplitOptions.None>, 메서드를 다음 5 개 요소가 포함 된 문자열 배열을 반환 합니다:</span><span class="sxs-lookup"><span data-stu-id="3723c-2839">For example, if `separator` includes  two elements, "-" and "_", the value of the string instance is "-_aa-\_", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a sting array with the following five elements:</span></span>  
  
1.  <span data-ttu-id="3723c-2840"><xref:System.String.Empty?displayProperty=nameWithType>를 앞에 있는 빈 문자열을 나타내는 "-" 인덱스 0에 있는 부분 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2840"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that precedes the "-" substring at index 0.</span></span>  
  
2.  <span data-ttu-id="3723c-2841"><xref:System.String.Empty?displayProperty=nameWithType>사이의 빈 문자열을 나타내는 "-" 인덱스 0 및 1 인덱스 "_" 부분 문자열에 부분 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2841"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string between the "-" substring at index 0 and the "_" substring at index 1.</span></span>  
  
3.  <span data-ttu-id="3723c-2842">"aa",</span><span class="sxs-lookup"><span data-stu-id="3723c-2842">"aa",</span></span>  
  
4.  <span data-ttu-id="3723c-2843"><xref:System.String.Empty?displayProperty=nameWithType>에서 인덱스 4에 있는 "_" 부분 문자열 뒤에 오는 빈 문자열을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2843"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "_" substring at index 4.</span></span>  
  
5.  <span data-ttu-id="3723c-2844"><xref:System.String.Empty?displayProperty=nameWithType>에 빈 문자열을 나타내는 "-" 5 인덱스 부분 문자열.</span><span class="sxs-lookup"><span data-stu-id="3723c-2844"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "-" substring at index 5.</span></span>  
  
## <a name="the-separator-array"></a><span data-ttu-id="3723c-2845">구분 기호 배열</span><span class="sxs-lookup"><span data-stu-id="3723c-2845">The separator array</span></span>  
 <span data-ttu-id="3723c-2846">요소 하나라 `separator` 구성 전체 부분 문자열이 구분 기호를 여러 개의 문자로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2846">If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter.</span></span> <span data-ttu-id="3723c-2847">예를 들어 하나에 있는 요소의 `separator` 은 "10", "This10is10a10string." 문자열을 분할 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2847">For example, if one of the elements in `separator` is "10", attempting to split the string "This10is10a10string."</span></span> <span data-ttu-id="3723c-2848">다음 4 개 요소 배열을 반환 합니다: {"This", "is", "a", "문자열입니다."</span><span class="sxs-lookup"><span data-stu-id="3723c-2848">returns the following four-element array: { "This", "is", "a", "string."</span></span> <span data-ttu-id="3723c-2849">}.</span><span class="sxs-lookup"><span data-stu-id="3723c-2849">}.</span></span>  
  
 <span data-ttu-id="3723c-2850">경우는 `separator` 매개 변수는 `null` 문자가 없는 또는 공백 문자를 구분 기호로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2850">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="3723c-2851">공백 문자는 유니코드 표준 및 반환 정의한 `true` 에 전달 하는 경우는 <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2851">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="3723c-2852">경우는 `separator` 이 메서드 오버 로드에 대 한 호출에서 매개 변수는 `null`, 컴파일러 오버 로드 확인에 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2852">If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="3723c-2853">호출된 된 메서드를 명확 하 게 식별 하려면 코드의 형식을 나타내야 합니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2853">To unambiguously identify the called method, your code must indicate the type of the `null`.</span></span> <span data-ttu-id="3723c-2854">다음 예제에서는이 오버 로드를 명확 하 게 식별 하는 여러 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2854">The following example shows several ways to unambiguously identify this overload.</span></span>  
  
 [!code-csharp[System.String.Split#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#6)]
 [!code-vb[System.String.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#6)]  
  
## <a name="comparison-details"></a><span data-ttu-id="3723c-2855">비교 세부 정보</span><span class="sxs-lookup"><span data-stu-id="3723c-2855">Comparison details</span></span>  
 <span data-ttu-id="3723c-2856"><xref:System.String.Split%2A> 에 있는 문자열 중 하나 이상의 구분 되는이 문자열의 부분 문자열을 추출 하는 메서드는 `separator` 매개 변수를 배열 요소로 해당 부분 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2856">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.</span></span>  
  
 <span data-ttu-id="3723c-2857"><xref:System.String.Split%2A> 메서드가 서 수 대/소문자 구분 정렬 규칙을 사용 하 여 비교를 수행 하 여 구분 기호를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2857">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="3723c-2858">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2858">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>  
  
 <span data-ttu-id="3723c-2859">합니다 <xref:System.String.Split%2A> 의 요소를 무시 하는 메서드 `separator` 값인 `null` 또는 빈 문자열 ("").</span><span class="sxs-lookup"><span data-stu-id="3723c-2859">The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string ("").</span></span>  
  
 <span data-ttu-id="3723c-2860">모호한 결과 방지 하기 때의 문자열 `separator` 문자를 공통적으로 합니다 <xref:System.String.Split%2A> 작업 인스턴스 값의 끝부터 진행 되 고 첫 번째 요소와 일치 `separator` 같은지에서 구분 기호를는 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2860">To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance.</span></span> <span data-ttu-id="3723c-2861">인스턴스에서 발생 하는 부분 문자열이 나타나는 순서에 있는 요소의 순서 보다 우선 `separator`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2861">The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.</span></span>  
  
 <span data-ttu-id="3723c-2862">예를 들어 값인 "abcdef" 인스턴스에 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2862">For example, consider an instance whose value is "abcdef".</span></span> <span data-ttu-id="3723c-2863">경우에 첫 번째 요소 `separator` ef 및 두 번째 요소를 "bcde" 이면 split 작업의 결과 두 개의 요소를 포함 하는 문자열 배열 "a"와 "f"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2863">If the first element in `separator` was "ef" and the second element was "bcde", the result of the split operation would be a string array that contains two elements, "a" and "f".</span></span> <span data-ttu-id="3723c-2864">이 "bcde" 인스턴스에 있는 부분 문자열은와 일치 하기 때문에 요소 `separator` 부분 문자열 "f"가 발생 하기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2864">This is because the substring in the instance, "bcde", is encountered and matches an element in `separator` before the substring "f" is encountered.</span></span>  
  
 <span data-ttu-id="3723c-2865">그러나 경우 첫 번째 요소 `separator` "bcd"와 두 번째 요소 "bc" 이면 split 작업의 결과 두 개의 요소를 포함 하는 문자열 배열 "a" 및 "ef"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2865">However, if the first element of `separator` was "bcd" and the second element was "bc", the result of the split operation would be a string array that contains two elements, "a" and "ef".</span></span> <span data-ttu-id="3723c-2866">"Bcd"는 첫 번째 구분 기호 이므로이 `separator` 인스턴스 구분 기호와 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2866">This is because "bcd" is the first delimiter in `separator` that matches a delimiter in the instance.</span></span> <span data-ttu-id="3723c-2867">첫 번째 요소 "bc"는 구분 기호의 순서 거꾸로 되어 및 두 번째 요소가 "bcd" 이면 결과 두 개의 요소를 포함 하는 문자열 배열 하는 경우 "a"와 "def"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2867">If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be a string array that contains two elements,  "a" and "def".</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="3723c-2868">성능 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-2868">Performance considerations</span></span>  
 <span data-ttu-id="3723c-2869">합니다 <xref:System.String.Split%2A> 메서드는 반환된 된 배열 개체에 대 한 메모리를 할당 및 <xref:System.String> 각 배열 요소에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2869">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="3723c-2870">응용 프로그램에 필요한 최적의 성능, 메모리 할당을 관리 하는 것이 중요 응용 프로그램 사용을 고려 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 메서드 및 필요에 따라는 <xref:System.String.Compare%2A> 문자열 내에서 부분 문자열을 찾을 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2870">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="3723c-2871">구분 기호 문자에서 문자열을 분할 하는 경우 사용 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 문자열의 구분 기호 문자를 찾는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2871">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="3723c-2872">구분 기호 문자열에서 문자열을 분할 하는 경우 사용 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 구분 기호 문자열의 첫 번째 문자를 찾기 위해 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2872">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="3723c-2873">사용 하 여는 <xref:System.String.Compare%2A> 첫 번째 문자는 다음 구분 기호 문자열의 나머지 문자는와 같은지 여부를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2873">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="3723c-2874">또한 동일한 설정의 경우 문자는 여러에서 문자열을 분할 하 <xref:System.String.Split%2A> 메서드 호출을 단일 배열을 만들고 각 메서드 호출에서 참조 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2874">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="3723c-2875">이렇게 하면 각 메서드 호출의 추가 오버 헤드를 크게 줄어듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2875">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2876">다음 예제에서는 문자열의 호출 하 여 반환 된 배열이 차이 보여 줍니다 <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29?displayProperty=nameWithType> 메서드를 사용 하 여 해당 `options` 매개 변수를 <xref:System.StringSplitOptions.None?displayProperty=nameWithType> 고 <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2876">The following example illustrates the difference in the arrays returned by calling a string's <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29?displayProperty=nameWithType> method with its `options` parameter equal to <xref:System.StringSplitOptions.None?displayProperty=nameWithType> and <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.String.Split#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/Split.cs#1)]
 [!code-vb[System.String.Split#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/Split.vb#1)]  
  
 <span data-ttu-id="3723c-2877">다음 예제에서는 문장 부호 및 공백 문자를 포함 하는 구분 기호 배열을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2877">The following example defines an array of separators that include punctuation and white-space characters.</span></span> <span data-ttu-id="3723c-2878">값이 배열 전달 <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType> 에 <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29> 문자열에서 개별 단어로 구성 된 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2878">Passing this array along with a value of <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType> to the <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29> method returns an array that consists of the individual words from the string.</span></span>  
  
 [!code-csharp[System.String.Split#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split7.cs#7)]
 [!code-vb[System.String.Split#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split7.vb#7)]  
  
 <span data-ttu-id="3723c-2879">메서드를 사용 하 여 호출 되는 참고 합니다 `options` 인수와 함께 <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2879">Note that the method is called with the `options` argument set to <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>.</span></span> <span data-ttu-id="3723c-2880">반환된 된 배열 등에서 이렇게 <xref:System.String.Empty?displayProperty=nameWithType> 문장 부호 및 공백 문자 사이 빈 부분 문자열 일치를 나타내는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2880">This prevents the returned array from including <xref:System.String.Empty?displayProperty=nameWithType> values that represent empty substring matches between punctuation marks and white-space characters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-2881">
            <paramref name="options" />가 <see cref="T:System.StringSplitOptions" /> 값 중 하나가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2881">
              <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2882">
            <para>에 [! INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 및 이전 버전에서 경우는 <see cref="M:System.String.Split(System.Char[])" /> 메서드에 전달 됩니다는 <paramref name="separator" /> 즉 <see langword="null" /> 문자가 없는 또는 메서드 약간 다른 문자 집합을 사용 하 여 분할 합니다 문자열 보다는 <see cref="M:System.String.Trim(System.Char[])" /> 메서드는 문자열을 트리밍하는 않습니다. 에 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 두 방법 모두 유니코드 공백 문자가의 동일한 집합을 사용 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2882">
              <para>In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string. In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], both methods use an identical set of Unicode white-space characters.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char separator, int count, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char,System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char, count As Integer, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : char * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="count">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), count As Integer, options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator">
          <span data-ttu-id="3723c-2883">이 문자열의 부분 문자열을 구분하는 문자 배열, 구분 기호를 포함하지 않는 빈 배열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2883">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-2884">반환할 부분 문자열의 최대 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2884">The maximum number of substrings to return.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="3723c-2885">반환된 배열에서 빈 배열 요소를 생략하려면 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />이고, 반환된 배열에 빈 배열 요소를 포함하려면 <see cref="F:System.StringSplitOptions.None" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2885">
              <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2886">배열에 있는 문자에 따라 최대 개수의 부분 문자열로 문자열을 분할합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2886">Splits a string into a maximum number of substrings based on the characters in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2887">해당 요소에 <paramref name="separator" />에 있는 하나 이상의 문자로 구분되는 이 문자열의 부분 문자열이 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2887">An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />.</span>
          </span>
          <span data-ttu-id="3723c-2888">자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2888">For more information, see the Remarks section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2889">구분 기호 문자는 반환 된 배열의 요소에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2889">Delimiter characters are not included in the elements of the returned array.</span></span>  
  
 <span data-ttu-id="3723c-2890">이 인스턴스가 없는 경우에 문자 `separator`, 또는 `count` 매개 변수가 1 이면 반환된 된 배열에이 인스턴스를 포함 하는 단일 요소로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2890">If this instance does not contain any of the characters in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance.</span></span> <span data-ttu-id="3723c-2891">경우는 `separator` 매개 변수는 `null` 문자가 없는 또는 공백 문자를 구분 기호로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2891">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="3723c-2892">공백 문자는 유니코드 표준 및 반환 정의한 `true` 에 전달 하는 경우는 <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2892">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3723c-2893">그러나 경우 합니다 `separator` 이 메서드 오버 로드에 대 한 호출에서 매개 변수는 `null`, 컴파일러 오버 로드 확인에 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2893">However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="3723c-2894">호출된 된 메서드를 명확 하 게 식별 하려면 코드는 null의 형식을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2894">To unambiguously identify the called method, your code must indicate the type of the null.</span></span> <span data-ttu-id="3723c-2895">다음 예제에서는이 오버 로드를 명확 하 게 식별 하는 여러 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2895">The following example shows several ways to unambiguously identify this overload.</span></span>  
  
 [!code-csharp[System.String.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#3)]
 [!code-vb[System.String.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#3)]  
  
 <span data-ttu-id="3723c-2896">경우는 `count` 매개 변수는 0 또는 `options` 매개 변수는 <xref:System.StringSplitOptions.RemoveEmptyEntries> 이 인스턴스의 길이 0 이면 빈 배열이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2896">If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.</span></span>  
  
 <span data-ttu-id="3723c-2897">각 요소의 `separator` 별도 구분 기호 문자를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2897">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="3723c-2898">경우는 `options` 매개 변수가 <xref:System.StringSplitOptions.None>, 및 두 구분 기호는 인접 한 있거나 구분 기호에 시작 또는 끝이 인스턴스의 해당 배열 요소에 포함 되어 <xref:System.String.Empty>입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2898">If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="3723c-2899">있는 경우 둘 `count` 이 인스턴스의 부분 문자열이 첫 번째 `count` 빼기 1 부분 문자열에서 첫 번째 반환 됩니다 `count` 반환 값을이 인스턴스의 나머지 문자 요소는 마지막에 반환 됩니다 반환 값의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2899">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>  
  
 <span data-ttu-id="3723c-2900">경우 `count` 수보다 큰 부분을 사용할 수 있는 부분 문자열 반환 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2900">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="3723c-2901">성능 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-2901">Performance Considerations</span></span>  
 <span data-ttu-id="3723c-2902">합니다 <xref:System.String.Split%2A> 메서드는 반환된 된 배열 개체에 대 한 메모리를 할당 및 <xref:System.String> 각 배열 요소에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2902">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="3723c-2903">응용 프로그램에 필요한 최적의 성능, 메모리 할당을 관리 하는 것이 중요 응용 프로그램 사용을 고려 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 메서드 및 필요에 따라는 <xref:System.String.Compare%2A> 문자열 내에서 부분 문자열을 찾을 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2903">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="3723c-2904">구분 기호 문자에서 문자열을 분할 하는 경우 사용 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 문자열의 구분 기호 문자를 찾는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2904">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="3723c-2905">구분 기호 문자열에서 문자열을 분할 하는 경우 사용 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 구분 기호 문자열의 첫 번째 문자를 찾기 위해 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2905">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="3723c-2906">사용 하 여는 <xref:System.String.Compare%2A> 첫 번째 문자는 다음 구분 기호 문자열의 나머지 문자는와 같은지 여부를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2906">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="3723c-2907">또한 동일한 설정의 경우 문자는 여러에서 문자열을 분할 하 <xref:System.String.Split%2A> 메서드 호출을 단일 배열을 만들고 각 메서드 호출에서 참조 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2907">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="3723c-2908">이렇게 하면 각 메서드 호출의 추가 오버 헤드를 크게 줄어듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2908">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2909">다음 예제에서는 합니다 <xref:System.StringSplitOptions> 열거형을 포함 하거나 제외 하 여 생성 된 부분 문자열을 <xref:System.String.Split%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2909">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>  
  
 [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
 [!code-csharp[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]
 [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2910">
            <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2910">
              <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-2911">
            <paramref name="options" />가 <see cref="T:System.StringSplitOptions" /> 값 중 하나가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2911">
              <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2912">
            <para>에 [! INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 및 이전 버전에서 경우는 <see cref="M:System.String.Split(System.Char[])" /> 메서드에 전달 됩니다는 <paramref name="separator" /> 즉 <see langword="null" /> 문자가 없는 또는 메서드 약간 다른 문자 집합을 사용 하 여 분할 합니다 문자열 보다는 <see cref="M:System.String.Trim(System.Char[])" /> 메서드는 문자열을 트리밍하는 않습니다. 에 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 두 방법 모두 유니코드 공백 문자가의 동일한 집합을 사용 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2912">
              <para>In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string. In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], both methods use an identical set of Unicode white-space characters.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string separator, int count, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String,System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String, count As Integer, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : string * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator">To be added.</param>
        <param name="count">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string[] separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string[] separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String(), count As Integer, options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;System::String ^&gt; ^ separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : string[] * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String[]" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.StringSplitOptions" />
      </Parameters>
      <Docs>
        <param name="separator">
          <span data-ttu-id="3723c-2913">이 문자열의 부분 문자열을 구분하는 문자열 배열, 구분 기호를 포함하지 않는 빈 배열 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2913">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3723c-2914">반환할 부분 문자열의 최대 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2914">The maximum number of substrings to return.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="3723c-2915">반환된 배열에서 빈 배열 요소를 생략하려면 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />이고, 반환된 배열에 빈 배열 요소를 포함하려면 <see cref="F:System.StringSplitOptions.None" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2915">
              <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2916">배열에 있는 문자열에 따라 최대 개수의 부분 문자열로 문자열을 분할합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2916">Splits a string into a maximum number of substrings based on the strings in an array.</span>
          </span>
          <span data-ttu-id="3723c-2917">부분 문자열이 빈 배열 요소를 포함하는지 여부를 지정할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2917">You can specify whether the substrings include empty array elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2918">해당 요소에 <paramref name="separator" />에 있는 하나 이상의 문자열로 구분되는 이 문자열의 부분 문자열이 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2918">An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />.</span>
          </span>
          <span data-ttu-id="3723c-2919">자세한 내용은 설명 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2919">For more information, see the Remarks section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="return-value-details"></a><span data-ttu-id="3723c-2920">반환 값 정보</span><span class="sxs-lookup"><span data-stu-id="3723c-2920">Return value details</span></span>  
 <span data-ttu-id="3723c-2921">구분 기호 문자열로 반환 된 배열의 요소에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2921">Delimiter strings are not included in the elements of the returned array.</span></span>  
  
 <span data-ttu-id="3723c-2922">이 인스턴스가 없으면의 해당 문자열이 하나라 `separator`, 또는 `count` 매개 변수가 1 이면 반환된 된 배열에이 인스턴스를 포함 하는 단일 요소로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2922">If this instance does not contain any of the strings in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance.</span></span> <span data-ttu-id="3723c-2923">경우는 `separator` 매개 변수는 `null` 문자가 없는 또는 공백 문자를 구분 기호로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2923">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="3723c-2924">공백 문자는 유니코드 표준 및 반환 정의한 `true` 에 전달 하는 경우는 <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2924">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3723c-2925">그러나 경우 합니다 `separator` 이 메서드 오버 로드에 대 한 호출에서 매개 변수는 `null`, 컴파일러 오버 로드 확인에 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2925">However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="3723c-2926">호출된 된 메서드를 명확 하 게 식별 하려면 코드의 형식을 나타내야 합니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2926">To unambiguously identify the called method, your code must indicate the type of the `null`.</span></span> <span data-ttu-id="3723c-2927">다음 예제에서는이 오버 로드를 명확 하 게 식별 하는 여러 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2927">The following example shows several ways to unambiguously identify this overload.</span></span>  
  
 [!code-csharp[System.String.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#4)]
 [!code-vb[System.String.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#4)]  
  
 <span data-ttu-id="3723c-2928">경우는 `count` 매개 변수는 0 또는 `options` 매개 변수는 <xref:System.StringSplitOptions.RemoveEmptyEntries> 이 인스턴스의 길이 0 이면 빈 배열이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2928">If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.</span></span>  
  
 <span data-ttu-id="3723c-2929">각 요소의 `separator` 하나 이상의 문자로 구성 된 별도 구분 기호를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2929">Each element of `separator` defines a separate delimiter that consists of one or more characters.</span></span> <span data-ttu-id="3723c-2930">경우는 `options` 매개 변수가 <xref:System.StringSplitOptions.None>, 및 두 구분 기호는 인접 한 있거나 구분 기호에 시작 또는 끝이 인스턴스의 해당 배열 요소에 포함 되어 <xref:System.String.Empty>입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2930">If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="3723c-2931">있는 경우 둘 `count` 이 인스턴스의 부분 문자열이 첫 번째 `count` 빼기 1 부분 문자열에서 첫 번째 반환 됩니다 `count` 반환 값을이 인스턴스의 나머지 문자 요소는 마지막에 반환 됩니다 반환 값의 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2931">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>  
  
 <span data-ttu-id="3723c-2932">경우 `count` 수보다 큰 부분을 사용할 수 있는 부분 문자열 반환 되 고 예외가 throw 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2932">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>  
  
## <a name="the-separator-array"></a><span data-ttu-id="3723c-2933">구분 기호 배열</span><span class="sxs-lookup"><span data-stu-id="3723c-2933">The separator array</span></span>  
 <span data-ttu-id="3723c-2934">요소 하나라 `separator` 구성 전체 부분 문자열이 구분 기호를 여러 개의 문자로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2934">If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter.</span></span> <span data-ttu-id="3723c-2935">예를 들어 하나에 있는 요소의 `separator` 은 "10", "This10is10a10string." 문자열을 분할 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2935">For example, if one of the elements in `separator` is "10", attempting to split the string "This10is10a10string."</span></span> <span data-ttu-id="3723c-2936">이 4 개 요소 배열을 반환 합니다: {"This", "is", "a", "문자열입니다."</span><span class="sxs-lookup"><span data-stu-id="3723c-2936">returns this four-element array: { "This", "is", "a", "string."</span></span> <span data-ttu-id="3723c-2937">}.</span><span class="sxs-lookup"><span data-stu-id="3723c-2937">}.</span></span>  
  
## <a name="comparison-details"></a><span data-ttu-id="3723c-2938">비교 세부 정보</span><span class="sxs-lookup"><span data-stu-id="3723c-2938">Comparison details</span></span>  
 <span data-ttu-id="3723c-2939"><xref:System.String.Split%2A> 에 있는 문자열 중 하나 이상의 구분 되는이 문자열의 부분 문자열을 추출 하는 메서드는 `separator` 매개 변수를 배열 요소로 해당 부분 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2939">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.</span></span>  
  
 <span data-ttu-id="3723c-2940"><xref:System.String.Split%2A> 메서드가 서 수 대/소문자 구분 정렬 규칙을 사용 하 여 비교를 수행 하 여 구분 기호를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2940">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="3723c-2941">Word, 문자열 및 서 수 정렬 하는 방법에 대 한 자세한 내용은 참조는 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2941">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>  
  
 <span data-ttu-id="3723c-2942">합니다 <xref:System.String.Split%2A> 의 요소를 무시 하는 메서드 `separator` 값인 `null` 또는 빈 문자열 ("").</span><span class="sxs-lookup"><span data-stu-id="3723c-2942">The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string ("").</span></span>  
  
 <span data-ttu-id="3723c-2943">모호한 결과 방지 하기 때의 문자열 `separator` 문자를 공통적으로 합니다 <xref:System.String.Split%2A> 메서드 인스턴스 값의 끝부터 진행 되 고 첫 번째 요소와 일치 `separator` 같은지에서 구분 기호를는 인스턴스입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2943">To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> method proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance.</span></span> <span data-ttu-id="3723c-2944">인스턴스에서 발생 하는 부분 문자열이 나타나는 순서에 있는 요소의 순서 보다 우선 `separator`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2944">The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.</span></span>  
  
 <span data-ttu-id="3723c-2945">예를 들어 값인 "abcdef" 인스턴스에 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2945">For example, consider an instance whose value is "abcdef".</span></span> <span data-ttu-id="3723c-2946">경우에 첫 번째 요소 `separator` ef 및 두 번째 요소를 "bcde" 이면 split 작업의 결과 "a"와 "f"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2946">If the first element in `separator` was "ef" and the second element was "bcde", the result of the split operation would be "a" and "f".</span></span> <span data-ttu-id="3723c-2947">이 "bcde" 인스턴스에 있는 부분 문자열은와 일치 하기 때문에 요소 `separator` 부분 문자열 "f"가 발생 하기 전에 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2947">This is because the substring in the instance, "bcde", is encountered and matches an element in `separator` before the substring "f" is encountered.</span></span>  
  
 <span data-ttu-id="3723c-2948">그러나 경우 첫 번째 요소 `separator` "bcd"와 두 번째 요소 "bc" 이면 split 작업의 결과 "a" 및 "ef"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2948">However, if the first element of `separator` was "bcd" and the second element was "bc", the result of the split operation would be "a" and "ef".</span></span> <span data-ttu-id="3723c-2949">"Bcd"는 첫 번째 구분 기호 이므로이 `separator` 인스턴스 구분 기호와 일치 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2949">This is because "bcd" is the first delimiter in `separator` that matches a delimiter in the instance.</span></span> <span data-ttu-id="3723c-2950">첫 번째 요소 "bc"는 구분 기호의 순서 거꾸로 되어 있고 두 번째 요소가 "bcd", 결과 "a"와 "def"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2950">If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be "a" and "def".</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="3723c-2951">성능 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-2951">Performance considerations</span></span>  
 <span data-ttu-id="3723c-2952">합니다 <xref:System.String.Split%2A> 메서드는 반환된 된 배열 개체에 대 한 메모리를 할당 및 <xref:System.String> 각 배열 요소에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2952">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="3723c-2953">응용 프로그램에 필요한 최적의 성능, 메모리 할당을 관리 하는 것이 중요 응용 프로그램 사용을 고려 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 메서드 및 필요에 따라는 <xref:System.String.Compare%2A> 문자열 내에서 부분 문자열을 찾을 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2953">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>  
  
 <span data-ttu-id="3723c-2954">구분 기호 문자에서 문자열을 분할 하는 경우 사용 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 문자열의 구분 기호 문자를 찾는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2954">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="3723c-2955">구분 기호 문자열에서 문자열을 분할 하는 경우 사용 합니다 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOfAny%2A> 구분 기호 문자열의 첫 번째 문자를 찾기 위해 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2955">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="3723c-2956">사용 하 여는 <xref:System.String.Compare%2A> 첫 번째 문자는 다음 구분 기호 문자열의 나머지 문자는와 같은지 여부를 확인 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2956">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>  
  
 <span data-ttu-id="3723c-2957">또한 동일한 설정의 경우 문자는 여러에서 문자열을 분할 하 <xref:System.String.Split%2A> 메서드 호출을 단일 배열을 만들고 각 메서드 호출에서 참조 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2957">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="3723c-2958">이렇게 하면 각 메서드 호출의 추가 오버 헤드를 크게 줄어듭니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2958">This significantly reduces the additional overhead of each method call.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2959">다음 예제에서는 합니다 <xref:System.StringSplitOptions> 열거형을 포함 하거나 제외 하 여 생성 된 부분 문자열을 <xref:System.String.Split%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-2959">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>  
  
 [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
 [!code-csharp[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]
 [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-2960">
            <paramref name="count" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2960">
              <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-2961">
            <paramref name="options" />가 <see cref="T:System.StringSplitOptions" /> 값 중 하나가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2961">
              <paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2962">
            <para>에 [! INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 및 이전 버전에서 경우는 <see cref="M:System.String.Split(System.Char[])" /> 메서드에 전달 됩니다는 <paramref name="separator" /> 즉 <see langword="null" /> 문자가 없는 또는 메서드 약간 다른 문자 집합을 사용 하 여 분할 합니다 문자열 보다는 <see cref="M:System.String.Trim(System.Char[])" /> 메서드는 문자열을 트리밍하는 않습니다. 에 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 두 방법 모두 유니코드 공백 문자가의 동일한 집합을 사용 합니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2962">
              <para>In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string. In the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], both methods use an identical set of Unicode white-space characters.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartsWith">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-2963">이 문자열 인스턴스의 시작 부분과 지정한 문자열이 일치하는지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2963">Determines whether the beginning of this string instance matches a specified string.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(char value);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : char -&gt; bool" Usage="string.StartsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : string -&gt; bool" Usage="string.StartsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2964">비교할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2964">The string to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2965">이 문자열 인스턴스의 시작 부분과 지정한 문자열이 일치하는지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2965">Determines whether the beginning of this string instance matches the specified string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2966">이 문자열의 시작 부분이 <see langword="true" />와 일치하면 <paramref name="value" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2966">
              <see langword="true" /> if <paramref name="value" /> matches the beginning of this string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2967">이 메서드는 비교 `value` 와 같은 길이이 인스턴스의 시작 부분에 있는 부분 문자열과 `value`와 같은지 여부를 나타내는 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2967">This method compares `value` to the substring at the beginning of this instance that is the same length as `value`, and returns an indication whether they are equal.</span></span> <span data-ttu-id="3723c-2968">같은 문자로 `value` 빈 문자열 이어야 합니다 (<xref:System.String.Empty?displayProperty=nameWithType>)이 동일한 인스턴스에 대 한 참조 이거나이 인스턴스의 시작 부분과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2968">To be equal, `value` must be an empty string (<xref:System.String.Empty?displayProperty=nameWithType>), must be a reference to this same instance, or must match the beginning of this instance.</span></span>  
  
 <span data-ttu-id="3723c-2969">이 메서드는 현재 문화권을 사용 하 여 단어 (대/소문자 구분 및 문화권) 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2969">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2970">다음 예제에서는 정의 `StripStartTags` 메서드를 사용 하는 <xref:System.String.StartsWith%28System.String%29> 문자열의 시작 부분에서 시작 태그를 HTML을 제거 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2970">The following example defines a `StripStartTags` method that uses the <xref:System.String.StartsWith%28System.String%29> method to remove HTML start tags from the beginning of a string.</span></span> <span data-ttu-id="3723c-2971">`StripStartTags` 줄의 시작 부분에 여러 HTML 시작 태그를 제거 해야에 재귀적으로 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2971">Note that the `StripStartTags` method is called recursively to ensure that multiple HTML start tags at the beginning of the line are removed.</span></span> <span data-ttu-id="3723c-2972">이 예제에서는 문자열에 포함 된 HTML 태그를 제거 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2972">The example does not remove HTML tags embedded in a string.</span></span>  
  
 [!code-cpp[stringstartswith#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringstartswith/CPP/stringstartswith.cpp#1)]
 [!code-csharp[stringstartswith#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringstartswith/CS/stringstartswith.cs#1)]
 [!code-vb[stringstartswith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringstartswith/VB/stringstartswith.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2973">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2973">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-2974">
            <para>에 설명 된 대로 [Strings](~/docs/standard/base-types/best-practices-strings.md) 사용에 대 한 모범 사례 권장 기본값을 대체 하 고 대신 매개 변수를 필요로 하는 메서드를 호출 하는 문자열 비교 메서드를 호출 하지 명시적으로 지정 합니다. 현재 문화권의 문자열 비교 규칙을 사용 하 여 특정 문자열이 부분 문자열로 시작 하는지 여부를 결정할 호출을 <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /> 값을 사용 하 여 메서드 오버 로드 <see cref="F:System.StringComparison.CurrentCulture" /> 에 대 한 해당 <paramref name="comparisonType" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2974">
              <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified. To determine whether a string begins with a particular substring by using the string comparison rules of the current culture, call the <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.EndsWith(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : string * StringComparison -&gt; bool" Usage="string.StartsWith (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2975">비교할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2975">The string to compare.</span>
          </span>
        </param>
        <param name="comparisonType">
          <span data-ttu-id="3723c-2976">이 문자열과 <c>value</c>를 비교하는 방법을 결정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2976">One of the enumeration values that determines how this string and <c>value</c> are compared.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2977">지정한 비교 옵션을 사용하여 비교할 때 지정한 문자열과 이 문자열 인스턴스의 시작 부분이 일치하는지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2977">Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2978">이 인스턴스가 <see langword="true" />로 시작하는 경우 <paramref name="value" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2978">
              <see langword="true" /> if this instance begins with <paramref name="value" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2979">합니다 <xref:System.String.StartsWith%2A> 메서드 비교는 `value` 이 문자열의 시작 부분에 있는 부분 문자열과 매개 변수 같은지 여부를 나타내는 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2979">The <xref:System.String.StartsWith%2A> method compares the `value` parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="3723c-2980">같은 문자로 `value` 이 동일한 문자열에 대 한 참조를 여야 하며, 빈 문자열 이어야 합니다 (""), 또는이 문자열의 시작 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2980">To be equal, `value` must be a reference to this same string, must be the empty string (""), or must match the beginning of this string.</span></span> <span data-ttu-id="3723c-2981">수행할 비교 유형을 합니다 <xref:System.String.StartsWith%2A> 메서드 값에 따라 달라 집니다는 `comparisonType` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2981">The type of comparison performed by the <xref:System.String.StartsWith%2A> method depends on the value of the `comparisonType` parameter.</span></span> <span data-ttu-id="3723c-2982">비교는 현재 문화권의 규칙을 사용할 수 (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> 하 고 <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>) 또는 고정 문화권 (<xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType> 하 고 <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>), 또는 코드 포인트를 문자 단위로 비교를 구성할 수 있습니다 (<xref:System.StringComparison.Ordinal?displayProperty=nameWithType> 또는 <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="3723c-2982">The comparison can use the conventions of the current culture (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> and <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>) or the invariant culture (<xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType> and <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>), or it can consist of a character-by-character comparison of code points (<xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>).</span></span> <span data-ttu-id="3723c-2983">비교는 대/소문자 구분 될 수도 있습니다 (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, <xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType>, 또는 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>), 대/소문자를 무시할 수도 있습니다 (<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>를 <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>, <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="3723c-2983">The comparison can also be case-sensitive (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, <xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType>, or <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>), or it can ignore case (<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>, <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>, <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-2984">다음 예제에서는 문자열에 대 한 검색 단어로 시작 하는 긴 문자열의 시작 부분에 "the" "The"입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2984">The following example searches for the string "the" at the beginning of a longer string that begins with the word "The".</span></span> <span data-ttu-id="3723c-2985">예제에 대 한 호출의 출력으로는 <xref:System.String.StartsWith%28System.String%2CSystem.StringComparison%29> 메서드는 문화권을 구분 하지만 대/소문자 구분 비교를 수행 하는 문화권 및 case insensitive 비교를 수행 하는 호출 된 문자열과 일치 하는 동안 문자열 일치에 실패 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2985">As the output from the example shows, a call to the <xref:System.String.StartsWith%28System.String%2CSystem.StringComparison%29> method that performs a culture-insensitive but case-sensitive comparison fails to match the string, while a call that performs a culture- and case-insensitive comparison matches the string.</span></span>  
  
 [!code-cpp[System.String.StartsWith#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.startswith/cpp/StartsWith2.cpp#2)]
 [!code-csharp[System.String.StartsWith#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.startswith/cs/StartsWith2.cs#2)]
 [!code-vb[System.String.StartsWith#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.startswith/vb/StartsWith2.vb#2)]  
  
 <span data-ttu-id="3723c-2986">다음 예제에서는 특정 하위 문자열로 시작 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2986">The following example determines whether a string starts with a particular substring.</span></span> <span data-ttu-id="3723c-2987">2 차원 문자열 배열을 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2987">It initializes a two-dimensional string array.</span></span> <span data-ttu-id="3723c-2988">두 번째 차원의 첫 번째 요소에는 문자열을 포함 하 고 문자열의 첫 번째 문자열의 시작 부분에 대 한 검색을 포함 하는 두 번째 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2988">The first element in the second dimension contains a string, and the second element contains the string to search for at the start of the first string.</span></span> <span data-ttu-id="3723c-2989">문화권, 대/소문자가 무시 여부 및 서 수 비교를 수행 하는 지 여부를 선택 하면 영향을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2989">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span> <span data-ttu-id="3723c-2990">문자열 인스턴스는 합자에 포함 되어 있으면 해당 연속 된 문자를 사용 하 여 문화권 구분 비교 성공적으로 일치 하는지 note 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2990">Note that when the string instance contains a ligature, culture-sensitive comparisons with its consecutive characters successfully match.</span></span>  
  
 [!code-cpp[System.String.StartsWith#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.startswith/cpp/startswith1.cpp#1)]
 [!code-csharp[System.String.StartsWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.startswith/cs/startswith1.cs#1)]
 [!code-vb[System.String.StartsWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.startswith/vb/startswith1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-2991">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2991">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3723c-2992">
            <paramref name="comparisonType" />이 <see cref="T:System.StringComparison" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2992">
              <paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span>
          </span>
        </exception>
        <altmember cref="T:System.StringComparison" />
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String, ignoreCase As Boolean, culture As CultureInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : string * bool * System.Globalization.CultureInfo -&gt; bool" Usage="string.StartsWith (value, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="3723c-2993">비교할 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2993">The string to compare.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="3723c-2994">비교 시 대/소문자를 무시하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2994">
              <see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="3723c-2995">이 문자열과 <c>value</c>의 비교 방법을 결정하는 문화권 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2995">Cultural information that determines how this string and <c>value</c> are compared.</span>
          </span>
          <span data-ttu-id="3723c-2996">
            <c>culture</c>가 <see langword="null" />이면 현재 문화권이 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2996">If <c>culture</c> is <see langword="null" />, the current culture is used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-2997">지정한 문화권을 사용하여 비교할 때 이 문자열 인스턴스의 시작 부분과 지정한 문자열이 일치하는지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2997">Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-2998">이 문자열의 시작 부분이 <see langword="true" /> 매개 변수와 일치하면 <paramref name="value" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-2998">
              <see langword="true" /> if the <paramref name="value" /> parameter matches the beginning of this string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-2999">이 메서드를 비교 합니다 `value` 와 같은 길이이 문자열의 시작 부분에 있는 부분 문자열과 매개 변수 `value`, 같은지 여부를 나타내는 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-2999">This method compares the `value` parameter to the substring at the beginning of this string that is the same length as `value`, and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="3723c-3000">같은 문자로 `value` 빈 문자열 이어야 합니다 (<xref:System.String.Empty?displayProperty=nameWithType>)이 동일한 인스턴스에 대 한 참조 이거나이 인스턴스의 시작 부분과 일치 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3000">To be equal, `value` must be an empty string (<xref:System.String.Empty?displayProperty=nameWithType>), must be a reference to this same instance, or must match the beginning of this instance.</span></span>  
  
 <span data-ttu-id="3723c-3001">이 메서드는 지정 된 대/소문자 구분 및 문화권을 사용 하는 비교를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3001">This method performs a comparison using the specified casing and culture.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3002">다음 예제에서는 문자열을 다른 문자열의 시작 부분에서 발생 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3002">The following example determines whether a string occurs at the beginning of another string.</span></span> <span data-ttu-id="3723c-3003"><xref:System.String.StartsWith%2A> 메서드가 여러 번 대/소문자 구분, 소문자, 및 검색 결과 영향을 주는 다른 문화권을 사용 하 여 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3003">The <xref:System.String.StartsWith%2A> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.</span></span>  
  
 [!code-csharp[system.string.StartsWithCI#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.StartsWithCI/cs/swci.cs#1)]
 [!code-vb[system.string.StartsWithCI#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.StartsWithCI/vb/swci.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-3004">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3004">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Substring">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3005">이 인스턴스에서 부분 문자열을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3005">Retrieves a substring from this instance.</span>
          </span>
          <span data-ttu-id="3723c-3006">이 멤버는 오버로드됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3006">This member is overloaded.</span>
          </span>
          <span data-ttu-id="3723c-3007">구문, 사용법 및 예제를 비롯하여 이 멤버에 대한 자세한 내용을 보려면 오버로드 목록에서 이름을 클릭합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3007">For complete information about this member, including syntax, usage, and examples, click a name in the overload list.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public string Substring (int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Substring(int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Substring(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substring (startIndex As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Substring(int startIndex);" />
      <MemberSignature Language="F#" Value="member this.Substring : int -&gt; string" Usage="string.Substring startIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="3723c-3008">이 인스턴스의 부분 문자열에 있는 0부터 시작할 문자 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3008">The zero-based starting character position of a substring in this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3009">이 인스턴스에서 부분 문자열을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3009">Retrieves a substring from this instance.</span>
          </span>
          <span data-ttu-id="3723c-3010">부분 문자열은 지정된 문자 위치에서 시작하고 문자열 끝까지 계속됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3010">The substring starts at a specified character position and continues to the end of the string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3011">이 인스턴스의 <paramref name="startIndex" />에서 시작하는 부분 문자열에 해당하는 문자열이거나, <see cref="F:System.String.Empty" />가 이 인스턴스의 길이와 같으면 <paramref name="startIndex" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3011">A string that is equivalent to the substring that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3012">호출 하 여 <xref:System.String.Substring%28System.Int32%29> 지정된 된 문자 위치에서 시작 하 고 문자열의 끝에서 끝나는 문자열에서 부분 문자열을 추출 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3012">You call the <xref:System.String.Substring%28System.Int32%29> method to extract a substring from a string that begins at a specified character position and ends at the end of the string.</span></span> <span data-ttu-id="3723c-3013">시작 문자 위치는 0부터 시작 합니다. 즉, 문자열의 첫 번째 문자를 인덱스 0, 1 인덱싱하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3013">The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.</span></span> <span data-ttu-id="3723c-3014">지정된 된 문자 위치에서 시작 하기 전에 문자열의 끝에서 종료 하는 부분 문자열을 추출 하려면 호출을 <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3014">To extract a substring that begins at a specified character position and ends before to the end of the string, call the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-3015">이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3015">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-3016">대신, 시작 하는 새 문자열을 반환 합니다는 `startIndex` 현재 문자열의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3016">Instead, it returns a new string that begins at the `startIndex` position in the current string.</span></span>  
  
 <span data-ttu-id="3723c-3017">특정 문자 또는 문자 시퀀스를 시작 하는 부분 문자열을 추출 하려면 메서드를 같은 호출 <xref:System.String.IndexOf%2A> 나 <xref:System.String.IndexOf%2A> 의 값을 검색할 `startIndex`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3017">To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> to get the value of `startIndex`.</span></span> <span data-ttu-id="3723c-3018">두 번째 예제에서는이; "=" 문자 다음 문자를 시작 하는 키 값을 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3018">The second example illustrates this; it extracts a key value that begins one character position after the "=" character.</span></span>  
  
 <span data-ttu-id="3723c-3019">경우 `startIndex` 0, 원래 문자열을 변경 하지 않고 메서드가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3019">If `startIndex` is equal to zero, the method returns the original string unchanged.</span></span>  
   
  
## Examples  
 <span data-ttu-id="3723c-3020">다음 예제에서는 문자열에서 부분 문자열을 얻는 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3020">The following example demonstrates obtaining a substring from a string.</span></span>  
  
 [!code-cpp[System.String.Substring#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.String.Substring/cpp/Substring10.cpp#10)]
 [!code-csharp[System.String.Substring#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring10.cs#10)]
 [!code-vb[System.String.Substring#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring10.vb#10)]  
  
 <span data-ttu-id="3723c-3021">다음 예제에서는 <xref:System.String.Substring%2A> 등호 구분 되는 키/값 쌍을 구분 하는 방법 ("=") 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3021">The following example uses the <xref:System.String.Substring%2A> method to separate key/value pairs that are delimited by an equals ("=") character.</span></span>  
  
 [!code-csharp[System.String.Substring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring1.cs#1)]
 [!code-vb[System.String.Substring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring1.vb#1)]  
  
 <span data-ttu-id="3723c-3022"><xref:System.String.IndexOf%2A> 메서드는 문자열의 같음 문자의 위치를 가져오는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3022">The <xref:System.String.IndexOf%2A> method is used to get the position of the equals character in the string.</span></span> <span data-ttu-id="3723c-3023">에 대 한 호출을 <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> 문자열의 첫 번째 문자에서 시작에 대 한 호출에서 반환 된 문자 수에 대 한 확장 하는 키 이름을 추출 하는 메서드를 <xref:System.String.IndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3023">The call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method extracts the key name, which starts from the first character in the string and extends for the number of characters returned by the call to the <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="3723c-3024">에 대 한 호출을 <xref:System.String.Substring%28System.Int32%29> 메서드 키에 할당 된 값을 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3024">The call to the <xref:System.String.Substring%28System.Int32%29> method then extracts the value assigned to the key.</span></span> <span data-ttu-id="3723c-3025">이 문자를 넘어가는 하나의 문자 위치에서 시작 하 고 문자열의 끝까지 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3025">It starts at one character position beyond the equals character and extends to the end of the string.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-3026">
            <paramref name="startIndex" />이 0보다 작거나 이 인스턴스 길이보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3026">
              <paramref name="startIndex" /> is less than zero or greater than the length of this instance.</span>
          </span>
        </exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public string Substring (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Substring(int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Substring(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substring (startIndex As Integer, length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Substring(int startIndex, int length);" />
      <MemberSignature Language="F#" Value="member this.Substring : int * int -&gt; string" Usage="string.Substring (startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="3723c-3027">이 인스턴스의 부분 문자열에 있는 0부터 시작할 문자 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3027">The zero-based starting character position of a substring in this instance.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3723c-3028">부분 문자열에 있는 문자의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3028">The number of characters in the substring.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3029">이 인스턴스에서 부분 문자열을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3029">Retrieves a substring from this instance.</span>
          </span>
          <span data-ttu-id="3723c-3030">부분 문자열은 지정된 문자 위치에서 시작하고 길이도 지정되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3030">The substring starts at a specified character position and has a specified length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3031">이 인스턴스의 <paramref name="length" />에서 시작하는 <paramref name="startIndex" /> 길이의 부분 문자열에 해당하는 문자열이거나, <see cref="F:System.String.Empty" />가 이 인스턴스의 길이와 같고 <paramref name="startIndex" />가 0이면 <paramref name="length" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3031">A string that is equivalent to the substring of length <paramref name="length" /> that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance and <paramref name="length" /> is zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3032">호출 하 여 <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> 지정된 된 문자 위치에서 시작 하 고 문자열의 종료 되기 전에 종료 하는 문자열에서 부분 문자열을 추출 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3032">You call the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method to extract a substring from a string that begins at a specified character position and ends before the end of the string.</span></span> <span data-ttu-id="3723c-3033">시작 문자 위치는 0부터 시작 합니다. 즉, 문자열의 첫 번째 문자를 인덱스 0, 1 인덱싱하지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3033">The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.</span></span> <span data-ttu-id="3723c-3034">지정된 된 문자 위치에서 시작 하 고 문자열의 끝까지 계속 된 부분 문자열을 추출 하려면 호출을 <xref:System.String.Substring%28System.Int32%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3034">To extract a substring that begins at a specified character position and continues to the end of the string, call the <xref:System.String.Substring%28System.Int32%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-3035">이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3035">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-3036">대신 사용 하 여 새 문자열을 반환 합니다 `length` 부터 문자는 `startIndex` 현재 문자열의 위치입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3036">Instead, it returns a new string with `length` characters starting from the `startIndex` position in the current string.</span></span>  
  
 <span data-ttu-id="3723c-3037">`length` 매개 변수는 현재 문자열 인스턴스가에서 추출할 문자의 총 수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3037">The `length` parameter represents the total number of characters to extract from the current string instance.</span></span> <span data-ttu-id="3723c-3038">인덱스에서 시작 문자가 여기에 `startIndex`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3038">This includes the starting character found at index  `startIndex`.</span></span>  <span data-ttu-id="3723c-3039">즉, 합니다 <xref:System.String.Substring%2A> 메서드는 인덱스에서 문자를 추출 하려고 시도 `startIndex` 인덱스로 `startIndex`  +  `length` -1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3039">In other words, the <xref:System.String.Substring%2A> method attempts to extract characters from index `startIndex` to index `startIndex` + `length` - 1.</span></span>  
  
 <span data-ttu-id="3723c-3040">특정 문자 또는 문자 시퀀스를 시작 하는 부분 문자열을 추출 하려면 메서드를 같은 호출 <xref:System.String.IndexOf%2A> 나 <xref:System.String.LastIndexOf%2A> 의 값을 검색할 `startIndex`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3040">To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the value of `startIndex`.</span></span>  
  
 <span data-ttu-id="3723c-3041">부분 문자열에서 확장 하는 경우 `startIndex` 를 지정한 문자 시퀀스로 있습니다 메서드를 호출할 수와 같은 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.LastIndexOf%2A> 끝 문자 또는 문자 시퀀스의 인덱스를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3041">If the substring extends from `startIndex` to a specified character sequence, you can call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the index of the ending character or character sequence.</span></span>  <span data-ttu-id="3723c-3042">변환할 수 있습니다 다음 해당 값 문자열의 인덱스 위치는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3042">You can then convert that value to an index position in the string as follows:</span></span>  
  
-   <span data-ttu-id="3723c-3043">부분 문자열의 끝을 표시 하는 단일 문자에 대 한 검색 한 경우는 `length` 매개 변수가 같으면 `endIndex`  -  `startIndex` + 1 위치 `endIndex` 의 반환 값이를 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOf%2A> 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3043">If you've searched for a single character that is to mark the end of the substring, the `length` parameter equals  `endIndex` - `startIndex` + 1, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="3723c-3044">다음 예제에서는 문자열에서 "b" 문자를 연속 블록을 추출합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3044">The following example extracts a continuous block of "b" characters from a string.</span></span>  
  
     [!code-csharp[System.String.Substring#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring2.cs#2)]
     [!code-vb[System.String.Substring#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring2.vb#2)]  
  
-   <span data-ttu-id="3723c-3045">부분 문자열의 끝을 표시 하는 여러 문자에 대 한 검색 한 경우는 `length` 매개 변수가 같으면 `endIndex`  +  `endMatchLength`  -  `startIndex`여기서 `endIndex` 합니다 의반환값<xref:System.String.IndexOf%2A> 나 <xref:System.String.IndexOf%2A> 메서드. 및 `endMatchLength` 부분 문자열의 끝을 표시 하는 문자 시퀀스의 길이입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3045">If you've searched for multiple characters that are to mark the end of the substring, the `length` parameter equals  `endIndex` + `endMatchLength` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method., and `endMatchLength` is the length of the character sequence that marks the end of the substring.</span></span> <span data-ttu-id="3723c-3046">다음 예제에서는 XML을 포함 하는 텍스트 블록을 추출 `<definition>` 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3046">The following example extracts a block of text that contains an XML `<definition>` element.</span></span>  
  
     [!code-csharp[System.String.Substring#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring3.cs#3)]
     [!code-vb[System.String.Substring#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring3.vb#3)]  
  
-   <span data-ttu-id="3723c-3047">문자 또는 문자 시퀀스는 부분 문자열의 끝에 포함 되지 않은 경우는 `length` 매개 변수가 같으면 `endIndex`  -  `startIndex`여기서 `endIndex` 의 반환 값을 <xref:System.String.IndexOf%2A> 또는 <xref:System.String.IndexOf%2A> 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3047">If the character or character sequence is not included in the end of the substring, the `length` parameter equals `endIndex` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method.</span></span>  
  
 <span data-ttu-id="3723c-3048">경우 `startIndex` 0와 equals 메서드를 현재 문자열의 길이 변경 되지 않은 원래 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3048">If `startIndex` is equal to zero and  equals the length of the current string, the method returns the original string unchanged.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3049">다음 예제에 대 한 간단한 호출을 <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> 여섯 번째 문자 위치에서 시작 하는 문자열에서 두 개의 문자를 추출 하는 메서드 (즉,에서 인덱스 5).</span><span class="sxs-lookup"><span data-stu-id="3723c-3049">The following example illustrates a simple call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method that extracts two characters from a string starting at the sixth character position (that is, at index five).</span></span>  
  
 [!code-csharp[System.String.Substring#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring4.cs#4)]
 [!code-vb[System.String.Substring#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring4.vb#4)]  
  
 <span data-ttu-id="3723c-3050">다음 예제에서는 <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> 메서드 다음 세 가지 경우 문자열 내에서 부분 문자열을 분리 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3050">The following example uses the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method in the following three cases to isolate substrings within a string.</span></span> <span data-ttu-id="3723c-3051">두 가지 경우에 부분 문자열 비교에 사용 되 고 세 번째 사례에서 잘못 된 매개 변수를 지정 하기 때문에 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3051">In two cases the substrings are used in comparisons, and in the third case an exception is thrown because invalid parameters are specified.</span></span>  
  
-   <span data-ttu-id="3723c-3052">단일 문자 및 문자열 (인덱스 2)에서 세 번째 위치를 추출 하 고 "c"와 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3052">It extracts the single character and the third position in the string (at index 2) and compares it with a "c".</span></span> <span data-ttu-id="3723c-3053">이 비교 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3053">This comparison returns `true`.</span></span>  
  
-   <span data-ttu-id="3723c-3054">문자열 (인덱스 3)에서 네 번째 위치에서 시작 하는 0 개의 문자를 추출 하 고 전달 된 <xref:System.String.IsNullOrEmpty%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3054">It extracts zero characters starting at the fourth position in the string (at index 3) and passes it to the <xref:System.String.IsNullOrEmpty%2A> method.</span></span> <span data-ttu-id="3723c-3055">이 true를 반환 하기 때문에 대 한 호출을 <xref:System.String.Substring%2A> 메서드가 반환 되는 <xref:System.String.Empty?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3055">This returns true because the call to the <xref:System.String.Substring%2A> method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="3723c-3056">문자열에서 네 번째 위치에서 시작 하는 한 문자를 추출 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3056">It attempts to extract one character starting at the fourth position in the string.</span></span> <span data-ttu-id="3723c-3057">해당 위치에 문자가 없는 이기 때문에 메서드 호출 throw는 <xref:System.ArgumentOutOfRangeException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3057">Because there is no character at that position, the method call throws an <xref:System.ArgumentOutOfRangeException> exception.</span></span>  
  
 [!code-csharp[Classic String.Substring1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.Substring1 Example/CS/source.cs#1)]
 [!code-vb[Classic String.Substring1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.Substring1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="3723c-3058">다음 예제에서는 <xref:System.String.Substring%2A> 등호 구분 되는 키/값 쌍을 구분 하는 방법 ("=") 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3058">The following example uses the <xref:System.String.Substring%2A> method to separate key/value pairs that are delimited by an equals ("=") character.</span></span>  
  
 [!code-csharp[System.String.Substring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring1.cs#1)]
 [!code-vb[System.String.Substring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring1.vb#1)]  
  
 <span data-ttu-id="3723c-3059"><xref:System.String.IndexOf%2A> 메서드는 문자열의 같음 문자의 위치를 가져오는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3059">The <xref:System.String.IndexOf%2A> method is used to get the position of the equals character in the string.</span></span> <span data-ttu-id="3723c-3060">에 대 한 호출을 <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> 문자열의 첫 번째 문자에서 시작에 대 한 호출에서 반환 된 문자 수에 대 한 확장 하는 키 이름을 추출 하는 메서드를 <xref:System.String.IndexOf%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3060">The call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method extracts the key name, which starts from the first character in the string and extends for the number of characters returned by the call to the <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="3723c-3061">에 대 한 호출을 <xref:System.String.Substring%28System.Int32%29> 메서드 키에 할당 된 값을 추출 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3061">The call to the <xref:System.String.Substring%28System.Int32%29> method then extracts the value assigned to the key.</span></span> <span data-ttu-id="3723c-3062">이 문자를 넘어가는 하나의 문자 위치에서 시작 하 고 문자열의 끝까지 확장 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3062">It starts at one character position beyond the equals character and extends to the end of the string.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-3063">
            <paramref name="startIndex" /> + <paramref name="length" />는 문자 위치가 이 인스턴스 안에 없음을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3063">
              <paramref name="startIndex" /> plus <paramref name="length" /> indicates a position not within this instance.</span>
          </span>
          <span data-ttu-id="3723c-3064">-또는-  <paramref name="startIndex" /> 또는 <paramref name="length" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3064">-or-  <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Char&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;char&gt; IEnumerable&lt;char&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;char&gt; System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#Collections#Generic#IEnumerable&lt;char&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of Char) Implements IEnumerable(Of Char).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;char&gt; ^ System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;char&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3065">현재 <see cref="T:System.String" /> 개체를 반복하는 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3065">Returns an enumerator that iterates through the current <see cref="T:System.String" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3066">현재 <see cref="T:System.String" /> 개체를 반복하는 데 사용할 수 있는 강력한 형식의 열거자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3066">A strongly-typed enumerator that can be used to iterate through the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3067">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3067">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3068">사용할 수 있습니다 경우에만 합니다 <xref:System.String> 캐스팅 된는 <xref:System.Collections.Generic.IEnumerable%601> 인터페이스 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3068">It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface object.</span></span> <span data-ttu-id="3723c-3069">자세한 내용은 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 메서드를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-3069">For more information, see the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3070">현재 <see cref="T:System.String" /> 개체를 반복하는 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3070">Returns an enumerator that iterates through the current <see cref="T:System.String" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3071">현재 문자열을 반복하는 데 사용할 수 있는 열거자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3071">An enumerator that can be used to iterate through the current string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3072">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3072">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3073"><xref:System.String> 인스턴스가 <xref:System.Collections.IEnumerable> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3073">It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span> <span data-ttu-id="3723c-3074">자세한 내용은 <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> 메서드를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-3074">For more information, see the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3075">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3075">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3076">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3076">For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3077">현재 문자열의 값이 <see langword="true" />이면 <see cref="F:System.Boolean.TrueString" />이고, 현재 문자열의 값이 <see langword="false" />이면 <see cref="F:System.Boolean.FalseString" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3077">
              <see langword="true" /> if the value of the current string is <see cref="F:System.Boolean.TrueString" />; <see langword="false" /> if the value of the current string is <see cref="F:System.Boolean.FalseString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3078">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3078">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3079"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3079">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3080">권장된 대안 호출 하는 것은 <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3080">The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-3081">현재 문자열의 값은 <see cref="F:System.Boolean.TrueString" /> 또는 <see cref="F:System.Boolean.FalseString" />이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3081">The value of the current string is not <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3082">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3082">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3083">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3083">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3084">현재 <see cref="T:System.String" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3084">The converted value of the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3085">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3085">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3086"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3086">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3087">권장된 대안 호출 하는 것은 <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3087">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-3088">현재 <see cref="T:System.String" /> 개체의 값을 구문 분석할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3088">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3723c-3089">현재 <see cref="T:System.String" /> 개체의 값이 <see cref="F:System.Byte.MaxValue" />보다 크거나 <see cref="F:System.Byte.MinValue" />보다 작은 수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3089">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3090">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3090">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3091">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3091">For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3092">현재 <see cref="T:System.String" /> 개체의 인덱스 0에 있는 문자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3092">The character at index 0 in the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3093">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3093">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3094"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3094">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3095">권장된 대안 호출 하는 것은 <xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3095">The recommended alternative is to call the <xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3096">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3096">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3097">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3097">For a description of this member, see <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3098">현재 <see cref="T:System.String" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3098">The converted value of the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3099">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3099">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3100"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3100">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3101">권장된 대안 호출 하는 것은 <xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3101">The recommended alternative is to call the <xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3102">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3102">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3103">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3103">For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3104">현재 <see cref="T:System.String" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3104">The converted value of the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3105">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3105">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3106"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3106">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3107">권장된 대안 호출 하는 것은 <xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3107">The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-3108">현재 <see cref="T:System.String" /> 개체의 값을 구문 분석할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3108">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3723c-3109">현재 <see cref="T:System.String" /> 개체의 값이 <see cref="F:System.Decimal.MinValue" />보다 작거나 <see cref="F:System.Decimal.MaxValue" />보다 큰 수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3109">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Decimal.MinValue" /> or than <see cref="F:System.Decimal.MaxValue" /> greater.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3110">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3110">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3111">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3111">For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3112">현재 <see cref="T:System.String" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3112">The converted value of the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3113">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3113">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3114"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3114">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3115">권장된 대안 호출 하는 것은 <xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3115">The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-3116">현재 <see cref="T:System.String" /> 개체의 값을 구문 분석할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3116">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3723c-3117">현재 <see cref="T:System.String" /> 개체의 값이 <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3117">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3118">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3118">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3119">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3119">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3120">현재 <see cref="T:System.String" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3120">The converted value of the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3121">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3121">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3122"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3122">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3123">권장된 대안 호출 하는 것은 <xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3123">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-3124">현재 <see cref="T:System.String" /> 개체의 값을 구문 분석할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3124">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3723c-3125">현재 <see cref="T:System.String" /> 개체의 값이 <see cref="F:System.Int16.MaxValue" />보다 크거나 <see cref="F:System.Int16.MinValue" />보다 작은 수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3125">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3126">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3126">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3127">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3127">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3128">현재 <see cref="T:System.String" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3128">The converted value of the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3129">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3129">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3130"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3130">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3131">권장된 대안 호출 하는 것은 <xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3131">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3132">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3132">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3133">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3133">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3134">현재 <see cref="T:System.String" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3134">The converted value of the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3135">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3135">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3136"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3136">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3137">권장된 대안 호출 하는 것은 <xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3137">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3138">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3138">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3139">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3139">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3140">현재 <see cref="T:System.String" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3140">The converted value of the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3141">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3141">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3142"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3142">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3143">권장된 대안 호출 하는 것은 <xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3143">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-3144">현재 <see cref="T:System.String" /> 개체의 값을 구문 분석할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3144">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3723c-3145">현재 <see cref="T:System.String" /> 개체의 값이 <see cref="F:System.SByte.MaxValue" />보다 크거나 <see cref="F:System.SByte.MinValue" />보다 작은 수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3145">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3146">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3146">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3147">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3147">For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3148">현재 <see cref="T:System.String" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3148">The converted value of the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3149">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3149">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3150"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3150">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3151">권장된 대안 호출 하는 것은 <xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3151">The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="3723c-3152">반환되는 개체의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3152">The type of the returned object.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="3723c-3153">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3153">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3154">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3154">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3155">현재 <see cref="T:System.String" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3155">The converted value of the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3156">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3156">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3157"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3157">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3158">권장된 대안 호출 하는 것은 <xref:System.Convert.ChangeType%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3158">The recommended alternative is to call the <xref:System.Convert.ChangeType%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-3159">
            <paramref name="type" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3159">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="3723c-3160">현재 <see cref="T:System.String" /> 개체의 값을 <paramref name="type" /> 매개 변수로 지정된 형식으로 변환할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3160">The value of the current <see cref="T:System.String" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3161">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3161">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3162">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3162">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3163">현재 <see cref="T:System.String" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3163">The converted value of the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3164">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3164">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3165"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3165">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3166">권장된 대안 호출 하는 것은 <xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3166">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-3167">현재 <see cref="T:System.String" /> 개체의 값을 구문 분석할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3167">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3723c-3168">현재 <see cref="T:System.String" /> 개체의 값이 <see cref="F:System.UInt16.MaxValue" />보다 크거나 <see cref="F:System.UInt16.MinValue" />보다 작은 수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3168">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3169">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3169">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3170">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3170">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3171">현재 <see cref="T:System.String" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3171">The converted value of the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3172">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3172">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3173"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3173">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3174">권장된 대안 호출 하는 것은 <xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3174">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="3723c-3175">현재 <see cref="T:System.String" /> 개체의 값을 구문 분석할 수 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3175">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="3723c-3176">현재 <see cref="T:System.String" /> 개체의 값이 <see cref="F:System.UInt32.MaxValue" />보다 크거나 <see cref="F:System.UInt32.MinValue" />보다 작은 수인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3176">The value of the current <see cref="T:System.String" /> object is a number greater <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3177">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3177">An object that provides culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3178">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3178">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3179">현재 <see cref="T:System.String" /> 개체의 변환된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3179">The converted value of the current <see cref="T:System.String" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3180">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="3723c-3180">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3723c-3181"><xref:System.String> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3181">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="3723c-3182">권장된 대안 호출 하는 것은 <xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3182">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToCharArray">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3183">이 인스턴스의 문자를 유니코드 문자 배열에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3183">Copies the characters in this instance to a Unicode character array.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToCharArray">
      <MemberSignature Language="C#" Value="public char[] ToCharArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char[] ToCharArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToCharArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToCharArray () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;char&gt; ^ ToCharArray();" />
      <MemberSignature Language="F#" Value="member this.ToCharArray : unit -&gt; char[]" Usage="string.ToCharArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3184">이 인스턴스의 문자를 유니코드 문자 배열에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3184">Copies the characters in this instance to a Unicode character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3185">해당 요소가 이 인스턴스의 각 문자로 이루어진 유니코드 문자 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3185">A Unicode character array whose elements are the individual characters of this instance.</span>
          </span>
          <span data-ttu-id="3723c-3186">이 인스턴스가 빈 문자열이면 반환된 배열은 길이가 0인 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3186">If this instance is an empty string, the returned array is empty and has a zero length.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3187">이 메서드는 각 문자를 복사 (즉, 각 <xref:System.Char> 개체)에서 문자 배열에는 문자열입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3187">This method copies each character (that is, each <xref:System.Char> object) in a string to a character array.</span></span> <span data-ttu-id="3723c-3188">반환 된 문자 배열의 인덱스 0에 있는 복사 첫 번째 문자는 복사할 마지막 문자 인덱스를 <xref:System.Array.Length%2A?displayProperty=nameWithType> – 1입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3188">The first character copied is at index zero of the returned character array; the last character copied is at index <xref:System.Array.Length%2A?displayProperty=nameWithType> – 1.</span></span>  
  
 <span data-ttu-id="3723c-3189">문자 배열의 문자에서 문자열을 만들려면, 호출 된 <xref:System.String.%23ctor%28System.Char%5B%5D%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3189">To create a string from the characters in a character array, call the <xref:System.String.%23ctor%28System.Char%5B%5D%29> constructor.</span></span>  
  
 <span data-ttu-id="3723c-3190">문자열에 인코딩된 문자를 포함 하는 바이트 배열을 만들려면 적절 한 인스턴스화 <xref:System.Text.Encoding> 개체와 호출 해당 <xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3190">To create a byte array that contains the encoded characters in a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3723c-3191">.NET Framework에서 사용할 수 있는 표준 인코딩 중 일부는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3191">Some of the standard encodings available in the .NET Framework include the following:</span></span>  
  
|<span data-ttu-id="3723c-3192">인코딩</span><span class="sxs-lookup"><span data-stu-id="3723c-3192">Encoding</span></span>|<span data-ttu-id="3723c-3193">Object</span><span class="sxs-lookup"><span data-stu-id="3723c-3193">Object</span></span>|  
|--------------|------------|  
|<span data-ttu-id="3723c-3194">ASCII</span><span class="sxs-lookup"><span data-stu-id="3723c-3194">ASCII</span></span>|<xref:System.Text.ASCIIEncoding>|  
|<span data-ttu-id="3723c-3195">UTF-7</span><span class="sxs-lookup"><span data-stu-id="3723c-3195">UTF-7</span></span>|<xref:System.Text.UTF7Encoding>|  
|<span data-ttu-id="3723c-3196">UTF-8</span><span class="sxs-lookup"><span data-stu-id="3723c-3196">UTF-8</span></span>|<xref:System.Text.UTF8Encoding>|  
|<span data-ttu-id="3723c-3197">UTF-16</span><span class="sxs-lookup"><span data-stu-id="3723c-3197">UTF-16</span></span>|<xref:System.Text.UnicodeEncoding>|  
|<span data-ttu-id="3723c-3198">UTF-32</span><span class="sxs-lookup"><span data-stu-id="3723c-3198">UTF-32</span></span>|<xref:System.Text.UTF32Encoding>|  
  
 <span data-ttu-id="3723c-3199">자세한 내용은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3199">For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3200">다음 예제에서는 <xref:System.String.ToCharArray%2A> 문자 배열에 문자열의 문자를 추출 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3200">The following example calls the <xref:System.String.ToCharArray%2A> method to extract the characters in a string to a character array.</span></span> <span data-ttu-id="3723c-3201">그런 다음 배열의 원래 문자열 및 요소를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3201">It then displays the original string and the elements in the array.</span></span>  
  
 [!code-csharp[System.String.ToCharArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.tochararray/cs/ToCharArray1.cs#1)]
 [!code-vb[System.String.ToCharArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.tochararray/vb/ToCharArray1.vb#1)]  
  
 <span data-ttu-id="3723c-3202">다음 예제에서는 구분 기호로 분리 된 문자열의 구분 기호로 사용 되는 문자를 포함 하는 문자열을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3202">The following example defines a string containing the characters that serve as delimiters in a delimited string.</span></span> <span data-ttu-id="3723c-3203">그런 다음 호출 하는 <xref:System.String.ToCharArray%2A> 에 전달 될 수 있는 문자 배열을 만드는 방법의 <xref:System.String.Split%28System.Char%5B%5D%29> 해당 개별 부분 문자열로 구분 된 문자열을 구분 하는 방법.</span><span class="sxs-lookup"><span data-stu-id="3723c-3203">It then calls the <xref:System.String.ToCharArray%2A> method to create a character array that can be passed to the <xref:System.String.Split%28System.Char%5B%5D%29> method to separate the delimited string into its individual substrings.</span></span>  
  
 [!code-cpp[StringSplit2#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringSplit2/CPP/stringsplit2.cpp#1)] 
 [!code-csharp[StringSplit2#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringSplit2/CS/stringsplit2.cs#1)] 
 [!code-vb[StringSplit2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringSplit2/VB/stringsplit2.vb#1)]   
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="ToCharArray">
      <MemberSignature Language="C#" Value="public char[] ToCharArray (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char[] ToCharArray(int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToCharArray(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToCharArray (startIndex As Integer, length As Integer) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;char&gt; ^ ToCharArray(int startIndex, int length);" />
      <MemberSignature Language="F#" Value="member this.ToCharArray : int * int -&gt; char[]" Usage="string.ToCharArray (startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="3723c-3204">이 인스턴스에 있는 부분 문자열의 시작 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3204">The starting position of a substring in this instance.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="3723c-3205">이 인스턴스에 있는 부분 문자열의 길이입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3205">The length of the substring in this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3206">이 인스턴스의 지정된 부분 문자열에 있는 문자를 유니코드 문자 배열에 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3206">Copies the characters in a specified substring in this instance to a Unicode character array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3207">해당 요소가 이 인스턴스의 <paramref name="length" /> 문자 위치부터 <paramref name="startIndex" /> 개의 문자로 이루어진 유니코드 문자 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3207">A Unicode character array whose elements are the <paramref name="length" /> number of characters in this instance starting from character position <paramref name="startIndex" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3208">이 메서드는 부분 문자열에서에서 문자 배열에 문자를 복사합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3208">This method copies the characters in a portion of a string to a character array.</span></span> <span data-ttu-id="3723c-3209">문자열에서 문자 배열의 문자 범위를 만들려면 호출을 <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3209">To create a string from a range of characters in a character array, call the  <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor.</span></span>  
  
 <span data-ttu-id="3723c-3210">`startIndex` 매개 변수는 0부터 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3210">The `startIndex` parameter is zero-based.</span></span> <span data-ttu-id="3723c-3211">즉, 문자열 인스턴스의 첫 번째 문자의 인덱스는 0입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3211">That is, the index of the first character in the string instance is zero.</span></span>  
  
 <span data-ttu-id="3723c-3212">경우 `length` 가 0 이면 반환 된 배열은 비어 있고 길이가 0입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3212">If `length` is zero, the returned array is empty and has a zero length.</span></span> <span data-ttu-id="3723c-3213">이 인스턴스가 `null` 또는 빈 문자열 (""), 반환 된 배열은 비어 있고 길이가 0입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3213">If this instance is `null` or an empty string (""), the returned array is empty and has a zero length.</span></span>  
  
 <span data-ttu-id="3723c-3214">문자열의 부분에 인코딩된 문자를 포함 하는 바이트 배열을 만들려면 적절 한 인스턴스화 <xref:System.Text.Encoding> 개체와 호출 해당 <xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3214">To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="3723c-3215">.NET Framework에서 사용할 수 있는 표준 인코딩 중 일부는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3215">Some of the standard encodings available in the .NET Framework include the following:</span></span>  
  
|<span data-ttu-id="3723c-3216">인코딩</span><span class="sxs-lookup"><span data-stu-id="3723c-3216">Encoding</span></span>|<span data-ttu-id="3723c-3217">Object</span><span class="sxs-lookup"><span data-stu-id="3723c-3217">Object</span></span>|  
|--------------|------------|  
|<span data-ttu-id="3723c-3218">ASCII</span><span class="sxs-lookup"><span data-stu-id="3723c-3218">ASCII</span></span>|<xref:System.Text.ASCIIEncoding>|  
|<span data-ttu-id="3723c-3219">UTF-7</span><span class="sxs-lookup"><span data-stu-id="3723c-3219">UTF-7</span></span>|<xref:System.Text.UTF7Encoding>|  
|<span data-ttu-id="3723c-3220">UTF-8</span><span class="sxs-lookup"><span data-stu-id="3723c-3220">UTF-8</span></span>|<xref:System.Text.UTF8Encoding>|  
|<span data-ttu-id="3723c-3221">UTF-16</span><span class="sxs-lookup"><span data-stu-id="3723c-3221">UTF-16</span></span>|<xref:System.Text.UnicodeEncoding>|  
|<span data-ttu-id="3723c-3222">UTF-32</span><span class="sxs-lookup"><span data-stu-id="3723c-3222">UTF-32</span></span>|<xref:System.Text.UTF32Encoding>|  
  
 <span data-ttu-id="3723c-3223">자세한 내용은 [.NET Framework의 문자 인코딩](~/docs/standard/base-types/character-encoding.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3223">For more information, see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3224">다음 예제에서는 문자열 내에서 부분 문자열을 문자 배열로 변환을 열거 하 고 배열의 요소를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3224">The following example converts a substring within a string to an array of characters, then enumerates and displays the elements of the array.</span></span>  
  
 [!code-cpp[string.tochararray1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.ToCharArray1/CPP/tocharry1.cpp#1)]
 [!code-csharp[string.tochararray1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.ToCharArray1/CS/tocharry1.cs#1)]
 [!code-vb[string.tochararray1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.ToCharArray1/VB/tocharry1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3723c-3225">
            <paramref name="startIndex" /> 또는 <paramref name="length" />가 0보다 작습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3225">
              <paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span>
          </span>
          <span data-ttu-id="3723c-3226">-또는-  <paramref name="startIndex" /> + <paramref name="length" />가 이 인스턴스의 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3226">-or-  <paramref name="startIndex" /> plus <paramref name="length" /> is greater than the length of this instance.</span>
          </span>
        </exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3227">이 문자열의 복사본을 소문자로 변환하여 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3227">Returns a copy of this string converted to lowercase.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public string ToLower ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLower() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLower" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLower () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLower();" />
      <MemberSignature Language="F#" Value="member this.ToLower : unit -&gt; string" Usage="string.ToLower " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3228">이 문자열의 복사본을 소문자로 변환하여 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3228">Returns a copy of this string converted to lowercase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3229">소문자 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3229">A string in lowercase.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3230">이 메서드는 현재 문화권의 대/소문자 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3230">This method takes into account the casing rules of the current culture.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-3231">이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3231">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-3232">대신,는 현재 인스턴스에서 모든 문자는 소문자로 변환 된 새 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3232">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="3723c-3233">보안 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-3233">Security Considerations</span></span>  
 <span data-ttu-id="3723c-3234">호출에서 발생 하는 대/소문자 구분 작업을 <xref:System.String.ToLower> 메서드는 현재 문화권의 대/소문자 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3234">The casing operation that results from calling the <xref:System.String.ToLower> method takes the casing conventions of the current culture into account.</span></span> <span data-ttu-id="3723c-3235">파일 이름이 같은 운영 체제 식별자의 대 / 소문자 버전을 사용 해야 하는 경우 명명 된 파이프 또는 레지스트리 키를 사용 합니다 <xref:System.String.ToLowerInvariant%2A> 또는 <xref:System.String.ToUpperInvariant%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3235">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span> <span data-ttu-id="3723c-3236">모든 문화권에서 동일한 결과 (달리는 <xref:System.String.ToLower> 메서드) 하 고 보다 효율적으로 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3236">This produces the same result in every culture (unlike the <xref:System.String.ToLower> method) and performs more efficiently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3237">다음 예제에서는 소문자가 혼합된 되어 있는 여러 문자열 소문자로 변환합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3237">The following example converts several mixed case strings to lowercase.</span></span>  
  
 [!code-cpp[stringlowerupper#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringlowerupper/CPP/stringtolower.cpp#1)]
 [!code-csharp[stringlowerupper#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringlowerupper/CS/stringtolower.cs#1)]
 [!code-vb[stringlowerupper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringlowerupper/VB/stringtolower.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-3238">
            <para>에 설명 된 대로 [Strings](~/docs/standard/base-types/best-practices-strings.md) 사용에 대 한 모범 사례 권장 기본값을 대체 하 고 대신 매개 변수를 필요로 하는 메서드를 호출 하는 문자열 대/소문자 구분 메서드를 호출 하지 명시적으로 지정 합니다. 문자를 현재 문화권의 대/소문자 규칙을 사용 하 여 소문자로 변환할 호출을 <see cref="M:System.String.ToLower(System.Globalization.CultureInfo)" /> 값을 사용 하 여 메서드 오버 로드 <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> 에 대 한 해당 <paramref name="culture" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3238">
              <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string casing methods that substitute default values and instead call methods that require parameters to be explicitly specified. To convert a character to lowercase by using the casing conventions of the current culture, call the <see cref="M:System.String.ToLower(System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public string ToLower (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLower(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLower(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLower (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLower(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.ToLower : System.Globalization.CultureInfo -&gt; string" Usage="string.ToLower culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="3723c-3239">문화권별 대/소문자 규칙을 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3239">An object that supplies culture-specific casing rules.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3240">지정한 문화권의 대/소문자 규칙을 사용하여 소문자로 변환된 이 문자열의 복사본을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3240">Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3241">소문자로 표시된 현재 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3241">The lowercase equivalent of the current string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3242">지정 된 문화권의 대/소문자 규칙을 `culture` 매개 변수에 변경 되는 방식을 문자열의 대/소문자를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3242">The casing rules of the culture specified by the `culture` parameter determine the way the case of the string is changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-3243">이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3243">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-3244">대신,는 현재 인스턴스에서 모든 문자는 소문자로 변환 된 새 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3244">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="3723c-3245">보안 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-3245">Security Considerations</span></span>  
 <span data-ttu-id="3723c-3246">전달 하는 경우는 <xref:System.String.ToLower%28System.Globalization.CultureInfo%29> 메서드를 <xref:System.Globalization.CultureInfo> 이외의 개체 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>, 대/소문자 구분 작업 계정에는 culture 별 규칙 걸립니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3246">If you pass the <xref:System.String.ToLower%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>, the casing operation will take culture-specific rules into account.</span></span> <span data-ttu-id="3723c-3247">파일 이름이 같은 운영 체제 식별자의 대 / 소문자 버전을 사용 해야 하는 경우 명명 된 파이프 또는 레지스트리 키를 사용 합니다 <xref:System.String.ToLowerInvariant%2A> 또는 <xref:System.String.ToUpperInvariant%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3247">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="3723c-3248">이 모든 문화권에서 동일한 결과 생성 하 고 보다 효율적으로 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3248">This produces the same result in every culture and performs more efficiently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3249">다음 예제에서는 두 문자열의 대문자를 미국 및 터키어-터키 문화권을 사용 하 여 문자를 소문자로 변환한 다음 소문자 문자열을 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3249">The following example converts two strings of uppercase characters to lowercase characters using the English-United States and Turkish-Turkey cultures, then compares the lowercase strings.</span></span> <span data-ttu-id="3723c-3250">대문자 문자열을 제외 하는 유니코드 LATIN CAPITAL LETTER I 한 문자열에서 각 발생을 다른 문자열 LATIN CAPITAL LETTER I와 점 위에 포함 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3250">The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span>  
  
 [!code-cpp[string.tolower1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.tolower1/CPP/tolower.cpp#1)]
 [!code-csharp[string.tolower1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.tolower1/CS/tolower.cs#1)]
 [!code-vb[string.tolower1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.tolower1/VB/tolower.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-3251">
            <paramref name="culture" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3251">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.ToUpper" />
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public string ToLowerInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLowerInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLowerInvariant" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLowerInvariant () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLowerInvariant();" />
      <MemberSignature Language="F#" Value="member this.ToLowerInvariant : unit -&gt; string" Usage="string.ToLowerInvariant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3252">고정 문화권의 대/소문자 규칙을 사용하여 소문자로 변환된 이 <see cref="T:System.String" /> 개체의 복사본을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3252">Returns a copy of this <see cref="T:System.String" /> object converted to lowercase using the casing rules of the invariant culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3253">소문자로 표시된 현재 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3253">The lowercase equivalent of the current string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3254">고정 문화권을 문화권을 구분 하는 문화권을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3254">The invariant culture represents a culture that is culture-insensitive.</span></span> <span data-ttu-id="3723c-3255">연결 된 영어와 있지만 특정 국가 또는 지역입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3255">It is associated with the English language but not with a specific country or region.</span></span> <span data-ttu-id="3723c-3256">자세한 내용은 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 속성을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-3256">For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="3723c-3257">응용 프로그램 사용 하 여 현재 문화권에 의해 영향을 받지 않는 예측 가능한 방식으로 변경 되는 문자열의 대/소문자에 따라 달라 지는 <xref:System.String.ToLowerInvariant%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3257">If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToLowerInvariant%2A> method.</span></span> <span data-ttu-id="3723c-3258">합니다 <xref:System.String.ToLowerInvariant%2A> 메서드는 `ToLower(CultureInfo.InvariantCulture)`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3258">The <xref:System.String.ToLowerInvariant%2A> method is equivalent to `ToLower(CultureInfo.InvariantCulture)`.</span></span> <span data-ttu-id="3723c-3259">문자열의 컬렉션을 사용자 인터페이스 컨트롤에 예측 가능한 순서로 나타나야 하는 경우에 메서드는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3259">The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-3260">이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3260">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-3261">대신,는 현재 인스턴스에서 모든 문자는 소문자로 변환 된 새 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3261">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="3723c-3262">보안 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-3262">Security Considerations</span></span>  
 <span data-ttu-id="3723c-3263">파일 이름이 같은 운영 체제 식별자의 대 / 소문자 버전을 사용 해야 하는 경우 명명 된 파이프 또는 레지스트리 키를 사용 합니다 <xref:System.String.ToLowerInvariant%2A> 또는 <xref:System.String.ToUpperInvariant%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3263">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3264">다음 예제에서는 다양 한 언어의에서 단어를 포함 하는 문자열 배열을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3264">The following example defines a string array that contains a single word in a number of languages.</span></span> <span data-ttu-id="3723c-3265"><xref:System.String.ToLowerInvariant%2A> 메서드는 각 단어의 대/소문자 버전을 사용 하 여 병렬 배열의 요소를 채우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3265">The <xref:System.String.ToLowerInvariant%2A> method is used to populate the elements of a parallel array with the case-insensitive version of each word.</span></span> <span data-ttu-id="3723c-3266"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> 요소 언어에 관계 없이 동일한 순서로 표시 되도록 소문자 배열의 요소 순서에 따라 대/소문자 구분 배열을 정렬 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3266">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method is used to sort the case-sensitive array based on the order of elements in the lowercase array to ensure that elements appear in the same order regardless of language.</span></span>  
  
 [!code-csharp[System.String.ToLowerInvariant#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.tolowerinvariant/cs/tolowerinvariant.cs#1)]
 [!code-vb[System.String.ToLowerInvariant#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.tolowerinvariant/vb/tolowerinvariant.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToUpperInvariant" />
        <altmember cref="M:System.String.ToLower(System.Globalization.CultureInfo)" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3267">이 인스턴스의 값을 <see cref="T:System.String" />으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3267">Converts the value of this instance to a <see cref="T:System.String" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="string.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3268">
            <see cref="T:System.String" />의 이 인스턴스를 반환하며, 이때 실제 변환은 수행되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3268">Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3269">현재 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3269">The current string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3270">이 메서드가 반환 하기만 하면 변경 하지 않고 현재 문자열 이므로 직접 호출할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3270">Because this method simply returns the current string unchanged, there is no need to call it directly.</span></span> <span data-ttu-id="3723c-3271">복합 형식 지정 예제와 같이 작업에에서는 암시적으로 호출 일반적으로 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3271">It is usually called implicitly in a composite formatting operation, as the example shows.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3272">다음 예제는 <xref:System.String.ToString%2A> 메서드. 이 예제에서는 명시적으로 호출 하지 않는 참고를 <xref:System.String.ToString%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3272">The following example demonstrates the <xref:System.String.ToString%2A> method.Note that the example does not explicitly call the <xref:System.String.ToString%2A> method.</span></span> <span data-ttu-id="3723c-3273">대신 메서드가 의해 암시적으로 호출 되는 [복합 서식 지정](~/docs/standard/base-types/composite-formatting.md) 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3273">Instead, the method is called implicitly by the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature.</span></span>  
  
 [!code-cpp[string.tostring#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.tostring/CPP/string.tostring.cpp#1)]
 [!code-csharp[string.tostring#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.tostring/CS/string.tostring.cs#1)]
 [!code-vb[string.tostring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.tostring/VB/string.tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Clone" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="string.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="3723c-3274">(예약됨) 문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3274">(Reserved) An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3275">
            <see cref="T:System.String" />의 이 인스턴스를 반환하며, 이때 실제 변환은 수행되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3275">Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3276">현재 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3276">The current string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3277">`provider` 예약 되며이 작업에 관여 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3277">`provider` is reserved, and does not currently participate in this operation.</span></span>  
  
 <span data-ttu-id="3723c-3278">이 메서드가 반환 하기만 하면 변경 하지 않고 현재 문자열 이므로 직접 호출할 필요가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3278">Because this method simply returns the current string unchanged, there is no need to call it directly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3279">이 문자열의 복사본을 대문자로 변환하여 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3279">Returns a copy of this string converted to uppercase.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public string ToUpper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpper() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpper" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpper () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpper();" />
      <MemberSignature Language="F#" Value="member this.ToUpper : unit -&gt; string" Usage="string.ToUpper " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3280">이 문자열의 복사본을 대문자로 변환하여 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3280">Returns a copy of this string converted to uppercase.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3281">대문자로 표시된 현재 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3281">The uppercase equivalent of the current string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3282">이 메서드는 현재 인스턴스의 각 문자를 해당 대문자로 변환할 현재 문화권의 대/소문자 규칙을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3282">This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent.</span></span> <span data-ttu-id="3723c-3283">문자에 대문자로 변환할 항목이 없으면 포함 됩니다 반환된 된 문자열에서 변경 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3283">If a character does not have an uppercase equivalent, it is included unchanged in the returned string.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-3284">이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3284">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-3285">대신,는 현재 인스턴스에서 모든 문자를 대문자로 변환 됩니다 새 문자열로 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3285">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>  
  
 <span data-ttu-id="3723c-3286"><xref:System.String.ToUpper%2A> 메서드는 종종 대/소문자 구분 비교에 사용할 수 있도록 하는 문자열을 대문자로 변환 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3286">The <xref:System.String.ToUpper%2A> method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison.</span></span> <span data-ttu-id="3723c-3287">대/소문자 구분 비교를 수행 하는 향상 된 방법을 있는 문자열 비교 메서드를 호출 하는 것을 <xref:System.StringComparison> 매개 변수를 설정한 값인 <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType> 문화권 구분 및 대/소문자 구분 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3287">A better method to perform case-insensitive comparison is to call a string comparison method that has a <xref:System.StringComparison> parameter whose value you set to <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType> for a culture-sensitive, case-insensitive comparison.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="3723c-3288">보안 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-3288">Security Considerations</span></span>  
 <span data-ttu-id="3723c-3289">호출에서 발생 하는 대/소문자 구분 작업을 <xref:System.String.ToUpper> 메서드는 현재 문화권의 대/소문자 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3289">The casing operation that results from calling the <xref:System.String.ToUpper> method takes the casing conventions of the current culture into account.</span></span> <span data-ttu-id="3723c-3290">파일 이름이 같은 운영 체제 식별자의 대 / 소문자 버전을 사용 해야 하는 경우 명명 된 파이프 또는 레지스트리 키를 사용 합니다 <xref:System.String.ToLowerInvariant%2A> 또는 <xref:System.String.ToUpperInvariant%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3290">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="3723c-3291">모든 문화권에서 동일한 결과 (달리는 <xref:System.String.ToUpper> 메서드) 하 고 보다 효율적으로 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3291">This produces the same result in every culture (unlike the <xref:System.String.ToUpper> method) and performs more efficiently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3292">다음 예제에서는 <xref:System.String.ToUpper%2A> 일련의 기본 라틴어, 라틴어-1 보충와 라틴어 확장-A 문자 집합의 각 문자를 포함 하는 단일 문자로 문자열을 변환 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3292">The following example calls the <xref:System.String.ToUpper%2A> method to convert a series of one-character strings that contain each character in the Basic Latin, Latin-1 Supplement, and Latin Extended-A character sets.</span></span> <span data-ttu-id="3723c-3293">그런 다음 해당 대 문자와 소문자와에서 다릅니다. 각 문자열을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3293">It then displays each string whose uppercase character is different from its lowercase character.</span></span>  
  
 [!code-cpp[System.String.ToUpper#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.ToUpper/cpp/ToUpperEx.cpp#1)]
 [!code-csharp[System.String.ToUpper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.ToUpper/cs/ToUpperEx.cs#1)]
 [!code-vb[System.String.ToUpper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.ToUpper/vb/ToUpperEx.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-3294">
            <para>에 설명 된 대로 [Strings](~/docs/standard/base-types/best-practices-strings.md) 사용에 대 한 모범 사례 권장 기본값을 대체 하 고 대신 매개 변수를 필요로 하는 메서드를 호출 하는 문자열 대/소문자 구분 메서드를 호출 하지 명시적으로 지정 합니다. 현재 문화권의 대/소문자 규칙을 사용 하 여 대문자 문자열을 변환할 호출을 <see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)" /> 값을 사용 하 여 메서드 오버 로드 <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> 에 대 한 해당 <paramref name="culture" /> 매개 변수입니다.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3294">
              <para>As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string casing methods that substitute default values and instead call methods that require parameters to be explicitly specified. To convert a string to uppercase by using the casing conventions of the current culture, call the <see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public string ToUpper (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpper(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpper(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpper (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpper(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.ToUpper : System.Globalization.CultureInfo -&gt; string" Usage="string.ToUpper culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">
          <span data-ttu-id="3723c-3295">문화권별 대/소문자 규칙을 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3295">An object that supplies culture-specific casing rules.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3296">지정한 문화권의 대/소문자 규칙을 사용하여 대문자로 변환된 이 문자열의 복사본을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3296">Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3297">대문자로 표시된 현재 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3297">The uppercase equivalent of the current string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3298">지정 된 문화권의 대/소문자 규칙을 `culture` 매개 변수 변경 되는 문자열의 대/소문자는 방식을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3298">The casing rules of the culture specified by the `culture` parameter determine the way the case of a string is changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-3299">이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3299">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-3300">대신,는 현재 인스턴스에서 모든 문자를 대문자로 변환 됩니다 새 문자열로 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3300">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="3723c-3301">보안 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-3301">Security Considerations</span></span>  
 <span data-ttu-id="3723c-3302">전달 하는 경우는 <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29> 메서드를 <xref:System.Globalization.CultureInfo> 이외의 개체 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>, 대/소문자 구분 작업 계정에는 culture 별 규칙 걸립니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3302">If you pass the <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>, the casing operation will take culture-specific rules into account.</span></span> <span data-ttu-id="3723c-3303">파일 이름이 같은 운영 체제 식별자의 대 / 소문자 버전을 사용 해야 하는 경우 명명 된 파이프 또는 레지스트리 키를 사용 합니다 <xref:System.String.ToLowerInvariant%2A> 또는 <xref:System.String.ToUpperInvariant%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3303">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="3723c-3304">이 모든 문화권에서 동일한 결과 생성 하 고 보다 효율적으로 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3304">This produces the same result in every culture and performs more efficiently.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3305">다음 예제에서는 두 개의 미국 및 터키어-터키 문화권을 사용 하 여 대문자 문자열을 소문자 문자열로 변환한 다음 대문자 문자열을 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3305">The following example converts a string of lowercase characters to two strings of uppercase characters using the English-United States and Turkish-Turkey cultures, then compares the uppercase strings.</span></span> <span data-ttu-id="3723c-3306">대문자 문자열을 제외 하는 유니코드 LATIN CAPITAL LETTER I 한 문자열에서 각 발생을 다른 문자열 LATIN CAPITAL LETTER I와 점 위에 포함 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3306">The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span>  
  
 [!code-csharp[string.toupper1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.toupper1/CS/toupper.cs#1)]
 [!code-vb[string.toupper1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.toupper1/VB/toupper.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3723c-3307">
            <paramref name="culture" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3307">
              <paramref name="culture" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public string ToUpperInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpperInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpperInvariant" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpperInvariant () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpperInvariant();" />
      <MemberSignature Language="F#" Value="member this.ToUpperInvariant : unit -&gt; string" Usage="string.ToUpperInvariant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3308">고정 문화권의 대/소문자 규칙을 사용하여 대문자로 변환된 이 <see cref="T:System.String" /> 개체의 복사본을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3308">Returns a copy of this <see cref="T:System.String" /> object converted to uppercase using the casing rules of the invariant culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3309">대문자로 표시된 현재 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3309">The uppercase equivalent of the current string.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3310">고정 문화권을 문화권을 구분 하는 문화권을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3310">The invariant culture represents a culture that is culture-insensitive.</span></span> <span data-ttu-id="3723c-3311">연결 된 영어와 있지만 특정 국가 또는 지역입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3311">It is associated with the English language but not with a specific country or region.</span></span> <span data-ttu-id="3723c-3312">자세한 내용은 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 속성을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="3723c-3312">For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="3723c-3313">응용 프로그램 사용 하 여 현재 문화권에 의해 영향을 받지 않는 예측 가능한 방식으로 변경 되는 문자열의 대/소문자에 따라 달라 지는 <xref:System.String.ToUpperInvariant%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3313">If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="3723c-3314">합니다 <xref:System.String.ToUpperInvariant%2A> 메서드는 `ToUpper(CultureInfo.InvariantCulture)`합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3314">The <xref:System.String.ToUpperInvariant%2A> method is equivalent to `ToUpper(CultureInfo.InvariantCulture)`.</span></span> <span data-ttu-id="3723c-3315">문자열의 컬렉션을 사용자 인터페이스 컨트롤에 예측 가능한 순서로 나타나야 하는 경우에 메서드는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3315">The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-3316">이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3316">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-3317">대신,는 현재 인스턴스에서 모든 문자를 대문자로 변환 됩니다 새 문자열로 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3317">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="3723c-3318">보안 고려 사항</span><span class="sxs-lookup"><span data-stu-id="3723c-3318">Security Considerations</span></span>  
 <span data-ttu-id="3723c-3319">파일 이름이 같은 운영 체제 식별자의 대 / 소문자 버전을 사용 해야 하는 경우 명명 된 파이프 또는 레지스트리 키를 사용 합니다 <xref:System.String.ToLowerInvariant%2A> 또는 <xref:System.String.ToUpperInvariant%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3319">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3320">다음 예제에서는 다양 한 언어의에서 단어를 포함 하는 문자열 배열을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3320">The following example defines a string array that contains a single word in a number of languages.</span></span> <span data-ttu-id="3723c-3321"><xref:System.String.ToUpperInvariant%2A> 메서드는 각 단어의 대/소문자 버전을 사용 하 여 병렬 배열의 요소를 채우는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3321">The <xref:System.String.ToUpperInvariant%2A> method is used to populate the elements of a parallel array with the case-insensitive version of each word.</span></span> <span data-ttu-id="3723c-3322"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> 요소 언어에 관계 없이 동일한 순서로 표시 되도록 대문자 배열의 요소 순서에 따라 대/소문자 구분 배열을 정렬 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3322">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method is used to sort the case-sensitive array based on the order of elements in the uppercase array to ensure that elements appear in the same order regardless of language.</span></span>  
  
 [!code-csharp[System.String.ToUpperInvariant#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.toupperinvariant/cs/toupperinvariant.cs#1)]
 [!code-vb[System.String.ToUpperInvariant#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.toupperinvariant/vb/toupperinvariant.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Trim">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3323">현재 <see cref="T:System.String" /> 개체에서 지정된 문자 집합의 선행 항목과 후행 항목이 모두 제거되는 새 문자열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3323">Returns a new string in which all leading and trailing occurrences of a set of specified characters from the current <see cref="T:System.String" /> object are removed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim();" />
      <MemberSignature Language="F#" Value="member this.Trim : unit -&gt; string" Usage="string.Trim " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3723c-3324">현재 <see cref="T:System.String" /> 개체에서 선행 공백과 후행 공백을 모두 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3324">Removes all leading and trailing white-space characters from the current <see cref="T:System.String" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3325">모든 공백 뒤에 있는 문자열이 현재 문자열의 시작 부분과 끝 부분에서 제거됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3325">The string that remains after all white-space characters are removed from the start and end of the current string.</span>
          </span>
          <span data-ttu-id="3723c-3326">현재 인스턴스에서 어떠한 문자도 삭제할 수 없는 경우 이 메서드는 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3326">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3327"><xref:System.String.Trim%2A> 메서드 모든 선행 및 후행 공백 문자가 현재 문자열에서 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3327">The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing white-space characters.</span></span> <span data-ttu-id="3723c-3328">공백이 아닌 문자가 발견 되는 각 선행 및 후행 지우기 작업이 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3328">Each leading and trailing trim operation stops when a non-white-space character is encountered.</span></span> <span data-ttu-id="3723c-3329">예를 들어, 현재 문자열 "abc xyz" 이면는 <xref:System.String.Trim%2A> 메서드는 "abc xyz"를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3329">For example, if the current string is "   abc   xyz   ", the <xref:System.String.Trim%2A> method returns "abc   xyz".</span></span> <span data-ttu-id="3723c-3330">문자열에서 단어 사이 공백 문자를 제거 하려면 사용 된 [.NET Framework 정규식](~/docs/standard/base-types/regular-expressions.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3330">To remove white-space characters between words in a string, use a [.NET Framework Regular Expressions](~/docs/standard/base-types/regular-expressions.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-3331">경우는 <xref:System.String.Trim%2A> 현재 인스턴스에서 모든 문자를 제거 하는 메서드,이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3331">If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-3332">대신, 현재 인스턴스에 있는 모든 선행 및 후행 공백 문자가 제거 됩니다 새 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3332">Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.</span></span>  
  
 <span data-ttu-id="3723c-3333">현재 문자열 같으면 <xref:System.String.Empty> 메서드에서 반환에 현재 인스턴스에 있는 모든 문자가 공백 문자로 구성 또는 <xref:System.String.Empty>합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3333">If the current string equals <xref:System.String.Empty> or all the characters in the current instance consist of white-space characters, the method returns <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="3723c-3334">공백 문자는 유니코드 표준에서 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3334">White-space characters are defined by the Unicode standard.</span></span> <span data-ttu-id="3723c-3335"><xref:System.String.Trim> 반환 값을 생성 하는 모든 선행 및 후행 문자를 제거 하는 메서드 `true` 에 전달 되는 경우는 <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="3723c-3335">The <xref:System.String.Trim> method removes any leading and trailing characters that produce a return value of `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3336">다음 예제에서는 <xref:System.String.Trim?displayProperty=nameWithType> 메서드를 연결 하기 전에 사용자가 입력 문자열에서 여분의 공백을 제거 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3336">The following example uses the <xref:System.String.Trim?displayProperty=nameWithType> method to remove any extra white space from strings entered by the user before concatenating them.</span></span>  
  
 [!code-cpp[System.String.Trim#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Trim/cpp/trim2.cpp#2)]
 [!code-csharp[System.String.Trim#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Trim/cs/Trim2.cs#2)]
 [!code-vb[System.String.Trim#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Trim/vb/Trim2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-3337">
            <para>[! INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 및 이전 버전에는이 메서드가 트리밍하는 공백 문자의 내부 목록을 유지 관리 합니다. 부터 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 메서드 모든 유니코드 공백 문자를 트리밍하 (즉, 생성 하는 문자를 <see langword="true" /> 에 전달 될 때 값을 반환 합니다 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 메서드). 이러한 변경으로 인해는 <see cref="M:System.String.Trim" /> 에서 메서드를 [! INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 및 이전 버전 두 문자, 0 너비 공간 (U + 200B) 및 0 너비 비분할 공간 (U + FEFF)를 제거 하는 <see cref="M:System.String.Trim" /> 에서 메서드를 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 및 이상 버전에서는 제거 하지 않습니다. 또한는 <see cref="M:System.String.Trim" /> 에서 메서드를 [! INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 및 이전 버전 3 유니코드 공백 문자를 자르지 않는: 몽골어 자음 구분 기호 (U + 180E), 좁은 비분할 공간 (U + 202F), 및 중간 수학 공간 (U + 205F).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3337">
              <para>The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintain an internal list of white-space characters that this method trims. Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method). Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]and later versions does not remove. In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(char trimChar);" />
      <MemberSignature Language="F#" Value="member this.Trim : char -&gt; string" Usage="string.Trim trimChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="trimChar">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (params char[] trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberSignature Language="F#" Value="member this.Trim : char[] -&gt; string" Usage="string.Trim trimChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars">
          <span data-ttu-id="3723c-3338">제거할 유니코드 문자 배열이거나 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3338">An array of Unicode characters to remove, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3339">현재 <see cref="T:System.String" /> 개체에서 배열에 지정된 문자 집합의 선행 항목과 후행 항목을 모두 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3339">Removes all leading and trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3340">
            <paramref name="trimChars" /> 매개 변수의 문자가 현재 문자열의 시작 부분과 끝 부분에서 모두 제거된 후 남아 있는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3340">The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the start and end of the current string.</span>
          </span>
          <span data-ttu-id="3723c-3341">
            <paramref name="trimChars" />가 <see langword="null" />이거나 빈 배열이면 공백 문자가 대신 제거됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3341">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead.</span>
          </span>
          <span data-ttu-id="3723c-3342">현재 인스턴스에서 어떠한 문자도 삭제할 수 없는 경우 이 메서드는 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3342">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3343">합니다 <xref:System.String.Trim%2A> 메서드는 현재 문자열에서 선행 및 후행 문자를 모두 제거에 `trimChars` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3343">The <xref:System.String.Trim%2A> method removes from the current string all leading and trailing characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="3723c-3344">각 선행 및 후행 trim 작업이 중지 되는 경우에 없는 문자 `trimChars` 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3344">Each leading and trailing trim operation stops when a character that is not in `trimChars` is encountered.</span></span> <span data-ttu-id="3723c-3345">예를 들어, 현재 문자열 "123abc456xyz789" 이면 및 `trimChars` 부터 "9", "1"에서 번호를 포함 합니다 <xref:System.String.Trim%2A> 메서드 "abc456xyz"를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3345">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the <xref:System.String.Trim%2A> method returns "abc456xyz".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-3346">경우는 <xref:System.String.Trim%2A> 현재 인스턴스에서 모든 문자를 제거 하는 메서드,이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3346">If the <xref:System.String.Trim%2A> method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-3347">모든에서 새 문자열을 반환 하는 대신, 선행 및 후행 `trimChars` 현재 인스턴스에서 문자가 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3347">Instead, it returns a new string in which all leading and trailing `trimChars` characters found in the current instance are removed.</span></span>  
  
 <span data-ttu-id="3723c-3348">현재 문자열이 같으면 <xref:System.String.Empty> 문자로 구성 된 현재 인스턴스의 모든 문자 또는 합니다 `trimChars` 메서드를 반환 배열 <xref:System.String.Empty>.</span><span class="sxs-lookup"><span data-stu-id="3723c-3348">If the current string equals <xref:System.String.Empty> or all the characters in the current instance consist of characters in the `trimChars` array, the method returns <xref:System.String.Empty>.</span></span>  
  
 <span data-ttu-id="3723c-3349">경우 `trimChars` 됩니다 `null` 빈 배열이 면이 메서드는 반환 하는 메서드에 선행 또는 후행 문자가 제거 하거나 `true` 에 전달 되는 경우는 <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> 메서드</span><span class="sxs-lookup"><span data-stu-id="3723c-3349">If `trimChars` is `null` or an empty array, this method removes any leading or trailing characters that result in the method returning `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method,</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3350">다음 예제에서는 <xref:System.String.Trim%28System.Char%5B%5D%29?displayProperty=nameWithType> 문자열에서 공간, 별표 (\*) 및 아포스트로피 (') 문자를 제거 하는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3350">The following example uses the <xref:System.String.Trim%28System.Char%5B%5D%29?displayProperty=nameWithType> method to remove space, asterisk (\*), and apostrophe (') characters from a string.</span></span>  
  
 [!code-cpp[System.String.Trim#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Trim/cpp/trim1.cpp#1)]
 [!code-csharp[System.String.Trim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Trim/cs/Trim1.cs#1)]
 [!code-vb[System.String.Trim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Trim/vb/Trim1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-3351">
            <para>[! INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 하 고 이전 버전의 경우이 메서드가 트리밍하는 공백 문자 내부 목록을 유지 관리 <paramref name="trimChars" /> 는 <see langword="null" /> 이거나 빈 배열입니다. 부터 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 경우 <paramref name="trimChars" /> 는 <see langword="null" /> 빈 배열인 경우 메서드는 모든 유니코드 공백 문자 또는 (즉, 생성 하는 문자는 <see langword="true" /> 에 전달 될 때 값을 반환 합니다 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 메서드). 이러한 변경으로 인해는 <see cref="M:System.String.Trim" /> 에서 메서드를 [! INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 및 이전 버전 두 문자, 0 너비 공간 (U + 200B) 및 0 너비 비분할 공간 (U + FEFF)를 제거 하는 <see cref="M:System.String.Trim" /> 에서 메서드를 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 및 이상 버전에서는 제거 하지 않습니다. 또한는 <see cref="M:System.String.Trim" /> 에서 메서드를 [! INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 및 이전 버전 3 유니코드 공백 문자를 자르지 않는: 몽골어 자음 구분 기호 (U + 180E), 좁은 비분할 공간 (U + 202F), 및 중간 수학 공간 (U + 205F).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3351">
              <para>The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array. Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method). Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]and later versions does not remove. In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd();" />
      <MemberSignature Language="F#" Value="member this.TrimEnd : unit -&gt; string" Usage="string.TrimEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd(char trimChar);" />
      <MemberSignature Language="F#" Value="member this.TrimEnd : char -&gt; string" Usage="string.TrimEnd trimChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="trimChar">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd (params char[] trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberSignature Language="F#" Value="member this.TrimEnd : char[] -&gt; string" Usage="string.TrimEnd trimChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars">
          <span data-ttu-id="3723c-3352">제거할 유니코드 문자 배열이거나 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3352">An array of Unicode characters to remove, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3353">현재 <see cref="T:System.String" /> 개체에서 배열에 지정된 문자 집합의 후행 항목을 모두 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3353">Removes all trailing occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3354">
            <paramref name="trimChars" /> 매개 변수의 문자가 현재 문자열의 끝 부분에서 모두 제거된 후 남아 있는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3354">The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the end of the current string.</span>
          </span>
          <span data-ttu-id="3723c-3355">
            <paramref name="trimChars" />가 <see langword="null" />이거나 빈 배열이면 유니코드 공백 문자가 대신 제거됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3355">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, Unicode white-space characters are removed instead.</span>
          </span>
          <span data-ttu-id="3723c-3356">현재 인스턴스에서 어떠한 문자도 삭제할 수 없는 경우 이 메서드는 현재 인스턴스를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3356">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3357"><xref:System.String.TrimEnd%2A> 에 있는 모든 후행 문자가 현재 문자열에서 제거 메서드는 `trimChars` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3357">The <xref:System.String.TrimEnd%2A> method removes from the current string all trailing characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="3723c-3358">첫 번째 문자에 있지 않은 지우기 작업이 중지 `trimChars` 문자열의 끝에 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3358">The trim operation stops when the first character that is not in `trimChars` is encountered at the end of the string.</span></span> <span data-ttu-id="3723c-3359">예를 들어, 현재 문자열 "123abc456xyz789" 이면 및 `trimChars` 부터 "9", "1"에서 번호를 포함 합니다 <xref:System.String.TrimEnd%2A> 메서드 "123abc456xyz"를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3359">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the <xref:System.String.TrimEnd%2A> method returns "123abc456xyz".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-3360">경우는 <xref:System.String.TrimEnd%2A> 현재 인스턴스에서 모든 문자를 제거 하는 메서드,이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3360">If the <xref:System.String.TrimEnd%2A> method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-3361">찾을 수 있는 모든 후행 문자에서 새 문자열을 반환 하는 대신 `trimChars` 현재 문자열에서 제거 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3361">Instead, it returns a new string in which all trailing characters found in `trimChars` are removed from the current string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3362">다음 예제에서는 사용 하는 방법을 보여 줍니다는 <xref:System.String.TrimEnd%28System.Char%5B%5D%29> 공백이 나 문장 부호는 문자열의 끝에서 trim 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3362">The following example demonstrates how you can use the <xref:System.String.TrimEnd%28System.Char%5B%5D%29> method to trim white space or punctuation marks from the end of a string.</span></span>  
  
 [!code-csharp[System.String.TrimEnd#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimEnd/cs/sample2.cs#2)]
 [!code-vb[System.String.TrimEnd#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimEnd/vb/Sample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-3363">
            <para>[! INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 하 고 이전 버전의 경우이 메서드가 트리밍하는 공백 문자 내부 목록을 유지 관리 <paramref name="trimChars" /> 는 <see langword="null" /> 이거나 빈 배열입니다. 부터 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 경우 <paramref name="trimChars" /> 는 <see langword="null" /> 빈 배열인 경우 메서드는 모든 유니코드 공백 문자 또는 (즉, 생성 하는 문자는 <see langword="true" /> 에 전달 될 때 값을 반환 합니다 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 메서드). 이러한 변경으로 인해는 <see cref="M:System.String.Trim" /> 에서 메서드를 [! INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 및 이전 버전 두 문자, 0 너비 공간 (U + 200B) 및 0 너비 비분할 공간 (U + FEFF)를 제거 하는 <see cref="M:System.String.Trim" /> 에서 메서드를 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 및 이상 버전에서는 제거 하지 않습니다. 또한는 <see cref="M:System.String.Trim" /> 에서 메서드를 [! INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 및 이전 버전 3 유니코드 공백 문자를 자르지 않는: 몽골어 자음 구분 기호 (U + 180E), 좁은 비분할 공간 (U + 202F), 및 중간 수학 공간 (U + 205F).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3363">
              <para>The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array. Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method). Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and later versions does not remove. In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart();" />
      <MemberSignature Language="F#" Value="member this.TrimStart : unit -&gt; string" Usage="string.TrimStart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart(char trimChar);" />
      <MemberSignature Language="F#" Value="member this.TrimStart : char -&gt; string" Usage="string.TrimStart trimChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="trimChar">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart (params char[] trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberSignature Language="F#" Value="member this.TrimStart : char[] -&gt; string" Usage="string.TrimStart trimChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars">
          <span data-ttu-id="3723c-3364">제거할 유니코드 문자 배열이거나 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3364">An array of Unicode characters to remove, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3723c-3365">현재 <see cref="T:System.String" /> 개체에서 배열에 지정된 문자 집합의 선행 항목을 모두 제거합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3365">Removes all leading occurrences of a set of characters specified in an array from the current <see cref="T:System.String" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3723c-3366">
            <paramref name="trimChars" /> 매개 변수의 문자가 현재 문자열의 시작 부분에서 모두 제거된 후 남아 있는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3366">The string that remains after all occurrences of characters in the <paramref name="trimChars" /> parameter are removed from the start of the current string.</span>
          </span>
          <span data-ttu-id="3723c-3367">
            <paramref name="trimChars" />가 <see langword="null" />이거나 빈 배열이면 공백 문자가 대신 제거됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3367">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3723c-3368">합니다 <xref:System.String.TrimStart%2A> 메서드는 현재 문자열에서 제거 중인 모든 선행 문자를 `trimChars` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3368">The <xref:System.String.TrimStart%2A> method removes from the current string all leading characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="3723c-3369">경우에 없는 문자는 trim 작업 중지 `trimChars` 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3369">The trim operation stops when a character that is not in `trimChars` is encountered.</span></span> <span data-ttu-id="3723c-3370">예를 들어, 현재 문자열 "123abc456xyz789" 이면 및 `trimChars` 부터 "9", "1"에서 번호를 포함 합니다 <xref:System.String.TrimStart%2A> 메서드 "abc456xyz789"를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3370">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the <xref:System.String.TrimStart%2A> method returns "abc456xyz789".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3723c-3371">경우는 <xref:System.String.TrimStart%2A> 현재 인스턴스에서 모든 문자를 제거 하는 메서드,이 메서드는 현재 인스턴스의 값을 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3371">If the <xref:System.String.TrimStart%2A> method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="3723c-3372">대신 현재 인스턴스에서 찾을 수 있는 모든 선행 공백 문자는 제거 하는 새 문자열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3372">Instead, it returns a new string in which all leading white space characters found in the current instance are removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3723c-3373">다음 예제에서는 <xref:System.String.TrimStart%2A> 공백 및 소스 코드 줄에서 주석 문자를 자르는 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3373">The following example uses the <xref:System.String.TrimStart%2A> method to trim white space and comment characters from lines of source code.</span></span> <span data-ttu-id="3723c-3374">합니다 `StripComments` 메서드 호출을 래핑한 <xref:System.String.TrimStart%2A> Visual Basic 및 C#에서 슬래시 (/)에서 공백 및 아포스트로피 (')는 주석 문자를 포함 하는 문자 배열을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3374">The `StripComments` method wraps a call to <xref:System.String.TrimStart%2A> and passes it a character array that contains a space and the comment character, which is an apostrophe ( ' ) in Visual Basic and a slash ( / ) in C#.</span></span> <span data-ttu-id="3723c-3375"><xref:System.String.TrimStart%2A> 문자열 주석 인지 확인할 때 선행 공백을 제거할 메서드도 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3375">The <xref:System.String.TrimStart%2A> method is also called to remove leading white space when evaluating whether a string is a comment.</span></span>  
  
 [!code-csharp[System.String.TrimStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs#1)]
 [!code-vb[System.String.TrimStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb#1)]  
  
 <span data-ttu-id="3723c-3376">다음 예제에서는 `StripComments` 메서드를 호출하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="3723c-3376">The following example then illustrates a call to the `StripComments` method.</span></span>  
  
 [!code-csharp[System.String.TrimStart#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs#2)]
 [!code-vb[System.String.TrimStart#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="3723c-3377">
            <para>[! INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 하 고 이전 버전의 경우이 메서드가 트리밍하는 공백 문자 내부 목록을 유지 관리 <paramref name="trimChars" /> 는 <see langword="null" /> 이거나 빈 배열입니다. 부터 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 경우 <paramref name="trimChars" /> 는 <see langword="null" /> 빈 배열인 경우 메서드는 모든 유니코드 공백 문자 또는 (즉, 생성 하는 문자는 <see langword="true" /> 에 전달 될 때 값을 반환 합니다 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 메서드). 이러한 변경으로 인해는 <see cref="M:System.String.Trim" /> 에서 메서드를 [! INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 및 이전 버전 두 문자, 0 너비 공간 (U + 200B) 및 0 너비 비분할 공간 (U + FEFF)를 제거 하는 <see cref="M:System.String.Trim" /> 에서 메서드를 [! INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 및 이상 버전에서는 제거 하지 않습니다. 또한는 <see cref="M:System.String.Trim" /> 에서 메서드를 [! INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 및 이전 버전 3 유니코드 공백 문자를 자르지 않는: 몽골어 자음 구분 기호 (U + 180E), 좁은 비분할 공간 (U + 202F), 및 중간 수학 공간 (U + 205F).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="3723c-3377">
              <para>The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array. Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method). Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and later versions does not remove. In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>