<Type Name="Single" FullName="System.Single">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="77e71ab8535b5bfefd6030c3226091df1a03daa3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429417" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Single : IComparable, IComparable&lt;float&gt;, IConvertible, IEquatable&lt;float&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit float32 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;float32&gt;, class System.IConvertible, class System.IEquatable`1&lt;float32&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Single" />
  <TypeSignature Language="VB.NET" Value="Public Structure Single&#xA;Implements IComparable, IComparable(Of Single), IConvertible, IEquatable(Of Single), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Single : IComparable, IComparable&lt;float&gt;, IConvertible, IEquatable&lt;float&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type single = struct&#xA;    interface IFormattable&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="dba63-101">단정밀도 부동 소수점 숫자를 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dba63-101">Represents a single-precision floating-point number.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-102"><xref:System.Single> 값 형식은 음수 3.402823 e 38에서 양수 또는 음수 0, 뿐만 아니라 양수 3.402823 e 38 까지의 값을 가진 단 정밀도 32 비트 숫자를 나타냅니다 <xref:System.Single.PositiveInfinity>, <xref:System.Single.NegativeInfinity>, 및 not-a-number (<xref:System.Single.NaN>).</span><span class="sxs-lookup"><span data-stu-id="dba63-102">The <xref:System.Single> value type represents a single-precision 32-bit number with values ranging from negative 3.402823e38 to positive 3.402823e38, as well as positive or negative zero, <xref:System.Single.PositiveInfinity>, <xref:System.Single.NegativeInfinity>, and not a number (<xref:System.Single.NaN>).</span></span> <span data-ttu-id="dba63-103">값 (예: 행 또는 은하계 사이의 거리) 매우 큰 수 또는 매우 작은 (예: 킬로그램에 물질의 분자 질량)과 종종 정확 하지 않습니다 (예: 다른 태양계 지구 까지의 거리 값을 나타내는 것은 ).</span><span class="sxs-lookup"><span data-stu-id="dba63-103">It is intended to represent values that are extremely large (such as distances between planets or galaxies) or extremely small (such as the molecular mass of a substance in kilograms) and that often are imprecise (such as the distance from earth to another solar system).</span></span> <span data-ttu-id="dba63-104"><xref:System.Single> 종류는 IEC 60559: 1989 (IEEE 754) 이진 부동 소수점 연산에 대 한 표준 준수 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-104">The <xref:System.Single> type complies with the IEC 60559:1989 (IEEE 754) standard for binary floating-point arithmetic.</span></span>  
  
 <span data-ttu-id="dba63-105">이 항목은 다음 섹션으로 구성되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-105">This topic consists of the following sections:</span></span>  
  
-   [<span data-ttu-id="dba63-106">부동 소수점 표현 및 정밀도</span><span class="sxs-lookup"><span data-stu-id="dba63-106">Floating-point representation and precision</span></span>](#Precision)  
  
-   [<span data-ttu-id="dba63-107">같음에 대 한 테스트</span><span class="sxs-lookup"><span data-stu-id="dba63-107">Testing for equality</span></span>](#Equality)  
  
-   [<span data-ttu-id="dba63-108">부동 소수점 값 및 예외</span><span class="sxs-lookup"><span data-stu-id="dba63-108">Floating-point values and exceptions</span></span>](#Exceptions)  
  
-   [<span data-ttu-id="dba63-109">형식 변환 및 단일 구조</span><span class="sxs-lookup"><span data-stu-id="dba63-109">Type conversion and the Single structure</span></span>](#Conversion)  
  
-   [<span data-ttu-id="dba63-110">부동 소수점 기능</span><span class="sxs-lookup"><span data-stu-id="dba63-110">Floating-point functionality</span></span>](#Functionality)  
  
 <span data-ttu-id="dba63-111"><xref:System.Single?displayProperty=nameWithType> 인스턴스 값을 문자열 표현으로 변환 하 고 숫자의 문자열 표현을이 형식의 인스턴스로 변환이 형식의 인스턴스를 비교 하는 메서드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-111"><xref:System.Single?displayProperty=nameWithType> provides methods to compare instances of this type, to convert the value of an instance to its string representation, and to convert the string representation of a number to an instance of this type.</span></span> <span data-ttu-id="dba63-112">형식 사양 코드로 값 형식의 문자열 표현을 제어 하는 방법에 대 한 정보를 참조 하십시오. [형식 지정](~/docs/standard/base-types/formatting-types.md), [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md), 및 [사용자 지정 숫자 형식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-112">For information about how format specification codes control the string representation of value types, see [Formatting Types](~/docs/standard/base-types/formatting-types.md), [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md), and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
<a name="Precision"></a>   
## <a name="floating-point-representation-and-precision"></a><span data-ttu-id="dba63-113">부동 소수점 표현 및 정밀도</span><span class="sxs-lookup"><span data-stu-id="dba63-113">Floating-point representation and precision</span></span>  
 <span data-ttu-id="dba63-114"><xref:System.Single> 데이터 형식은 다음 표에 나와 있는 것 처럼 32 비트 이진 형식으로 단 정밀도 부동 소수점 값을 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-114">The <xref:System.Single> data type stores single-precision floating-point values in a 32-bit binary format, as shown in the following table:</span></span>  
  
|<span data-ttu-id="dba63-115">파트</span><span class="sxs-lookup"><span data-stu-id="dba63-115">Part</span></span>|<span data-ttu-id="dba63-116">비트</span><span class="sxs-lookup"><span data-stu-id="dba63-116">Bits</span></span>|  
|----------|----------|  
|<span data-ttu-id="dba63-117">Significand 또는 수</span><span class="sxs-lookup"><span data-stu-id="dba63-117">Significand or mantissa</span></span>|<span data-ttu-id="dba63-118">0-22</span><span class="sxs-lookup"><span data-stu-id="dba63-118">0-22</span></span>|  
|<span data-ttu-id="dba63-119">지 수</span><span class="sxs-lookup"><span data-stu-id="dba63-119">Exponent</span></span>|<span data-ttu-id="dba63-120">23-30</span><span class="sxs-lookup"><span data-stu-id="dba63-120">23-30</span></span>|  
|<span data-ttu-id="dba63-121">기호 (0 = 1 양수, 음수 =)</span><span class="sxs-lookup"><span data-stu-id="dba63-121">Sign (0 = positive, 1 = negative)</span></span>|<span data-ttu-id="dba63-122">31</span><span class="sxs-lookup"><span data-stu-id="dba63-122">31</span></span>|  
  
 <span data-ttu-id="dba63-123">소수 일부 소수 값을 정확 하 게 표현할 수 없는 경우와 마찬가지로 (1/3 등 또는 <xref:System.Math.PI?displayProperty=nameWithType>), 이진 분수가 일부 소수 자릿수 값을 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-123">Just as decimal fractions are unable to precisely represent some fractional values (such as 1/3 or <xref:System.Math.PI?displayProperty=nameWithType>), binary fractions are unable to represent some fractional values.</span></span> <span data-ttu-id="dba63-124">예를 들어 2/10, 소수 부분으로.2 요소로 정확 하 게 표시 되는 패턴 "1100" 반복으로 무한대로와 이진 소수로.0011111001001100으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-124">For example, 2/10, which is represented precisely by .2 as a decimal fraction, is represented by .0011111001001100 as a binary fraction, with the pattern "1100" repeating to infinity.</span></span> <span data-ttu-id="dba63-125">이 경우 부동 소수점 값 표시 되는 숫자의 정확 하지 않은 표현을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-125">In this case, the floating-point value provides an imprecise representation of the number that it represents.</span></span> <span data-ttu-id="dba63-126">정밀도 부족을 증가 종종 원래 부동 소수점 값에 추가적인 수치 연산을 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-126">Performing additional mathematical operations on the original floating-point value often increases its lack of precision.</span></span> <span data-ttu-id="dba63-127">예를 들어.3으로 10을 곱한 결과 비교 하며 9 번.3에.3을 추가, 나타납니다 추가 하는 경우는 보다 덜 정확한 결과 생성 곱하기 보다 더 많은 작업을 8 개를 포함 하기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-127">For example, if you compare the results of multiplying .3 by 10 and adding .3 to .3 nine times, you will see that addition produces the less precise result, because it involves eight more operations than multiplication.</span></span> <span data-ttu-id="dba63-128">이 불일치가 두를 표시 하는 경우에 명백한는 <xref:System.Single> "R"을 사용 하 여 값 [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md)이며 필요한 경우에서 지 원하는 정밀도 9 자리를 모두 표시 하는 경우는 <xref:System.Single> 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-128">Note that this disparity is apparent only if you display the two <xref:System.Single> values by using the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md), which, if necessary, displays all 9 digits of precision supported by the <xref:System.Single> type.</span></span>  
  
 [!code-csharp[System.Single.Structure#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/representation1.cs#3)]
 [!code-vb[System.Single.Structure#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/representation1.vb#3)]  
  
 <span data-ttu-id="dba63-129">일부 숫자는 소수 이진 값과 동일 하 게 표현할 수 없는 때문에 대략적인 실수 부동 소수점 숫자에 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-129">Because some numbers cannot be represented exactly as fractional binary values, floating-point numbers can only approximate real numbers.</span></span>  
  
 <span data-ttu-id="dba63-130">모든 부동 소수점 숫자가 제한 된 수의 유효 자릿수 부동 소수점 값을 근사치 숫자는 실수를 계산 하는 방식을 정확 하 게 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-130">All floating-point numbers have a limited number of significant digits, which also determines how accurately a floating-point value approximates a real number.</span></span> <span data-ttu-id="dba63-131">A <xref:System.Single> 값에 최대 7 자리의 정밀도 최대 9 자리 내부적으로 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-131">A <xref:System.Single> value has up to 7 decimal digits of precision, although a maximum of 9 digits is maintained internally.</span></span> <span data-ttu-id="dba63-132">즉, 부동 소수점 연산에는 정밀도 부동 소수점 값을 변경 하려면 별로 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-132">This means that some floating-point operations may lack the precision to change a floating-point value.</span></span> <span data-ttu-id="dba63-133">다음 예제에서는 큰 단 정밀도 부동 소수점 값을 정의 하 고 다음의 제품에 추가 <xref:System.Single.Epsilon?displayProperty=nameWithType> 및를 하나 quadrillion 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-133">The following example defines a large single-precision floating-point value, and then adds the product of <xref:System.Single.Epsilon?displayProperty=nameWithType> and one quadrillion to it.</span></span> <span data-ttu-id="dba63-134">그러나 제품 원래 부동 소수점 값을 수정 하려면 너무 작습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-134">However, the product is too small to modify the original floating-point value.</span></span> <span data-ttu-id="dba63-135">가장 덜 중요 한 자리는 1/1000, 제품의 최대 유효 자릿수는 1 하는 반면<sup>-312</sup>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-135">Its least significant digit is thousandths, whereas the most significant digit in the product is 1<sup>-312</sup>.</span></span>  
  
 [!code-csharp[System.Single.Structure#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/representation2.cs#4)]
 [!code-vb[System.Single.Structure#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/representation2.vb#4)]  
  
 <span data-ttu-id="dba63-136">제한 된 정밀도 부동 소수점 숫자의 몇 가지 결과가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-136">The limited precision of a floating-point number has several consequences:</span></span>  
  
-   <span data-ttu-id="dba63-137">최소 유효 자릿수가 다르기 때문에 특정 전체 자릿수에 대 한 동일 하 게 나타나는 두 부동 소수점 숫자가 같은지 비교 하지 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-137">Two floating-point numbers that appear equal for a particular precision might not compare equal because their least significant digits are different.</span></span> <span data-ttu-id="dba63-138">다음 예제에서는 일련의 숫자를 더한 및 고 합계가 예상 되는 전체와 비교 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-138">In the following example, a series of numbers are added together, and their total is compared with their expected total.</span></span> <span data-ttu-id="dba63-139">두 값이 동일한 경우에 대 한 호출을 표시 하지만 `Equals` 메서드는 없다는 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-139">Although the two values appear to be the same, a call to the `Equals` method indicates that they are not.</span></span>  
  
     [!code-csharp[System.Single.Structure#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist3.cs#6)]
     [!code-vb[System.Single.Structure#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/precisionlist3.vb#6)]  
  
     <span data-ttu-id="dba63-140">형식 항목을 변경 하는 경우는 <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType> 에서 문을 `{0}` 및 `{1}` 를 `{0:R}` 및 `{1:R}` 두 유효 자릿수가 모두 표시 하려면 <xref:System.Single> 값이 명확한 경우 두 값이 서로 같지 않은지 때문에 추가 작업 중 전체 자릿수의 손실입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-140">If you change the format items in the <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType> statement from `{0}` and `{1}` to `{0:R}` and `{1:R}` to display all significant digits of the two <xref:System.Single> values, it is clear that the two values are unequal because of a loss of precision during the addition operations.</span></span> <span data-ttu-id="dba63-141">이 경우 호출 하 여 문제를 해결할 수 있습니다는 <xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType> 반올림 하는 메서드는 <xref:System.Single> 비교를 수행 하기 전에 원하는 정밀도 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-141">In this case, the issue can be resolved by calling the <xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType> method to round the <xref:System.Single> values to the desired precision before performing the comparison.</span></span>  
  
-   <span data-ttu-id="dba63-142">부동 소수점 숫자를 사용 하는 수치 또는 비교 연산을 하지 산출할 수 동일한 결과 10 진수를 사용 하는 경우 이진 부동 소수점 숫자는 10 진수과 같지 않을 때문에입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-142">A mathematical or comparison operation that uses a floating-point number might not yield the same result if a decimal number is used, because the binary floating-point number might not equal the decimal number.</span></span> <span data-ttu-id="dba63-143">.3으로 10을 곱한 및.3에.3 9 번 추가의 결과 표시 하 여이 화면 하는 이전 예입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-143">A previous example illustrated this by displaying the result of multiplying .3 by 10 and adding .3 to .3 nine times.</span></span>  
  
     <span data-ttu-id="dba63-144">사용 하 여 소수 자릿수 값이 포함 된 숫자 연산에는 정확도 중요 한 경우는 <xref:System.Decimal> 형식 대신는 <xref:System.Single> 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-144">When accuracy in numeric operations with fractional values is important, use the <xref:System.Decimal> type instead of the <xref:System.Single> type.</span></span> <span data-ttu-id="dba63-145">때의 범위를 벗어난 정수 값으로 숫자 연산에는 정확도 <xref:System.Int64> 또는 <xref:System.UInt64> 사용 하 여 형식을 반드시는 <xref:System.Numerics.BigInteger> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-145">When accuracy in numeric operations with integral values beyond the range of the <xref:System.Int64> or <xref:System.UInt64> types is important, use the <xref:System.Numerics.BigInteger> type.</span></span>  
  
-   <span data-ttu-id="dba63-146">부동 소수점 숫자가 포함 된 경우 왕복 하지 않는 값 않을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-146">A value might not round-trip if a floating-point number is involved.</span></span> <span data-ttu-id="dba63-147">작업은 원래 부동 소수점 숫자를 다른 형식으로 변환 하 고 역 작업이 변환에서 변환 된 형식을 부동 소수점 숫자에 다시 최종 부동 소수점 숫자가 같은지를 원래 값을 왕복 하는 데 라고 부동 소수점 수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-147">A value is said to round-trip if an operation converts an original floating-point number to another form, an inverse operation transforms the converted form back to a floating-point number, and the final floating-point number is equal to the original floating-point number.</span></span> <span data-ttu-id="dba63-148">하나 이상의 최하위 유효 자릿수가 손실 되거나 변환에서 변경 때문에 대 한 왕복은 실패할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-148">The round trip might fail because one or more least significant digits are lost or changed in a conversion.</span></span> <span data-ttu-id="dba63-149">다음 예제에서는 세 가지 <xref:System.Single> 값을 문자열로 변환 되 고 파일에 저장 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-149">In the following example, three <xref:System.Single> values are converted to strings and saved in a file.</span></span> <span data-ttu-id="dba63-150">볼 수 있듯이 출력 값이 동일한 것으로 표시 하지만, 복원 된 값의 원래 값과 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-150">As the output shows, although the values appear to be identical, the restored values are not equal to the original values.</span></span>  
  
     [!code-csharp[System.Single.Structure#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist4a.cs#17)]
     [!code-vb[System.Single.Structure#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/PrecisionList4a.vb#17)]  
  
     <span data-ttu-id="dba63-151">이 경우 값 성공적으로 라운드트립 사용 하 여 수 "G9" [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 의 전체 자릿수를 유지 하기 위해 <xref:System.Single> 다음 예제와 같이 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-151">In this case, the values can be successfully round-tripped by using the "G9" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) to preserve the full precision of <xref:System.Single> values, as the following example shows.</span></span>  
  
     [!code-csharp[System.Single.Structure#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/PrecisionList5a.cs#18)]
     [!code-vb[System.Single.Structure#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/PrecisionList5a.vb#18)]  
  
-   <span data-ttu-id="dba63-152"><xref:System.Single> 값 보다 적은 정밀도 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-152"><xref:System.Single> values have less precision than <xref:System.Double> values.</span></span> <span data-ttu-id="dba63-153">A <xref:System.Single> 겉보기 해당 하는 변환 된 값 <xref:System.Double> 종종과 같지 않습니다는 <xref:System.Double> 정밀도의 차이 때문에 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-153">A <xref:System.Single> value that is converted to a seemingly equivalent <xref:System.Double> often does not equal the <xref:System.Double> value because of differences in precision.</span></span> <span data-ttu-id="dba63-154">다음 예제에서는 동일한 나누기 작업의 결과에 할당 됩니다는 <xref:System.Double> 값 및 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-154">In the following example, the result of identical division operations is assigned to a <xref:System.Double> value and a <xref:System.Single> value.</span></span> <span data-ttu-id="dba63-155">이후에 <xref:System.Single> 값으로 캐스팅 되는 <xref:System.Double>, 두 값의 비교는 같지 않은 것을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-155">After the <xref:System.Single> value is cast to a <xref:System.Double>, a comparison of the two values shows that they are unequal.</span></span>  
  
     [!code-csharp[System.Double.Structure#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Double.Structure#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist1.vb#5)]  
  
     <span data-ttu-id="dba63-156">이 문제를 방지를 사용 하 여는 <xref:System.Double> 데이터 형식 자리에 <xref:System.Single> 데이터 형식이 나 사용 하 여는 <xref:System.Math.Round%2A> 메서드 두 값이 같은 정밀도 갖도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-156">To avoid this problem, either use the <xref:System.Double> data type in place of the <xref:System.Single> data type, or use the <xref:System.Math.Round%2A> method so that both values have the same precision.</span></span>  
  
<a name="Equality"></a>   
## <a name="testing-for-equality"></a><span data-ttu-id="dba63-157">같음에 대 한 테스트</span><span class="sxs-lookup"><span data-stu-id="dba63-157">Testing for equality</span></span>  
 <span data-ttu-id="dba63-158">같은, 두 개의 <xref:System.Single> 값 동일한 값을 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-158">To be considered equal, two <xref:System.Single> values must represent identical values.</span></span> <span data-ttu-id="dba63-159">그러나 값을 정밀도에서 차이점이 있기 때문에 또는 하나 또는 두 값에 따라 정밀도 손실 때문에 종종 동일한 것으로 예상 되는 부동 소수점 값으로 판명 최하위 유효 자릿수의 차이로 인해 동일 하지 않은 것입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-159">However, because of differences in precision between values, or because of a loss of precision by one or both values, floating-point values that are expected to be identical often turn out to be unequal due to differences in their least significant digits.</span></span> <span data-ttu-id="dba63-160">결과적으로,에 대 한 호출이 <xref:System.Single.Equals%2A> 대 한 호출이 나 두 값이 같은지를 확인 하는 <xref:System.Single.CompareTo%2A> 메서드 두 관계를 확인 하려면 <xref:System.Single> 값, 종종 하면 예기치 않은 결과가 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-160">As a result, calls to the <xref:System.Single.Equals%2A> method to determine whether two values are equal, or calls to the <xref:System.Single.CompareTo%2A> method to determine the relationship between two <xref:System.Single> values, often yield unexpected results.</span></span> <span data-ttu-id="dba63-161">이 다음 예제에서 분명 하 게 한 두 개의 분명히과 같아야 <xref:System.Single> 값이 첫 번째 값 이지만 두 번째 값에는 9의 전체 자릿수는 7 자리에 있기 때문에 같지 않은 것으로 판명 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-161">This is evident in the following example, where two apparently equal <xref:System.Single> values turn out to be unequal, because the first value has 7 digits of precision, whereas the second value has 9.</span></span>  
  
 [!code-csharp[System.Single.Structure#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison1.cs#9)]
 [!code-vb[System.Single.Structure#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison1.vb#9)]  
  
 <span data-ttu-id="dba63-162">계산 된 값을 서로 다른 코드 경로 따르는 및 다양 한 방법에서 종종 조작 되는 같지 않은 것으로 증명 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-162">Calculated values that follow different code paths and that are manipulated in different ways often prove to be unequal.</span></span> <span data-ttu-id="dba63-163">다음 예제에서는 하나의 <xref:System.Single> 값을 제곱 하 고 원래 값을 복원 하기 위해 제곱근 계산 되는 다음 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-163">In the following example, one <xref:System.Single> value is squared, and then the square root is calculated to restore the original value.</span></span> <span data-ttu-id="dba63-164">두 번째 <xref:System.Single> 3.51으로 곱하고 원래 값으로 복원 3.51 나눈 결과의 제곱근 전에 제곱 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-164">A second <xref:System.Single> is multiplied by 3.51 and squared before the square root of the result is divided by 3.51 to restore the original value.</span></span> <span data-ttu-id="dba63-165">가 두 값을 동일한 것으로 표시 되지만에 대 한 호출에서 <xref:System.Single.Equals%28System.Single%29> 메서드는 같지 않은 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-165">Although the two values appear to be identical, a call to the <xref:System.Single.Equals%28System.Single%29> method indicates that they are not equal.</span></span> <span data-ttu-id="dba63-166">"G9" 표준 형식 문자열을 사용 하 여 각각의 모든 유효 자릿수가 표시 하는 결과 문자열을 반환 <xref:System.Single> 값 두 번째 값.0000000000001 임을 보여 줍니다. 첫 번째 보다 작아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-166">Using the "G9" standard format string to return a result string that displays all the significant digits of each <xref:System.Single> value shows that the second value is .0000000000001 less than the first.</span></span>  
  
 [!code-csharp[System.Single.Structure#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison2.cs#10)]
 [!code-vb[System.Single.Structure#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison2.vb#10)]  
  
 <span data-ttu-id="dba63-167">정밀도의 손실 비교의 결과 영향을 줄 가능성이 높은 경우에 호출 하는 대신 다음 기술을 사용할 수 있습니다는 <xref:System.Single.Equals%2A> 또는 <xref:System.Single.CompareTo%2A> 메서드:</span><span class="sxs-lookup"><span data-stu-id="dba63-167">In cases where a loss of precision is likely to affect the result of a comparison, you can use the following techniques instead of calling the <xref:System.Single.Equals%2A> or <xref:System.Single.CompareTo%2A> method:</span></span>  
  
-   <span data-ttu-id="dba63-168">호출의 <xref:System.Math.Round%2A?displayProperty=nameWithType> 값이 모두 같은 정밀도 갖도록 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-168">Call the <xref:System.Math.Round%2A?displayProperty=nameWithType> method to ensure that both values have the same precision.</span></span> <span data-ttu-id="dba63-169">다음 예제에서는 두 개의 소수 값이 같으면 되도록이 방법을 사용 하도록 이전 예제를 수정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-169">The following example modifies a previous example to use this approach so that two fractional values are equivalent.</span></span>  
  
     [!code-csharp[System.Single.Structure#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison3.cs#11)]
     [!code-vb[System.Single.Structure#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison3.vb#11)]  
  
     <span data-ttu-id="dba63-170">정밀도의 문제는 여전히 중간점 값의 반올림에 적용 되는 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-170">Note that the problem of precision still applies to rounding of midpoint values.</span></span> <span data-ttu-id="dba63-171">자세한 내용은 <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType> 메서드를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="dba63-171">For more information, see the <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="dba63-172">일치 대신 대략적인 같음을 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-172">Test for approximate equality instead of equality.</span></span> <span data-ttu-id="dba63-173">이러한 기술을 사용 하거나 절대를 정의 하는 두 값 다를 수 있지만 여전히는 양 같아야 또는 더 작은 값 보다 큰 값에서 벗어날 수 있는 상대 크기를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-173">This technique requires that you define either an absolute amount by which the two values can differ but still be equal, or that you define a relative amount by which the smaller value can diverge from the larger value.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="dba63-174"><xref:System.Single.Epsilon?displayProperty=nameWithType> 두 개의 사이의 거리를 측정 하는 절대로 사용 되기도 <xref:System.Single> 같은지 테스트할 때 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-174"><xref:System.Single.Epsilon?displayProperty=nameWithType> is sometimes used as an absolute measure of the distance between two <xref:System.Single> values when testing for equality.</span></span>  <span data-ttu-id="dba63-175">그러나 <xref:System.Single.Epsilon?displayProperty=nameWithType> , 추가 하거나에서 뺀 수 있는 가능한 가장 작은 값을 측정 한 <xref:System.Single> 값이 0 인 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-175">However, <xref:System.Single.Epsilon?displayProperty=nameWithType> measures the smallest possible value that can be added to, or subtracted from, a <xref:System.Single> whose value is zero.</span></span> <span data-ttu-id="dba63-176">대부분 양수 및 음수 <xref:System.Single> 값, 값 <xref:System.Single.Epsilon?displayProperty=nameWithType> 감지 너무 작습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-176">For most positive and negative <xref:System.Single> values, the value of <xref:System.Single.Epsilon?displayProperty=nameWithType> is too small to be detected.</span></span> <span data-ttu-id="dba63-177">따라서 값 0을 제외 하 고 권장 하지는 않습니다 같음에 대 한 테스트에 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-177">Therefore, except for values that are zero, we do not recommend its use in tests for equality.</span></span>  
  
     <span data-ttu-id="dba63-178">다음 예제에서는 후자의 방법을 사용할 경우 사용 하 여 정의 `IsApproximatelyEqual` 두 값 간의 상대적 차이 테스트 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-178">The following example uses the latter approach to define an `IsApproximatelyEqual` method that tests the relative difference between two values.</span></span> <span data-ttu-id="dba63-179">결과에 대 한 호출 또한 대조는 `IsApproximatelyEqual` 메서드 및 <xref:System.Single.Equals%28System.Single%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-179">It also contrasts the result of calls to the `IsApproximatelyEqual` method and the <xref:System.Single.Equals%28System.Single%29> method.</span></span>  
  
     [!code-csharp[System.Single.Structure#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison4.cs#12)]
     [!code-vb[System.Single.Structure#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison4.vb#12)]  
  
<a name="Exceptions"></a>   
## <a name="floating-point-values-and-exceptions"></a><span data-ttu-id="dba63-180">부동 소수점 값 및 예외</span><span class="sxs-lookup"><span data-stu-id="dba63-180">Floating-point values and exceptions</span></span>  
 <span data-ttu-id="dba63-181">부동 소수점 값을 사용 하 여 작업에서 오버플로 또는 0으로 나누기와 같은 잘못 된 작업의 경우에 예외를 throw 하는 정수 계열 형식 작업과 달리 예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-181">Operations with floating-point values do not throw exceptions, unlike operations with integral types, which throw exceptions in cases of illegal operations such as division by zero or overflow.</span></span>  <span data-ttu-id="dba63-182">대신, 이러한 경우 부동 소수점 연산의 결과 0, 양의 무한대, 음의 무한대 또는 (nan 숫자가) not-a-number:</span><span class="sxs-lookup"><span data-stu-id="dba63-182">Instead, in these situations, the result of a floating-point operation is zero, positive infinity, negative infinity, or not a number (NaN):</span></span>  
  
-   <span data-ttu-id="dba63-183">부동 소수점 연산의 결과 대상 형식에 너무 작은 경우의 결과 0입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-183">If the result of a floating-point operation is too small for the destination format, the result is zero.</span></span> <span data-ttu-id="dba63-184">다음 예제와 같이 두 매우 작은 부동 소수점 숫자가 곱할 경우 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-184">This can occur when two very small floating-point numbers are multiplied, as the following example shows.</span></span>  
  
     [!code-csharp[System.Single.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/exceptional1.cs#1)]
     [!code-vb[System.Single.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/exceptional1.vb#1)]  
  
-   <span data-ttu-id="dba63-185">부동 소수점 연산의 결과의 크기가 대상 형식의 범위를 초과한 경우 작업의 결과 <xref:System.Single.PositiveInfinity> 또는 <xref:System.Single.NegativeInfinity>결과의 부호에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-185">If the magnitude of the result of a floating-point operation exceeds the range of the destination format, the result of the operation is <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity>, as appropriate for the sign of the result.</span></span> <span data-ttu-id="dba63-186">오버플로 하는 작업의 결과 <xref:System.Single.MaxValue?displayProperty=nameWithType> 은 <xref:System.Single.PositiveInfinity>, 및를 오버플로 하는 작업의 결과 <xref:System.Single.MinValue?displayProperty=nameWithType> 은 <xref:System.Single.NegativeInfinity>다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-186">The result of an operation that overflows <xref:System.Single.MaxValue?displayProperty=nameWithType> is <xref:System.Single.PositiveInfinity>, and the result of an operation that overflows <xref:System.Single.MinValue?displayProperty=nameWithType> is <xref:System.Single.NegativeInfinity>, as the following example shows.</span></span>  
  
     [!code-csharp[System.Single.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/exceptional2.cs#2)]
     [!code-vb[System.Single.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/exceptional2.vb#2)]  
  
     <span data-ttu-id="dba63-187"><xref:System.Single.PositiveInfinity> 또한 양의 피제수와 0으로 나누기에서 발생 하 고 <xref:System.Single.NegativeInfinity> 음수 피제수와 0으로 나누기에서 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-187"><xref:System.Single.PositiveInfinity> also results from a division by zero with a positive dividend, and <xref:System.Single.NegativeInfinity> results from a division by zero with a negative dividend.</span></span>  
  
-   <span data-ttu-id="dba63-188">부동 소수점 연산이 유효 하지 않을 경우 작업의 결과 <xref:System.Single.NaN>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-188">If a floating-point operation is invalid, the result of the operation is <xref:System.Single.NaN>.</span></span> <span data-ttu-id="dba63-189">예를 들어 <xref:System.Single.NaN> 다음과 같은 작업에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-189">For example, <xref:System.Single.NaN> results from the following operations:</span></span>  
  
    -   <span data-ttu-id="dba63-190">0 피제수와 0으로 나누었습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-190">Division by zero with a dividend of zero.</span></span> <span data-ttu-id="dba63-191">참고에서 결과가 0으로 나누기의 경우 다른 <xref:System.Single.PositiveInfinity> 또는 <xref:System.Single.NegativeInfinity>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-191">Note that other cases of division by zero result in either <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity>.</span></span>  
  
    -   <span data-ttu-id="dba63-192">부동 소수점 작업을 입력이 잘못 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-192">Any floating-point operation with invalid input.</span></span> <span data-ttu-id="dba63-193">음수 값의 제곱근을 반환 찾으려고 시도 하는 예를 들어 <xref:System.Single.NaN>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-193">For example, attempting to find the square root of a negative value returns <xref:System.Single.NaN>.</span></span>  
  
    -   <span data-ttu-id="dba63-194">값이 인수가 지정 된 모든 작업 <xref:System.Single.NaN?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-194">Any operation with an argument whose value is <xref:System.Single.NaN?displayProperty=nameWithType>.</span></span>  
  
<a name="Conversion"></a>   
## <a name="type-conversions-and-the-single-structure"></a><span data-ttu-id="dba63-195">형식 변환 및 단일 구조</span><span class="sxs-lookup"><span data-stu-id="dba63-195">Type conversions and the Single structure</span></span>  
 <span data-ttu-id="dba63-196"><xref:System.Single> 컴파일러에 의해 변환이 구현 하는 대신; 구조 모든 명시적 또는 암시적 변환 연산자를 정의 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-196">The <xref:System.Single> structure does not define any explicit or implicit conversion operators; instead, conversions are implemented by the compiler.</span></span>  
  
 <span data-ttu-id="dba63-197">다음 표에서 가능한 변환은 값이 다른 기본 숫자 형식에의 한 <xref:System.Single> 값을 주며 변환을 확대 또는 축소 되는 여부 및 여부 결과 <xref:System.Single> 보다 적은 정밀도 있을 수 있습니다는 원래 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-197">The following table lists the possible conversions of a value of the other primitive numeric types to a <xref:System.Single> value, It also indicates whether the conversion is widening or narrowing and whether the resulting <xref:System.Single> may have less precision than the original value.</span></span>  
  
|<span data-ttu-id="dba63-198">B*에서 A*로의 변환이</span><span class="sxs-lookup"><span data-stu-id="dba63-198">Conversion from</span></span>|<span data-ttu-id="dba63-199">확대/축소</span><span class="sxs-lookup"><span data-stu-id="dba63-199">Widening/narrowing</span></span>|<span data-ttu-id="dba63-200">정밀도의 손실 될 수</span><span class="sxs-lookup"><span data-stu-id="dba63-200">Possible loss of precision</span></span>|  
|---------------------|-------------------------|--------------------------------|  
|<xref:System.Byte>|<span data-ttu-id="dba63-201">Widening</span><span class="sxs-lookup"><span data-stu-id="dba63-201">Widening</span></span>|<span data-ttu-id="dba63-202">아니요</span><span class="sxs-lookup"><span data-stu-id="dba63-202">No</span></span>|  
|<xref:System.Decimal>|<span data-ttu-id="dba63-203">Widening</span><span class="sxs-lookup"><span data-stu-id="dba63-203">Widening</span></span><br /><br /> <span data-ttu-id="dba63-204">C#는 캐스트 연산자를 참고 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-204">Note that C# requires a cast operator.</span></span>|<span data-ttu-id="dba63-205">예.</span><span class="sxs-lookup"><span data-stu-id="dba63-205">Yes.</span></span> <span data-ttu-id="dba63-206"><xref:System.Decimal> 29 10 진수 자리의 정밀도 지원합니다. <xref:System.Single> 9를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-206"><xref:System.Decimal> supports 29 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.Double>|<span data-ttu-id="dba63-207">축소; 범위를 벗어난 값으로 변환할지 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 또는 <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-207">Narrowing; out-of-range values are converted to <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> or <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>|<span data-ttu-id="dba63-208">예.</span><span class="sxs-lookup"><span data-stu-id="dba63-208">Yes.</span></span> <span data-ttu-id="dba63-209"><xref:System.Double> 정밀도의 열일곱 자릿수로 지원 <xref:System.Single> 9를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-209"><xref:System.Double> supports 17 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.Int16>|<span data-ttu-id="dba63-210">Widening</span><span class="sxs-lookup"><span data-stu-id="dba63-210">Widening</span></span>|<span data-ttu-id="dba63-211">아니요</span><span class="sxs-lookup"><span data-stu-id="dba63-211">No</span></span>|  
|<xref:System.Int32>|<span data-ttu-id="dba63-212">Widening</span><span class="sxs-lookup"><span data-stu-id="dba63-212">Widening</span></span>|<span data-ttu-id="dba63-213">예.</span><span class="sxs-lookup"><span data-stu-id="dba63-213">Yes.</span></span> <span data-ttu-id="dba63-214"><xref:System.Int32> 정밀도의 10 진수 자릿수를 지원 <xref:System.Single> 9를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-214"><xref:System.Int32> supports 10 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.Int64>|<span data-ttu-id="dba63-215">Widening</span><span class="sxs-lookup"><span data-stu-id="dba63-215">Widening</span></span>|<span data-ttu-id="dba63-216">예.</span><span class="sxs-lookup"><span data-stu-id="dba63-216">Yes.</span></span> <span data-ttu-id="dba63-217"><xref:System.Int64> 정밀도의 19 10 진수를 지원합니다. <xref:System.Single> 9를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-217"><xref:System.Int64> supports 19 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.SByte>|<span data-ttu-id="dba63-218">Widening</span><span class="sxs-lookup"><span data-stu-id="dba63-218">Widening</span></span>|<span data-ttu-id="dba63-219">아니요</span><span class="sxs-lookup"><span data-stu-id="dba63-219">No</span></span>|  
|<xref:System.UInt16>|<span data-ttu-id="dba63-220">Widening</span><span class="sxs-lookup"><span data-stu-id="dba63-220">Widening</span></span>|<span data-ttu-id="dba63-221">아니요</span><span class="sxs-lookup"><span data-stu-id="dba63-221">No</span></span>|  
|<xref:System.UInt32>|<span data-ttu-id="dba63-222">Widening</span><span class="sxs-lookup"><span data-stu-id="dba63-222">Widening</span></span>|<span data-ttu-id="dba63-223">예.</span><span class="sxs-lookup"><span data-stu-id="dba63-223">Yes.</span></span> <span data-ttu-id="dba63-224"><xref:System.UInt32> 정밀도의 10 진수 자릿수를 지원 <xref:System.Single> 9를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-224"><xref:System.UInt32> supports 10 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.UInt64>|<span data-ttu-id="dba63-225">Widening</span><span class="sxs-lookup"><span data-stu-id="dba63-225">Widening</span></span>|<span data-ttu-id="dba63-226">예.</span><span class="sxs-lookup"><span data-stu-id="dba63-226">Yes.</span></span> <span data-ttu-id="dba63-227"><xref:System.Int64> 정밀도의 20 10 진수를 지원합니다. <xref:System.Single> 9를 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-227"><xref:System.Int64> supports 20 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
  
 <span data-ttu-id="dba63-228">다음 예제에서는 다른 기본 숫자 형식의 최소값 또는 최대값 값 변환는 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-228">The following example converts the minimum or maximum value of other primitive numeric types to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Single.Structure#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/convert1.cs#20)]
 [!code-vb[System.Single.Structure#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/convert1.vb#20)]  
  
 <span data-ttu-id="dba63-229">또한는 <xref:System.Double> 값 <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, 및 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> 를 변환할 <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, 및 <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>각각.</span><span class="sxs-lookup"><span data-stu-id="dba63-229">In addition, the <xref:System.Double> values <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> covert to <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 <span data-ttu-id="dba63-230">일부 숫자 형식의 값 변환은 <xref:System.Single> 값 정밀도 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-230">Note that the conversion of the value of some numeric types to a <xref:System.Single> value can involve a loss of precision.</span></span> <span data-ttu-id="dba63-231">변환할 때 정밀도의 손실 될 수 예제와 같이 <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt32>, 및 <xref:System.UInt64> 값을 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-231">As the example illustrates, a loss of precision is possible when converting <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt32>, and <xref:System.UInt64> values to <xref:System.Single> values.</span></span>  
  
 <span data-ttu-id="dba63-232">변환은 <xref:System.Single> 값을 한 <xref:System.Double> 확대 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-232">The conversion of a <xref:System.Single> value to a <xref:System.Double> is a widening conversion.</span></span> <span data-ttu-id="dba63-233">변환 하는 경우 전체 자릿수 손실이 발생할 수 있습니다는 <xref:System.Double> 형식에 대 한 정확한 표현이 없는 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-233">The conversion may result in a loss of precision if the <xref:System.Double> type does not have a precise representation for the <xref:System.Single> value.</span></span>  
  
 <span data-ttu-id="dba63-234">변환은 <xref:System.Single> 이외의 모든 기본 숫자 데이터 형식의 값에 값을 <xref:System.Double> 는 축소 변환 하 고 캐스트 연산자 (C#에서) 또는 변환 메서드 (Visual Basic)에서는 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-234">The conversion of a <xref:System.Single> value to a value of any primitive numeric data type other than a <xref:System.Double> is a narrowing conversion and requires a cast operator (in C#) or a conversion method (in Visual Basic).</span></span> <span data-ttu-id="dba63-235">대상 유형으로 정의 된 대상 데이터 형식의 범위 밖에 있는 값 `MinValue` 및 `MaxValue` 속성을 다음 표에 나와 있는 것 처럼 동작 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-235">Values that are outside the range of the target data type, which are defined by the target type's `MinValue` and `MaxValue` properties, behave as shown in the following table.</span></span>  
  
|<span data-ttu-id="dba63-236">대상 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-236">Target type</span></span>|<span data-ttu-id="dba63-237">결과</span><span class="sxs-lookup"><span data-stu-id="dba63-237">Result</span></span>|  
|-----------------|------------|  
|<span data-ttu-id="dba63-238">다른 정수 계열 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-238">Any integral type</span></span>|<span data-ttu-id="dba63-239"><xref:System.OverflowException> checked 컨텍스트에서 변환이 발생 하는 경우는 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-239">An <xref:System.OverflowException> exception if the conversion occurs in a checked context.</span></span><br /><br /> <span data-ttu-id="dba63-240">Unchecked 컨텍스트에서 (C#에서 기본값) 변환을 수행 하는 경우 변환 작업은 성공 하지만 값 오버플로가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-240">If the conversion occurs in an unchecked context (the default in C#), the conversion operation succeeds but the value overflows.</span></span>|  
|<xref:System.Decimal>|<span data-ttu-id="dba63-241"><xref:System.OverflowException> 예외</span><span class="sxs-lookup"><span data-stu-id="dba63-241">An <xref:System.OverflowException> exception,</span></span>|  
  
 <span data-ttu-id="dba63-242">또한 <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, 및 <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> throw는 <xref:System.OverflowException> 컨텍스트 있지만 unchecked 컨텍스트에서 정수로 변환 하는 경우 이러한 값 오버플로 정수로 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-242">In addition, <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> throw an <xref:System.OverflowException> for conversions to integers in a checked context, but these values overflow when converted to integers in an unchecked context.</span></span> <span data-ttu-id="dba63-243">변환에 대 한 <xref:System.Decimal>, 항상 throw 한 <xref:System.OverflowException>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-243">For conversions to <xref:System.Decimal>, they always throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="dba63-244">변환에 대 한 <xref:System.Double>를 변환 <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, 및 <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>각각.</span><span class="sxs-lookup"><span data-stu-id="dba63-244">For conversions to <xref:System.Double>, they convert to <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 <span data-ttu-id="dba63-245">정밀도의 손실을 변환 하 여 발생할 수는 <xref:System.Single> 값을 다른 숫자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-245">Note that a loss of precision may result from converting a <xref:System.Single> value to another numeric type.</span></span> <span data-ttu-id="dba63-246">정수 계열이 아닌 변환의 경우 <xref:System.Single> 값을 예제의 출력에서 볼 수 있듯이 소수 부분이 손실 되는 경우는 <xref:System.Single> 값 반올림 됩니다 (예: Visual Basic) 또는 (예: C#) 잘립니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-246">In the case of converting non-integral <xref:System.Single> values, as the output from the example shows, the fractional component is lost when the <xref:System.Single> value is either rounded (as in Visual Basic) or truncated (as in C#).</span></span> <span data-ttu-id="dba63-247">변환에 대 한 <xref:System.Decimal> 값의 <xref:System.Single> 값이 정확한 표시 대상 데이터 형식에 없을 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-247">For conversions to <xref:System.Decimal> values, the <xref:System.Single> value may not have a precise representation in the target data type.</span></span>  
  
 <span data-ttu-id="dba63-248">다음 예제에서는 다양 한 변환 <xref:System.Single> 값을 다른 여러 가지 숫자 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-248">The following example converts a number of <xref:System.Single> values to several other numeric types.</span></span> <span data-ttu-id="dba63-249">(기본값) Visual basic에서 및 C#에서 확인 된 컨텍스트에서 발생 하는 변환을 (때문에 [체크](~/docs/csharp/language-reference/keywords/checked.md) 키워드)입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-249">The conversions occur in a checked context in Visual Basic (the default) and in C# (because of the [checked](~/docs/csharp/language-reference/keywords/checked.md) keyword).</span></span> <span data-ttu-id="dba63-250">예제의 출력에서 선택 된 변환에 대 한 결과 보여 줍니다. unchecked 컨텍스트.</span><span class="sxs-lookup"><span data-stu-id="dba63-250">The output from the example shows the result for conversions in both a checked an unchecked context.</span></span> <span data-ttu-id="dba63-251">사용 하 여 컴파일하면 Visual Basic에서는 unchecked 컨텍스트에서 변환을 수행할 수 있습니다는 `/removeintchecks+` 컴파일러 스위치와 C# 주석으로 처리 하 여는 `checked` 문.</span><span class="sxs-lookup"><span data-stu-id="dba63-251">You can perform conversions in an unchecked context in Visual Basic by compiling with the `/removeintchecks+` compiler switch and in C# by commenting out the `checked` statement.</span></span>  
  
 [!code-csharp[System.Single.Structure#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/convert2.cs#21)]
 [!code-vb[System.Single.Structure#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/convert2.vb#21)]  
  
 <span data-ttu-id="dba63-252">숫자 형식의 변환 작업에 대 한 자세한 내용은 참조 하십시오. [.NET Framework의 형식 변환](~/docs/standard/base-types/type-conversion.md) 및 [형식 변환 표](~/docs/standard/base-types/conversion-tables.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-252">For more information on the conversion of numeric types, see [Type Conversion in the .NET Framework](~/docs/standard/base-types/type-conversion.md) and [Type Conversion Tables](~/docs/standard/base-types/conversion-tables.md).</span></span>  
  
<a name="Functionality"></a>   
## <a name="floating-point-functionality"></a><span data-ttu-id="dba63-253">부동 소수점 기능</span><span class="sxs-lookup"><span data-stu-id="dba63-253">Floating-point functionality</span></span>  
 <span data-ttu-id="dba63-254"><xref:System.Single> 구조와 관련 된 형식을 다음과 같은 범주의 작업을 수행 하는 메서드를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-254">The <xref:System.Single> structure and related types provide methods to perform the following categories of operations:</span></span>  
  
-   <span data-ttu-id="dba63-255">**값의 비교**합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-255">**Comparison of values**.</span></span> <span data-ttu-id="dba63-256">호출할 수 있습니다는 <xref:System.Single.Equals%2A> 두 지 여부를 결정 하는 메서드 <xref:System.Single> 값이 같으면 또는 <xref:System.Single.CompareTo%2A> 메서드를 두 값 간에 관계를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-256">You can call the <xref:System.Single.Equals%2A> method to determine whether two <xref:System.Single> values are equal, or the <xref:System.Single.CompareTo%2A> method to determine the relationship between two values.</span></span>  
  
     <span data-ttu-id="dba63-257"><xref:System.Single> 구조는 또한 비교 연산자의 전체 집합을 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-257">The <xref:System.Single> structure also supports a complete set of comparison operators.</span></span> <span data-ttu-id="dba63-258">예를 들어 같음 또는 같지 않음, 테스트 또는 하나의 값이 다른 값 보다 크거나 여부 확인 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-258">For example, you can test for equality or inequality, or determine whether one value is greater than or equal to another value.</span></span> <span data-ttu-id="dba63-259">피연산자 중 하나가 한 <xref:System.Double>, <xref:System.Single> 값으로 변환 됩니다는 <xref:System.Double> 비교를 수행 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="dba63-259">If one of the operands is a <xref:System.Double>, the <xref:System.Single> value is converted to a <xref:System.Double> before performing the comparison.</span></span> <span data-ttu-id="dba63-260">피연산자 중 하나는 정수 계열 형식을 이면 변환할는 <xref:System.Single> 비교를 수행 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="dba63-260">If one of the operands is an integral type, it is converted to a <xref:System.Single> before performing the comparison.</span></span> <span data-ttu-id="dba63-261">하지만 이러한 확대 변환, 전체 자릿수 손실을 프로세서별 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-261">Although these are widening conversions, they may involve a loss of precision.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="dba63-262">전체 자릿수의 차이 때문에 두 개의 <xref:System.Single> 동일한 것으로 예상 하는 값 수 판명 같지 않은 것을 비교 결과 영향을 주는 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-262">Because of differences in precision, two <xref:System.Single> values that you expect to be equal may turn out to be unequal, which affects the result of the comparison.</span></span> <span data-ttu-id="dba63-263">참조는 [같음 테스트](#Equality) 두 개를 비교 하는 방법에 대 한 자세한 내용은 섹션 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-263">See the [Testing for equality](#Equality) section for more information about comparing two <xref:System.Single> values.</span></span>  
  
     <span data-ttu-id="dba63-264">호출할 수도 있습니다는 <xref:System.Single.IsNaN%2A>, <xref:System.Single.IsInfinity%2A>, <xref:System.Single.IsPositiveInfinity%2A>, 및 <xref:System.Single.IsNegativeInfinity%2A> 를 이러한 특수 값에 대 한 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-264">You can also call the <xref:System.Single.IsNaN%2A>, <xref:System.Single.IsInfinity%2A>, <xref:System.Single.IsPositiveInfinity%2A>, and <xref:System.Single.IsNegativeInfinity%2A> methods to test for these special values.</span></span>  
  
-   <span data-ttu-id="dba63-265">**수학 연산을**합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-265">**Mathematical operations**.</span></span> <span data-ttu-id="dba63-266">더하기, 빼기, 곱하기 및 나누기 등의 일반적인 산술 연산이 아니라 언어 컴파일러 및 공용 중간 언어 (CIL) 지침으로 구현 됩니다 <xref:System.Single> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-266">Common arithmetic operations such as addition, subtraction, multiplication, and division are implemented by language compilers and Common Intermediate Language (CIL) instructions rather than by <xref:System.Single> methods.</span></span> <span data-ttu-id="dba63-267">수치 연산이 다른 피연산자가는 <xref:System.Double>, <xref:System.Single> 변환할는 <xref:System.Double> 이기도 작업과 작업의 결과 수행 하기 전에 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-267">If the other operand in a mathematical operation is a <xref:System.Double>, the <xref:System.Single> is converted to a <xref:System.Double> before performing the operation, and the result of the operation is also a <xref:System.Double> value.</span></span> <span data-ttu-id="dba63-268">경우 다른 피연산자는 정수 계열 형식으로 변환 됩니다는 <xref:System.Single> 이기도 작업과 작업의 결과 수행 하기 전에 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-268">If the other operand is an integral type, it is converted to a <xref:System.Single> before performing the operation, and the result of the operation is also a <xref:System.Single> value.</span></span>  
  
     <span data-ttu-id="dba63-269">호출 하 여 다른 수치 연산을 수행할 수 있습니다 `static` (`Shared` Visual basic에서)의 메서드는 <xref:System.Math?displayProperty=nameWithType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-269">You can perform other mathematical operations by calling `static` (`Shared` in Visual Basic) methods in the <xref:System.Math?displayProperty=nameWithType> class.</span></span> <span data-ttu-id="dba63-270">연산에 대해 일반적으로 사용 되는 추가 방법 여기에 (같은 <xref:System.Math.Abs%2A?displayProperty=nameWithType>, <xref:System.Math.Sign%2A?displayProperty=nameWithType>, 및 <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>), 기 하 도형 (와 같은 <xref:System.Math.Cos%2A?displayProperty=nameWithType> 및 <xref:System.Math.Sin%2A?displayProperty=nameWithType>), 및 미적분 법 (같은 <xref:System.Math.Log%2A?displayProperty=nameWithType>).</span><span class="sxs-lookup"><span data-stu-id="dba63-270">These include additional methods commonly used for arithmetic (such as <xref:System.Math.Abs%2A?displayProperty=nameWithType>, <xref:System.Math.Sign%2A?displayProperty=nameWithType>, and <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>), geometry (such as <xref:System.Math.Cos%2A?displayProperty=nameWithType> and <xref:System.Math.Sin%2A?displayProperty=nameWithType>), and calculus (such as <xref:System.Math.Log%2A?displayProperty=nameWithType>).</span></span>  <span data-ttu-id="dba63-271">모든 경우에는 <xref:System.Single> 값으로 변환 됩니다는 <xref:System.Double>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-271">In all cases, the <xref:System.Single> value is converted to a <xref:System.Double>.</span></span>  
  
     <span data-ttu-id="dba63-272">개별 비트를 조작할 수도 있습니다는 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-272">You can also manipulate the individual bits in a <xref:System.Single> value.</span></span> <span data-ttu-id="dba63-273"><xref:System.BitConverter.GetBytes%28System.Single%29?displayProperty=nameWithType> 메서드는 바이트 배열에 해당 비트 패턴을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-273">The <xref:System.BitConverter.GetBytes%28System.Single%29?displayProperty=nameWithType> method returns its bit pattern in a byte array.</span></span>  <span data-ttu-id="dba63-274">해당 바이트 배열을 전달 하 여는 <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> 메서드를 유지할 수 있습니다도 <xref:System.Single> 값 비트 패턴의 32 비트 정수에에서의 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-274">By passing that byte array to the <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> method, you can also preserve the <xref:System.Single> value's bit pattern in a 32-bit integer.</span></span>  
  
-   <span data-ttu-id="dba63-275">**반올림**합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-275">**Rounding**.</span></span> <span data-ttu-id="dba63-276">반올림는 대개 기술로 부동 소수점 표현 및 정밀도 문제로 인해 발생 하는 값 사이의 차이의 영향을 줄이기 위한 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-276">Rounding is often used as a technique for reducing the impact of differences between values caused by problems of floating-point representation and precision.</span></span> <span data-ttu-id="dba63-277">반올림할 수는 <xref:System.Single> 호출 하 여 값의 <xref:System.Math.Round%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-277">You can round a <xref:System.Single> value by calling the <xref:System.Math.Round%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="dba63-278">하지만는 <xref:System.Single> 값으로 변환 됩니다는 <xref:System.Double> 는 메서드를 호출 하 고 변환 정밀도 손실 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-278">However, note  that the <xref:System.Single> value is converted to a <xref:System.Double> before the method is called, and the conversion can involve a loss of precision.</span></span>  
  
-   <span data-ttu-id="dba63-279">**서식 지정**합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-279">**Formatting**.</span></span> <span data-ttu-id="dba63-280">변환할 수 있습니다는 <xref:System.Single> 값을 호출 하 여 해당 문자열 표현에서 <xref:System.Single.ToString%2A> 메서드 또는 사용 하 여는 [합성 서식 지정](~/docs/standard/base-types/composite-formatting.md) 기능입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-280">You can convert a <xref:System.Single> value to its string representation by calling the <xref:System.Single.ToString%2A> method or by using the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature.</span></span> <span data-ttu-id="dba63-281">형식 문자열에서 부동 소수점 값의 문자열 표현을 제어 하는 방법에 대 한 정보에 대 한 참조는 [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 및 [사용자 지정 숫자 형식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-281">For information about how format strings control the string representation of floating-point values, see the [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md) topics.</span></span>  
  
-   <span data-ttu-id="dba63-282">**문자열 구문 분석**합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-282">**Parsing strings**.</span></span> <span data-ttu-id="dba63-283">부동 소수점 값으로의 문자열 표현을 변환할 수 있습니다는 <xref:System.Single> 호출 하 여 값의 <xref:System.Single.Parse%2A> 또는 <xref:System.Single.TryParse%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-283">You can convert the string representation of a floating-point value to a <xref:System.Single> value by calling the <xref:System.Single.Parse%2A> or <xref:System.Single.TryParse%2A> method.</span></span> <span data-ttu-id="dba63-284">구문 분석이 실패 하는 경우는 <xref:System.Single.Parse%2A> 메서드 예외를 throw 하는 반면는 <xref:System.Single.TryParse%2A> 메서드 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-284">If the parse operation fails, the <xref:System.Single.Parse%2A> method throws an exception, whereas the <xref:System.Single.TryParse%2A> method returns `false`.</span></span>  
  
-   <span data-ttu-id="dba63-285">**형식 변환**합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-285">**Type conversion**.</span></span> <span data-ttu-id="dba63-286"><xref:System.Single> 구조에 대 한 명시적 인터페이스 구현을 제공는 <xref:System.IConvertible> 인터페이스에는 두 개의 표준.NET Framework 데이터 형식 간의 변환만 지원 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-286">The <xref:System.Single> structure provides an explicit interface implementation for the <xref:System.IConvertible> interface, which supports conversion between any two standard .NET Framework data types.</span></span> <span data-ttu-id="dba63-287">언어 컴파일러 때에 다른 모든 표준 숫자 형식 변환 제외 하 고에 대 한 값의 암시적 변환이 지원 <xref:System.Double> 를 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-287">Language compilers also support the implicit conversion of values for all other standard numeric types except for the conversion of <xref:System.Double> to <xref:System.Single> values.</span></span> <span data-ttu-id="dba63-288">모든 표준 숫자 형식 이외의 다른 값으로 변환은 <xref:System.Double> 에 <xref:System.Single> 확대 변환이 캐스팅 연산자나 변환 메서드를 사용 하는 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-288">Conversion of a value of any standard numeric type other than a <xref:System.Double> to a <xref:System.Single> is a widening conversion and does not require the use of a casting operator or conversion method.</span></span>  
  
     <span data-ttu-id="dba63-289">그러나 32 비트 및 64 비트 정수 값의 변환에는 정밀도 손실이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-289">However, conversion of 32-bit and 64-bit integer values can involve a loss of precision.</span></span> <span data-ttu-id="dba63-290">다음 표에서 32 비트, 64 비트에 대 한 전체 자릿수의 차이가 및 <xref:System.Double> 유형:</span><span class="sxs-lookup"><span data-stu-id="dba63-290">The following table lists the differences in precision for 32-bit, 64-bit, and <xref:System.Double> types:</span></span>  
  
    |<span data-ttu-id="dba63-291">형식</span><span class="sxs-lookup"><span data-stu-id="dba63-291">Type</span></span>|<span data-ttu-id="dba63-292">최대 소수 자릿수 (소수 자릿수)</span><span class="sxs-lookup"><span data-stu-id="dba63-292">Maximum precision (in decimal digits)</span></span>|<span data-ttu-id="dba63-293">내부 소수 자릿수 (소수 자릿수)</span><span class="sxs-lookup"><span data-stu-id="dba63-293">Internal precision (in decimal digits)</span></span>|  
    |----------|---------------------------------------------|----------------------------------------------|  
    |<xref:System.Double>|<span data-ttu-id="dba63-294">15</span><span class="sxs-lookup"><span data-stu-id="dba63-294">15</span></span>|<span data-ttu-id="dba63-295">17</span><span class="sxs-lookup"><span data-stu-id="dba63-295">17</span></span>|  
    |<span data-ttu-id="dba63-296"><xref:System.Int32> 및 <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="dba63-296"><xref:System.Int32> and <xref:System.UInt32></span></span>|<span data-ttu-id="dba63-297">10</span><span class="sxs-lookup"><span data-stu-id="dba63-297">10</span></span>|<span data-ttu-id="dba63-298">10</span><span class="sxs-lookup"><span data-stu-id="dba63-298">10</span></span>|  
    |<span data-ttu-id="dba63-299"><xref:System.Int64> 및 <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="dba63-299"><xref:System.Int64> and <xref:System.UInt64></span></span>|<span data-ttu-id="dba63-300">19</span><span class="sxs-lookup"><span data-stu-id="dba63-300">19</span></span>|<span data-ttu-id="dba63-301">19</span><span class="sxs-lookup"><span data-stu-id="dba63-301">19</span></span>|  
    |<xref:System.Single>|<span data-ttu-id="dba63-302">7</span><span class="sxs-lookup"><span data-stu-id="dba63-302">7</span></span>|<span data-ttu-id="dba63-303">10</span><span class="sxs-lookup"><span data-stu-id="dba63-303">9</span></span>|  
  
     <span data-ttu-id="dba63-304">정밀도의 문제에 영향을 가장 많이 <xref:System.Single> 변환 된 값 <xref:System.Double> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-304">The problem of precision most frequently affects <xref:System.Single> values that are converted to <xref:System.Double> values.</span></span> <span data-ttu-id="dba63-305">다음 예제에서는 동일한 나누기 연산에 의해 발생 하는 두 개의 값 서로 다름을으로 변환 하는 단 정밀도 부동 소수점 값 이므로 값 중 하나는 <xref:System.Double>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-305">In the following example, two values produced by identical division operations are unequal, because one of the values is a single-precision floating point value that is converted to a <xref:System.Double>.</span></span>  
  
     [!code-csharp[System.Single.Structure#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Single.Structure#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/precisionlist1.vb#5)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="dba63-306">이 유형의 모든 멤버는 스레드로부터 안전 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dba63-306">All members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="dba63-307">멤버 인스턴스 상태를 수정 하려면 표시 되는 실제로 새 값으로 초기화 하는 새 인스턴스를 반환 합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dba63-307">Members that appear to modify instance state actually return a new instance initialized with the new value.</span>
      </span>
      <span data-ttu-id="dba63-308">으로 다른 종류와이 형식의 인스턴스를 포함 하는 공유 변수를 읽고 쓰는 보호 해야 스레드로부터 안전을 보장 하려면 잠금에 의해.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dba63-308">As with any other type, reading and writing to a shared variable that contains an instance of this type must be protected by a lock to guarantee thread safety.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Decimal" />
    <altmember cref="T:System.Double" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dba63-309">이 인스턴스를 지정된 개체나 다른 <see cref="T:System.Single" /> 인스턴스와 비교하고 이 인스턴스의 값이 지정된 개체나 다른 <see cref="T:System.Single" /> 인스턴스의 값보다 작은지, 같은지 또는 큰지를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-309">Compares this instance to a specified object or to another <see cref="T:System.Single" /> instance and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object or the other <see cref="T:System.Single" /> instance.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="single.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="dba63-310">비교할 개체 또는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-310">An object to compare, or <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-311">이 인스턴스를 지정된 개체와 비교하고 이 인스턴스의 값이 지정된 개체의 값보다 작은지, 같은지 또는 큰지를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-311">Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-312">이 인스턴스와 <paramref name="value" />의 상대 값을 나타내는 부호 있는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-312">A signed number indicating the relative values of this instance and <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="dba63-313">
            <list type="table">
              <listheader>
                <term> 반환 값  </term>
                <description> 설명  </description>
              </listheader>
              <item>
                <term> 0보다 작음  </term>
                <description> 이 인스턴스는 <paramref name="value" />보다 작습니다.  -또는-  이 인스턴스가 숫자(<see cref="F:System.Single.NaN" />)가 아니고 <paramref name="value" />가 숫자입니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description> 이 인스턴스가 <paramref name="value" />과 같습니다.  -또는-  이 인스턴스 및 값이 모두 숫자(<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" /> 또는 <see cref="F:System.Single.NegativeInfinity" />가 아닙니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description> 이 인스턴스는 <paramref name="value" />보다 큽니다.  -또는-  이 인스턴스가 번호이고 <paramref name="value" />가 숫자(<see cref="F:System.Single.NaN" />)이 아닙니다.  -또는-  <paramref name="value" />가 <see langword="null" />입니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-313">
              <list type="table">
                <listheader>
                  <term> Return Value  </term>
                  <description> Description  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> This instance is less than <paramref name="value" />.  -or-  This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> This instance is equal to <paramref name="value" />.  -or-  This instance and value are both not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> This instance is greater than <paramref name="value" />.  -or-  This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).  -or-  <paramref name="value" /> is <see langword="null" />.  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-314">`value` 매개 변수 여야 `null` 또는 인스턴스의 <xref:System.Single>, 그러지 않으면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-314">The `value` parameter must be `null` or an instance of <xref:System.Single>; otherwise, an exception is thrown.</span></span> <span data-ttu-id="dba63-315">모든 인스턴스 <xref:System.Single>, 해당 값에 관계 없이 보다 큰 것으로 간주 됩니다 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-315">Any instance of <xref:System.Single>, regardless of its value, is considered greater than `null`.</span></span>  
  
 <span data-ttu-id="dba63-316">값은 같은 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-316">Values must be identical to be considered equal.</span></span> <span data-ttu-id="dba63-317">특히 부동 소수점 값이 여러 수학 연산을에 종속 하는 경우에 정밀도 떨어질 수 및 최소 유효 자릿수가 제외 하 고 거의 동일 하 게 해당 값에 대 한 일반적입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-317">Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits.</span></span> <span data-ttu-id="dba63-318">반환 값이로 인해는 <xref:System.Single.CompareTo%2A> 메서드 때때로 놀라운 보일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-318">Because of this, the return value of the <xref:System.Single.CompareTo%2A> method may seem surprising at times.</span></span> <span data-ttu-id="dba63-319">예를 들어 동일한 값으로 나누기 뒤 특정 값을 곱하는 식은 원래 값을 생성 해야 하지만 다음 예제에서는 계산 된 값으로 밝혀졌습니다 원래 값 보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-319">For example, multiplication by a particular value followed by division by the same value should produce the original value, but in the following example, the computed value turns out to be greater than the original value.</span></span> <span data-ttu-id="dba63-320">"R"을 사용 하 여 두 값의 모든 유효 자릿수가 표시 [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 의 최하위 유효 자릿수가의 원래 값에서 계산 된 값이 다른 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-320">Showing all significant digits of the two values by using the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) indicates that the computed value differs from the original value in its least significant digits.</span></span> <span data-ttu-id="dba63-321">이러한 비교를 처리 하는 방법에 대 한 내용은의 설명 섹션을 참조 하십시오.는 <xref:System.Single.Equals%28System.Single%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-321">For information about handling such comparisons, see the Remarks section of the <xref:System.Single.Equals%28System.Single%29> method.</span></span>  
  
 [!code-csharp[System.Single.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.compareto/cs/compareto3.cs#2)]
 [!code-vb[System.Single.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.compareto/vb/compareto3.vb#2)]  
  
 <span data-ttu-id="dba63-322">이 메서드는 지원 하도록 구현 된 <xref:System.IComparable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-322">This method is implemented to support the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="dba63-323">없지만 <xref:System.Single.NaN> 간에 동일한 것으로 간주 되지 않으며 <xref:System.Single.NaN> (심지어 자체)는 <xref:System.IComparable> 인터페이스에서는 `A.CompareTo(A)` 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-323">Note that, although a <xref:System.Single.NaN> is not considered to be equal to another <xref:System.Single.NaN> (even itself), the <xref:System.IComparable> interface requires that `A.CompareTo(A)` return zero.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="dba63-324">정확 하 게 비교</span><span class="sxs-lookup"><span data-stu-id="dba63-324">Precision in Comparisons</span></span>  
 <span data-ttu-id="dba63-325">초과 문서화 된 정밀도 부동 소수점 숫자의 정밀도 특정 구현 및.NET Framework의 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-325">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="dba63-326">따라서 전체 자릿수는 수의 내부 표현 변경 될 수 있으므로 두 개의 특정 숫자 비교.NET Framework의 버전 간에 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-326">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-327">다음 코드 예제는 <xref:System.Single.CompareTo%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-327">The following code example demonstrates the <xref:System.Single.CompareTo%2A> method.</span></span>  
  
 [!code-cpp[System.Single#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#16)]
 [!code-csharp[System.Single#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#16)]
 [!code-vb[System.Single#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="dba63-328">
            <paramref name="value" />가 <see cref="T:System.Single" />가 아닌 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-328">
              <paramref name="value" /> is not a <see cref="T:System.Single" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Single.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.CompareTo(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(float value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : single -&gt; int&#xA;override this.CompareTo : single -&gt; int" Usage="single.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="dba63-329">비교할 단정밀도 부동 소수점 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-329">A single-precision floating-point number to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-330">이 인스턴스를 지정된 단정밀도 부동 소수점 숫자와 비교하고 이 인스턴스의 값이 지정된 단정밀도 부동 소수점 숫자 값보다 작은지, 같은지 또는 큰지를 나타내는 정수를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-330">Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified single-precision floating-point number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-331">이 인스턴스와 <paramref name="value" />의 상대 값을 나타내는 부호 있는 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-331">A signed number indicating the relative values of this instance and <paramref name="value" />.</span>
          </span>
          <span data-ttu-id="dba63-332">
            <list type="table">
              <listheader>
                <term> 반환 값  </term>
                <description> 설명  </description>
              </listheader>
              <item>
                <term> 0보다 작음  </term>
                <description> 이 인스턴스는 <paramref name="value" />보다 작습니다.  -또는-  이 인스턴스가 숫자(<see cref="F:System.Single.NaN" />)가 아니고 <paramref name="value" />가 숫자입니다.  </description>
              </item>
              <item>
                <term> 0  </term>
                <description> 이 인스턴스가 <paramref name="value" />과 같습니다.  -또는-  이 인스턴스와 <paramref name="value" /> 모두 숫자(<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" /> 또는 <see cref="F:System.Single.NegativeInfinity" />가 아닙니다.  </description>
              </item>
              <item>
                <term> 0보다 큼  </term>
                <description> 이 인스턴스는 <paramref name="value" />보다 큽니다.  -또는-  이 인스턴스가 번호이고 <paramref name="value" />가 숫자(<see cref="F:System.Single.NaN" />)가 아닙니다.  </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-332">
              <list type="table">
                <listheader>
                  <term> Return Value  </term>
                  <description> Description  </description>
                </listheader>
                <item>
                  <term> Less than zero  </term>
                  <description> This instance is less than <paramref name="value" />.  -or-  This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number.  </description>
                </item>
                <item>
                  <term> Zero  </term>
                  <description> This instance is equal to <paramref name="value" />.  -or-  Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.  </description>
                </item>
                <item>
                  <term> Greater than zero  </term>
                  <description> This instance is greater than <paramref name="value" />.  -or-  This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-333">값은 같은 동일 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-333">Values must be identical to be considered equal.</span></span> <span data-ttu-id="dba63-334">것이 일반적를 정밀도 손실 하 고 값이 여러 수학 연산을에 종속 하는 경우에 특히 최하위 유효 자릿수를 제외 하 고 거의 동일한 될 부동 소수점 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-334">It is common for floating-point values to lose precision and to become nearly identical except for their least significant digits, especially when the values depend on multiple mathematical operations.</span></span> <span data-ttu-id="dba63-335">반환 값이로 인해는 <xref:System.Single.CompareTo%2A> 메서드 때때로 보일 수 있지만 놀라운 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-335">Because of this, the return value of the <xref:System.Single.CompareTo%2A> method at times may seem surprising.</span></span> <span data-ttu-id="dba63-336">예를 들어 동일한 값으로 나누기 뒤 모든 값을 곱하는 식은 원래 값을 생성 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-336">For example, multiplication by any value followed by division by the same value should produce the original value.</span></span> <span data-ttu-id="dba63-337">그러나 다음 예제에서는 계산 된 값으로 밝혀졌습니다 원래 값 보다 커야 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-337">However, in the following example, the computed value turns out to be greater than the original value.</span></span> <span data-ttu-id="dba63-338">"R"을 사용 하 여 두 값의 모든 유효 자릿수가 표시 [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 의 최하위 유효 자릿수가의 원래 값에서 계산 된 값이 다른 것을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-338">Showing all significant digits of the two values by using the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) indicates that the computed value differs from the original value in its least significant digits.</span></span> <span data-ttu-id="dba63-339">이러한 비교를 처리 하는 방법에 대 한 내용은의 설명 섹션을 참조 하십시오.는 <xref:System.Single.Equals%28System.Single%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-339">For information about handling such comparisons, see the Remarks section of the <xref:System.Single.Equals%28System.Single%29> method.</span></span>  
  
 [!code-csharp[System.Single.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.compareto/cs/compareto2.cs#1)]
 [!code-vb[System.Single.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.compareto/vb/compareto2.vb#1)]  
  
 <span data-ttu-id="dba63-340">이 메서드를 구현 하는 <xref:System.IComparable%601?displayProperty=nameWithType> 인터페이스 및 수행 보다 조금 더 나은 <xref:System.Single.CompareTo%2A?displayProperty=nameWithType> 메서드 변환할 필요가 없기 때문에 `value` 매개 변수를 개체로 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-340">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.Single.CompareTo%2A?displayProperty=nameWithType> method because it does not have to convert the `value` parameter to an object.</span></span>  
  
 <span data-ttu-id="dba63-341">하지만 해당 값이 개체 <xref:System.Single.NaN> 값이 다른 개체에 같지 않은 경우 <xref:System.Single.NaN> (심지어 자체)는 <xref:System.IComparable%601> 인터페이스에서는 `A.CompareTo(A)` 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-341">Note that, although an object whose value is <xref:System.Single.NaN> is not considered equal to another object whose value is <xref:System.Single.NaN> (even itself), the <xref:System.IComparable%601> interface requires that `A.CompareTo(A)` return zero.</span></span>  
  
## <a name="widening-conversions"></a><span data-ttu-id="dba63-342">확대 변환</span><span class="sxs-lookup"><span data-stu-id="dba63-342">Widening Conversions</span></span>  
 <span data-ttu-id="dba63-343">프로그래밍 언어에 따라 코딩할 수는 <xref:System.Single.CompareTo%2A> 메서드 매개 변수 형식이 비트 수가 적은 보다 인스턴스 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-343">Depending on your programming language, it might be possible to code a <xref:System.Single.CompareTo%2A> method where the parameter type has fewer bits (is narrower) than the instance type.</span></span> <span data-ttu-id="dba63-344">일부 프로그래밍 언어 매개 변수를 나타내는 형식으로 비트 수는 인스턴스와 암시적 확대 변환을 수행 하기 때문에 이것이 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-344">This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</span></span>  
  
 <span data-ttu-id="dba63-345">예를 들어 인스턴스 형식이 <xref:System.Single> 매개 변수 형식이 고 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-345">For example, suppose the instance type is <xref:System.Single> and the parameter type is <xref:System.Int32>.</span></span> <span data-ttu-id="dba63-346">Microsoft C# 컴파일러는 매개 변수의 값을 나타내는 명령을 생성 한 <xref:System.Single> 개체를 생성 합니다는 <xref:System.Single.CompareTo%28System.Single%29?displayProperty=nameWithType> 확대 표현의 매개 변수 및 인스턴스 값을 비교 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-346">The Microsoft C# compiler generates instructions to represent the value of the parameter as a <xref:System.Single> object, then generates a <xref:System.Single.CompareTo%28System.Single%29?displayProperty=nameWithType> method that compares the values of the instance and the widened representation of the parameter.</span></span>  
  
 <span data-ttu-id="dba63-347">해당 컴파일러에서 숫자 형식을 암시적으로 확대 변환을 수행 하는지 확인 하려면 해당 프로그래밍 언어의 설명서를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="dba63-347">Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types.</span></span> <span data-ttu-id="dba63-348">자세한 내용은 참조는 [형식 변환 표](~/docs/standard/base-types/conversion-tables.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-348">For more information, see the [Type Conversion Tables](~/docs/standard/base-types/conversion-tables.md) topic.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="dba63-349">정확 하 게 비교</span><span class="sxs-lookup"><span data-stu-id="dba63-349">Precision in Comparisons</span></span>  
 <span data-ttu-id="dba63-350">초과 문서화 된 정밀도 부동 소수점 숫자의 정밀도 특정 구현 및.NET Framework의 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-350">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="dba63-351">따라서 전체 자릿수는 수의 내부 표현 변경 될 수 있으므로 두 개의 특정 숫자 비교.NET Framework의 버전 간에 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-351">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-352">다음 코드 예제에서는 제네릭 및 제네릭이 아닌 버전을 보여 줍니다.는 <xref:System.Single.CompareTo%2A> 여러 값 및 참조 형식에 대 한 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-352">The following code example demonstrates generic and nongeneric versions of the <xref:System.Single.CompareTo%2A> method for several value and reference types.</span></span>  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Epsilon">
      <MemberSignature Language="C#" Value="public const float Epsilon = 1.401298E-45;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 Epsilon = float32(1.401298E-45)" />
      <MemberSignature Language="DocId" Value="F:System.Single.Epsilon" />
      <MemberSignature Language="VB.NET" Value="Public Const Epsilon As Single  = 1.401298E-45" />
      <MemberSignature Language="C++ CLI" Value="public: float Epsilon = 1.401298E-45;" />
      <MemberSignature Language="F#" Value="val mutable Epsilon : single" Usage="System.single.Epsilon" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>1.401298E-45</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="dba63-353">0보다 큰 양의 최소 <see cref="T:System.Single" /> 값을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-353">Represents the smallest positive <see cref="T:System.Single" /> value that is greater than zero.</span>
          </span>
          <span data-ttu-id="dba63-354">이 필드는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-354">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-355">값은 <xref:System.Single.Epsilon> 속성은 가장 작은 양수를 반영 <xref:System.Single> 값은 숫자 연산 또는 비교에서 중요 하 때의 값은 <xref:System.Single> 인스턴스는 0입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-355">The value of the <xref:System.Single.Epsilon> property reflects the smallest positive <xref:System.Single> value that is significant in numeric operations or comparisons when the value of the <xref:System.Single> instance is zero.</span></span> <span data-ttu-id="dba63-356">예를 들어 다음 코드와 0 및 <xref:System.Single.Epsilon> 반면 같지 않은 값으로 간주 됩니다의 절반 및 값 <xref:System.Single.Epsilon> 동일한 것으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-356">For example, the following code shows that zero and <xref:System.Single.Epsilon> are considered to be unequal values, whereas zero and half the value of <xref:System.Single.Epsilon> are considered to be equal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/epsilon.cs#5)]
 [!code-vb[System.Single.Epsilon#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/epsilon.vb#5)]  
  
 <span data-ttu-id="dba63-357">보다 정확 하 게 단 정밀도 부동 소수점 형식 부호, 수 23 비트로 또는, significand와 8 비트 지 수 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-357">More precisely, the single-precision floating-point format consists of a sign, a 23-bit mantissa or significand, and an 8-bit exponent.</span></span> <span data-ttu-id="dba63-358">다음 예제와 같이 0에-126의 지 수 및 0의가 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-358">As the following example shows, zero has an exponent of -126 and a mantissa of 0.</span></span> <span data-ttu-id="dba63-359"><xref:System.Single.Epsilon> -126의 지 수에 1의가 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-359"><xref:System.Single.Epsilon> has an exponent of -126 and a mantissa of 1.</span></span> <span data-ttu-id="dba63-360">즉 <xref:System.Single.Epsilon?displayProperty=nameWithType> 가 가장 작은 양수가 <xref:System.Single> 값의 최소값을 나타내고에 대 한 가능한 가장 작은 증가값으로 0 보다 큰는 <xref:System.Single> 인 지 수는-126 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-360">This means that <xref:System.Single.Epsilon?displayProperty=nameWithType> is the smallest positive <xref:System.Single> value that is greater than zero and represents the smallest possible value and the smallest possible increment for a <xref:System.Single> whose exponent is -126.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/epsilon1.cs#6)]
 [!code-vb[System.Single.Epsilon#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/epsilon1.vb#6)]  
  
 <span data-ttu-id="dba63-361">그러나는 <xref:System.Single.Epsilon> 속성은 일반 측정 한 값의 전체 자릿수 없습니다는 <xref:System.Single> ; 입력에 적용 됩니다 <xref:System.Single> 인스턴스 값이 0입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-361">However, the <xref:System.Single.Epsilon> property is not a general measure of precision of the <xref:System.Single> type; it applies only to <xref:System.Single> instances that have a value of zero.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dba63-362">값은 <xref:System.Single.Epsilon> 속성 부동 소수점 연산에서 반올림 상대 오차의 상한을 나타내는 컴퓨터 엡실론 동일 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-362">The value of the <xref:System.Single.Epsilon> property is not equivalent to machine epsilon, which represents the upper bound of the relative error due to rounding in floating-point arithmetic.</span></span>  
  
 <span data-ttu-id="dba63-363">이 상수의 값은 1.4 e-45입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-363">The value of this constant is 1.4e-45.</span></span>  
  
 <span data-ttu-id="dba63-364">두 명백히 같은 부동 소수점 숫자가 수 것으로 간주 최소 유효 자릿수가에 차이가 있으므로 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-364">Two apparently equivalent floating-point numbers might not compare equal because of differences in their least significant digits.</span></span> <span data-ttu-id="dba63-365">예를 들어 C# 식 `(float)1/3 == (float)0.33333`, 같은지 비교 하지 왼쪽에서 나누기 연산을 반면 상수 오른쪽에는 지정 된 자릿수로 최대 전체 자릿수에 있기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-365">For example, the C# expression, `(float)1/3 == (float)0.33333`, does not compare equal because the division operation on the left side has maximum precision while the constant on the right side is precise only to the specified digits.</span></span> <span data-ttu-id="dba63-366">보다 큰 값을 사용 해야 하는지 여부를 두 개의 부동 소수점 숫자 취급 될 수 있습니다를 결정 하는 사용자 지정 알고리즘을 만드는 경우는 <xref:System.Single.Epsilon> 소수점의 두 값의 차이 값을 설정 하는 상수 같은 것으로 간주 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-366">If you create a custom algorithm that determines whether two floating-point numbers can be considered equal, you must use a value that is greater than the <xref:System.Single.Epsilon> constant to establish the acceptable absolute margin of difference for the two values to be considered equal.</span></span> <span data-ttu-id="dba63-367">(일반적으로 해당 차이 값은 이러한 <xref:System.Single.Epsilon>.)</span><span class="sxs-lookup"><span data-stu-id="dba63-367">(Typically, that margin of difference is many times greater than <xref:System.Single.Epsilon>.)</span></span>  
  
## <a name="platform-notes"></a><span data-ttu-id="dba63-368">플랫폼 참고 사항</span><span class="sxs-lookup"><span data-stu-id="dba63-368">Platform Notes</span></span>  
 <span data-ttu-id="dba63-369">ARM 시스템에서의 값은 <xref:System.Single.Epsilon> 상수 0과 같으며 이므로 너무 작아 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-369">On ARM systems, the value of the <xref:System.Single.Epsilon> constant is too small to be detected, so it equates to zero.</span></span> <span data-ttu-id="dba63-370">1.175494351E 해당 하는 대체 epsilon 값을 정의할 수 있습니다-38 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-370">You can define an alternative epsilon value that equals 1.175494351E-38 instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dba63-371">
            <see cref="T:System.Single" />의 두 인스턴스가 같은 값을 표시하는지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-371">Returns a value indicating whether two instances of <see cref="T:System.Single" /> represent the same value.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="single.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="dba63-372">이 인스턴스와 비교할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-372">An object to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-373">이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-373">Returns a value indicating whether this instance is equal to a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-374">
            <see langword="true" />가 <paramref name="obj" />의 인스턴스이고 이 인스턴스의 값과 같으면 <see cref="T:System.Single" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-374">
              <see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Single" /> and equals the value of this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-375"><xref:System.Single.Equals%2A> 값 나타날 수 있는 두 값의 정밀도 차이 때문에 주의 해야 메서드를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-375">The <xref:System.Single.Equals%2A> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values.</span></span> <span data-ttu-id="dba63-376">다음 예제에서는 <xref:System.Single> .3333 값 및 <xref:System.Single> 분할 하 여 반환 된 1을 3 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-376">The following example reports that the <xref:System.Single> value .3333 and the <xref:System.Single> returned by dividing 1 by 3 are unequal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#3)]
 [!code-vb[System.Single.Epsilon#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#3)]  
  
 <span data-ttu-id="dba63-377">동일한 지 비교 하는 대신 두 값 사이의 차이 허용 가능한 오차를 정의 하는 방법을 권장 (예:. 01%의 값 중 하나).</span><span class="sxs-lookup"><span data-stu-id="dba63-377">Rather than comparing for equality, one recommended technique involves defining an acceptable margin of difference between two values (such as .01% of one of the values).</span></span> <span data-ttu-id="dba63-378">절대 값의 두 값 사이의 차이 보다 작거나 동일한 경우 차이점은 전체 자릿수의 차이가 있기 때문에 발생할 가능성이 며 따라서 값 않습니다를 동일한 것입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-378">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to differences in precision and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="dba63-379">다음 예제에서는이 방법을 사용 하 여 33333과 1/3, 두 개의 비교 <xref:System.Single> 이전 코드 예제에서는 동일 하지 않은 것으로 확인 하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-379">The following example uses this technique to compare .33333 and 1/3, the two <xref:System.Single> values that the previous code example found to be unequal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#4)]
 [!code-vb[System.Single.Epsilon#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#4)]  
  
 <span data-ttu-id="dba63-380">이 경우 값이 같으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-380">In this case, the values are equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dba63-381">때문에 <xref:System.Single.Epsilon> 최소 식을 정의 합니다. 해당 범위는 0에 가까운 양수 값의 차이 보다 커야 <xref:System.Single.Epsilon>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-381">Because <xref:System.Single.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference must be greater than <xref:System.Single.Epsilon>.</span></span> <span data-ttu-id="dba63-382">일반적으로 여러 번 보다 크면 <xref:System.Single.Epsilon>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-382">Typically, it is many times greater than <xref:System.Single.Epsilon>.</span></span>  
  
 <span data-ttu-id="dba63-383">초과 문서화 된 정밀도 부동 소수점 숫자의 정밀도 특정 구현 및.NET Framework의 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-383">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="dba63-384">따라서 전체 자릿수는 수의 내부 표현 변경 될 수 있으므로 두 개의 특정 숫자 비교.NET Framework의 버전 간에 변경 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-384">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-385">다음 코드 예제는 <xref:System.Single.Equals%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-385">The following code example demonstrates the <xref:System.Single.Equals%2A> method.</span></span>  
  
 [!code-cpp[System.Single#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#17)]
 [!code-csharp[System.Single#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#17)]
 [!code-vb[System.Single#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#17)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="dba63-386">
            <para>컴파일러 오버 로드 확인의 두 동작에는 명백한 차이 고려 될 수 있습니다 <see cref="M:System.Single.Equals(System.Object)" /> 메서드 오버 로드 합니다. 경우 간에 암시적 변환이 <paramref name="obj" /> 인수 및 <see cref="T:System.Single" /> 정의 및 인수 인수로 형식화 되지 않습니다는 <see cref="T:System.Object" />, 컴파일러는 암시적 변환 및 호출 수행할 수 있습니다는 <see cref="M:System.Single.Equals(System.Single)" /> 메서드. 호출 그렇지 않은 경우는 <see cref="M:System.Single.Equals(System.Object)" /> 메서드는 항상 반환 <see langword="false" /> 경우 해당 <paramref name="obj" /> 인수가 <see cref="T:System.Single" /> 값입니다. 다음 예제에서는 두 개의 메서드 오버 로드 간의 동작 차이 보여 줍니다. 제외한 모든 기본 숫자 형식의 경우 <see cref="T:System.Double" /> Visual Basic을 제외한 <see cref="T:System.Decimal" /> 및 <see cref="T:System.Double" /> C#에서는 첫 번째 비교 반환 <see langword="true" /> 컴파일러가 확대 변환 및 호출에 자동으로 수행 하기 때문에 <see cref="M:System.Single.Equals(System.Single)" /> 메서드를 두 번째 비교를 반환 하는 반면 <see langword="false" /> 컴파일러를 호출 하기 때문에 <see cref="M:System.Single.Equals(System.Object)" /> 메서드.  [! code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)] [! code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-386">
              <para>Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Single.Equals(System.Object)" /> method overloads. If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.Single" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers may perform an implicit conversion and call the <see cref="M:System.Single.Equals(System.Single)" /> method. Otherwise, they call the <see cref="M:System.Single.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.Single" /> value. The following example illustrates the difference in behavior between the two method overloads. In the case of all primitive numeric types except for <see cref="T:System.Double" /> in Visual Basic and except for <see cref="T:System.Decimal" /> and <see cref="T:System.Double" /> in C#, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Single.Equals(System.Single)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Single.Equals(System.Object)" /> method.  [!code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)] [!code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Single.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (float obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(float32 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Equals(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(float obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : single -&gt; bool" Usage="single.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="dba63-387">이 인스턴스와 비교할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-387">An object to compare with this instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-388">이 인스턴스의 값과 지정된 <see cref="T:System.Single" /> 개체의 값이 같은지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-388">Returns a value indicating whether this instance and a specified <see cref="T:System.Single" /> object represent the same value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-389">
            <see langword="true" />가 이 인스턴스와 같으면 <paramref name="obj" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-389">
              <see langword="true" /> if <paramref name="obj" /> is equal to this instance; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-390">이 메서드를 구현 하는 <xref:System.IEquatable%601?displayProperty=nameWithType> 인터페이스를 하 고 수행 보다 조금 더 나은 <xref:System.Single.Equals%2A> 변환할 필요가 없기 때문에 `obj` 매개 변수를 개체로 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-390">This method implements the <xref:System.IEquatable%601?displayProperty=nameWithType> interface, and performs slightly better than <xref:System.Single.Equals%2A> because it does not have to convert the `obj` parameter to an object.</span></span>  
  
## <a name="widening-conversions"></a><span data-ttu-id="dba63-391">확대 변환</span><span class="sxs-lookup"><span data-stu-id="dba63-391">Widening Conversions</span></span>  
 <span data-ttu-id="dba63-392">프로그래밍 언어에 따라 수도 코드에는 <xref:System.Single.Equals%2A> 메서드 매개 변수 형식이 비트 수가 적은 보다 인스턴스 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-392">Depending on your programming language, it might be possible to code an <xref:System.Single.Equals%2A> method where the parameter type has fewer bits (is narrower) than the instance type.</span></span> <span data-ttu-id="dba63-393">일부 프로그래밍 언어 매개 변수를 나타내는 형식으로 비트 수는 인스턴스와 암시적 확대 변환을 수행 하기 때문에 이것이 가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-393">This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</span></span>  
  
 <span data-ttu-id="dba63-394">예를 들어 인스턴스 형식이 <xref:System.Single> 매개 변수 형식이 고 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-394">For example, suppose the instance type is <xref:System.Single> and the parameter type is <xref:System.Int32>.</span></span> <span data-ttu-id="dba63-395">Microsoft C# 컴파일러는 매개 변수의 값을 나타내는 명령을 생성 한 <xref:System.Single> 개체를 생성 합니다는 <xref:System.Single.Equals%28System.Single%29?displayProperty=nameWithType> 확대 표현의 매개 변수 및 인스턴스 값을 비교 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-395">The Microsoft C# compiler generates instructions to represent the value of the parameter as a <xref:System.Single> object, and then generates a <xref:System.Single.Equals%28System.Single%29?displayProperty=nameWithType> method that compares the values of the instance and the widened representation of the parameter.</span></span>  
  
 <span data-ttu-id="dba63-396">해당 컴파일러에서 숫자 형식을 암시적으로 확대 변환을 수행 하는지 확인 하려면 해당 프로그래밍 언어의 설명서를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="dba63-396">Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types.</span></span> <span data-ttu-id="dba63-397">자세한 내용은 참조는 [형식 변환 표](~/docs/standard/base-types/conversion-tables.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-397">For more information, see the [Type Conversion Tables](~/docs/standard/base-types/conversion-tables.md) topic.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="dba63-398">정확 하 게 비교</span><span class="sxs-lookup"><span data-stu-id="dba63-398">Precision in Comparisons</span></span>  
 <span data-ttu-id="dba63-399"><xref:System.Single.Equals%2A> 없기 때문에 값 같은 정밀도 두 값의 차이 때문에 주의 해야 메서드를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-399">The <xref:System.Single.Equals%2A> method should be used with caution, because two apparently equivalent values can be unequal because of the differing precision of the two values.</span></span> <span data-ttu-id="dba63-400">다음 예제에서는 <xref:System.Single> .3333 값 및 <xref:System.Single> 분할 하 여 반환 된 1을 3 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-400">The following example reports that the <xref:System.Single> value .3333 and the <xref:System.Single> returned by dividing 1 by 3 are unequal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#1)]
 [!code-vb[System.Single.Epsilon#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#1)]  
  
 <span data-ttu-id="dba63-401">같음 허용 가능한 두 값 사이의 차이 오차를 정의 하는 것에 대 한 비교와 관련 된 문제를 방지 하는 하나의 비교 방법 (같은. 01%의 값 중 하나).</span><span class="sxs-lookup"><span data-stu-id="dba63-401">One comparison technique that avoids the problems associated with comparing for equality involves defining an acceptable margin of difference between two values (such as .01% of one of the values).</span></span> <span data-ttu-id="dba63-402">절대 값의 두 값 사이의 차이 보다 작거나 동일한 경우 차이점은 전체 자릿수의 차이가 수 및 값은 동일한 것으로 가능성이 따라서 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-402">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be an outcome of differences in precision and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="dba63-403">다음 예제에서는이 방법을 사용 하 여은 두 33333과 1/3 비교 <xref:System.Single> 이전 코드 예제에서는 동일 하지 않은 것으로 확인 하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-403">The following example uses this technique to compare .33333 and 1/3, which are the two <xref:System.Single> values that the previous code example found to be unequal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#2)]
 [!code-vb[System.Single.Epsilon#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#2)]  
  
 <span data-ttu-id="dba63-404">이 경우 값이 같으면 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-404">In this case, the values are equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dba63-405">때문에 <xref:System.Single.Epsilon> 최소 식을 정의 합니다. 해당 범위는 0에 가까운 양수 값의 차이 보다 커야 <xref:System.Single.Epsilon>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-405">Because <xref:System.Single.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference must be greater than <xref:System.Single.Epsilon>.</span></span> <span data-ttu-id="dba63-406">일반적으로 여러 번 보다 크면 <xref:System.Single.Epsilon>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-406">Typically, it is many times greater than <xref:System.Single.Epsilon>.</span></span> <span data-ttu-id="dba63-407">이 인해 사용 하지 않으면 권장 <xref:System.Double.Epsilon> 비교할 때 <xref:System.Double> 같음에 대 한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-407">Because of this, we recommend that you do not use <xref:System.Double.Epsilon> when comparing <xref:System.Double> values for equality.</span></span>  
  
 <span data-ttu-id="dba63-408">동일한 지 비교와 관련 된 문제를 방지 하는 두 번째 기술은 일부 절대 값으로 두 개의 부동 소수점 숫자의 차이 비교 하는 작업이 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-408">A second technique that avoids the problems associated with comparing for equality involves comparing the difference between two floating-point numbers with some absolute value.</span></span> <span data-ttu-id="dba63-409">차이 절대 값 보다 작은 경우 숫자는 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-409">If the difference is less than or equal to that absolute value, the numbers are equal.</span></span> <span data-ttu-id="dba63-410">큰 경우 숫자가 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-410">If it is greater, the numbers are not equal.</span></span> <span data-ttu-id="dba63-411">이 작업을 수행 하는 한 가지 방법은 임의로 절대 값을 선택 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-411">One way to do this is to arbitrarily select an absolute value.</span></span> <span data-ttu-id="dba63-412">그러나이 문제가 차이의 허용 가능한 오차의 규모에 따라 다르기 때문에 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-412">However, this is problematic, because an acceptable margin of difference depends on the magnitude of the <xref:System.Single> values.</span></span> <span data-ttu-id="dba63-413">두 번째 방법은의 부동 소수점 형식 디자인 기능 활용: 두 부동 소수점 값의 정수 표현의가 수 구성 요소 간 차이 구분 하는 가능한 부동 소수점 값의 수를 나타내는 두 개의 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-413">A second way takes advantage of a design feature of the floating-point format: The difference between the mantissa components in the integer representations of two floating-point values indicates the number of possible floating-point values that separates the two values.</span></span> <span data-ttu-id="dba63-414">예를 들어 0.0 사이의 차이 및 <xref:System.Single.Epsilon> 있으므로 1 <xref:System.Single.Epsilon> 는 표현 가능한 가장 작은 값으로 작업할 때는 <xref:System.Single> 값이 0 인 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-414">For example, the difference between 0.0 and <xref:System.Single.Epsilon> is 1, because <xref:System.Single.Epsilon> is the smallest representable value when working with a <xref:System.Single> whose value is zero.</span></span> <span data-ttu-id="dba63-415">다음 예제에서는이 방법을 사용 하 여은 두 33333과 1/3을 비교 <xref:System.Double> 있는 값이 이전 코드 예제와는 <xref:System.Single.Equals%28System.Single%29> 를 동일 하지 않은 메서드를 찾을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-415">The following example uses this technique to compare .33333 and 1/3, which are the two <xref:System.Double> values that the previous code example with the <xref:System.Single.Equals%28System.Single%29> method found to be unequal.</span></span> <span data-ttu-id="dba63-416">이 예에서는 사용 하는 <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> 및 <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> 단 정밀도 부동 소수점 값을 정수 표현으로 변환 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-416">Note that the example uses the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> and <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> methods to convert a single-precision floating-point value to its integer representation.</span></span>  
  
 [!code-csharp[System.Single.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsabs1.cs#1)]
 [!code-vb[System.Single.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsabs1.vb#1)]  
  
 <span data-ttu-id="dba63-417">초과 문서화 된 정밀도 부동 소수점 숫자의 정밀도 특정 구현 및.NET Framework의 버전입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-417">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="dba63-418">따라서 전체 자릿수는 수의 내부 표현 변경 될 수 있으므로 두 숫자의 비교는.NET Framework의 버전에 따라 다른 결과 생성할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-418">Consequently, a comparison of two numbers might produce different results depending on the version of the .NET Framework, because the precision of the numbers' internal representation might change.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <span data-ttu-id="dba63-419">
            <para>컴파일러 오버 로드 확인의 두 동작에는 명백한 차이 고려 될 수 있습니다 <see cref="M:System.Single.Equals(System.Object)" /> 메서드 오버 로드 합니다. 경우 간에 암시적 변환이 <paramref name="obj" /> 인수 및 <see cref="T:System.Single" /> 정의 및 인수 인수로 형식화 되지 않습니다는 <see cref="T:System.Object" />, 컴파일러는 암시적 변환 및 호출 수행할 수 있습니다는 <see cref="M:System.Single.Equals(System.Single)" /> 메서드. 호출 그렇지 않은 경우는 <see cref="M:System.Single.Equals(System.Object)" /> 메서드는 항상 반환 <see langword="false" /> 경우 해당 <paramref name="obj" /> 인수가 <see cref="T:System.Single" /> 값입니다. 다음 예제에서는 두 개의 메서드 오버 로드 간의 동작 차이 보여 줍니다. 제외한 모든 기본 숫자 형식의 경우 <see cref="T:System.Double" /> Visual Basic을 제외한 <see cref="T:System.Decimal" /> 및 <see cref="T:System.Double" /> C#에서는 첫 번째 비교 반환 <see langword="true" /> 컴파일러가 확대 변환 및 호출에 자동으로 수행 하기 때문에 <see cref="M:System.Single.Equals(System.Single)" /> 메서드를 두 번째 비교를 반환 하는 반면 <see langword="false" /> 컴파일러를 호출 하기 때문에 <see cref="M:System.Single.Equals(System.Object)" /> 메서드.  [! code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)] [! code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-419">
              <para>Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Single.Equals(System.Object)" /> method overloads. If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.Single" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers may perform an implicit conversion and call the <see cref="M:System.Single.Equals(System.Single)" /> method. Otherwise, they call the <see cref="M:System.Single.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.Single" /> value. The following example illustrates the difference in behavior between the two method overloads. In the case of all primitive numeric types except for <see cref="T:System.Double" /> in Visual Basic and except for <see cref="T:System.Decimal" /> and <see cref="T:System.Double" /> in C#, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Single.Equals(System.Single)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Single.Equals(System.Object)" /> method.  [!code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)] [!code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Single.Equals(System.Object)" />
        <altmember cref="Overload:System.Single.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="single.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dba63-420">이 인스턴스의 해시 코드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-420">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-421">부호 있는 32비트 정수 해시 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-421">A 32-bit signed integer hash code.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="single.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dba63-422">
            <see cref="T:System.TypeCode" /> 값 형식에 대한 <see cref="T:System.Single" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-422">Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Single" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-423">열거형 상수인 <see cref="F:System.TypeCode.Single" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-423">The enumerated constant, <see cref="F:System.TypeCode.Single" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public static bool IsFinite (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFinite(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsFinite(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFinite (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFinite(float f);" />
      <MemberSignature Language="F#" Value="static member IsFinite : single -&gt; bool" Usage="System.single.IsFinite f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInfinity(float f);" />
      <MemberSignature Language="F#" Value="static member IsInfinity : single -&gt; bool" Usage="System.single.IsInfinity f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">
          <span data-ttu-id="dba63-424">단정밀도 부동 소수점 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-424">A single-precision floating-point number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-425">지정된 숫자가 음의 무한대로 계산되는지 양의 무한대로 계산되는지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-425">Returns a value indicating whether the specified number evaluates to negative or positive infinity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-426">
            <paramref name="f" />가 <see cref="F:System.Single.PositiveInfinity" /> 또는 <see cref="F:System.Single.NegativeInfinity" />로 계산되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-426">
              <see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" /> or <see cref="F:System.Single.NegativeInfinity" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-427">부동 소수점 <xref:System.Single.PositiveInfinity> 또는 <xref:System.Single.NegativeInfinity> 오버플로 조건을 신호를 보내 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-427">Floating-point operations return <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-428">다음 코드 예제는 <xref:System.Single.IsInfinity%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-428">The following code example demonstrates the <xref:System.Single.IsInfinity%2A> method.</span></span>  
  
 [!code-cpp[System.Single#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#11)]
 [!code-csharp[System.Single#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#11)]
 [!code-vb[System.Single#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNaN(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNaN (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNaN(float f);" />
      <MemberSignature Language="F#" Value="static member IsNaN : single -&gt; bool" Usage="System.single.IsNaN f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">
          <span data-ttu-id="dba63-429">단정밀도 부동 소수점 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-429">A single-precision floating-point number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-430">지정된 값이 숫자가 아닌지(<see cref="F:System.Single.NaN" />) 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-430">Returns a value that indicates whether the specified value is not a number (<see cref="F:System.Single.NaN" />).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-431">
            <paramref name="f" />이(가) Not-a-Number(<see cref="F:System.Single.NaN" />)로 계산되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-431">
              <see langword="true" /> if <paramref name="f" /> evaluates to not a number (<see cref="F:System.Single.NaN" />); otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-432">부동 소수점 <xref:System.Single.NaN> 신호를 보내 해당 연산의 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-432">Floating-point operations return <xref:System.Single.NaN> to signal that that result of the operation is undefined.</span></span> <span data-ttu-id="dba63-433">예를 들어 0.0으로 0.0 구분으로 인해 <xref:System.Single.NaN>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-433">For example, dividing 0.0 by 0.0 results in <xref:System.Single.NaN>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dba63-434"><xref:System.Single.IsNaN%2A> 반환 `false` 경우는 <xref:System.Single> 값 <xref:System.Single.PositiveInfinity> 또는 <xref:System.Single.NegativeInfinity>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-434"><xref:System.Single.IsNaN%2A> returns `false` if a <xref:System.Single> value is either <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity>.</span></span> <span data-ttu-id="dba63-435">이러한 값을 테스트 하려면는 <xref:System.Single.IsInfinity%2A>, <xref:System.Single.IsPositiveInfinity%2A>, 및 <xref:System.Single.IsNegativeInfinity%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-435">To test for these values, use the <xref:System.Single.IsInfinity%2A>, <xref:System.Single.IsPositiveInfinity%2A>, and <xref:System.Single.IsNegativeInfinity%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-436">다음 코드 예제는 <xref:System.Single.IsNaN%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-436">The following code example demonstrates the <xref:System.Single.IsNaN%2A> method.</span></span>  
  
 [!code-cpp[System.Single#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#8)]
 [!code-csharp[System.Single#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#8)]
 [!code-vb[System.Single#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.NaN" />
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public static bool IsNegative (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegative(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNegative(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegative (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegative(float f);" />
      <MemberSignature Language="F#" Value="static member IsNegative : single -&gt; bool" Usage="System.single.IsNegative f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegativeInfinity">
      <MemberSignature Language="C#" Value="public static bool IsNegativeInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegativeInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNegativeInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegativeInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegativeInfinity(float f);" />
      <MemberSignature Language="F#" Value="static member IsNegativeInfinity : single -&gt; bool" Usage="System.single.IsNegativeInfinity f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">
          <span data-ttu-id="dba63-437">단정밀도 부동 소수점 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-437">A single-precision floating-point number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-438">지정된 숫자가 음의 무한대로 계산되는지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-438">Returns a value indicating whether the specified number evaluates to negative infinity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-439">
            <paramref name="f" />가 <see cref="F:System.Single.NegativeInfinity" />으로 계산되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-439">
              <see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.NegativeInfinity" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-440">부동 소수점 <xref:System.Single.NegativeInfinity> 오버플로 조건을 신호를 보내 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-440">Floating-point operations return <xref:System.Single.NegativeInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-441">다음 코드 예제는 <xref:System.Single.IsNegativeInfinity%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-441">The following code example demonstrates the <xref:System.Single.IsNegativeInfinity%2A> method.</span></span>  
  
 [!code-cpp[System.Single#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#13)]
 [!code-csharp[System.Single#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#13)]
 [!code-vb[System.Single#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNormal">
      <MemberSignature Language="C#" Value="public static bool IsNormal (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNormal(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNormal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNormal (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNormal(float f);" />
      <MemberSignature Language="F#" Value="static member IsNormal : single -&gt; bool" Usage="System.single.IsNormal f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPositiveInfinity">
      <MemberSignature Language="C#" Value="public static bool IsPositiveInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositiveInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsPositiveInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPositiveInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPositiveInfinity(float f);" />
      <MemberSignature Language="F#" Value="static member IsPositiveInfinity : single -&gt; bool" Usage="System.single.IsPositiveInfinity f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">
          <span data-ttu-id="dba63-442">단정밀도 부동 소수점 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-442">A single-precision floating-point number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-443">지정된 숫자가 양의 무한대로 계산되는지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-443">Returns a value indicating whether the specified number evaluates to positive infinity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-444">
            <paramref name="f" />가 <see cref="F:System.Single.PositiveInfinity" />으로 계산되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-444">
              <see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-445">부동 소수점 <xref:System.Single.PositiveInfinity> 오버플로 조건을 신호를 보내 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-445">Floating-point operations return <xref:System.Single.PositiveInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-446">다음 코드 예제는 <xref:System.Single.IsPositiveInfinity%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-446">The following code example demonstrates the <xref:System.Single.IsPositiveInfinity%2A> method.</span></span>  
  
 [!code-cpp[System.Single#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#12)]
 [!code-csharp[System.Single#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#12)]
 [!code-vb[System.Single#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsSubnormal">
      <MemberSignature Language="C#" Value="public static bool IsSubnormal (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSubnormal(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsSubnormal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubnormal (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubnormal(float f);" />
      <MemberSignature Language="F#" Value="static member IsSubnormal : single -&gt; bool" Usage="System.single.IsSubnormal f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const float MaxValue = 3.402823E+38;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MaxValue = float32(3.402823E+38)" />
      <MemberSignature Language="DocId" Value="F:System.Single.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Single  = 3.402823E+38" />
      <MemberSignature Language="C++ CLI" Value="public: float MaxValue = 3.402823E+38;" />
      <MemberSignature Language="F#" Value="val mutable MaxValue : single" Usage="System.single.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>3.402823E+38</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="dba63-447">
            <see cref="T:System.Single" />의 최대값을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-447">Represents the largest possible value of <see cref="T:System.Single" />.</span>
          </span>
          <span data-ttu-id="dba63-448">이 필드는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-448">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-449">이 상수의 값은 양의 3.40282347 e + 38입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-449">The value of this constant is positive 3.40282347E+38.</span></span>  
  
 <span data-ttu-id="dba63-450">초과 하는 작업의 결과 <xref:System.Single.MaxValue?displayProperty=nameWithType> 은 <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-450">The result of an operation that exceeds <xref:System.Single.MaxValue?displayProperty=nameWithType> is <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="dba63-451">다음 예에서 <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> 결과가 초과 하면 더하기, 곱하기 및 지 수 연산에서 결과 <xref:System.Single.MaxValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-451">In the following example, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> results from addition, multiplication, and exponentiation operations when the result exceeds <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Single.MaxValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.maxvalue/cs/maxvalueex.cs#1)]
 [!code-vb[System.Single.MaxValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.maxvalue/vb/maxvalueex.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="dba63-452">다음 코드 예제는 <xref:System.Single.MaxValue> 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-452">The following code example demonstrates the <xref:System.Single.MaxValue> constant.</span></span>  
  
 [!code-cpp[System.Single#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#4)]
 [!code-csharp[System.Single#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#4)]
 [!code-vb[System.Single#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const float MinValue = -3.402823E+38;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MinValue = float32(-3.402823E+38)" />
      <MemberSignature Language="DocId" Value="F:System.Single.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Single  = -3.402823E+38" />
      <MemberSignature Language="C++ CLI" Value="public: float MinValue = -3.402823E+38;" />
      <MemberSignature Language="F#" Value="val mutable MinValue : single" Usage="System.single.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>-3.402823E+38</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="dba63-453">
            <see cref="T:System.Single" />의 가능한 최소값을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-453">Represents the smallest possible value of <see cref="T:System.Single" />.</span>
          </span>
          <span data-ttu-id="dba63-454">이 필드는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-454">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-455">이 상수의 값은 음수 3.402823 e 38입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-455">The value of this constant is negative 3.402823e38.</span></span>  
  
 <span data-ttu-id="dba63-456">작업의 결과 보다 작은 <xref:System.Single.MinValue?displayProperty=nameWithType> 은 <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-456">The result of an operation that is less than <xref:System.Single.MinValue?displayProperty=nameWithType> is <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="dba63-457">다음 예에서 <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> 결과가 빼기 및 곱하기 작업에서 결과 보다 작은 <xref:System.Single.MinValue?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-457">In the following example, <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> results from subtraction and multiplication operations when the result is less than <xref:System.Single.MinValue?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Single.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.minvalue/cs/minvalueex.cs#1)]
 [!code-vb[System.Single.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.minvalue/vb/minvalueex.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="dba63-458">다음 코드 예제는 <xref:System.Single.MinValue> 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-458">The following code example demonstrates the <xref:System.Single.MinValue> constant.</span></span>  
  
 [!code-cpp[System.Single#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#5)]
 [!code-csharp[System.Single#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#5)]
 [!code-vb[System.Single#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public const float NaN = NaN;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 NaN = float32(NaN)" />
      <MemberSignature Language="DocId" Value="F:System.Single.NaN" />
      <MemberSignature Language="VB.NET" Value="Public Const NaN As Single  = NaN" />
      <MemberSignature Language="C++ CLI" Value="public: float NaN = NaN;" />
      <MemberSignature Language="F#" Value="val mutable NaN : single" Usage="System.single.NaN" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>NaN</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="dba63-459">Not-a-Number(<see langword="NaN" />)를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-459">Represents not a number (<see langword="NaN" />).</span>
          </span>
          <span data-ttu-id="dba63-460">이 필드는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-460">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-461">메서드 또는 연산자 반환 <xref:System.Single.NaN> 때 연산의 결과가 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-461">A method or operator returns <xref:System.Single.NaN> when the result of an operation is undefined.</span></span> <span data-ttu-id="dba63-462">예를 들어 0으로 나눈 결과 <xref:System.Single.NaN>다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-462">For example, the result of dividing zero by zero is <xref:System.Single.NaN>, as the following example shows.</span></span> <span data-ttu-id="dba63-463">(하지만 분모가 0이 아닌 숫자를 0을 반환 하거나 <xref:System.Single.PositiveInfinity> 또는 <xref:System.Single.NegativeInfinity>제수의 부호에 따라.)</span><span class="sxs-lookup"><span data-stu-id="dba63-463">(But note that dividing a non-zero number by zero returns either <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity>, depending on the sign of the divisor.)</span></span>  
  
 [!code-csharp[System.Single.NaN#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/nan1.cs#1)]
 [!code-vb[System.Single.NaN#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/nan1.vb#1)]  
  
 <span data-ttu-id="dba63-464">메서드 호출 또한는 <xref:System.Single.NaN> 값 또는 작업에는 <xref:System.Single.NaN> 반환 값 <xref:System.Single.NaN>다음 예제와 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-464">In addition, a method call with a <xref:System.Single.NaN> value or an operation on a <xref:System.Single.NaN> value returns <xref:System.Single.NaN>, as the following example shows.</span></span>  
  
 [!code-csharp[System.Single.NaN#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/nan1.cs#2)]
 [!code-vb[System.Single.NaN#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/nan1.vb#2)]  
  
 <span data-ttu-id="dba63-465">사용 하 여는 <xref:System.Single.IsNaN%2A> 메서드 값을 숫자 인지 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-465">Use the <xref:System.Single.IsNaN%2A> method to determine whether a value is not a number.</span></span> <span data-ttu-id="dba63-466">일반적으로 <xref:System.Single> 비교 연산자를 사용할 수 없습니다 <xref:System.Single.NaN?displayProperty=nameWithType> 다른 <xref:System.Single> 있지만 값 비교 방법 (같은 <xref:System.Single.Equals%2A> 및 <xref:System.Single.CompareTo%2A>) 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-466">In general, <xref:System.Single> operators cannot be used to compare <xref:System.Single.NaN?displayProperty=nameWithType> with other <xref:System.Single> values, although comparison methods (such as <xref:System.Single.Equals%2A> and <xref:System.Single.CompareTo%2A>) can.</span></span> <span data-ttu-id="dba63-467">다음 예제에서는 간의 동작 차이 보여 줍니다. <xref:System.Single> 비교 연산자와 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-467">The following example illustrates the difference in behavior between <xref:System.Single> comparison operators and methods.</span></span>  
  
 [!code-csharp[System.Single.NaN#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/single.nan4.cs#4)]
 [!code-vb[System.Single.NaN#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/single.nan4.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="dba63-468">다음 예제는 <xref:System.Single.NaN> 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-468">The following example demonstrates the <xref:System.Single.NaN> constant.</span></span>  
  
 [!code-cpp[System.Single#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#7)]
 [!code-csharp[System.Single#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#7)]
 [!code-vb[System.Single#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsNaN(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="C#" Value="public const float NegativeInfinity = -Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 NegativeInfinity = float32(-Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Single.NegativeInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const NegativeInfinity As Single  = -Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: float NegativeInfinity = -Infinity;" />
      <MemberSignature Language="F#" Value="val mutable NegativeInfinity : single" Usage="System.single.NegativeInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>-Infinity</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="dba63-469">음의 무한대를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-469">Represents negative infinity.</span>
          </span>
          <span data-ttu-id="dba63-470">이 필드는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-470">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-471">이 상수의 값은 음수 0으로 나눈 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-471">The value of this constant is the result of dividing a negative number by zero.</span></span>  
  
 <span data-ttu-id="dba63-472">작업의 결과이 상수가 반환은 보다 작은 <xref:System.Single.MinValue>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-472">This constant is returned when the result of an operation is less than <xref:System.Single.MinValue>.</span></span>  
  
 <span data-ttu-id="dba63-473">사용 하 여 <xref:System.Single.IsNegativeInfinity%2A> 하는 값이 음의 무한대로 계산 되는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-473">Use <xref:System.Single.IsNegativeInfinity%2A> to determine whether a value evaluates to negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-474">다음 코드 예제는 <xref:System.Single.NegativeInfinity> 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-474">The following code example demonstrates the <xref:System.Single.NegativeInfinity> constant.</span></span>  
  
 [!code-cpp[System.Single#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#9)]
 [!code-csharp[System.Single#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#9)]
 [!code-vb[System.Single#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_Equality(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : single * single -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="dba63-475">비교할 첫 번째 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-475">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="dba63-476">비교할 두 번째 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-476">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-477">지정된 두 <see cref="T:System.Single" /> 값이 같은지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-477">Returns a value that indicates whether two specified <see cref="T:System.Single" /> values are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-478">
            <paramref name="left" />과 <paramref name="right" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-478">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-479"><xref:System.Single.op_Equality%2A> 메서드 정의 대 한 같음 연산자 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-479">The <xref:System.Single.op_Equality%2A> method defines the equality operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_GreaterThan(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : single * single -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="dba63-480">비교할 첫 번째 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-480">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="dba63-481">비교할 두 번째 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-481">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-482">지정된 <see cref="T:System.Single" /> 값이 지정된 다른 <see cref="T:System.Single" /> 값보다 큰지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-482">Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is greater than another specified <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-483">
            <see langword="true" />이 <paramref name="left" />보다 크면 <paramref name="right" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-483">
              <see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-484"><xref:System.Single.op_GreaterThan%2A> 큼의 작업을 정의 하는 방법-에 대 한 연산자 보다 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-484">The <xref:System.Single.op_GreaterThan%2A> method defines the operation of the greater-than operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : single * single -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="dba63-485">비교할 첫 번째 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-485">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="dba63-486">비교할 두 번째 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-486">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-487">지정된 <see cref="T:System.Single" /> 값이 지정된 다른 <see cref="T:System.Single" /> 값보다 크거나 같은지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-487">Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is greater than or equal to another specified <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-488">
            <paramref name="left" />가 <paramref name="right" />보다 크거나 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-488">
              <see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-489"><xref:System.Single.op_GreaterThanOrEqual%2A> 메서드 정의 대 한 또는 같음 연산자의 연산을 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-489">The <xref:System.Single.op_GreaterThanOrEqual%2A> method defines the operation of the greater-than-or-equal operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_Inequality(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(float left, float right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : single * single -&gt; bool" Usage="System.single.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="dba63-490">비교할 첫 번째 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-490">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="dba63-491">비교할 두 번째 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-491">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-492">지정된 두 <see cref="T:System.Single" /> 값이 같지 않은지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-492">Returns a value that indicates whether two specified <see cref="T:System.Single" /> values are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-493">
            <paramref name="left" />과 <paramref name="right" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-493">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-494"><xref:System.Single.op_Inequality%2A> 메서드 정의 대 한 같지 않음 연산자 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-494">The <xref:System.Single.op_Inequality%2A> method defines the inequality operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_LessThan(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : single * single -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="dba63-495">비교할 첫 번째 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-495">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="dba63-496">비교할 두 번째 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-496">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-497">지정된 <see cref="T:System.Single" /> 값이 지정된 다른 <see cref="T:System.Single" /> 값보다 작은지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-497">Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is less than another specified <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-498">
            <paramref name="left" />가 <paramref name="right" />보다 작으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-498">
              <see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-499"><xref:System.Single.op_LessThan%2A> 메서드 작음 연산을 정의-에 대 한 연산자 보다 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-499">The <xref:System.Single.op_LessThan%2A> method defines the operation of the less-than operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : single * single -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="dba63-500">비교할 첫 번째 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-500">The first value to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="dba63-501">비교할 두 번째 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-501">The second value to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-502">지정된 <see cref="T:System.Single" /> 값이 지정된 다른 <see cref="T:System.Single" /> 값보다 작거나 같은지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-502">Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is less than or equal to another specified <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-503">
            <paramref name="left" />가 <paramref name="right" />보다 작거나 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-503">
              <see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-504"><xref:System.Single.op_LessThanOrEqual%2A> 작거나 같음 연산자에 대 한 작업을 정의 하는 메서드 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-504">The <xref:System.Single.op_LessThanOrEqual%2A> method defines the operation of the less-than-or-equal operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dba63-505">숫자의 문자열 표현을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-505">Converts the string representation of a number to its single-precision floating-point number equivalent.</span>
          </span>
        </summary>
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; single" Usage="System.single.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="dba63-506">변환할 숫자가 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-506">A string that contains a number to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-507">숫자의 문자열 표현을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-507">Converts the string representation of a number to its single-precision floating-point number equivalent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-508">
            <paramref name="s" />에 지정된 숫자 값 또는 기호에 해당하는 단정밀도 부동 소수점 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-508">A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-509">`s` 매개 변수는 현재 문화권의 포함 될 수 있습니다 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, 또는 형식의 문자열:</span><span class="sxs-lookup"><span data-stu-id="dba63-509">The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:</span></span>  
  
 <span data-ttu-id="dba63-510">[*ws*][*sign*] [*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][e[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="dba63-510">[*ws*][*sign*] [*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][e[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="dba63-511">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-511">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="dba63-512">다음 표에서는 각 요소에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-512">The following table describes each element.</span></span>  
  
|<span data-ttu-id="dba63-513">요소</span><span class="sxs-lookup"><span data-stu-id="dba63-513">Element</span></span>|<span data-ttu-id="dba63-514">설명</span><span class="sxs-lookup"><span data-stu-id="dba63-514">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="dba63-515">*ws*</span><span class="sxs-lookup"><span data-stu-id="dba63-515">*ws*</span></span>|<span data-ttu-id="dba63-516">일련의 공백 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-516">A series of white space characters.</span></span>|  
|<span data-ttu-id="dba63-517">*sign*</span><span class="sxs-lookup"><span data-stu-id="dba63-517">*sign*</span></span>|<span data-ttu-id="dba63-518">음수 부호 기호 또는 양수 부호 기호.</span><span class="sxs-lookup"><span data-stu-id="dba63-518">A negative sign symbol or a positive sign symbol.</span></span> <span data-ttu-id="dba63-519">유효한 기호 문자에서 결정 됩니다는 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> 현재 문화권의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-519">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="dba63-520">선행 기호만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-520">Only a leading sign can be used.</span></span>|  
|<span data-ttu-id="dba63-521">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-521">*integral-digits*</span></span>|<span data-ttu-id="dba63-522">일련의 숫자 0에서 하는 9 사이의 숫자의 정수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-522">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="dba63-523">실행 *정수 계열 자릿수* 그룹 구분 기호로 분할할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-523">Runs of *integral-digits* can be partitioned by a group-separator symbol.</span></span> <span data-ttu-id="dba63-524">예를 들어, 일부 문화권 쉼표 (,) 개의 그룹을 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-524">For example, in some cultures a comma (,) separates groups of thousands.</span></span> <span data-ttu-id="dba63-525">*정수 계열 숫자* 요소 문자열일 수 없는 경우에는 포함 되어는 *소수 자릿수* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-525">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="dba63-526">*,*</span><span class="sxs-lookup"><span data-stu-id="dba63-526">*,*</span></span>|<span data-ttu-id="dba63-527">Culture 별 1000 단위 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-527">A culture-specific thousands separator symbol.</span></span>|  
|<span data-ttu-id="dba63-528">*.*</span><span class="sxs-lookup"><span data-stu-id="dba63-528">*.*</span></span>|<span data-ttu-id="dba63-529">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-529">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="dba63-530">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-530">*fractional-digits*</span></span>|<span data-ttu-id="dba63-531">일련의 숫자 0에서 하는 9 사이의 숫자의 소수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-531">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="dba63-532">E</span><span class="sxs-lookup"><span data-stu-id="dba63-532">E</span></span>|<span data-ttu-id="dba63-533">"E" 또는 "E" 문자 값은 지 수 (과학적 표기법) 표기법으로 표현 됨을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-533">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="dba63-534">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-534">*exponential-digits*</span></span>|<span data-ttu-id="dba63-535">일련의 0에서 지 수를 지정 하는 9 사이의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-535">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="dba63-536">`s` 매개 변수를 조합 하 여 해석 되는 <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-536">The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="dba63-537">즉, 공백과 천 단위 구분 기호는 사용할 수 있지만 통화 기호를 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-537">This means that white space and thousands separators are allowed but currency symbols are not.</span></span> <span data-ttu-id="dba63-538">요소를 명시적으로 정의 하려면 (통화 기호, 1000 단위와 같은 구분 기호 및 공백)에 나타날 수 있는 `s`를 사용 하 여는 <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-538">To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in `s`, use the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method overload.</span></span>  
  
 <span data-ttu-id="dba63-539">`s` 매개 변수에서 서식 지정 정보를 사용 하 여 구문 분석 되는 <xref:System.Globalization.NumberFormatInfo> 현재 시스템 문화권에 따라 초기화 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-539">The `s` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="dba63-540">자세한 내용은 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="dba63-540">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.</span></span> <span data-ttu-id="dba63-541">특정 문화권의 서식 지정 정보를 사용 하 여 문자열의 구문을 분석을 사용 하 여는 <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> 또는 <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-541">To parse a string by using the formatting information of a specific culture, use the <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> or <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method.</span></span>  
  
 <span data-ttu-id="dba63-542">일반적으로 전달 하는 경우는 <xref:System.Single.Parse%2A> 메서드를 호출 하 여 만든 문자열에는 <xref:System.Single.ToString%2A> 메서드, 원래 <xref:System.Single> 값이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-542">Ordinarily, if you pass the <xref:System.Single.Parse%2A> method a string that is created by calling the <xref:System.Single.ToString%2A> method, the original <xref:System.Single> value is returned.</span></span> <span data-ttu-id="dba63-543">그러나 정밀도 손실 때문에 값 아니어야 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-543">However, because of a loss of precision, the values may not be equal.</span></span>  
  
 <span data-ttu-id="dba63-544">구분 기호에서 발견 되는 `s` 분석 및 적용 가능한 통화 또는 숫자의 소수 하는 동안 매개 변수 및 그룹 구분 기호가 동일 합니다. 구문 분석 작업의 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-544">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="dba63-545">구분 기호에 대 한 자세한 내용은 참조 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, 및 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-545">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-546">다음 예제에서는 <xref:System.Single.Parse%28System.String%29> 문자열의 배열을를 값으로 변환 하려면 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-546">The following example uses the <xref:System.Single.Parse%28System.String%29> method to convert an array of strings to equivalent <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Single.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse1.cs#2)]
 [!code-vb[System.Single.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="dba63-547">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-547">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="dba63-548">
            <paramref name="s" />가 유효한 형식의 숫자를 나타내지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-548">
              <paramref name="s" /> does not represent a number in a valid format.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="dba63-549">
            <paramref name="s" />가 <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타내는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-549">
              <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; single" Usage="System.single.Parse (s, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="dba63-550">변환할 숫자가 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-550">A string that contains a number to convert.</span>
          </span>
        </param>
        <param name="style">
          <span data-ttu-id="dba63-551">
            <c>s</c>에 나타날 수 있는 스타일 요소를 나타내는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-551">A bitwise combination of enumeration values that indicates the style elements that can be present in <c>s</c>.</span>
          </span>
          <span data-ttu-id="dba63-552">지정할 일반적인 값은 <see cref="F:System.Globalization.NumberStyles.AllowThousands" />와 결합되는 <see cref="F:System.Globalization.NumberStyles.Float" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-552">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-553">지정된 스타일로 된 숫자의 문자열 표현을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-553">Converts the string representation of a number in a specified style to its single-precision floating-point number equivalent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-554">
            <paramref name="s" />에 지정된 숫자 값 또는 기호에 해당하는 단정밀도 부동 소수점 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-554">A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-555">`style` 스타일 요소를 정의 하는 매개 변수 (공백, 1000 단위와 같은 구분 기호 및 통화 기호)에 허용 되는 `s` 구문 분석 작업이 성공 하려면에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-555">The `style` parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="dba63-556">비트 플래그의 조합 이어야 합니다는 <xref:System.Globalization.NumberStyles> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-556">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="dba63-557">다음 <xref:System.Globalization.NumberStyles> 멤버가 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-557">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 <span data-ttu-id="dba63-558">`s` 매개 변수는 현재 문화권의 포함 될 수 있습니다 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-558">The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>.</span></span> <span data-ttu-id="dba63-559">값에 따라 `style`, 형태를 취할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-559">Depending on the value of `style`, it can also take the form:</span></span>  
  
 <span data-ttu-id="dba63-560">[*ws*][*$*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="dba63-560">[*ws*][*$*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="dba63-561">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-561">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="dba63-562">다음 표에서는 각 요소에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-562">The following table describes each element.</span></span>  
  
 <span data-ttu-id="dba63-563">*ws*</span><span class="sxs-lookup"><span data-stu-id="dba63-563">*ws*</span></span>  
 <span data-ttu-id="dba63-564">일련의 공백 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-564">A series of white-space characters.</span></span> <span data-ttu-id="dba63-565">맨 앞에 공백이 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 의 끝에 있고, 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-565">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>  
  
 $  
 <span data-ttu-id="dba63-566">Culture 별 통화 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-566">A culture-specific currency symbol.</span></span> <span data-ttu-id="dba63-567">문자열에 해당 위치는 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> 현재 문화권의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-567">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="dba63-568">현재 문화권의 통화 기호에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-568">The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="dba63-569">*sign*</span><span class="sxs-lookup"><span data-stu-id="dba63-569">*sign*</span></span>  
 <span data-ttu-id="dba63-570">음수 부호 기호 (-) 또는 더하기 기호 (+) 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-570">A negative sign symbol (-) or a positive sign symbol (+).</span></span> <span data-ttu-id="dba63-571">부호의 시작 부분에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 의 끝에 있고, 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-571">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="dba63-572">괄호를 사용할 수 있습니다 `s` 경우 음수 값을 나타내는 데 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-572">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="dba63-573">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-573">*integral-digits*</span></span>  
 <span data-ttu-id="dba63-574">일련의 숫자 0에서 하는 9 사이의 숫자의 정수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-574">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="dba63-575">*정수 계열 숫자* 요소 문자열일 수 없는 경우에는 포함 되어는 *소수 자릿수* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-575">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>  
  
 <span data-ttu-id="dba63-576">,</span><span class="sxs-lookup"><span data-stu-id="dba63-576">,</span></span>  
 <span data-ttu-id="dba63-577">Culture 관련 그룹 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-577">A culture-specific group separator.</span></span> <span data-ttu-id="dba63-578">현재 문화권의 그룹 구분 기호에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그</span><span class="sxs-lookup"><span data-stu-id="dba63-578">The current culture's group separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag</span></span>  
  
 <span data-ttu-id="dba63-579">.</span><span class="sxs-lookup"><span data-stu-id="dba63-579">.</span></span>  
 <span data-ttu-id="dba63-580">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-580">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="dba63-581">에 현재 문화권의 소수점 기호가 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-581">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="dba63-582">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-582">*fractional-digits*</span></span>  
 <span data-ttu-id="dba63-583">일련의 숫자 0에서 하는 9 사이의 숫자의 소수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-583">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="dba63-584">소수 자릿수에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-584">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="dba63-585">E</span><span class="sxs-lookup"><span data-stu-id="dba63-585">E</span></span>  
 <span data-ttu-id="dba63-586">"E" 또는 "E" 문자 값은 지 수 (과학적 표기법) 표기법으로 표현 됨을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-586">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="dba63-587">`value` 경우 매개 변수 지 수 표기법으로 숫자를 나타낼 수 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-587">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="dba63-588">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-588">*exponential-digits*</span></span>  
 <span data-ttu-id="dba63-589">일련의 0에서 지 수를 지정 하는 9 사이의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-589">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>  
  
 <span data-ttu-id="dba63-590">숫자만 문자열 (해당 하는 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 스타일) 항상 성공적으로 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-590">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="dba63-591">나머지 <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> 멤버 있을 수 있지만 입력된 문자열에서 제공 되어야 할 필요는 없습니다 있는 요소를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-591">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="dba63-592">다음 표에서 개별 <xref:System.Globalization.NumberStyles> 플래그에 있을 수 있는 요소에 영향을 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-592">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="dba63-593">NumberStyles 값</span><span class="sxs-lookup"><span data-stu-id="dba63-593">NumberStyles value</span></span>|<span data-ttu-id="dba63-594">에 허용 되는 요소 `s` 숫자 이외에</span><span class="sxs-lookup"><span data-stu-id="dba63-594">Elements permitted in `s` in addition to digits</span></span>|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="dba63-595">*정수 계열 자릿수* 요소만 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-595">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="dba63-596">소수점 (*.*) 및 *소수 자릿수가* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-596">The decimal point (*.*) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="dba63-597">"E" 또는 "E" 문자 지 수 표기법을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-597">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="dba63-598">단독으로이 플래그는 폼의 값을 지원 *자리*E*자릿수*추가; 양수 또는 음수 부호 및 소수점 기호 등의 요소를 사용 하 여 문자열을 구문 분석 하는 데 필요한 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-598">This flag by itself supports values in the form *digits*E*digits*; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="dba63-599">*ws* 의 시작 부분에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-599">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="dba63-600">*ws* 의 끝에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-600">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="dba63-601">*기호* 의 시작 부분에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-601">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="dba63-602">*기호* 의 끝에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-602">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="dba63-603">*기호* 숫자 값이 들어 괄호 안에 형식 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-603">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="dba63-604">1000 단위 구분 기호 (,) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-604">The thousands separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="dba63-605">통화 ($) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-605">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="dba63-606">모든 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-606">All elements.</span></span> <span data-ttu-id="dba63-607">그러나 `s` 16 진수 또는 숫자를 지 수 표기법으로 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-607">However, `s` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="dba63-608">*ws* 부분이 나 끝 부분에 요소 `s`, *기호* 맨 앞에 `s`, 소수점 (.) 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-608">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="dba63-609">`s` 매개 변수로 지 수 표기법을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-609">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="dba63-610">`ws`, `sign`, 1000 단위 구분 기호 (,) 및 소수점 (.) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-610">The `ws`, `sign`, thousands separator (,) and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="dba63-611">모든 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-611">All elements.</span></span> <span data-ttu-id="dba63-612">그러나 `s` 16 진수를 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-612">However, `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="dba63-613">몇 가지 예 `s` 는 "100", "-123456789", "123.45 e + 6", "+" 500, "5e2", "3.1416", "600.", "-. 123" 및 "-Infinity" 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-613">Some examples of `s` are "100", "-123,456,789", "123.45e+6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity".</span></span>  
  
 <span data-ttu-id="dba63-614">`s` 매개 변수에서 서식 지정 정보를 사용 하 여 구문 분석 되는 <xref:System.Globalization.NumberFormatInfo> 현재 시스템 문화권에 따라 초기화 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-614">The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="dba63-615">구문 분석 작업에 대 한 서식 지정 정보를 가져올 사용 되는 문화권을 지정 하려면 호출는 <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-615">To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload.</span></span>  
  
 <span data-ttu-id="dba63-616">일반적으로 전달 하는 경우는 <xref:System.Single.Parse%2A> 메서드를 호출 하 여 만든 문자열에는 <xref:System.Single.ToString%2A> 메서드, 원래 <xref:System.Single> 값이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-616">Ordinarily, if you pass the <xref:System.Single.Parse%2A> method a string that is created by calling the <xref:System.Single.ToString%2A> method, the original <xref:System.Single> value is returned.</span></span> <span data-ttu-id="dba63-617">그러나 정밀도 손실 때문에 값 아니어야 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-617">However, because of a loss of precision, the values may not be equal.</span></span>  
  
 <span data-ttu-id="dba63-618">구분 기호에서 발견 되는 `s` 분석 및 적용 가능한 통화 또는 숫자의 소수 하는 동안 매개 변수 및 그룹 구분 기호가 동일 합니다. 구문 분석 작업의 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-618">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="dba63-619">구분 기호에 대 한 자세한 내용은 참조 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, 및 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-619">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-620">다음 예제에서는 <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> 의 문자열 표현을 구문 분석할 메서드의 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-620">The following example uses the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method to parse the string representations of <xref:System.Single> values.</span></span> <span data-ttu-id="dba63-621">이 예제에서는 EN-US 문화권에 대 한 서식 지정 정보를 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-621">The example uses formatting information for the en-US culture.</span></span>  
  
 [!code-csharp[System.Single.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse2.cs#3)]
 [!code-vb[System.Single.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="dba63-622">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-622">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="dba63-623">
            <paramref name="s" />는 유효한 형식의 숫자가 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-623">
              <paramref name="s" /> is not a number in a valid format.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="dba63-624">
            <paramref name="s" />는 <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-624">
              <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="dba63-625">
            <paramref name="style" />이 <see cref="T:System.Globalization.NumberStyles" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-625">
              <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span>
          </span>
          <span data-ttu-id="dba63-626">-또는-  <paramref name="style" />이 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 값을 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-626">-or-  <paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Single.ToString" />
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; single" Usage="System.single.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="dba63-627">변환할 숫자가 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-627">A string that contains a number to convert.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="dba63-628">
            <c>s</c>에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-628">An object that supplies culture-specific formatting information about <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-629">지정된 문화권별 형식의 숫자에 대한 문자열 표현을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-629">Converts the string representation of a number in a specified culture-specific format to its single-precision floating-point number equivalent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-630">
            <paramref name="s" />에 지정된 숫자 값 또는 기호에 해당하는 단정밀도 부동 소수점 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-630">A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-631">이 오버 로드는 여러 가지 방법으로 서식을 지정할 수 있는 텍스트 변환 데 일반적으로 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-631">This overload is typically used to convert text that can be formatted in a variety of ways to a <xref:System.Single> value.</span></span> <span data-ttu-id="dba63-632">예를 들어 숫자 값으로 HTML 텍스트 상자에 사용자가 입력 한 텍스트 변환에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-632">For example, it can be used to convert the text entered by a user into an HTML text box to a numeric value.</span></span>  
  
 <span data-ttu-id="dba63-633">`s` 매개 변수를 조합 하 여 해석 되는 <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-633">The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="dba63-634">`s` 매개 변수가 포함 될 수 있습니다 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, 또는 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> 로 지정 된 문화권에 대 한 `provider`, 또는 형식의 문자열을 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-634">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> for the culture specified by `provider`, or it can contain a string of the form:</span></span>  
  
 <span data-ttu-id="dba63-635">[*ws*][*sign*]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="dba63-635">[*ws*][*sign*]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="dba63-636">선택적 요소를 대괄호로 묶여 있습니다 ([및]).</span><span class="sxs-lookup"><span data-stu-id="dba63-636">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="dba63-637">"자리" 라는 용어를 포함 하는 요소는 일련의 0에서 9 사이의 숫자 문자로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-637">Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span>  
  
|<span data-ttu-id="dba63-638">요소</span><span class="sxs-lookup"><span data-stu-id="dba63-638">Element</span></span>|<span data-ttu-id="dba63-639">설명</span><span class="sxs-lookup"><span data-stu-id="dba63-639">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="dba63-640">*ws*</span><span class="sxs-lookup"><span data-stu-id="dba63-640">*ws*</span></span>|<span data-ttu-id="dba63-641">일련의 공백 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-641">A series of white-space characters.</span></span>|  
|<span data-ttu-id="dba63-642">*sign*</span><span class="sxs-lookup"><span data-stu-id="dba63-642">*sign*</span></span>|<span data-ttu-id="dba63-643">음수 부호 기호 (-) 또는 더하기 기호 (+) 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-643">A negative sign symbol (-) or a positive sign symbol (+).</span></span>|  
|<span data-ttu-id="dba63-644">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-644">*integral-digits*</span></span>|<span data-ttu-id="dba63-645">일련의 숫자 0에서 하는 9 사이의 숫자의 정수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-645">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="dba63-646">실행 *정수 계열 자릿수* 그룹 구분 기호로 분할할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-646">Runs of *integral-digits* can be partitioned by a group-separator symbol.</span></span> <span data-ttu-id="dba63-647">예를 들어, 일부 문화권 쉼표 (,) 개의 그룹을 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-647">For example, in some cultures a comma (,) separates groups of thousands.</span></span> <span data-ttu-id="dba63-648">*정수 계열 숫자* 요소 문자열일 수 없는 경우에는 포함 되어는 *소수 자릿수* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-648">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="dba63-649">.</span><span class="sxs-lookup"><span data-stu-id="dba63-649">.</span></span>|<span data-ttu-id="dba63-650">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-650">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="dba63-651">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-651">*fractional-digits*</span></span>|<span data-ttu-id="dba63-652">일련의 숫자 0에서 하는 9 사이의 숫자의 소수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-652">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="dba63-653">E</span><span class="sxs-lookup"><span data-stu-id="dba63-653">E</span></span>|<span data-ttu-id="dba63-654">"E" 또는 "E" 문자 값은 지 수 (과학적 표기법) 표기법으로 표현 됨을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-654">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="dba63-655">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-655">*exponential-digits*</span></span>|<span data-ttu-id="dba63-656">일련의 0에서 지 수를 지정 하는 9 사이의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-656">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="dba63-657">숫자 형식에 대 한 자세한 내용은 참조는 [형식 지정](~/docs/standard/base-types/formatting-types.md) 항목입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-657">For more information about numeric formats, see the [Formatting Types](~/docs/standard/base-types/formatting-types.md) topic.</span></span>  
  
 <span data-ttu-id="dba63-658">`provider` 매개 변수는 한 <xref:System.IFormatProvider> 구현 인 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> culture 별 서식 지정 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-658">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information.</span></span> <span data-ttu-id="dba63-659">때는 <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> 메서드가 호출 되 면 호출는 `provider` 매개 변수의 <xref:System.IFormatProvider.GetFormat%2A> 메서드 전달는 <xref:System.Type> 을 나타내는 개체는 <xref:System.Globalization.NumberFormatInfo> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-659">When the <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="dba63-660"><xref:System.IFormatProvider.GetFormat%2A> 다음 메서드는 <xref:System.Globalization.NumberFormatInfo> 개체의 형식에 대 한 정보를 제공 하는 `s` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-660">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `s` parameter.</span></span> <span data-ttu-id="dba63-661">세 가지 방법으로 사용 하 여 `provider` 매개 변수를 구문 분석 작업에 사용자 지정 서식 지정 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-661">There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:</span></span>  
  
-   <span data-ttu-id="dba63-662">전달할 수는 <xref:System.Globalization.CultureInfo> 서식 지정 정보를 제공 하는 문화권을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-662">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="dba63-663">해당 <xref:System.Globalization.CultureInfo.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 해당 culture에 대 한 숫자 형식 지정 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-663">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="dba63-664">실제 전달할 수 있습니다 <xref:System.Globalization.NumberFormatInfo> 숫자 서식 지정 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-664">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="dba63-665">(구현 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 자체를 반환 합니다.)</span><span class="sxs-lookup"><span data-stu-id="dba63-665">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="dba63-666">구현 하는 사용자 지정 개체를 전달할 수 있습니다 <xref:System.IFormatProvider>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-666">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="dba63-667">해당 <xref:System.IFormatProvider.GetFormat%2A> 메서드를 인스턴스화하고 반환 된 <xref:System.Globalization.NumberFormatInfo> 서식 지정 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-667">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="dba63-668">경우 `provider` 은 `null` 또는 <xref:System.Globalization.NumberFormatInfo> 를 가져올 수 없으며 서식 지정 정보는 현재 시스템 문화권이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-668">If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> cannot be obtained, the formatting information for the current system culture is used.</span></span>  
  
 <span data-ttu-id="dba63-669">구분 기호에서 발견 되는 `s` 분석 및 적용 가능한 통화 또는 숫자의 소수 하는 동안 매개 변수 및 그룹 구분 기호가 동일 합니다. 구문 분석 작업의 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-669">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="dba63-670">구분 기호에 대 한 자세한 내용은 참조 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, 및 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-670">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
 <span data-ttu-id="dba63-671">몇 가지 예 `s` 는 "100", "-123456789", "123.45 e + 6", "+" 500, "5e2", "3.1416", "600.", "-. 123" 및 "-Infinity" 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-671">Some examples of `s` are "100", "-123,456,789", "123.45e+6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-672">다음 예제에서는 단추 클릭 Web form의 이벤트 처리기입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-672">The following example is the button click event handler of a Web form.</span></span> <span data-ttu-id="dba63-673">반환 된 배열을 사용 하 여는 <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> 속성을 사용자의 로캘을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-673">It uses the array returned by the <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> property to determine the user's locale.</span></span> <span data-ttu-id="dba63-674">그런 다음는 <xref:System.Globalization.CultureInfo> 해당 로캘에 해당 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-674">It then instantiates a <xref:System.Globalization.CultureInfo> object that corresponds to that locale.</span></span> <span data-ttu-id="dba63-675"><xref:System.Globalization.NumberFormatInfo> 하에 속하는 개체는 <xref:System.Globalization.CultureInfo> 에 다음 전달 된 개체는 <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> 메서드는 사용자 입력을 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-675">The <xref:System.Globalization.NumberFormatInfo> object that belongs to that <xref:System.Globalization.CultureInfo> object is then passed to the <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> method to convert the user's input to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[ParseMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/cs/Default.aspx.cs#1)]
 [!code-vb[ParseMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParseMethod/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="dba63-676">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-676">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="dba63-677">
            <paramref name="s" />가 유효한 형식의 숫자를 나타내지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-677">
              <paramref name="s" /> does not represent a number in a valid format.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="dba63-678">
            <paramref name="s" />가 <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타내는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-678">
              <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Single.ToString" />
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As Single" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; single" Usage="System.single.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; single" Usage="System.single.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="dba63-679">변환할 숫자가 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-679">A string that contains a number to convert.</span>
          </span>
        </param>
        <param name="style">
          <span data-ttu-id="dba63-680">
            <c>s</c>에 나타날 수 있는 스타일 요소를 나타내는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-680">A bitwise combination of enumeration values that indicates the style elements that can be present in <c>s</c>.</span>
          </span>
          <span data-ttu-id="dba63-681">지정할 일반적인 값은 <see cref="F:System.Globalization.NumberStyles.AllowThousands" />와 결합되는 <see cref="F:System.Globalization.NumberStyles.Float" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-681">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="dba63-682">
            <c>s</c>에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-682">An object that supplies culture-specific formatting information about <c>s</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-683">지정된 스타일 및 문화권별 형식으로 된 숫자의 문자열 표현을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-683">Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-684">
            <paramref name="s" />에 지정된 숫자 값 또는 기호에 해당하는 단정밀도 부동 소수점 숫자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-684">A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-685">`style` 스타일 요소를 정의 하는 매개 변수 (공백, 1000 단위와 같은 구분 기호 및 통화 기호)에 허용 되는 `s` 구문 분석 작업이 성공 하려면에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-685">The `style` parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="dba63-686">비트 플래그의 조합 이어야 합니다는 <xref:System.Globalization.NumberStyles> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-686">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="dba63-687">다음 <xref:System.Globalization.NumberStyles> 멤버가 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-687">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 <span data-ttu-id="dba63-688">`s` 매개 변수에 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, 또는 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> 로 지정 된 문화권에 대 한 `provider`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-688">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> for the culture specified by `provider`.</span></span> <span data-ttu-id="dba63-689">값에 따라 `style`, 형태를 취할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-689">Depending on the value of `style`, it can also take the form:</span></span>  
  
 <span data-ttu-id="dba63-690">[*ws*] [*$*] [*sign*][*integral-digits*,]*integral-digits*[.[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="dba63-690">[*ws*] [*$*] [*sign*][*integral-digits*,]*integral-digits*[.[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="dba63-691">대괄호 ([및])는 선택적 요소에 구성 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-691">Elements framed in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="dba63-692">다음 표에서는 각 요소에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-692">The following table describes each element.</span></span>  
  
|<span data-ttu-id="dba63-693">요소</span><span class="sxs-lookup"><span data-stu-id="dba63-693">Element</span></span>|<span data-ttu-id="dba63-694">설명</span><span class="sxs-lookup"><span data-stu-id="dba63-694">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="dba63-695">*ws*</span><span class="sxs-lookup"><span data-stu-id="dba63-695">*ws*</span></span>|<span data-ttu-id="dba63-696">일련의 공백 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-696">A series of white-space characters.</span></span> <span data-ttu-id="dba63-697">맨 앞에 공백이 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 의 끝에 있고, 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-697">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|$|<span data-ttu-id="dba63-698">Culture 별 통화 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-698">A culture-specific currency symbol.</span></span> <span data-ttu-id="dba63-699">문자열에 해당 위치는 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> 현재 문화권의 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-699">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="dba63-700">현재 문화권의 통화 기호에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-700">The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="dba63-701">*sign*</span><span class="sxs-lookup"><span data-stu-id="dba63-701">*sign*</span></span>|<span data-ttu-id="dba63-702">음수 부호 기호 (-) 또는 더하기 기호 (+) 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-702">A negative sign symbol (-) or a positive sign symbol (+).</span></span> <span data-ttu-id="dba63-703">부호의 시작 부분에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 의 끝에 있고, 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-703">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="dba63-704">괄호를 사용할 수 있습니다 `s` 경우 음수 값을 나타내는 데 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-704">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="dba63-705">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-705">*integral-digits*</span></span>|<span data-ttu-id="dba63-706">일련의 숫자 0에서 하는 9 사이의 숫자의 정수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-706">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="dba63-707">*정수 계열 숫자* 요소 문자열일 수 없는 경우에는 포함 되어는 *소수 자릿수* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-707">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="dba63-708">,</span><span class="sxs-lookup"><span data-stu-id="dba63-708">,</span></span>|<span data-ttu-id="dba63-709">Culture 관련 그룹 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-709">A culture-specific group separator.</span></span> <span data-ttu-id="dba63-710">현재 문화권의 그룹 구분 기호에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그</span><span class="sxs-lookup"><span data-stu-id="dba63-710">The current culture's group separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag</span></span>|  
|<span data-ttu-id="dba63-711">.</span><span class="sxs-lookup"><span data-stu-id="dba63-711">.</span></span>|<span data-ttu-id="dba63-712">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-712">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="dba63-713">에 현재 문화권의 소수점 기호가 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-713">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="dba63-714">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-714">*fractional-digits*</span></span>|<span data-ttu-id="dba63-715">일련의 숫자 0에서 하는 9 사이의 숫자의 소수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-715">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="dba63-716">소수 자릿수에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-716">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="dba63-717">E</span><span class="sxs-lookup"><span data-stu-id="dba63-717">E</span></span>|<span data-ttu-id="dba63-718">"E" 또는 "E" 문자 값은 지 수 (과학적 표기법) 표기법으로 표현 됨을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-718">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="dba63-719">`s` 경우 매개 변수 지 수 표기법으로 숫자를 나타낼 수 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-719">The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="dba63-720">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-720">*exponential-digits*</span></span>|<span data-ttu-id="dba63-721">일련의 0에서 지 수를 지정 하는 9 사이의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-721">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="dba63-722">숫자만 문자열 (해당 하는 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 스타일) 항상 성공적으로 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-722">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="dba63-723">나머지 <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> 멤버 있을 수 있지만 입력된 문자열에서 제공 되어야 할 필요는 없습니다 있는 요소를 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-723">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="dba63-724">다음 표에서 개별 <xref:System.Globalization.NumberStyles> 플래그에 있을 수 있는 요소에 영향을 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-724">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="dba63-725">NumberStyles 값</span><span class="sxs-lookup"><span data-stu-id="dba63-725">NumberStyles value</span></span>|<span data-ttu-id="dba63-726">에 허용 되는 요소 `s` 숫자 이외에</span><span class="sxs-lookup"><span data-stu-id="dba63-726">Elements permitted in `s` in addition to digits</span></span>|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="dba63-727">*정수 계열 자릿수* 요소만 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-727">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="dba63-728">소수점 (*.*) 및 *소수 자릿수가* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-728">The decimal point (*.*) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="dba63-729">"E" 또는 "E" 문자 지 수 표기법을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-729">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="dba63-730">단독으로이 플래그는 폼의 값을 지원 *자리*E*자릿수*추가; 양수 또는 음수 부호 및 소수점 기호 등의 요소를 사용 하 여 문자열을 구문 분석 하는 데 필요한 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-730">This flag by itself supports values in the form *digits*E*digits*; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="dba63-731">*ws* 의 시작 부분에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-731">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="dba63-732">*ws* 의 끝에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-732">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="dba63-733">*기호* 의 시작 부분에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-733">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="dba63-734">*기호* 의 끝에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-734">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="dba63-735">*기호* 숫자 값이 들어 괄호 안에 형식 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-735">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="dba63-736">1000 단위 구분 기호 (,) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-736">The thousands separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="dba63-737">통화 ($) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-737">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="dba63-738">모든 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-738">All elements.</span></span> <span data-ttu-id="dba63-739">그러나 `s` 16 진수 또는 숫자를 지 수 표기법으로 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-739">However, `s` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="dba63-740">*ws* 부분이 나 끝 부분에 요소 `s`, *기호* 맨 앞에 `s`, 소수점 (.) 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-740">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="dba63-741">`s` 매개 변수로 지 수 표기법을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-741">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="dba63-742">`ws`, `sign`, 1000 단위 구분 기호 (,) 및 소수점 (.) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-742">The `ws`, `sign`, thousands separator (,) and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="dba63-743">모든 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-743">All elements.</span></span> <span data-ttu-id="dba63-744">그러나 `s` 16 진수를 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-744">However, `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="dba63-745">`provider` 매개 변수는 한 <xref:System.IFormatProvider> 구현 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-745">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="dba63-746">해당 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 의 형식에 대 한 문화권별 정보를 제공 하는 개체 `value`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-746">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="dba63-747">일반적으로 `provider` 다음 중 하나가 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-747">Typically, `provider` can be any one of the following:</span></span>  
  
-   <span data-ttu-id="dba63-748">A <xref:System.Globalization.CultureInfo> 숫자 형식 지정 정보를 제공 하는 문화권을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-748">A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information.</span></span> <span data-ttu-id="dba63-749">해당 <xref:System.Globalization.CultureInfo.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 숫자 서식 지정 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-749">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span>  
  
-   <span data-ttu-id="dba63-750">A <xref:System.Globalization.NumberFormatInfo> 서식 지정 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-750">A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span> <span data-ttu-id="dba63-751">(구현 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 자체를 반환 합니다.)</span><span class="sxs-lookup"><span data-stu-id="dba63-751">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="dba63-752">구현 하는 사용자 지정 개체 <xref:System.IFormatProvider> 사용 하 여는 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 인스턴스화하고 반환 하는 메서드는 <xref:System.Globalization.NumberFormatInfo> 서식 지정 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-752">A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="dba63-753">경우 `provider` 은 `null`, <xref:System.Globalization.NumberFormatInfo> 개체가 현재 문화권이 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-753">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  
  
 <span data-ttu-id="dba63-754">구분 기호에서 발견 되는 `s` 분석 및 적용 가능한 통화 또는 숫자의 소수 하는 동안 매개 변수 및 그룹 구분 기호가 동일 합니다. 구문 분석 작업의 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-754">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="dba63-755">구분 기호에 대 한 자세한 내용은 참조 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, 및 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-755">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-756">다음 코드 예제에서는 <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 의 문자열 표현을 구문 분석할 메서드의 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-756">The following code example uses the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method to parse the string representations of <xref:System.Single> values.</span></span> <span data-ttu-id="dba63-757">배열의 각 문자열은 EN-US, NL-NL 및 사용자 지정 문화권의 서식 지정 규칙을 사용 하 여 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-757">Each string in an array is parsed using the formatting conventions of the en-US, nl-NL, and a custom culture.</span></span> <span data-ttu-id="dba63-758">사용자 지정 문화권 밑줄 ("_") 및 해당 그룹 크기를 2로 해당 그룹 구분 기호를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-758">The custom culture defines its group separator symbol as the underscore ("_") and its group size as two.</span></span>  
  
 [!code-csharp[System.Single.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse3.cs#4)]
 [!code-vb[System.Single.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse3.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="dba63-759">
            <paramref name="s" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-759">
              <paramref name="s" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="dba63-760">
            <paramref name="s" />가 숫자 값을 나타내지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-760">
              <paramref name="s" /> does not represent a numeric value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="dba63-761">
            <paramref name="style" />이 <see cref="T:System.Globalization.NumberStyles" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-761">
              <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span>
          </span>
          <span data-ttu-id="dba63-762">-또는-  <paramref name="style" />이 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-762">-or-  <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="dba63-763">
            <paramref name="s" />는 <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-763">
              <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="C#" Value="public const float PositiveInfinity = Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 PositiveInfinity = float32(Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Single.PositiveInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const PositiveInfinity As Single  = Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: float PositiveInfinity = Infinity;" />
      <MemberSignature Language="F#" Value="val mutable PositiveInfinity : single" Usage="System.single.PositiveInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>Infinity</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="dba63-764">양의 무한대를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-764">Represents positive infinity.</span>
          </span>
          <span data-ttu-id="dba63-765">이 필드는 상수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-765">This field is constant.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-766">이 상수의 값은 양의 숫자를 0으로 나눈 결과입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-766">The value of this constant is the result of dividing a positive number by zero.</span></span>  
  
 <span data-ttu-id="dba63-767">이 상수는 작업의 결과 보다 크면 반환 됩니다 <xref:System.Single.MaxValue>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-767">This constant is returned when the result of an operation is greater than <xref:System.Single.MaxValue>.</span></span>  
  
 <span data-ttu-id="dba63-768">사용 하 여 <xref:System.Single.IsPositiveInfinity%2A> 값이 양의 무한대로 계산 되는지 확인 하려면.</span><span class="sxs-lookup"><span data-stu-id="dba63-768">Use <xref:System.Single.IsPositiveInfinity%2A> to determine whether a value evaluates to positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-769">다음 코드 예제는 <xref:System.Single.PositiveInfinity> 상수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-769">The following code example demonstrates the <xref:System.Single.PositiveInfinity> constant.</span></span>  
  
 [!code-cpp[System.Single#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#10)]
 [!code-csharp[System.Single#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#10)]
 [!code-vb[System.Single#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-770">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-770">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-771">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-771">For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-772">현재 인스턴스의 값이 0이 아니면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-772">
              <see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-773">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="dba63-773">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="dba63-774"><xref:System.Single> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-774">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="dba63-775">메서드 대신 호출 하는 것은 <xref:System.Convert.ToBoolean%28System.Single%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-775">The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-776">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-776">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-777">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-777">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-778">
            <see cref="T:System.Byte" />로 변환된 현재 인스턴스의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-778">The value of the current instance, converted to a <see cref="T:System.Byte" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-779">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="dba63-779">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="dba63-780"><xref:System.Single> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-780">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="dba63-781">메서드 대신 호출 하는 것은 <xref:System.Convert.ToByte%28System.Single%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-781">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-782">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-782">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-783">이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-783">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="dba63-784">이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-784">Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-785">이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-785">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="dba63-786">값이 반환되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-786">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="dba63-787">모든 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-787">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-788">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-788">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-789">이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-789">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="dba63-790">이 메서드를 사용하려고 하면 <see cref="T:System.InvalidCastException" />이 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-790">Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-791">이 변환은 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-791">This conversion is not supported.</span>
          </span>
          <span data-ttu-id="dba63-792">값이 반환되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-792">No value is returned.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="dba63-793">모든 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-793">In all cases.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-794">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-794">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-795">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-795">For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-796">
            <see cref="T:System.Decimal" />로 변환된 현재 인스턴스의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-796">The value of the current instance, converted to a <see cref="T:System.Decimal" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-797">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="dba63-797">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="dba63-798"><xref:System.Single> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-798">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="dba63-799">메서드 대신 호출 하는 것은 <xref:System.Convert.ToDecimal%28System.Single%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-799">The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-800">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-800">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-801">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-801">For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-802">
            <see cref="T:System.Double" />로 변환된 현재 인스턴스의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-802">The value of the current instance, converted to a <see cref="T:System.Double" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-803">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="dba63-803">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="dba63-804"><xref:System.Single> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-804">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="dba63-805">메서드 대신 호출 하는 것은 <xref:System.Convert.ToDouble%28System.Single%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-805">The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-806">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-806">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-807">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-807">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-808">
            <see cref="T:System.Int16" />로 변환된 현재 인스턴스의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-808">The value of the current instance, converted to an <see cref="T:System.Int16" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-809">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="dba63-809">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="dba63-810"><xref:System.Single> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-810">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="dba63-811">메서드 대신 호출 하는 것은 <xref:System.Convert.ToInt16%28System.Single%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-811">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-812">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-812">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-813">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-813">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-814">
            <see cref="T:System.Int32" />로 변환된 현재 인스턴스의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-814">The value of the current instance, converted to an <see cref="T:System.Int32" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-815">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="dba63-815">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="dba63-816"><xref:System.Single> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-816">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="dba63-817">메서드 대신 호출 하는 것은 <xref:System.Convert.ToInt32%28System.Single%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-817">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-818">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-818">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-819">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-819">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-820">
            <see cref="T:System.Int64" />로 변환된 현재 인스턴스의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-820">The value of the current instance, converted to an <see cref="T:System.Int64" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-821">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="dba63-821">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="dba63-822"><xref:System.Single> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-822">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="dba63-823">메서드 대신 호출 하는 것은 <xref:System.Convert.ToInt64%28System.Single%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-823">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-824">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-824">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-825">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-825">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-826">
            <see cref="T:System.SByte" />로 변환된 현재 인스턴스의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-826">The value of the current instance, converted to an <see cref="T:System.SByte" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-827">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="dba63-827">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="dba63-828"><xref:System.Single> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-828">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="dba63-829">메서드 대신 호출 하는 것은 <xref:System.Convert.ToSByte%28System.Single%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-829">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-830">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-830">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-831">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-831">For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-832">변경되지 않은 현재 인스턴스의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-832">The value of the current instance, unchanged.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-833">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="dba63-833">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="dba63-834"><xref:System.Single> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-834">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="dba63-835">이 <see cref="T:System.Single" /> 값을 변환할 대상 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-835">The type to which to convert this <see cref="T:System.Single" /> value.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="dba63-836">반환된 값의 형식에 대한 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-836">An object that supplies information about the format of the returned value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-837">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-837">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-838">
            <paramref name="type" />으로 변환된 현재 인스턴스의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-838">The value of the current instance, converted to <paramref name="type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-839">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="dba63-839">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="dba63-840"><xref:System.Single> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-840">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="dba63-841">메서드 대신 호출 하는 것은 `static` (`Shared` Visual basic에서) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-841">The recommended alternative is to call the `static` (`Shared` in Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-842">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-842">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-843">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-843">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-844">
            <see cref="T:System.UInt16" />로 변환된 현재 인스턴스의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-844">The value of the current instance, converted to a <see cref="T:System.UInt16" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-845">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="dba63-845">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="dba63-846"><xref:System.Single> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-846">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="dba63-847">메서드 대신 호출 하는 것은 <xref:System.Convert.ToUInt16%28System.Single%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-847">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-848">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-848">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-849">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-849">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-850">
            <see cref="T:System.UInt32" />로 변환된 현재 인스턴스의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-850">The value of the current instance, converted to a <see cref="T:System.UInt32" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-851">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="dba63-851">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="dba63-852"><xref:System.Single> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-852">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="dba63-853">메서드 대신 호출 하는 것은 <xref:System.Convert.ToUInt32%28System.Single%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-853">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-854">이 매개 변수는 무시됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-854">This parameter is ignored.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-855">이 멤버에 대한 설명은 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />를 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-855">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-856">
            <see cref="T:System.UInt64" />로 변환된 현재 인스턴스의 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-856">The value of the current instance, converted to a <see cref="T:System.UInt64" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-857">이 멤버는 명시적 인터페이스 멤버 구현이며,</span><span class="sxs-lookup"><span data-stu-id="dba63-857">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="dba63-858"><xref:System.Single> 인스턴스가 <xref:System.IConvertible> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-858">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="dba63-859">메서드 대신 호출 하는 것은 <xref:System.Convert.ToUInt64%28System.Single%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-859">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dba63-860">이 인스턴스의 숫자 값을 해당하는 문자열 표현으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-860">Converts the numeric value of this instance to its equivalent string representation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="single.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="dba63-861">이 인스턴스의 숫자 값을 해당하는 문자열 표현으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-861">Converts the numeric value of this instance to its equivalent string representation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-862">이 인스턴스 값의 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-862">The string representation of the value of this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-863"><xref:System.Single.ToString> 메서드 형식을 <xref:System.Single> 에서 값을 기본값 ("G" 또는 일반)는 현재 문화권의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-863">The <xref:System.Single.ToString> method formats a <xref:System.Single> value in the default ("G", or general) format of the current culture.</span></span> <span data-ttu-id="dba63-864">다른 형식이 나 문화권을 지정 하려는 경우 사용의 다른 오버 로드는 <xref:System.Single.ToString%2A> 다음과 같이 메서드:</span><span class="sxs-lookup"><span data-stu-id="dba63-864">If you want to specify a different format or culture, use the other overloads of the <xref:System.Single.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="dba63-865">형식을 사용 하려면</span><span class="sxs-lookup"><span data-stu-id="dba63-865">To use format</span></span>|<span data-ttu-id="dba63-866">문화권에 대 한</span><span class="sxs-lookup"><span data-stu-id="dba63-866">For culture</span></span>|<span data-ttu-id="dba63-867">오버 로드를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="dba63-867">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="dba63-868">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-868">Default ("G") format</span></span>|<span data-ttu-id="dba63-869">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="dba63-869">A specific culture</span></span>|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="dba63-870">특정 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-870">A specific format</span></span>|<span data-ttu-id="dba63-871">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="dba63-871">Default (current) culture</span></span>|<xref:System.Single.ToString%28System.String%29>|  
|<span data-ttu-id="dba63-872">특정 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-872">A specific format</span></span>|<span data-ttu-id="dba63-873">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="dba63-873">A specific culture</span></span>|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="dba63-874">반환 값일 수 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, 또는 형식의 문자열:</span><span class="sxs-lookup"><span data-stu-id="dba63-874">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:</span></span>  
  
 <span data-ttu-id="dba63-875">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span><span class="sxs-lookup"><span data-stu-id="dba63-875">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span></span>  
  
 <span data-ttu-id="dba63-876">선택적 요소를 대괄호로 묶여 있습니다 ([및]).</span><span class="sxs-lookup"><span data-stu-id="dba63-876">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="dba63-877">"자리" 라는 용어를 포함 하는 요소는 일련의 0에서 9 사이의 숫자 문자로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-877">Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span> <span data-ttu-id="dba63-878">다음 표에서 각 요소를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-878">The following table lists each element:</span></span>  
  
|<span data-ttu-id="dba63-879">요소</span><span class="sxs-lookup"><span data-stu-id="dba63-879">Element</span></span>|<span data-ttu-id="dba63-880">설명</span><span class="sxs-lookup"><span data-stu-id="dba63-880">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="dba63-881">*sign*</span><span class="sxs-lookup"><span data-stu-id="dba63-881">*sign*</span></span>|<span data-ttu-id="dba63-882">음수 부호 또는 양수 부호 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-882">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="dba63-883">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-883">*integral-digits*</span></span>|<span data-ttu-id="dba63-884">일련의 숫자는 숫자의 정수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-884">A series of digits specifying the integral part of the number.</span></span> <span data-ttu-id="dba63-885">정수 계열 자릿수 수 없어야 경우 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-885">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="dba63-886">'.'</span><span class="sxs-lookup"><span data-stu-id="dba63-886">'.'</span></span>|<span data-ttu-id="dba63-887">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-887">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="dba63-888">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-888">*fractional-digits*</span></span>|<span data-ttu-id="dba63-889">일련의 숫자의 소수 부분을 지정 하는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-889">A series of digits specifying the fractional part of the number.</span></span>|  
|<span data-ttu-id="dba63-890">' e'</span><span class="sxs-lookup"><span data-stu-id="dba63-890">'e'</span></span>|<span data-ttu-id="dba63-891">소문자 'e' 지 수 (과학적 표기법) 표기법을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-891">A lowercase character 'e', indicating exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="dba63-892">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-892">*exponential-digits*</span></span>|<span data-ttu-id="dba63-893">일련의 지 수를 지정 하는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-893">A series of digits specifying an exponent.</span></span>|  
  
 <span data-ttu-id="dba63-894">반환 값의 예로 "100", "-123456789", "123.45 e + 6", "500", "3.1416", "600", "-0.123" 및 "-Infinity"입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-894">Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</span></span>  
  
 <span data-ttu-id="dba63-895">.NET Framework에서는 다음 서식 지정 항목에 자세히 설명 하는 광범위 한 서식 지정 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-895">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="dba63-896">숫자 서식 지정자에 대 한 자세한 내용은 참조 [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 및 [사용자 지정 숫자 형식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-896">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="dba63-897">서식 지정 하는 방법에 대 한 자세한 내용은 참조 [형식 지정](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-897">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-898">다음 예제에서는 기본 <xref:System.Single.ToString%2A?displayProperty=nameWithType> 메서드의 숫자의 문자열 표현을 표시를 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-898">The following example uses the default <xref:System.Single.ToString%2A?displayProperty=nameWithType> method to display the string representations of a number of <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Single.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#1)]
 [!code-vb[System.Single.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#1)]  
  
 <span data-ttu-id="dba63-899">다음 코드 예제에서는 <xref:System.Single.Parse%28System.String%29> 메서드와 함께 <xref:System.Single.ToString> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-899">The following code example illustrates the use of the <xref:System.Single.Parse%28System.String%29> method along with the <xref:System.Single.ToString> method.</span></span>  
  
 [!code-cpp[System.Single#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#3)]
 [!code-csharp[System.Single#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#3)]
 [!code-vb[System.Single#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="single.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <span data-ttu-id="dba63-900">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-900">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-901">지정된 문화권별 형식 정보를 사용하여 이 인스턴스의 숫자 값을 해당 문자열 표현으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-901">Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-902">이 인스턴스의 값을 <paramref name="provider" />에 지정된 내용에 따라 나타낸 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-902">The string representation of the value of this instance as specified by <paramref name="provider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-903"><xref:System.Single.ToString%28System.IFormatProvider%29> 메서드 형식을 <xref:System.Single> 에서 값을 기본값 ("G" 또는 일반) 지정된 된 문화권의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-903">The <xref:System.Single.ToString%28System.IFormatProvider%29> method formats a <xref:System.Single> value in the default ("G", or general) format of a specified culture.</span></span> <span data-ttu-id="dba63-904">다른 형식이 나 현재 문화권을 지정 하려는 경우 사용의 다른 오버 로드는 <xref:System.Single.ToString%2A> 다음과 같이 메서드:</span><span class="sxs-lookup"><span data-stu-id="dba63-904">If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Single.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="dba63-905">형식을 사용 하려면</span><span class="sxs-lookup"><span data-stu-id="dba63-905">To use format</span></span>|<span data-ttu-id="dba63-906">문화권에 대 한</span><span class="sxs-lookup"><span data-stu-id="dba63-906">For culture</span></span>|<span data-ttu-id="dba63-907">오버 로드를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="dba63-907">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="dba63-908">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-908">Default ("G") format</span></span>|<span data-ttu-id="dba63-909">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="dba63-909">Default (current) culture</span></span>|<xref:System.Single.ToString>|  
|<span data-ttu-id="dba63-910">특정 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-910">A specific format</span></span>|<span data-ttu-id="dba63-911">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="dba63-911">Default (current) culture</span></span>|<xref:System.Single.ToString%28System.String%29>|  
|<span data-ttu-id="dba63-912">특정 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-912">A specific format</span></span>|<span data-ttu-id="dba63-913">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="dba63-913">A specific culture</span></span>|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="dba63-914">반환 값일 수 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, 또는 형식의 문자열:</span><span class="sxs-lookup"><span data-stu-id="dba63-914">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:</span></span>  
  
 <span data-ttu-id="dba63-915">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span><span class="sxs-lookup"><span data-stu-id="dba63-915">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span></span>  
  
 <span data-ttu-id="dba63-916">선택적 요소를 대괄호로 묶여 있습니다 ([및]).</span><span class="sxs-lookup"><span data-stu-id="dba63-916">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="dba63-917">포함 하는 용어 "숫자" 요소는 일련의 0에서 9 사이의 숫자 문자로 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-917">Elements containing the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span> <span data-ttu-id="dba63-918">다음 표에서 각 요소를 나열합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-918">The following table lists each element.</span></span>  
  
|<span data-ttu-id="dba63-919">요소</span><span class="sxs-lookup"><span data-stu-id="dba63-919">Element</span></span>|<span data-ttu-id="dba63-920">설명</span><span class="sxs-lookup"><span data-stu-id="dba63-920">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="dba63-921">sign</span><span class="sxs-lookup"><span data-stu-id="dba63-921">sign</span></span>|<span data-ttu-id="dba63-922">음수 부호 또는 양수 부호 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-922">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="dba63-923">integral-digits</span><span class="sxs-lookup"><span data-stu-id="dba63-923">integral-digits</span></span>|<span data-ttu-id="dba63-924">일련의 숫자는 숫자의 정수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-924">A series of digits specifying the integral part of the number.</span></span> <span data-ttu-id="dba63-925">정수 계열 자릿수 수 없어야 경우 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-925">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="dba63-926">'.'</span><span class="sxs-lookup"><span data-stu-id="dba63-926">'.'</span></span>|<span data-ttu-id="dba63-927">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-927">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="dba63-928">소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-928">fractional-digits</span></span>|<span data-ttu-id="dba63-929">일련의 숫자의 소수 부분을 지정 하는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-929">A series of digits specifying the fractional part of the number.</span></span>|  
|<span data-ttu-id="dba63-930">' e'</span><span class="sxs-lookup"><span data-stu-id="dba63-930">'e'</span></span>|<span data-ttu-id="dba63-931">소문자 'e' 지 수 (과학적 표기법) 표기법을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-931">A lowercase character 'e', indicating exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="dba63-932">자리 지 수</span><span class="sxs-lookup"><span data-stu-id="dba63-932">exponential-digits</span></span>|<span data-ttu-id="dba63-933">일련의 지 수를 지정 하는 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-933">A series of digits specifying an exponent.</span></span>|  
  
 <span data-ttu-id="dba63-934">반환 값의 예로 "100", "-123456789", "123.45 e + 6", "500", "3.1416", "600", "-0.123" 및 "-Infinity"입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-934">Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</span></span>  
  
 <span data-ttu-id="dba63-935">.NET Framework에서는 다음 서식 지정 항목에 자세히 설명 하는 광범위 한 서식 지정 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-935">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="dba63-936">숫자 서식 지정자에 대 한 자세한 내용은 참조 [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 및 [사용자 지정 숫자 형식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-936">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="dba63-937">서식 지정 하는 방법에 대 한 자세한 내용은 참조 [형식 지정](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-937">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="dba63-938">`provider` 매개 변수는 한 <xref:System.IFormatProvider> 구현 인 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-938">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="dba63-939">일반적으로 `provider` 는 <xref:System.Globalization.CultureInfo> 개체 또는 <xref:System.Globalization.NumberFormatInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-939">Typically, `provider` is a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="dba63-940">`provider` 매개 변수에서 서식 지정에 사용 되는 문화권별 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-940">The `provider` parameter supplies culture-specific information used in formatting.</span></span> <span data-ttu-id="dba63-941">경우 `provider` 은 `null`를 사용 하 여 반환 값의 형식이 <xref:System.Globalization.NumberFormatInfo> 현재 문화권에 대 한 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-941">If `provider` is `null`, the return value is formatted using the <xref:System.Globalization.NumberFormatInfo> data for the current culture.</span></span>  
  
 <span data-ttu-id="dba63-942">변환 하는 <xref:System.Single> 값을 지정 된 문화권 및 호출 하는 특정 형식 문자열을 사용 하 여 해당 문자열 표현에서 <xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-942">To convert a <xref:System.Single> value to its string representation using a specified culture and a specific format string, call the <xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-943">다음 예제에서는 두 개의 문자열 표현을 표시 <xref:System.Single> 사용 하 여 값 <xref:System.Globalization.CultureInfo> 서로 다른 문화권을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-943">The following example displays the string representation of two <xref:System.Single> values using <xref:System.Globalization.CultureInfo> objects that represent several different cultures.</span></span>  
  
 [!code-csharp[System.Single.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#2)]
 [!code-vb[System.Single.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="single.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="dba63-944">숫자 서식 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-944">A numeric format string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-945">지정된 형식을 사용하여 이 인스턴스의 숫자 값을 해당 문자열 표현으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-945">Converts the numeric value of this instance to its equivalent string representation, using the specified format.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-946">이 인스턴스의 값을 <paramref name="format" />에 지정된 내용에 따라 나타낸 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-946">The string representation of the value of this instance as specified by <paramref name="format" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-947"><xref:System.Single.ToString%28System.String%29> 메서드 형식을 <xref:System.Single> 현재 문화권의 규칙을 사용 하 여 지정 된 형식에서 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-947">The <xref:System.Single.ToString%28System.String%29> method formats a <xref:System.Single> value in a specified format by using the conventions of the current culture.</span></span> <span data-ttu-id="dba63-948">기본값 ("G" 또는 일반)을 사용 하려는 경우 다른 문화권이 지정, 다른 오버 로드를 사용 하거나 형식는 <xref:System.Single.ToString%2A> 다음과 같이 메서드:</span><span class="sxs-lookup"><span data-stu-id="dba63-948">If you want to use the default ("G", or general) format or specify a different culture, use the other overloads of the <xref:System.Single.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="dba63-949">형식을 사용 하려면</span><span class="sxs-lookup"><span data-stu-id="dba63-949">To use format</span></span>|<span data-ttu-id="dba63-950">문화권에 대 한</span><span class="sxs-lookup"><span data-stu-id="dba63-950">For culture</span></span>|<span data-ttu-id="dba63-951">오버 로드를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="dba63-951">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="dba63-952">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-952">Default ("G") format</span></span>|<span data-ttu-id="dba63-953">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="dba63-953">Default (current) culture</span></span>|<xref:System.Single.ToString>|  
|<span data-ttu-id="dba63-954">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-954">Default ("G") format</span></span>|<span data-ttu-id="dba63-955">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="dba63-955">A specific culture</span></span>|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="dba63-956">특정 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-956">A specific format</span></span>|<span data-ttu-id="dba63-957">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="dba63-957">A specific culture</span></span>|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="dba63-958">반환 값일 수 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, 또는로 지정 된 현재 인스턴스의 값의 문자열 표현을 `format`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-958">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or the string representation of the value of the current instance, as specified by `format`.</span></span>  
  
 <span data-ttu-id="dba63-959">`format` 매개 변수는 D 및 X를 제외한 모든 유효한 표준 숫자 서식 지정자 및 사용자 지정 숫자 서식 지정자의 조합이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-959">The `format` parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="dba63-960">형식이 `null` 이거나 빈 문자열이 면 반환 값 ("G")는 일반 숫자 형식 지정자와 함께 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-960">If format is `null` or an empty string, the return value is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="dba63-961">.NET Framework에서는 다음 서식 지정 항목에 자세히 설명 하는 광범위 한 서식 지정 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-961">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="dba63-962">숫자 서식 지정자에 대 한 자세한 내용은 참조 [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 및 [사용자 지정 숫자 형식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-962">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="dba63-963">서식 지정 하는 방법에 대 한 자세한 내용은 참조 [형식 지정](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-963">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="dba63-964">기본적으로 반환 값만 포함 7 자리의 전체 자릿수 최대 9 자리 내부적으로 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-964">By default, the return value only contains 7 digits of precision although a maximum of 9 digits is maintained internally.</span></span> <span data-ttu-id="dba63-965">이 인스턴스의 값이 7 자리 보다 큰 경우 <xref:System.Single.ToString%28System.String%29> 반환 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> 또는 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> 를 초과 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-965">If the value of this instance has greater than 7 digits, <xref:System.Single.ToString%28System.String%29> returns <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> instead of the expected number.</span></span> <span data-ttu-id="dba63-966">정교한 정밀도 필요로 하는 경우 지정 `format` 는 항상 반환 9 자리의 전체 자릿수 또는 "R", "G9" 형식 지정 반환 하는 7 자리 숫자를 해당 정밀도 또는 9 자리 표현할 수만 나타낼 수 있는 경우 최대 전체 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-966">If you require more precision, specify `format` with the "G9" format specification, which always returns 9 digits of precision, or "R", which returns 7 digits if the number can be represented with that precision or 9 digits if the number can only be represented with maximum precision.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-967">다음 예제에서는 숫자 값을 정의 찾아서을 통화 값으로 "C" 표준 숫자 서식 문자열을 사용 하 여과 세 개의 소수 자릿수 숫자 값으로 "N" 표준 숫자 형식 문자열을 사용 하 여입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-967">The following example defines a numeric value and formats it as a currency value by using the "C" standard numeric format string and as a numeric value to three decimal places by using the "N" standard numeric format string.</span></span> <span data-ttu-id="dba63-968">결과 문자열은 EN-US 문화권의 규칙을 사용 하 여 형식이 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-968">The result strings are formatted by using the conventions of the en-US culture.</span></span> <span data-ttu-id="dba63-969">숫자 형식 문자열에 대 한 자세한 내용은 참조 하십시오. [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 및 [사용자 지정 숫자 형식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-969">For more information on numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
 [!code-csharp[System.Single.ToString#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString7.cs#7)]
 [!code-vb[System.Single.ToString#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString7.vb#7)]  
  
 <span data-ttu-id="dba63-970">다음 예제에서는 여러 <xref:System.Single> 각 지원 되는 표준 숫자 서식 지정자와 두 개의 사용자 지정 숫자 형식 문자열을 함께 사용 하 여 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-970">The following example displays several <xref:System.Single> values using each of the supported standard numeric format specifiers together with two custom numeric format strings.</span></span> <span data-ttu-id="dba63-971">패딩 하는 방법을 보여 줍니다 이러한 사용자 지정 형식 문자열 중 하나는 <xref:System.Single> 값 앞에 오는 0입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-971">One of those custom format strings illustrates how to pad a <xref:System.Single> value with leading zeros.</span></span> <span data-ttu-id="dba63-972">숫자 값을 문자열로 변환,이 예제에서는 EN-US 문화권의 형식 규칙을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-972">In converting the numeric values to strings, the example uses the formatting conventions of the en-US culture.</span></span>  
  
 [!code-csharp[System.Single.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#3)]
 [!code-vb[System.Single.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="dba63-973">
            <paramref name="format" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-973">
              <paramref name="format" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="single.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="dba63-974">숫자 서식 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-974">A numeric format string.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="dba63-975">문화권별 서식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-975">An object that supplies culture-specific formatting information.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-976">지정된 형식 및 문화권별 형식 정보를 사용하여 이 인스턴스의 숫자 값을 해당 문자열 표현으로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-976">Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-977">
            <paramref name="format" /> 및 <paramref name="provider" />로 지정된 이 인스턴스 값의 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-977">The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-978"><xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29> 메서드 형식을 <xref:System.Single> 지정된 된 문화권의 지정 된 형식에서 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-978">The <xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Single> value in a specified format of a specified culture.</span></span> <span data-ttu-id="dba63-979">다른 오버 로드를 사용 하 여 기본 형식 또는 문화권 설정을 사용 하려는 경우는 <xref:System.Single.ToString%2A> 다음과 같이 메서드:</span><span class="sxs-lookup"><span data-stu-id="dba63-979">If you want to use default format or culture settings, use the other overloads of the <xref:System.Single.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="dba63-980">형식을 사용 하려면</span><span class="sxs-lookup"><span data-stu-id="dba63-980">To use format</span></span>|<span data-ttu-id="dba63-981">문화권에 대 한</span><span class="sxs-lookup"><span data-stu-id="dba63-981">For culture</span></span>|<span data-ttu-id="dba63-982">오버 로드를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="dba63-982">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="dba63-983">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-983">Default ("G") format</span></span>|<span data-ttu-id="dba63-984">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="dba63-984">Default (current) culture</span></span>|<xref:System.Single.ToString>|  
|<span data-ttu-id="dba63-985">기본 ("G") 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-985">Default ("G") format</span></span>|<span data-ttu-id="dba63-986">특정 문화권</span><span class="sxs-lookup"><span data-stu-id="dba63-986">A specific culture</span></span>|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="dba63-987">특정 형식</span><span class="sxs-lookup"><span data-stu-id="dba63-987">A specific format</span></span>|<span data-ttu-id="dba63-988">기본 (현재) 문화권</span><span class="sxs-lookup"><span data-stu-id="dba63-988">Default (current) culture</span></span>|<xref:System.Single.ToString%28System.String%29>|  
  
 <span data-ttu-id="dba63-989">반환 값일 수 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, 또는로 지정 된 현재 인스턴스의 값의 문자열 표현을 `format`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-989">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or the string representation of the value of the current instance, as specified by `format`.</span></span>  
  
 <span data-ttu-id="dba63-990">`format` 매개 변수는 D 및 X를 제외한 모든 유효한 표준 숫자 서식 지정자 및 사용자 지정 숫자 서식 지정자의 조합이 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-990">The `format` parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="dba63-991">경우 `format` 은 `null` 이거나 빈 문자열을이 인스턴스에 대 한 반환 값 ("G")는 일반 숫자 형식 지정자와 함께 지정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-991">If `format` is `null` or an empty string, the return value for this instance is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="dba63-992">.NET Framework에서는 다음 서식 지정 항목에 자세히 설명 하는 광범위 한 서식 지정 지원을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-992">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="dba63-993">숫자 서식 지정자에 대 한 자세한 내용은 참조 [표준 숫자 형식 문자열](~/docs/standard/base-types/standard-numeric-format-strings.md) 및 [사용자 지정 숫자 형식 문자열](~/docs/standard/base-types/custom-numeric-format-strings.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-993">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="dba63-994">서식 지정 하는 방법에 대 한 자세한 내용은 참조 [형식 지정](~/docs/standard/base-types/formatting-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-994">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="dba63-995">`provider` 매개 변수는 한 <xref:System.IFormatProvider> 구현 인 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-995">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="dba63-996">일반적으로 `provider` 는 <xref:System.Globalization.CultureInfo> 개체 또는 <xref:System.Globalization.NumberFormatInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-996">Typically, `provider` is a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="dba63-997">`provider` 매개 변수에서 서식 지정에 사용 되는 문화권별 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-997">The `provider` parameter supplies culture-specific information used in formatting.</span></span> <span data-ttu-id="dba63-998">경우 `provider` 은 `null`, 반환 값으로 지정 됩니다는 <xref:System.Globalization.NumberFormatInfo> 현재 문화권에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-998">If `provider` is `null`, the return value is formatted with the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
 <span data-ttu-id="dba63-999">기본적으로 반환 값만 포함 7 자리의 전체 자릿수 최대 9 자리 내부적으로 유지 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-999">By default, the return value only contains 7 digits of precision although a maximum of 9 digits is maintained internally.</span></span> <span data-ttu-id="dba63-1000">이 인스턴스의 값이 7 자리 보다 큰 경우 <xref:System.Single.ToString%2A> 반환 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> 또는 <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> 를 초과 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1000">If the value of this instance has greater than 7 digits, <xref:System.Single.ToString%2A> returns <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> instead of the expected number.</span></span> <span data-ttu-id="dba63-1001">정교한 정밀도 필요로 하는 경우 지정 `format` 는 항상 반환 9 자리의 전체 자릿수 또는 "R", "G9" 형식 지정 반환 하는 7 자리 숫자를 해당 정밀도 또는 9 자리 표현할 수만 나타낼 수 있는 경우 최대 전체 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1001">If you require more precision, specify `format` with the "G9" format specification, which always returns 9 digits of precision, or "R", which returns 7 digits if the number can be represented with that precision or 9 digits if the number can only be represented with maximum precision.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-1002">다음 예제에서는 표시 된 <xref:System.Single> 각 지원 되는 표준 숫자 서식 지정자를 사용 하 여 다양 한 문화권에 대 한 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1002">The following example displays a <xref:System.Single> value using each of the supported standard numeric format specifiers for several different cultures.</span></span>  
  
 [!code-csharp[System.Single.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#4)]
 [!code-vb[System.Single.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; *  * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="single.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" />
        <Parameter Name="charsWritten" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="charsWritten">To be added.</param>
        <param name="format">To be added.</param>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="dba63-1003">숫자의 문자열 표현을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1003">Converts the string representation of a number to its single-precision floating-point number equivalent.</span>
          </span>
          <span data-ttu-id="dba63-1004">반환 값은 변환이 성공했는지 아니면 실패했는지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1004">A return value indicates whether the conversion succeeded or failed.</span>
          </span>
        </summary>
        <altmember cref="Overload:System.Single.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] float % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; *  -&gt; bool" Usage="System.single.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.String,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] float % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.single.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="dba63-1005">변환할 숫자를 나타내는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1005">A string representing a number to convert.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="dba63-1006">이 메서드는 변환이 성공한 경우 <c>s</c>에 포함된 숫자 값이나 기호에 해당하는 단정밀도 부동 소수점 숫자를 반환하며 변환이 실패한 경우 0을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1006">When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in <c>s</c>, if the conversion succeeded, or zero if the conversion failed.</span>
          </span>
          <span data-ttu-id="dba63-1007">
            <c>s</c> 매개 변수가 <see langword="null" /> 또는 <see cref="F:System.String.Empty" />이거나 올바른 형식의 숫자가 아니거나, <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타내는 경우 변환이 실패합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1007">The conversion fails if the <c>s</c> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not a number in a valid format, or represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span>
          </span>
          <span data-ttu-id="dba63-1008">이 매개 변수는 초기화되지 않은 상태로 전달됩니다. 원래 <c>result</c>에 제공된 모든 값을 덮어쓰게 됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1008">This parameter is passed uninitialized; any value originally supplied in <c>result</c> will be overwritten.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-1009">숫자의 문자열 표현을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1009">Converts the string representation of a number to its single-precision floating-point number equivalent.</span>
          </span>
          <span data-ttu-id="dba63-1010">반환 값은 변환이 성공했는지 아니면 실패했는지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1010">A return value indicates whether the conversion succeeded or failed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-1011">
            <see langword="true" />가 성공적으로 변환되었으면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1011">
              <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-1012">와 다른이 오버 로드는 <xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType> 메서드 구문 분석 된 숫자 값을 반환 하는 대신 구문 분석 작업이 성공 했는지를 나타내는 부울 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1012">This overload differs from the <xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value.</span></span> <span data-ttu-id="dba63-1013">테스트 하기 위해 예외 처리를 사용할 필요가 <xref:System.FormatException> 에 `s` 잘못 되었으며 성공적으로 구문 분석할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1013">It eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="dba63-1014">`s` 매개 변수에 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> (문자열 비교는 대/소문자 구분) 또는 형식의 문자열:</span><span class="sxs-lookup"><span data-stu-id="dba63-1014">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> (the string comparison is case-sensitive), or a string of the form:</span></span>  
  
 <span data-ttu-id="dba63-1015">[ws][sign][integral-digits,]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</span><span class="sxs-lookup"><span data-stu-id="dba63-1015">[ws][sign][integral-digits,]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</span></span>  
  
 <span data-ttu-id="dba63-1016">대괄호 안의 요소는 선택 사항입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1016">Elements in square brackets are optional.</span></span> <span data-ttu-id="dba63-1017">다음 표에서는 각 요소에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1017">The following table describes each element.</span></span>  
  
|<span data-ttu-id="dba63-1018">요소</span><span class="sxs-lookup"><span data-stu-id="dba63-1018">Element</span></span>|<span data-ttu-id="dba63-1019">설명</span><span class="sxs-lookup"><span data-stu-id="dba63-1019">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="dba63-1020">*ws*</span><span class="sxs-lookup"><span data-stu-id="dba63-1020">*ws*</span></span>|<span data-ttu-id="dba63-1021">일련의 공백 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1021">A series of white-space characters.</span></span>|  
|<span data-ttu-id="dba63-1022">*sign*</span><span class="sxs-lookup"><span data-stu-id="dba63-1022">*sign*</span></span>|<span data-ttu-id="dba63-1023">음수 부호 또는 양수 부호 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1023">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="dba63-1024">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-1024">*integral-digits*</span></span>|<span data-ttu-id="dba63-1025">일련의 숫자 0에서 하는 9 사이의 숫자의 정수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1025">A series of numeric characters ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="dba63-1026">정수 계열 자릿수 수 없어야 경우 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1026">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="dba63-1027">*,*</span><span class="sxs-lookup"><span data-stu-id="dba63-1027">*,*</span></span>|<span data-ttu-id="dba63-1028">Culture 관련 그룹 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1028">A culture-specific group separator symbol.</span></span>|  
|<span data-ttu-id="dba63-1029">*.*</span><span class="sxs-lookup"><span data-stu-id="dba63-1029">*.*</span></span>|<span data-ttu-id="dba63-1030">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1030">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="dba63-1031">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-1031">*fractional-digits*</span></span>|<span data-ttu-id="dba63-1032">일련의 숫자 0에서 하는 9 사이의 숫자의 소수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1032">A series of numeric characters ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="dba63-1033">*E*</span><span class="sxs-lookup"><span data-stu-id="dba63-1033">*E*</span></span>|<span data-ttu-id="dba63-1034">대 / 소문자 구분 문자 'e' 지 수 (과학적 표기법) 표기법을 나타내는입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1034">An uppercase or lowercase character 'e', that indicates exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="dba63-1035">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-1035">*exponential-digits*</span></span>|<span data-ttu-id="dba63-1036">일련의 숫자 0에서 하는 9 사이의 지 수를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1036">A series of numeric characters ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="dba63-1037">`s` 매개 변수를 조합 하 여 해석 되는 <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> 및 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1037">The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="dba63-1038">즉, 공백과 천 단위 구분 기호는 사용할 수 있지만 통화 기호를 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1038">This means that white space and thousands separators are allowed but currency symbols are not.</span></span> <span data-ttu-id="dba63-1039">요소를 명시적으로 정의 하려면 (통화 기호, 1000 단위와 같은 구분 기호 및 공백)에 나타날 수 있는 `s`를 사용 하 여는 <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1039">To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in `s`, use the <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> method overload.</span></span>  
  
 <span data-ttu-id="dba63-1040">`s` 매개 변수에서 서식 지정 정보를 사용 하 여 구문 분석 되는 <xref:System.Globalization.NumberFormatInfo> 현재 시스템 문화권에 따라 초기화 된 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1040">The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="dba63-1041">자세한 내용은 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="dba63-1041">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="dba63-1042">구문 분석 하려면 문화권 지정 다른 서식 지정 정보를 사용 하 여, 사용 된 <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1042">To parse a string using the formatting information of some other specified culture, use the <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> method overload.</span></span>  
  
 <span data-ttu-id="dba63-1043">일반적으로 전달 하는 경우는 <xref:System.Single.TryParse%2A?displayProperty=nameWithType> 메서드를 호출 하 여 만든 문자열에는 <xref:System.Single.ToString%2A?displayProperty=nameWithType> 메서드, 원래 <xref:System.Single> 값이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1043">Ordinarily, if you pass the <xref:System.Single.TryParse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Single.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Single> value is returned.</span></span> <span data-ttu-id="dba63-1044">그러나 정밀도 손실 때문에 값 아니어야 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1044">However, because of a loss of precision, the values may not be equal.</span></span>  
  
 <span data-ttu-id="dba63-1045">구분 기호에서 발견 되는 `s` 분석 및 적용 가능한 통화 또는 숫자의 소수 하는 동안 매개 변수 및 그룹 구분 기호가 동일 합니다. 구문 분석 작업의 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1045">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="dba63-1046">구분 기호에 대 한 자세한 내용은 참조 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, 및 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1046">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-1047">다음 예제에서는 <xref:System.Single.TryParse%28System.String%2CSystem.Single%40%29> 숫자 값의 문자열 표현을 상호 변환 하는 메서드 <xref:System.Single> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1047">The following example uses the <xref:System.Single.TryParse%28System.String%2CSystem.Single%40%29> method to convert the string representations of numeric values to <xref:System.Single> values.</span></span> <span data-ttu-id="dba63-1048">해당 EN-US가 현재 문화권이 가정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1048">It assumes that en-US is the current culture.</span></span>  
  
 [!code-csharp[System.Single.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Single.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider provider, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] float % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.single.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <param name="style">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] float % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider *  -&gt; bool" Usage="System.single.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.Single&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">
          <span data-ttu-id="dba63-1049">변환할 숫자를 나타내는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1049">A string representing a number to convert.</span>
          </span>
        </param>
        <param name="style">
          <span data-ttu-id="dba63-1050">
            <c>s</c>에 사용할 수 있는 형식을 나타내는 열거형 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1050">A bitwise combination of enumeration values that indicates the permitted format of <c>s</c>.</span>
          </span>
          <span data-ttu-id="dba63-1051">지정할 일반적인 값은 <see cref="F:System.Globalization.NumberStyles.AllowThousands" />와 결합되는 <see cref="F:System.Globalization.NumberStyles.Float" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1051">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span>
          </span>
        </param>
        <param name="provider">
          <span data-ttu-id="dba63-1052">
            <c>s</c>에 대한 문화권별 형식 지정 정보를 제공하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1052">An object that supplies culture-specific formatting information about <c>s</c>.</span>
          </span>
        </param>
        <param name="result">
          <span data-ttu-id="dba63-1053">이 메서드는 변환이 성공한 경우 <c>s</c>에 포함된 숫자 값이나 기호에 해당하는 단정밀도 부동 소수점 숫자를 반환하며 변환이 실패한 경우 0을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1053">When this method returns, contains the single-precision floating-point number equivalent to the numeric value or symbol contained in <c>s</c>, if the conversion succeeded, or zero if the conversion failed.</span>
          </span>
          <span data-ttu-id="dba63-1054">
            <c>s</c> 매개 변수가 <see langword="null" /> 또는 <see cref="F:System.String.Empty" />이거나, <c>스타일</c>과 규격 형식이 아니거나, <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타내거나, <c>스타일</c>이 <see cref="T:System.Globalization.NumberStyles" /> 열거형 상수의 유효한 조합이 아닌 경우 변환이 실패합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1054">The conversion fails if the <c>s</c> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <c>style</c>, represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />, or if <c>style</c> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants.</span>
          </span>
          <span data-ttu-id="dba63-1055">이 매개 변수는 초기화되지 않은 상태로 전달됩니다. 원래 <c>result</c>에 제공된 모든 값을 덮어쓰게 됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1055">This parameter is passed uninitialized; any value originally supplied in <c>result</c> will be overwritten.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dba63-1056">지정된 스타일 및 문화권별 형식으로 된 숫자의 문자열 표현을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1056">Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</span>
          </span>
          <span data-ttu-id="dba63-1057">반환 값은 변환이 성공했는지 아니면 실패했는지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1057">A return value indicates whether the conversion succeeded or failed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dba63-1058">
            <see langword="true" />가 성공적으로 변환되었으면 <paramref name="s" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1058">
              <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dba63-1059">와 다른이 오버 로드는 <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> 메서드 구문 분석 된 숫자 값을 반환 하는 대신 구문 분석 작업이 성공 했는지를 나타내는 부울 값을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1059">This overload differs from the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value.</span></span> <span data-ttu-id="dba63-1060">테스트 하기 위해 예외 처리를 사용할 필요가 <xref:System.FormatException> 에 `s` 잘못 되었으며 성공적으로 구문 분석할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1060">It eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="dba63-1061">`style` 매개 변수를 허용 되는 형식을 정의 `s` 구문 분석 작업이 성공 하려면에 대 한 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1061">The `style` parameter defines the allowable format of the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="dba63-1062">비트 플래그의 조합 이어야 합니다는 <xref:System.Globalization.NumberStyles> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1062">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="dba63-1063">다음 <xref:System.Globalization.NumberStyles> 멤버가 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1063">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>  
  
 <span data-ttu-id="dba63-1064">`s` 매개 변수에 <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> 하 여 지정 된 문화권에 대 한 `provider`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1064">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> for the culture indicated by `provider`.</span></span> <span data-ttu-id="dba63-1065">값에 따라 또한 `style`, `s` 매개 변수는 다음과 같은 요소가 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1065">In addition, depending on the value of `style`, the `s` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="dba63-1066">[ws] [$] [sign][integral-digits,]integral-digits[.fractional-digits][e[sign]exponential-digits][ws]</span><span class="sxs-lookup"><span data-stu-id="dba63-1066">[ws] [$] [sign][integral-digits,]integral-digits[.fractional-digits][e[sign]exponential-digits][ws]</span></span>  
  
 <span data-ttu-id="dba63-1067">대괄호 ([ 및 ]) 안의 요소는 선택적 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1067">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="dba63-1068">다음 표에서는 각 요소에 대해 설명합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1068">The following table describes each element.</span></span>  
  
|<span data-ttu-id="dba63-1069">요소</span><span class="sxs-lookup"><span data-stu-id="dba63-1069">Element</span></span>|<span data-ttu-id="dba63-1070">설명</span><span class="sxs-lookup"><span data-stu-id="dba63-1070">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="dba63-1071">*ws*</span><span class="sxs-lookup"><span data-stu-id="dba63-1071">*ws*</span></span>|<span data-ttu-id="dba63-1072">선택적 공백입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1072">Optional white space.</span></span> <span data-ttu-id="dba63-1073">맨 앞에 공백이 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1073">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="dba63-1074">끝에 나 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1074">It can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="dba63-1075">Culture 별 통화 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1075">A culture-specific currency symbol.</span></span> <span data-ttu-id="dba63-1076">위치는 문자열에 의해 정의 됩니다는 <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> 또는 <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> 의 속성은 <xref:System.Globalization.NumberFormatInfo> 에서 반환 된 개체는 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 의 메서드는 `provider` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1076">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> or <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method of the `provider` parameter.</span></span> <span data-ttu-id="dba63-1077">통화 기호에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1077">The currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="dba63-1078">*sign*</span><span class="sxs-lookup"><span data-stu-id="dba63-1078">*sign*</span></span>|<span data-ttu-id="dba63-1079">가 선택적 부호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1079">An optional sign.</span></span> <span data-ttu-id="dba63-1080">부호의 시작 부분에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> 의 끝에 있고, 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1080">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="dba63-1081">괄호를 사용할 수 있습니다 `s` 경우 음수 값을 나타내는 데 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1081">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="dba63-1082">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-1082">*integral-digits*</span></span>|<span data-ttu-id="dba63-1083">일련의 숫자 0에서 하는 9 사이의 숫자의 정수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1083">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="dba63-1084">정수 계열 자릿수 수 없어야 경우 소수 자릿수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1084">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="dba63-1085">*,*</span><span class="sxs-lookup"><span data-stu-id="dba63-1085">*,*</span></span>|<span data-ttu-id="dba63-1086">Culture 별 1000 단위 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1086">A culture-specific thousands separator symbol.</span></span> <span data-ttu-id="dba63-1087">현재 문화권의 천 단위 구분 기호에 나타날 수 있습니다 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1087">The current culture's thousands separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="dba63-1088">*.*</span><span class="sxs-lookup"><span data-stu-id="dba63-1088">*.*</span></span>|<span data-ttu-id="dba63-1089">Culture 별 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1089">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="dba63-1090">에 현재 문화권의 소수점 기호가 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1090">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="dba63-1091">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-1091">*fractional-digits*</span></span>|<span data-ttu-id="dba63-1092">일련의 숫자 0에서 하는 9 사이의 숫자의 소수 부분을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1092">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="dba63-1093">소수 자릿수에 나타날 수 `s` 경우 `style` 포함는 <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1093">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="dba63-1094">*e*</span><span class="sxs-lookup"><span data-stu-id="dba63-1094">*e*</span></span>|<span data-ttu-id="dba63-1095">E 또는 E 문자 임을 나타내는 `s` 지 수 표기법을 사용 하 여 숫자를 표시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1095">The e or E character, which indicates that `s` can represent a number using exponential notation.</span></span> <span data-ttu-id="dba63-1096">`s` 매개 변수 스타일을 포함 하는 경우 지 수 표기법으로 숫자를 나타낼 수는 <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1096">The `s` parameter can represent a number in exponential notation if style includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="dba63-1097">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="dba63-1097">*exponential-digits*</span></span>|<span data-ttu-id="dba63-1098">일련의 0에서 지 수를 지정 하는 9 사이의 숫자입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1098">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="dba63-1099">숫자만 문자열 (해당 하는 <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> 스타일) 항상 성공적으로 구문 분석 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1099">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully.</span></span> <span data-ttu-id="dba63-1100">나머지 <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> 멤버 요소는 입력된 문자열에 필요 하지 않을 수도 있는 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1100">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be but are not required to be present in the input string.</span></span> <span data-ttu-id="dba63-1101">다음 표에서 개별 <xref:System.Globalization.NumberStyles> 플래그에 있을 수 있는 요소에 영향을 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1101">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="dba63-1102">NumberStyles 값</span><span class="sxs-lookup"><span data-stu-id="dba63-1102">NumberStyles value</span></span>|<span data-ttu-id="dba63-1103">S에서 숫자 허용 되는 요소</span><span class="sxs-lookup"><span data-stu-id="dba63-1103">Elements permitted in s in addition to digits</span></span>|  
|------------------------|---------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="dba63-1104">*정수 계열 자릿수* 요소만 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1104">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="dba63-1105">*.*</span><span class="sxs-lookup"><span data-stu-id="dba63-1105">The *.*</span></span> <span data-ttu-id="dba63-1106">및 *소수 자릿수가* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1106">and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="dba63-1107">`s` 매개 변수로 지 수 표기법을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1107">The `s` parameter can also use exponential notation.</span></span> <span data-ttu-id="dba63-1108">이 플래그를 단독으로 폼의 값을 지원 *정수 계열 숫자*E*자리 지 수*추가; 등의 요소와 지 수 표기법에서 문자열을 구문 분석 하는 데 필요한 플래그 양수 또는 음수 기호 및 소수점 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1108">This flag by itself supports values in the form *integral-digits*E*exponential-digits*; additional flags are needed to successfully parse strings in exponential notation with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="dba63-1109">*ws* 의 시작 부분에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1109">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="dba63-1110">*ws* 의 끝에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1110">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="dba63-1111">*기호* 의 시작 부분에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1111">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="dba63-1112">*기호* 의 끝에 요소 `s`합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1112">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="dba63-1113">*기호* 숫자 값이 들어 괄호 안에 형식 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1113">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="dba63-1114">*,* 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1114">The *,* element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="dba63-1115">* $ * 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1115">The *$* element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="dba63-1116">모두.</span><span class="sxs-lookup"><span data-stu-id="dba63-1116">All.</span></span> <span data-ttu-id="dba63-1117">`s` 매개 변수를 16 진수 숫자 또는 지 수 표기법으로 숫자를에서 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1117">The `s` parameter cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="dba63-1118">*ws* 부분이 나 끝 부분에 요소 `s`, *기호* 맨 앞에 `s`, 및 *합니다.*</span><span class="sxs-lookup"><span data-stu-id="dba63-1118">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the *.*</span></span> <span data-ttu-id="dba63-1119">기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1119">symbol.</span></span> <span data-ttu-id="dba63-1120">`s` 매개 변수로 지 수 표기법을 사용할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1120">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="dba63-1121">`ws`, `sign`, 1000 단위 구분 기호 (*,),* 및 소수점 (*.*) 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1121">The `ws`, `sign`, thousands separator (*,),* and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="dba63-1122">모든 스타일 제외 하 고 `s` 16 진수를 나타낼 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1122">All styles, except `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="dba63-1123">`provider` 매개 변수는 한 <xref:System.IFormatProvider> 구현 인 <xref:System.IFormatProvider.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> culture 별 서식 지정 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1123">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information.</span></span> <span data-ttu-id="dba63-1124">때는 <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> 메서드가 호출 되 면 호출는 `provider` 매개 변수의 <xref:System.IFormatProvider.GetFormat%2A> 메서드 전달는 <xref:System.Type> 을 나타내는 개체는 <xref:System.Globalization.NumberFormatInfo> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1124">When the <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="dba63-1125"><xref:System.IFormatProvider.GetFormat%2A> 다음 메서드는 <xref:System.Globalization.NumberFormatInfo> 개체의 형식에 대 한 정보를 제공 하는 `s` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1125">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `s` parameter.</span></span> <span data-ttu-id="dba63-1126">세 가지 방법으로 사용 하 여 `provider` 매개 변수를 구문 분석 작업에 사용자 지정 서식 지정 정보를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1126">There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:</span></span>  
  
-   <span data-ttu-id="dba63-1127">전달할 수는 <xref:System.Globalization.CultureInfo> 서식 지정 정보를 제공 하는 문화권을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1127">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="dba63-1128">해당 <xref:System.Globalization.CultureInfo.GetFormat%2A> 메서드가 반환 되는 <xref:System.Globalization.NumberFormatInfo> 해당 culture에 대 한 숫자 형식 지정 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1128">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="dba63-1129">실제 전달할 수 있습니다 <xref:System.Globalization.NumberFormatInfo> 숫자 서식 지정 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1129">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="dba63-1130">(구현 <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> 자체를 반환 합니다.)</span><span class="sxs-lookup"><span data-stu-id="dba63-1130">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="dba63-1131">구현 하는 사용자 지정 개체를 전달할 수 있습니다 <xref:System.IFormatProvider>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1131">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="dba63-1132">해당 <xref:System.IFormatProvider.GetFormat%2A> 메서드를 인스턴스화하고 반환 된 <xref:System.Globalization.NumberFormatInfo> 서식 지정 정보를 제공 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1132">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="dba63-1133">경우 `provider` 은 `null`의 서식을 `s` 에 따라 해석 됩니다는 <xref:System.Globalization.NumberFormatInfo> 현재 문화권의 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1133">If `provider` is `null`, the formatting of `s` is interpreted based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  
  
 <span data-ttu-id="dba63-1134">구분 기호에서 발견 되는 `s` 분석 및 적용 가능한 통화 또는 숫자의 소수 하는 동안 매개 변수 및 그룹 구분 기호가 동일 합니다. 구문 분석 작업의 구분 기호는 그룹 보다는 소수 구분 기호로 간주 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1134">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="dba63-1135">구분 기호에 대 한 자세한 내용은 참조 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, 및 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="dba63-1135">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dba63-1136">다음 예제에서는 <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29?displayProperty=nameWithType> 특정 스타일 및 특정 문화권의 규칙을 사용 하 여 서식이 지정 된 숫자의 문자열 표현을 구문 분석 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="dba63-1136">The following example demonstrates the use of the <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29?displayProperty=nameWithType> method to parse the string representation of numbers that have a particular style and are formatted using the conventions of a particular culture.</span></span>  
  
 [!code-csharp[System.Single.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.tryparse/cs/tryparse1.cs#2)]
 [!code-vb[System.Single.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.tryparse/vb/tryparse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="dba63-1137">
            <paramref name="style" />이 <see cref="T:System.Globalization.NumberStyles" /> 값이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1137">
              <paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span>
          </span>
          <span data-ttu-id="dba63-1138">-또는-  <paramref name="style" />이 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="dba63-1138">-or-  <paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span>
          </span>
        </exception>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="M:System.Single.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>