<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ee9987222f28a3d2503b139f93b9f3068e0c994" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36430255" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>관리되지 않은 리소스 해제를 위한 메커니즘을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 인터페이스의 주된 용도 관리 되지 않는 리소스를 해제 하는 것입니다. 가비지 수집기는 자동으로 해당 개체가 더 이상 사용 된 경우 관리 되는 개체에 할당 된 메모리를 해제 합니다. 그러나 가비지 수집이 발생 하는 경우 예측 하지 않습니다. 또한 가비지 수집기는 창 핸들과 같은 관리 되지 않는 리소스를 인식 하지 못합니다 또는 파일 및 스트림을 엽니다.  
  
 사용 하 여는 <xref:System.IDisposable.Dispose%2A> 명시적으로 가비지 수집기와 함께에서 관리 되지 않는 리소스를 해제 하기 위해이 인터페이스의 메서드입니다. 개체의 소비자 개체가 더 이상 필요 없는 경우이 메서드를 호출할 수 없습니다.  
  
> [!WARNING]
>  것은 주요 변경 사항 추가 하는 <xref:System.IDisposable> 기존 클래스에 대 한 인터페이스입니다. 형식의 기존 소비자가 호출할 수 없습니다 때문에 <xref:System.IDisposable.Dispose%2A>, 해당 형식에서 보유 하는 관리 되지 않는 리소스를 해제 됩니다 확신할 수 없습니다.  
  
 때문에 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 에서 관리 되는 개체를 배치 하거나, 인스턴스를 소유 하는 리소스를 더 이상 필요 없는 경우 형식의 소비자에 의해 호출 됩니다는 <xref:System.Runtime.InteropServices.SafeHandle> (권장된 대안) 를재정의해야하거나<xref:System.Object.Finalize%2A?displayProperty=nameWithType>소비자 잊은 호출 하는 관리 되지 않는 리소스를 확보 하려면 <xref:System.IDisposable.Dispose%2A>합니다.  
  
> [!IMPORTANT]
>  .NET framework에서는 c + + 컴파일러 리소스의 명확한 삭제를 지원 하며 직접 구현은 허용 하지 않습니다는 <xref:System.IDisposable.Dispose%2A> 메서드.  
  
 한 방법에 대 한 자세한 내용은이 인터페이스와 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드에 사용 되 고, 참조는 [가비지 수집](~/docs/standard/garbage-collection/index.md) 및 [Dispose 메서드를 구현](~/docs/standard/garbage-collection/implementing-dispose.md) 항목입니다.  
  
## <a name="using-an-object-that-implements-idisposable"></a>IDisposable을 구현 하는 개체를 사용 하 여  
 앱은 단순히 구현 하는 개체를 사용 하는 경우는 <xref:System.IDisposable> 를 호출 해야 개체의 인터페이스를 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 사용 했으면 구현 합니다. 프로그래밍 언어에 따라 두 가지 방법 중 하나를 수행할 수 있습니다.  
  
-   언어를 사용 하 여 구성 등의 `using` C# 및 Visual Basic에서 문.  
  
-   에 대 한 호출을 래핑하여는 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 구현에는 `try` / `finally` 블록입니다.  
  
> [!NOTE]
>  에 대 한 설명서 구현 하는 형식은 <xref:System.IDisposable> 그 사실을 확인 하 고 호출에 대 한 알림을 포함 해당 <xref:System.IDisposable.Dispose%2A> 구현 합니다.  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>C# 및 Visual Basic에서 사용 하 여 문  
 해당 하는 언어와 같은 구문을 지 원하는 경우는 [를 사용 하 여](~/docs/csharp/language-reference/keywords/using.md) C# 문 및 [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) Visual Basic의 문, 사용할 수 있습니다 명시적으로 호출 하는 대신 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 직접 합니다. 다음 예제에서는 정의에서이 접근 방식을 사용 하 여 한 `WordCount` 파일과 단어의 수에 대 한 정보를 유지 하는 클래스입니다.  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 `using` 문은 실제로 편리한 구문입니다. 중간 언어 (IL)에 대 한 언어 컴파일러는 컴파일 타임에 구현 된 `try` / `finally` 블록입니다.  
  
 에 대 한 자세한 내용은 `using` 문을 참조는 [문을 사용 하 여](~/docs/visual-basic/language-reference/statements/using-statement.md) 또는 [문을 사용 하 여](~/docs/csharp/language-reference/keywords/using-statement.md) 항목입니다.  
  
### <a name="the-tryfinally-block"></a>Try/Finally 블록  
 선택한 프로그래밍 언어와 같은 구문을 지원 하지 않는 경우는 `using` C# 또는 Visual Basic의 경우 문 사용 하지 않으려는 경우 호출할 수 있습니다 또는 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 구현에서는 `finally` 블록는 `try` / `finally` 문입니다. 다음 예제에서는 대체는 `using` 있는 이전 예제에서 차단 된 `try` / `finally` 블록입니다.  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 에 대 한 자세한 내용은 `try` / `finally` 패턴을 참조 하십시오. [시도 중... Catch 하는 중... Finally 문](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [-try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), 또는 [try-finally 문](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)합니다.  
  
## <a name="implementing-idisposable"></a>IDisposable 구현  
 구현 해야 <xref:System.IDisposable> 형식을 관리 되지 않는 리소스를 직접 사용 하는 경우에 합니다. 형식의 소비자가 호출할 수 없습니다 프로그램 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 인스턴스가 더 이상 필요 없는 경우 리소스를 해제 하는 데 구현 합니다. 호출에 실패 하는 경우를 처리 하기 <xref:System.IDisposable.Dispose%2A>, 클래스에서 파생을 사용 하 여 <xref:System.Runtime.InteropServices.SafeHandle> 재정의 해야 하거나 관리 되지 않는 리소스를 래핑하는 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드는 참조 형식에 대 한 합니다. 두 경우 모두 사용 하 여는 <xref:System.IDisposable.Dispose%2A> 메서드를 확보, 해제 또는 관리 되지 않는 리소스를 다시 설정 등의 관리 되지 않는 리소스를 사용 하 여 어떤 정리는 필요 합니다.  
  
> [!IMPORTANT]
>  기본 클래스를 정의 하는 경우 관리 되지 않는 리소스를 사용 하 고, 또는 삭제 해야 하는 서브 클래스를 것으로 예상 되는, 구현 해야는 <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> 메서드 두 번째 오버 로드를 제공 하 고 `Dispose`다음에 설명 된 대로, 단원을 참조 하십시오입니다.  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable 및 상속 계층  
 삭제 가능 해야 하는 서브 클래스를 사용 하는 기본 클래스를 구현 해야 <xref:System.IDisposable> 다음과 같습니다. 구현 될 때마다이 패턴을 사용 해야 <xref:System.IDisposable> 되지 않는 형식에서 `sealed` (`NotInheritable` Visual basic에서).  
  
-   공용, 비가상 제공 해야 <xref:System.IDisposable.Dispose> 메서드와 보호 된 가상 `Dispose(Boolean disposing)` 메서드.  
  
-   <xref:System.IDisposable.Dispose> 메서드를 호출 해야 `Dispose(true)` 및 성능에 대 한 종료를 표시 하지 않아야 합니다.  
  
-   기본 형식은 종료자를 포함하지 않아야 합니다.  
  
 다음 코드는 기본 클래스에 대 한 삭제 패턴을 반영합니다. 형식을 재정의 하지 않는 것으로 간주 된 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 재정의 하는 경우는 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드를 클래스에는 다음 패턴을 구현 해야 합니다.  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 서브클래스는 다음과 같이 삭제 가능한 패턴을 구현해야 합니다.  
  
-   `Dispose(Boolean)`를 재정의하고 기본 클래스 `Dispose(Boolean)` 구현을 호출해야 합니다.  
  
-   필요한 경우 종료자를 제공할 수 있습니다. 종료자가 `Dispose(false)`를 호출해야 합니다.  
  
 참고는 파생된 클래스 구현 하지 않는 자체는 <xref:System.IDisposable> 인터페이스를 매개 변수가 없는 포함 하지 마십시오 <xref:System.IDisposable.Dispose%2A> 메서드. 기본 클래스를만 재정의 `Dispose(Boolean)` 메서드.  
  
 다음 코드는 파생된 클래스에 대 한 삭제 패턴을 반영합니다. 형식을 재정의 하지 않는 것으로 간주 된 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 메서드.  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 다음 예제에서는를 구현 하는 리소스 클래스를 만드는 방법을 <xref:System.IDisposable> 인터페이스입니다.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>관리되지 않는 리소스의 확보, 해제 또는 다시 설정과 관련된 응용 프로그램 정의 작업을 수행합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 사용 하 여를 닫거나 파일, 스트림,이 인터페이스를 구현 하는 클래스의 인스턴스에서 보유 하는 핸들 등과 같은 관리 되지 않는 리소스를 해제 합니다. 규칙에 따라이 메서드는 개체를 보유 한 리소스를 해제와 관련 된 모든 작업에 사용 하거나 개체를 다시 사용할 수 있도록 준비 합니다.  
  
> [!WARNING]
>  구현 하는 클래스를 사용 하는 경우는 <xref:System.IDisposable> 호출 해야 인터페이스를 해당 <xref:System.IDisposable.Dispose%2A> 클래스를 사용 하 여 작업을 마쳤으면 구현 합니다. 자세한 내용은의 "IDisposable을 구현 하는 개체를 사용 하 여" 섹션을 참조 하십시오.는 <xref:System.IDisposable> 항목입니다.  
  
 이 메서드를 구현할 때는 모든 전파 포함 계층 구조를 통해 호출 하 여 리소스가 해제 되 보유 확인 합니다. 예를 들어 개체 A B, 개체를 할당 하 고 개체 B가 개체 C, A 다음의 할당 <xref:System.IDisposable.Dispose%2A> 구현을 호출 해야 <xref:System.IDisposable.Dispose%2A> b,를 차례로 호출 해야 <xref:System.IDisposable.Dispose%2A> c  
  
> [!IMPORTANT]
>  C + + 컴파일러가 리소스의 명확한 삭제를 지원 하며 직접 구현은 허용 하지 않습니다는 <xref:System.IDisposable.Dispose%2A> 메서드.  
  
 개체도 호출 해야는 <xref:System.IDisposable.Dispose%2A> 기본 클래스를 구현 하는 경우 기본 클래스의 메서드 <xref:System.IDisposable>합니다. 구현에 대 한 자세한 내용은 <xref:System.IDisposable> 기본 클래스와 그 하위 클래스에는 "IDisposable 및 상속 계층 구조" 섹션을 참조는 <xref:System.IDisposable> 항목입니다.  
  
 개체의 <xref:System.IDisposable.Dispose%2A> 메서드가 두 번 이상 호출 되 면 개체가 첫 번째 이후의 모든 호출을 무시 해야 합니다. 개체가 해야 하는 경우 예외를 throw 하지 해당 <xref:System.IDisposable.Dispose%2A> 메서드가 여러 번 호출 됩니다. 인스턴스 메서드 이외의 <xref:System.IDisposable.Dispose%2A> throw 할 수는 <xref:System.ObjectDisposedException> 리소스가 이미 삭제 되도록 합니다.  
  
 사용자가와 확보는 할당 된 상태를 표시 하는 특정 규칙을 사용 하는 리소스 종류를 예상 합니다. 이 예에는 일반적으로 열린 것으로 간주 되지 않았거나 닫혀는 스트림 클래스입니다. 와 같은 사용자 지정 된 이름의 public 메서드를 구현 하는 이러한 규칙 되는 클래스의 구현 자가 선택할 수 `Close`, 해당 호출에서 <xref:System.IDisposable.Dispose%2A> 메서드.  
  
 때문에 <xref:System.IDisposable.Dispose%2A> 메서드를 명시적으로 호출 해야, 관리 되지 않는 리소스를 되지 않는 위험은 항상 해제를 호출 하는 개체의 소비자 실패 하기 때문에 해당 <xref:System.IDisposable.Dispose%2A> 메서드. 이 문제를 방지 하는 방법은 두 가지가 있습니다.  
  
-   파생 된 개체에서 관리 되는 리소스를 래핑하고 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>합니다. 프로그램 <xref:System.IDisposable.Dispose%2A> 다음 구현에서는 호출 하는 <xref:System.IDisposable.Dispose%2A> 의 메서드는 <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> 인스턴스. 자세한 내용은 "SafeHandle 대안" 섹션을 참조는 <xref:System.Object.Finalize%2A?displayProperty=nameWithType> 항목입니다.  
  
-   리소스를 해제 하는 종료자를 구현 하면 <xref:System.IDisposable.Dispose%2A> 호출 되지 않습니다. 기본적으로 가비지 수집기는 메모리를 회수 하기 전에 개체의 종료자 자동으로 호출 합니다. 그러나 경우는 <xref:System.IDisposable.Dispose%2A> 메서드가 호출 하 고, 필요한 경우가 아니라면 일반적으로 삭제 된 개체의 종료자를 호출 하기 위해 가비지 수집기에 대 한 합니다. 자동 종료를 방지 하기 위해 <xref:System.IDisposable.Dispose%2A> 구현을 호출할 수는 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 메서드.  
  
 와 같은 관리 되지 않는 리소스를 액세스 하는 개체를 사용 하는 경우는 <xref:System.IO.StreamWriter>를 사용 하 여 인스턴스를 만드는 것이 좋습니다는 `using` 문. `using` 스트림과 호출에 자동으로 문을 닫습니다 <xref:System.IDisposable.Dispose%2A> 가 사용 하는 코드가 완료 되 면 개체에서 합니다. 예를 들어 참조는 <xref:System.IO.StreamWriter> 클래스입니다.  
  
   
  
## Examples  
 다음 예제에서는 구현 하는 방법을 보여 줍니다.는 <xref:System.IDisposable.Dispose%2A> 메서드.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>