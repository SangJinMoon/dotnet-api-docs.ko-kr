<Type Name="Type" FullName="System.Type">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a40925048dd06746d1e1cda2a76aa4ecaae1b916" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Type : System.Reflection.MemberInfo, System.Reflection.IReflect, System.Runtime.InteropServices._Type" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Type extends System.Reflection.MemberInfo implements class System.Reflection.IReflect, class System.Runtime.InteropServices._Type" />
  <TypeSignature Language="DocId" Value="T:System.Type" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Type&#xA;Inherits MemberInfo&#xA;Implements _Type, IReflect" />
  <TypeSignature Language="C++ CLI" Value="public ref class Type abstract : System::Reflection::MemberInfo, System::Reflection::IReflect, System::Runtime::InteropServices::_Type" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.IReflect</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Type</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Type))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ef7f9-101">클래스 형식, 인터페이스 형식, 배열 형식, 값 형식, 열거형 형식, 형식 매개 변수, 제네릭 형식 정의 및 개방형 생성 제네릭 형식이나 폐쇄형 생성 제네릭 형식에 대한 형식 선언을 나타냅니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ef7f9-101">Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-102">`Type` 루트는 <xref:System.Reflection> 기능 및 메타 데이터에 액세스 하는 기본 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-102">`Type` is the root of the <xref:System.Reflection> functionality and is the primary way to access metadata.</span></span> <span data-ttu-id="ef7f9-103">멤버를 사용 하 여 <xref:System.Type> 뿐만 아니라 모듈 및 어셈블리 클래스가 배포 되는 형식 (예: 생성자, 메서드, 필드, 속성 및 클래스의 이벤트), 멤버에 대 한 형식 선언에 대 한 정보를 얻을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-103">Use the members of <xref:System.Type> to get information about a type declaration, about the members of a type (such as the constructors, methods, fields, properties, and events of a class), as well as the module and the assembly in which the class is deployed.</span></span>  
  
 <span data-ttu-id="ef7f9-104">리플렉션을 사용 하는 액세스 수준에 관계 없이 형식 및 해당 멤버에 대 한 정보를 얻을 수 있는 코드에 필요한 권한은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-104">No permissions are required for code to use reflection to get information about types and their members, regardless of their access levels.</span></span> <span data-ttu-id="ef7f9-105">리플렉션을 사용 하 여 public 멤버 또는 액세스 수준을 볼 수 있도록 설정 하는 동안 일반 컴파일을 다른 멤버에 액세스 하는 코드에 필요한 권한은 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-105">No permissions are required for code to use reflection to access public members, or other members whose access levels would make them visible during normal compilation.</span></span> <span data-ttu-id="ef7f9-106">그러나 일반적으로 액세스할 수 없다고, private 또는 internal 메서드, 또는 형식의 필드를 보호 하는 멤버에 액세스 하기 위해 리플렉션을 사용 하 여 코드에 대 한 클래스를 상속 하지 않습니다, 코드 있어야 <xref:System.Security.Permissions.ReflectionPermission>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-106">However, in order for your code to use reflection to access members that would normally be inaccessible, such as private or internal methods, or protected fields of a type your class does not inherit, your code must have <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="ef7f9-107">참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-107">See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span>  
  
 <span data-ttu-id="ef7f9-108">`Type` 여러 구현을 허용 하는 추상 기본 클래스가입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-108">`Type` is an abstract base class that allows multiple implementations.</span></span> <span data-ttu-id="ef7f9-109">파생된 클래스는 시스템 제공 항상 `RuntimeType`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-109">The system will always provide the derived class `RuntimeType`.</span></span> <span data-ttu-id="ef7f9-110">리플렉션에서 런타임 라는 단어로 시작 하는 모든 클래스는 시스템 및 지원 비교 연산에 개체당 한 번만 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-110">In reflection, all classes beginning with the word Runtime are created only once per object in the system and support comparison operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-111">다중 스레드 시나리오에서는 잠그지 마십시오 <xref:System.Type> 개체에 대 한 액세스를 동기화 하기 위해 `static` 데이터입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-111">In multithreading scenarios, do not lock <xref:System.Type> objects in order to synchronize access to `static` data.</span></span> <span data-ttu-id="ef7f9-112">컨트롤이 없는 수 없는 다른 코드 클래스 형식이 개발자 잠글 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-112">Other code, over which you have no control, might also lock your class type.</span></span> <span data-ttu-id="ef7f9-113">이 인해 교착 상태가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-113">This might result in a deadlock.</span></span> <span data-ttu-id="ef7f9-114">대신, 개인 잠금을 설정 하면 정적 데이터에 대 한 액세스를 동기화 `static` 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-114">Instead, synchronize access to static data by locking a private `static` object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-115">파생된 클래스 호출 코드의 기본 클래스의 보호 된 멤버에 액세스할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-115">A derived class can access protected members of the calling code's base classes.</span></span> <span data-ttu-id="ef7f9-116">또한 호출 코드 어셈블리의 어셈블리 구성원에 게 액세스가 허용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-116">Also, access is allowed to assembly members of the calling code's assembly.</span></span> <span data-ttu-id="ef7f9-117">일반적으로 초기 바인딩 코드에 액세스할 수 있는 경우 다음 사용자도 액세스할 수 런타임에 바인딩된 코드에서.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-117">As a rule, if you are allowed access in early-bound code, then you are also allowed access in late-bound code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-118">다른 인터페이스를 확장 하는 인터페이스에서 확장된 된 인터페이스에 정의 된 메서드를 상속 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-118">Interfaces that extend other interfaces do not inherit the methods defined in the extended interfaces.</span></span>  
  
 <span data-ttu-id="ef7f9-119">섹션 내용</span><span class="sxs-lookup"><span data-stu-id="ef7f9-119">In this section:</span></span>  
  
 <span data-ttu-id="ef7f9-120">[유형 형식 개체 나타냅니까?](#WhatTypes) </span><span class="sxs-lookup"><span data-stu-id="ef7f9-120">[What types does a Type object represent?](#WhatTypes) </span></span>  
 <span data-ttu-id="ef7f9-121">[형식 개체를 검색합니다.](#Retrieve) </span><span class="sxs-lookup"><span data-stu-id="ef7f9-121">[Retrieving a Type object](#Retrieve) </span></span>  
 [<span data-ttu-id="ef7f9-122">같음에 대 한 형식 개체를 비교</span><span class="sxs-lookup"><span data-stu-id="ef7f9-122">Comparing type objects for equality</span></span>](#Equality)  
  
<a name="WhatTypes"></a>   
## <a name="what-types-does-a-type-object-represent"></a><span data-ttu-id="ef7f9-123">유형 형식 개체 나타냅니까?</span><span class="sxs-lookup"><span data-stu-id="ef7f9-123">What types does a Type object represent?</span></span>  
 <span data-ttu-id="ef7f9-124">이 클래스는 스레드로부터 안전 합니다. 여러 스레드에서이 유형의 인스턴스에서 동시에 읽을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-124">This class is thread safe; multiple threads can concurrently read from an instance of this type.</span></span> <span data-ttu-id="ef7f9-125">인스턴스는 <xref:System.Type> 클래스 다음 유형 중 하나를 나타낼 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-125">An instance of the <xref:System.Type> class can represent any of the following types:</span></span>  
  
-   <span data-ttu-id="ef7f9-126">클래스</span><span class="sxs-lookup"><span data-stu-id="ef7f9-126">Classes</span></span>  
  
-   <span data-ttu-id="ef7f9-127">값 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-127">Value types</span></span>  
  
-   <span data-ttu-id="ef7f9-128">배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-128">Arrays</span></span>  
  
-   <span data-ttu-id="ef7f9-129">인터페이스</span><span class="sxs-lookup"><span data-stu-id="ef7f9-129">Interfaces</span></span>  
  
-   <span data-ttu-id="ef7f9-130">열거형</span><span class="sxs-lookup"><span data-stu-id="ef7f9-130">Enumerations</span></span>  
  
-   <span data-ttu-id="ef7f9-131">대리자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-131">Delegates</span></span>  
  
-   <span data-ttu-id="ef7f9-132">생성 된 제네릭 형식과 제네릭 형식 정의</span><span class="sxs-lookup"><span data-stu-id="ef7f9-132">Constructed generic types and generic type definitions</span></span>  
  
-   <span data-ttu-id="ef7f9-133">인수를 입력 하 고 생성 된 제네릭 형식, 제네릭 형식 정 및 제네릭 메서드 정의의 매개 변수를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-133">Type arguments and type parameters of constructed generic types, generic type definitions, and generic method definitions</span></span>  
  
<a name="Retrieve"></a>   
## <a name="retrieving-a-type-object"></a><span data-ttu-id="ef7f9-134">형식 개체를 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-134">Retrieving a Type object</span></span>  
 <span data-ttu-id="ef7f9-135"><xref:System.Type> 특정 형식과 관련 된 개체는 다음과 같은 방법으로 얻을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-135">The <xref:System.Type> object associated with a particular type can be obtained in the following ways:</span></span>  
  
-   <span data-ttu-id="ef7f9-136">인스턴스 <xref:System.Object.GetType%2A?displayProperty=nameWithType> 메서드가 반환 되는 <xref:System.Type> 인스턴스 형식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-136">The instance <xref:System.Object.GetType%2A?displayProperty=nameWithType> method returns a <xref:System.Type> object that represents the type of an instance.</span></span> <span data-ttu-id="ef7f9-137">모든 관리 되는 형식에서 파생 되므로 <xref:System.Object>, <xref:System.Object.GetType%2A> 모든 종류의 인스턴스에서 메서드를 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-137">Because all managed types derive from <xref:System.Object>, the <xref:System.Object.GetType%2A> method can be called on an instance of any type.</span></span>  
  
     <span data-ttu-id="ef7f9-138">다음 예제에서는 <xref:System.Object.GetType%2A?displayProperty=nameWithType> 개체 배열에 있는 각 개체의 런타임 형식을 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-138">The following example calls the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method to determine the runtime type of each object in an object array.</span></span>  
  
     [!code-cpp[System.Type#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/GetType1.cpp#2)]
     [!code-csharp[System.Type#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/GetType1.cs#2)]
     [!code-vb[System.Type#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/GetType1.vb#2)]  
  
-   <span data-ttu-id="ef7f9-139">정적 <xref:System.Type.GetType%2A?displayProperty=nameWithType> 메서드는 반환 된 <xref:System.Type> 정규화 된 이름을 사용 하 여 지정 된 형식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-139">The static <xref:System.Type.GetType%2A?displayProperty=nameWithType> methods return a <xref:System.Type> object that represents a type specified by its fully qualified name.</span></span>  
  
-   <span data-ttu-id="ef7f9-140"><xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, 및 <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> 메서드 반환 `Type` 모듈에 정의 된 형식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-140">The <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> methods return `Type` objects that represent the types defined in a module.</span></span> <span data-ttu-id="ef7f9-141">첫 번째 방법은 배열을 가져오는 데 사용할 수 있습니다 <xref:System.Type> 모듈에 정의 된 모든 공용 및 개인 형식에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-141">The first method can be used to obtain an array of <xref:System.Type> objects for all the public and private types defined in a module.</span></span> <span data-ttu-id="ef7f9-142">(의 인스턴스를 가져올 수 `Module` 통해는 <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> 또는 <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> 메서드를 통해 또는 <xref:System.Type.Module%2A?displayProperty=nameWithType> 속성입니다.)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-142">(You can obtain an instance of `Module` through the <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> method, or through the <xref:System.Type.Module%2A?displayProperty=nameWithType> property.)</span></span>  
  
-   <span data-ttu-id="ef7f9-143"><xref:System.Reflection.Assembly?displayProperty=nameWithType> 다양 한를 비롯 한 어셈블리에 정의 된 클래스를 검색 하는 메서드를 포함 하는 개체 <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, 및 <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-143">The <xref:System.Reflection.Assembly?displayProperty=nameWithType> object contains a number of methods to retrieve the classes defined in an assembly, including <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="ef7f9-144"><xref:System.Type.FindInterfaces%2A> 메서드는 형식에서 지 원하는 인터페이스 형식의 필터링 된 목록을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-144">The <xref:System.Type.FindInterfaces%2A> method returns a filtered list of interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="ef7f9-145"><xref:System.Type.GetElementType%2A> 메서드가 반환 되는 `Type` 요소를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-145">The <xref:System.Type.GetElementType%2A> method returns a `Type` object that represents the element.</span></span>  
  
-   <span data-ttu-id="ef7f9-146"><xref:System.Type.GetInterfaces%2A> 및 <xref:System.Type.GetInterface%2A> 메서드 반환 <xref:System.Type> 형식에서 지 원하는 인터페이스 형식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-146">The <xref:System.Type.GetInterfaces%2A> and <xref:System.Type.GetInterface%2A> methods return <xref:System.Type> objects representing the interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="ef7f9-147"><xref:System.Type.GetTypeArray%2A> 메서드 배열을 반환 <xref:System.Type> 임의의 개체 집합에 지정 된 형식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-147">The <xref:System.Type.GetTypeArray%2A> method returns an array of <xref:System.Type> objects representing the types specified by an arbitrary set of objects.</span></span> <span data-ttu-id="ef7f9-148">개체 형식의 배열을 사용 하 여 지정 된 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-148">The objects are specified with an array of type <xref:System.Object>.</span></span>  
  
-   <span data-ttu-id="ef7f9-149"><xref:System.Type.GetTypeFromProgID%2A> 및 <xref:System.Type.GetTypeFromCLSID%2A> 메서드가 COM 상호 운용성을 위해 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-149">The <xref:System.Type.GetTypeFromProgID%2A> and <xref:System.Type.GetTypeFromCLSID%2A> methods are provided for COM interoperability.</span></span> <span data-ttu-id="ef7f9-150">반환 되는 <xref:System.Type> 로 지정 된 형식을 나타내는 개체는 `ProgID` 또는 `CLSID`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-150">They return a <xref:System.Type> object that represents the type specified by a `ProgID` or `CLSID`.</span></span>  
  
-   <span data-ttu-id="ef7f9-151"><xref:System.Type.GetTypeFromHandle%2A> 메서드는 상호 운용성을 위해 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-151">The <xref:System.Type.GetTypeFromHandle%2A> method is provided for interoperability.</span></span> <span data-ttu-id="ef7f9-152">반환 된 `Type` 클래스 핸들로 지정 된 형식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-152">It returns a `Type` object that represents the type specified by a class handle.</span></span>  
  
-   <span data-ttu-id="ef7f9-153">C# `typeof` 연산자는 c + + `typeid` 연산자 및 Visual Basic `GetType` 연산자 가져올는 `Type` 유형에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-153">The C# `typeof` operator, the C++ `typeid` operator, and the Visual Basic `GetType` operator obtain the `Type` object for a type.</span></span>  
  
-   <span data-ttu-id="ef7f9-154"><xref:System.Type.MakeGenericType%2A> 메서드가 반환 되는 <xref:System.Type> 은 개방형 생성된 형식이 생성 된 제네릭 형식을 나타내는 개체의 <xref:System.Type.ContainsGenericParameters%2A> 속성에서 반환 `true`, 닫힌 생성 된 형식 그렇지 않은 경우 및 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-154">The <xref:System.Type.MakeGenericType%2A> method returns a <xref:System.Type> object representing a constructed generic type, which is an open constructed type if its <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, and a closed constructed type otherwise.</span></span> <span data-ttu-id="ef7f9-155">닫혀 있는 경우에 제네릭 형식을 인스턴스화할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-155">A generic type can be instantiated only if it is closed.</span></span>  
  
-   <span data-ttu-id="ef7f9-156"><xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, 및 <xref:System.Type.MakeByRefType%2A> 메서드 반환 <xref:System.Type> 를 나타내는 개체를 각각 지정된 된 형식, 지정된 된 형식 및 참조 매개 변수의 형식에 대 한 포인터의 배열 (`ref` C#에서는 `ByRef`Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-156">The <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, and <xref:System.Type.MakeByRefType%2A> methods return <xref:System.Type> objects that represent, respectively, an array of a specified type, a pointer to a specified type, and the type of a reference parameter (`ref` in C#, `ByRef` in Visual Basic).</span></span>  
  
<a name="Equality"></a>   
## <a name="comparing-type-objects-for-equality"></a><span data-ttu-id="ef7f9-157">같음에 대 한 형식 개체를 비교</span><span class="sxs-lookup"><span data-stu-id="ef7f9-157">Comparing type objects for equality</span></span>  
 <span data-ttu-id="ef7f9-158">A <xref:System.Type> 나타내는 되지 않은 고유 개체, 즉 두 개의 <xref:System.Type> 동일한 형식을 나타내는 경우에 개체 참조가 동일한 개체를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-158">A <xref:System.Type> object that represents a type is unique; that is, two <xref:System.Type> object references refer to the same object if and only if they represent the same type.</span></span> <span data-ttu-id="ef7f9-159">이 비교를 통해 <xref:System.Type> 참조 일치를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-159">This allows for comparison of <xref:System.Type> objects using reference equality.</span></span> <span data-ttu-id="ef7f9-160">다음 예제에서는 비교는 <xref:System.Type> 동일한 형식 인지 확인 하는 정수 값의 수를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-160">The following example compares the <xref:System.Type> objects that represent a number of integer values to determine whether they are of the same type.</span></span>  
  
 [!code-cpp[System.Type#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/Equals1.cpp#3)]
 [!code-csharp[System.Type#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/Equals1.cs#3)]
 [!code-vb[System.Type#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/Equals1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-161">다음 예제에서는의 대표 몇 가지 기능 <xref:System.Type>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-161">The following  example shows a few representative features of <xref:System.Type>.</span></span> <span data-ttu-id="ef7f9-162">C# `typeof` 연산자 (`GetType` Visual Basic의 연산자 `typeid` Visual c + +에서 연산자) 얻는 데 사용 되는 <xref:System.Type> 개체를 나타내는 <xref:System.String>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-162">The C# `typeof` operator (`GetType` operator in Visual Basic, `typeid` operator in Visual C++) is used to get a <xref:System.Type> object representing <xref:System.String>.</span></span> <span data-ttu-id="ef7f9-163">이 <xref:System.Type> 개체는 <xref:System.Type.GetMethod%2A> 메서드 가져오는 데 사용 됩니다는 <xref:System.Reflection.MethodInfo> 나타내는 <xref:System.String.Substring%2A> 시작 위치와 길이 사용 하는 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-163">From this <xref:System.Type> object, the <xref:System.Type.GetMethod%2A> method is used to get a <xref:System.Reflection.MethodInfo> representing the <xref:System.String.Substring%2A> overload that takes a starting location and a length.</span></span>  
  
 <span data-ttu-id="ef7f9-164">오버 로드 시그니처를 식별 하려면 코드 예제는 두 개를 포함 하는 임시 배열을 만듭니다 <xref:System.Type> 나타내는 `int` (`Integer` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-164">To identify the overload signature, the code example creates a temporary array containing two <xref:System.Type> objects representing `int` (`Integer` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-165">배열에 정확 하 게 두 개의 참조의 인스턴스를 포함 <xref:System.Type> 나타내는 `int` 은 현재 어플리케이션 도메인에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-165">To be precise, the array contains two references to the instance of <xref:System.Type> that represents `int` in the current application domain.</span></span> <span data-ttu-id="ef7f9-166">모든 형식에 대해은의 인스턴스 하나만 <xref:System.Type> 응용 프로그램 도메인입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-166">For any type, there is only one instance of <xref:System.Type> per application domain.</span></span>  
  
 <span data-ttu-id="ef7f9-167">사용 하 여 코드 예제는 <xref:System.Reflection.MethodInfo> 를 호출 하는 <xref:System.String.Substring%2A> "Hello, World!", 문자열에서 메서드 결과 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-167">The code example uses the <xref:System.Reflection.MethodInfo> to invoke the <xref:System.String.Substring%2A> method on the string "Hello, World!", and displays the result.</span></span>  
  
 [!code-cpp[System.Type#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/source.cpp#1)]
 [!code-csharp[System.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/source.cs#1)]
 [!code-vb[System.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="ef7f9-168">이 형식은 스레드로부터 안전합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ef7f9-168">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="ef7f9-169">상속 하는 경우 <see langword="Type" />, 멤버를 재정의 해야 합니다.</span>
        <span class="sxs-lookup">
          <span data-stu-id="ef7f9-169">When you inherit from <see langword="Type" />, you must override the following members:</span>
        </span>  
  
-   <see cref="P:System.Type.Assembly" />  
  
-   <see cref="P:System.Type.AssemblyQualifiedName" />  
  
-   <see cref="P:System.Type.BaseType" />  
  
-   <see cref="P:System.Type.FullName" />  
  
-   <see cref="M:System.Type.GetAttributeFlagsImpl" />  
  
-   <see cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetElementType" />  
  
-   <span data-ttu-id="ef7f9-170"><see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> ,</span><span class="sxs-lookup"><span data-stu-id="ef7f9-170"><see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> ,</span></span>  
  
-   <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" />  
  
-   <see cref="M:System.Type.GetInterfaces" />  
  
-   <see cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="P:System.Type.GUID" />  
  
-   <see cref="M:System.Type.HasElementTypeImpl" />  
  
-   <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />  
  
-   <see cref="M:System.Type.IsArrayImpl" />  
  
-   <see cref="M:System.Type.IsByRefImpl" />  
  
-   <see cref="M:System.Type.IsCOMObjectImpl" />  
  
-   <see cref="M:System.Type.IsPointerImpl" />  
  
-   <see cref="M:System.Type.IsPrimitiveImpl" />  
  
-   <see cref="P:System.Type.Module" />  
  
-   <see cref="P:System.Type.Namespace" />  
  
-   <see cref="P:System.Type.TypeHandle" />  
  
-   <see cref="P:System.Type.UnderlyingSystemType" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />  
  
-   <see cref="P:System.Reflection.MemberInfo.Name" /></para>
    </block>
    <altmember cref="T:System.Object" />
    <altmember cref="N:System.Reflection" />
    <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Type ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Type();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-171">
            <see cref="T:System.Type" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-171">Initializes a new instance of the <see cref="T:System.Type" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-172">Type 개체의 생성 하는 동안이 생성자는 파생된 클래스에서 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-172">This constructor is invoked by derived classes during the construction of type objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Assembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-173">형식이 선언되는 <see cref="T:System.Reflection.Assembly" />를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-173">Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared.</span>
          </span>
          <span data-ttu-id="ef7f9-174">제네릭 형식의 경우 제네릭 형식이 정의되는 <see cref="T:System.Reflection.Assembly" />를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-174">For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-175">현재 형식이 포함된 어셈블리를 설명하는 <see cref="T:System.Reflection.Assembly" /> 인스턴스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-175">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span>
          </span>
          <span data-ttu-id="ef7f9-176">제네릭 형식의 경우 인스턴스는 특정한 생성된 형식을 만들고 사용하는 어셈블리가 아니라 제네릭 형식 정의가 포함된 어셈블리를 설명합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-176">For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-177">하는 경우 현재 <xref:System.Type> 개체가 생성 된 제네릭 형식을 나타내면,이 속성은 제네릭 형식 정의 포함 하는 어셈블리를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-177">If the current <xref:System.Type> object represents a constructed generic type, this property returns the assembly that contains the generic type definition.</span></span> <span data-ttu-id="ef7f9-178">예를 들어, 제네릭 형식 정의 포함 하는 MyGenerics.dll 이라는 어셈블리를 만들 `MyGenericStack<T>` (`MyGenericStack(Of T)` Visual Basic의 `generic<T> ref class MyGenericStack` c + +에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-178">For example, suppose you create an assembly named MyGenerics.dll that contains the generic type definition `MyGenericStack<T>` (`MyGenericStack(Of T)` in Visual Basic, `generic<T> ref class MyGenericStack` in C++).</span></span> <span data-ttu-id="ef7f9-179">인스턴스를 만들 경우 `MyGenericStack<int>` (`MyGenericStack(Of Integer)` Visual basic에서) 다른 어셈블리에는 <xref:System.Type.Assembly%2A> 는 생성 된 형식에 대 한 속성을 반환는 <xref:System.Reflection.Assembly> MyGenerics.dll를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-179">If you create an instance of `MyGenericStack<int>` (`MyGenericStack(Of Integer)` in Visual Basic) in another assembly, the <xref:System.Type.Assembly%2A> property for the constructed type returns an <xref:System.Reflection.Assembly> object that represents MyGenerics.dll.</span></span>  
  
 <span data-ttu-id="ef7f9-180">마찬가지로, 하는 경우 현재 <xref:System.Type> 개체는 할당 되지 않은 제네릭 매개 변수를 나타내는 `T`,이 속성을 정의 하는 제네릭 형식을 포함 하는 어셈블리 반환 `T`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-180">Similarly, if the current <xref:System.Type> object represents an unassigned generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
 <span data-ttu-id="ef7f9-181">경우는 <xref:System.Type.Assembly%2A?displayProperty=nameWithType> 속성을 사용할 수 없는.NET Core 또는 유니버설 Windows 플랫폼 같은 특정.NET 구현에 사용 된 <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> 속성 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-181">If the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property is not available on a particular .NET implementation, such as .NET Core or the Universal Windows Platform, use the <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> property instead.</span></span>      
  
 <span data-ttu-id="ef7f9-182">이 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-182">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-183">다음 예제에서는 클래스와 연결 된 어셈블리 이름 및 형식의 정규화 된 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-183">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[Type_Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[Type_Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[Type_Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public abstract string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.AssemblyQualifiedName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-184">이 <see cref="T:System.Type" /> 개체가 로드된 어셈블리의 이름을 비롯하여 형식의 어셈블리 한정 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-184">Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <see cref="T:System.Type" /> object was loaded.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-185">
            <see cref="T:System.Type" />이 로드된 어셈블리의 이름을 비롯한 <see cref="T:System.Type" />의 어셈블리 한정 이름입니다. 현재 인스턴스가 제네릭 형식 매개 변수를 나타낼 경우에는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-185">The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or <see langword="null" /> if the current instance represents a generic type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-186">형식의 어셈블리 정규화 된 이름을 형식 이름, 쉼표, 어셈블리의 표시 이름으로 다음 네임 스페이스를 포함 하 여 구성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-186">The assembly-qualified name of a type consists of the type name, including its namespace, followed by a comma, followed by the display name of the assembly.</span></span> <span data-ttu-id="ef7f9-187">어셈블리의 표시 이름을 사용 하 여 가져온는 <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-187">The display name of an assembly is obtained using the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-188">.NET Framework 버전 2.0의에서 프로세서 아키텍처 어셈블리 id에 추가 되 고 어셈블리 이름 문자열의 일부로 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-188">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="ef7f9-189">예를 들어 "ProcessorArchitecture = msil"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-189">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="ef7f9-190">그러나 반환 하는 문자열에 포함 되지 됩니다는 <xref:System.Type.AssemblyQualifiedName%2A> 호환성을 위해 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-190">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="ef7f9-191"><xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-191">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="ef7f9-192">공용 언어 런타임을 지 원하는 모든 컴파일러는 중첩 된 클래스의 단순한 이름을 내보내고 리플렉션에서 다음 규칙에 따라 쿼리 시 형식 표시 이름을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-192">All compilers that support the common language runtime emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
|<span data-ttu-id="ef7f9-193">구분 기호</span><span class="sxs-lookup"><span data-stu-id="ef7f9-193">Delimiter</span></span>|<span data-ttu-id="ef7f9-194">의미</span><span class="sxs-lookup"><span data-stu-id="ef7f9-194">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="ef7f9-195">백슬래시(\\)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-195">Backslash (\\)</span></span>|<span data-ttu-id="ef7f9-196">이스케이프 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-196">Escape character.</span></span>|  
|<span data-ttu-id="ef7f9-197">쉼표 ()</span><span class="sxs-lookup"><span data-stu-id="ef7f9-197">Comma (,)</span></span>|<span data-ttu-id="ef7f9-198">어셈블리 이름을 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-198">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="ef7f9-199">더하기 기호 (+)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-199">Plus sign (+)</span></span>|<span data-ttu-id="ef7f9-200">중첩된 된 클래스 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-200">Precedes a nested class.</span></span>|  
|<span data-ttu-id="ef7f9-201">마침표 (입니다.)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-201">Period (.)</span></span>|<span data-ttu-id="ef7f9-202">네임 스페이스 식별자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-202">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="ef7f9-203">대괄호 ()</span><span class="sxs-lookup"><span data-stu-id="ef7f9-203">Brackets ([])</span></span>|<span data-ttu-id="ef7f9-204">유형 이름 다음 해당 형식의 배열을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-204">After a type name, denotes an array of that type.</span></span><br /><br /> <span data-ttu-id="ef7f9-205">또는</span><span class="sxs-lookup"><span data-stu-id="ef7f9-205">-or-</span></span><br /><br /> <span data-ttu-id="ef7f9-206">제네릭 형식에 대 한 제네릭 형식 인수 목록을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-206">For a generic type, encloses the generic type argument list.</span></span><br /><br /> <span data-ttu-id="ef7f9-207">또는</span><span class="sxs-lookup"><span data-stu-id="ef7f9-207">-or-</span></span><br /><br /> <span data-ttu-id="ef7f9-208">형식 인수 목록 내에서 정규화 된 어셈블리 형식을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-208">Within a type argument list, encloses an assembly-qualified type.</span></span>|  
  
 <span data-ttu-id="ef7f9-209">예를 들어, 클래스에 대 한 정규화 된 어셈블리 이름을 다음과 같을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-209">For example, the assembly-qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089  
```  
  
 <span data-ttu-id="ef7f9-210">네임 스페이스 예를 들어 TopNamespace.Sub+Namespace 더하기 기호를 포함 된 경우 다음 더하기 기호 (+)는 뒤에 야 이스케이프 문자 (\\) 중첩 구분 기호로 해석 되지 않도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-210">If the namespace contained a plus sign, for example TopNamespace.Sub+Namespace, then the plus sign (+) would be preceded by an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="ef7f9-211">리플렉션이이 문자열을 다음과 같이 내보내기 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-211">Reflection would emit this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089   
```  
  
 <span data-ttu-id="ef7f9-212">A "+ +"가 "\\+\\+", 및 "\\"가 "\\\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-212">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="ef7f9-213">이 정규화 된 이름은 유지 되었다가 나중에 로드 하는 데 사용 된 <xref:System.Type>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-213">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="ef7f9-214">찾아 로드 하는 <xref:System.Type>를 사용 하 여 <xref:System.Type.GetType%2A> 만 또는 어셈블리의 정규화 된 형식 이름으로 이름 형식을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-214">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="ef7f9-215"><xref:System.Type.GetType%2A> 형식으로 이름을 찾을 것은 <xref:System.Type> 호출자의 어셈블리에서 찾은 다음 시스템 어셈블리에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-215"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="ef7f9-216"><xref:System.Type.GetType%2A> 어셈블리와 정규화 된 형식 이름에 대 한 표시 됩니다는 <xref:System.Type> 모든 어셈블리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-216"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="ef7f9-217">형식 이름에는 형식이 참조 형식, 포인터 형식 또는 배열 형식 인지와 같은 형식에 대 한 추가 정보를 나타내는 후행 문자가 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-217">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="ef7f9-218">형식 이름 없이 이러한 후행 문자를 검색 하려면 사용 `t.GetElementType().ToString()`여기서 `t` 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-218">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="ef7f9-219">공백은 어셈블리 이름 제외한 모든 형식 이름 구성 요소에 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-219">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="ef7f9-220">어셈블리 이름에 ',' 구분 기호 앞에 공백이 관련이 있지만 ',' 구분 기호 뒤의 공백은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-220">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="ef7f9-221">제네릭 형식의 제네릭 인수 자체 어셈블리 이름으로 한정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-221">Generic arguments of generic types are themselves qualified by assembly name.</span></span> <span data-ttu-id="ef7f9-222">에 대 한 정규화 된 어셈블리 형식 이름에 예를 들어 `MyGenericClass<int>` (`MyGenericClass(Of Integer)` Visual basic에서), `int` 에 대 한 정규화 된 어셈블리 형식 이름으로 확장 됩니다 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-222">For example, in the assembly-qualified type name for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic), `int` is expanded to the assembly-qualified type name for <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="ef7f9-223">하는 경우 현재 <xref:System.Type> 제네릭 매개 변수를 나타내는 개체를이 속성은 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-223">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-224">다음 예제에서는 클래스와 연결 된 어셈블리 이름 및 형식의 정규화 된 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-224">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[type_assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[type_assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[type_assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 <span data-ttu-id="ef7f9-225">반환 된 문자열을 비교 하는 다음 예제는 <xref:System.Type.ToString%2A> 메서드 및 `Name`, <xref:System.Type.FullName%2A>, 및 <xref:System.Type.AssemblyQualifiedName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-225">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetType" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-226">
            <see cref="T:System.Type" />과 관련된 특성을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-226">Gets the attributes associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-227">
            <see cref="T:System.Reflection.TypeAttributes" />이 값이 지정되어 있지 않은 제네릭 형식 매개 변수를 나타내지 않는 경우 <see cref="T:System.Type" />의 특성 집합을 나타내는 <see cref="T:System.Type" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-227">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-228">일부 멤버는 <xref:System.Reflection.TypeAttributes> 열거형 값의 그룹을 나타내는 마스크 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-228">Some members of the <xref:System.Reflection.TypeAttributes> enumeration are masks that represent a group of values.</span></span> <span data-ttu-id="ef7f9-229">각 그룹에는 기본 값이 0 인 멤버 하나 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-229">Each group includes one member whose underlying value is zero.</span></span> <span data-ttu-id="ef7f9-230">내부 값 예를 들어는 <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> 의 멤버는 <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 그룹은 0을 그대로 <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> 의 멤버는 <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> 그룹입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-230">For example, the underlying value of the <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> group is zero, as is the <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> group.</span></span> <span data-ttu-id="ef7f9-231">이 때문에 이러한 값을 테스트 하기 전에 / / 마스크를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-231">Because of this, you must use the mask before testing for those values.</span></span> <span data-ttu-id="ef7f9-232">예제에서는 그림을 제공합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-232">The example provides an illustration.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="ef7f9-233">같은 속성 대부분의 용도 대 한 <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, 및 <xref:System.Type.IsSpecialName%2A> 형식 특성 보다 사용 하기가 더 쉽습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-233">For most purposes, properties like <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, and <xref:System.Type.IsSpecialName%2A> are easier to use than type attributes.</span></span>  
  
 <span data-ttu-id="ef7f9-234">하는 경우 현재 <xref:System.Type> 나타냅니다 생성된 된 제네릭 형식,이 속성은 제네릭 형식 정의의 특성을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-234">If the current <xref:System.Type> represents a constructed generic type, this property returns the attributes of the generic type definition.</span></span> <span data-ttu-id="ef7f9-235">에 대 한 반환 하는 특성은 예를 들어 `MyGenericClass<int>` (`MyGenericClass(Of Integer)` Visual basic에서) 특성 `MyGenericClass<T>` (`MyGenericClass(Of T)` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-235">For example, the attributes returned for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic) are the attributes of `MyGenericClass<T>` (`MyGenericClass(Of T)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="ef7f9-236">하는 경우 현재 <xref:System.Type> 제네릭 형식 매개 변수-즉, 하는 경우는 <xref:System.Type.IsGenericParameter%2A> 속성에서 반환 `true` -는 <xref:System.Reflection.TypeAttributes> 이 속성에서 반환 된 값이 지정 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-236">If the current <xref:System.Type> represents a generic type parameter — that is, if the <xref:System.Type.IsGenericParameter%2A> property returns `true` — the <xref:System.Reflection.TypeAttributes> value returned by this property is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-237">다음 예제에서는 용도 <xref:System.Type.Attributes%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-237">The following example usesthe <xref:System.Type.Attributes%2A> property.</span></span>  
  
 [!code-csharp[System.Type.Attributes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.attributes/cs/attributes1.cs#1)]
 [!code-vb[System.Type.Attributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.attributes/vb/attributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetAttributeFlagsImpl" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public abstract Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ BaseType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.BaseType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-238">현재 <see cref="T:System.Type" />이 직접 상속된 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-238">Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-239">현재 <see cref="T:System.Type" />이 직접 상속하는 <see cref="T:System.Type" />이거나, 현재 <see langword="null" />이 <see langword="Type" /> 클래스나 인터페이스를 나타내면 <see cref="T:System.Object" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-239">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class or an interface.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-240">기본 형식은 현재 형식을 직접 상속 되는 형식이입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-240">The base type is the type from which the current type directly inherits.</span></span> <span data-ttu-id="ef7f9-241"><xref:System.Object> 하지 않은 기본 형식, 따라서 모니터링 유형만 `null` 의 기본 형식으로 반환 됩니다 <xref:System.Object>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-241"><xref:System.Object> is the only type that does not have a base type, therefore `null` is returned as the base type of <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="ef7f9-242">인터페이스; 0 개 이상의 기본 인터페이스에서 상속 따라서이 속성은 반환 `null` 경우는 `Type` 개체는 인터페이스를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-242">Interfaces inherit from zero or more base interfaces; therefore, this property returns `null` if the `Type` object represents an interface.</span></span> <span data-ttu-id="ef7f9-243">기본 인터페이스는 하 게 결정할 수 <xref:System.Type.GetInterfaces%2A> 또는 <xref:System.Type.FindInterfaces%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-243">The base interfaces can be determined with <xref:System.Type.GetInterfaces%2A> or <xref:System.Type.FindInterfaces%2A>.</span></span>  
  
 <span data-ttu-id="ef7f9-244">하는 경우 현재 <xref:System.Type> 생성 된 제네릭 형식을 나타내며, 제네릭 인수를 반영 하는 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-244">If the current <xref:System.Type> represents a constructed generic type, the base type reflects the generic arguments.</span></span> <span data-ttu-id="ef7f9-245">예를 들어 다음 선언을 살펴보세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-245">For example, consider the following declarations:</span></span>  
  
 [!code-cpp[System.Type.BaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.basetype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.BaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/remarks.cs#1)]
 [!code-vb[System.Type.BaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="ef7f9-246">생성 된 형식에 대 한 `C<int>` (`C(Of Integer)` Visual basic에서)에서는 <xref:System.Type.BaseType%2A> 속성에서 반환 `B<int>`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-246">For the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the <xref:System.Type.BaseType%2A> property returns `B<int>`.</span></span>  
  
 <span data-ttu-id="ef7f9-247">하는 경우 현재 <xref:System.Type> 제네릭 형식 정의의 형식 매개 변수 <xref:System.Type.BaseType%2A> 형식 매개 변수에서 상속 해야 하는 클래스 즉, 클래스 제약 조건을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-247">If the current <xref:System.Type> represents a type parameter of a generic type definition, <xref:System.Type.BaseType%2A> returns the class constraint, that is, the class the type parameter must inherit.</span></span> <span data-ttu-id="ef7f9-248">클래스 제약 조건이 없는 경우 <xref:System.Type.BaseType%2A> 반환 <xref:System.Object?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-248">If there is no class constraint, <xref:System.Type.BaseType%2A> returns <xref:System.Object?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="ef7f9-249">이 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-249">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-250">다음 예제는 <xref:System.Type.BaseType%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-250">The following example demonstrates using the <xref:System.Type.BaseType%2A> property.</span></span>  
  
 [!code-cpp[TestBaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestBaseType/CPP/testbasetype.cpp#1)]
 [!code-csharp[TestBaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestBaseType/CS/testbasetype.cs#1)]
 [!code-vb[TestBaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestBaseType/VB/testbasetype.vb#1)]  
  
 <span data-ttu-id="ef7f9-251">다음 예제에서는 재귀를 사용 하 여 어셈블리에 각 클래스의 완전 한 상속 계층 구조를 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-251">The following example uses recursion to list the complete inheritance hierarchy of each class found in an assembly.</span></span> <span data-ttu-id="ef7f9-252">이 예제에서는 클래스를 정의 `C` 라는 클래스에서 파생 된 `B`이며 차례로 라는 클래스에서 파생 `A`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-252">The example defines a class named `C` that derives from a class named `B`, which, in turn, derives from a class named `A`.</span></span>  
  
 [!code-csharp[System.Type.BaseType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/basetype3.cs#2)]
 [!code-vb[System.Type.BaseType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/basetype3.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
        <altmember cref="P:System.Type.UnderlyingSystemType" />
        <altmember cref="M:System.Type.IsSubclassOf(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public virtual bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Type.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-253">현재 <see cref="T:System.Type" /> 개체에 특정 형식으로 바뀌지 않은 형식 매개 변수가 있는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-253">Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-254">
            <see langword="true" /> 개체 자체가 제네릭 형식 매개 변수이거나 특정 형식이 적용되지 않은 형식 매개 변수이면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-254">
              <see langword="true" /> if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-255">형식의 인스턴스를 만들도록 없는 제네릭 형식 정의 또는 형식 자체의 모든 바깥쪽 제네릭 형식 또는 모든 요소는 형식의 형식 인수에서 개방형 생성된 형식 이어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-255">In order to create an instance of a type, there must be no generic type definitions or open constructed types in the type arguments of the type itself, in any enclosing generic types, or in any elements of the type.</span></span> <span data-ttu-id="ef7f9-256">또 다른 방법은 말하면 재귀적으로 검사 하는 경우, 형식에 제네릭 형식 매개 변수가 없는 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-256">Another way of saying this is that when examined recursively, the type must contain no generic type parameters.</span></span>  
  
 <span data-ttu-id="ef7f9-257">형식 하는 임의의 복잡 한 있으므로 이러한 결정은 어렵습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-257">Since types can be arbitrarily complex, making this determination is difficult.</span></span> <span data-ttu-id="ef7f9-258">오류를 줄일 수는 <xref:System.Type.ContainsGenericParameters%2A> 속성을 인스턴스화할 수 닫힌된 생성 된 형식을 구분 하기 위해 표준 방법을 제공 및 개방형 생성 형식 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-258">For convenience and to reduce the chance of error, the <xref:System.Type.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed types, which can be instantiated, and open constructed types, which cannot.</span></span> <span data-ttu-id="ef7f9-259">경우는 <xref:System.Type.ContainsGenericParameters%2A> 속성에서 반환 `true`, 형식을 인스턴스화할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-259">If the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, the type cannot be instantiated.</span></span>  
  
 <span data-ttu-id="ef7f9-260"><xref:System.Type.ContainsGenericParameters%2A> 속성 형식 매개 변수를 재귀적으로 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-260">The <xref:System.Type.ContainsGenericParameters%2A> property searches recursively for type parameters.</span></span> <span data-ttu-id="ef7f9-261">예를 들어 반환 `true` 형식 요소가 배열인 배열에 대 한 `A<T>` (`A(Of T)` Visual basic에서) 때 배열의 제네릭 자체 하지 않은 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-261">For example, it returns `true` for an array whose elements are type `A<T>` (`A(Of T)` in Visual Basic), even though the array is not itself generic.</span></span> <span data-ttu-id="ef7f9-262">이와 반대로의 동작에서 <xref:System.Type.IsGenericType%2A> 반환 하는 속성 `false` 배열에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-262">Contrast this with the behavior of the <xref:System.Type.IsGenericType%2A> property, which returns `false` for arrays.</span></span>  
  
 <span data-ttu-id="ef7f9-263">일련의 예제에서는 클래스와 값을 보여 주는 테이블에 대 한는 <xref:System.Type.ContainsGenericParameters%2A> 속성 참조 <xref:System.Type.IsGenericType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-263">For a set of example classes and a table showing the values of the <xref:System.Type.ContainsGenericParameters%2A> property, see <xref:System.Type.IsGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-264">다음 예제에서는 두 개의 형식 매개 변수가 있는 제네릭 클래스를 정의 하 고 첫 번째 클래스에서 파생 되는 두 번째 제네릭 클래스를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-264">The following example defines a generic class with two type parameters and then defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="ef7f9-265">파생된 클래스의 기본 클래스에 두 개의 형식 인수가: 첫 번째는 <xref:System.Int32> 두 번째는 파생 된 형식의 형식 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-265">The derived class's base class has two type arguments: the first is <xref:System.Int32> and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="ef7f9-266">보고 된 위치를 포함 하 여이 예제에서는 이러한 제네릭 클래스에 대 한 정보를 표시는 <xref:System.Type.GenericParameterPosition%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-266">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-267">현재 <see cref="T:System.Reflection.MethodBase" />가 제네릭 메서드의 형식 매개 변수를 나타내는 경우 선언 메서드를 나타내는 <see cref="T:System.Type" />를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-267">Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-268">현재 <see cref="T:System.Type" />이 제네릭 메서드의 형식 매개 변수를 나타내면 선언하는 메서드를 나타내는 <see cref="T:System.Reflection.MethodBase" />이고, 그렇지 않으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-268">If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-269">선언 방법은 제네릭 메서드 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-269">The declaring method is a generic method definition.</span></span> <span data-ttu-id="ef7f9-270">즉, 경우 <xref:System.Type.DeclaringMethod%2A> 반환 하지 않는 `null`, 다음 `DeclaringMethod.IsGenericMethodDefinition` 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-270">That is, if <xref:System.Type.DeclaringMethod%2A> does not return `null`, then `DeclaringMethod.IsGenericMethodDefinition` returns `true`.</span></span>  
  
 <span data-ttu-id="ef7f9-271"><xref:System.Type.DeclaringType%2A> 및 <xref:System.Type.DeclaringMethod%2A> 제네릭 형식 정의 나 제네릭 메서드 정의 원래에 제네릭 형식 매개 변수에 정의 된 속성을 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-271">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition in which the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="ef7f9-272">경우는 <xref:System.Type.DeclaringMethod%2A> 속성 반환 하지 않습니다는 <xref:System.Reflection.MethodInfo>, 해당 <xref:System.Reflection.MethodInfo> 제네릭 메서드 정의 나타내며 현재 <xref:System.Type> 개체 해당 제네릭 메서드 정의의 형식 매개 변수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-272">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="ef7f9-273">경우는 <xref:System.Type.DeclaringMethod%2A> 속성에서 반환 `null`, 하면 <xref:System.Type.DeclaringType%2A> 속성은 항상 반환는 <xref:System.Type> 현재 제네릭 형식 정의 나타내는 개체 <xref:System.Type> 개체 제네릭 형식의 형식 매개 변수를 나타냅니다. 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-273">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="ef7f9-274">가져오기는 <xref:System.Type.DeclaringMethod%2A> 형식 속성에 해당 <xref:System.Type.IsGenericParameter%2A> 속성은 `false` throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-274">Getting the <xref:System.Type.DeclaringMethod%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="ef7f9-275"><xref:System.Reflection.MethodBase> 에서 반환 하는 <xref:System.Type.DeclaringMethod%2A> 속성이 <xref:System.Reflection.MethodInfo> 제네릭 메서드의 또는 <xref:System.Reflection.ConstructorInfo> 제네릭 생성자의 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-275">The <xref:System.Reflection.MethodBase> that is returned by the <xref:System.Type.DeclaringMethod%2A> property is either a <xref:System.Reflection.MethodInfo> in the case of a generic method, or a <xref:System.Reflection.ConstructorInfo> in the case of a generic constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-276">제네릭 생성자는.NET Framework 버전 2.0에서에서 지원 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-276">In the .NET Framework version 2.0, generic constructors are not supported.</span></span>  
  
 <span data-ttu-id="ef7f9-277">제네릭 리플렉션에 사용되는 용어의 고정 조건 목록은 <xref:System.Type.IsGenericType%2A> 속성 설명을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-277">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-278">다음 코드 예제에서는 제네릭 메서드가 형식 인수는 메서드를 할당 하 고 생성된 된 제네릭 메서드를 호출 하는 클래스를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-278">The following code example defines a class that has a generic method, assigns a type argument to the method, and invokes the resulting constructed generic method.</span></span> <span data-ttu-id="ef7f9-279">또한 생성된 된 메서드 및 제네릭 메서드 정의 대 한 정보를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-279">It also displays information about the generic method definition and the constructed method.</span></span> <span data-ttu-id="ef7f9-280">제네릭 메서드 정의의 형식 매개 변수에 대 한 정보를 표시 하는 경우는 `DisplayGenericMethodInfo` 메서드, 예제 코드의 값을 표시는 <xref:System.Type.DeclaringMethod%2A> 메서드의 제네릭 형식 매개 변수에 대 한 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-280">When displaying information about the type parameters of the generic method definition, in the `DisplayGenericMethodInfo` method, the example code shows the value of the <xref:System.Type.DeclaringMethod%2A> property for the method's generic type parameter.</span></span>  
  
 [!code-cpp[MethodInfo.Generics#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#1)]
 [!code-csharp[MethodInfo.Generics#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#1)]
 [!code-vb[MethodInfo.Generics#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsGenericParameter" />
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-281">현재 중첩 형식 또는 제네릭 형식 매개 변수를 선언하는 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-281">Gets the type that declares the current nested type or generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-282">현재 형식이 중첩 형식이면 바깥쪽 형식을 나타내고 현재 형식이 제네릭 형식의 형식 매개 변수이면 제네릭 형식 정의를 나타내며 현재 형식이 제네릭 메서드의 형식 매개 변수이면 제네릭 메서드를 선언하는 형식을 나타내는 <see cref="T:System.Type" /> 개체이고, 그렇지 않으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-282">A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-283">하는 경우 현재 <xref:System.Type> 개체가 나타내는 제네릭 형식의 형식 매개 변수, 제네릭 형식 정의이 속성을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-283">If the current <xref:System.Type> object represents a type parameter of a generic type, this property returns the generic type definition.</span></span>  
  
 <span data-ttu-id="ef7f9-284">하는 경우 현재 <xref:System.Type> 개체 제네릭 메서드의 형식 매개 변수를 나타내는 경우이 속성에는 제네릭 메서드 정의 포함 하는 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-284">If the current <xref:System.Type> object represents a type parameter of a generic method, this property returns the type that contains the generic method definition.</span></span> <span data-ttu-id="ef7f9-285">형식이 제네릭 경우 제네릭 형식 정의가 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-285">If the type is generic, the generic type definition is returned.</span></span> <span data-ttu-id="ef7f9-286">다음 코드의 제네릭 형식 정의 반환 하는, 즉는 <xref:System.Collections.Generic.List%601> 들어 있는 제네릭 클래스는 <xref:System.Collections.Generic.List%601.ConvertAll%2A> 제네릭 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-286">That is, the following code returns the generic type definition of the <xref:System.Collections.Generic.List%601> generic class, which contains the <xref:System.Collections.Generic.List%601.ConvertAll%2A> generic method:</span></span>  
  
 [!code-cpp[System.Type.DeclaringType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.declaringtype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.DeclaringType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.declaringtype/cs/remarks.cs#1)]
 [!code-vb[System.Type.DeclaringType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.declaringtype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="ef7f9-287">하는 경우 현재 <xref:System.Type> 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 <xref:System.Type.DeclaringType%2A> 및 <xref:System.Type.DeclaringMethod%2A> 속성 제네릭 형식 매개 변수는 제네릭 형식 정의 나 제네릭 메서드 정의 식별 합니다. 원래 정의 된:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-287">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, the <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition where the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="ef7f9-288">경우는 <xref:System.Type.DeclaringMethod%2A> 속성 반환 하지 않습니다는 <xref:System.Reflection.MethodInfo>, 해당 <xref:System.Reflection.MethodInfo> 제네릭 메서드 정의 나타내며 현재 <xref:System.Type> 개체 해당 제네릭 메서드 정의의 형식 매개 변수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-288">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="ef7f9-289">경우는 <xref:System.Type.DeclaringMethod%2A> 속성에서 반환 `null`, 하면 <xref:System.Type.DeclaringType%2A> 속성은 항상 반환는 <xref:System.Type> 현재 제네릭 형식 정의 나타내는 개체 <xref:System.Type> 개체 제네릭 형식의 형식 매개 변수를 나타냅니다. 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-289">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="ef7f9-290">가져오기는 <xref:System.Type.DeclaringType%2A> 형식 속성에 해당 <xref:System.Type.IsGenericParameter%2A> 속성은 `false` throw는 <xref:System.InvalidOperationException>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-290">Getting the <xref:System.Type.DeclaringType%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-291">이 예제에서는 파생된 클래스에서 메서드의 선언 형식이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-291">This example displays the declaring type of a method in a derived class.</span></span>  
  
 [!code-cpp[Classic Type.DeclaringType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.DeclaringType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.DeclaringType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.ReflectedType" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBinder">
      <MemberSignature Language="C#" Value="public static System.Reflection.Binder DefaultBinder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.Binder DefaultBinder" />
      <MemberSignature Language="DocId" Value="P:System.Type.DefaultBinder" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBinder As Binder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Reflection::Binder ^ DefaultBinder { System::Reflection::Binder ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Binder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-292">
            <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />에서 호출하는 적절한 멤버를 선택하기 위해 내부 규칙을 구현하는 기본 바인더에 대한 참조를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-292">Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-293">시스템에서 사용되는 기본 바인더에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-293">A reference to the default binder used by the system.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-294">공용 언어 런타임와 함께 제공 되는 기본 바인더는 가장 특수화 된 환경 제외한 모든 메시지에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-294">The default binder provided with the common language runtime is applicable in all but the most specialized circumstances.</span></span> <span data-ttu-id="ef7f9-295">파생 된 형식 제공 되는 기본 바인더의 다른 다음과 규칙을 정의 하는 바인더 해야 할 경우는 <xref:System.Reflection.Binder> 클래스를 사용 하 여 해당 형식의 인스턴스를 전달 된 `binder` 중 하나의 매개 변수는 <xref:System.Type.InvokeMember%2A> 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-295">If you need a binder that follows rules that differ from those of the supplied default binder, define a type derived from the <xref:System.Reflection.Binder> class and pass an instance of that type using the `binder` parameter of one of the <xref:System.Type.InvokeMember%2A> overloads.</span></span>  
  
 <span data-ttu-id="ef7f9-296">리플렉션 공용 형식 시스템의 액세스 가능성 규칙을 모델링합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-296">Reflection models the accessibility rules of the common type system.</span></span> <span data-ttu-id="ef7f9-297">예를 들어 호출자에 게 동일한 어셈블리에 포함 된 경우 호출자에 게 필요는 없습니다 특별 한 권한이 내부 멤버에 대 한.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-297">For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</span></span> <span data-ttu-id="ef7f9-298">그렇지 않은 경우 호출자가 <xref:System.Security.Permissions.ReflectionPermission>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-298">Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="ef7f9-299">이것은 보호 되는 멤버 조회 일치, private, 및 등입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-299">This is consistent with lookup of members that are protected, private, and so on.</span></span>  
  
 <span data-ttu-id="ef7f9-300">일반적으로 <xref:System.Reflection.Binder.ChangeType%2A> 확대 데이터 손실이 없는 변환을 수행 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-300">The general principle is that <xref:System.Reflection.Binder.ChangeType%2A> should perform only widening conversions, which never lose data.</span></span> <span data-ttu-id="ef7f9-301">확대 변환의 예로는 32 비트 부호 있는 정수는 64 비트 부호 있는 정수 값으로 하는 값을 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-301">An example of a widening conversion is converting a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</span></span> <span data-ttu-id="ef7f9-302">이 데이터가 손실 될 수 있는 축소 변환에서 구분 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-302">This is distinguished from a narrowing conversion, which may lose data.</span></span> <span data-ttu-id="ef7f9-303">축소 변환의 예로 64 비트 부호 있는 정수는 32 비트 부호 있는 정수로 변환 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-303">An example of a narrowing conversion is converting a 64-bit signed integer to a 32-bit signed integer.</span></span>  
  
 <span data-ttu-id="ef7f9-304">다음 표에서 기본 바인더에서 지 원하는 변환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-304">The following table lists the conversions supported by the default binder.</span></span>  
  
|<span data-ttu-id="ef7f9-305">원본 유형</span><span class="sxs-lookup"><span data-stu-id="ef7f9-305">Source Type</span></span>|<span data-ttu-id="ef7f9-306">대상 유형</span><span class="sxs-lookup"><span data-stu-id="ef7f9-306">Target Type</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="ef7f9-307">모든 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-307">Any type</span></span>|<span data-ttu-id="ef7f9-308">해당 기본 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-308">Its base type.</span></span>|  
|<span data-ttu-id="ef7f9-309">모든 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-309">Any type</span></span>|<span data-ttu-id="ef7f9-310">구현 하는 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-310">The interface it implements.</span></span>|  
|<span data-ttu-id="ef7f9-311">Char</span><span class="sxs-lookup"><span data-stu-id="ef7f9-311">Char</span></span>|<span data-ttu-id="ef7f9-312">Unt16, UInt32, Int32, UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="ef7f9-312">Unt16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="ef7f9-313">Byte</span><span class="sxs-lookup"><span data-stu-id="ef7f9-313">Byte</span></span>|<span data-ttu-id="ef7f9-314">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="ef7f9-314">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="ef7f9-315">SByte</span><span class="sxs-lookup"><span data-stu-id="ef7f9-315">SByte</span></span>|<span data-ttu-id="ef7f9-316">Int16, Int32, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="ef7f9-316">Int16, Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="ef7f9-317">UInt16</span><span class="sxs-lookup"><span data-stu-id="ef7f9-317">UInt16</span></span>|<span data-ttu-id="ef7f9-318">UInt32, Int32, UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="ef7f9-318">UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="ef7f9-319">Int16</span><span class="sxs-lookup"><span data-stu-id="ef7f9-319">Int16</span></span>|<span data-ttu-id="ef7f9-320">Int32, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="ef7f9-320">Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="ef7f9-321">UInt32</span><span class="sxs-lookup"><span data-stu-id="ef7f9-321">UInt32</span></span>|<span data-ttu-id="ef7f9-322">UInt64, Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="ef7f9-322">UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="ef7f9-323">Int32</span><span class="sxs-lookup"><span data-stu-id="ef7f9-323">Int32</span></span>|<span data-ttu-id="ef7f9-324">Int64, Single, Double</span><span class="sxs-lookup"><span data-stu-id="ef7f9-324">Int64, Single, Double</span></span>|  
|<span data-ttu-id="ef7f9-325">UInt64</span><span class="sxs-lookup"><span data-stu-id="ef7f9-325">UInt64</span></span>|<span data-ttu-id="ef7f9-326">Single, Double</span><span class="sxs-lookup"><span data-stu-id="ef7f9-326">Single, Double</span></span>|  
|<span data-ttu-id="ef7f9-327">Int64</span><span class="sxs-lookup"><span data-stu-id="ef7f9-327">Int64</span></span>|<span data-ttu-id="ef7f9-328">Single, Double</span><span class="sxs-lookup"><span data-stu-id="ef7f9-328">Single, Double</span></span>|  
|<span data-ttu-id="ef7f9-329">Single</span><span class="sxs-lookup"><span data-stu-id="ef7f9-329">Single</span></span>|<span data-ttu-id="ef7f9-330">Double</span><span class="sxs-lookup"><span data-stu-id="ef7f9-330">Double</span></span>|  
|<span data-ttu-id="ef7f9-331">비참조 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-331">Non-reference</span></span>|<span data-ttu-id="ef7f9-332">참조로 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-332">By-reference.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-333">다음 예제에서 기본 바인더를 가져옵니다는 `DefaultBinder` 속성을 전달 하 여 MyClass의 멤버를 호출 하 고는 `DefaultBinder` 값에 대 한 매개 변수로 <xref:System.Type.InvokeMember%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-333">The following example gets the default binder from the `DefaultBinder` property, and invokes a member of MyClass by passing the `DefaultBinder` value as a parameter to <xref:System.Type.InvokeMember%2A>.</span></span>  
  
 [!code-cpp[Type_DefaultBinder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_DefaultBinder/CPP/type_defaultbinder.cpp#1)]
 [!code-csharp[Type_DefaultBinder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_DefaultBinder/CS/type_defaultbinder.cs#1)]
 [!code-vb[Type_DefaultBinder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_DefaultBinder/VB/type_defaultbinder.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public static readonly char Delimiter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char Delimiter" />
      <MemberSignature Language="DocId" Value="F:System.Type.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Delimiter As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char Delimiter;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-334">
            <see cref="T:System.Type" />의 네임스페이스에 있는 이름을 구분합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-334">Separates names in the namespace of the <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="ef7f9-335">이 필드는 읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-335">This field is read-only.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyTypes">
      <MemberSignature Language="C#" Value="public static readonly Type[] EmptyTypes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Type[] EmptyTypes" />
      <MemberSignature Language="DocId" Value="F:System.Type.EmptyTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EmptyTypes As Type() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;Type ^&gt; ^ EmptyTypes;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-336">
            <see cref="T:System.Type" /> 형식의 빈 배열을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-336">Represents an empty array of type <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="ef7f9-337">이 필드는 읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-337">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ef7f9-338">다음 코드 예제는 `EmptyTypes` 중 하나에 사용 된 필드는 `GetConstructor` 메서드 매개 변수가 없는 생성자를 가져오기.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-338">The following code example shows the `EmptyTypes` field used in one of the `GetConstructor` methods to get a constructor that takes no parameters.</span></span>  
  
 [!code-cpp[Classic Type.EmptyTypes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.EmptyTypes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CS/source.cs#1)]
 [!code-vb[Classic Type.EmptyTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-339">현재 <see cref="T:System.Type" />의 내부 시스템 형식이 지정된 <see cref="T:System.Object" /> 또는 <see cref="T:System.Type" />의 내부 시스템 형식과 동일한지 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-339">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Object" /> or <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="ef7f9-340">현재 <see cref="T:System.Type" />의 내부 시스템 형식과 비교할 내부 시스템 형식이 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-340">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="ef7f9-341">성공적인 비교를 위해 <c>o</c>는 캐스팅되거나 <see cref="T:System.Type" /> 형식의 개체로 변환될 수 있어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-341">For the comparison to succeed, <c>o</c> must be able to be cast or converted to an object of type   <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-342">현재 <see cref="T:System.Type" /> 개체의 내부 시스템 형식이 지정된 <see cref="T:System.Object" />의 내부 시스템 형식과 동일한지 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-342">Determines if the underlying system type of the current <see cref="T:System.Type" /> object is the same as the underlying system type of the specified <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-343">
            <paramref name="o" />의 내부 시스템 형식이 현재 <see cref="T:System.Type" />의 내부 시스템 형식과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-343">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ef7f9-344">다음 경우에도 이 메서드는 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-344">This method also returns <see langword="false" /> if: .</span>
          </span>  
  
-   <span data-ttu-id="ef7f9-345"><paramref name="o" />가 <see langword="null" />인 경우</span><span class="sxs-lookup"><span data-stu-id="ef7f9-345"><paramref name="o" /> is <see langword="null" />.</span></span>  
  
-   <span data-ttu-id="ef7f9-346"><paramref name="o" />는 캐스팅되거나 <see cref="T:System.Type" /> 개체로 변환될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-346"><paramref name="o" /> cannot be cast or converted to a <see cref="T:System.Type" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-347">이 메서드는 <xref:System.Object.Equals%2A?displayProperty=nameWithType>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-347">This method overrides <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ef7f9-348">캐스팅 `o` 유형의 개체로 <xref:System.Type> 호출는 <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-348">It casts `o` to an object of type <xref:System.Type> and calls the <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-349">다음 예제에서는 <xref:System.Type.Equals%28System.Object%29> 다양 한 비교할 <xref:System.Type> 개체 다양 한 인스턴스 <xref:System.Object> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-349">The following example uses <xref:System.Type.Equals%28System.Object%29> to compare various <xref:System.Type> object instances with various <xref:System.Object> instances.</span></span>  
  
 [!code-csharp[System.Type.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.Equals/cs/EqualsEx1.cs#1)]
 [!code-vb[System.Type.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.Equals/vb/EqualsEx1.vb#1)]  
  
 <span data-ttu-id="ef7f9-350">이 예제에 대 한 주목할 만한 특히 두 가지 사항은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-350">Two things are particularly worth noting about the example:</span></span>  
  
-   <span data-ttu-id="ef7f9-351">비교는 <xref:System.Type> 까지의 정수를 나타내는 개체는 <xref:System.Reflection.TypeInfo> 반환 하는 정수를 나타내는 개체 `true` 때문에 <xref:System.Reflection.TypeInfo> 에서 파생 됩니다 <xref:System.Type>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-351">The comparison of a <xref:System.Type> object that represents an integer with a <xref:System.Reflection.TypeInfo> object that represents an integer return `true` because <xref:System.Reflection.TypeInfo> is derived from <xref:System.Type>.</span></span>  
  
-   <span data-ttu-id="ef7f9-352">비교는 <xref:System.Type> 을 나타내는 개체는 <xref:System.Collections.Generic.IList%601> 개체 (개방형 제네릭 형식)는 `List(Of String)` 개체 (폐쇄형된 제네릭 형식)를 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-352">The comparison of a  <xref:System.Type> object that represents a <xref:System.Collections.Generic.IList%601> object (an open generic type) with a `List(Of String)` object (a closed generic type) returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Type ^ o);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="ef7f9-353">현재 <see cref="T:System.Type" />의 내부 시스템 형식과 비교할 내부 시스템 형식이 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-353">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-354">현재 <see cref="T:System.Type" />의 내부 시스템 형식이 지정된 <see cref="T:System.Type" />의 내부 시스템 형식과 동일한지 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-354">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-355">
            <paramref name="o" />의 내부 시스템 형식이 현재 <see cref="T:System.Type" />의 내부 시스템 형식과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-355">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ef7f9-356">다음 예제에서는 `Equals` 두 형식을 비교 하려면.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-356">The following example uses `Equals` to compare two types.</span></span>  
  
 [!code-csharp[Classic Type.Equals1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/CS/source.cs#1)]
 [!code-vb[Classic Type.Equals1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttribute">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterAttribute;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterAttribute" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterAttribute As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterAttribute;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-357">특성에 사용되는 멤버 필터를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-357">Represents the member filter used on attributes.</span>
          </span>
          <span data-ttu-id="ef7f9-358">이 필드는 읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-358">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-359">사용 되는 대리자에 대 한 참조를 보유 하는이 필드는 <xref:System.Type.FindMembers%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-359">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="ef7f9-360">이 대리자에 의해 캡슐화 된 메서드는 두 개의 매개 변수: 첫 번째는는 <xref:System.Reflection.MemberInfo> 개체가 고 두 번째가는 `Object`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-360">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="ef7f9-361">메서드를 확인 여부는 `MemberInfo` 로 지정 된 기준과 일치 하는 개체는 `Object`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-361">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="ef7f9-362">`Object` 클래스에 필드 중 하나의 값을 할당할 수 있습니다 <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, 또는 <xref:System.Reflection.MethodImplAttributes>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-362">The `Object` may be assigned the value of any one of the fields on the classes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, or <xref:System.Reflection.MethodImplAttributes>.</span></span>  
  
 <span data-ttu-id="ef7f9-363">예를 들어는 `Object` 에서 필드의 값을 할당 `FieldAttributes` 공용입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-363">For example, the `Object` can be assigned the value of a field from `FieldAttributes` such as Public.</span></span> <span data-ttu-id="ef7f9-364">이 경우,는 `FilterAttribute` 대리자를 호출 반환 `true` 메서드가 표현 하는 경우에는 `MemberInfo` 개체 메타 데이터에 공용 필드가 특성으로 데코레이팅되 어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-364">In that case, when the `FilterAttribute` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object is decorated with the public field attribute in metadata.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-365">다음 예제에서는 가져옵니다는 `FilterAttribute` 대리자를 매개 변수로 전달는 <xref:System.Type.FindMembers%2A> 메서드를 지정 된 멤버와 해당 특성을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-365">The following example gets the `FilterAttribute` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the specified members and their attributes.</span></span>  
  
 [!code-cpp[Type_FilterAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterAttribute/CPP/type_filterattribute.cpp#1)]
 [!code-csharp[Type_FilterAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterAttribute/CS/type_filterattribute.cs#1)]
 [!code-vb[Type_FilterAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterAttribute/VB/type_filterattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterName">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterName" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterName As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterName;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-366">이름에 사용되는 멤버 필터(대/소문자 구분)를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-366">Represents the case-sensitive member filter used on names.</span>
          </span>
          <span data-ttu-id="ef7f9-367">이 필드는 읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-367">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-368">사용 되는 대리자에 대 한 참조를 보유 하는이 필드는 <xref:System.Type.FindMembers%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-368">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="ef7f9-369">이 대리자에 의해 캡슐화 된 메서드는 두 개의 매개 변수: 첫 번째는는 <xref:System.Reflection.MemberInfo> 개체가 고 두 번째가는 `Object`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-369">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="ef7f9-370">메서드를 확인 여부는 `MemberInfo` 로 지정 된 기준과 일치 하는 개체는 `Object`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-370">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="ef7f9-371">`Object` 후행 포함 될 수 있는 문자열 값이 할당은 "\*" 와일드 카드 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-371">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="ef7f9-372">유일한 와일드 카드 최종 문자열 일치가 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-372">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="ef7f9-373">예를 들어는 `Object` "바이트 \*" 값이 할당 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-373">For example, the `Object` may be assigned the value "Byte\*".</span></span> <span data-ttu-id="ef7f9-374">이 경우,는 `FilterName` 대리자를 호출 반환 `true` 메서드가 표현 하는 경우에는 `MemberInfo` 개체에 이름이 "바이트"로 시작 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-374">In that case, when the `FilterName` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object has a name that begins with "Byte".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-375">다음 코드 예제에서는 연결 된 사용자 정의 메서드를 가져옵니다 `Application` 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-375">The following code example gets the methods associated with the user-defined `Application` type.</span></span>  
  
 [!code-cpp[Classic Type.FilterName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.FilterName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CS/source.cs#1)]
 [!code-vb[Classic Type.FilterName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.FilterName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterNameIgnoreCase">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterNameIgnoreCase;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterNameIgnoreCase" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterNameIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterNameIgnoreCase As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterNameIgnoreCase;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-376">이름에 사용되는 멤버 필터(대/소문자를 구분하지 않음)를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-376">Represents the case-insensitive member filter used on names.</span>
          </span>
          <span data-ttu-id="ef7f9-377">이 필드는 읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-377">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-378">사용 되는 대리자에 대 한 참조를 보유 하는이 필드는 <xref:System.Type.FindMembers%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-378">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="ef7f9-379">이 대리자에 의해 캡슐화 된 메서드는 두 개의 매개 변수: 첫 번째는는 <xref:System.Reflection.MemberInfo> 개체가 고 두 번째가는 `Object`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-379">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="ef7f9-380">메서드를 확인 여부는 `MemberInfo` 로 지정 된 기준과 일치 하는 개체는 `Object`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-380">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="ef7f9-381">`Object` 후행 포함 될 수 있는 문자열 값이 할당은 "\*" 와일드 카드 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-381">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="ef7f9-382">유일한 와일드 카드 최종 문자열 일치가 지원 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-382">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="ef7f9-383">예를 들어는 `Object` "바이트 \*" 값이 할당 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-383">For example, the `Object` may be assigned the value "ByTe\*".</span></span> <span data-ttu-id="ef7f9-384">이 경우 때는 `FilterName` 대리자 호출 되 면 true를 반환 합니다만가 나타내는 메서드가 `MemberInfo` 개체 이름이 지정 된 대/소문자 무시 "바이트"로 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-384">In that case, when the `FilterName` delegate is invoked, it will return true only if the method represented by the `MemberInfo` object has a name that begins with "byte", ignoring case.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-385">다음 예제에서는 가져옵니다는 `MemberFilter` 대리자를 매개 변수로 전달는 <xref:System.Type.FindMembers%2A> 메서드, 메서드 및 해당 특성의 표시는 `String` 대/소문자를 무시 하 고 문자 "c"로 시작 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-385">The following example gets the `MemberFilter` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the methods and their attributes of the `String` class that begin with the letter "c", disregarding the case.</span></span>  
  
 [!code-cpp[Type_FilterNameIgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CPP/type_filternameignorecase.cpp#1)]
 [!code-csharp[Type_FilterNameIgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CS/type_filternameignorecase.cs#1)]
 [!code-vb[Type_FilterNameIgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterNameIgnoreCase/VB/type_filternameignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public virtual Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter">
          <span data-ttu-id="ef7f9-386">인터페이스를 <c>filterCriteria</c>에 대해 비교하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-386">The delegate that compares the interfaces against <c>filterCriteria</c>.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="ef7f9-387">반환되는 배열에 인터페이스가 포함되어야 하는지를 결정하는 검색 조건입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-387">The search criteria that determines whether an interface should be included in the returned array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-388">현재 <see cref="T:System.Type" />에 의해 구현되거나 상속되는 인터페이스의 필터링된 목록을 나타내는 <see cref="T:System.Type" /> 개체의 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-388">Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-389">현재 <see cref="T:System.Type" />에 의해 구현되거나 상속된 인터페이스의 필터링된 목록을 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다. 해당 필터와 일치하는 인터페이스 중에서 현재 <see cref="T:System.Type" />에 의해 구현되거나 상속된 인터페이스가 없는 경우에는 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-389">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />, or an empty array of type <see cref="T:System.Type" /> if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-390">이 메서드는 파생된 클래스에서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-390">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="ef7f9-391"><xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> 및 <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> 대리자 제공한는 <xref:System.Reflection.Module?displayProperty=nameWithType> 클래스 사용할 수도 있습니다를의 법률는 <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> 위임 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-391">The <xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> and <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> delegates supplied by the <xref:System.Reflection.Module?displayProperty=nameWithType> class may also be used, in lieu of the <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> delegate.</span></span>  
  
 <span data-ttu-id="ef7f9-392">이 클래스에서 구현 된 인터페이스의 모든 값은이 클래스 자체 또는 기본 클래스에서 선언 하는지 여부를 검색 하는 동안 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-392">All of the interfaces implemented by this class are considered during the search, whether declared by a base class or this class itself.</span></span>  
  
 <span data-ttu-id="ef7f9-393">이 메서드는 반환 인터페이스가 구현 하는 각 인터페이스에서 일치 하는 모든 뿐만 아니라 각 클래스를 구현 하는 일치 하는 인터페이스의 각 기본 클래스 계층 구조, 검색 (즉, 일치 하는 인터페이스의 전이적 closure 값이 반환).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-393">This method searches the base class hierarchy, returning each of the matching interfaces each class implements as well as all the matching interfaces each of those interfaces implements (that is, the transitive closure of the matching interfaces is returned).</span></span> <span data-ttu-id="ef7f9-394">중복 된 인터페이스가 없는 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-394">No duplicate interfaces are returned.</span></span>  
  
 <span data-ttu-id="ef7f9-395">하는 경우 현재 <xref:System.Type> 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 <xref:System.Type.FindInterfaces%2A> 형식 매개 변수에 제약 조건에 선언 된 모든 인터페이스를 검색 하 고 모든 인터페이스는 인터페이스를 통해 상속 제약 조건에서 선언 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-395">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, <xref:System.Type.FindInterfaces%2A> searches all the interfaces declared in the constraints on the type parameter, and all interfaces inherited through the interfaces declared in the constraints.</span></span> <span data-ttu-id="ef7f9-396">하는 경우 현재 <xref:System.Type> 제네릭 형식의 형식 인수를 나타내는 <xref:System.Type.FindInterfaces%2A> 제약 조건과 일치 하는지 여부는 형식에서 구현 된 모든 인터페이스를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-396">If the current <xref:System.Type> represents a type argument of a generic type, <xref:System.Type.FindInterfaces%2A> searches all the interfaces implemented by the type, whether or not they match constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-397"><xref:System.Type.FindInterfaces%2A> 제네릭 하지 않은 형식에도 제네릭 인터페이스를 반환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-397"><xref:System.Type.FindInterfaces%2A> can return generic interfaces, even on types that are not generic.</span></span> <span data-ttu-id="ef7f9-398">예를 들어 제네릭이 아닌 형식 구현할 수 있습니다 `IEnumerable<int>` (`IEnumerable(Of Integer)` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-398">For example, a nongeneric type might implement `IEnumerable<int>` (`IEnumerable(Of Integer)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-399">다음 예제에서는 지정된 된 인터페이스 구현 또는 지정 된 형식에서 상속 및 인터페이스 이름을 표시 한 다음를 찾습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-399">The following example finds the specified interface implemented or inherited by the specified type, and then displays the interface names.</span></span>  
  
 [!code-cpp[Type_FindInterfaces#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindInterfaces/CPP/type_findinterfaces.cpp#1)]
 [!code-csharp[Type_FindInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindInterfaces/CS/type_findinterfaces.cs#1)]
 [!code-vb[Type_FindInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindInterfaces/VB/type_findinterfaces.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-400">
            <paramref name="filter" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-400">
              <paramref name="filter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ef7f9-401">정적 이니셜라이저가 호출되고 예외를 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-401">A static initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.Module" />
        <altmember cref="T:System.Reflection.TypeFilter" />
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.GetInterfaces" />
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType">
          <span data-ttu-id="ef7f9-402">검색할 멤버 형식을 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-402">An object that indicates the type of member to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-403">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-403">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-404">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-404">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-405">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-405">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="ef7f9-406">비교를 수행하여 현재 검사 중인 멤버가 <c>filterCriteria</c>와 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />를 반환하는 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-406">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <c>filterCriteria</c> and <see langword="false" /> otherwise.</span>
          </span>
          <span data-ttu-id="ef7f9-407">이 클래스에서 제공하는 <see langword="FilterAttribute" />, <see langword="FilterName" /> 및 <see langword="FilterNameIgnoreCase" /> 대리자를 사용할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-407">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span>
          </span>
          <span data-ttu-id="ef7f9-408">첫 번째 대리자는 <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> 및 <see langword="MethodImplAttributes" />의 필드를 검색 조건으로 사용하고 다른 두 대리자는 <see langword="String" /> 개체를 검색 조건으로 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-408">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="ef7f9-409">
            <see langword="MemberInfo" /> 개체의 배열에 멤버가 반환되는지를 결정하는 검색 조건입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-409">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span>
          </span>
          <span data-ttu-id="ef7f9-410">
            <see langword="FieldAttributes" />, <see langword="MethodAttributes" /> 및 <see langword="MethodImplAttributes" />의 필드는 이 클래스에서 제공하는 <see langword="FilterAttribute" /> 대리자와 함께 사용할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-410">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-411">지정된 멤버 형식의 <see cref="T:System.Reflection.MemberInfo" /> 개체에 대한 필터링된 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-411">Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-412">지정된 멤버 형식의 <see cref="T:System.Reflection.MemberInfo" /> 개체에 대한 필터링된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-412">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
          <span data-ttu-id="ef7f9-413">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-413">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-414">현재 <see cref="T:System.Reflection.MemberInfo" />에 필터 조건과 일치하는 <see cref="T:System.Type" /> 형식의 멤버가 없으면 <paramref name="memberType" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-414">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-415">이 메서드는 파생된 클래스에서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-415">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="ef7f9-416">구성원 속성, 메서드, 필드, 이벤트 및 등을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-416">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="ef7f9-417">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 멤버를 정의 하는 검색에 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-417">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-418">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-418">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-419">지정 `BindingFlags.Instance` 검색에 인스턴스 멤버를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-419">Specify `BindingFlags.Instance` to include instance members in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-420">지정 `BindingFlags.Static` 검색에 정적 멤버를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-420">Specify `BindingFlags.Static` to include static members in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-421">지정 `BindingFlags.Public` 검색에 공용 멤버를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-421">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-422">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 멤버 (즉, 전용, 내부 및 보호 된 멤버)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-422">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
 <span data-ttu-id="ef7f9-423">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-423">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-424">`BindingFlags.DeclaredOnly` 에 선언 된 멤버만 검색 하는 <xref:System.Type>, 상속 된 멤버가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-424">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-425">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-425">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-426">유효한 값에 대 한 <xref:System.Type.MemberType%2A> 에 정의 된 <xref:System.Reflection.MemberInfo>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-426">Valid values for <xref:System.Type.MemberType%2A> are defined in <xref:System.Reflection.MemberInfo>.</span></span> <span data-ttu-id="ef7f9-427">이러한 멤버가 없으면 빈 배열이 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-427">If no such members are found, an empty array is returned.</span></span>  
  
 <span data-ttu-id="ef7f9-428">지정 해야이 메서드를 사용 하 여 클래스 이니셜라이저 (.cctor)을 가져오려면 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-428">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="ef7f9-429">클래스 이니셜라이저를 사용 하 여 얻을 수 있습니다는 <xref:System.Type.TypeInitializer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-429">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="ef7f9-430">하는 경우 현재 <xref:System.Type> 제네릭 형식 또는 제네릭 메서드 형식 매개 변수를 나타내는 <xref:System.Type.FindMembers%2A> 클래스 제약 조건 및 인터페이스 제약 조건 형식 매개 변수의 선언 된 모든 멤버를 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-430">If the current <xref:System.Type> represents a type parameter of a generic type or generic method, <xref:System.Type.FindMembers%2A> processes any members declared by the class constraint and the interface constraints of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-431">다음 예제에서는 지정 된 검색 조건과 일치 하는 클래스에서 모든 멤버를 찾아서 다음 일치 하는 멤버를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-431">The following example finds all the members in a class that match the specified search criteria, and then displays the matched members.</span></span>  
  
 [!code-cpp[Type_FindMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindMembers/CPP/type_findmembers.cpp#1)]
 [!code-csharp[Type_FindMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindMembers/CS/type_findmembers.cs#1)]
 [!code-vb[Type_FindMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindMembers/VB/type_findmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-432">
            <paramref name="filter" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-432">
              <paramref name="filter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public abstract string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ FullName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.FullName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-433">해당 네임스페이스는 포함하지만 어셈블리는 포함하지 않는 형식의 정규화된 이름을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-433">Gets the fully qualified name of the type, including its namespace but not its assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-434">해당 네임스페이스는 포함하지만 어셈블리는 포함하지 않는 형식의 정규화된 이름이거나 현재 인스턴스가 제네릭 형식 매개 변수, 배열 형식, 포인터 형식, 형식 매개 변수에 기초한 <see langword="null" /> 형식 또는 제네릭 형식 정의가 아니지만 확인되지 않은 형식 매개 변수가 들어 있는 제네릭 형식인 경우에는 <see langword="byref" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-434">The fully qualified name of the type, including its namespace but not its assembly; or <see langword="null" /> if the current instance represents a generic type parameter, an array type, pointer type, or <see langword="byref" /> type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-435">정규화 된 이름 예를 들어는 <xref:System.String> 형식이 `System.String`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-435">For example, the fully qualified name of the <xref:System.String> type is `System.String`.</span></span> <span data-ttu-id="ef7f9-436">이와 반대로 반환 하는 어셈블리의 정규화 된 이름은 <xref:System.Type.AssemblyQualifiedName%2A> 전체 이름과 함께 전체 어셈블리 이름으로 구성 되는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-436">Contrast this with the assembly-qualified name returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, which consists of the full name plus the full assembly name.</span></span>  
  
 <span data-ttu-id="ef7f9-437">문자열에 형식 인수에서 반환 된 현재 형식의 폐쇄형된 제네릭 형식을 나타내면는 <xref:System.Type.FullName%2A> 속성을 제네릭 형식 자체의 문자열 표현을 해당 전체에서 정규화 되지 않은 경우에 전체 어셈블리 이름으로 정규화 됩니다 어셈블리 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-437">If the current type represents a closed generic type, the type arguments in the string returned by the <xref:System.Type.FullName%2A> property are qualified by their full assembly name, even though the string representation of the generic type itself is not qualified by its full assembly name.</span></span> <span data-ttu-id="ef7f9-438">다음 예제에서는 하나에 대 한 제네릭 형식 정의 나타내는 형식의 폐쇄형된 제네릭 형식을 나타내는 FullName 속성의 차이점을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-438">The following example illustrates the difference in the FullName property for a type that represents generic type definition and one that represents a closed generic type.</span></span>  
  
 [!code-csharp[System.Type.FullName#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/fullnameex1.cs#2)]
 [!code-vb[System.Type.FullName#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/fullnameex1.vb#2)]  
  
 <span data-ttu-id="ef7f9-439">이 속성은 반환 `null` 경우:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-439">This property returns `null` if:</span></span>  
  
-   <span data-ttu-id="ef7f9-440">현재 <xref:System.Type> 개체는 제네릭 형식의 형식 매개 변수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-440">The current <xref:System.Type> object represents a type parameter of a generic type.</span></span>  
  
     <span data-ttu-id="ef7f9-441">다음 예제에서는 검색의 형식 매개 변수는 <xref:System.Nullable%601> 유형 및 표시 하는 시도 해당 <xref:System.Type.FullName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-441">The following example retrieves the type parameter of the <xref:System.Nullable%601> type and attempts to display its <xref:System.Type.FullName%2A> property.</span></span>  
  
     [!code-csharp[System.Type.FullName#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname3.cs#3)]
     [!code-vb[System.Type.FullName#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/Fullname3.vb#3)]  
  
-   <span data-ttu-id="ef7f9-442">현재 <xref:System.Type> 개체 포인터 형식, 배열 형식, 나타냅니다 또는 `byref` 제네릭 형식 매개 변수를 기반으로 하는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-442">The current <xref:System.Type> object represents an array type, a pointer  type, or a `byref` type that is based on a generic type parameter.</span></span>  
  
     <span data-ttu-id="ef7f9-443">다음 예제에서는 제네릭 형식 정의 `Generictype1<T>`, 세 가지 방법으로: `Display(T[])`, T; 형식의 배열을 전달 되는 `HandleT(T)`, T 개체; 전달 되 고 `ChangeValue(ref T)`, T 개체 참조로 전달 되는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-443">The following example defines a generic type, `Generictype1<T>`, with three methods: `Display(T[])`, which is passed an array of type T; `HandleT(T)`, which is passed a T object; and `ChangeValue(ref T)`, which is passed a T object by reference.</span></span> <span data-ttu-id="ef7f9-444">C# 및 Visual Basic 허용 하지 않으므로 T에 대 한 포인터로 정의할 수는 `HandleT` 메서드를 호출을 해야는 <xref:System.Type.MakePointerType%2A> 에서 메서드는 <xref:System.Type> 를 제네릭 형식에 대 한 포인터를 만드는 메서드의 매개 변수 형식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-444">Because C# and Visual Basic do not allow us to define T as a pointer in the `HandleT` method, we have to call the <xref:System.Type.MakePointerType%2A> method on the <xref:System.Type> object that represents the method's parameter type to create a pointer to a generic type.</span></span> <span data-ttu-id="ef7f9-445">이 예제에서 출력 하는 세 가지 경우 모두 보여 줍니다는 <xref:System.Type.FullName%2A> 속성은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-445">The output from the example shows that in all three cases, the <xref:System.Type.FullName%2A> property is `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname4.cs#4)]
     [!code-vb[System.Type.FullName#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName4.vb#4)]  
  
-   <span data-ttu-id="ef7f9-446">현재 형식이 제네릭 형식 매개 변수를 특정 형식으로 바뀌지 않은 포함 (즉,는 <xref:System.Type.ContainsGenericParameters%2A> 속성에서 반환 `true`), 하지만 형식이 제네릭 형식 정의 되지 않습니다 (즉,는 <xref:System.Type.IsGenericTypeDefinition%2A> 속성 반환 `false`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-446">The current type contains generic type parameters that have not been replaced by specific types (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`), but the type is not a generic type definition (that is, the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `false`</span></span>  
  
     <span data-ttu-id="ef7f9-447">다음 예에서 `Derived<T>` 에서 상속 `Base<T>`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-447">In the following example, `Derived<T>` inherits from `Base<T>`.</span></span> <span data-ttu-id="ef7f9-448"><xref:System.Type.BaseType%2A> 속성 가져옵니다는 <xref:System.Type> 의 기본 형식을 나타내는 개체 `Derived<T>`, 및 해당 <xref:System.Type.FullName%2A> 속성에서 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-448">The <xref:System.Type.BaseType%2A> property obtains the  <xref:System.Type> object that represents the base type of `Derived<T>`, and its <xref:System.Type.FullName%2A> property returns `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname5.cs#5)]
     [!code-vb[System.Type.FullName#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName5.vb#5)]  
  
     <span data-ttu-id="ef7f9-449">가져오려는 <xref:System.Type.FullName%2A> 없는 `null`를 사용할 수 있습니다는 <xref:System.Type.GetGenericTypeDefinition%2A> 예제와 같이 제네릭 형식 정의 가져올 메서드를 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-449">To get a <xref:System.Type.FullName%2A> that is not `null`, you can use the <xref:System.Type.GetGenericTypeDefinition%2A> method to get the generic type definition, as the example illustrates.</span></span>  
  
 <span data-ttu-id="ef7f9-450">이 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-450">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-451">다음 예제에서는 지정 된 형식의 전체 이름을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-451">The following example displays the full name of the specified type.</span></span>  
  
 [!code-cpp[TestFullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestFullName/CPP/TestFullName.cpp#1)]
 [!code-csharp[TestFullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestFullName/CS/testfullname.cs#1)]
 [!code-vb[TestFullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestFullName/VB/testfullname.vb#1)]  
  
 <span data-ttu-id="ef7f9-452">반환 된 문자열을 비교 하는 다음 예제는 <xref:System.Type.ToString%2A> 메서드 및 `Name`, <xref:System.Type.FullName%2A>, 및 <xref:System.Type.AssemblyQualifiedName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-452">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-453">현재 제네릭 형식 매개 변수의 공 분산과 특수 제약 조건을 설명하는 <see cref="T:System.Reflection.GenericParameterAttributes" /> 플래그의 조합을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-453">Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-454">현재 제네릭 형식 매개 변수의 공 분산 및 특수 제약 조건을 설명하는 <see cref="T:System.Reflection.GenericParameterAttributes" /> 값의 비트 조합입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-454">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-455">이 속성의 값 현재 제네릭 형식 매개 변수는 공변, 여부를 설명 하는 플래그 및 특수 제약 조건을 설명 하는 플래그를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-455">The value of this property contains flags that describe whether the current generic type parameter is covariant, and flags that describe any special constraints.</span></span> <span data-ttu-id="ef7f9-456">사용 하 여는 <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> 값을 공 분산 플래그를 선택 하 고 사용 된 <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> 제약 조건 플래그를 선택 하는 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-456">Use the <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> value to select the covariance flags, and use the <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> value to select the constraint flags.</span></span>  
  
 <span data-ttu-id="ef7f9-457">제네릭 리플렉션에 사용되는 용어의 고정 조건 목록은 <xref:System.Type.IsGenericType%2A> 속성 설명을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-457">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-458">다음 코드 예제에서는 제네릭 형식 정의 `Test` 제약 조건이 서로 다른 두 개의 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-458">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="ef7f9-459">제약 조건을 사용 하 여 검사 프로그램을 실행 하는 경우는 <xref:System.Type.GenericParameterAttributes%2A> 속성 및 <xref:System.Type.GetGenericParameterConstraints%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-459">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ef7f9-460">현재 <see cref="T:System.Type" /> 개체가 제네릭 형식 매개 변수가 아닌 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-460">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          </span>
          <span data-ttu-id="ef7f9-461">즉, <see cref="P:System.Type.IsGenericParameter" /> 속성이 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-461">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-462">호출된 메서드가 기본 클래스에서 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-462">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.IsGenericParameter" />
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public virtual int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-463">
            <see cref="T:System.Type" /> 개체가 제네릭 형식이나 제네릭 메서드의 형식 매개 변수를 나타내는 경우, 해당 매개 변수가 선언된 제네릭 형식 또는 메서드의 형식 매개 변수 목록에서 해당 형식 매개 변수가 있는 위치를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-463">Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-464">형식 매개 변수가 정의된 제네릭 형식 또는 메서드의 형식 매개 변수 목록에서 해당 형식 매개 변수가 있는 위치입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-464">The position of a type parameter in the type parameter list of the generic type or method that defines the parameter.</span>
          </span>
          <span data-ttu-id="ef7f9-465">위치 번호는 0부터 시작합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-465">Position numbers begin at 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-466"><xref:System.Type.GenericParameterPosition%2A> 속성의 위치를 반환 형식 매개 변수는 제네릭 형식 정의 나 제네릭 메서드 정의의 매개 변수 목록에서 형식 매개 변수가 원래 정의 된 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-466">The <xref:System.Type.GenericParameterPosition%2A> property returns the position of a type parameter in the parameter list of the generic type definition or generic method definition where the type parameter was originally defined.</span></span> <span data-ttu-id="ef7f9-467"><xref:System.Type.DeclaringType%2A> 및 <xref:System.Type.DeclaringMethod%2A> 제네릭 형식 또는 메서드 정의 식별 하는 속성:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-467">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type or method definition:</span></span>  
  
-   <span data-ttu-id="ef7f9-468">경우는 <xref:System.Type.DeclaringMethod%2A> 속성 반환 하지 않습니다는 <xref:System.Reflection.MethodInfo>, 해당 <xref:System.Reflection.MethodInfo> 제네릭 메서드 정의 나타내며 현재 <xref:System.Type> 개체 해당 제네릭 메서드 정의의 형식 매개 변수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-468">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="ef7f9-469">경우는 <xref:System.Type.DeclaringMethod%2A> 속성에서 반환 `null`, 하면 <xref:System.Type.DeclaringType%2A> 속성은 항상 반환는 <xref:System.Type> 현재 제네릭 형식 정의 나타내는 개체 <xref:System.Type> 개체 제네릭 형식의 형식 매개 변수를 나타냅니다. 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-469">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
 <span data-ttu-id="ef7f9-470">값에 대 한 올바른 컨텍스트를 제공 하는 <xref:System.Type.GenericParameterPosition%2A> 속성을 해야 하는 제네릭 형식 또는 형식 매개 변수가 속한 메서드를 식별 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-470">To provide the correct context for the value of the <xref:System.Type.GenericParameterPosition%2A> property, it is necessary to identify the generic type or method a type parameter belongs to.</span></span> <span data-ttu-id="ef7f9-471">예를 들어 제네릭 메서드의 반환 값 `GetSomething` 다음 코드에서:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-471">For example, consider the return value of the generic method `GetSomething` in the following code:</span></span>  
  
 [!code-cpp[System.Type.GenericParameterPosition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.genericparameterposition/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.GenericParameterPosition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.genericparameterposition/cs/remarks.cs#1)]
 [!code-vb[System.Type.GenericParameterPosition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.genericparameterposition/vb/remarks.vb#1)]  
  
 <span data-ttu-id="ef7f9-472">반환한 형식이 `GetSomething` 클래스에 제공 된 형식 인수에 따라 달라 집니다 `A` 및 `GetSomething` 자체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-472">The type returned by `GetSomething` depends on the type arguments supplied to class `A` and to `GetSomething` itself.</span></span> <span data-ttu-id="ef7f9-473">가져올 수는 <xref:System.Reflection.MethodInfo> 에 대 한 `GetSomething`는 반환 형식을 가져올 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-473">You can obtain a <xref:System.Reflection.MethodInfo> for `GetSomething`, and from that you can obtain the return type.</span></span> <span data-ttu-id="ef7f9-474">반환 형식의 형식 매개 변수를 검사 하는 경우 <xref:System.Type.GenericParameterPosition%2A> 둘 다에 대해 0을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-474">When you examine the type parameters of the return type, <xref:System.Type.GenericParameterPosition%2A> returns 0 for both.</span></span> <span data-ttu-id="ef7f9-475">위치 `V` 은 0 이므로 `V` 클래스에 대 한 형식 매개 변수 목록에서 첫 번째 형식 매개 변수인 `A`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-475">The position of `V` is 0 because `V` is the first type parameter in the type parameter list for class `A`.</span></span> <span data-ttu-id="ef7f9-476">위치 `X` 은 0 이므로 `X` 에 대 한 형식 매개 변수 목록에서 첫 번째 형식 매개 변수인 `GetSomething`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-476">The position of `X` is 0 because `X` is the first type parameter in the type parameter list for `GetSomething`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-477">호출 된 <xref:System.Type.GenericParameterPosition%2A> 속성 하면 예외가 발생 하는 경우 현재 <xref:System.Type> 형식 매개 변수를 나타내지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-477">Calling the <xref:System.Type.GenericParameterPosition%2A> property causes an exception if the current <xref:System.Type> does not represent a type parameter.</span></span> <span data-ttu-id="ef7f9-478">개방형 생성 형식의 형식 인수를 검사할 때 사용 된 <xref:System.Type.IsGenericParameter%2A> 형식 매개 변수는 변수와 구별 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-478">When you examine the type arguments of an open constructed type, use the <xref:System.Type.IsGenericParameter%2A> property to tell which are type parameters and which are types.</span></span> <span data-ttu-id="ef7f9-479"><xref:System.Type.IsGenericParameter%2A> 속성에서 반환 `true` 은 형식 매개 변수를 사용할 수 있습니다는 <xref:System.Type.GenericParameterPosition%2A> 위치로 사용 하는 메서드는 <xref:System.Type.DeclaringMethod%2A> 및 <xref:System.Type.DeclaringType%2A> 제네릭 메서드를 결정 하거나 형식 정의 정의 하는 속성 .</span><span class="sxs-lookup"><span data-stu-id="ef7f9-479">The <xref:System.Type.IsGenericParameter%2A> property returns `true` for a type parameter; you can then use the <xref:System.Type.GenericParameterPosition%2A> method to obtain its position and use the <xref:System.Type.DeclaringMethod%2A> and <xref:System.Type.DeclaringType%2A> properties to determine the generic method or type definition that defines it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-480">다음 예제에서는 두 개의 형식 매개 변수가 있는 제네릭 클래스를 정의 하 고 첫 번째 클래스에서 파생 되는 두 번째 제네릭 클래스를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-480">The following example defines a generic class with two type parameters and defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="ef7f9-481">파생된 클래스의 기본 클래스에 두 개의 형식 인수가: 첫 번째는 <xref:System.Int32>, 두 번째는 파생 된 형식의 형식 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-481">The derived class's base class has two type arguments: the first is <xref:System.Int32>, and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="ef7f9-482">보고 된 위치를 포함 하 여이 예제에서는 이러한 제네릭 클래스에 대 한 정보를 표시는 <xref:System.Type.GenericParameterPosition%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-482">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ef7f9-483">현재 형식이 형식 매개 변수를 나타내지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-483">The current type does not represent a type parameter.</span>
          </span>
          <span data-ttu-id="ef7f9-484">즉, <see cref="P:System.Type.IsGenericParameter" />이 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-484">That is, <see cref="P:System.Type.IsGenericParameter" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericParameter" />
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-485">이 형식에 대한 제네릭 형식 인수의 배열을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-485">Gets an array of the generic type arguments for this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-486">이 형식에 대한 제네릭 형식 인수 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-486">An array of the generic type arguments for this type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-487">이 속성에만 제네릭 형식 인수를; 가져옵니다. 즉, 현재 형식이 제네릭 형식 매개 변수에 대해 지정 된 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-487">This property gets only the generic type arguments; that is, the types that have been specified for the generic type parameters of the current type.</span></span> <span data-ttu-id="ef7f9-488">현재 형식이 제네릭 형식 정의 인 경우이 속성에는 빈 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-488">If the current type is a generic type definition, this property returns an empty array.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-489">제네릭 형식이 다른 제네릭 형식 또는 제네릭 메서드에 사용 된, 제네릭 형식 인수 중 일부의 바깥쪽 메서드 또는 형식을 제네릭 형식 매개 변수를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-489">If a generic type is used in a generic method or in another generic type, some of its generic type arguments might be generic type parameters of the enclosing method or type.</span></span>  
  
 <span data-ttu-id="ef7f9-490">제네릭 형식 정의 나타내는 형식의 제네릭 형식 매개 변수를 가져오려면는 <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-490">To get the generic type parameters of a type that represents a generic type definition, use the <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="ef7f9-491">가져오려는 <xref:System.Reflection.TypeInfo> 현재에 대 한 개체 <xref:System.Type> 개체를 가져오려면는 <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> 확장 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-491">To get a <xref:System.Reflection.TypeInfo> object for the current <xref:System.Type> object, use the <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> extension method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public virtual int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetArrayRank();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetArrayRank</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-492">배열의 차원 수를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-492">Gets the number of dimensions in an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-493">현재 형식의 차수를 포함하는 정수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-493">An integer that contains the number of dimensions in the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ef7f9-494">다음 예제에서는 배열의 차원 수를 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-494">The following example displays the number of dimensions in an array.</span></span>  
  
 [!code-cpp[Type_GetArrayRank#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetArrayRank/CPP/type_getarrayrank.cpp#1)]
 [!code-csharp[Type_GetArrayRank#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetArrayRank/CS/type_getarrayrank.cs#1)]
 [!code-vb[Type_GetArrayRank#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetArrayRank/VB/type_getarrayrank.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-495">이 메서드의 기능은 기본 클래스에서 지원되지 않으므로 대신에 파생된 클래스에서 구현해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-495">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-496">현재 형식은 배열이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-496">The current type is not an array.</span>
          </span>
        </exception>
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-497">파생 클래스에서 재정의되면 <see cref="P:System.Type.Attributes" /> 속성을 구현하고 <see cref="T:System.Type" />과 연관된 특성을 나타내는 비트 마스크를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-497">When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-498">
            <see cref="T:System.Reflection.TypeAttributes" />의 특성 집합을 나타내는 <see cref="T:System.Type" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-498">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.Attributes" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-499">현재 <see cref="T:System.Type" />의 특정 생성자를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-499">Gets a specific constructor of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">
          <span data-ttu-id="ef7f9-500">원하는 생성자에 대한 매개 변수의 수, 순서 및 형식을 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-500">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span>
          </span>
          <span data-ttu-id="ef7f9-501">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-501">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-502">매개 변수를 사용하지 않는 생성자를 가져오기 위한 <see cref="T:System.Type" /> 개체의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-502">An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="ef7f9-503">이러한 빈 배열은 <see langword="static" /> 필드 <see cref="F:System.Type.EmptyTypes" />에서 제공됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-503">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-504">지정된 배열의 형식과 일치하는 매개 변수를 가진 public 인스턴스 생성자를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-504">Searches for a public instance constructor whose parameters match the types in the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-505">매개 변수 형식 배열의 형식과 일치하는 매개 변수를 가진 public 인스턴스 생성자를 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-505">An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-506">이 메서드 오버 로드 public 인스턴스 생성자 찾은 클래스 이니셜라이저가 (.cctor)를 가져오는 데 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-506">This method overload looks for public instance constructors and cannot be used to obtain a class initializer (.cctor).</span></span> <span data-ttu-id="ef7f9-507">클래스 이니셜라이저를 얻기 위해 사용 하는 오버 로드를 사용 하 여 <xref:System.Reflection.BindingFlags>, 지정 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-507">To get a class initializer, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="ef7f9-508">클래스 이니셜라이저를 사용 하 여 얻을 수 있습니다는 <xref:System.Type.TypeInitializer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-508">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="ef7f9-509">이 메서드가 반환 하는 경우 요청 된 생성자가 public이 아닌, `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-509">If the requested constructor is non-public, this method returns `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-510">생성자와 메서드를 조회할 때 매개 변수를 생략할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-510">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="ef7f9-511">호출할 때에 매개 변수를 생략할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-511">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="ef7f9-512">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.ConstructorInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-512">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="ef7f9-513">하는 경우 현재 <xref:System.Type> 이 메서드는 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-513">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-514">다음 예제에서는의 형식을 얻고 `MyClass`, 가져옵니다는 <xref:System.Reflection.ConstructorInfo> 개체를 생성자 서명을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-514">The following example obtains the type of `MyClass`, gets the <xref:System.Reflection.ConstructorInfo> object, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor/CPP/type_getconstructor.cpp#1)]
 [!code-csharp[Type_GetConstructor#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor/CS/type_getconstructor.cs#1)]
 [!code-vb[Type_GetConstructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor/VB/type_getconstructor.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-515">
            <paramref name="types" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-515">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-516">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-516">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-517">
            <paramref name="types" />의 요소 중 하나가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-517">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-518">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-518">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-519">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-519">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-520">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-520">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-521">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-521">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="ef7f9-522">속성 집합을 정의하고 바인딩을 활성화하는 개체입니다. 이 개체는 또한 리플렉션을 통해 오버로드된 메서드를 선택할 수 있고 인수 형식을 강제 변환할 수 있으며 멤버를 호출할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-522">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="ef7f9-523">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-523">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-524">
            <see langword="Nothing" />를 사용하려면 null 참조(Visual Basic의 경우 <see cref="P:System.Type.DefaultBinder" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-524">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="ef7f9-525">가져올 생성자에 대한 매개 변수의 수, 차수, 형식 등을 나타내는 <see cref="T:System.Type" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-525">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="ef7f9-526">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-526">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-527">매개 변수를 사용하지 않는 생성자를 가져오기 위한 <see cref="T:System.Type" /> 형식의 빈 배열입니다(즉, Type[] types = new Type[0]).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-527">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="ef7f9-528">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-528">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-529">
            <see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-529">
              <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="ef7f9-530">매개 변수 형식 배열의 해당 요소와 연관된 특성을 나타내는 <see cref="T:System.Reflection.ParameterModifier" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-530">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span>
          </span>
          <span data-ttu-id="ef7f9-531">기본 바인더에서는 이 매개 변수를 처리하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-531">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-532">지정된 인수 형식 및 한정자와 일치하는 매개 변수를 가진 생성자를 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-532">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-533">지정된 요구 사항과 일치하는 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" /> 개체가 있으면 이 개체를 반환하고, 그렇지 않으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-533">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-534">정확 하 게 일치가 없는 경우는 `binder` 에 지정 된 매개 변수 형식 강제 변환 하려고 합니다는 `types` 일치 하는 항목을 선택 하려면 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-534">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="ef7f9-535">경우는 `binder` 일치 하는 항목을 선택한 후 수 없으면 `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-535">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="ef7f9-536">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 생성자 검색에 포함할를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-536">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-537">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-537">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-538">지정 `BindingFlags.Public` 검색에 public 생성자를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-538">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-539">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 생성자 (즉, 전용, 내부 및 보호 된 생성자)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-539">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="ef7f9-540">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-540">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-541">지정 해야이 메서드 오버 로드를 사용 하 여 클래스 이니셜라이저 (.cctor)을 가져오려면 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-541">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="ef7f9-542">클래스 이니셜라이저를 사용 하 여 얻을 수 있습니다는 <xref:System.Type.TypeInitializer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-542">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-543">생성자와 메서드를 조회할 때 매개 변수를 생략할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-543">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="ef7f9-544">호출할 때에 매개 변수를 생략할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-544">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="ef7f9-545">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.ConstructorInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-545">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="ef7f9-546">하는 경우 현재 <xref:System.Type> 이 메서드는 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-546">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-547">다음 프로그램의 형식을 얻고 `MyClass1` 클래스를 가져옵니다는 <xref:System.Reflection.ConstructorInfo> 지정 된 바인딩 플래그와 일치 하는 개체를 생성자의 서명을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-547">The following program obtains the type of `MyClass1` class, gets the <xref:System.Reflection.ConstructorInfo> object matching the specified binding flags, and displays the signature of the constructor.</span></span>  
  
 [!code-cpp[Type_GetConstructor2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor2/CPP/type_getconstructor2.cpp#1)]
 [!code-csharp[Type_GetConstructor2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor2/CS/type_getconstructor2.cs#1)]
 [!code-vb[Type_GetConstructor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor2/VB/type_getconstructor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-548">
            <paramref name="types" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-548">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-549">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-549">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-550">
            <paramref name="types" />의 요소 중 하나가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-550">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-551">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-551">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-552">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-552">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-553">
            <paramref name="modifiers" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-553">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-554">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-554">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-555">
            <paramref name="types" />와 <paramref name="modifiers" />의 길이가 동일하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-555">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-556">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-556">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-557">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-557">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-558">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-558">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="ef7f9-559">속성 집합을 정의하고 바인딩을 활성화하는 개체입니다. 이 개체는 또한 리플렉션을 통해 오버로드된 메서드를 선택할 수 있고 인수 형식을 강제 변환할 수 있으며 멤버를 호출할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-559">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="ef7f9-560">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-560">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-561">
            <see langword="Nothing" />를 사용하려면 null 참조(Visual Basic의 경우 <see cref="P:System.Type.DefaultBinder" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-561">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="ef7f9-562">인수의 순서 및 레이아웃, 반환 값의 전달 방법, 인수에 사용되는 레지스터, 스택 정리 방법 등과 관련하여 사용할 규칙을 지정하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-562">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="ef7f9-563">가져올 생성자에 대한 매개 변수의 수, 차수, 형식 등을 나타내는 <see cref="T:System.Type" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-563">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="ef7f9-564">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-564">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-565">매개 변수를 사용하지 않는 생성자를 가져오기 위한 <see cref="T:System.Type" /> 형식의 빈 배열입니다(즉, Type[] types = new Type[0]).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-565">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="ef7f9-566">
            <c>types</c> 배열에서 해당하는 요소와 연관된 특성을 나타내는 <see cref="T:System.Reflection.ParameterModifier" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-566">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="ef7f9-567">기본 바인더에서는 이 매개 변수를 처리하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-567">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-568">지정된 바인딩 제약 조건 및 호출 규칙을 사용하여, 지정된 인수 형식 및 한정자와 매개 변수가 일치하는 생성자를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-568">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-569">지정된 요구 사항과 일치하는 생성자를 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-569">An object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-570">기본 바인더는 처리 하지 않더라도 <xref:System.Reflection.ParameterModifier> (의 `modifiers` 매개 변수), 추상을 사용할 수 있습니다 <xref:System.Reflection.Binder?displayProperty=nameWithType> 클래스는 사용자 지정 처리 하는 바인더를 작성 하 `modifiers`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-570">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="ef7f9-571">`ParameterModifier` COM interop를 통해 호출할 때만 사용 되 고 참조로 전달 되는 매개 변수만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-571">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="ef7f9-572">정확 하 게 일치가 없는 경우는 `binder` 에 지정 된 매개 변수 형식 강제 변환 하려고 합니다는 `types` 일치 하는 항목을 선택 하려면 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-572">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="ef7f9-573">경우는 `binder` 일치 하는 항목을 선택한 후 수 없으면 `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-573">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="ef7f9-574">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 생성자 검색에 포함할를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-574">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-575">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-575">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-576">지정 `BindingFlags.Public` 검색에 public 생성자를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-576">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-577">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 생성자 (즉, 전용, 내부 및 보호 된 생성자)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-577">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="ef7f9-578">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-578">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-579">지정 해야이 메서드를 사용 하 여 클래스 이니셜라이저 (.cctor)을 가져오려면 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-579">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="ef7f9-580">클래스 이니셜라이저를 사용 하 여 얻을 수 있습니다는 <xref:System.Type.TypeInitializer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-580">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="ef7f9-581">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-581">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-582">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-582">Member Type</span></span>|<span data-ttu-id="ef7f9-583">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-583">Static</span></span>|<span data-ttu-id="ef7f9-584">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-584">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-585">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-585">Constructor</span></span>|<span data-ttu-id="ef7f9-586">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-586">No</span></span>|<span data-ttu-id="ef7f9-587">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-587">No</span></span>|  
|<span data-ttu-id="ef7f9-588">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-588">Field</span></span>|<span data-ttu-id="ef7f9-589">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-589">No</span></span>|<span data-ttu-id="ef7f9-590">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-590">Yes.</span></span> <span data-ttu-id="ef7f9-591">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-591">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-592">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-592">Event</span></span>|<span data-ttu-id="ef7f9-593">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-593">Not applicable</span></span>|<span data-ttu-id="ef7f9-594">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-594">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-595">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-595">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-596">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-596">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-597">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-597">Method</span></span>|<span data-ttu-id="ef7f9-598">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-598">No</span></span>|<span data-ttu-id="ef7f9-599">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-599">Yes.</span></span> <span data-ttu-id="ef7f9-600">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-600">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-601">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-601">Nested Type</span></span>|<span data-ttu-id="ef7f9-602">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-602">No</span></span>|<span data-ttu-id="ef7f9-603">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-603">No</span></span>|  
|<span data-ttu-id="ef7f9-604">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-604">Property</span></span>|<span data-ttu-id="ef7f9-605">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-605">Not applicable</span></span>|<span data-ttu-id="ef7f9-606">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-606">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-607">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-607">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-608">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-608">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-609">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-609">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-610">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-610">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-611">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-611">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-612">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-612">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-613">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-613">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-614">생성자와 메서드를 조회할 때 매개 변수를 생략할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-614">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="ef7f9-615">호출할 때에 매개 변수를 생략할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-615">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="ef7f9-616">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.ConstructorInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-616">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="ef7f9-617">하는 경우 현재 <xref:System.Type> 이 메서드는 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-617">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-618">다음 예제에서는의 형식을 얻고 `MyClass1`, 가져옵니다는 <xref:System.Reflection.ConstructorInfo> 생성자 서명을 표시 하 고 지정 된 바인딩 플래그와 일치 하는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-618">The following example obtains the type of `MyClass1`, gets the <xref:System.Reflection.ConstructorInfo> object that matches the specified binding flags, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor3/CPP/type_getconstructor3.cpp#1)]
 [!code-csharp[Type_GetConstructor3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor3/CS/type_getconstructor3.cs#1)]
 [!code-vb[Type_GetConstructor3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor3/VB/type_getconstructor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-619">
            <paramref name="types" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-619">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-620">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-620">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-621">
            <paramref name="types" />의 요소 중 하나가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-621">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-622">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-622">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-623">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-623">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-624">
            <paramref name="modifiers" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-624">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-625">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-625">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-626">
            <paramref name="types" />와 <paramref name="modifiers" />의 길이가 동일하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-626">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-627">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-627">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-628">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-628">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-629">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-629">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="ef7f9-630">속성 집합을 정의하고 바인딩을 활성화하는 개체입니다. 이 개체는 또한 리플렉션을 통해 오버로드된 메서드를 선택할 수 있고 인수 형식을 강제 변환할 수 있으며 멤버를 호출할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-630">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="ef7f9-631">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-631">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-632">
            <see langword="Nothing" />를 사용하려면 null 참조(Visual Basic의 경우 <see cref="P:System.Type.DefaultBinder" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-632">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="ef7f9-633">인수의 순서 및 레이아웃, 반환 값의 전달 방법, 인수에 사용되는 레지스터, 스택 정리 방법 등과 관련하여 사용할 규칙을 지정하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-633">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="ef7f9-634">가져올 생성자에 대한 매개 변수의 수, 차수, 형식 등을 나타내는 <see cref="T:System.Type" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-634">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="ef7f9-635">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-635">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-636">매개 변수를 사용하지 않는 생성자를 가져오기 위한 <see cref="T:System.Type" /> 형식의 빈 배열입니다(즉, Type[] types = new Type[0]).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-636">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="ef7f9-637">
            <c>types</c> 배열에서 해당하는 요소와 연관된 특성을 나타내는 <see cref="T:System.Reflection.ParameterModifier" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-637">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="ef7f9-638">기본 바인더에서는 이 매개 변수를 처리하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-638">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-639">파생 클래스에서 재정의되면, 지정된 인수 형식 및 한정자와 일치하는 매개 변수를 가진 생성자를 지정된 바인딩 제약 조건 및 호출 규칙으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-639">When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-640">지정된 요구 사항과 일치하는 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" /> 개체가 있으면 이 개체를 반환하고, 그렇지 않으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-640">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-641">기본 바인더는 처리 하지 않더라도 <xref:System.Reflection.ParameterModifier> (의 `modifiers` 매개 변수), 추상을 사용할 수 있습니다 <xref:System.Reflection.Binder?displayProperty=nameWithType> 클래스는 사용자 지정 처리 하는 바인더를 작성 하 `modifiers`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-641">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="ef7f9-642">`ParameterModifier` COM interop를 통해 호출할 때만 사용 되 고 참조로 전달 되는 매개 변수만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-642">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="ef7f9-643">정확 하 게 일치가 없는 경우는 `binder` 에 지정 된 매개 변수 형식 강제 변환 하려고 합니다는 `types` 일치 하는 항목을 선택 하려면 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-643">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="ef7f9-644">경우는 `binder` 일치 하는 항목을 선택한 후 수 없으면 `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-644">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="ef7f9-645">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 생성자 검색에 포함할를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-645">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-646">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-646">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-647">지정 `BindingFlags.Public` 검색에 public 생성자를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-647">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-648">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 생성자 (즉, 전용, 내부 및 보호 된 생성자)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-648">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="ef7f9-649">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-649">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-650">이 메서드는 <xref:System.Type.GetConstructor%2A>를 구현합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-650">This method implements <xref:System.Type.GetConstructor%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-651">
            <paramref name="types" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-651">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-652">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-652">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-653">
            <paramref name="types" />의 요소 중 하나가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-653">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-654">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-654">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-655">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-655">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-656">
            <paramref name="modifiers" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-656">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-657">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-657">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-658">
            <paramref name="types" />와 <paramref name="modifiers" />의 길이가 동일하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-658">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-659">현재 형식이 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 또는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-659">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-660">현재 <see cref="T:System.Type" />의 생성자를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-660">Gets the constructors of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-661">현재 <see cref="T:System.Type" />에 대해 정의된 모든 public 생성자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-661">Returns all the public constructors defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-662">형식 이니셜라이저를 제외하고(정적 생성자) 현재 <see cref="T:System.Reflection.ConstructorInfo" />에 대해 정의된 모든 public 인스턴스 생성자를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-662">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span>
          </span>
          <span data-ttu-id="ef7f9-663">public 인스턴스 생성자가 현재 <see cref="T:System.Type" />에 대해 정의되어 있지 않거나 현재 <see cref="T:System.Type" />이 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 경우 <see cref="T:System.Reflection.ConstructorInfo" /> 형식의 빈 배열이 반환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-663">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-664"><xref:System.Type.GetConstructors%2A> 메서드 선언 순서 대로 나열 등 특정 한 순서로 생성자를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-664">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="ef7f9-665">코드 영향을 받지 않아야 생성자 반환 되는 순서에 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-665">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-666">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-666">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-667">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-667">Member Type</span></span>|<span data-ttu-id="ef7f9-668">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-668">Static</span></span>|<span data-ttu-id="ef7f9-669">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-669">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-670">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-670">Constructor</span></span>|<span data-ttu-id="ef7f9-671">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-671">No</span></span>|<span data-ttu-id="ef7f9-672">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-672">No</span></span>|  
|<span data-ttu-id="ef7f9-673">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-673">Field</span></span>|<span data-ttu-id="ef7f9-674">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-674">No</span></span>|<span data-ttu-id="ef7f9-675">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-675">Yes.</span></span> <span data-ttu-id="ef7f9-676">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-676">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-677">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-677">Event</span></span>|<span data-ttu-id="ef7f9-678">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-678">Not applicable</span></span>|<span data-ttu-id="ef7f9-679">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-679">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-680">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-680">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-681">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-681">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-682">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-682">Method</span></span>|<span data-ttu-id="ef7f9-683">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-683">No</span></span>|<span data-ttu-id="ef7f9-684">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-684">Yes.</span></span> <span data-ttu-id="ef7f9-685">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-685">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-686">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-686">Nested Type</span></span>|<span data-ttu-id="ef7f9-687">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-687">No</span></span>|<span data-ttu-id="ef7f9-688">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-688">No</span></span>|  
|<span data-ttu-id="ef7f9-689">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-689">Property</span></span>|<span data-ttu-id="ef7f9-690">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-690">Not applicable</span></span>|<span data-ttu-id="ef7f9-691">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-691">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-692">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-692">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-693">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-693">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-694">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-694">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-695">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-695">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-696">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-696">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-697">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-697">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-698">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-698">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-699">이 메서드 오버 로드는 <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> 메서드 오버 로드와 <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-699">This method overload calls the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="ef7f9-700">클래스 이니셜라이저가 (.cctor)를 검색 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-700">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="ef7f9-701">클래스 이니셜라이저를 사용 하는 오버 로드를 사용 하 여 <xref:System.Reflection.BindingFlags>를 지정 하 고 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-701">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="ef7f9-702">클래스 이니셜라이저를 사용 하 여 얻을 수 있습니다는 <xref:System.Type.TypeInitializer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-702">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="ef7f9-703">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.ConstructorInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-703">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="ef7f9-704">예를 들어 경우 클래스 `C<T>` 생성자가 있는 `C(T t1)` (`Sub New(ByVal t1 As T)` Visual Basic의)를 호출 <xref:System.Type.GetConstructors%2A> 에 `C<int>` 반환는 <xref:System.Reflection.ConstructorInfo> 나타내는 `C(int t1)` C#에서 (`Sub New(ByVal t1 As Integer)` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-704">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="ef7f9-705">하는 경우 현재 <xref:System.Type> 제네릭 형식 매개 변수를 <xref:System.Type.GetConstructors%2A> 메서드는 빈 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-705">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-706">출력을 보여 주는이 예제는 <xref:System.Type.GetConstructors%2A> 두 인스턴스 생성자 및 정적 생성자가 하나 있는 클래스에서 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-706">This example shows the output of the <xref:System.Type.GetConstructors%2A> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="ef7f9-707">이 코드의 출력은입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-707">The output of this code is:</span></span>  
  
 <span data-ttu-id="ef7f9-708">2</span><span class="sxs-lookup"><span data-stu-id="ef7f9-708">2</span></span>  
  
 <span data-ttu-id="ef7f9-709">False</span><span class="sxs-lookup"><span data-stu-id="ef7f9-709">False</span></span>  
  
 <span data-ttu-id="ef7f9-710">False</span><span class="sxs-lookup"><span data-stu-id="ef7f9-710">False</span></span>  
  
 <span data-ttu-id="ef7f9-711">때문에 <xref:System.Type.GetConstructors> 오버 로드만 사용 하 여 <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> 및 <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, 정적 생성자에 의해 합계도는 `for` 식에 의해 평가 하거나 `IsStatic`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-711">Because the <xref:System.Type.GetConstructors> overload uses only <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="ef7f9-712">정적 생성자를 찾기 위해 사용 하 여는 <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> 오버 로드, 시키고 조합 (논리적 `OR`)의 <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>다음 코드 예제에 나온 것 처럼:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-712">To find static constructors, use the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> overload, and pass the combination (logical `OR`) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="ef7f9-713">이제 출력이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-713">Now the output is:</span></span>  
  
 <span data-ttu-id="ef7f9-714">3</span><span class="sxs-lookup"><span data-stu-id="ef7f9-714">3</span></span>  
  
 <span data-ttu-id="ef7f9-715">False</span><span class="sxs-lookup"><span data-stu-id="ef7f9-715">False</span></span>  
  
 <span data-ttu-id="ef7f9-716">True</span><span class="sxs-lookup"><span data-stu-id="ef7f9-716">True</span></span>  
  
 <span data-ttu-id="ef7f9-717">False</span><span class="sxs-lookup"><span data-stu-id="ef7f9-717">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-718">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-718">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-719">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-719">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-720">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-720">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-721">파생 클래스에서 재정의되면, 현재 <see cref="T:System.Type" />에 대해 정의된 생성자를 지정된 <see langword="BindingFlags" />로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-721">When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-722">현재 <see cref="T:System.Reflection.ConstructorInfo" />에 대해 정의된 생성자 중 지정된 바인딩 제약 조건과 일치하는 모든 생성자(정의된 경우에는 형식 이니셜라이저도 포함)를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-722">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span>
          </span>
          <span data-ttu-id="ef7f9-723">생성자가 현재 <see cref="T:System.Reflection.ConstructorInfo" />에 대해 정의되어 있지 않거나, 정의된 생성자 중 바인딩 제약 조건과 일치하는 것이 없거나, 현재 <see cref="T:System.Type" />이 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 경우 <see cref="T:System.Type" /> 형식의 빈 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-723">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-724"><xref:System.Type.GetConstructors%2A> 메서드 선언 순서 대로 나열 등 특정 한 순서로 생성자를 반환 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-724">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="ef7f9-725">코드 영향을 받지 않아야 생성자 반환 되는 순서에 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-725">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-726">`bindingAttr` 데 사용할 수는 공용 생성자 또는 public 및 non-public 생성자만 반환할 것인지 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-726">`bindingAttr` can be used to specify whether to return only public constructors or both public and non-public constructors.</span></span>  
  
 <span data-ttu-id="ef7f9-727">정확 하 게 일치가 없는 경우는 `binder` 에 지정 된 매개 변수 형식 강제 변환 하려고 합니다는 `types` 일치 하는 항목을 선택 하려면 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-727">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="ef7f9-728">경우는 `binder` 일치 하는 항목을 선택한 후 수 없으면 `null` 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-728">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="ef7f9-729">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 생성자 검색에 포함할를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-729">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-730">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-730">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-731">지정 `BindingFlags.Public` 검색에 public 생성자를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-731">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-732">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 생성자 (즉, 전용, 내부 및 보호 된 생성자)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-732">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span> <span data-ttu-id="ef7f9-733">기본 클래스의 생성자는 반환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-733">Constructors of base classes are not returned.</span></span>  
  
 <span data-ttu-id="ef7f9-734">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-734">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-735">지정 해야이 메서드 오버 로드를 사용 하 여 클래스 이니셜라이저 (.cctor)을 가져오려면 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-735">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="ef7f9-736">클래스 이니셜라이저를 사용 하 여 얻을 수 있습니다는 <xref:System.Type.TypeInitializer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-736">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="ef7f9-737">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.ConstructorInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-737">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="ef7f9-738">예를 들어 경우 클래스 `C<T>` 생성자가 있는 `C(T t1)` (`Sub New(ByVal t1 As T)` Visual Basic의)를 호출 <xref:System.Type.GetConstructors%2A> 에 `C<int>` 반환는 <xref:System.Reflection.ConstructorInfo> 나타내는 `C(int t1)` C#에서 (`Sub New(ByVal t1 As Integer)` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-738">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="ef7f9-739">하는 경우 현재 <xref:System.Type> 제네릭 형식 매개 변수를 <xref:System.Type.GetConstructors%2A> 메서드는 빈 배열을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-739">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-740">출력을 보여 주는이 예제는 <xref:System.Type.GetConstructors> 두 인스턴스 생성자 및 정적 생성자가 하나 있는 클래스에서 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-740">This example shows the output of the <xref:System.Type.GetConstructors> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="ef7f9-741">이 코드의 출력은입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-741">The output of this code is:</span></span>  
  
 <span data-ttu-id="ef7f9-742">2</span><span class="sxs-lookup"><span data-stu-id="ef7f9-742">2</span></span>  
  
 <span data-ttu-id="ef7f9-743">False</span><span class="sxs-lookup"><span data-stu-id="ef7f9-743">False</span></span>  
  
 <span data-ttu-id="ef7f9-744">False</span><span class="sxs-lookup"><span data-stu-id="ef7f9-744">False</span></span>  
  
 <span data-ttu-id="ef7f9-745">때문에 <xref:System.Type.GetConstructors%2A> 오버 로드만 사용 하 여 <xref:System.Reflection.BindingFlags.Public> 및 <xref:System.Reflection.BindingFlags.Instance>, 정적 생성자에 의해 합계도는 `for` 식에 의해 평가 하거나 `IsStatic`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-745">Because the <xref:System.Type.GetConstructors%2A> overload uses only <xref:System.Reflection.BindingFlags.Public> and <xref:System.Reflection.BindingFlags.Instance>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="ef7f9-746">정적 생성자를 찾기 위해 사용 하 여는 <xref:System.Type.GetConstructors%2A> 오버 로드를 전달 하는 것의 조합 (논리적 OR) <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>다음 코드 예제에 나온 것 처럼:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-746">To find static constructors, use the <xref:System.Type.GetConstructors%2A> overload, and pass it the combination (logical OR) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="ef7f9-747">이제 출력이 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-747">Now the output is:</span></span>  
  
 <span data-ttu-id="ef7f9-748">3</span><span class="sxs-lookup"><span data-stu-id="ef7f9-748">3</span></span>  
  
 <span data-ttu-id="ef7f9-749">False</span><span class="sxs-lookup"><span data-stu-id="ef7f9-749">False</span></span>  
  
 <span data-ttu-id="ef7f9-750">True</span><span class="sxs-lookup"><span data-stu-id="ef7f9-750">True</span></span>  
  
 <span data-ttu-id="ef7f9-751">False</span><span class="sxs-lookup"><span data-stu-id="ef7f9-751">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetDefaultMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-752">현재 <see cref="T:System.Type" />에 대해 정의된 멤버 중 <see cref="T:System.Reflection.DefaultMemberAttribute" />가 설정된 멤버를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-752">Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-753">현재 <see cref="T:System.Reflection.MemberInfo" />의 모든 기본 멤버를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-753">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="ef7f9-754">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-754">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-755">현재 <see cref="T:System.Reflection.MemberInfo" />에 기본 멤버가 없을 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-755">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-756"><xref:System.Type.GetDefaultMembers%2A> 메서드 반환 하지 않습니다 구성원을 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-756">The <xref:System.Type.GetDefaultMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-757">코드 영향을 받지 않아야에 멤버가 반환 되는 순서 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-757">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-758">이 메서드는 파생된 클래스에서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-758">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="ef7f9-759">구성원 속성, 메서드, 필드, 이벤트 및 등을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-759">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="ef7f9-760">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-760">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-761">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-761">Member Type</span></span>|<span data-ttu-id="ef7f9-762">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-762">Static</span></span>|<span data-ttu-id="ef7f9-763">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-763">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-764">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-764">Constructor</span></span>|<span data-ttu-id="ef7f9-765">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-765">No</span></span>|<span data-ttu-id="ef7f9-766">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-766">No</span></span>|  
|<span data-ttu-id="ef7f9-767">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-767">Field</span></span>|<span data-ttu-id="ef7f9-768">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-768">No</span></span>|<span data-ttu-id="ef7f9-769">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-769">Yes.</span></span> <span data-ttu-id="ef7f9-770">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-770">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-771">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-771">Event</span></span>|<span data-ttu-id="ef7f9-772">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-772">Not applicable</span></span>|<span data-ttu-id="ef7f9-773">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-773">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-774">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-774">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-775">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-775">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-776">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-776">Method</span></span>|<span data-ttu-id="ef7f9-777">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-777">No</span></span>|<span data-ttu-id="ef7f9-778">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-778">Yes.</span></span> <span data-ttu-id="ef7f9-779">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-779">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-780">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-780">Nested Type</span></span>|<span data-ttu-id="ef7f9-781">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-781">No</span></span>|<span data-ttu-id="ef7f9-782">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-782">No</span></span>|  
|<span data-ttu-id="ef7f9-783">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-783">Property</span></span>|<span data-ttu-id="ef7f9-784">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-784">Not applicable</span></span>|<span data-ttu-id="ef7f9-785">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-785">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-786">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-786">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-787">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-787">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-788">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-788">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-789">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-789">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-790">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-790">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-791">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-791">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-792">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-792">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-793">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.MemberInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-793">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="ef7f9-794">예를 들어 경우 클래스 `C<T>` 속성이 `P` 반환 하는 `T`를 호출 <xref:System.Type.GetDefaultMembers%2A> 에 `C<int>` 반환 `int P` C#에서 (`Property P As Integer` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-794">For example, if class `C<T>` has a property `P` that returns `T`, calling <xref:System.Type.GetDefaultMembers%2A> on `C<int>` returns `int P` in C# (`Property P As Integer` in Visual Basic).</span></span>  
  
 <span data-ttu-id="ef7f9-795">하는 경우 현재 <xref:System.Type> 나타냅니다의 멤버 또는 멤버는 클래스 제약 조건의 형식 매개 변수 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-795">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-796">다음 예제에서는의 기본 멤버 정보를 얻고 `MyClass` 기본 멤버를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-796">The following example obtains the default member information of `MyClass` and displays the default members.</span></span>  
  
 [!code-cpp[Type_GetDefaultMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetDefaultMembers/CPP/type_getdefaultmembers.cpp#1)]
 [!code-csharp[Type_GetDefaultMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetDefaultMembers/CS/type_getdefaultmembers.cs#1)]
 [!code-vb[Type_GetDefaultMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetDefaultMembers/VB/type_getdefaultmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.DefaultMemberAttribute" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public abstract Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetElementType();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-797">파생 클래스에서 재정의되면, 현재 배열, 포인터 또는 참조 형식에 의해 포함되거나 참조되는 개체의 <see cref="T:System.Type" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-797">When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-798">현재 배열, 포인터 또는 참조 형식에서 포함하거나 참조하는 개체의 <see cref="T:System.Type" />입니다. 현재 <see langword="null" />이 배열 또는 포인터가 아니거나, 참조로 전달되지 않거나, 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수나 제네릭 형식을 나타내는 경우에는 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-798">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-799">이 메서드가 반환 `null` 에 대 한는 <xref:System.Array> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-799">This method returns `null` for the <xref:System.Array> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-800">다음 예제는 `GetElementType` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-800">The following example demonstrates using the `GetElementType` method.</span></span>  
  
 [!code-cpp[TestGetElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestGetElementType/CPP/TestGetElementType.cpp#1)]
 [!code-csharp[TestGetElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestGetElementType/CS/testgetelementtype.cs#1)]
 [!code-vb[TestGetElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestGetElementType/VB/testgetelementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumName">
      <MemberSignature Language="C#" Value="public virtual string GetEnumName (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetEnumName(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumName (value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetEnumName(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="ef7f9-801">이름을 검색할 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-801">The value whose name is to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-802">현재 열거형 형식에 대해 지정된 값을 가진 상수의 이름을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-802">Returns the name of the constant that has the specified value, for the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-803">지정된 값을 가진 현재 열거형 형식의 멤버 이름이거나 그러한 상수가 없는 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-803">The name of the member of the current enumeration type that has the specified value, or <see langword="null" /> if no such constant is found.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-804">현재 형식은 열거형이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-804">The current type is not an enumeration.</span>
          </span>
          <span data-ttu-id="ef7f9-805">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-805">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-806">
            <paramref name="value" />는 현재 형식이 아니며 현재 형식과 동일한 기본 형식도 사용하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-806">
              <paramref name="value" /> is neither of the current type nor does it have the same underlying type as the current type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-807">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-807">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetEnumNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnumNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetEnumNames();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-808">현재 열거형 형식의 멤버 이름을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-808">Returns the names of the members of the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-809">열거형 멤버의 이름이 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-809">An array that contains the names of the members of the enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-810">반환 값 배열의 요소는 열거형 상수의 이진 값 (즉, 부호 없는 값)으로 정렬 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-810">The elements of the return value array are sorted by the binary values (that is, the unsigned values) of the enumerated constants.</span></span> <span data-ttu-id="ef7f9-811">동일한 값을 가진 열거 상수를 포함 하는 배열, 해당 이름의 순서가 지정 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-811">If the array contains enumerated constants with the same value, the order of their corresponding names is unspecified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-812">현재 형식은 열거형이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-812">The current type is not an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumUnderlyingType">
      <MemberSignature Language="C#" Value="public virtual Type GetEnumUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetEnumUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetEnumUnderlyingType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-813">현재 열거형 형식의 내부 형식을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-813">Returns the underlying type of the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-814">현재 열거형의 내부 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-814">The underlying type of the current enumeration.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-815">기본적으로 C# 및 Visual Basic에서 열거형의 내부 형식은 <xref:System.Int32>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-815">By default, the underlying type of an enumeration in C# and Visual Basic is <xref:System.Int32>.</span></span> <span data-ttu-id="ef7f9-816">다른 정수 형식에 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-816">Other integer types can be specified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-817">현재 형식은 열거형이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-817">The current type is not an enumeration.</span>
          </span>
          <span data-ttu-id="ef7f9-818">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-818">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-819">열거형 형식에 두 개 이상의 인스턴스 필드가 포함되어 있으므로 열거형 형식이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-819">The enumeration type is not valid, because it contains more than one instance field.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumValues">
      <MemberSignature Language="C#" Value="public virtual Array GetEnumValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Array GetEnumValues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumValues () As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Array ^ GetEnumValues();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-820">현재 열거형 형식에 있는 상수 값의 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-820">Returns an array of the values of the constants in the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-821">값이 포함된 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-821">An array that contains the values.</span>
          </span>
          <span data-ttu-id="ef7f9-822">배열 요소는 열거형 상수의 이진 값(즉, 부호 없는 값)을 기준으로 정렬됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-822">The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-823">현재 형식은 열거형이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-823">The current type is not an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-824">현재 <see cref="T:System.Type" />에 의해 선언되거나 상속되는 특정 이벤트를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-824">Gets a specific event declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-825">현재 <see cref="T:System.Type" />에 의해 선언되거나 상속되는 이벤트의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-825">The string containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-826">지정된 public 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-826">Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-827">현재 <see cref="T:System.Type" />에 의해 선언되거나 상속되는, 지정한 public 이벤트(있는 경우)를 나타내는 개체이고, 그렇지 않으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-827">The object representing the specified public event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-828">이벤트에 하나 이상의 메서드 또는 접근자가 public에 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-828">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="ef7f9-829">그렇지 않은 경우 이벤트는 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-829">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-830">에 대 한 검색 `name` 대 소문자를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-830">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="ef7f9-831">검색에는 public static 및 public 인스턴스 이벤트가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-831">The search includes public static and public instance events.</span></span>  
  
 <span data-ttu-id="ef7f9-832">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-832">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-833">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-833">Member Type</span></span>|<span data-ttu-id="ef7f9-834">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-834">Static</span></span>|<span data-ttu-id="ef7f9-835">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-835">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-836">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-836">Constructor</span></span>|<span data-ttu-id="ef7f9-837">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-837">No</span></span>|<span data-ttu-id="ef7f9-838">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-838">No</span></span>|  
|<span data-ttu-id="ef7f9-839">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-839">Field</span></span>|<span data-ttu-id="ef7f9-840">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-840">No</span></span>|<span data-ttu-id="ef7f9-841">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-841">Yes.</span></span> <span data-ttu-id="ef7f9-842">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-842">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-843">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-843">Event</span></span>|<span data-ttu-id="ef7f9-844">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-844">Not applicable</span></span>|<span data-ttu-id="ef7f9-845">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-845">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-846">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-846">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-847">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-847">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-848">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-848">Method</span></span>|<span data-ttu-id="ef7f9-849">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-849">No</span></span>|<span data-ttu-id="ef7f9-850">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-850">Yes.</span></span> <span data-ttu-id="ef7f9-851">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-851">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-852">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-852">Nested Type</span></span>|<span data-ttu-id="ef7f9-853">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-853">No</span></span>|<span data-ttu-id="ef7f9-854">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-854">No</span></span>|  
|<span data-ttu-id="ef7f9-855">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-855">Property</span></span>|<span data-ttu-id="ef7f9-856">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-856">Not applicable</span></span>|<span data-ttu-id="ef7f9-857">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-857">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-858">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-858">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-859">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-859">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-860">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-860">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-861">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-861">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-862">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-862">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-863">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-863">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-864">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-864">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-865">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.EventInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-865">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-866">하는 경우 현재 <xref:System.Type> 형식 매개 변수는 제네릭 형식 또는 제네릭 메서드 정의에서이 메서드는 클래스 제약 조건의 이벤트를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-866">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-867">다음 예제에서는 <xref:System.Reflection.EventInfo> 개체 및 지정된 된 이벤트에 대 한 단추 클래스에 대 한 이벤트를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-867">The following example creates an <xref:System.Reflection.EventInfo> object and gets the event for a button class for the specified event.</span></span>  
  
 [!code-cpp[Type_GetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetEvent/CPP/type_getevent.cpp#1)]
 [!code-csharp[Type_GetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetEvent/CS/type_getevent.cs#1)]
 [!code-vb[Type_GetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetEvent/VB/type_getevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-868">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-868">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-869">현재 <see cref="T:System.Type" />에 의해 선언되거나 상속되는 이벤트의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-869">The string containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-870">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-870">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-871">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-871">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-872">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-872">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-873">파생 클래스에서 재정의되면, 지정된 바인딩 제약 조건을 사용하여 지정된 이벤트를 나타내는 <see cref="T:System.Reflection.EventInfo" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-873">When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-874">현재 <see cref="T:System.Type" />에 의해 선언되거나 상속되는, 지정한 이벤트(있는 경우)를 나타내는 개체이고, 그렇지 않으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-874">The object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-875">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 검색에 포함할 이벤트를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-875">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-876">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-876">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-877">지정 `BindingFlags.Public` 검색에 공용 이벤트를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-877">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-878">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 이벤트 (즉, 전용, 내부 및 보호 된 이벤트)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-878">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-879">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-879">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-880">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-880">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-881">`BindingFlags.IgnoreCase` 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-881">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-882">`BindingFlags.DeclaredOnly` 에 선언 된 이벤트에만 검색 하는 <xref:System.Type>, 상속 된 이벤트가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-882">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-883">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-883">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-884">이벤트에 하나 이상의 메서드 또는 접근자가 public에 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-884">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="ef7f9-885">그렇지 않은 경우 이벤트는 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-885">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-886">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.EventInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-886">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-887">하는 경우 현재 <xref:System.Type> 형식 매개 변수는 제네릭 형식 또는 제네릭 메서드 정의에서이 메서드는 클래스 제약 조건의 이벤트를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-887">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-888">다음 코드 예제에서는 <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> 메서드는 public 또는 public이 아닌 "클릭 하십시오." 라는 되지 않은 이벤트에 대 한 형식을 검색 하려면 `static` (`Shared` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-888">The following code example uses the <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> method to search a type for a public or non-public event named "Click" that is not `static` (`Shared` in Visual Basic).</span></span>  
  
 [!code-cpp[Type_GetEvent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[Type_GetEvent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[Type_GetEvent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-889">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-889">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-890">현재 <see cref="T:System.Type" />에 의해 선언되거나 상속되는 이벤트를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-890">Gets the events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-891">현재 <see cref="T:System.Type" />에 의해 선언되거나 상속되는 모든 public 이벤트를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-891">Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-892">현재 <see cref="T:System.Reflection.EventInfo" />에 의해 선언되거나 상속되는 모든 public 이벤트를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-892">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="ef7f9-893">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-893">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-894">현재 <see cref="T:System.Reflection.EventInfo" />에 public 이벤트가 없을 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-894">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-895">이벤트에 하나 이상의 메서드 또는 접근자가 public에 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-895">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="ef7f9-896">그렇지 않은 경우 이벤트는 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-896">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-897"><xref:System.Type.GetEvents%2A> 메서드 반환 하지 않습니다 이벤트는 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-897">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-898">코드 영향을 받지 않아야 이벤트가 반환 되는 순서에 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-898">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-899">이 메서드는 파생된 클래스에서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-899">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="ef7f9-900">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-900">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-901">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-901">Member Type</span></span>|<span data-ttu-id="ef7f9-902">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-902">Static</span></span>|<span data-ttu-id="ef7f9-903">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-903">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-904">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-904">Constructor</span></span>|<span data-ttu-id="ef7f9-905">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-905">No</span></span>|<span data-ttu-id="ef7f9-906">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-906">No</span></span>|  
|<span data-ttu-id="ef7f9-907">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-907">Field</span></span>|<span data-ttu-id="ef7f9-908">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-908">No</span></span>|<span data-ttu-id="ef7f9-909">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-909">Yes.</span></span> <span data-ttu-id="ef7f9-910">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-910">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-911">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-911">Event</span></span>|<span data-ttu-id="ef7f9-912">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-912">Not applicable</span></span>|<span data-ttu-id="ef7f9-913">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-913">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-914">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-914">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-915">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-915">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-916">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-916">Method</span></span>|<span data-ttu-id="ef7f9-917">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-917">No</span></span>|<span data-ttu-id="ef7f9-918">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-918">Yes.</span></span> <span data-ttu-id="ef7f9-919">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-919">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-920">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-920">Nested Type</span></span>|<span data-ttu-id="ef7f9-921">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-921">No</span></span>|<span data-ttu-id="ef7f9-922">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-922">No</span></span>|  
|<span data-ttu-id="ef7f9-923">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-923">Property</span></span>|<span data-ttu-id="ef7f9-924">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-924">Not applicable</span></span>|<span data-ttu-id="ef7f9-925">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-925">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-926">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-926">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-927">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-927">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-928">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-928">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-929">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-929">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-930">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-930">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-931">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-931">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-932">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-932">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-933">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.EventInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-933">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-934">하는 경우 현재 <xref:System.Type> 형식 매개 변수는 제네릭 형식 또는 제네릭 메서드 정의에서이 메서드는 클래스 제약 조건의 이벤트를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-934">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-935">다음 예제에서는 배열을 가져옵니다 <xref:System.Reflection.EventInfo> 개체에 대 한 모든 이벤트는 `Button` 클래스 하 고 이벤트 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-935">The following example obtains an array of <xref:System.Reflection.EventInfo> objects, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="ef7f9-936">Visual Basic 예제를 컴파일하려면 다음 명령줄을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-936">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents1.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents1/CPP/type_getevents1.cpp#1)]
 [!code-csharp[Type_GetEvents1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents1/CS/type_getevents1.cs#1)]
 [!code-vb[Type_GetEvents1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents1/VB/type_getevents1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-937">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-937">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-938">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-938">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-939">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-939">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-940">파생 클래스에서 재정의되면, 현재 <see cref="T:System.Type" />에 의해 선언되거나 상속되는 이벤트를 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-940">When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-941">현재 <see cref="T:System.Reflection.EventInfo" />에 의해 선언되거나 상속되는 이벤트 중 지정된 바인딩 제약 조건과 일치하는 모든 이벤트를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-941">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="ef7f9-942">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-942">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-943">현재 <see cref="T:System.Reflection.EventInfo" />에 이벤트가 없거나 해당 바인딩 제약 조건과 일치하는 이벤트가 없을 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-943">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-944"><xref:System.Type.GetEvents%2A> 메서드 반환 하지 않습니다 이벤트는 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-944">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-945">코드 영향을 받지 않아야 이벤트가 반환 되는 순서에 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-945">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-946">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 검색에 포함할 이벤트를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-946">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-947">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-947">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-948">지정 `BindingFlags.Public` 검색에 공용 이벤트를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-948">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-949">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 이벤트 (즉, 전용, 내부 및 보호 된 이벤트)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-949">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span> <span data-ttu-id="ef7f9-950">만 보호 하 고 기본 클래스에는 내부 이벤트 반환 됩니다. 기본 클래스에서 private 이벤트 반환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-950">Only protected and internal events on base classes are returned; private events on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="ef7f9-951">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-951">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-952">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-952">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-953">`BindingFlags.DeclaredOnly` 에 선언 된 이벤트에만 검색 하는 <xref:System.Type>, 상속 된 이벤트가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-953">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-954">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-954">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-955">이벤트에 하나 이상의 메서드 또는 접근자가 public에 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-955">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="ef7f9-956">그렇지 않은 경우 이벤트는 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-956">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-957">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.EventInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-957">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-958">하는 경우 현재 <xref:System.Type> 형식 매개 변수는 제네릭 형식 또는 제네릭 메서드 정의에서이 메서드는 클래스 제약 조건의 이벤트를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-958">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-959">다음 예제에서는 배열을 가져옵니다 <xref:System.Reflection.EventInfo> 지정 된 바인딩 플래그와 일치 하는 개체에 대 한 모든 이벤트를 가져옵니다는 `Button` 클래스 하 고 이벤트 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-959">The following example obtains an array of <xref:System.Reflection.EventInfo> objects that match the specified binding flags, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="ef7f9-960">Visual Basic 예제를 컴파일하려면 다음 명령줄을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-960">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents2.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents2#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents2/CPP/type_getevents2.cpp#1)]
 [!code-csharp[Type_GetEvents2#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents2/CS/type_getevents2.cs#1)]
 [!code-vb[Type_GetEvents2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents2/VB/type_getevents2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-961">현재 <see cref="T:System.Type" />의 특정 필드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-961">Gets a specific field of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-962">가져올 데이터 필드의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-962">The string containing the name of the data field to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-963">지정된 이름의 public 필드를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-963">Searches for the public field with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-964">지정된 이름의 public 필드를 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-964">An object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-965">에 대 한 검색 `name` 대 소문자를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-965">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="ef7f9-966">검색에는 public static 및 public 인스턴스 필드가 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-966">The search includes public static and public instance fields.</span></span>  
  
 <span data-ttu-id="ef7f9-967">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.FieldInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-967">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-968">하는 경우 현재 <xref:System.Type> 형식 매개 변수는 제네릭 형식 또는 제네릭 메서드 정의에서이 메서드는 클래스 제약 조건의 필드를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-968">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-969">다음 예제에서는 가져옵니다는 `Type` 지정된 된 클래스에 대 한 개체를 가져옵니다는 <xref:System.Reflection.FieldInfo> 필드에 대 한 개체 필드의 값이 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-969">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#1)]
 [!code-csharp[Type_GetField#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#1)]
 [!code-vb[Type_GetField#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-970">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-970">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-971">이 <see cref="T:System.Type" /> 개체가 해당 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 메서드가 호출되지 않은 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-971">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-972">가져올 데이터 필드의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-972">The string containing the name of the data field to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-973">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-973">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-974">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-974">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-975">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-975">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-976">지정된 필드를 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-976">Searches for the specified field, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-977">지정된 요구 사항과 일치하는 필드를 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-977">An object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-978">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-978">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-979">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-979">Member Type</span></span>|<span data-ttu-id="ef7f9-980">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-980">Static</span></span>|<span data-ttu-id="ef7f9-981">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-981">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-982">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-982">Constructor</span></span>|<span data-ttu-id="ef7f9-983">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-983">No</span></span>|<span data-ttu-id="ef7f9-984">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-984">No</span></span>|  
|<span data-ttu-id="ef7f9-985">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-985">Field</span></span>|<span data-ttu-id="ef7f9-986">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-986">No</span></span>|<span data-ttu-id="ef7f9-987">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-987">Yes.</span></span> <span data-ttu-id="ef7f9-988">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-988">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-989">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-989">Event</span></span>|<span data-ttu-id="ef7f9-990">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-990">Not applicable</span></span>|<span data-ttu-id="ef7f9-991">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-991">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-992">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-992">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-993">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-993">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-994">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-994">Method</span></span>|<span data-ttu-id="ef7f9-995">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-995">No</span></span>|<span data-ttu-id="ef7f9-996">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-996">Yes.</span></span> <span data-ttu-id="ef7f9-997">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-997">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-998">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-998">Nested Type</span></span>|<span data-ttu-id="ef7f9-999">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-999">No</span></span>|<span data-ttu-id="ef7f9-1000">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1000">No</span></span>|  
|<span data-ttu-id="ef7f9-1001">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1001">Property</span></span>|<span data-ttu-id="ef7f9-1002">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1002">Not applicable</span></span>|<span data-ttu-id="ef7f9-1003">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1003">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1004">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1004">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1005">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1005">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-1006">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1006">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-1007">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1007">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-1008">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1008">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1009">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1009">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-1010">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1010">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-1011">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 검색에 포함할 필드를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1011">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1012">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1012">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1013">지정 `BindingFlags.Public` 검색에 public 필드를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1013">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1014">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 필드 (즉, 전용, 내부 및 보호 된 필드)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1014">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1015">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1015">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-1016">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1016">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-1017">`BindingFlags.IgnoreCase` 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1017">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-1018">`BindingFlags.DeclaredOnly` 에 선언 된 필드에만 검색 하는 <xref:System.Type>, 상속 된 필드가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1018">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-1019">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1019">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-1020">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.FieldInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1020">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1021">하는 경우 현재 <xref:System.Type> 형식 매개 변수는 제네릭 형식 또는 제네릭 메서드 정의에서이 메서드는 클래스 제약 조건의 필드를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1021">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1022">다음 예제에서는 가져옵니다는 `Type` 지정된 된 클래스에 대 한 개체를 가져옵니다는 <xref:System.Reflection.FieldInfo> 지정 된 바인딩 플래그와 일치 하는 필드의 값을 표시 하는 필드에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1022">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field that matches the specified binding flags, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#2)]
 [!code-csharp[Type_GetField#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#2)]
 [!code-vb[Type_GetField#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1023">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1023">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1024">현재 <see cref="T:System.Type" />의 필드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1024">Gets the fields of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1025">현재 <see cref="T:System.Type" />의 모든 public 필드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1025">Returns all the public fields of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1026">현재 <see cref="T:System.Reflection.FieldInfo" />에 대해 정의된 모든 public 필드를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1026">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1027">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1027">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1028">현재 <see cref="T:System.Reflection.FieldInfo" />에 대해 정의된 public 필드가 없는 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1028">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1029"><xref:System.Type.GetFields%2A> 메서드 반환 하지 않습니다 필드는 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1029">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1030">코드 영향을 받지 않아야 필드가 반환 되는 순서에 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1030">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1031">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1031">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-1032">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1032">Member Type</span></span>|<span data-ttu-id="ef7f9-1033">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1033">Static</span></span>|<span data-ttu-id="ef7f9-1034">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1034">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-1035">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1035">Constructor</span></span>|<span data-ttu-id="ef7f9-1036">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1036">No</span></span>|<span data-ttu-id="ef7f9-1037">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1037">No</span></span>|  
|<span data-ttu-id="ef7f9-1038">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1038">Field</span></span>|<span data-ttu-id="ef7f9-1039">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1039">No</span></span>|<span data-ttu-id="ef7f9-1040">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1040">Yes.</span></span> <span data-ttu-id="ef7f9-1041">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1041">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1042">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1042">Event</span></span>|<span data-ttu-id="ef7f9-1043">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1043">Not applicable</span></span>|<span data-ttu-id="ef7f9-1044">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1044">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1045">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1045">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1046">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1046">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-1047">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1047">Method</span></span>|<span data-ttu-id="ef7f9-1048">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1048">No</span></span>|<span data-ttu-id="ef7f9-1049">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1049">Yes.</span></span> <span data-ttu-id="ef7f9-1050">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1050">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1051">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1051">Nested Type</span></span>|<span data-ttu-id="ef7f9-1052">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1052">No</span></span>|<span data-ttu-id="ef7f9-1053">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1053">No</span></span>|  
|<span data-ttu-id="ef7f9-1054">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1054">Property</span></span>|<span data-ttu-id="ef7f9-1055">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1055">Not applicable</span></span>|<span data-ttu-id="ef7f9-1056">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1056">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1057">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1057">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1058">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1058">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-1059">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1059">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-1060">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1060">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-1061">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1061">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1062">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1062">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-1063">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1063">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-1064">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.FieldInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1064">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1065">하는 경우 현재 <xref:System.Type> 형식 매개 변수는 제네릭 형식 또는 제네릭 메서드 정의에서이 메서드는 클래스 제약 조건의 public 필드를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1065">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1066">다음 예에서는 사용 하 여 `GetFields()` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1066">The following example shows a use of the `GetFields()` method.</span></span>  
  
 [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]
 [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]
 [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-1067">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1067">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-1068">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1068">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1069">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1069">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1070">파생 클래스에서 재정의되면, 현재 <see cref="T:System.Type" />에 대해 정의된 필드를 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1070">When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1071">현재 <see cref="T:System.Reflection.FieldInfo" />에 대해 정의된 필드 중 지정된 바인딩 제약 조건과 일치하는 모든 필드를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1071">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="ef7f9-1072">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1072">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1073">현재 <see cref="T:System.Reflection.FieldInfo" />에 대해 정의된 필드가 없거나 정의된 필드 중 해당 바인딩 제약 조건과 일치하는 필드가 없을 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1073">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1074"><xref:System.Type.GetFields%2A> 메서드 반환 하지 않습니다 필드는 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1074">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1075">코드 영향을 받지 않아야 필드가 반환 되는 순서에 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1075">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1076">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 검색에 포함할 필드를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1076">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1077">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1077">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1078">지정 `BindingFlags.Public` 검색에 public 필드를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1078">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1079">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 필드 (즉, 전용, 내부 및 보호 된 필드)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1079">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span> <span data-ttu-id="ef7f9-1080">만 보호 하 고 기본 클래스에 내부 필드가 반환 됩니다. 기본 클래스에 전용 필드는 반환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1080">Only protected and internal fields on base classes are returned; private fields on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="ef7f9-1081">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1081">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-1082">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1082">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-1083">`BindingFlags.DeclaredOnly` 에 선언 된 필드에만 검색 하는 <xref:System.Type>, 상속 된 필드가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1083">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-1084">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1084">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-1085">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.FieldInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1085">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1086">하는 경우 현재 <xref:System.Type> 형식 매개 변수는 제네릭 형식 또는 제네릭 메서드 정의에서이 메서드는 클래스 제약 조건의 public 필드를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1086">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1087">다음 예에서는 사용 하 여 `GetFields(BindingFlags)` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1087">The following example shows a use of the `GetFields(BindingFlags)` method.</span></span>  
  
 [!code-cpp[Classic MethodBase.Attributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.Attributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.Attributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1088">닫힌 제네릭 형식의 형식 정의나 제네릭 형식 정의의 형식 매개 변수를 나타내는 <see cref="T:System.Type" /> 개체의 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1088">Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1089">제네릭 형식의 형식 인수를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1089">An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type.</span>
          </span>
          <span data-ttu-id="ef7f9-1090">현재 형식이 제네릭 형식이 아니면 빈 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1090">Returns an empty array if the current type is not a generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1091">배열 요소는 제네릭 형식의 유형 인수 목록에 나타나는 순서 대로 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1091">The array elements are returned in the order in which they appear in the list of type arguments for the generic type.</span></span>  
  
-   <span data-ttu-id="ef7f9-1092">현재 형식이 생성된 된 닫힌된 형식 (즉,는 <xref:System.Type.ContainsGenericParameters%2A> 속성에서 반환 `false`)를 반환 하는 배열은 <xref:System.Type.GetGenericArguments%2A> 메서드에 제네릭 형식 정의의 제네릭 형식 매개 변수에 할당 된 형식이 포함 되어 있습니다. .</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1092">If the current type is a closed constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Type.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic type definition.</span></span>  
  
-   <span data-ttu-id="ef7f9-1093">현재 형식이 제네릭 형식 정의 인 경우 형식 매개 변수 배열에 포함 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1093">If the current type is a generic type definition, the array contains the type parameters.</span></span>  
  
-   <span data-ttu-id="ef7f9-1094">현재 형식이 개방형 생성된 형식 (즉,는 <xref:System.Type.ContainsGenericParameters%2A> 속성에서 반환 `true`) 어떤 종류의 모든 바깥쪽 제네릭 형식 또는 메서드의 형식 매개 변수 및 형식 매개 변수를 할당 되어 있지, 배열 포함 형식 및 형식 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1094">If the current type is an open constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`) in which specific types have not been assigned to all of the type parameters and type parameters of enclosing generic types or methods, the array contains both types and type parameters.</span></span> <span data-ttu-id="ef7f9-1095">사용 하 여 <xref:System.Type.IsGenericParameter%2A> 구분 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1095">Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart.</span></span> <span data-ttu-id="ef7f9-1096">이 시나리오를 보여 주는 코드 예제를 참조 하세요.는 <xref:System.Type.ContainsGenericParameters%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1096">For a demonstration of this scenario, see the code example for the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>  
  
 <span data-ttu-id="ef7f9-1097">제네릭 리플렉션에 사용되는 용어의 고정 조건 목록은 <xref:System.Type.IsGenericType%2A> 속성 설명을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1097">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1098">다음 코드 예제에서는 <xref:System.Type.GetGenericArguments%2A> 메서드를 생성 된 형식의 형식 인수 및 제네릭 형식 정의의 형식 매개 변수를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1098">The following code example uses the <xref:System.Type.GetGenericArguments%2A> method to display the type arguments of a constructed type and the type parameters of its generic type definition.</span></span>  
  
 <span data-ttu-id="ef7f9-1099">이 코드 예제는에 대해 제공 된 큰 예제의 일부는 <xref:System.Type.IsGenericTypeDefinition%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1099">This code example is part of a larger example provided for the <xref:System.Type.IsGenericTypeDefinition%2A> property.</span></span> <span data-ttu-id="ef7f9-1100">보다 큰 예제의 샘플 출력에 대 한 참조입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1100">See the larger example for sample output.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-1101">호출된 메서드가 기본 클래스에서 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1101">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="ef7f9-1102">파생 클래스에서 구현을 제공해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1102">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1103">현재 제네릭 형식 매개 변수에 대한 제약 조건을 나타내는 <see cref="T:System.Type" /> 개체의 배열을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1103">Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1104">현재 제네릭 형식 매개 변수에 대한 제약 조건을 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1104">An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1105">제네릭 형식 매개 변수에 각 제약 조건으로 표시는 <xref:System.Type> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1105">Each constraint on a generic type parameter is expressed as a <xref:System.Type> object.</span></span> <span data-ttu-id="ef7f9-1106">사용 하 여는 <xref:System.Type.IsClass%2A> 속성을 기본 클래스 제약 조건을 제약 조건 인지; 속성이 반환 하는 경우 확인할 `false`, 제약 조건에 인터페이스 제약 조건입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1106">Use the <xref:System.Type.IsClass%2A> property to determine whether a constraint is the base class constraint; if the property returns `false`, the constraint is an interface constraint.</span></span> <span data-ttu-id="ef7f9-1107">형식 매개 변수 클래스 제약 조건이 있으며 인터페이스 제약 조건이 없을 경우 빈 배열을 반환 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1107">If a type parameter has no class constraint and no interface constraints, an empty array is returned.</span></span>  
  
 <span data-ttu-id="ef7f9-1108">제네릭 리플렉션에 사용되는 용어의 고정 조건 목록은 <xref:System.Type.IsGenericType%2A> 속성 설명을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1108">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1109">다음 코드 예제에서는 제네릭 형식 정의 `Test` 제약 조건이 서로 다른 두 개의 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1109">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="ef7f9-1110">제약 조건을 사용 하 여 검사 프로그램을 실행 하는 경우는 <xref:System.Type.GenericParameterAttributes%2A> 속성 및 <xref:System.Type.GetGenericParameterConstraints%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1110">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ef7f9-1111">현재 <see cref="T:System.Type" /> 개체가 제네릭 형식 매개 변수가 아닌 경우.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1111">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span>
          </span>
          <span data-ttu-id="ef7f9-1112">즉, <see cref="P:System.Type.IsGenericParameter" /> 속성이 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1112">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <altmember cref="P:System.Type.IsGenericParameter" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetGenericTypeDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1113">현재 제네릭 형식을 생성할 수 있는 제네릭 형식 정의를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1113">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1114">현재 형식을 생성할 수 있는 제네릭 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1114">A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1115">제네릭 형식 정의 다른 형식을 생성 하는 데 사용 될 수 있는 템플릿입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1115">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="ef7f9-1116">예를 들어 제네릭 형식 정의에서 `G<T>` (C# 구문; 표시 합니다. `G(Of T)` Visual Basic의 또는 `generic <typename T> ref class G` c + +에서) 생성 하 고 형식을 인스턴스화하고 `G<int>` (`G(Of Integer)` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1116">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic).</span></span> <span data-ttu-id="ef7f9-1117">지정 된는 <xref:System.Type> 생성 된 형식을 나타내는이 개체는 <xref:System.Type.GetGenericTypeDefinition%2A> 메서드는 제네릭 형식 정의 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1117">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the generic type definition.</span></span>  
  
 <span data-ttu-id="ef7f9-1118">동일한 형식 인수를 사용 하 여 두 개의 생성 된 형식을 동일한 제네릭 형식 정의에서 생성 되 면는 <xref:System.Type.GetGenericTypeDefinition%2A> 메서드가 반환 하는 동일한 <xref:System.Type> 두 유형 모두에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1118">If two constructed types are created from the same generic type definition, using the same type arguments, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the same <xref:System.Type> object for both types.</span></span>  
  
 <span data-ttu-id="ef7f9-1119">호출 하는 경우는 <xref:System.Type.GetGenericTypeDefinition%2A> 에서 메서드는 <xref:System.Type> 이미 제네릭 형식 정의 나타내는 개체 현재 반환 <xref:System.Type>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1119">If you call the <xref:System.Type.GetGenericTypeDefinition%2A> method on a <xref:System.Type> object that already represents a generic type definition, it returns the current <xref:System.Type>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ef7f9-1120">제네릭 형식의 배열은 그 자체로 있지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1120">An array of generic types is not itself generic.</span></span> <span data-ttu-id="ef7f9-1121">C# 코드에서 `A<int>[] v;` 또는 Visual Basic 코드 `Dim v() As A(Of Integer)`, 변수의 형식을 `v` 는 제네릭이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1121">In the C# code `A<int>[] v;` or the Visual Basic code `Dim v() As A(Of Integer)`, the type of variable `v` is not generic.</span></span> <span data-ttu-id="ef7f9-1122">사용 하 여 <xref:System.Type.IsGenericType%2A> 를 호출 하기 전에 제네릭 형식 인지 확인 <xref:System.Type.GetGenericTypeDefinition%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1122">Use <xref:System.Type.IsGenericType%2A> to determine whether a type is generic before calling <xref:System.Type.GetGenericTypeDefinition%2A>.</span></span>  
  
 <span data-ttu-id="ef7f9-1123">제네릭 리플렉션에 사용되는 용어의 고정 조건 목록은 <xref:System.Type.IsGenericType%2A> 속성 설명을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1123">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1124">다음 코드 예제에서는 일반적인 인스턴스 작성을 사용 하 여 생성 된 형식의 인스턴스를 만들고 다음 사용 하 여는 <xref:System.Type.GetType%2A> 및 <xref:System.Type.GetGenericTypeDefinition%2A> 생성된 형식 및 제네릭 형식 정의 검색 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1124">The following code example creates an instance of a constructed type by using ordinary instance creation and then uses the <xref:System.Type.GetType%2A> and <xref:System.Type.GetGenericTypeDefinition%2A> methods to retrieve the constructed type and the generic type definition.</span></span> <span data-ttu-id="ef7f9-1125">이 예제에서는 제네릭 사용 <xref:System.Collections.Generic.Dictionary%602> 유형, 생성 된 형식 나타내는 <xref:System.Collections.Generic.Dictionary%602> 의 `Test` 문자열 키가 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1125">This example uses the generic <xref:System.Collections.Generic.Dictionary%602> type; the constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ef7f9-1126">현재 형식은 제네릭 형식이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1126">The current type is not a generic type.</span>
          </span>
          <span data-ttu-id="ef7f9-1127">즉, <see cref="P:System.Type.IsGenericType" />이 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1127">That is, <see cref="P:System.Type.IsGenericType" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-1128">호출된 메서드가 기본 클래스에서 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1128">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="ef7f9-1129">파생 클래스에서 구현을 제공해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1129">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1130">이 인스턴스의 해시 코드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1130">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1131">이 인스턴스의 해시 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1131">The hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1132">이 메서드는 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>를 재정의합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1132">This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1133">해시 코드를 표시 하는 다음 예제는 `System.Windows.Forms.Button` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1133">The following example displays the hash code of the `System.Windows.Forms.Button` class.</span></span>  
  
 [!code-cpp[Type_GetHashCode_GetFields#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CPP/type_gethashcode_getfields.cpp#1)]
 [!code-csharp[Type_GetHashCode_GetFields#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CS/type_gethashcode_getfields.cs#1)]
 [!code-vb[Type_GetHashCode_GetFields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetHashCode_GetFields/VB/type_gethashcode_getfields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1134">현재 <see cref="T:System.Type" />에 의해 구현되거나 상속되는 특정 인터페이스를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1134">Gets a specific interface implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetInterface(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1135">가져올 인터페이스의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1135">The string containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="ef7f9-1136">제네릭 인터페이스의 경우 이것은 형식 표시 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1136">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1137">지정된 이름의 인터페이스를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1137">Searches for the interface with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1138">개체는 현재 <see cref="T:System.Type" />에 의해 구현되거나 상속되는, 지정된 이름의 인터페이스를 나타내는 개체이며(있는 경우) 이를 나타내고, 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1138">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1139">에 대 한 검색 `name` 대 소문자를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1139">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="ef7f9-1140">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Type> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1140">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1141">하는 경우 현재 <xref:System.Type> 인터페이스 제약 조건과 클래스 또는 인터페이스 제약 조건에서 상속 된 모든 인터페이스 나타냅니다 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 형식 매개 변수를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1141">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1142">제네릭 인터페이스는 `name` 매개 변수는 형식 표시 이름, 억음 악센트로 끝나는 (\`) 및 형식 매개 변수 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1142">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="ef7f9-1143">이 제네릭 인터페이스 정 및 생성 된 제네릭 인터페이스를 둘 다에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1143">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="ef7f9-1144">등을 찾기 위해 `IExample<T>` (`IExample(Of T)` Visual basic에서) 또는 `IExample<string>` (`IExample(Of String)` Visual basic에서), 검색할 ``"IExample`1"``합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1144">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for ``"IExample`1"``.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1145">다음 코드 예제에서는 <xref:System.Type.GetInterface%28System.String%29> 검색 하는 메서드는 <xref:System.Collections.Hashtable> 에 대 한 클래스는 <xref:System.Runtime.Serialization.IDeserializationCallback> 인터페이스 및 인터페이스의 메서드를 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1145">The following code example uses the <xref:System.Type.GetInterface%28System.String%29> method to search the <xref:System.Collections.Hashtable> class for the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and lists the methods of the interface.</span></span>  
  
 <span data-ttu-id="ef7f9-1146">코드 예제도 <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> 메서드 오버 로드와 <xref:System.Type.GetInterfaceMap%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1146">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#1)]
 [!code-csharp[Type_GetInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#1)]
 [!code-vb[Type_GetInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1147">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1147">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-1148">현재 <see cref="T:System.Type" />이 서로 다른 형식 인수를 사용하여 같은 제네릭 인터페이스를 구현하는 형식을 나타내는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1148">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public abstract Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1149">가져올 인터페이스의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1149">The string containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="ef7f9-1150">제네릭 인터페이스의 경우 이것은 형식 표시 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1150">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="ef7f9-1151">단순한 인터페이스 이름을 지정하는 <c>name</c>의 해당 부분의 대/소문자를 무시하려면 <see langword="true" />입니다. 네임스페이스를 지정하는 부분은 대/소문자를 올바로 지정해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1151">
              <see langword="true" /> to ignore the case of that part of <c>name</c> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).</span>
          </span>
          <span data-ttu-id="ef7f9-1152">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1152">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1153">
            <c>name</c>의 모든 부분에 대해 대/소문자를 구분하여 검색하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1153">
              <see langword="false" /> to perform a case-sensitive search for all parts of <c>name</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1154">파생 클래스에서 재정의되면 인터페이스 이름에 대해 대/소문자를 구분하지 않고 검색할지를 지정하여 지정된 인터페이스를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1154">When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1155">개체는 현재 <see cref="T:System.Type" />에 의해 구현되거나 상속되는, 지정된 이름의 인터페이스를 나타내는 개체이며(있는 경우) 이를 나타내고, 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1155">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1156">`ignoreCase` 매개 변수 하지 네임 스페이스에는 간단한 인터페이스 이름에만 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1156">The `ignoreCase` parameter applies only to the simple interface name, not to the namespace.</span></span> <span data-ttu-id="ef7f9-1157">부분 `name` 네임 스페이스는 정확한 대/소문자를 포함 해야 합니다 또는 인터페이스를 찾을 수를 지정 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1157">The portion of `name` that specifies the namespace must have the correct case, or the interface will not be found.</span></span> <span data-ttu-id="ef7f9-1158">예를 들어 "System.icomparable"를 찾습니다는 문자열은 <xref:System.IComparable> 인터페이스를 동일 하지만 문자열 "system.icomparable" 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1158">For example, the string "System.icomparable" finds the <xref:System.IComparable> interface, but the string "system.icomparable" does not.</span></span>  
  
 <span data-ttu-id="ef7f9-1159">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Type> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1159">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1160">하는 경우 현재 <xref:System.Type> 인터페이스 제약 조건과 클래스 또는 인터페이스 제약 조건에서 상속 된 모든 인터페이스 나타냅니다 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 형식 매개 변수를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1160">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1161">제네릭 인터페이스는 `name` 매개 변수는 형식 표시 이름, 억음 악센트로 끝나는 (\`) 및 형식 매개 변수 수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1161">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="ef7f9-1162">이 제네릭 인터페이스 정 및 생성 된 제네릭 인터페이스를 둘 다에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1162">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="ef7f9-1163">등을 찾기 위해 `IExample<T>` (`IExample(Of T)` Visual basic에서) 또는 `IExample<string>` (`IExample(Of String)` Visual basic에서), 검색할 `"IExample`1"'.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1163">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for `"IExample`1"\`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1164">다음 코드 예제에서는 <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> 대/소문자 구분 검색을 수행 하는 메서드는 <xref:System.Collections.Hashtable> 에 대 한 클래스는 <xref:System.Collections.IEnumerable> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1164">The following code example uses the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method to perform a case-insensitive search of the <xref:System.Collections.Hashtable> class for the <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 <span data-ttu-id="ef7f9-1165">코드 예제도 <xref:System.Type.GetInterface%28System.String%29> 메서드 오버 로드와 <xref:System.Type.GetInterfaceMap%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1165">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#2)]
 [!code-csharp[Type_GetInterface#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#2)]
 [!code-vb[Type_GetInterface#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1166">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1166">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-1167">현재 <see cref="T:System.Type" />이 서로 다른 형식 인수를 사용하여 같은 제네릭 인터페이스를 구현하는 형식을 나타내는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1167">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="ef7f9-1168">매핑을 검색할 인터페이스의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1168">The interface type to retrieve a mapping for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1169">지정된 인터페이스 형식에 대한 인터페이스 매핑을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1169">Returns an interface mapping for the specified interface type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1170">
            <paramref name="interfaceType" />에 대한 인터페이스 매핑을 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1170">An object that represents the interface mapping for <paramref name="interfaceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1171">인터페이스 맵을 인터페이스 인터페이스를 구현 하는 클래스에 실제 멤버에 매핑하는 방법을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1171">The interface map denotes how an interface is mapped into the actual members on a class that implements that interface.</span></span>  
  
 <span data-ttu-id="ef7f9-1172">경우 현재 <xref:System.Type> 생성된 된 제네릭 형식을 나타내는, 형식 매개 변수가의 요소에 적절 한 형식 인수에 의해 대체 되는 <xref:System.Reflection.InterfaceMapping> 이 메서드에서 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1172">If the current <xref:System.Type> represents a constructed generic type, type parameters are replaced by the appropriate type arguments in the elements of the <xref:System.Reflection.InterfaceMapping> returned by this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1173">다음 예제에서는 <xref:System.Type.GetInterfaceMap%2A> 결정 하는 방법을 <xref:System.IFormatProvider> 인터페이스에 매핑됩니다 <xref:System.Globalization.CultureInfo> 메서드 방식 <xref:System.IAppDomainSetup> 인터페이스에 매핑됩니다 <xref:System.AppDomainSetup> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1173">The following example calls the <xref:System.Type.GetInterfaceMap%2A> method to determine how the <xref:System.IFormatProvider> interface maps to <xref:System.Globalization.CultureInfo> methods, and how the <xref:System.IAppDomainSetup> interface maps to <xref:System.AppDomainSetup> properties.</span></span> <span data-ttu-id="ef7f9-1174">때문에 <xref:System.IAppDomainSetup> 인터페이스 정의 반환 된 속성 집합이 <xref:System.Reflection.InterfaceMapping> 개체를 별도 포함 <xref:System.Reflection.MethodInfo> 속성의 get 및 set 접근자에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1174">Note that, because the <xref:System.IAppDomainSetup> interface defines a set of properties, the returned <xref:System.Reflection.InterfaceMapping> object includes separate <xref:System.Reflection.MethodInfo> objects for a property's get and set accessors.</span></span>  
  
 [!code-csharp[System.Type.GetInterfaceMap#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.getinterfacemap/cs/interfacemapping1.cs#1)]
 [!code-vb[System.Type.GetInterfaceMap#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.getinterfacemap/vb/interfacemapping1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-1175">
            <paramref name="interfaceType" />이 현재 형식으로 구현되지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1175">
              <paramref name="interfaceType" /> is not implemented by the current type.</span>
          </span>
          <span data-ttu-id="ef7f9-1176">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1176">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1177">
            <paramref name="interfaceType" /> 매개 변수가 인스턴스를 참조하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1177">The <paramref name="interfaceType" /> parameter does not refer to an interface.</span>
          </span>
          <span data-ttu-id="ef7f9-1178">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1178">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1179">
            <paramref name="interfaceType" />이 제네릭 인터페이스이고 현재 형식이 배열 형식인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1179">
              <paramref name="interfaceType" /> is a generic interface, and the current type is an array type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1180">
            <paramref name="interfaceType" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1180">
              <paramref name="interfaceType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ef7f9-1181">현재 <see cref="T:System.Type" />이 제네릭 형식 매개 변수를 나타내는 경우, 즉 <see cref="P:System.Type.IsGenericParameter" />가 <see langword="true" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1181">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-1182">호출된 메서드가 기본 클래스에서 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1182">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="ef7f9-1183">파생 클래스에서 구현을 제공해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1183">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.InterfaceMapping" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public abstract Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaces</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1184">파생 클래스에서 재정의되면, 현재 <see cref="T:System.Type" />에 의해 구현되거나 상속되는 모든 인터페이스를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1184">When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1185">현재 <see cref="T:System.Type" />에 의해 구현되거나 상속되는 모든 인터페이스를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1185">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1186">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1186">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1187">현재 <see cref="T:System.Type" />에 의해 구현되거나 상속되는 인터페이스가 없는 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1187">An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1188"><xref:System.Type.GetInterfaces%2A> 메서드 반환 하지 않습니다 인터페이스를 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1188">The <xref:System.Type.GetInterfaces%2A> method does not return interfaces in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1189">코드 영향을 받지 않아야 인터페이스가 반환 되는 순서에 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1189">Your code must not depend on the order in which interfaces are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1190">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Type> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1190">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1191">하는 경우 현재 <xref:System.Type> 인터페이스 제약 조건과 클래스 또는 인터페이스 제약 조건에서 상속 된 모든 인터페이스 나타냅니다 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 형식 매개 변수를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1191">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1192">다음 예제에서는 지정된 된 클래스의 형식을 가져오고 형식을 구현 하거나 상속 하는 모든 인터페이스를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1192">The following example gets the type of the specified class and displays all the interfaces that the type implements or inherits.</span></span> <span data-ttu-id="ef7f9-1193">Visual Basic 예제를 컴파일하려면 다음 컴파일러 명령을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1193">To compile the Visual Basic example, use the following compiler commands:</span></span>  
  
 `vbc type_getinterfaces1.vb /r:System.Web.dll /r:System.dll`  
  
 [!code-cpp[Type_GetInterfaces1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterfaces1/CPP/type_getinterfaces1.cpp#1)]
 [!code-csharp[Type_GetInterfaces1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterfaces1/CS/type_getinterfaces1.cs#1)]
 [!code-vb[Type_GetInterfaces1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterfaces1/VB/type_getinterfaces1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ef7f9-1194">정적 이니셜라이저가 호출되고 예외를 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1194">A static initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1195">현재 <see cref="T:System.Type" />의 지정된 멤버를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1195">Gets the specified members of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1196">가져올 public 멤버의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1196">The string containing the name of the public members to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1197">지정된 이름의 public 멤버를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1197">Searches for the public members with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1198">지정된 이름의 public 멤버가 있으면 이를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체의 배열이고, 그렇지 않으면 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1198">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1199">에 대 한 검색 `name` 대 소문자를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1199">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="ef7f9-1200">검색 public static 및 public 인스턴스 멤버를 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1200">The search includes public static and public instance members.</span></span>  
  
 <span data-ttu-id="ef7f9-1201">구성원 속성, 메서드, 필드, 이벤트 및 등을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1201">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="ef7f9-1202"><xref:System.Type.GetMember%2A> 메서드 반환 하지 않습니다 구성원을 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1202">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1203">코드 영향을 받지 않아야에 멤버가 반환 되는 순서 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1203">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1204">이 메서드 오버 로드 클래스 이니셜라이저가 (.cctor) 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1204">This method overload will not find class initializers (.cctor).</span></span> <span data-ttu-id="ef7f9-1205">클래스 이니셜라이저를 사용 하는 오버 로드를 사용 하 여 <xref:System.Reflection.BindingFlags>를 지정 하 고 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1205">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="ef7f9-1206">클래스 이니셜라이저를 사용 하 여 얻을 수 있습니다는 <xref:System.Type.TypeInitializer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1206">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="ef7f9-1207">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1207">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-1208">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1208">Member Type</span></span>|<span data-ttu-id="ef7f9-1209">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1209">Static</span></span>|<span data-ttu-id="ef7f9-1210">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1210">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-1211">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1211">Constructor</span></span>|<span data-ttu-id="ef7f9-1212">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1212">No</span></span>|<span data-ttu-id="ef7f9-1213">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1213">No</span></span>|  
|<span data-ttu-id="ef7f9-1214">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1214">Field</span></span>|<span data-ttu-id="ef7f9-1215">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1215">No</span></span>|<span data-ttu-id="ef7f9-1216">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1216">Yes.</span></span> <span data-ttu-id="ef7f9-1217">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1217">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1218">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1218">Event</span></span>|<span data-ttu-id="ef7f9-1219">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1219">Not applicable</span></span>|<span data-ttu-id="ef7f9-1220">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1220">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1221">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1221">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1222">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1222">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-1223">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1223">Method</span></span>|<span data-ttu-id="ef7f9-1224">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1224">No</span></span>|<span data-ttu-id="ef7f9-1225">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1225">Yes.</span></span> <span data-ttu-id="ef7f9-1226">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1226">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1227">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1227">Nested Type</span></span>|<span data-ttu-id="ef7f9-1228">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1228">No</span></span>|<span data-ttu-id="ef7f9-1229">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1229">No</span></span>|  
|<span data-ttu-id="ef7f9-1230">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1230">Property</span></span>|<span data-ttu-id="ef7f9-1231">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1231">Not applicable</span></span>|<span data-ttu-id="ef7f9-1232">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1232">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1233">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1233">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1234">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1234">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-1235">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1235">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-1236">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1236">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-1237">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1237">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1238">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1238">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-1239">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1239">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-1240">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.MemberInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1240">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1241">하는 경우 현재 <xref:System.Type> 나타냅니다의 멤버 또는 멤버는 클래스 제약 조건의 형식 매개 변수 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1241">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1242">제네릭 메서드의 형식 인수에을 포함 하지 마십시오 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1242">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="ef7f9-1243">예를 들어 C# 코드 `GetMember("MyMethod<int>")` 텍스트 이름 가진 멤버에 대 한 검색 "`MyMethod<int>`", 라는 메서드가 아니라 `MyMethod` 형식의 제네릭 인수가 하나 있는 `int`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1243">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1244">모든 멤버를 표시 하는 다음 예제는 `String` c로 시작 하는 클래스</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1244">The following example displays all the members of the `String` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#1)]
 [!code-csharp[Type_GetMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#1)]
 [!code-vb[Type_GetMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1245">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1245">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1246">가져올 멤버의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1246">The string containing the name of the members to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-1247">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1247">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-1248">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1248">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1249">빈 배열을 반환하려는 경우 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1249">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1250">지정된 멤버를 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1250">Searches for the specified members, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1251">지정된 이름의 public 멤버가 있으면 이를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체의 배열이고, 그렇지 않으면 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1251">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1252">이 메서드는 파생된 클래스에서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1252">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="ef7f9-1253">구성원 속성, 메서드, 필드, 이벤트 및 등을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1253">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="ef7f9-1254"><xref:System.Type.GetMember%2A> 메서드 반환 하지 않습니다 구성원을 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1254">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1255">코드 영향을 받지 않아야에 멤버가 반환 되는 순서 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1255">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1256">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 멤버를 정의 하는 검색에 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1256">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1257">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1257">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1258">지정 `BindingFlags.Public` 검색에 공용 멤버를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1258">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1259">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 멤버 (즉, 전용, 내부 및 보호 된 멤버)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1259">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1260">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1260">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-1261">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1261">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-1262">`BindingFlags.IgnoreCase` 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1262">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-1263">`BindingFlags.DeclaredOnly` 에 선언 된 멤버만 검색 하는 <xref:System.Type>, 상속 된 멤버가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1263">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-1264">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1264">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-1265">이 메서드 오버 로드를 사용 하 여 클래스 이니셜라이저 (.cctor)을 가져오려면에 대 한 ".cctor"를 지정 해야 `name`, 및 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual basic에서)에 대 한 `bindingAttr`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1265">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="ef7f9-1266">클래스 이니셜라이저를 사용 하 여 얻을 수 있습니다는 <xref:System.Type.TypeInitializer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1266">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="ef7f9-1267">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.MemberInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1267">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1268">하는 경우 현재 <xref:System.Type> 나타냅니다의 멤버 또는 멤버는 클래스 제약 조건의 형식 매개 변수 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1268">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1269">제네릭 메서드의 형식 인수에을 포함 하지 마십시오 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1269">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="ef7f9-1270">예를 들어 C# 코드 `GetMember("MyMethod<int>")` 텍스트 이름 가진 멤버에 대 한 검색 "`MyMethod<int>`", 라는 메서드가 아니라 `MyMethod` 형식의 제네릭 인수가 하나 있는 `int`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1270">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1271">모든 공용 정적 멤버를 표시 하는 다음 예제는 `myString` c로 시작 하는 클래스</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1271">The following example displays all the public static members of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#2)]
 [!code-csharp[Type_GetMember#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#2)]
 [!code-vb[Type_GetMember#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1272">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1272">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1273">가져올 멤버의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1273">The string containing the name of the members to get.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="ef7f9-1274">검색할 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1274">The value to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-1275">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1275">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-1276">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1276">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1277">빈 배열을 반환하려는 경우 0입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1277">Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1278">지정된 멤버 형식의 지정된 멤버를 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1278">Searches for the specified members of the specified member type, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1279">지정된 이름의 public 멤버가 있으면 이를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체의 배열이고, 그렇지 않으면 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1279">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1280">구성원 속성, 메서드, 필드, 이벤트 및 등을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1280">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="ef7f9-1281"><xref:System.Type.GetMember%2A> 메서드 반환 하지 않습니다 구성원을 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1281">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1282">코드 영향을 받지 않아야에 멤버가 반환 되는 순서 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1282">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1283">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 멤버를 정의 하는 검색에 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1283">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1284">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1284">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1285">지정 `BindingFlags.Public` 검색에 공용 멤버를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1285">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1286">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 멤버 (즉, 전용, 내부 및 보호 된 멤버)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1286">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1287">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1287">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-1288">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1288">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-1289">`BindingFlags.IgnoreCase` 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1289">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-1290">`BindingFlags.DeclaredOnly` 에 선언 된 멤버만 검색 하는 <xref:System.Type>, 상속 된 멤버가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1290">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-1291">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1291">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-1292">이 메서드 오버 로드를 사용 하 여 클래스 이니셜라이저 (.cctor)을 가져오려면에 대 한 ".cctor"를 지정 해야 `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> 에 대 한 `type`, 및 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> 에 Visual Basic의 경우)에 대 한 `bindingAttr`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1292">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> for `type`, and  <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="ef7f9-1293">클래스 이니셜라이저를 사용 하 여 얻을 수 있습니다는 <xref:System.Type.TypeInitializer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1293">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="ef7f9-1294">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.MemberInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1294">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1295">하는 경우 현재 <xref:System.Type> 나타냅니다의 멤버 또는 멤버는 클래스 제약 조건의 형식 매개 변수 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1295">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1296">제네릭 메서드의 형식 인수에을 포함 하지 마십시오 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1296">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="ef7f9-1297">예를 들어 C# 코드 `GetMember("MyMethod<int>")` 텍스트 이름 가진 멤버에 대 한 검색 "`MyMethod<int>`", 라는 메서드가 아니라 `MyMethod` 형식의 제네릭 인수가 하나 있는 `int`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1297">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1298">모든 메서드를 표시 하는 다음 예제는 `myString` c로 시작 하는 클래스</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1298">The following example displays all the methods of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#3)]
 [!code-csharp[Type_GetMember#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#3)]
 [!code-vb[Type_GetMember#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1299">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1299">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-1300">파생 클래스에서 구현을 제공해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1300">A derived class must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1301">현재 <see cref="T:System.Type" />의 멤버(속성, 메서드, 필드, 이벤트 등)를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1301">Gets the members (properties, methods, fields, events, and so on) of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1302">현재 <see cref="T:System.Type" />의 모든 public 멤버를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1302">Returns all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1303">현재 <see cref="T:System.Reflection.MemberInfo" />의 모든 public 멤버를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1303">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1304">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1304">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1305">현재 <see cref="T:System.Reflection.MemberInfo" />에 public 멤버가 없을 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1305">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1306">구성원 속성, 메서드, 필드, 이벤트 및 등을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1306">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="ef7f9-1307"><xref:System.Type.GetMembers%2A> 메서드 반환 하지 않습니다 구성원을 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1307">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1308">코드 영향을 받지 않아야에 멤버가 반환 되는 순서 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1308">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1309">이 메서드 오버 로드는 <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> 메서드 오버 로드와 <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1309">This method overload calls the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="ef7f9-1310">클래스 이니셜라이저가 (.cctor)를 검색 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1310">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="ef7f9-1311">클래스 이니셜라이저를 사용 하는 오버 로드를 사용 하 여 <xref:System.Reflection.BindingFlags>를 지정 하 고 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1311">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="ef7f9-1312">클래스 이니셜라이저를 사용 하 여 얻을 수 있습니다는 <xref:System.Type.TypeInitializer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1312">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="ef7f9-1313">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1313">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-1314">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1314">Member Type</span></span>|<span data-ttu-id="ef7f9-1315">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1315">Static</span></span>|<span data-ttu-id="ef7f9-1316">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1316">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-1317">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1317">Constructor</span></span>|<span data-ttu-id="ef7f9-1318">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1318">No</span></span>|<span data-ttu-id="ef7f9-1319">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1319">No</span></span>|  
|<span data-ttu-id="ef7f9-1320">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1320">Field</span></span>|<span data-ttu-id="ef7f9-1321">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1321">No</span></span>|<span data-ttu-id="ef7f9-1322">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1322">Yes.</span></span> <span data-ttu-id="ef7f9-1323">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1323">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1324">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1324">Event</span></span>|<span data-ttu-id="ef7f9-1325">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1325">Not applicable</span></span>|<span data-ttu-id="ef7f9-1326">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1326">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1327">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1327">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1328">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1328">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-1329">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1329">Method</span></span>|<span data-ttu-id="ef7f9-1330">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1330">No</span></span>|<span data-ttu-id="ef7f9-1331">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1331">Yes.</span></span> <span data-ttu-id="ef7f9-1332">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1332">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1333">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1333">Nested Type</span></span>|<span data-ttu-id="ef7f9-1334">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1334">No</span></span>|<span data-ttu-id="ef7f9-1335">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1335">No</span></span>|  
|<span data-ttu-id="ef7f9-1336">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1336">Property</span></span>|<span data-ttu-id="ef7f9-1337">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1337">Not applicable</span></span>|<span data-ttu-id="ef7f9-1338">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1338">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1339">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1339">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1340">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1340">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-1341">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1341">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-1342">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1342">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-1343">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1343">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1344">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1344">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-1345">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1345">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-1346">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.MemberInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1346">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1347">하는 경우 현재 <xref:System.Type> 나타냅니다의 멤버 또는 멤버는 클래스 제약 조건의 형식 매개 변수 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1347">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1348">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Type.GetMembers> 메서드 오버 로드는 지정 된 클래스의 모든 public 멤버에 대 한 정보를 수집 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1348">The following code example demonstrates how to use the <xref:System.Type.GetMembers> method overload to collect information about all public members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers1/CPP/type_getmembers1.cpp#1)]
 [!code-csharp[Type_GetMembers1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers1/CS/type_getmembers1.cs#1)]
 [!code-vb[Type_GetMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers1/VB/type_getmembers1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-1349">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1349">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-1350">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1350">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1351">빈 배열을 반환하려는 경우 0(<see cref="F:System.Reflection.BindingFlags.Default" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1351">Zero (<see cref="F:System.Reflection.BindingFlags.Default" />), to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1352">파생 클래스에서 재정의되면, 현재 <see cref="T:System.Type" />에 대해 정의된 멤버를 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1352">When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1353">현재 <see cref="T:System.Reflection.MemberInfo" />에 대해 정의된 필드 중 지정된 바인딩 제약 조건과 일치하는 모든 멤버를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1353">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="ef7f9-1354">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1354">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1355">현재 <see cref="T:System.Reflection.MemberInfo" />에 대해 정의된 멤버가 없거나 정의된 필드 중 해당 바인딩 제약 조건과 일치하는 멤버가 없을 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1355">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1356">구성원 속성, 메서드, 필드, 이벤트 및 등을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1356">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="ef7f9-1357"><xref:System.Type.GetMembers%2A> 메서드 반환 하지 않습니다 구성원을 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1357">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1358">코드 영향을 받지 않아야에 멤버가 반환 되는 순서 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1358">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1359">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 멤버를 정의 하는 검색에 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1359">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1360">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1360">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1361">지정 `BindingFlags.Public` 검색에 공용 멤버를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1361">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1362">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 멤버 (즉, 전용, 내부 및 보호 된 멤버)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1362">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span> <span data-ttu-id="ef7f9-1363">만 보호 하 고 반환 되는 기본 클래스에 내부 멤버가; 기본 클래스에서 전용 멤버 반환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1363">Only protected and internal members on base classes are returned; private members on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="ef7f9-1364">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1364">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-1365">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1365">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-1366">`BindingFlags.DeclaredOnly` 에 선언 된 멤버만 검색 하는 <xref:System.Type>, 상속 된 멤버가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1366">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-1367">이 메서드를 호출할는 `Public` 플래그 또는는 `NonPublic` 플래그는 지정된 된 멤버를 반환 하 고 다른 플래그는 필요 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1367">Calling this method with only the `Public` flag or only the `NonPublic` flag will return the specified members and does not require any other flags.</span></span>  
  
 <span data-ttu-id="ef7f9-1368">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1368">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-1369">지정 해야이 메서드 오버 로드를 사용 하 여 클래스 이니셜라이저 (.cctor)을 가져오려면 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1369">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="ef7f9-1370">클래스 이니셜라이저를 사용 하 여 얻을 수 있습니다는 <xref:System.Type.TypeInitializer%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1370">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="ef7f9-1371">이 메서드가 반환 하는 경우 현재 생성된 된 제네릭 형식을 나타내는는 <xref:System.Reflection.MemberInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1371">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1372">하는 경우 현재 <xref:System.Type> 나타냅니다의 멤버 또는 멤버는 클래스 제약 조건의 형식 매개 변수 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1372">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1373">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> 메서드 오버 로드는 지정 된 클래스의 모든 public 인스턴스 멤버에 대 한 정보를 수집 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1373">The following code example demonstrates how to use the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload to collect information about all public instance members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers2/CPP/type_getmembers2.cpp#1)]
 [!code-csharp[Type_GetMembers2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers2/CS/type_getmembers2.cs#1)]
 [!code-vb[Type_GetMembers2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers2/VB/type_getmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1374">현재 <see cref="T:System.Type" />의 특정 메서드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1374">Gets a specific method of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1375">가져올 public 메서드의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1375">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1376">지정된 이름의 public 메서드를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1376">Searches for the public method with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1377">지정된 이름의 public 메서드를 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1377">An object that represents the public method with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1378">에 대 한 검색 `name` 대 소문자를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1378">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="ef7f9-1379">검색 public static 및 public 인스턴스 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1379">The search includes public static and public instance methods.</span></span>  
  
 <span data-ttu-id="ef7f9-1380">메서드는 오버 로드 되며 둘 이상의 public 메서드가 하는 경우는 <xref:System.Type.GetMethod%28System.String%29> 메서드가 throw는 <xref:System.Reflection.AmbiguousMatchException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1380">If a method is overloaded and has more than one public method, the <xref:System.Type.GetMethod%28System.String%29> method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="ef7f9-1381">다음 예제에서는 공용 오버 로드를 여러 개 있기 때문에 예외가 throw 됩니다는 <xref:System.Int32.ToString%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1381">In the following example, an exception is thrown because there is more than one public overload of the <xref:System.Int32.ToString%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="ef7f9-1382">반면에 때문에 `Person.ToString` 메서드 재정의 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 따라서 오버 로드 되지 않습니다 및, <xref:System.Type.GetMethod%28System.String%29> 메서드는 검색할 수는 <xref:System.Reflection.MethodInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1382">On the other hand, because the `Person.ToString` method overrides  <xref:System.Object.ToString%2A?displayProperty=nameWithType> and therefore is not overloaded, the <xref:System.Type.GetMethod%28System.String%29> method is able to retrieve the <xref:System.Reflection.MethodInfo> object.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads2.cs#3)]
 [!code-vb[System.Type.GetMethod#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads2.vb#3)]  
  
 <span data-ttu-id="ef7f9-1383">특정 메서드를 검색 하려면 다음 중 하나를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1383">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="ef7f9-1384">호출의 <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> 메서드를 지정 하 고는 `bindingAttr` 메서드를 고유 하 게 식별 하는 인수.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1384">Call the <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> method and specify a `bindingAttr` argument that uniquely identifies the method.</span></span> <span data-ttu-id="ef7f9-1385">예를 들어, 형식에는 정적 및 인스턴스 오버 로드 때문에 예외가 throw 되 면 지정할 수 있습니다는 `bindingAttr` 의 인수 <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1385">For example, if the exception is thrown because a type has a static and an instance overload, you can specify a  `bindingAttr` argument  of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="ef7f9-1386">호출의 오버 로드는 <xref:System.Type.GetMethod%2A> 메서드를 포함 하는 `types` 메서드의 매개 변수 유형을 정의 하는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1386">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="ef7f9-1387">호출 된 <xref:System.Type.GetMethods> 모든 형식에 속하는 공용 메서드를 포함 하는 배열을 검색 하는 메서드입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1387">Call the <xref:System.Type.GetMethods> method to retrieve an array containing all of the public methods belonging to a type.</span></span> <span data-ttu-id="ef7f9-1388">명명 된 중복 메서드를 식별 하기 반복 수 있습니다 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1388">You can then iterate it to identify the duplicate methods named `name`.</span></span>  
  
 <span data-ttu-id="ef7f9-1389">이 메서드가 반환 하는 경우 현재 생성된 된 제네릭 형식을 나타내는는 <xref:System.Reflection.MethodInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1389">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1390">하는 경우 현재 <xref:System.Type> 나타냅니다 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 형식 매개 변수는 클래스 제약 조건의 메서드나의 메서드가 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1390">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1391">제네릭 메서드의 형식 인수에을 포함 하지 마십시오 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1391">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="ef7f9-1392">예를 들어 C# 코드 `GetMember("MyMethod<int>")` 텍스트 이름 가진 멤버에 대 한 검색 "`MyMethod<int>`", 라는 메서드가 아니라 `MyMethod` 형식의 제네릭 인수가 하나 있는 `int`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1392">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1393">다음 예에서는 라는 메서드를 가져옵니다 `MethodA`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1393">The following example gets a method named `MethodA`.</span></span>  
  
 [!code-cpp[Type_GetMethod1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod1/CPP/type_getmethod1.cpp#1)]
 [!code-csharp[Type_GetMethod1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod1/CS/type_getmethod1.cs#1)]
 [!code-vb[Type_GetMethod1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod1/VB/type_getmethod1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-1394">지정한 이름을 가진 메서드가 둘 이상 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1394">More than one method is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1395">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1395">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1396">가져올 메서드의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1396">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-1397">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1397">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-1398">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1398">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1399">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1399">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1400">지정된 메서드를 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1400">Searches for the specified method, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1401">지정된 요구 사항과 일치하는 메서드를 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1401">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1402">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 검색에 포함 하는 메서드를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1402">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1403">지정 해야 <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> 또는 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1403">You must specify either <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1404">지정 <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> 검색에 공용 메서드를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1404">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1405">지정 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> 검색에 public이 아닌 메서드 (즉, 전용, 내부 및 보호 된 메서드)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1405">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1406">지정 <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1406">Specify <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-1407">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1407">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-1408"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1408"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-1409"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> 에 선언 된 메서드만 검색 하는 <xref:System.Type>, 상속 된 메서드가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1409"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-1410">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1410">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-1411">메서드 오버 로드 되 고 둘 이상의 오버 로드로 지정 된 제약 조건을 충족 하는 경우는 `bindingAttr` 인수를 메서드에서 throw 한 <xref:System.Reflection.AmbiguousMatchException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1411">If a method is overloaded and more than one overload meets the constraints specified by the `bindingAttr` argument, the method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="ef7f9-1412">다음 예제에서는 예외가 발생 하기 때문에:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1412">In the following example, an exception is thrown because:</span></span>  
  
-   <span data-ttu-id="ef7f9-1413">`TestClass` 형식에 두 public 인스턴스 오버 로드는 `DisplayValue` 메서드를 `DisplayValue(String)` 및 `DisplayValue(String, Object[])`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1413">The `TestClass` type has two public instance overloads of the `DisplayValue` method, `DisplayValue(String)` and `DisplayValue(String, Object[])`.</span></span>  
  
-   <span data-ttu-id="ef7f9-1414">`TestClass` 형식에 두 public 인스턴스 오버 로드는 `Equals` 그 중 하나에서 상속 된 메서드 <xref:System.Object>: `Equals(TestClass)` 및 `Equals(Object)`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1414">The `TestClass` type has two public instance overloads of the `Equals` method,  one of which is inherited from <xref:System.Object>: `Equals(TestClass)` and `Equals(Object)`.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads1.cs#2)]
 [!code-vb[System.Type.GetMethod#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads1.vb#2)]  
  
 <span data-ttu-id="ef7f9-1415">특정 메서드를 검색 하려면 다음 중 하나를 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1415">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="ef7f9-1416">해당 바인딩 제약 조건과 변경 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1416">Change the binding constraints.</span></span> <span data-ttu-id="ef7f9-1417">이전 예제에서 공용 인스턴스를 검색 하는 `Equals` 메서드 형식에서 선언 되 고 성공적으로 상속 되지 않고 검색 `Equals(TestClass)`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1417">In the previous example, attempting to retrieve a public instance `Equals` method that is declared by the type and not inherited successfully retrieves `Equals(TestClass)`.</span></span>  
  
-   <span data-ttu-id="ef7f9-1418">호출의 오버 로드는 <xref:System.Type.GetMethod%2A> 메서드를 포함 하는 `types` 메서드의 매개 변수 유형을 정의 하는 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1418">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="ef7f9-1419">호출 된 <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> 메서드는 지정 된 바인딩 특성을 포함 하는 형식에 속하는 메서드 중 일부를 포함 하는 배열을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1419">Call the <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> method to retrieve an array containing all of the methods belonging to a type that have the specified binding attributes.</span></span> <span data-ttu-id="ef7f9-1420">명명 된 중복 메서드를 식별 하기 반복 수 있습니다 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1420">You can then iterate it to identify the duplicate methods named `name`.</span></span> <span data-ttu-id="ef7f9-1421">이 방법에 대 한 처리기 앞의 예제에에서 나와 <xref:System.Reflection.AmbiguousMatchException> 예외입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1421">This approach is illustrated in the previous example's handler for the <xref:System.Reflection.AmbiguousMatchException> exception.</span></span>  
  
 <span data-ttu-id="ef7f9-1422">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.MethodInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1422">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1423">하는 경우 현재 <xref:System.Type> 나타냅니다 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 형식 매개 변수는 클래스 제약 조건의 메서드나의 메서드가 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1423">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1424">제네릭 메서드의 형식 인수에을 포함 하지 마십시오 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1424">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="ef7f9-1425">예를 들어 C# 코드 `GetMember("MyMethod<int>")` 텍스트 이름 가진 멤버에 대 한 검색 "`MyMethod<int>`", 라는 메서드가 아니라 `MyMethod` 형식의 제네릭 인수가 하나 있는 `int`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1425">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1426">다음 예제에서는 지정된 된 바인딩 플래그와 일치 하는 메서드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1426">The following example gets the method that matches the specified binding flags.</span></span>  
  
 [!code-cpp[Type_GetMethod2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod2/CPP/type_getmethod2.cpp#1)]
 [!code-csharp[Type_GetMethod2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod2/CS/type_getmethod2.cs#1)]
 [!code-vb[Type_GetMethod2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod2/VB/type_getmethod2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-1427">지정한 이름을 가지며 지정된 바인딩 제약 조건과 일치하는 메서드가 둘 이상 발견되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1427">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1428">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1428">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1429">가져올 public 메서드의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1429">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="ef7f9-1430">가져올 메서드에 대한 매개 변수의 수, 차수, 형식 등을 나타내는 <see cref="T:System.Type" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1430">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="ef7f9-1431">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1431">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1432">매개 변수를 사용하지 않는 메서드를 가져올 <see cref="T:System.Type" /> 개체(<see cref="F:System.Type.EmptyTypes" /> 필드에서 제공됨)의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1432">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1433">지정된 인수 형식과 일치하는 매개 변수를 가진 지정된 public 메서드를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1433">Searches for the specified public method whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1434">지정된 인수 형식과 일치하는 매개 변수를 가진 public 메서드를 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1434">An object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1435">에 대 한 검색 `name` 대 소문자를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1435">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="ef7f9-1436">검색 public static 및 public 인스턴스 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1436">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1437">생성자와 메서드를 조회할 때 매개 변수를 생략할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1437">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="ef7f9-1438">호출할 때에 매개 변수를 생략할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1438">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="ef7f9-1439">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.MethodInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1439">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1440">하는 경우 현재 <xref:System.Type> 나타냅니다 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 형식 매개 변수는 클래스 제약 조건의 메서드나의 메서드가 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1440">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1441">`name` 매개 변수는 형식 인수를 포함할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1441">The `name` parameter cannot include type arguments.</span></span> <span data-ttu-id="ef7f9-1442">예를 들어 C# 코드 `GetMethod("MyGenericMethod<int>")` 텍스트 이름의 메서드를 검색 "`MyGenericMethod<int>`", 라는 메서드가 아니라 `MyGenericMethod` 형식의 제네릭 인수가 하나 있는 `int`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1442">For example, the C# code `GetMethod("MyGenericMethod<int>")` searches for a method with the text name "`MyGenericMethod<int>`", rather than for a method named `MyGenericMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="ef7f9-1443">대신를 사용 하 여 `GetMethod("MyGenericMethod")` 에서 적절 한 매개 변수는 `types` 배열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1443">Instead, use `GetMethod("MyGenericMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1444">다음 예제에서는 `MethodA`, 다양 한 형식 인수를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1444">The following example finds specific overloads of `MethodA`, specifying a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1445">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] 예제를 실행 하려면는 `/unsafe` 컴파일러 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1445">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod4/CPP/type_getmethod4.cpp#1)]
 [!code-csharp[Type_GetMethod4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod4/CS/type_getmethod4.cs#1)]
 [!code-vb[Type_GetMethod4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod4/VB/type_getmethod4.vb#1)]  
  
 <span data-ttu-id="ef7f9-1446">다음 예제에서는 검색 <xref:System.Reflection.MethodInfo> 나타내는 개체를 개체는 `Add` 제네릭이 아닌 형식의 메서드 (의 <xref:System.Collections.ArrayList> 클래스), 개방형 제네릭 형식 (는 <xref:System.Collections.Generic.List%601> 클래스), 및 폐쇄형된 제네릭 형식 (의 `List(Of String)` 형식.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1446">The following example retrieves <xref:System.Reflection.MethodInfo> objects that represent the `Add` methods  of a non-generic type (the <xref:System.Collections.ArrayList> class), an open generic type (the <xref:System.Collections.Generic.List%601> class), and a closed generic type (the `List(Of String)` type.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethod1.cs#1)]
 [!code-vb[System.Type.GetMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethod1.vb#1)]  
  
 <span data-ttu-id="ef7f9-1447">이 예제에서는 정의 `GetAddMethod` 적절 한 검색 <xref:System.Reflection.MethodInfo> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1447">The example defines a `GetAddMethod` method that retrieves the appropriate <xref:System.Reflection.MethodInfo> object.</span></span> <span data-ttu-id="ef7f9-1448">제공 하는 `types` 호출 개방형 제네릭 형식에 대 한 인수는 <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1448">To provide the `types` argument for an open generic type, it calls the <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="ef7f9-1449">제공 하는 `types` 의 값을 검색 폐쇄형된 제네릭 형식에 대 한 인수는 <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1449">To provide the `types` argument for a closed generic type, it retrieves the value of the <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-1450">지정된 이름 및 지정된 매개 변수를 사용하는 메서드가 두 개 이상입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1450">More than one method is found with the specified name and specified parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1451">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1451">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1452">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1452">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1453">
            <paramref name="types" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1453">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1454">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1454">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1455">
            <paramref name="types" />의 요소 중 하나가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1455">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-1456">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1456">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1457">가져올 public 메서드의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1457">The string containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="ef7f9-1458">가져올 메서드에 대한 매개 변수의 수, 차수, 형식 등을 나타내는 <see cref="T:System.Type" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1458">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="ef7f9-1459">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1459">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1460">매개 변수를 사용하지 않는 메서드를 가져올 <see cref="T:System.Type" /> 개체(<see cref="F:System.Type.EmptyTypes" /> 필드에서 제공됨)의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1460">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="ef7f9-1461">
            <c>types</c> 배열에서 해당하는 요소와 연관된 특성을 나타내는 <see cref="T:System.Reflection.ParameterModifier" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1461">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="ef7f9-1462">COM interop를 통해 호출하는 경우에만 사용되며 참조에 의해 전달된 매개 변수만 처리합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1462">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="ef7f9-1463">기본 바인더에서는 이 매개 변수를 처리하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1463">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1464">지정된 인수 형식 및 한정자와 일치하는 매개 변수를 가진 지정된 public 메서드를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1464">Searches for the specified public method whose parameters match the specified argument types and modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1465">지정된 요구 사항과 일치하는 public 메서드를 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1465">An object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1466">기본 바인더는 처리 하지 않더라도 <xref:System.Reflection.ParameterModifier> (의 `modifiers` 매개 변수), 추상을 사용할 수 있습니다 <xref:System.Reflection.Binder?displayProperty=nameWithType> 클래스는 사용자 지정 처리 하는 바인더를 작성 하 `modifiers`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1466">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="ef7f9-1467">`ParameterModifier` COM interop를 통해 호출할 때만 사용 되 고 참조로 전달 되는 매개 변수만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1467">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="ef7f9-1468">에 대 한 검색 `name` 대 소문자를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1468">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="ef7f9-1469">검색 public static 및 public 인스턴스 메서드를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1469">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1470">생성자와 메서드를 조회할 때 매개 변수를 생략할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1470">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="ef7f9-1471">호출할 때에 매개 변수를 생략할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1471">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="ef7f9-1472">이 메서드가 반환 하는 경우 현재 생성된 된 제네릭 형식을 나타내는는 <xref:System.Reflection.MethodInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1472">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1473">하는 경우 현재 <xref:System.Type> 나타냅니다 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 형식 매개 변수는 클래스 제약 조건의 메서드나의 메서드가 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1473">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1474">제네릭 메서드의 형식 인수에을 포함 하지 마십시오 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1474">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="ef7f9-1475">예를 들어 C# 코드 `GetMethod("MyMethod<int>")` 텍스트 이름 가진 멤버에 대 한 검색 "`MyMethod<int>`", 라는 메서드가 아니라 `MyMethod` 형식의 제네릭 인수가 하나 있는 `int`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1475">For example, the C# code `GetMethod("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="ef7f9-1476">대신를 사용 하 여 `GetMethod("MyMethod")` 에서 적절 한 매개 변수는 `types` 배열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1476">Instead, use `GetMethod("MyMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-1477">지정된 이름 및 지정된 매개 변수를 사용하는 메서드가 두 개 이상입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1477">More than one method is found with the specified name and specified parameters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1478">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1478">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1479">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1479">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1480">
            <paramref name="types" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1480">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1481">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1481">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1482">
            <paramref name="types" />의 요소 중 하나가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1482">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-1483">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1483">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-1484">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1484">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1485">
            <paramref name="modifiers" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1485">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1486">가져올 메서드의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1486">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-1487">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1487">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-1488">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1488">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1489">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1489">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="ef7f9-1490">속성 집합을 정의하고 바인딩을 활성화하는 개체입니다. 이 개체는 또한 리플렉션을 통해 오버로드된 메서드를 선택할 수 있고 인수 형식을 강제 변환할 수 있으며 멤버를 호출할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1490">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="ef7f9-1491">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1491">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1492">
            <see langword="Nothing" />를 사용하려면 null 참조(Visual Basic의 경우 <see cref="P:System.Type.DefaultBinder" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1492">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="ef7f9-1493">가져올 메서드에 대한 매개 변수의 수, 차수, 형식 등을 나타내는 <see cref="T:System.Type" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1493">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="ef7f9-1494">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1494">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1495">매개 변수를 사용하지 않는 메서드를 가져올 <see cref="T:System.Type" /> 개체(<see cref="F:System.Type.EmptyTypes" /> 필드에서 제공됨)의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1495">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="ef7f9-1496">
            <c>types</c> 배열에서 해당하는 요소와 연관된 특성을 나타내는 <see cref="T:System.Reflection.ParameterModifier" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1496">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="ef7f9-1497">COM interop를 통해 호출하는 경우에만 사용되며 참조에 의해 전달된 매개 변수만 처리합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1497">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="ef7f9-1498">기본 바인더에서는 이 매개 변수를 처리하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1498">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1499">지정된 인수 형식 및 한정자와 일치하는 매개 변수를 가진 지정된 메서드를 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1499">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1500">지정된 요구 사항과 일치하는 메서드를 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1500">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1501">기본 바인더는 처리 하지 않더라도 <xref:System.Reflection.ParameterModifier> (의 `modifiers` 매개 변수), 추상을 사용할 수 있습니다 <xref:System.Reflection.Binder?displayProperty=nameWithType> 클래스는 사용자 지정 처리 하는 바인더를 작성 하 `modifiers`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1501">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="ef7f9-1502">`ParameterModifier` COM interop를 통해 호출할 때만 사용 되 고 참조로 전달 되는 매개 변수만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1502">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="ef7f9-1503">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 검색에 포함 하는 메서드를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1503">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1504">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1504">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1505">지정 `BindingFlags.Public` 검색에 공용 메서드를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1505">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1506">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 메서드 (즉, 전용, 내부 및 보호 된 메서드)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1506">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1507">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1507">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-1508">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1508">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-1509">`BindingFlags.IgnoreCase` 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1509">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-1510">`BindingFlags.DeclaredOnly` 에 선언 된 메서드만 검색 하는 <xref:System.Type>, 상속 된 메서드가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1510">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-1511">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1511">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1512">생성자와 메서드를 조회할 때 매개 변수를 생략할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1512">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="ef7f9-1513">호출할 때에 매개 변수를 생략할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1513">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="ef7f9-1514">이 메서드가 반환 하는 경우 현재 생성된 된 제네릭 형식을 나타내는는 <xref:System.Reflection.MethodInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1514">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1515">하는 경우 현재 <xref:System.Type> 나타냅니다 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 형식 매개 변수는 클래스 제약 조건의 메서드나의 메서드가 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1515">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1516">제네릭 메서드의 형식 인수에을 포함 하지 마십시오 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1516">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="ef7f9-1517">예를 들어 C# 코드 `GetMember("MyMethod<int>")` 텍스트 이름 가진 멤버에 대 한 검색 "`MyMethod<int>`", 라는 메서드가 아니라 `MyMethod` 형식의 제네릭 인수가 하나 있는 `int`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1517">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1518">다음 예제에서는 `MethodA`, 바인딩 제약 조건 및 다양 한 형식 인수를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1518">The following example finds specific overloads of `MethodA`, specifying binding constraints and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1519">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] 예제를 실행 하려면는 `/unsafe` 컴파일러 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1519">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod5/CPP/type_getmethod5.cpp#1)]
 [!code-csharp[Type_GetMethod5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod5/CS/type_getmethod5.cs#1)]
 [!code-vb[Type_GetMethod5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod5/VB/type_getmethod5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-1520">지정한 이름을 가지며 지정된 바인딩 제약 조건과 일치하는 메서드가 둘 이상 발견되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1520">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1521">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1521">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1522">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1522">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1523">
            <paramref name="types" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1523">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1524">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1524">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1525">
            <paramref name="types" />의 요소 중 하나가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1525">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-1526">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1526">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-1527">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1527">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1528">
            <paramref name="modifiers" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1528">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1529">가져올 메서드의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1529">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-1530">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1530">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-1531">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1531">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1532">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1532">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="ef7f9-1533">속성 집합을 정의하고 바인딩을 활성화하는 개체입니다. 이 개체는 또한 리플렉션을 통해 오버로드된 메서드를 선택할 수 있고 인수 형식을 강제 변환할 수 있으며 멤버를 호출할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1533">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="ef7f9-1534">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1534">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1535">
            <see langword="Nothing" />를 사용하려면 null 참조(Visual Basic의 경우 <see cref="P:System.Type.DefaultBinder" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1535">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="ef7f9-1536">인수의 순서 및 레이아웃, 반환 값의 전달 방법, 인수에 사용되는 레지스터, 스택 정리 방법 등과 관련하여 사용할 규칙을 지정하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1536">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="ef7f9-1537">가져올 메서드에 대한 매개 변수의 수, 차수, 형식 등을 나타내는 <see cref="T:System.Type" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1537">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="ef7f9-1538">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1538">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1539">매개 변수를 사용하지 않는 메서드를 가져올 <see cref="T:System.Type" /> 개체(<see cref="F:System.Type.EmptyTypes" /> 필드에서 제공됨)의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1539">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="ef7f9-1540">
            <c>types</c> 배열에서 해당하는 요소와 연관된 특성을 나타내는 <see cref="T:System.Reflection.ParameterModifier" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1540">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="ef7f9-1541">COM interop를 통해 호출하는 경우에만 사용되며 참조에 의해 전달된 매개 변수만 처리합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1541">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span>
          </span>
          <span data-ttu-id="ef7f9-1542">기본 바인더에서는 이 매개 변수를 처리하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1542">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1543">지정된 인수 형식 및 한정자와 일치하는 매개 변수를 가진 지정된 메서드를 지정된 바인딩 제약 조건과 지정된 호출 규칙으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1543">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1544">지정된 요구 사항과 일치하는 메서드를 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1544">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1545">기본 바인더는 처리 하지 않더라도 <xref:System.Reflection.ParameterModifier> (의 `modifiers` 매개 변수), 추상을 사용할 수 있습니다 <xref:System.Reflection.Binder?displayProperty=nameWithType> 클래스는 사용자 지정 처리 하는 바인더를 작성 하 `modifiers`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1545">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="ef7f9-1546">`ParameterModifier` COM interop를 통해 호출할 때만 사용 되 고 참조로 전달 되는 매개 변수만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1546">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="ef7f9-1547">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `GetXXX` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1547">The following table shows what members of a base class are returned by the `GetXXX` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-1548">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1548">Member Type</span></span>|<span data-ttu-id="ef7f9-1549">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1549">Static</span></span>|<span data-ttu-id="ef7f9-1550">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1550">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-1551">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1551">Constructor</span></span>|<span data-ttu-id="ef7f9-1552">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1552">No</span></span>|<span data-ttu-id="ef7f9-1553">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1553">No</span></span>|  
|<span data-ttu-id="ef7f9-1554">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1554">Field</span></span>|<span data-ttu-id="ef7f9-1555">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1555">No</span></span>|<span data-ttu-id="ef7f9-1556">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1556">Yes.</span></span> <span data-ttu-id="ef7f9-1557">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1557">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1558">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1558">Event</span></span>|<span data-ttu-id="ef7f9-1559">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1559">Not applicable</span></span>|<span data-ttu-id="ef7f9-1560">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1560">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1561">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1561">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1562">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1562">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-1563">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1563">Method</span></span>|<span data-ttu-id="ef7f9-1564">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1564">No</span></span>|<span data-ttu-id="ef7f9-1565">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1565">Yes.</span></span> <span data-ttu-id="ef7f9-1566">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1566">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1567">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1567">Nested Type</span></span>|<span data-ttu-id="ef7f9-1568">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1568">No</span></span>|<span data-ttu-id="ef7f9-1569">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1569">No</span></span>|  
|<span data-ttu-id="ef7f9-1570">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1570">Property</span></span>|<span data-ttu-id="ef7f9-1571">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1571">Not applicable</span></span>|<span data-ttu-id="ef7f9-1572">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1572">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1573">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1573">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1574">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1574">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-1575">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1575">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-1576">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1576">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-1577">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1577">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1578">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1578">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-1579">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1579">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-1580">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 검색에 포함 하는 메서드를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1580">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1581">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1581">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1582">지정 `BindingFlags.Public` 검색에 공용 메서드를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1582">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1583">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 메서드 (즉, 전용, 내부 및 보호 된 메서드)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1583">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1584">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1584">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-1585">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1585">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-1586">`BindingFlags.IgnoreCase` 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1586">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-1587">`BindingFlags.DeclaredOnly` 에 선언 된 메서드만 검색 하는 <xref:System.Type>, 상속 된 메서드가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1587">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-1588">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1588">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1589">생성자와 메서드를 조회할 때 매개 변수를 생략할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1589">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="ef7f9-1590">호출할 때에 매개 변수를 생략할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1590">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="ef7f9-1591">이 메서드가 반환 하는 경우 현재 생성된 된 제네릭 형식을 나타내는는 <xref:System.Reflection.MethodInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1591">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1592">하는 경우 현재 <xref:System.Type> 나타냅니다 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 형식 매개 변수는 클래스 제약 조건의 메서드나의 메서드가 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1592">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1593">제네릭 메서드의 형식 인수에을 포함 하지 마십시오 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1593">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="ef7f9-1594">예를 들어 C# 코드 `GetMember("MyMethod<int>")` 텍스트 이름 가진 멤버에 대 한 검색 "`MyMethod<int>`", 라는 메서드가 아니라 `MyMethod` 형식의 제네릭 인수가 하나 있는 `int`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1594">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1595">다음 예제에서는 `MethodA`, 바인딩 제약 조건 지정, 호출 규칙 및 인수 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1595">The following example finds specific overloads of `MethodA`, specifying binding constraints, calling conventions, and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1596">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] 예제를 실행 하려면는 `/unsafe` 컴파일러 옵션입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1596">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod3/CPP/type_getmethod3.cpp#1)]
 [!code-csharp[Type_GetMethod3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod3/CS/type_getmethod3.cs#1)]
 [!code-vb[Type_GetMethod3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod3/VB/type_getmethod3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-1597">지정한 이름을 가지며 지정된 바인딩 제약 조건과 일치하는 메서드가 둘 이상 발견되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1597">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1598">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1598">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1599">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1599">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1600">
            <paramref name="types" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1600">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1601">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1601">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1602">
            <paramref name="types" />의 요소 중 하나가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1602">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-1603">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1603">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-1604">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1604">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1605">
            <paramref name="modifiers" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1605">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1606">가져올 메서드의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1606">The string containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-1607">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1607">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-1608">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1608">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1609">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1609">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="ef7f9-1610">속성 집합을 정의하고 바인딩을 활성화하는 개체입니다. 이 개체는 또한 리플렉션을 통해 오버로드된 메서드를 선택할 수 있고 인수 형식을 강제 변환할 수 있으며 멤버를 호출할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1610">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="ef7f9-1611">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1611">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1612">
            <see langword="Nothing" />를 사용하려면 null 참조(Visual Basic의 경우 <see cref="P:System.Type.DefaultBinder" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1612">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="ef7f9-1613">인수의 순서 및 레이아웃, 반환 값의 전달 방법, 인수에 사용되는 레지스터, 스택을 정리하는 프로세스 등과 관련하여 사용할 규칙을 지정하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1613">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="ef7f9-1614">가져올 메서드에 대한 매개 변수의 수, 차수, 형식 등을 나타내는 <see cref="T:System.Type" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1614">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="ef7f9-1615">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1615">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1616">매개 변수를 사용하지 않는 메서드를 가져오기 위한 <see cref="T:System.Type" /> 형식의 빈 배열입니다(즉, Type[] types = new Type[0]).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1616">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
          <span data-ttu-id="ef7f9-1617">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1617">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1618">
            <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1618">
              <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1619">
            <c>types</c>가 <see langword="null" />이면 일치되는 인수가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1619">If <c>types</c> is <see langword="null" />, arguments are not matched.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="ef7f9-1620">
            <c>types</c> 배열에서 해당하는 요소와 연관된 특성을 나타내는 <see cref="T:System.Reflection.ParameterModifier" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1620">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="ef7f9-1621">기본 바인더에서는 이 매개 변수를 처리하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1621">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1622">파생 클래스에서 재정의되면, 지정된 인수 형식 및 한정자와 일치하는 매개 변수를 가진 지정된 메서드를 지정된 바인딩 제약 조건 및 호출 규칙으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1622">When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1623">지정된 요구 사항과 일치하는 메서드를 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1623">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1624">기본 바인더는 처리 하지 않더라도 <xref:System.Reflection.ParameterModifier> (의 `modifiers` 매개 변수), 추상을 사용할 수 있습니다 <xref:System.Reflection.Binder?displayProperty=nameWithType> 클래스는 사용자 지정 처리 하는 바인더를 작성 하 `modifiers`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1624">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="ef7f9-1625">`ParameterModifier` COM interop를 통해 호출할 때만 사용 되 고 참조로 전달 되는 매개 변수만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1625">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="ef7f9-1626">`types`가 `null`이면 일치되는 인수가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1626">If `types` is `null`, arguments are not matched.</span></span>  
  
 <span data-ttu-id="ef7f9-1627">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 검색에 포함 하는 메서드를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1627">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1628">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1628">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1629">지정 `BindingFlags.Public` 검색에 공용 메서드를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1629">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1630">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 메서드 (즉, 전용, 내부 및 보호 된 메서드)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1630">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1631">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1631">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-1632">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1632">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-1633">`BindingFlags.IgnoreCase` 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1633">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-1634">`BindingFlags.DeclaredOnly` 에 선언 된 메서드만 검색 하는 <xref:System.Type>, 상속 된 메서드가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1634">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-1635">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1635">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-1636">지정한 이름을 가지며 지정된 바인딩 제약 조건과 일치하는 메서드가 둘 이상 발견되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1636">More than one method is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1637">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1637">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-1638">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1638">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-1639">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1639">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1640">
            <paramref name="modifiers" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1640">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-1641">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1641">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1642">
            <paramref name="types" />와 <paramref name="modifiers" />의 길이가 동일하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1642">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-1643">현재 형식이 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 또는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1643">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1644">현재 <see cref="T:System.Type" />의 메서드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1644">Gets the methods of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1645">현재 <see cref="T:System.Type" />의 모든 public 메서드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1645">Returns all the public methods of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1646">현재 <see cref="T:System.Reflection.MethodInfo" />에 대해 정의된 모든 public 메서드를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1646">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1647">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1647">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1648">현재 <see cref="T:System.Reflection.MethodInfo" />에 대해 정의된 public 메서드가 없는 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1648">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1649"><xref:System.Type.GetMethods%2A> 메서드 반환 하지 않습니다 메서드는 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1649">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1650">코드 영향을 받지 않아야 메서드가 반환 되는 순서에 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1650">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1651">생성자는 메서드가이 호출에서 반환 된 배열에 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1651">Constructors are not included in the array of methods returned by this call.</span></span> <span data-ttu-id="ef7f9-1652">별도 호출 `GetConstructors()` 생성자 메서드를 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1652">Make a separate call to `GetConstructors()` to get the constructor methods.</span></span>  
  
 <span data-ttu-id="ef7f9-1653">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1653">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-1654">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1654">Member Type</span></span>|<span data-ttu-id="ef7f9-1655">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1655">Static</span></span>|<span data-ttu-id="ef7f9-1656">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1656">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-1657">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1657">Constructor</span></span>|<span data-ttu-id="ef7f9-1658">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1658">No</span></span>|<span data-ttu-id="ef7f9-1659">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1659">No</span></span>|  
|<span data-ttu-id="ef7f9-1660">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1660">Field</span></span>|<span data-ttu-id="ef7f9-1661">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1661">No</span></span>|<span data-ttu-id="ef7f9-1662">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1662">Yes.</span></span> <span data-ttu-id="ef7f9-1663">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1663">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1664">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1664">Event</span></span>|<span data-ttu-id="ef7f9-1665">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1665">Not applicable</span></span>|<span data-ttu-id="ef7f9-1666">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1666">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1667">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1667">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1668">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1668">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-1669">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1669">Method</span></span>|<span data-ttu-id="ef7f9-1670">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1670">No</span></span>|<span data-ttu-id="ef7f9-1671">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1671">Yes.</span></span> <span data-ttu-id="ef7f9-1672">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1672">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1673">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1673">Nested Type</span></span>|<span data-ttu-id="ef7f9-1674">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1674">No</span></span>|<span data-ttu-id="ef7f9-1675">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1675">No</span></span>|  
|<span data-ttu-id="ef7f9-1676">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1676">Property</span></span>|<span data-ttu-id="ef7f9-1677">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1677">Not applicable</span></span>|<span data-ttu-id="ef7f9-1678">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1678">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1679">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1679">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1680">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1680">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-1681">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1681">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-1682">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1682">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-1683">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1683">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1684">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1684">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-1685">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1685">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1686">생성자와 메서드를 조회할 때 매개 변수를 생략할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1686">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="ef7f9-1687">호출할 때에 매개 변수를 생략할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1687">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="ef7f9-1688">이 메서드가 반환 하는 경우 현재 생성된 된 제네릭 형식을 나타내는는 <xref:System.Reflection.MethodInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1688">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1689">하는 경우 현재 <xref:System.Type> 나타냅니다 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 형식 매개 변수는 클래스 제약 조건의 메서드나의 메서드가 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1689">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-1690">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1690">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-1691">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1691">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1692">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1692">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1693">파생 클래스에서 재정의되면, 현재 <see cref="T:System.Type" />에 대해 정의된 메서드를 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1693">When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1694">현재 <see cref="T:System.Reflection.MethodInfo" />에 대해 정의된 필드 중 지정된 바인딩 제약 조건과 일치하는 모든 메서드를 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1694">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="ef7f9-1695">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1695">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1696">현재 <see cref="T:System.Reflection.MethodInfo" />에 대해 정의된 메서드가 없거나 정의된 필드 중 해당 바인딩 제약 조건과 일치하는 메서드가 없을 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1696">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1697"><xref:System.Type.GetMethods%2A> 메서드 반환 하지 않습니다 메서드는 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1697">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1698">코드 영향을 받지 않아야 메서드가 반환 되는 순서에 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1698">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1699">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 검색에 포함 하는 메서드를 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1699">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1700">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1700">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1701">지정 `BindingFlags.Public` 검색에 공용 메서드를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1701">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1702">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 메서드 (즉, 전용, 내부 및 보호 된 메서드)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1702">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span> <span data-ttu-id="ef7f9-1703">만 보호 하 고 기본 클래스의 내부 메서드 반환 됩니다. 기본 클래스의 전용 메서드 반환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1703">Only protected and internal methods on base classes are returned; private methods on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="ef7f9-1704">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1704">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-1705">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1705">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-1706">`BindingFlags.DeclaredOnly` 에 선언 된 메서드만 검색 하는 <xref:System.Type>, 상속 된 메서드가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1706">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-1707">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1707">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1708">생성자와 메서드를 조회할 때 매개 변수를 생략할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1708">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="ef7f9-1709">호출할 때에 매개 변수를 생략할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1709">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="ef7f9-1710">이 메서드가 반환 하는 경우 현재 생성된 된 제네릭 형식을 나타내는는 <xref:System.Reflection.MethodInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1710">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1711">하는 경우 현재 <xref:System.Type> 나타냅니다 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 형식 매개 변수는 클래스 제약 조건의 메서드나의 메서드가 검색 <xref:System.Object> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1711">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1712">다음 예제에서는 클래스와 두 개의 공용 메서드와 하나의 보호 된 메서드, 만들어집니다는 `Type` 개체에 해당 하 `MyTypeClass`모든 public 및 public이 아닌 메서드를 가져오고 해당 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1712">The following example creates a class with two public methods and one protected method, creates a `Type` object corresponding to `MyTypeClass`, gets all public and non-public methods, and displays their names.</span></span>  
  
 [!code-cpp[Type_GetMethods2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethods2/CPP/type_getmethods2.cpp#1)]
 [!code-csharp[Type_GetMethods2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethods2/CS/type_getmethods2.cs#1)]
 [!code-vb[Type_GetMethods2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethods2/VB/type_getmethods2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1713">현재 <see cref="T:System.Type" />에 중첩된 특정 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1713">Gets a specific type nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetNestedType(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1714">가져올 중첩 형식의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1714">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1715">지정된 이름의 public 중첩 형식을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1715">Searches for the public nested type with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1716">지정된 이름의 public 중첩 형식을 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1716">An object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1717">에 대 한 검색 `name` 대 소문자를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1717">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="ef7f9-1718">에 대 한 중첩 된 클래스의 단순한 이름을 사용 하 여 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1718">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="ef7f9-1719">외부 클래스의 이름으로 한정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1719">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="ef7f9-1720">중첩 된 제네릭 클래스에 대 한 형식 표시 이름을 사용 하 여-즉, 억음 악센트 및 제네릭 인수 수를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1720">For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic arguments.</span></span> <span data-ttu-id="ef7f9-1721">예를 들어 문자열을 사용 하 여 "내부\`1" 중첩 된 클래스 원본에 가져올 `Inner<T>` (`Inner(Of T)` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1721">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="ef7f9-1722">형식 매개 변수에 대 한 언어별 구문을 포함 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1722">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="ef7f9-1723">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1723">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-1724">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1724">Member Type</span></span>|<span data-ttu-id="ef7f9-1725">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1725">Static</span></span>|<span data-ttu-id="ef7f9-1726">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1726">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-1727">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1727">Constructor</span></span>|<span data-ttu-id="ef7f9-1728">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1728">No</span></span>|<span data-ttu-id="ef7f9-1729">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1729">No</span></span>|  
|<span data-ttu-id="ef7f9-1730">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1730">Field</span></span>|<span data-ttu-id="ef7f9-1731">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1731">No</span></span>|<span data-ttu-id="ef7f9-1732">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1732">Yes.</span></span> <span data-ttu-id="ef7f9-1733">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1733">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1734">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1734">Event</span></span>|<span data-ttu-id="ef7f9-1735">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1735">Not applicable</span></span>|<span data-ttu-id="ef7f9-1736">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1736">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1737">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1737">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1738">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1738">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-1739">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1739">Method</span></span>|<span data-ttu-id="ef7f9-1740">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1740">No</span></span>|<span data-ttu-id="ef7f9-1741">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1741">Yes.</span></span> <span data-ttu-id="ef7f9-1742">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1742">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1743">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1743">Nested Type</span></span>|<span data-ttu-id="ef7f9-1744">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1744">No</span></span>|<span data-ttu-id="ef7f9-1745">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1745">No</span></span>|  
|<span data-ttu-id="ef7f9-1746">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1746">Property</span></span>|<span data-ttu-id="ef7f9-1747">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1747">Not applicable</span></span>|<span data-ttu-id="ef7f9-1748">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1748">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1749">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1749">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1750">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1750">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-1751">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1751">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-1752">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1752">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-1753">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1753">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1754">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1754">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-1755">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1755">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-1756">하는 경우 현재 <xref:System.Type> 형식 매개 변수는 제네릭 형식 또는 제네릭 메서드 정의에서이 메서드는 클래스 제약 조건의 중첩된 형식을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1756">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="ef7f9-1757">중첩 된 형식이 제네릭 경우이 메서드는 제네릭 형식 정의 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1757">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="ef7f9-1758">바깥쪽 제네릭 형식의 폐쇄형 생성 된 형식인 경우에 마찬가지입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1758">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1759">하는 경우 현재 <xref:System.Type> C#, Visual Basic 또는 c + +에 정의 된 제네릭 형식을 나타내면 권한이 자체의 제네릭 매개 변수가 없는 경우에 중첩된 형식은 모두 일반적으로 진행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1759">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="ef7f9-1760">이 동적 어셈블리에 정의 된 또는 사용 하 여 컴파일된 중첩 형식의 경우 반드시는 [Ilasm.exe (IL 어셈블러)](~/docs/framework/tools/ilasm-exe-il-assembler.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1760">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="ef7f9-1761">제네릭 형식 정의에서 중첩 된 제네릭 형식을 생성 및 중첩 된 제네릭 형식을에 정보를 참조 하십시오. <xref:System.Type.MakeGenericType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1761">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1762">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1762">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public abstract Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1763">가져올 중첩 형식의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1763">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-1764">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1764">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-1765">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1765">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1766">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1766">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1767">파생 클래스에서 재정의되면, 지정된 중첩 형식을 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1767">When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1768">지정된 요구 사항과 일치하는 중첩 형식을 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1768">An object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1769">에 대 한 중첩 된 클래스의 단순한 이름을 사용 하 여 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1769">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="ef7f9-1770">외부 클래스의 이름으로 한정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1770">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="ef7f9-1771">중첩 된 제네릭 클래스에 대 한 형식 표시 이름을 사용 하 여-즉, 억음 악센트 및 제네릭 매개 변수의 수를 추가 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1771">For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic parameters.</span></span> <span data-ttu-id="ef7f9-1772">예를 들어 문자열을 사용 하 여 "내부\`1" 중첩 된 클래스 원본에 가져올 `Inner<T>` (`Inner(Of T)` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1772">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="ef7f9-1773">형식 매개 변수에 대 한 언어별 구문을 포함 하지 마십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1773">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="ef7f9-1774">다음 <xref:System.Reflection.BindingFlags> 검색에 포함할 형식을 필터 플래그를 사용 하 여 중첩 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1774">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1775">지정 해야 <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> 또는 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> 를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1775">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1776">지정 <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> public 중첩된 형식을 검색에 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1776">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1777">지정 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> 검색에 public이 아닌 중첩된 형식 (즉, 전용, 내부 및 보호 된 중첩된 형식)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1777">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="ef7f9-1778">이 메서드는 중첩 된 형식을 현재 형식에 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1778">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="ef7f9-1779">현재 형식의 기본 클래스를 검색 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1779">It does not search the base classes of the current type.</span></span> <span data-ttu-id="ef7f9-1780">중첩 된 형식을 기본 클래스에서를 찾으려면 호출 상속 계층 구조를 검색 해야 <xref:System.Type.GetNestedType%2A> 각 수준에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1780">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedType%2A> at each level.</span></span>  
  
 <span data-ttu-id="ef7f9-1781"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> 및 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1781"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="ef7f9-1782">이 메서드를 호출할는 <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> 플래그 또는는 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> 플래그 지정 된 중첩 형식 및 다른 플래그는 필요 하지 않습니다 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1782">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="ef7f9-1783">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1783">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-1784">하는 경우 현재 <xref:System.Type> 형식 매개 변수는 제네릭 형식 또는 제네릭 메서드 정의에서이 메서드는 클래스 제약 조건의 중첩된 형식을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1784">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="ef7f9-1785">중첩 된 형식이 제네릭 경우이 메서드는 제네릭 형식 정의 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1785">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="ef7f9-1786">바깥쪽 제네릭 형식의 폐쇄형 생성 된 형식인 경우에 마찬가지입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1786">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1787">하는 경우 현재 <xref:System.Type> C#, Visual Basic 또는 c + +에 정의 된 제네릭 형식을 나타내면 권한이 자체의 제네릭 매개 변수가 없는 경우에 중첩된 형식은 모두 일반적으로 진행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1787">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="ef7f9-1788">이 동적 어셈블리에 정의 된 또는 사용 하 여 컴파일된 중첩 형식의 경우 반드시는 [Ilasm.exe (IL 어셈블러)](~/docs/framework/tools/ilasm-exe-il-assembler.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1788">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="ef7f9-1789">제네릭 형식 정의에서 중첩 된 제네릭 형식을 생성 및 중첩 된 제네릭 형식을에 정보를 참조 하십시오. <xref:System.Type.MakeGenericType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1789">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1790">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1790">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1791">현재 <see cref="T:System.Type" />에 중첩된 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1791">Gets the types nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1792">현재 <see cref="T:System.Type" />에 중첩된 public 형식을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1792">Returns the public types nested in the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1793">현재 <see cref="T:System.Type" />에 중첩된 public 형식을 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나(검색은 재귀적이 아님), 현재 <see cref="T:System.Type" />에 중첩된 public 형식이 없으면 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1793">An array of <see cref="T:System.Type" /> objects representing the public types nested in the current <see cref="T:System.Type" /> (the search is not recursive), or an empty array of type <see cref="T:System.Type" /> if no public types are nested in the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1794"><xref:System.Type.GetNestedTypes%2A> 메서드 반환 하지 않습니다 형식 특정 한 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1794">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1795">코드 영향을 받지 않아야 형식이 반환 되는 순서에 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1795">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1796">즉시 현재 형식에 중첩 된 public 형식만 반환 됩니다. 검색은 재귀적이 아님.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1796">Only the public types immediately nested in the current type are returned; the search is not recursive.</span></span>  
  
 <span data-ttu-id="ef7f9-1797">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1797">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-1798">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1798">Member Type</span></span>|<span data-ttu-id="ef7f9-1799">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1799">Static</span></span>|<span data-ttu-id="ef7f9-1800">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1800">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-1801">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1801">Constructor</span></span>|<span data-ttu-id="ef7f9-1802">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1802">No</span></span>|<span data-ttu-id="ef7f9-1803">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1803">No</span></span>|  
|<span data-ttu-id="ef7f9-1804">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1804">Field</span></span>|<span data-ttu-id="ef7f9-1805">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1805">No</span></span>|<span data-ttu-id="ef7f9-1806">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1806">Yes.</span></span> <span data-ttu-id="ef7f9-1807">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1807">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1808">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1808">Event</span></span>|<span data-ttu-id="ef7f9-1809">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1809">Not applicable</span></span>|<span data-ttu-id="ef7f9-1810">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1810">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1811">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1811">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1812">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1812">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-1813">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1813">Method</span></span>|<span data-ttu-id="ef7f9-1814">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1814">No</span></span>|<span data-ttu-id="ef7f9-1815">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1815">Yes.</span></span> <span data-ttu-id="ef7f9-1816">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1816">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1817">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1817">Nested Type</span></span>|<span data-ttu-id="ef7f9-1818">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1818">No</span></span>|<span data-ttu-id="ef7f9-1819">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1819">No</span></span>|  
|<span data-ttu-id="ef7f9-1820">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1820">Property</span></span>|<span data-ttu-id="ef7f9-1821">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1821">Not applicable</span></span>|<span data-ttu-id="ef7f9-1822">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1822">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1823">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1823">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1824">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1824">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-1825">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1825">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-1826">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1826">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-1827">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1827">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1828">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1828">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-1829">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1829">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-1830">하는 경우 현재 <xref:System.Type> 형식 매개 변수는 제네릭 형식 또는 제네릭 메서드 정의에서이 메서드는 클래스 제약 조건의 중첩된 형식을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1830">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="ef7f9-1831">중첩 된 형식이 제네릭 경우이 메서드는 제네릭 형식 정의 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1831">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="ef7f9-1832">바깥쪽 제네릭 형식의 폐쇄형 생성 된 형식인 경우에 마찬가지입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1832">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1833">하는 경우 현재 <xref:System.Type> C#, Visual Basic 또는 c + +에 정의 된 제네릭 형식을 나타내면 권한이 자체의 제네릭 매개 변수가 없는 경우에 중첩된 형식은 모두 일반적으로 진행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1833">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="ef7f9-1834">이 동적 어셈블리에 정의 된 또는 사용 하 여 컴파일된 중첩 형식의 경우 반드시는 [Ilasm.exe (IL 어셈블러)](~/docs/framework/tools/ilasm-exe-il-assembler.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1834">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="ef7f9-1835">제네릭 형식 정의에서 중첩 된 제네릭 형식을 생성 및 중첩 된 제네릭 형식을에 정보를 참조 하십시오. <xref:System.Type.MakeGenericType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1835">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1836">다음 예제에서는 중첩된 된 클래스를 정의 및 `struct` 에 `MyClass`, 다음 형식을 사용 하는 중첩 형식의 개체를 가져와야 하 고 `MyClass`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1836">The following example defines a nested class and a `struct` in `MyClass`, and then obtains objects of the nested types using the type of `MyClass`.</span></span>  
  
 [!code-cpp[Type_GetNestedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedTypes/CPP/type_getnestedtypes.cpp#1)]
 [!code-csharp[Type_GetNestedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedTypes/CS/type_getnestedtypes.cs#1)]
 [!code-vb[Type_GetNestedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedTypes/VB/type_getnestedtypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public abstract Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-1837">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1837">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-1838">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1838">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1839">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1839">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1840">파생 클래스에서 재정의되면 지정된 바인딩 제약 조건을 사용하여 현재 <see cref="T:System.Type" />에 중첩된 형식을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1840">When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1841">지정된 바인딩 제약 조건과 일치하는 현재 <see cref="T:System.Type" />에 중첩된 모든 형식을 나타내는 <see cref="T:System.Type" /> 개체의 배열이거나(검색은 재귀적이 아님), 바인딩 제약 조건과 일치하는 중첩 형식이 없으면 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1841">An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1842">중첩 된 형식에 대 한 검색은 재귀적이 아님.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1842">The search for nested types is not recursive.</span></span>  
  
 <span data-ttu-id="ef7f9-1843"><xref:System.Type.GetNestedTypes%2A> 메서드 반환 하지 않습니다 형식 특정 한 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1843">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1844">코드 영향을 받지 않아야 형식이 반환 되는 순서에 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1844">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1845">다음 <xref:System.Reflection.BindingFlags> 검색에 포함할 형식을 필터 플래그를 사용 하 여 중첩 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1845">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1846">지정 해야 <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> 또는 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> 를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1846">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1847">지정 <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> public 중첩된 형식을 검색에 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1847">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1848">지정 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> 검색에 public이 아닌 중첩된 형식 (즉, 전용, 내부 및 보호 된 중첩된 형식)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1848">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="ef7f9-1849">이 메서드는 중첩 된 형식을 현재 형식에 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1849">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="ef7f9-1850">현재 형식의 기본 클래스를 검색 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1850">It does not search the base classes of the current type.</span></span> <span data-ttu-id="ef7f9-1851">중첩 된 형식을 기본 클래스에서를 찾으려면 호출 상속 계층 구조를 검색 해야 <xref:System.Type.GetNestedTypes%2A> 각 수준에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1851">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedTypes%2A> at each level.</span></span>  
  
 <span data-ttu-id="ef7f9-1852"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> 및 <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1852"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="ef7f9-1853">이 메서드를 호출할는 <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> 플래그 또는는 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> 플래그 지정 된 중첩 형식 및 다른 플래그는 필요 하지 않습니다 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1853">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="ef7f9-1854">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1854">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-1855">하는 경우 현재 <xref:System.Type> 형식 매개 변수는 제네릭 형식 또는 제네릭 메서드 정의에서이 메서드는 클래스 제약 조건의 중첩된 형식을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1855">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="ef7f9-1856">중첩 된 형식이 제네릭 경우이 메서드는 제네릭 형식 정의 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1856">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="ef7f9-1857">바깥쪽 제네릭 형식의 폐쇄형 생성 된 형식인 경우에 마찬가지입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1857">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-1858">하는 경우 현재 <xref:System.Type> C#, Visual Basic 또는 c + +에 정의 된 제네릭 형식을 나타내면 권한이 자체의 제네릭 매개 변수가 없는 경우에 중첩된 형식은 모두 일반적으로 진행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1858">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="ef7f9-1859">이 동적 어셈블리에 정의 된 또는 사용 하 여 컴파일된 중첩 형식의 경우 반드시는 [Ilasm.exe (IL 어셈블러)](~/docs/framework/tools/ilasm-exe-il-assembler.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1859">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="ef7f9-1860">제네릭 형식 정의에서 중첩 된 제네릭 형식을 생성 및 중첩 된 제네릭 형식을에 정보를 참조 하십시오. <xref:System.Type.MakeGenericType%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1860">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1861">다음 예제에서는 두 개의 중첩 된 공용 클래스 및 두 개의 중첩된 보호 클래스 만들고 지정 된 바인딩 제약 조건과 일치 하는 클래스에 대 한 정보를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1861">The following example creates two nested public classes and two nested protected classes, and displays information for classes that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetNestedClassesAbs#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CPP/type_getnestedclassesabs.cpp#1)]
 [!code-csharp[Type_GetNestedClassesAbs#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CS/type_getnestedclassesabs.cs#1)]
 [!code-vb[Type_GetNestedClassesAbs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedClassesAbs/VB/type_getnestedclassesabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1862">현재 <see cref="T:System.Type" />의 속성을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1862">Gets the properties of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1863">현재 <see cref="T:System.Type" />의 모든 public 속성을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1863">Returns all the public properties of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1864">현재 <see cref="T:System.Reflection.PropertyInfo" />의 모든 public 속성을 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1864">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="ef7f9-1865">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1865">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1866">현재 <see cref="T:System.Reflection.PropertyInfo" />에 public 속성이 없을 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1866">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1867">이 오버 로드는 호출 하는 것은 <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> 오버 로드는 `bindingAttr` 와 같으면 인수 `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` C# 및 `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` Visual Basic의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1867">Calling this overload is equivalent to calling the <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> overload with a `bindingAttr` argument equal to `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` in C# and  `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` in Visual Basic.</span></span> <span data-ttu-id="ef7f9-1868">모든 public 인스턴스 및 정적 속성이 나타내는 현재 형식에 의해 정의 된 두 반환 <xref:System.Type> 개체도 해당 형식의 기본 형식에서 상속 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1868">It returns all public instance and static properties, both those defined by the type represented by the current <xref:System.Type> object as well as those inherited from its base types.</span></span>  
  
 <span data-ttu-id="ef7f9-1869">속성 공개 적어도 하나의 접근자 있으면 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1869">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="ef7f9-1870">그렇지 않은 경우 속성은 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1870">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-1871"><xref:System.Type.GetProperties%2A> 메서드 반환 하지 않습니다 속성을 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1871">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1872">코드 영향을 받지 않아야 속성이 반환 되는 순서에 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1872">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1873">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1873">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-1874">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1874">Member Type</span></span>|<span data-ttu-id="ef7f9-1875">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1875">Static</span></span>|<span data-ttu-id="ef7f9-1876">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1876">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-1877">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1877">Constructor</span></span>|<span data-ttu-id="ef7f9-1878">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1878">No</span></span>|<span data-ttu-id="ef7f9-1879">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1879">No</span></span>|  
|<span data-ttu-id="ef7f9-1880">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1880">Field</span></span>|<span data-ttu-id="ef7f9-1881">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1881">No</span></span>|<span data-ttu-id="ef7f9-1882">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1882">Yes.</span></span> <span data-ttu-id="ef7f9-1883">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1883">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1884">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1884">Event</span></span>|<span data-ttu-id="ef7f9-1885">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1885">Not applicable</span></span>|<span data-ttu-id="ef7f9-1886">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1886">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1887">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1887">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1888">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1888">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-1889">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1889">Method</span></span>|<span data-ttu-id="ef7f9-1890">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1890">No</span></span>|<span data-ttu-id="ef7f9-1891">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1891">Yes.</span></span> <span data-ttu-id="ef7f9-1892">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1892">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-1893">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1893">Nested Type</span></span>|<span data-ttu-id="ef7f9-1894">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1894">No</span></span>|<span data-ttu-id="ef7f9-1895">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1895">No</span></span>|  
|<span data-ttu-id="ef7f9-1896">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1896">Property</span></span>|<span data-ttu-id="ef7f9-1897">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1897">Not applicable</span></span>|<span data-ttu-id="ef7f9-1898">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1898">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-1899">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1899">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1900">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1900">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-1901">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1901">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-1902">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1902">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-1903">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1903">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-1904">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1904">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-1905">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1905">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-1906">이 메서드가 반환 하는 경우 현재 생성된 된 제네릭 형식을 나타내는는 <xref:System.Reflection.PropertyInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1906">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1907">하는 경우 현재 <xref:System.Type> 형식 매개 변수이 메서드는 제네릭 형식 또는 제네릭 메서드 정의에 클래스 제약 조건의 속성을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1907">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1908">다음 예제에서는 `GetProperties` 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1908">The following example demonstrates the use of the `GetProperties` method.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#2)]
 [!code-csharp[Type_GetTypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#2)]
 [!code-vb[Type_GetTypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-1909">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1909">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-1910">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1910">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1911">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1911">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1912">파생 클래스에서 재정의되면, 현재 <see cref="T:System.Type" />의 속성을 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1912">When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1913">현재 <see cref="T:System.Reflection.PropertyInfo" />의 속성 중 지정된 바인딩 제약 조건과 일치하는 모든 속성을 나타내는 <see cref="T:System.Type" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1913">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="ef7f9-1914">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1914">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1915">현재 <see cref="T:System.Reflection.PropertyInfo" />에 속성이 없거나 해당 바인딩 제약 조건과 일치하는 속성이 없을 경우 <see cref="T:System.Type" /> 형식의 빈 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1915">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1916">속성 공개 적어도 하나의 접근자 있으면 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1916">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="ef7f9-1917">그렇지 않은 경우 속성은 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1917">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-1918"><xref:System.Type.GetProperties%2A> 메서드 반환 하지 않습니다 속성을 특정 순서로 같은 알파벳 또는 선언 순서 대로 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1918">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="ef7f9-1919">코드 영향을 받지 않아야 속성이 반환 되는 순서에 때문에 순서가 달라 지는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1919">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="ef7f9-1920">다음 <xref:System.Reflection.BindingFlags> 검색에 포함할 형식을 필터 플래그를 사용 하 여 중첩 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1920">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1921">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1921">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1922">지정 `BindingFlags.Public` 검색에 공용 속성을 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1922">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1923">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 속성 (즉, 전용, 내부 및 보호 된 속성)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1923">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span> <span data-ttu-id="ef7f9-1924">만 보호 하 고 기본 클래스에서 내부 속성이 반환 됩니다. 기본 클래스에 대 한 개인 속성 반환 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1924">Only protected and internal properties on base classes are returned; private properties on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="ef7f9-1925">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1925">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-1926">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1926">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-1927">`BindingFlags.DeclaredOnly` 에 선언 된 속성에 대해서만 검색 하는 <xref:System.Type>, 상속 된 속성이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1927">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-1928">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1928">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-1929">속성 공개 적어도 하나의 접근자 있으면 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1929">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="ef7f9-1930">그렇지 않은 경우 속성은 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1930">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-1931">이 메서드가 반환 하는 경우 현재 생성된 된 제네릭 형식을 나타내는는 <xref:System.Reflection.PropertyInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 하 여 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1931">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1932">하는 경우 현재 <xref:System.Type> 형식 매개 변수이 메서드는 제네릭 형식 또는 제네릭 메서드 정의에 클래스 제약 조건의 속성을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1932">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1933">라는 클래스를 정의 하는 다음 예제에서는 `PropertyClass` 속성 6 개가 포함 된: 두 대가 public, 하나는 전용 보호 하나, 하나는 내부 (`Friend` Visual basic에서), 내부 보호 되며 하나 (`Protected Friend` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1933">The following example defines a class named `PropertyClass` that includes six properties: two are public, one is private, one is protected, one is internal (`Friend` in Visual Basic), and one is protected internal (`Protected Friend` in Visual Basic).</span></span> <span data-ttu-id="ef7f9-1934">몇 가지 기본 속성 정보를 표시 합니다 (속성 이름 및 형식을 여부는 읽기/쓰기의 표시 여부는 `get` 및 `set` 접근자) 지정 된 바인딩 제약 조건과 일치 하는 속성에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1934">It then displays some basic property information (the property name and type, whether it is read/write, and the visibility of its `get` and `set` accessors) for the properties that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperties2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperties2/CPP/type_getproperties2.cpp#1)]
 [!code-csharp[Type_GetProperties2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperties2/CS/type_getproperties2.cs#1)]
 [!code-vb[Type_GetProperties2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperties2/VB/type_getproperties2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-1935">현재 <see cref="T:System.Type" />의 특정 속성을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1935">Gets a specific property of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1936">가져올 공용 속성의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1936">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1937">지정된 이름의 public 속성을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1937">Searches for the public property with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1938">지정된 이름의 공용 속성을 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1938">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1939">에 대 한 검색 `name` 대 소문자를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1939">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="ef7f9-1940">검색 public static 및 public 인스턴스 속성을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1940">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="ef7f9-1941">속성 공개 적어도 하나의 접근자 있으면 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1941">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="ef7f9-1942">그렇지 않은 경우 속성은 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1942">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-1943">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.PropertyInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1943">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1944">하는 경우 현재 <xref:System.Type> 형식 매개 변수이 메서드는 제네릭 형식 또는 제네릭 메서드 정의에 클래스 제약 조건의 속성을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1944">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="ef7f9-1945">실제 <xref:System.Reflection.AmbiguousMatchException> 발생은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1945">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="ef7f9-1946">형식에는 두 개의 동일한 인덱싱된 속성 하지만 서로 다른 개수의 매개 변수 이름을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1946">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="ef7f9-1947">오버 로드를 사용 하 여 모호성을 해결 하는 <xref:System.Type.GetProperty%2A> 매개 변수 형식을 지정 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1947">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="ef7f9-1948">파생된 형식을 사용 하 여 동일한 이름의 상속된 된 속성을 숨기는 속성 선언에서 `new` 한정자 (`Shadows` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1948">A derived type declares a property that hides an inherited property with the same name, by using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="ef7f9-1949">모호성을 해결 하려면 사용 된 <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> 메서드 오버 로드 하 고 추가 <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> 상속 되지 않은 멤버에 검색을 제한 하는 플래그입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1949">To resolve the ambiguity, use the <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> method overload and add the <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> flag to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="ef7f9-1950">인덱서 및 기본 속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1950">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="ef7f9-1951">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], 및 [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] 간단한 인덱싱된 속성에 액세스 하기 위한 구문을 사용 하 고 해당 형식에 대 한 기본 인덱싱된 속성이 하나를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1951">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="ef7f9-1952">예를 들어 경우 변수 `myList` 참조 하는 <xref:System.Collections.ArrayList>, 구문을 `myList[3]` (`myList(3)` Visual basic에서) 3의 인덱스를 가진 요소를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1952">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="ef7f9-1953">속성을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1953">You can overload the property.</span></span>  
  
 <span data-ttu-id="ef7f9-1954">C#에서이 기능은 인덱서 호출 및 이름으로 참조할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1954">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="ef7f9-1955">기본적으로 C# 인덱서 메타 데이터에 "Item" 이라는 인덱싱된 속성으로 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1955">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="ef7f9-1956">그러나 클래스 라이브러리 개발자가 사용할 수는 <xref:System.Runtime.CompilerServices.IndexerNameAttribute> 메타 데이터에 인덱서의 이름을 변경할 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1956">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="ef7f9-1957">예를 들어는 <xref:System.String> 라는 예 <xref:System.String.Chars%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1957">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="ef7f9-1958">C# 이외의 언어를 사용 하 여 만든 인덱싱된 속성에는 사용자의 이름을 Item 이외의 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1958">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="ef7f9-1959">형식에 기본 속성이 있는지 확인 하려면는 <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> 메서드를 테스트 하는 <xref:System.Reflection.DefaultMemberAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1959">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="ef7f9-1960">형식에 있는 경우 <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> 속성 기본 속성의 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1960">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-1961">다음 예제에서는 검색 된 `Type` 사용자 정의 클래스의 개체는 해당 클래스의 속성을 검색 하 고 속성 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1961">The following example retrieves the `Type` object of a user-defined class, retrieves a property of that class, and displays the property name.</span></span>  
  
 [!code-cpp[Type_GetProperty1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty1/CPP/type_getproperty1.cpp#1)]
 [!code-csharp[Type_GetProperty1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty1/CS/type_getproperty1.cs#1)]
 [!code-vb[Type_GetProperty1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty1/VB/type_getproperty1.vb#1)]  
  
 <span data-ttu-id="ef7f9-1962">내부적으로이 속성에서 참조 하는 메타 데이터에 "Item" 이름</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1962">Internally, this property is referred to in the metadata by the name "Item."</span></span> <span data-ttu-id="ef7f9-1963">가져오려면 `PropertyInfo` 리플렉션을 사용 하 여 올바로 반환 하기 위해이 내부 이름을 지정 해야 합니다는 `PropertyInfo` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1963">Any attempt to get `PropertyInfo` using reflection must specify this internal name in order to correctly return the `PropertyInfo` property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-1964">지정한 이름을 가진 속성이 둘 이상 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1964">More than one property is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-1965">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1965">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-1966">가져올 속성의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1966">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-1967">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1967">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-1968">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1968">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-1969">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1969">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-1970">지정된 속성을 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1970">Searches for the specified property, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-1971">지정된 요구 사항과 일치하는 속성을 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-1971">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-1972">속성 공개 적어도 하나의 접근자 있으면 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1972">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="ef7f9-1973">그렇지 않은 경우 속성은 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1973">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-1974">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 검색에 포함할 속성을 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1974">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-1975">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1975">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-1976">지정 `BindingFlags.Public` 검색에 공용 속성을 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1976">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1977">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 속성 (즉, 전용, 내부 및 보호 된 속성)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1977">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-1978">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1978">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-1979">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1979">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-1980">`BindingFlags.IgnoreCase` 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1980">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-1981">`BindingFlags.DeclaredOnly` 에 선언 된 속성에 대해서만 검색 하는 <xref:System.Type>, 상속 된 속성이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1981">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-1982">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1982">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-1983">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.PropertyInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1983">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-1984">하는 경우 현재 <xref:System.Type> 형식 매개 변수이 메서드는 제네릭 형식 또는 제네릭 메서드 정의에 클래스 제약 조건의 속성을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1984">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="ef7f9-1985">실제 <xref:System.Reflection.AmbiguousMatchException> 발생은 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1985">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="ef7f9-1986">형식에는 두 개의 동일한 인덱싱된 속성 하지만 서로 다른 개수의 매개 변수 이름을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1986">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="ef7f9-1987">오버 로드를 사용 하 여 모호성을 해결 하는 <xref:System.Type.GetProperty%2A> 매개 변수 형식을 지정 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1987">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="ef7f9-1988">동일한 이름의 상속된 된 속성을 숨기는 속성을 선언 하는 파생된 형식을 사용 하 여는 `new` 한정자 (`Shadows` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1988">A derived type declares a property that hides an inherited property with the same name, using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="ef7f9-1989">모호성을 해결 하려면 포함 <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> 상속 되지 않은 멤버에 검색을 제한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1989">To resolve the ambiguity, include <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="ef7f9-1990">인덱서 및 기본 속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1990">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="ef7f9-1991">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], 및 [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] 간단한 인덱싱된 속성에 액세스 하기 위한 구문을 사용 하 고 해당 형식에 대 한 기본 인덱싱된 속성이 하나를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1991">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="ef7f9-1992">예를 들어 경우 변수 `myList` 참조 하는 <xref:System.Collections.ArrayList>, 구문을 `myList[3]` (`myList(3)` Visual basic에서) 3의 인덱스를 가진 요소를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1992">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="ef7f9-1993">속성을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1993">You can overload the property.</span></span>  
  
 <span data-ttu-id="ef7f9-1994">C#에서이 기능은 인덱서 호출 및 이름으로 참조할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1994">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="ef7f9-1995">기본적으로 C# 인덱서 메타 데이터에 "Item" 이라는 인덱싱된 속성으로 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1995">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="ef7f9-1996">그러나 클래스 라이브러리 개발자가 사용할 수는 <xref:System.Runtime.CompilerServices.IndexerNameAttribute> 메타 데이터에 인덱서의 이름을 변경할 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1996">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="ef7f9-1997">예를 들어는 <xref:System.String> 라는 예 <xref:System.String.Chars%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1997">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="ef7f9-1998">C# 이외의 언어를 사용 하 여 만든 인덱싱된 속성에는 사용자의 이름을 Item 이외의 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1998">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="ef7f9-1999">형식에 기본 속성이 있는지 확인 하려면는 <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> 메서드를 테스트 하는 <xref:System.Reflection.DefaultMemberAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-1999">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="ef7f9-2000">형식에 있는 경우 <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> 속성 기본 속성의 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2000">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-2001">다음 예제에서는 사용자 정의 클래스의 형식을 검색 하 고, 해당 클래스의 속성을 검색 하 고, 지정 된 바인딩 제약 조건에 따라 속성 이름을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2001">The following example retrieves the type of a user-defined class, retrieves a property of that class and displays the property name in accordance with the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperty2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty2/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty2/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty2/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-2002">지정한 이름을 가지며 지정된 바인딩 제약 조건과 일치하는 속성이 둘 이상 발견되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2002">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-2003">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2003">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-2004">가져올 공용 속성의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2004">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="ef7f9-2005">속성의 반환 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2005">The return type of the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-2006">지정된 이름과 반환 형식의 public 속성을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2006">Searches for the public property with the specified name and return type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-2007">지정된 이름의 공용 속성을 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2007">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-2008">속성 공개 적어도 하나의 접근자 있으면 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2008">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="ef7f9-2009">그렇지 않은 경우 속성은 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2009">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-2010">에 대 한 검색 `name` 대 소문자를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2010">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="ef7f9-2011">검색 public static 및 public 인스턴스 속성을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2011">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="ef7f9-2012">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.PropertyInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2012">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-2013">하는 경우 현재 <xref:System.Type> 형식 매개 변수이 메서드는 제네릭 형식 또는 제네릭 메서드 정의에 클래스 제약 조건의 속성을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2013">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="ef7f9-2014">인덱서 및 기본 속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2014">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="ef7f9-2015">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], 및 [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] 간단한 인덱싱된 속성에 액세스 하기 위한 구문을 사용 하 고 해당 형식에 대 한 기본 인덱싱된 속성이 하나를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2015">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="ef7f9-2016">예를 들어 경우 변수 `myList` 참조 하는 <xref:System.Collections.ArrayList>, 구문을 `myList[3]` (`myList(3)` Visual basic에서) 3의 인덱스를 가진 요소를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2016">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="ef7f9-2017">속성을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2017">You can overload the property.</span></span>  
  
 <span data-ttu-id="ef7f9-2018">C#에서이 기능은 인덱서 호출 및 이름으로 참조할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2018">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="ef7f9-2019">기본적으로 C# 인덱서 메타 데이터에 "Item" 이라는 인덱싱된 속성으로 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2019">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="ef7f9-2020">그러나 클래스 라이브러리 개발자가 사용할 수는 <xref:System.Runtime.CompilerServices.IndexerNameAttribute> 메타 데이터에 인덱서의 이름을 변경할 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2020">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="ef7f9-2021">예를 들어는 <xref:System.String> 라는 예 <xref:System.String.Chars%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2021">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="ef7f9-2022">C# 이외의 언어를 사용 하 여 만든 인덱싱된 속성에는 사용자의 이름을 Item 이외의 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2022">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="ef7f9-2023">형식에 기본 속성이 있는지 확인 하려면는 <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> 메서드를 테스트 하는 <xref:System.Reflection.DefaultMemberAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2023">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="ef7f9-2024">형식에 있는 경우 <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> 속성 기본 속성의 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2024">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-2025">다음 예제에서는 하나의 속성이 있는 클래스를 정의 하 고 이름 및 속성의 종류를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2025">The following example defines a class with one property and retrieves the name and type of the property.</span></span>  
  
 [!code-cpp[Type_GetProperty_Types#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty_Types/CPP/type_getproperty_types.cpp#1)]
 [!code-csharp[Type_GetProperty_Types#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty_Types/CS/type_getproperty_types.cs#1)]
 [!code-vb[Type_GetProperty_Types#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty_Types/VB/type_getproperty_types.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-2026">지정한 이름을 가진 속성이 둘 이상 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2026">More than one property is found with the specified name.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-2027">
            <paramref name="name" />이 <see langword="null" />이거나 <paramref name="returnType" />이 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2027">
              <paramref name="name" /> is <see langword="null" />, or <paramref name="returnType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-2028">가져올 공용 속성의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2028">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="ef7f9-2029">가져올 인덱싱된 속성에 대한 매개 변수의 수, 차수, 형식 등을 나타내는 <see cref="T:System.Type" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2029">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="ef7f9-2030">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2030">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2031">인덱싱되지 않은 속성을 가져오기 위한 <see cref="T:System.Type" /> 형식의 빈 배열입니다(즉, Type[] types = new Type[0]).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2031">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-2032">지정된 인수 형식과 일치하는 매개 변수를 가진 지정된 public 속성을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2032">Searches for the specified public property whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-2033">지정된 인수 형식과 일치하는 매개 변수를 가진 공용 속성을 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2033">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-2034">속성 공개 적어도 하나의 접근자 있으면 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2034">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="ef7f9-2035">그렇지 않은 경우 속성은 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2035">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-2036">에 대 한 검색 `name` 대 소문자를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2036">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="ef7f9-2037">검색 public static 및 public 인스턴스 속성을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2037">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="ef7f9-2038">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.PropertyInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2038">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-2039">하는 경우 현재 <xref:System.Type> 형식 매개 변수이 메서드는 제네릭 형식 또는 제네릭 메서드 정의에 클래스 제약 조건의 속성을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2039">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="ef7f9-2040">인덱서 및 기본 속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2040">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="ef7f9-2041">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], 및 [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] 간단한 인덱싱된 속성에 액세스 하기 위한 구문을 사용 하 고 해당 형식에 대 한 기본 인덱싱된 속성이 하나를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2041">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="ef7f9-2042">예를 들어 경우 변수 `myList` 참조 하는 <xref:System.Collections.ArrayList>, 구문을 `myList[3]` (`myList(3)` Visual basic에서) 3의 인덱스를 가진 요소를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2042">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="ef7f9-2043">속성을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2043">You can overload the property.</span></span>  
  
 <span data-ttu-id="ef7f9-2044">C#에서이 기능은 인덱서 호출 및 이름으로 참조할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2044">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="ef7f9-2045">기본적으로 C# 인덱서 메타 데이터에 "Item" 이라는 인덱싱된 속성으로 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2045">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="ef7f9-2046">그러나 클래스 라이브러리 개발자가 사용할 수는 <xref:System.Runtime.CompilerServices.IndexerNameAttribute> 메타 데이터에 인덱서의 이름을 변경할 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2046">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="ef7f9-2047">예를 들어는 <xref:System.String> 라는 예 <xref:System.String.Chars%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2047">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="ef7f9-2048">C# 이외의 언어를 사용 하 여 만든 인덱싱된 속성에는 사용자의 이름을 Item 이외의 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2048">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="ef7f9-2049">형식에 기본 속성이 있는지 확인 하려면는 <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> 메서드를 테스트 하는 <xref:System.Reflection.DefaultMemberAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2049">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="ef7f9-2050">형식에 있는 경우 <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> 속성 기본 속성의 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2050">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-2051">다음 예제에서는 검색 된 `Type` 사용자 정의 클래스의 개체가 해당 클래스의 속성을 검색 하 고 속성 이름 및 속성의 형식에 전달 된 인수에 지정 된 대로 표시 `GetProperty`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2051">The following example retrieves the `Type` object of a user-defined class, retrieves the property of that class, and displays the property name and type of the property as specified by the arguments passed to `GetProperty`.</span></span>  
  
 [!code-cpp[Type_GetProperty3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty3/CPP/type_getproperty3.cpp#1)]
 [!code-csharp[Type_GetProperty3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty3/CS/type_getproperty3.cs#1)]
 [!code-vb[Type_GetProperty3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty3/VB/type_getproperty3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-2052">지정한 이름을 가지며 지정된 인수 형식과 일치하는 속성이 둘 이상 발견되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2052">More than one property is found with the specified name and matching the specified argument types.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-2053">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2053">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2054">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2054">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2055">
            <paramref name="types" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2055">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-2056">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2056">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="ef7f9-2057">
            <paramref name="types" />의 요소가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2057">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-2058">가져올 공용 속성의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2058">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="ef7f9-2059">속성의 반환 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2059">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="ef7f9-2060">가져올 인덱싱된 속성에 대한 매개 변수의 수, 차수, 형식 등을 나타내는 <see cref="T:System.Type" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2060">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="ef7f9-2061">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2061">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2062">인덱싱되지 않은 속성을 가져오기 위한 <see cref="T:System.Type" /> 형식의 빈 배열입니다(즉, Type[] types = new Type[0]).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2062">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-2063">지정된 인수 형식과 일치하는 매개 변수를 가진 지정된 public 속성을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2063">Searches for the specified public property whose parameters match the specified argument types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-2064">지정된 인수 형식과 일치하는 매개 변수를 가진 공용 속성을 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2064">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-2065">속성 공개 적어도 하나의 접근자 있으면 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2065">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="ef7f9-2066">그렇지 않은 경우 속성은 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2066">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-2067">에 대 한 검색 `name` 대 소문자를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2067">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="ef7f9-2068">검색 public static 및 public 인스턴스 속성을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2068">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="ef7f9-2069">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.PropertyInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2069">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-2070">하는 경우 현재 <xref:System.Type> 형식 매개 변수이 메서드는 제네릭 형식 또는 제네릭 메서드 정의에 클래스 제약 조건의 속성을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2070">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="ef7f9-2071">인덱서 및 기본 속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2071">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="ef7f9-2072">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], 및 [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] 간단한 인덱싱된 속성에 액세스 하기 위한 구문을 사용 하 고 해당 형식에 대 한 기본 인덱싱된 속성이 하나를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2072">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="ef7f9-2073">예를 들어 경우 변수 `myList` 참조 하는 <xref:System.Collections.ArrayList>, 구문을 `myList[3]` (`myList(3)` Visual basic에서) 3의 인덱스를 가진 요소를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2073">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="ef7f9-2074">속성을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2074">You can overload the property.</span></span>  
  
 <span data-ttu-id="ef7f9-2075">C#에서이 기능은 인덱서 호출 및 이름으로 참조할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2075">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="ef7f9-2076">기본적으로 C# 인덱서 메타 데이터에 "Item" 이라는 인덱싱된 속성으로 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2076">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="ef7f9-2077">그러나 클래스 라이브러리 개발자가 사용할 수는 <xref:System.Runtime.CompilerServices.IndexerNameAttribute> 메타 데이터에 인덱서의 이름을 변경할 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2077">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="ef7f9-2078">예를 들어는 <xref:System.String> 라는 예 <xref:System.String.Chars%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2078">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="ef7f9-2079">C# 이외의 언어를 사용 하 여 만든 인덱싱된 속성에는 사용자의 이름을 Item 이외의 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2079">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="ef7f9-2080">형식에 기본 속성이 있는지 확인 하려면는 <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> 메서드를 테스트 하는 <xref:System.Reflection.DefaultMemberAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2080">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="ef7f9-2081">형식에 있는 경우 <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> 속성 기본 속성의 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2081">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-2082">지정한 이름을 가지며 지정된 인수 형식과 일치하는 속성이 둘 이상 발견되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2082">More than one property is found with the specified name and matching the specified argument types.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-2083">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2083">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2084">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2084">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2085">
            <paramref name="types" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2085">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-2086">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2086">
              <paramref name="types" /> is multidimensional.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="ef7f9-2087">
            <paramref name="types" />의 요소가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2087">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-2088">가져올 공용 속성의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2088">The string containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="ef7f9-2089">속성의 반환 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2089">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="ef7f9-2090">가져올 인덱싱된 속성에 대한 매개 변수의 수, 차수, 형식 등을 나타내는 <see cref="T:System.Type" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2090">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="ef7f9-2091">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2091">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2092">인덱싱되지 않은 속성을 가져오기 위한 <see cref="T:System.Type" /> 형식의 빈 배열입니다(즉, Type[] types = new Type[0]).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2092">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="ef7f9-2093">
            <c>types</c> 배열에서 해당하는 요소와 연관된 특성을 나타내는 <see cref="T:System.Reflection.ParameterModifier" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2093">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="ef7f9-2094">기본 바인더에서는 이 매개 변수를 처리하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2094">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-2095">지정된 인수 형식 및 한정자와 일치하는 매개 변수를 가진 지정된 public 속성을 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2095">Searches for the specified public property whose parameters match the specified argument types and modifiers.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-2096">지정된 요구 사항과 일치하는 public 속성을 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2096">An object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-2097">속성 공개 적어도 하나의 접근자 있으면 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2097">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="ef7f9-2098">그렇지 않은 경우 속성은 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2098">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-2099">기본 바인더는 처리 하지 않더라도 <xref:System.Reflection.ParameterModifier> (의 `modifiers` 매개 변수), 추상을 사용할 수 있습니다 <xref:System.Reflection.Binder?displayProperty=nameWithType> 클래스는 사용자 지정 처리 하는 바인더를 작성 하 `modifiers`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2099">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="ef7f9-2100">`ParameterModifier` COM interop를 통해 호출할 때만 사용 되 고 참조로 전달 되는 매개 변수만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2100">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="ef7f9-2101">에 대 한 검색 `name` 대 소문자를 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2101">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="ef7f9-2102">검색 public static 및 public 인스턴스 속성을 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2102">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="ef7f9-2103">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.PropertyInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2103">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-2104">하는 경우 현재 <xref:System.Type> 형식 매개 변수이 메서드는 제네릭 형식 또는 제네릭 메서드 정의에 클래스 제약 조건의 속성을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2104">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="ef7f9-2105">인덱서 및 기본 속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2105">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="ef7f9-2106">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], 및 [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] 간단한 인덱싱된 속성에 액세스 하기 위한 구문을 사용 하 고 해당 형식에 대 한 기본 인덱싱된 속성이 하나를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2106">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="ef7f9-2107">예를 들어 경우 변수 `myList` 참조 하는 <xref:System.Collections.ArrayList>, 구문을 `myList[3]` (`myList(3)` Visual basic에서) 3의 인덱스를 가진 요소를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2107">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="ef7f9-2108">속성을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2108">You can overload the property.</span></span>  
  
 <span data-ttu-id="ef7f9-2109">C#에서이 기능은 인덱서 호출 및 이름으로 참조할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2109">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="ef7f9-2110">기본적으로 C# 인덱서 메타 데이터에 "Item" 이라는 인덱싱된 속성으로 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2110">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="ef7f9-2111">그러나 클래스 라이브러리 개발자가 사용할 수는 <xref:System.Runtime.CompilerServices.IndexerNameAttribute> 메타 데이터에 인덱서의 이름을 변경할 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2111">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="ef7f9-2112">예를 들어는 <xref:System.String> 라는 예 <xref:System.String.Chars%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2112">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="ef7f9-2113">C# 이외의 언어를 사용 하 여 만든 인덱싱된 속성에는 사용자의 이름을 Item 이외의 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2113">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="ef7f9-2114">형식에 기본 속성이 있는지 확인 하려면는 <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> 메서드를 테스트 하는 <xref:System.Reflection.DefaultMemberAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2114">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="ef7f9-2115">형식에 있는 경우 <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> 속성 기본 속성의 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2115">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-2116">다음 예에서는 한 `Type` 개체에 해당 하 `MyPropertyClass`,이 클래스의 인덱싱된 속성에 전달 된 인수를 사용 하 여 검색 되는 `GetProperty` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2116">The following example obtains a `Type` object corresponding to `MyPropertyClass`, and the indexed property of this class is retrieved using the arguments passed to the `GetProperty` method.</span></span>  
  
 [!code-cpp[Type_GetProperty5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty5/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty5/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty5/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-2117">지정한 이름을 가지며 지정된 인수 형식 및 수정자와 일치하는 속성이 둘 이상 발견되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2117">More than one property is found with the specified name and matching the specified argument types and modifiers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-2118">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2118">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2119">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2119">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2120">
            <paramref name="types" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2120">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-2121">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2121">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-2122">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2122">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2123">
            <paramref name="modifiers" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2123">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-2124">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2124">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2125">
            <paramref name="types" />와 <paramref name="modifiers" />의 길이가 동일하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2125">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="ef7f9-2126">
            <paramref name="types" />의 요소가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2126">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-2127">가져올 속성의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2127">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-2128">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2128">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-2129">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2129">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2130">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2130">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="ef7f9-2131">속성 집합을 정의하고 바인딩을 활성화하는 개체입니다. 이 개체는 또한 리플렉션을 통해 오버로드된 메서드를 선택할 수 있고 인수 형식을 강제 변환할 수 있으며 멤버를 호출할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2131">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="ef7f9-2132">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2132">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2133">
            <see langword="Nothing" />를 사용하려면 null 참조(Visual Basic의 경우 <see cref="P:System.Type.DefaultBinder" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2133">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="ef7f9-2134">속성의 반환 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2134">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="ef7f9-2135">가져올 인덱싱된 속성에 대한 매개 변수의 수, 차수, 형식 등을 나타내는 <see cref="T:System.Type" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2135">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="ef7f9-2136">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2136">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2137">인덱싱되지 않은 속성을 가져오기 위한 <see cref="T:System.Type" /> 형식의 빈 배열입니다(즉, Type[] types = new Type[0]).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2137">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="ef7f9-2138">
            <c>types</c> 배열에서 해당하는 요소와 연관된 특성을 나타내는 <see cref="T:System.Reflection.ParameterModifier" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2138">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="ef7f9-2139">기본 바인더에서는 이 매개 변수를 처리하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2139">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-2140">지정된 인수 형식 및 한정자와 일치하는 매개 변수를 가진 지정된 속성을 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2140">Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-2141">지정된 요구 사항과 일치하는 속성을 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2141">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-2142">속성 공개 적어도 하나의 접근자 있으면 반사를 공용으로 간주 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2142">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="ef7f9-2143">그렇지 않은 경우 속성은 개인으로 간주 하 고 사용 해야 <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (Visual Basic에서 사용 하 여 값을 결합 `Or`)를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2143">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="ef7f9-2144">기본 바인더는 처리 하지 않더라도 <xref:System.Reflection.ParameterModifier> (의 `modifiers` 매개 변수), 추상을 사용할 수 있습니다 <xref:System.Reflection.Binder?displayProperty=nameWithType> 클래스는 사용자 지정 처리 하는 바인더를 작성 하 `modifiers`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2144">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="ef7f9-2145">`ParameterModifier` COM interop를 통해 호출할 때만 사용 되 고 참조로 전달 되는 매개 변수만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2145">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="ef7f9-2146">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2146">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-2147">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2147">Member Type</span></span>|<span data-ttu-id="ef7f9-2148">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2148">Static</span></span>|<span data-ttu-id="ef7f9-2149">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2149">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-2150">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2150">Constructor</span></span>|<span data-ttu-id="ef7f9-2151">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2151">No</span></span>|<span data-ttu-id="ef7f9-2152">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2152">No</span></span>|  
|<span data-ttu-id="ef7f9-2153">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2153">Field</span></span>|<span data-ttu-id="ef7f9-2154">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2154">No</span></span>|<span data-ttu-id="ef7f9-2155">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2155">Yes.</span></span> <span data-ttu-id="ef7f9-2156">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2156">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-2157">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2157">Event</span></span>|<span data-ttu-id="ef7f9-2158">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2158">Not applicable</span></span>|<span data-ttu-id="ef7f9-2159">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2159">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-2160">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2160">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-2161">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2161">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-2162">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2162">Method</span></span>|<span data-ttu-id="ef7f9-2163">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2163">No</span></span>|<span data-ttu-id="ef7f9-2164">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2164">Yes.</span></span> <span data-ttu-id="ef7f9-2165">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2165">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-2166">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2166">Nested Type</span></span>|<span data-ttu-id="ef7f9-2167">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2167">No</span></span>|<span data-ttu-id="ef7f9-2168">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2168">No</span></span>|  
|<span data-ttu-id="ef7f9-2169">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2169">Property</span></span>|<span data-ttu-id="ef7f9-2170">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2170">Not applicable</span></span>|<span data-ttu-id="ef7f9-2171">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2171">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-2172">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2172">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-2173">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2173">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-2174">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2174">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-2175">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2175">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-2176">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2176">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-2177">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2177">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-2178">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2178">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-2179">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 검색에 포함할 속성을 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2179">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-2180">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2180">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-2181">지정 `BindingFlags.Public` 검색에 공용 속성을 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2181">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-2182">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 속성 (즉, 전용, 내부 및 보호 된 속성)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2182">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-2183">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2183">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-2184">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2184">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-2185">`BindingFlags.IgnoreCase` 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2185">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-2186">`BindingFlags.DeclaredOnly` 에 선언 된 속성에 대해서만 검색 하는 <xref:System.Type>, 상속 된 속성이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2186">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-2187">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2187">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-2188">하는 경우 현재 <xref:System.Type> 이 메서드는 반환 생성된 된 제네릭 형식을 나타내는 <xref:System.Reflection.PropertyInfo> 적절 한 형식 인수에 의해 대체 형식 매개 변수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2188">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-2189">하는 경우 현재 <xref:System.Type> 형식 매개 변수이 메서드는 제네릭 형식 또는 제네릭 메서드 정의에 클래스 제약 조건의 속성을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2189">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="ef7f9-2190">인덱서 및 기본 속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2190">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="ef7f9-2191">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], 및 [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] 간단한 인덱싱된 속성에 액세스 하기 위한 구문을 사용 하 고 해당 형식에 대 한 기본 인덱싱된 속성이 하나를 허용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2191">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="ef7f9-2192">예를 들어 경우 변수 `myList` 참조 하는 <xref:System.Collections.ArrayList>, 구문을 `myList[3]` (`myList(3)` Visual basic에서) 3의 인덱스를 가진 요소를 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2192">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="ef7f9-2193">속성을 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2193">You can overload the property.</span></span>  
  
 <span data-ttu-id="ef7f9-2194">C#에서이 기능은 인덱서 호출 및 이름으로 참조할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2194">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="ef7f9-2195">기본적으로 C# 인덱서 메타 데이터에 "Item" 이라는 인덱싱된 속성으로 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2195">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="ef7f9-2196">그러나 클래스 라이브러리 개발자가 사용할 수는 <xref:System.Runtime.CompilerServices.IndexerNameAttribute> 메타 데이터에 인덱서의 이름을 변경할 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2196">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="ef7f9-2197">예를 들어는 <xref:System.String> 라는 예 <xref:System.String.Chars%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2197">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="ef7f9-2198">C# 이외의 언어를 사용 하 여 만든 인덱싱된 속성에는 사용자의 이름을 Item 이외의 있을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2198">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="ef7f9-2199">형식에 기본 속성이 있는지 확인 하려면는 <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> 메서드를 테스트 하는 <xref:System.Reflection.DefaultMemberAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2199">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="ef7f9-2200">형식에 있는 경우 <xref:System.Reflection.DefaultMemberAttribute>, <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> 속성 기본 속성의 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2200">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-2201">지정한 이름을 가지며 지정된 바인딩 제약 조건과 일치하는 속성이 둘 이상 발견되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2201">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-2202">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2202">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2203">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2203">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2204">
            <paramref name="types" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2204">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-2205">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2205">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-2206">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2206">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2207">
            <paramref name="modifiers" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2207">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-2208">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2208">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2209">
            <paramref name="types" />와 <paramref name="modifiers" />의 길이가 동일하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2209">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="ef7f9-2210">
            <paramref name="types" />의 요소가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2210">An element of <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-2211">가져올 속성의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2211">The string containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="ef7f9-2212">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2212">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-2213">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2213">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2214">0(<see langword="null" />을 반환하는 경우)</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2214">Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="ef7f9-2215">속성 집합을 정의하고 바인딩을 활성화하는 개체입니다. 이 개체는 또한 리플렉션을 통해 오버로드된 멤버를 선택할 수 있고 인수 형식을 강제 변환할 수 있으며 멤버를 호출할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2215">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="ef7f9-2216">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2216">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2217">
            <see langword="Nothing" />를 사용하려면 null 참조(Visual Basic의 경우 <see cref="P:System.Type.DefaultBinder" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2217">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="ef7f9-2218">속성의 반환 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2218">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="ef7f9-2219">가져올 인덱싱된 속성에 대한 매개 변수의 수, 차수, 형식 등을 나타내는 <see cref="T:System.Type" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2219">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="ef7f9-2220">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2220">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2221">인덱싱되지 않은 속성을 가져오기 위한 <see cref="T:System.Type" /> 형식의 빈 배열입니다(즉, Type[] types = new Type[0]).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2221">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="ef7f9-2222">
            <c>types</c> 배열에서 해당하는 요소와 연관된 특성을 나타내는 <see cref="T:System.Reflection.ParameterModifier" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2222">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="ef7f9-2223">기본 바인더에서는 이 매개 변수를 처리하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2223">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-2224">파생 클래스에서 재정의되면, 지정된 인수 형식 및 한정자와 일치하는 매개 변수를 가진 지정된 속성을 지정된 바인딩 제약 조건으로 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2224">When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-2225">지정된 요구 사항과 일치하는 속성을 나타내는 개체이며(있는 경우), 이러한 개체가 없으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2225">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-2226">기본 바인더는 처리 하지 않더라도 <xref:System.Reflection.ParameterModifier> (의 `modifiers` 매개 변수), 추상을 사용할 수 있습니다 <xref:System.Reflection.Binder?displayProperty=nameWithType> 클래스는 사용자 지정 처리 하는 바인더를 작성 하 `modifiers`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2226">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="ef7f9-2227">`ParameterModifier` COM interop를 통해 호출할 때만 사용 되 고 참조로 전달 되는 매개 변수만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2227">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="ef7f9-2228">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 검색에 포함할 속성을 정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2228">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-2229">지정 해야 `BindingFlags.Instance` 또는 `BindingFlags.Static` 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2229">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="ef7f9-2230">지정 `BindingFlags.Public` 검색에 공용 속성을 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2230">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-2231">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 속성 (즉, 전용, 내부 및 보호 된 속성)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2231">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-2232">지정 `BindingFlags.FlattenHierarchy` 포함 하도록 `public` 및 `protected` 정적 멤버를 계층 구조입니다. `private` 상속 된 클래스의 정적 멤버가 포함 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2232">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="ef7f9-2233">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2233">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-2234">`BindingFlags.IgnoreCase` 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2234">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-2235">`BindingFlags.DeclaredOnly` 에 선언 된 속성에 대해서만 검색 하는 <xref:System.Type>, 상속 된 속성이 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2235">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-2236">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2236">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-2237">지정한 이름을 가지며 지정된 바인딩 제약 조건과 일치하는 속성이 둘 이상 발견되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2237">More than one property is found with the specified name and matching the specified binding constraints.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-2238">
            <paramref name="name" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2238">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2239">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2239">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2240">
            <paramref name="types" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2240">
              <paramref name="types" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2241">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2241">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2242">
            <paramref name="types" />의 요소 중 하나가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2242">One of the elements in <paramref name="types" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-2243">
            <paramref name="types" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2243">
              <paramref name="types" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-2244">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2244">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2245">
            <paramref name="modifiers" />가 다차원 배열인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2245">
              <paramref name="modifiers" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="ef7f9-2246">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2246">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2247">
            <paramref name="types" />와 <paramref name="modifiers" />의 길이가 동일하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2247">
              <paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-2248">현재 형식이 <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" /> 또는 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2248">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-2249">지정된 형식을 나타내는 <see cref="T:System.Type" /> 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2249">Gets a <see cref="T:System.Type" /> object that represents the specified type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-2250">현재 <see cref="T:System.Type" />를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2250">Gets the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-2251">현재 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2251">The current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ef7f9-2252">클래스 이니셜라이저가 호출되고 예외가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2252">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.TypeLoadException" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="ef7f9-2253">가져올 형식에 대한 어셈블리로 한정된 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2253">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="ef7f9-2254">
            <see cref="P:System.Type.AssemblyQualifiedName" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2254">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2255">형식이 현재 실행 중인 어셈블리나 Mscorlib.dll에 있는 경우 네임스페이스로 한정된 형식 이름만 제공하면 됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2255">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-2256">대/소문자 구분 검색하여 지정된 이름의 <see cref="T:System.Type" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2256">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-2257">지정된 이름의 형식이 있으면 이를 반환하고 그렇지 않으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2257">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-2258">사용할 수는 <xref:System.Type.GetType%2A> 를 얻는 메서드를 한 <xref:System.Type> 정규화 된 네임 스페이스 이름을 알고 있는 경우 다른 어셈블리의 형식에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2258">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its namespace-qualified name.</span></span> <span data-ttu-id="ef7f9-2259"><xref:System.Type.GetType%2A> 에 지정 된 어셈블리의 로드를 일으킵니다 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2259"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="ef7f9-2260">사용 하 여 어셈블리를 로드할 수도 있습니다는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 사용 하 여는 <xref:System.Type.GetType%2A> 또는 <xref:System.Reflection.Assembly.GetTypes%2A> 의 메서드는 <xref:System.Reflection.Assembly> 가져올 클래스를 <xref:System.Type> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2260">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="ef7f9-2261">이 C#에서 사용 하는 것이 효율적 컴파일 타임에 프로그램에 알려진 어셈블리에는 형식이 있는 경우 <xref:System.Type.GetType%2A> Visual basic에서 또는 c + +입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2261">If a type is in an assembly known to your program at compile time, it is more efficient to use  in C#, <xref:System.Type.GetType%2A> in Visual Basic, or  in C++.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-2262">경우 `typeName` 찾을 수 없는 경우에 대 한 호출에서 <xref:System.Type.GetType%28System.String%29> 메서드 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2262">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%29> method returns `null`.</span></span> <span data-ttu-id="ef7f9-2263">예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2263">It does not throw an exception.</span></span> <span data-ttu-id="ef7f9-2264">제어 하려면 여부 예외가, 호출의 오버 로드는 <xref:System.Type.GetType%2A> 변수가 있는 메서드에 `throwOnError` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2264">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="ef7f9-2265"><xref:System.Type.GetType%2A> 디스크에서 로드 된 어셈블리에 대해서만 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2265"><xref:System.Type.GetType%2A> only works on assemblies loaded from disk.</span></span> <span data-ttu-id="ef7f9-2266">호출 하는 경우 <xref:System.Type.GetType%2A> 를 사용 하 여 정의 하는 동적 어셈블리에 정의 된 형식을 조회 하는 <xref:System.Reflection.Emit> 서비스 일관 되지 않은 동작이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2266">If you call <xref:System.Type.GetType%2A> to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="ef7f9-2267">동작 인지에 따라 동적 어셈블리 영구, 즉, 사용 하 여 만든는 `RunAndSave` 또는 `Save` 액세스의 모드는 <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2267">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="ef7f9-2268">동적 어셈블리 지속적이 고 전에 디스크에 기록 된 경우 `GetType` 은 호출 로더 디스크에 저장 된 어셈블리를 찾아서, 해당 어셈블리를 로드 하 고 해당 어셈블리에서 형식을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2268">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="ef7f9-2269">어셈블리 경우 디스크에 저장 하지 않은 경우 `GetType` 메서드가 호출 될 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2269">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="ef7f9-2270">`GetType` 임시 동적 어셈블리; 인식할 수 없음 따라서 호출 `GetType` 동적 어셈블리에서 임시 형식을 검색할 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2270">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="ef7f9-2271">사용 하도록 `GetType` 동적 모듈에서 구독 하는 <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> 이벤트 및 호출 `GetType` 저장 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2271">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="ef7f9-2272">그렇지 않으면 해당 어셈블리의 두 복사본이 메모리에 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2272">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="ef7f9-2273">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2273">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-2274">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2274">Member Type</span></span>|<span data-ttu-id="ef7f9-2275">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2275">Static</span></span>|<span data-ttu-id="ef7f9-2276">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2276">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-2277">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2277">Constructor</span></span>|<span data-ttu-id="ef7f9-2278">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2278">No</span></span>|<span data-ttu-id="ef7f9-2279">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2279">No</span></span>|  
|<span data-ttu-id="ef7f9-2280">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2280">Field</span></span>|<span data-ttu-id="ef7f9-2281">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2281">No</span></span>|<span data-ttu-id="ef7f9-2282">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2282">Yes.</span></span> <span data-ttu-id="ef7f9-2283">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2283">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-2284">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2284">Event</span></span>|<span data-ttu-id="ef7f9-2285">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2285">Not applicable</span></span>|<span data-ttu-id="ef7f9-2286">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2286">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-2287">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2287">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-2288">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2288">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-2289">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2289">Method</span></span>|<span data-ttu-id="ef7f9-2290">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2290">No</span></span>|<span data-ttu-id="ef7f9-2291">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2291">Yes.</span></span> <span data-ttu-id="ef7f9-2292">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2292">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-2293">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2293">Nested Type</span></span>|<span data-ttu-id="ef7f9-2294">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2294">No</span></span>|<span data-ttu-id="ef7f9-2295">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2295">No</span></span>|  
|<span data-ttu-id="ef7f9-2296">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2296">Property</span></span>|<span data-ttu-id="ef7f9-2297">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2297">Not applicable</span></span>|<span data-ttu-id="ef7f9-2298">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2298">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-2299">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2299">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-2300">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2300">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-2301">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2301">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-2302">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2302">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-2303">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2303">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-2304">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2304">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-2305">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2305">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-2306">배열 또는 COM 형식을만 검색가 이미 사용 가능한 클래스의 테이블에 로드 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2306">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="ef7f9-2307">`typeName` 정규화 할 수 있습니다 형식 이름은 네임 스페이스 또는 사양을 포함 하는 어셈블리 이름을 정규화 된 어셈블리 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2307">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="ef7f9-2308"><xref:System.Type.AssemblyQualifiedName%2A>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2308">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="ef7f9-2309">경우 `typeName` 네임 스페이스만 어셈블리 이름을 포함 합니다.이 메서드를 호출 하는 개체의 어셈블리와 Mscorlib.dll이 순서 대로 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2309">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="ef7f9-2310">일부 또는 전체 어셈블리 이름으로 정규화 된 typeName 이면이 메서드는 지정된 된 어셈블리에 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2310">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="ef7f9-2311">어셈블리에 강력한 이름이 있으면는 완전 한 어셈블리 이름이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2311">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="ef7f9-2312"><xref:System.Type.AssemblyQualifiedName%2A> 속성 중첩된 형식, 어셈블리 이름 및 제네릭 형식 인수를 포함 하 여 정규화 된 형식 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2312">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic type arguments.</span></span> <span data-ttu-id="ef7f9-2313">공용 언어 런타임을 지 원하는 모든 컴파일러는 중첩 된 클래스의 단순한 이름을 내보내고 리플렉션에서 다음 규칙에 따라 쿼리 시 형식 표시 이름을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2313">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-2314">.NET Framework 버전 2.0의에서 프로세서 아키텍처 어셈블리 id에 추가 되 고 어셈블리 이름 문자열의 일부로 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2314">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="ef7f9-2315">예를 들어 "ProcessorArchitecture = msil"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2315">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="ef7f9-2316">그러나 반환 하는 문자열에 포함 되지 됩니다는 <xref:System.Type.AssemblyQualifiedName%2A> 호환성을 위해 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2316">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="ef7f9-2317">만들어 형식을 로드할 수도 있습니다는 <xref:System.Reflection.AssemblyName> 개체와의 적절 한 오버 로드에 전달 된 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2317">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="ef7f9-2318">그런 다음 사용할 수는 <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> 어셈블리에서 형식을 로드 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2318">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="ef7f9-2319"><xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2319">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="ef7f9-2320">구분 기호</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2320">Delimiter</span></span>|<span data-ttu-id="ef7f9-2321">의미</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2321">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="ef7f9-2322">백슬래시(\\)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2322">Backslash (\\)</span></span>|<span data-ttu-id="ef7f9-2323">이스케이프 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2323">Escape character.</span></span>|  
|<span data-ttu-id="ef7f9-2324">역따옴표 (')</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2324">Backtick (\`)</span></span>|<span data-ttu-id="ef7f9-2325">제네릭 형식의 이름 끝에 있는 형식 매개 변수 수를 나타내는 하나 이상의 10 진수 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2325">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="ef7f9-2326">대괄호 ()</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2326">Brackets ([])</span></span>|<span data-ttu-id="ef7f9-2327">생성된 된 제네릭 형식;에 대 한 제네릭 형식 인수 목록을 묶습니다. 형식 인수 목록 내에서 정규화 된 어셈블리 형식을 묶습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2327">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="ef7f9-2328">쉼표 ()</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2328">Comma (,)</span></span>|<span data-ttu-id="ef7f9-2329">어셈블리 이름을 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2329">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="ef7f9-2330">마침표 (입니다.)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2330">Period (.)</span></span>|<span data-ttu-id="ef7f9-2331">네임 스페이스 식별자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2331">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="ef7f9-2332">더하기 기호 (+)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2332">Plus sign (+)</span></span>|<span data-ttu-id="ef7f9-2333">중첩된 된 클래스 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2333">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="ef7f9-2334">예를 들어 클래스에 대 한 정규화 된 이름을 다음과 같이 표시 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2334">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="ef7f9-2335">네임 스페이스 TopNamespace.Sub+Namespace, 된 경우 문자열 앞에 이스케이프 문자는 더하기 기호 (+) 해야 합니다 (\\) 중첩 구분 기호로 해석 되지 않도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2335">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="ef7f9-2336">리플렉션 다음과 같이이 문자열을 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2336">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="ef7f9-2337">A "+ +"가 "\\+\\+", 및 "\\"가 "\\\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2337">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="ef7f9-2338">이 정규화 된 이름은 유지 되었다가 나중에 로드 하는 데 사용 된 <xref:System.Type>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2338">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="ef7f9-2339">찾아 로드 하는 <xref:System.Type>를 사용 하 여 <xref:System.Type.GetType%2A> 만 또는 어셈블리의 정규화 된 형식 이름으로 이름 형식을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2339">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="ef7f9-2340"><xref:System.Type.GetType%2A> 형식으로 이름을 찾을 것은 <xref:System.Type> 호출자의 어셈블리에서 찾은 다음 시스템 어셈블리에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2340"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="ef7f9-2341"><xref:System.Type.GetType%2A> 어셈블리와 정규화 된 형식 이름에 대 한 표시 됩니다는 <xref:System.Type> 모든 어셈블리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2341"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="ef7f9-2342">형식 이름에는 형식이 참조 형식, 포인터 형식 또는 배열 형식 인지와 같은 형식에 대 한 추가 정보를 나타내는 후행 문자가 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2342">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="ef7f9-2343">형식 이름 없이 이러한 후행 문자를 검색 하려면 사용 `t.GetElementType().ToString()`여기서 `t` 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2343">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="ef7f9-2344">공백은 어셈블리 이름 제외한 모든 형식 이름 구성 요소에 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2344">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="ef7f9-2345">어셈블리 이름에 ',' 구분 기호 앞에 공백이 관련이 있지만 ',' 구분 기호 뒤의 공백은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2345">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="ef7f9-2346">제네릭 형식의 이름은 억음 악센트 기호로 끝납니다 (\`) 제네릭 형식 인수 개수를 나타내는 숫자가 차례로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2346">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="ef7f9-2347">이 이름 관리의 목적은 제네릭 형식을 지원 형식 매개 변수의 수가 달라 하지만 같은 이름의 동일한 범위에서 발생 하는 컴파일러에서 허용 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2347">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="ef7f9-2348">리플렉션 형식 표시 이름을 반환 하는 예를 들어 `Tuple`1` and `튜플`2` 제네릭 메서드에서 `Tuple(Of T)` 및 `Tuple(Of T0, T1)` Visual basic에서 또는 `Tuple<T>` 및 튜플`\<T0, T1>` Visual C#입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2348">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="ef7f9-2349">제네릭 형식에 대 한 형식 인수 목록이 대괄호로 묶이며 형식 인수는 쉼표로 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2349">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="ef7f9-2350">예를 들어, 제네릭 <xref:System.Collections.Generic.Dictionary%602> 두 형식 매개 변수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2350">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="ef7f9-2351">A <xref:System.Collections.Generic.Dictionary%602> 의 `MyType` 유형의 키를 가진 <xref:System.String> 다음과 같이 표현 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2351">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="ef7f9-2352">형식 인수 목록 내에서 정규화 된 어셈블리 형식을 지정 하려면 정규화 된 어셈블리 형식을 대괄호로 묶습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2352">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="ef7f9-2353">그렇지 않으면 어셈블리의 정규화 된 이름의 각 부분을 구분 하는 쉼표로 구분 하는 추가 형식 인수로 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2353">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="ef7f9-2354">예를 들어는 <xref:System.Collections.Generic.Dictionary%602> 의 `MyType` 유형의 키를 가진 fromMyAssembly.dll <xref:System.String>, 다음과 같이 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2354">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` fromMyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-2355">형식 매개 변수 목록에 나타나는 경우에 정규화 된 어셈블리 형식은 대괄호로 묶을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2355">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="ef7f9-2356">형식 매개 변수 목록에서 정규화 형식에 대 한 어셈블리에서 검색 규칙은 정규화 제네릭이 아닌 형식에 대 한 규칙과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2356">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="ef7f9-2357">Null 허용 유형은 제네릭 형식의 특별 한 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2357">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="ef7f9-2358">예를 들어, null 허용 <xref:System.Int32> 문자열 "System.Nullable'1[System.Int32]"으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2358">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-2359">C#, c + + 및 Visual Basic 형식 연산자를 사용 하 여 nullable 형식을 얻을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2359">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="ef7f9-2360">예를 들어, null 허용 <xref:System.Boolean> 에서 형식을 반환 `typeof(Nullable<bool>)` C#에서는 여 `Nullable<Boolean>::typeid` 및 c + +에서는 `GetType(Nullable(Of Boolean))` Visual Basic의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2360">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="ef7f9-2361">다음 표에서 함께 사용 하면 구문을 보여 줍니다. `GetType` 다양 한 형식에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2361">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="ef7f9-2362">가져오려는</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2362">To Get</span></span>|<span data-ttu-id="ef7f9-2363">사용</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2363">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="ef7f9-2364">Null 허용 <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="ef7f9-2364">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="ef7f9-2365">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2365">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="ef7f9-2366">에 대 한 관리 되지 않는 포인터입니다. `MyType`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2366">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="ef7f9-2367">에 대 한 포인터에 대 한 관리 되지 않는 포인터입니다. `MyType`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2367">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="ef7f9-2368">관리 되는 포인터 또는 참조 `MyType`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2368">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="ef7f9-2369">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2369">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="ef7f9-2370">포인터와 달리 참조는 한 수준으로 제한됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2370">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="ef7f9-2371">부모 클래스와 중첩된 된 클래스</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2371">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="ef7f9-2372">0 인 1 차원 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2372">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyType[]")`|  
|<span data-ttu-id="ef7f9-2373">알 수 없는 하한값 있는 1 차원 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2373">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyType[*]")`|  
|<span data-ttu-id="ef7f9-2374">N 차원 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2374">An n-dimensional array</span></span>|<span data-ttu-id="ef7f9-2375">총 n-1 번 대괄호 안에 쉼표 (,)입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2375">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="ef7f9-2376">예를 들어 `System.Object[,,]` 나타냅니다는 3 차원 `Object` 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2376">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="ef7f9-2377">1 차원 배열의 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2377">An array of one-dimensional arrays</span></span>|`Type.GetType("MyType[][]")`|  
|<span data-ttu-id="ef7f9-2378">알 수 없는 하 한을 가진 사각형 2 차원 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2378">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyType[,]")`|  
|<span data-ttu-id="ef7f9-2379">한 형식 인수가 있는 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2379">A generic type with one type argument</span></span>|<span data-ttu-id="ef7f9-2380">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2380">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="ef7f9-2381">두 형식 인수가 있는 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2381">A generic type with two type arguments</span></span>|<span data-ttu-id="ef7f9-2382">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2382">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="ef7f9-2383">두 개의 어셈블리로 한정 된 형식 인수로 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2383">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="ef7f9-2384">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2384">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="ef7f9-2385">어셈블리의 정규화 된 형식 인수가 지정 된 어셈블리의 정규화 된 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2385">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="ef7f9-2386">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2386">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="ef7f9-2387">두 개의 형식 인수로 제네릭 형식이 형식 인수는 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2387">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="ef7f9-2388">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2388">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-2389">다음 예제에서는의 유형을 검색 `System.Int32` 형식 개체를 사용 하 여 표시 하 고는 <xref:System.Type.FullName%2A> 속성 `System.Int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2389">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-2390">
            <paramref name="typeName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2390">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ef7f9-2391">클래스 이니셜라이저가 호출되고 예외가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2391">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-2392">
            <paramref name="typeName" />이 형식 인수 중 하나로 포인터 형식, <see langword="ByRef" /> 형식 또는 <see cref="T:System.Void" />를 가진 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2392">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-2393">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2393">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2394">
            <paramref name="typeName" />은 형식 인수의 개수가 잘못된 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2394">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-2395">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2395">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2396">
            <paramref name="typeName" />은 제네릭 형식을 나타내며 그 형식 인수 중 하나가 해당 형식 매개 변수에 대한 제약 조건을 충족하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2396">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="ef7f9-2397">
            <paramref name="typeName" />이 <see cref="T:System.TypedReference" /> 배열을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2397">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="ef7f9-2398">[Windows 스토어 앱용 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 또는 [이식 가능한 클래스 라이브러리](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)에서 대신 기본 클래스 예외 <see cref="T:System.IO.IOException" />을 catch합니다.</span>
              <span class="sxs-lookup">
                <span data-stu-id="ef7f9-2398">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="ef7f9-2399">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나를 찾았지만 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2399">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="ef7f9-2400">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나가 올바르지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2400">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="ef7f9-2401">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2401">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2402">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 어셈블리는 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2402">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="ef7f9-2403">가져올 형식에 대한 어셈블리로 한정된 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2403">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="ef7f9-2404">
            <see cref="P:System.Type.AssemblyQualifiedName" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2404">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2405">형식이 현재 실행 중인 어셈블리나 Mscorlib.dll에 있는 경우 네임스페이스로 한정된 형식 이름만 제공하면 됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2405">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="ef7f9-2406">형식을 찾을 수 없는 경우 예외를 throw하려면 <see langword="true" />이고, <see langword="false" />을 반환하려면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2406">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2407">또한 <see langword="false" />를 지정하면 다른 예외 조건 중 일부(모두 아님)가 표시되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2407">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="ef7f9-2408">예외 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2408">See the Exceptions section.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-2409">대/소문자를 구분하여 검색하고 형식이 없으면 예외를 throw할지를 지정하여, 지정된 이름의 <see cref="T:System.Type" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2409">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-2410">지정된 이름의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2410">The type with the specified name.</span>
          </span>
          <span data-ttu-id="ef7f9-2411">형식을 찾을 수 없는 경우에는 <paramref name="throwOnError" /> 매개 변수가 <see langword="null" />을 반환할지 아니면 예외를 throw할지 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2411">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="ef7f9-2412">경우에 따라서는 <paramref name="throwOnError" /> 값과 상관없이 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2412">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2413">예외 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2413">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-2414">사용할 수는 <xref:System.Type.GetType%2A> 를 얻는 메서드를 한 <xref:System.Type> 해당 정규화 된 네임 스페이스 이름을 알고 있으면 다른 어셈블리의 형식에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2414">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if the you know its namespace-qualified name.</span></span> <span data-ttu-id="ef7f9-2415"><xref:System.Type.GetType%2A> 에 지정 된 어셈블리의 로드를 일으킵니다 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2415"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="ef7f9-2416">사용 하 여 어셈블리를 로드할 수도 있습니다는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 사용 하 여는 <xref:System.Type.GetType%2A> 또는 <xref:System.Reflection.Assembly.GetTypes%2A> 의 메서드는 <xref:System.Reflection.Assembly> 가져올 클래스를 <xref:System.Type> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2416">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="ef7f9-2417">컴파일 타임에 프로그램에 알려진 어셈블리에는 형식이 있는 경우는 보다 효율적으로 사용할 `typeof` C#에서는 <xref:System.Type.GetType%2A> Visual basic에서 또는 `typeid` c + +에서입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2417">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="ef7f9-2418">`GetType` 디스크에서 로드 된 어셈블리에 대해서만 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2418">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="ef7f9-2419">호출 하는 경우 `GetType` 를 사용 하 여 정의 하는 동적 어셈블리에 정의 된 형식을 조회 하는 <xref:System.Reflection.Emit> 서비스 일관 되지 않은 동작이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2419">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="ef7f9-2420">동작 인지에 따라 동적 어셈블리 영구, 즉, 사용 하 여 만든는 `RunAndSave` 또는 `Save` 액세스의 모드는 <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2420">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="ef7f9-2421">동적 어셈블리 지속적이 고 전에 디스크에 기록 된 경우 `GetType` 은 호출 로더 디스크에 저장 된 어셈블리를 찾아서, 해당 어셈블리를 로드 하 고 해당 어셈블리에서 형식을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2421">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="ef7f9-2422">어셈블리 경우 디스크에 저장 하지 않은 경우 `GetType` 메서드가 호출 될 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2422">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="ef7f9-2423">`GetType` 임시 동적 어셈블리; 인식할 수 없음 따라서 호출 `GetType` 동적 어셈블리에서 임시 형식을 검색할 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2423">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="ef7f9-2424">사용 하도록 `GetType` 동적 모듈에서 구독 하는 <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> 이벤트 및 호출 `GetType` 저장 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2424">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="ef7f9-2425">그렇지 않으면 해당 어셈블리의 두 복사본이 메모리에 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2425">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="ef7f9-2426">`throwOnError` 때 일어나는 발견 되지 않으면 형식과 특정 한 다른 예외 조건을 표시 예외 섹션에 설명 된 대로 매개 변수를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2426">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="ef7f9-2427">값에 관계 없이 몇 가지 예외가 throw 된 `throwOnError`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2427">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="ef7f9-2428">예를 들어 형식을 찾았지만 로드할 수 없는 경우는 <xref:System.TypeLoadException> throw 되 경우에 `throwOnError` 은 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2428">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-2429">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2429">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-2430">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2430">Member Type</span></span>|<span data-ttu-id="ef7f9-2431">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2431">Static</span></span>|<span data-ttu-id="ef7f9-2432">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2432">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-2433">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2433">Constructor</span></span>|<span data-ttu-id="ef7f9-2434">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2434">No</span></span>|<span data-ttu-id="ef7f9-2435">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2435">No</span></span>|  
|<span data-ttu-id="ef7f9-2436">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2436">Field</span></span>|<span data-ttu-id="ef7f9-2437">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2437">No</span></span>|<span data-ttu-id="ef7f9-2438">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2438">Yes.</span></span> <span data-ttu-id="ef7f9-2439">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2439">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-2440">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2440">Event</span></span>|<span data-ttu-id="ef7f9-2441">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2441">Not applicable</span></span>|<span data-ttu-id="ef7f9-2442">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2442">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-2443">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2443">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-2444">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2444">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-2445">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2445">Method</span></span>|<span data-ttu-id="ef7f9-2446">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2446">No</span></span>|<span data-ttu-id="ef7f9-2447">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2447">Yes.</span></span> <span data-ttu-id="ef7f9-2448">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2448">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-2449">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2449">Nested Type</span></span>|<span data-ttu-id="ef7f9-2450">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2450">No</span></span>|<span data-ttu-id="ef7f9-2451">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2451">No</span></span>|  
|<span data-ttu-id="ef7f9-2452">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2452">Property</span></span>|<span data-ttu-id="ef7f9-2453">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2453">Not applicable</span></span>|<span data-ttu-id="ef7f9-2454">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2454">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-2455">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2455">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-2456">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2456">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-2457">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2457">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-2458">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2458">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-2459">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2459">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-2460">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2460">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-2461">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2461">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-2462">배열 또는 COM 형식을만 검색가 이미 사용 가능한 클래스의 테이블에 로드 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2462">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="ef7f9-2463">`typeName` 정규화 할 수 있습니다 형식 이름은 네임 스페이스 또는 사양을 포함 하는 어셈블리 이름을 정규화 된 어셈블리 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2463">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="ef7f9-2464"><xref:System.Type.AssemblyQualifiedName%2A>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2464">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="ef7f9-2465">경우 `typeName` 네임 스페이스만 어셈블리 이름을 포함 합니다.이 메서드를 호출 하는 개체의 어셈블리와 Mscorlib.dll이 순서 대로 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2465">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="ef7f9-2466">일부 또는 전체 어셈블리 이름으로 정규화 된 typeName 이면이 메서드는 지정된 된 어셈블리에 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2466">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="ef7f9-2467">어셈블리에 강력한 이름이 있으면는 완전 한 어셈블리 이름이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2467">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="ef7f9-2468"><xref:System.Type.AssemblyQualifiedName%2A> 속성 중첩된 형식, 어셈블리 이름 및 제네릭 인수를 포함 하 여 정규화 된 형식 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2468">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic arguments.</span></span> <span data-ttu-id="ef7f9-2469">공용 언어 런타임을 지 원하는 모든 컴파일러는 중첩 된 클래스의 단순한 이름을 내보내고 리플렉션에서 다음 규칙에 따라 쿼리 시 형식 표시 이름을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2469">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-2470">.NET Framework 버전 2.0의에서 프로세서 아키텍처 어셈블리 id에 추가 되 고 어셈블리 이름 문자열의 일부로 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2470">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="ef7f9-2471">예를 들어 "ProcessorArchitecture = msil"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2471">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="ef7f9-2472">그러나 반환 하는 문자열에 포함 되지 됩니다는 <xref:System.Type.AssemblyQualifiedName%2A> 호환성을 위해 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2472">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="ef7f9-2473">만들어 형식을 로드할 수도 있습니다는 <xref:System.Reflection.AssemblyName> 개체와의 적절 한 오버 로드에 전달 된 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2473">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="ef7f9-2474">그런 다음 사용할 수는 <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> 어셈블리에서 형식을 로드 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2474">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="ef7f9-2475"><xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2475">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="ef7f9-2476">구분 기호</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2476">Delimiter</span></span>|<span data-ttu-id="ef7f9-2477">의미</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2477">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="ef7f9-2478">백슬래시(\\)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2478">Backslash (\\)</span></span>|<span data-ttu-id="ef7f9-2479">이스케이프 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2479">Escape character.</span></span>|  
|<span data-ttu-id="ef7f9-2480">역따옴표 (')</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2480">Backtick (\`)</span></span>|<span data-ttu-id="ef7f9-2481">제네릭 형식의 이름 끝에 있는 형식 매개 변수 수를 나타내는 하나 이상의 10 진수 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2481">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="ef7f9-2482">대괄호 ()</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2482">Brackets ([])</span></span>|<span data-ttu-id="ef7f9-2483">생성된 된 제네릭 형식;에 대 한 제네릭 형식 인수 목록을 묶습니다. 형식 인수 목록 내에서 정규화 된 어셈블리 형식을 묶습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2483">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="ef7f9-2484">쉼표 ()</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2484">Comma (,)</span></span>|<span data-ttu-id="ef7f9-2485">어셈블리 이름을 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2485">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="ef7f9-2486">마침표 (입니다.)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2486">Period (.)</span></span>|<span data-ttu-id="ef7f9-2487">네임 스페이스 식별자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2487">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="ef7f9-2488">더하기 기호 (+)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2488">Plus sign (+)</span></span>|<span data-ttu-id="ef7f9-2489">중첩된 된 클래스 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2489">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="ef7f9-2490">예를 들어 클래스에 대 한 정규화 된 이름을 다음과 같이 표시 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2490">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="ef7f9-2491">네임 스페이스 TopNamespace.Sub+Namespace, 된 경우 문자열 앞에 이스케이프 문자는 더하기 기호 (+) 해야 합니다 (\\) 중첩 구분 기호로 해석 되지 않도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2491">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="ef7f9-2492">리플렉션 다음과 같이이 문자열을 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2492">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="ef7f9-2493">A "+ +"가 "\\+\\+", 및 "\\"가 "\\\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2493">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="ef7f9-2494">이 정규화 된 이름은 유지 되었다가 나중에 로드 하는 데 사용 된 <xref:System.Type>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2494">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="ef7f9-2495">찾아 로드 하는 <xref:System.Type>를 사용 하 여 <xref:System.Type.GetType%2A> 만 또는 어셈블리의 정규화 된 형식 이름으로 이름 형식을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2495">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="ef7f9-2496"><xref:System.Type.GetType%2A> 형식으로 이름을 찾을 것은 <xref:System.Type> 호출자의 어셈블리에서 찾은 다음 시스템 어셈블리에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2496"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="ef7f9-2497"><xref:System.Type.GetType%2A> 어셈블리와 정규화 된 형식 이름에 대 한 표시 됩니다는 <xref:System.Type> 모든 어셈블리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2497"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="ef7f9-2498">형식 이름에는 형식이 참조 형식, 포인터 형식 또는 배열 형식 인지와 같은 형식에 대 한 추가 정보를 나타내는 후행 문자가 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2498">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="ef7f9-2499">형식 이름 없이 이러한 후행 문자를 검색 하려면 사용 `t.GetElementType().ToString()`여기서 `t` 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2499">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="ef7f9-2500">공백은 어셈블리 이름 제외한 모든 형식 이름 구성 요소에 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2500">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="ef7f9-2501">어셈블리 이름에 ',' 구분 기호 앞에 공백이 관련이 있지만 ',' 구분 기호 뒤의 공백은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2501">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="ef7f9-2502">제네릭 형식의 이름은 억음 악센트 기호로 끝납니다 (\`) 제네릭 형식 인수 개수를 나타내는 숫자가 차례로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2502">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="ef7f9-2503">이 이름 관리의 목적은 제네릭 형식을 지원 형식 매개 변수의 수가 달라 하지만 같은 이름의 동일한 범위에서 발생 하는 컴파일러에서 허용 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2503">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="ef7f9-2504">리플렉션 형식 표시 이름을 반환 하는 예를 들어 `Tuple`1` and `튜플`2` 제네릭 메서드에서 `Tuple(Of T)` 및 `Tuple(Of T0, T1)` Visual basic에서 또는 `Tuple<T>` 및 튜플`\<T0, T1>` Visual C#입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2504">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="ef7f9-2505">제네릭 형식에 대 한 형식 인수 목록이 대괄호로 묶이며 형식 인수는 쉼표로 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2505">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="ef7f9-2506">예를 들어, 제네릭 <xref:System.Collections.Generic.Dictionary%602> 두 형식 매개 변수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2506">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="ef7f9-2507">A <xref:System.Collections.Generic.Dictionary%602> 의 `MyType` 유형의 키를 가진 <xref:System.String> 다음과 같이 표현 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2507">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="ef7f9-2508">형식 인수 목록 내에서 정규화 된 어셈블리 형식을 지정 하려면 정규화 된 어셈블리 형식을 대괄호로 묶습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2508">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="ef7f9-2509">그렇지 않으면 어셈블리의 정규화 된 이름의 각 부분을 구분 하는 쉼표로 구분 하는 추가 형식 인수로 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2509">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="ef7f9-2510">예를 들어 한 <xref:System.Collections.Generic.Dictionary%602> 의 `MyType` 유형의 키를 가진 MyAssembly.dll에서 <xref:System.String>, 다음과 같이 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2510">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-2511">형식 매개 변수 목록에 나타나는 경우에 정규화 된 어셈블리 형식은 대괄호로 묶을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2511">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="ef7f9-2512">형식 매개 변수 목록에서 정규화 형식에 대 한 어셈블리에서 검색 규칙은 정규화 제네릭이 아닌 형식에 대 한 규칙과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2512">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="ef7f9-2513">Null 허용 유형은 제네릭 형식의 특별 한 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2513">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="ef7f9-2514">예를 들어, null 허용 <xref:System.Int32> 문자열 "System.Nullable'1[System.Int32]"으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2514">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-2515">C#, c + + 및 Visual Basic 형식 연산자를 사용 하 여 nullable 형식을 얻을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2515">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="ef7f9-2516">예를 들어, null 허용 <xref:System.Boolean> 에서 형식을 반환 `typeof(Nullable<bool>)` C#에서는 여 `Nullable<Boolean>::typeid` 및 c + +에서는 `GetType(Nullable(Of Boolean))` Visual Basic의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2516">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="ef7f9-2517">다음 표에서 함께 사용 하면 구문을 보여 줍니다. `GetType` 다양 한 형식에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2517">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="ef7f9-2518">가져오려는</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2518">To Get</span></span>|<span data-ttu-id="ef7f9-2519">사용</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2519">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="ef7f9-2520">Null 허용 <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="ef7f9-2520">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="ef7f9-2521">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2521">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="ef7f9-2522">에 대 한 관리 되지 않는 포인터입니다. `MyType`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2522">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="ef7f9-2523">에 대 한 포인터에 대 한 관리 되지 않는 포인터입니다. `MyType`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2523">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="ef7f9-2524">관리 되는 포인터 또는 참조 `MyType`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2524">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="ef7f9-2525">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2525">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="ef7f9-2526">포인터와 달리 참조는 한 수준으로 제한됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2526">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="ef7f9-2527">부모 클래스와 중첩된 된 클래스</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2527">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="ef7f9-2528">0 인 1 차원 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2528">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="ef7f9-2529">알 수 없는 하한값 있는 1 차원 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2529">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="ef7f9-2530">N 차원 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2530">An n-dimensional array</span></span>|<span data-ttu-id="ef7f9-2531">총 n-1 번 대괄호 안에 쉼표 (,)입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2531">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="ef7f9-2532">예를 들어 `System.Object[,,]` 나타냅니다는 3 차원 `Object` 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2532">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="ef7f9-2533">2 차원 배열은 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2533">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="ef7f9-2534">알 수 없는 하 한을 가진 사각형 2 차원 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2534">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="ef7f9-2535">한 형식 인수가 있는 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2535">A generic type with one type argument</span></span>|<span data-ttu-id="ef7f9-2536">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2536">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="ef7f9-2537">두 형식 인수가 있는 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2537">A generic type with two type arguments</span></span>|<span data-ttu-id="ef7f9-2538">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2538">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="ef7f9-2539">두 개의 어셈블리로 한정 된 형식 인수로 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2539">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="ef7f9-2540">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2540">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="ef7f9-2541">어셈블리의 정규화 된 형식 인수가 지정 된 어셈블리의 정규화 된 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2541">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="ef7f9-2542">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2542">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="ef7f9-2543">두 개의 형식 인수로 제네릭 형식이 형식 인수는 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2543">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="ef7f9-2544">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2544">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-2545">다음 예제에서는의 유형을 검색 `System.Int32` 형식 개체를 사용 하 여 표시 하 고는 <xref:System.Type.FullName%2A> 속성 `System.Int32`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2545">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span> <span data-ttu-id="ef7f9-2546">형식 개체 존재 하지 않는 어셈블리를 가리키는 경우이 예제에서는 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2546">If a type object refers to an assembly that does not exist, this example throws an exception.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-2547">
            <paramref name="typeName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2547">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ef7f9-2548">클래스 이니셜라이저가 호출되고 예외가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2548">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="ef7f9-2549">
            <paramref name="throwOnError" />가 <see langword="true" />이고 형식을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2549">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="ef7f9-2550">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2550">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2551">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 포함된 탭 등의 잘못된 문자를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2551">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="ef7f9-2552">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2552">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2553">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 빈 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2553">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="ef7f9-2554">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2554">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2555">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 잘못된 크기를 가진 배열 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2555">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="ef7f9-2556">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2556">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2557">
            <paramref name="typeName" />이 <see cref="T:System.TypedReference" /> 배열을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2557">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-2558">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 잘못된 구문을 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2558">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          </span>
          <span data-ttu-id="ef7f9-2559">예를 들어 "MyType[,\*,]"입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2559">For example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="ef7f9-2560">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2560">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2561">
            <paramref name="typeName" />이 형식 인수 중 하나로 포인터 형식, <see langword="ByRef" /> 형식 또는 <see cref="T:System.Void" />를 가진 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2561">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-2562">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2562">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2563">
            <paramref name="typeName" />은 형식 인수의 개수가 잘못된 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2563">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-2564">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2564">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2565">
            <paramref name="typeName" />은 제네릭 형식을 나타내며 그 형식 인수 중 하나가 해당 형식 매개 변수에 대한 제약 조건을 충족하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2565">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="ef7f9-2566">
            <paramref name="throwOnError" />가 <see langword="true" />이고 어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2566">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="ef7f9-2567">[Windows 스토어 앱용 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) 또는 [이식 가능한 클래스 라이브러리](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)에서 대신 기본 클래스 예외 <see cref="T:System.IO.IOException" />을 catch합니다.</span>
              <span class="sxs-lookup">
                <span data-stu-id="ef7f9-2567">In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span>
              </span>
            </para>
          </block>
          <span data-ttu-id="ef7f9-2568">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나를 찾았지만 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2568">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="ef7f9-2569">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나가 올바르지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2569">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="ef7f9-2570">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2570">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2571">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 어셈블리는 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2571">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="ef7f9-2572">가져올 형식에 대한 어셈블리로 한정된 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2572">The assembly-qualified name of the type to get.</span>
          </span>
          <span data-ttu-id="ef7f9-2573">
            <see cref="P:System.Type.AssemblyQualifiedName" />을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2573">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2574">형식이 현재 실행 중인 어셈블리나 Mscorlib.dll에 있는 경우 네임스페이스로 한정된 형식 이름만 제공하면 됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2574">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="ef7f9-2575">형식을 찾을 수 없어 예외를 throw하는 경우 <see langword="true" />이고 <see langword="false" />를 반환하는 경우 <see langword="null" />입니다. <see langword="false" />를 지정하면 일부 다른 예외 조건을 표시하지 않지만 모두 그렇지는 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2575">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="ef7f9-2576">예외 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2576">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="ef7f9-2577">
            <c>typeName</c>에 대해 대/소문자를 구분하지 않는 검색을 수행하려면 <see langword="true" />이고, <c>typeName</c>에 대해 대/소문자를 구분하는 검색을 수행하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2577">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-2578">대/소문자를 구분하여 검색할지 여부와 형식이 없으면 예외를 throw할지 여부를 지정하여, 지정된 이름의 <see cref="T:System.Type" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2578">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-2579">지정된 이름의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2579">The type with the specified name.</span>
          </span>
          <span data-ttu-id="ef7f9-2580">형식을 찾을 수 없는 경우에는 <paramref name="throwOnError" /> 매개 변수가 <see langword="null" />을 반환할지 아니면 예외를 throw할지 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2580">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="ef7f9-2581">경우에 따라서는 <paramref name="throwOnError" /> 값과 상관없이 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2581">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2582">예외 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2582">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-2583">사용할 수는 <xref:System.Type.GetType%2A> 를 얻는 메서드를 한 <xref:System.Type> 해당 정규화 된 네임 스페이스 이름을 알고 있으면 다른 어셈블리의 형식에 대 한 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2583">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if the you know its namespace-qualified name.</span></span> <span data-ttu-id="ef7f9-2584"><xref:System.Type.GetType%2A> 에 지정 된 어셈블리의 로드를 일으킵니다 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2584"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="ef7f9-2585">사용 하 여 어셈블리를 로드할 수도 있습니다는 <xref:System.Reflection.Assembly.Load%2A> 메서드를 사용 하 여는 <xref:System.Type.GetType%2A> 또는 <xref:System.Reflection.Assembly.GetTypes%2A> 의 메서드는 <xref:System.Reflection.Assembly> 가져올 클래스를 <xref:System.Type> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2585">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="ef7f9-2586">컴파일 타임에 프로그램에 알려진 어셈블리에는 형식이 있는 경우는 보다 효율적으로 사용할 `typeof` C#에서는 <xref:System.Type.GetType%2A> Visual basic에서 또는 `typeid` c + +에서입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2586">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="ef7f9-2587">`GetType` 디스크에서 로드 된 어셈블리에 대해서만 작동 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2587">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="ef7f9-2588">호출 하는 경우 `GetType` 를 사용 하 여 정의 하는 동적 어셈블리에 정의 된 형식을 조회 하는 <xref:System.Reflection.Emit> 서비스 일관 되지 않은 동작이 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2588">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="ef7f9-2589">동작 인지에 따라 동적 어셈블리 영구, 즉, 사용 하 여 만든는 `RunAndSave` 또는 `Save` 액세스의 모드는 <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2589">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="ef7f9-2590">동적 어셈블리 지속적이 고 전에 디스크에 기록 된 경우 `GetType` 은 호출 로더 디스크에 저장 된 어셈블리를 찾아서, 해당 어셈블리를 로드 하 고 해당 어셈블리에서 형식을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2590">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="ef7f9-2591">어셈블리 경우 디스크에 저장 하지 않은 경우 `GetType` 메서드가 호출 될 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2591">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="ef7f9-2592">`GetType` 임시 동적 어셈블리; 인식할 수 없음 따라서 호출 `GetType` 동적 어셈블리에서 임시 형식을 검색할 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2592">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="ef7f9-2593">사용 하도록 `GetType` 동적 모듈에서 구독 하는 <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> 이벤트 및 호출 `GetType` 저장 하기 전에.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2593">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="ef7f9-2594">그렇지 않으면 해당 어셈블리의 두 복사본이 메모리에 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2594">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="ef7f9-2595">`throwOnError` 때 일어나는 발견 되지 않으면 형식과 특정 한 다른 예외 조건을 표시 예외 섹션에 설명 된 대로 매개 변수를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2595">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="ef7f9-2596">값에 관계 없이 몇 가지 예외가 throw 된 `throwOnError`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2596">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="ef7f9-2597">예를 들어 형식을 찾았지만 로드할 수 없는 경우는 <xref:System.TypeLoadException> throw 되 경우에 `throwOnError` 은 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2597">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-2598">다음 표에서 메서드에서 반환 되는 기본 클래스의 멤버는 `Get` 메서드는 형식에 반영 하는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2598">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="ef7f9-2599">멤버 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2599">Member Type</span></span>|<span data-ttu-id="ef7f9-2600">정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2600">Static</span></span>|<span data-ttu-id="ef7f9-2601">비정적</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2601">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="ef7f9-2602">생성자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2602">Constructor</span></span>|<span data-ttu-id="ef7f9-2603">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2603">No</span></span>|<span data-ttu-id="ef7f9-2604">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2604">No</span></span>|  
|<span data-ttu-id="ef7f9-2605">필드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2605">Field</span></span>|<span data-ttu-id="ef7f9-2606">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2606">No</span></span>|<span data-ttu-id="ef7f9-2607">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2607">Yes.</span></span> <span data-ttu-id="ef7f9-2608">필드는 항상 이름 및 서명 하 여 숨겨집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2608">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-2609">이벤트(event)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2609">Event</span></span>|<span data-ttu-id="ef7f9-2610">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2610">Not applicable</span></span>|<span data-ttu-id="ef7f9-2611">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2611">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-2612">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2612">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-2613">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2613">See note 2 below.</span></span>|  
|<span data-ttu-id="ef7f9-2614">메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2614">Method</span></span>|<span data-ttu-id="ef7f9-2615">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2615">No</span></span>|<span data-ttu-id="ef7f9-2616">예.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2616">Yes.</span></span> <span data-ttu-id="ef7f9-2617">(가상 및 비가상) 메서드 이름으로 숨기기 또는 이름 및 서명으로 숨기기 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2617">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="ef7f9-2618">중첩된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2618">Nested Type</span></span>|<span data-ttu-id="ef7f9-2619">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2619">No</span></span>|<span data-ttu-id="ef7f9-2620">아니요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2620">No</span></span>|  
|<span data-ttu-id="ef7f9-2621">속성</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2621">Property</span></span>|<span data-ttu-id="ef7f9-2622">적용할 수 없음</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2622">Not applicable</span></span>|<span data-ttu-id="ef7f9-2623">공용 형식 시스템 규칙의 상속 속성을 구현 하는 메서드의 구문과 같습니다 된다는 점입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2623">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="ef7f9-2624">리플렉션 속성 이름 및 서명으로 숨기기 구조체로 처리 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2624">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-2625">다음의 참고 2 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2625">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="ef7f9-2626">이름 및 서명으로 숨기기 모든 사용자 지정 한정자를 포함 하 여 서명 부분 반환 형식, 매개 변수 형식, 센티널, 및 관리 되지 않는 호출 규칙을 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2626">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="ef7f9-2627">이것은 이진 비교 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2627">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="ef7f9-2628">속성 및 이벤트는 리플렉션을 위해 이름 및 서명으로 숨기기는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2628">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="ef7f9-2629">기본 클래스에는 get 및 set 접근자를 모두 포함 하는 속성을 갖지만 파생된 클래스에 get 접근자만 하는 경우 파생된 클래스 속성 기본 클래스 속성이 숨겨지고 설정자 기본 클래스에 액세스할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2629">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="ef7f9-2630">사용자 지정 특성은 공용 형식 시스템의 일부가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2630">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="ef7f9-2631">배열 또는 COM 형식을만 검색가 이미 사용 가능한 클래스의 테이블에 로드 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2631">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="ef7f9-2632">`typeName` 정규화 할 수 있습니다 형식 이름은 네임 스페이스 또는 사양을 포함 하는 어셈블리 이름을 정규화 된 어셈블리 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2632">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="ef7f9-2633"><xref:System.Type.AssemblyQualifiedName%2A>을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2633">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="ef7f9-2634">경우 `typeName` 네임 스페이스만 어셈블리 이름을 포함 합니다.이 메서드를 호출 하는 개체의 어셈블리와 Mscorlib.dll이 순서 대로 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2634">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="ef7f9-2635">일부 또는 전체 어셈블리 이름으로 정규화 된 typeName 이면이 메서드는 지정된 된 어셈블리에 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2635">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="ef7f9-2636">어셈블리에 강력한 이름이 있으면는 완전 한 어셈블리 이름이 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2636">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="ef7f9-2637"><xref:System.Type.AssemblyQualifiedName%2A> 속성 중첩된 형식, 어셈블리 이름 및 형식 인수를 포함 하 여 정규화 된 형식 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2637">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and type arguments.</span></span> <span data-ttu-id="ef7f9-2638">공용 언어 런타임을 지 원하는 모든 컴파일러는 중첩 된 클래스의 단순한 이름을 내보내고 리플렉션에서 다음 규칙에 따라 쿼리 시 형식 표시 이름을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2638">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-2639">.NET Framework 버전 2.0의에서 프로세서 아키텍처 어셈블리 id에 추가 되 고 어셈블리 이름 문자열의 일부로 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2639">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="ef7f9-2640">예를 들어 "ProcessorArchitecture = msil"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2640">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="ef7f9-2641">그러나 반환 하는 문자열에 포함 되지 됩니다는 <xref:System.Type.AssemblyQualifiedName%2A> 호환성을 위해 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2641">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="ef7f9-2642">만들어 형식을 로드할 수도 있습니다는 <xref:System.Reflection.AssemblyName> 개체와의 적절 한 오버 로드에 전달 된 <xref:System.Reflection.Assembly.Load%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2642">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="ef7f9-2643">그런 다음 사용할 수는 <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> 어셈블리에서 형식을 로드 하는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2643">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="ef7f9-2644"><xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2644">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="ef7f9-2645">구분 기호</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2645">Delimiter</span></span>|<span data-ttu-id="ef7f9-2646">의미</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2646">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="ef7f9-2647">백슬래시(\\)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2647">Backslash (\\)</span></span>|<span data-ttu-id="ef7f9-2648">이스케이프 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2648">Escape character.</span></span>|  
|<span data-ttu-id="ef7f9-2649">역따옴표 (')</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2649">Backtick (\`)</span></span>|<span data-ttu-id="ef7f9-2650">제네릭 형식의 이름 끝에 있는 형식 매개 변수 수를 나타내는 하나 이상의 10 진수 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2650">Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="ef7f9-2651">대괄호 ()</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2651">Brackets ([])</span></span>|<span data-ttu-id="ef7f9-2652">생성된 된 제네릭 형식;에 대 한 제네릭 형식 인수 목록을 묶습니다. 형식 인수 목록 내에서 정규화 된 어셈블리 형식을 묶습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2652">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="ef7f9-2653">쉼표 ()</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2653">Comma (,)</span></span>|<span data-ttu-id="ef7f9-2654">어셈블리 이름을 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2654">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="ef7f9-2655">마침표 (입니다.)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2655">Period (.)</span></span>|<span data-ttu-id="ef7f9-2656">네임 스페이스 식별자를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2656">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="ef7f9-2657">더하기 기호 (+)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2657">Plus sign (+)</span></span>|<span data-ttu-id="ef7f9-2658">중첩된 된 클래스 앞에 옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2658">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="ef7f9-2659">예를 들어 클래스에 대 한 정규화 된 이름을 다음과 같이 표시 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2659">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="ef7f9-2660">네임 스페이스 TopNamespace.Sub+Namespace, 된 경우 문자열 앞에 이스케이프 문자는 더하기 기호 (+) 해야 합니다 (\\) 중첩 구분 기호로 해석 되지 않도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2660">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="ef7f9-2661">리플렉션 다음과 같이이 문자열을 내보냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2661">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="ef7f9-2662">A "+ +"가 "\\+\\+", 및 "\\"가 "\\\\"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2662">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="ef7f9-2663">이 정규화 된 이름은 유지 되었다가 나중에 로드 하는 데 사용 된 <xref:System.Type>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2663">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="ef7f9-2664">찾아 로드 하는 <xref:System.Type>를 사용 하 여 <xref:System.Type.GetType%2A> 만 또는 어셈블리의 정규화 된 형식 이름으로 이름 형식을 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2664">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="ef7f9-2665"><xref:System.Type.GetType%2A> 형식으로 이름을 찾을 것은 <xref:System.Type> 호출자의 어셈블리에서 찾은 다음 시스템 어셈블리에서 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2665"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="ef7f9-2666"><xref:System.Type.GetType%2A> 어셈블리와 정규화 된 형식 이름에 대 한 표시 됩니다는 <xref:System.Type> 모든 어셈블리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2666"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="ef7f9-2667">형식 이름에는 형식이 참조 형식, 포인터 형식 또는 배열 형식 인지와 같은 형식에 대 한 추가 정보를 나타내는 후행 문자가 포함 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2667">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="ef7f9-2668">형식 이름 없이 이러한 후행 문자를 검색 하려면 사용 `t.GetElementType().ToString()`여기서 `t` 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2668">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="ef7f9-2669">공백은 어셈블리 이름 제외한 모든 형식 이름 구성 요소에 연결 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2669">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="ef7f9-2670">어셈블리 이름에 ',' 구분 기호 앞에 공백이 관련이 있지만 ',' 구분 기호 뒤의 공백은 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2670">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="ef7f9-2671">제네릭 형식의 이름은 억음 악센트 기호로 끝납니다 (\`) 제네릭 형식 인수 개수를 나타내는 숫자가 차례로 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2671">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="ef7f9-2672">이 이름 관리의 목적은 제네릭 형식을 지원 형식 매개 변수의 수가 달라 하지만 같은 이름의 동일한 범위에서 발생 하는 컴파일러에서 허용 하는 것입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2672">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="ef7f9-2673">리플렉션 형식 표시 이름을 반환 하는 예를 들어 `Tuple`1` and `튜플`2` 제네릭 메서드에서 `Tuple(Of T)` 및 `Tuple(Of T0, T1)` Visual basic에서 또는 `Tuple<T>` 및 튜플`\<T0, T1>` Visual C#입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2673">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="ef7f9-2674">제네릭 형식에 대 한 형식 인수 목록이 대괄호로 묶이며 형식 인수는 쉼표로 구분 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2674">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="ef7f9-2675">예를 들어, 제네릭 <xref:System.Collections.Generic.Dictionary%602> 두 형식 매개 변수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2675">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="ef7f9-2676">A <xref:System.Collections.Generic.Dictionary%602> 의 `MyType` 유형의 키를 가진 <xref:System.String> 다음과 같이 표현 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2676">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="ef7f9-2677">형식 인수 목록 내에서 정규화 된 어셈블리 형식을 지정 하려면 정규화 된 어셈블리 형식을 대괄호로 묶습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2677">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="ef7f9-2678">그렇지 않으면 어셈블리의 정규화 된 이름의 각 부분을 구분 하는 쉼표로 구분 하는 추가 형식 인수로 해석 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2678">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="ef7f9-2679">예를 들어 한 <xref:System.Collections.Generic.Dictionary%602> 의 `MyType` 유형의 키를 가진 MyAssembly.dll에서 <xref:System.String>, 다음과 같이 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2679">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-2680">형식 매개 변수 목록에 나타나는 경우에 정규화 된 어셈블리 형식은 대괄호로 묶을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2680">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="ef7f9-2681">형식 매개 변수 목록에서 정규화 형식에 대 한 어셈블리에서 검색 규칙은 정규화 제네릭이 아닌 형식에 대 한 규칙과 동일 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2681">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="ef7f9-2682">Null 허용 유형은 제네릭 형식의 특별 한 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2682">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="ef7f9-2683">예를 들어, null 허용 <xref:System.Int32> 문자열 "System.Nullable'1[System.Int32]"으로 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2683">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-2684">C#, c + + 및 Visual Basic 형식 연산자를 사용 하 여 nullable 형식을 얻을 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2684">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="ef7f9-2685">예를 들어, null 허용 <xref:System.Boolean> 에서 형식을 반환 `typeof(Nullable<bool>)` C#에서는 여 `Nullable<Boolean>::typeid` 및 c + +에서는 `GetType(Nullable(Of Boolean))` Visual Basic의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2685">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="ef7f9-2686">다음 표에서 함께 사용 하면 구문을 보여 줍니다. `GetType` 다양 한 형식에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2686">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="ef7f9-2687">가져오려는</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2687">To Get</span></span>|<span data-ttu-id="ef7f9-2688">사용</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2688">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="ef7f9-2689">Null 허용 <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="ef7f9-2689">A nullable <xref:System.Int32></span></span>|<span data-ttu-id="ef7f9-2690">`Type.GetType("System.Nullable`1[System.Int32]")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2690">`Type.GetType("System.Nullable`1[System.Int32]")\`</span></span>|  
|<span data-ttu-id="ef7f9-2691">에 대 한 관리 되지 않는 포인터입니다. `MyType`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2691">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="ef7f9-2692">에 대 한 포인터에 대 한 관리 되지 않는 포인터입니다. `MyType`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2692">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="ef7f9-2693">관리 되는 포인터 또는 참조 `MyType`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2693">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="ef7f9-2694">`Type.GetType("MyType&")`.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2694">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="ef7f9-2695">포인터와 달리 참조는 한 수준으로 제한됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2695">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="ef7f9-2696">부모 클래스와 중첩된 된 클래스</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2696">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="ef7f9-2697">0 인 1 차원 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2697">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="ef7f9-2698">알 수 없는 하한값 있는 1 차원 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2698">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="ef7f9-2699">N 차원 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2699">An n-dimensional array</span></span>|<span data-ttu-id="ef7f9-2700">총 n-1 번 대괄호 안에 쉼표 (,)입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2700">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="ef7f9-2701">예를 들어 `System.Object[,,]` 나타냅니다는 3 차원 `Object` 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2701">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="ef7f9-2702">2 차원 배열은 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2702">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="ef7f9-2703">알 수 없는 하 한을 가진 사각형 2 차원 배열</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2703">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="ef7f9-2704">한 형식 인수가 있는 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2704">A generic type with one type argument</span></span>|<span data-ttu-id="ef7f9-2705">`Type.GetType("MyGenericType`1[MyType]")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2705">`Type.GetType("MyGenericType`1[MyType]")\`</span></span>|  
|<span data-ttu-id="ef7f9-2706">두 형식 인수가 있는 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2706">A generic type with two type arguments</span></span>|<span data-ttu-id="ef7f9-2707">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2707">`Type.GetType("MyGenericType`2[MyType,AnotherType]")\`</span></span>|  
|<span data-ttu-id="ef7f9-2708">두 개의 어셈블리로 한정 된 형식 인수로 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2708">A generic type with two assembly-qualified type arguments</span></span>|<span data-ttu-id="ef7f9-2709">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2709">`Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")\`</span></span>|  
|<span data-ttu-id="ef7f9-2710">어셈블리의 정규화 된 형식 인수가 지정 된 어셈블리의 정규화 된 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2710">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="ef7f9-2711">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2711">`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")\`</span></span>|  
|<span data-ttu-id="ef7f9-2712">두 개의 형식 인수로 제네릭 형식이 형식 인수는 제네릭 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2712">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="ef7f9-2713">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2713">`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")`</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-2714">
            <paramref name="typeName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2714">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ef7f9-2715">클래스 이니셜라이저가 호출되고 예외가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2715">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="ef7f9-2716">
            <paramref name="throwOnError" />가 <see langword="true" />이고 형식을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2716">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="ef7f9-2717">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2717">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2718">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 포함된 탭 등의 잘못된 문자를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2718">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="ef7f9-2719">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2719">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2720">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 빈 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2720">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="ef7f9-2721">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2721">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2722">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 잘못된 크기를 가진 배열 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2722">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="ef7f9-2723">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2723">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2724">
            <paramref name="typeName" />이 <see cref="T:System.TypedReference" /> 배열을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2724">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-2725">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 잘못된 구문을 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2725">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span>
          </span>
          <span data-ttu-id="ef7f9-2726">예를 들어 "MyType[,\*,]"입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2726">For example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="ef7f9-2727">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2727">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2728">
            <paramref name="typeName" />이 형식 인수 중 하나로 포인터 형식, <see langword="ByRef" /> 형식 또는 <see cref="T:System.Void" />를 가진 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2728">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-2729">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2729">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2730">
            <paramref name="typeName" />은 형식 인수의 개수가 잘못된 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2730">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-2731">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2731">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2732">
            <paramref name="typeName" />은 제네릭 형식을 나타내며 그 형식 인수 중 하나가 해당 형식 매개 변수에 대한 제약 조건을 충족하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2732">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="ef7f9-2733">
            <paramref name="throwOnError" />가 <see langword="true" />이고 어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2733">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="ef7f9-2734">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나를 찾았지만 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2734">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="ef7f9-2735">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나가 올바르지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2735">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="ef7f9-2736">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2736">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2737">버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 어셈블리는 이후 버전으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2737">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type)) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="ef7f9-2738">가져올 형식의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2738">The name of the type to get.</span>
          </span>
          <span data-ttu-id="ef7f9-2739">
            <c>typeResolver</c> 매개 변수가 제공되는 경우 형식 이름은 <c>typeResolver</c>에서 확인 가능한 임의의 문자열일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2739">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="ef7f9-2740">
            <c>assemblyResolver</c> 매개 변수가 제공되거나 표준 형식 확인이 사용되는 경우 형식이 현재 실행 중인 어셈블리나 Mscorlib.dll에 있지 않으면 <c>typeName</c>은 어셈블리로 한정된 이름이어야 합니다(<see cref="P:System.Type.AssemblyQualifiedName" /> 참조). 형식이 현재 실행 중인 어셈블리나 Mscorlib.dll에 있는 경우에는 네임스페이스로 한정된 형식 이름을 제공해도 충분합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2740">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="ef7f9-2741">
            <c>typeName</c>에 지정된 어셈블리를 찾고 반환하는 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2741">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="ef7f9-2742">어셈블리 이름이 <c>assemblyResolver</c>에 <see cref="T:System.Reflection.AssemblyName" /> 개체로 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2742">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="ef7f9-2743">
            <c>typeName</c>에 어셈블리의 이름이 포함되어 있지 않으면 <c>assemblyResolver</c>가 호출되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2743">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="ef7f9-2744">
            <c>assemblyResolver</c>가 제공되지 않으면 표준 어셈블리 확인이 수행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2744">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="ef7f9-2745">주의   알 수 없거나 신뢰할 수 없는 호출자의 메서드는 전달하지 마십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2745">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="ef7f9-2746">그렇게 하면 권한이 상승되어 악성 코드가 실행될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2746">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="ef7f9-2747">제공하는 메서드 또는 친숙한 메서드만 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2747">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="ef7f9-2748">
            <c>assemblyResolver</c> 또는 표준 어셈블리 확인에서 반환된 어셈블리에서 <c>typeName</c>에 지정된 형식을 찾고 반환하는 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2748">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="ef7f9-2749">어셈블리가 제공되지 않는 경우 <c>typeResolver</c> 메서드에서 어셈블리를 제공할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2749">If no assembly is provided, the <c>typeResolver</c> method can provide one.</span>
          </span>
          <span data-ttu-id="ef7f9-2750">이 메서드는 또한 대/소문자를 구분하지 않는 검색을 수행할지를 지정하는 매개 변수를 사용하며, 해당 매개 변수에 <see langword="false" />가 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2750">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="ef7f9-2751">주의   알 수 없거나 신뢰할 수 없는 호출자의 메서드는 전달하지 마십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2751">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-2752">어셈블리 및 형식을 확인할 수 있는 사용자 지정 메서드를 선택적으로 제공하여, 지정된 이름의 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2752">Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-2753">지정된 이름을 가진 형식이거나, 형식이 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2753">The type with the specified name, or <see langword="null" /> if the type is not found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-2754">이 방법에 대 한 정보에 대 한 사용 시나리오는 `assemblyResolver` 및 `typeResolver` 에서 매개 변수를 찾을 수 있습니다는 <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2754">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-2755">경우 `typeName` 찾을 수 없는 경우에 대 한 호출에서 <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> 메서드 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2755">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> method returns `null`.</span></span> <span data-ttu-id="ef7f9-2756">예외를 throw 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2756">It does not throw an exception.</span></span> <span data-ttu-id="ef7f9-2757">제어 하려면 여부 예외가, 호출의 오버 로드는 <xref:System.Type.GetType%2A> 변수가 있는 메서드에 `throwOnError` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2757">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="ef7f9-2758">이이 메서드 오버 로드는 <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> 메서드 오버 로드 하 고 지정 하 `false` 에 대 한는 `throwOnError` 및 `ignoreCase` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2758">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `throwOnError` and `ignoreCase` parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-2759">
            <paramref name="typeName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2759">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ef7f9-2760">클래스 이니셜라이저가 호출되고 예외를 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2760">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-2761">
            <paramref name="typeName" />이 형식 이름과 어셈블리 이름(예: 단순 형식 이름에 이스케이프되지 않은 특수 문자를 포함하는 경우)에 구문 분석할 때 오류가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2761">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="ef7f9-2762">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2762">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2763">
            <paramref name="typeName" />이 형식 인수 중 하나로 포인터 형식, <see langword="ByRef" /> 형식 또는 <see cref="T:System.Void" />를 가진 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2763">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-2764">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2764">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2765">
            <paramref name="typeName" />은 형식 인수의 개수가 잘못된 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2765">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-2766">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2766">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2767">
            <paramref name="typeName" />은 제네릭 형식을 나타내며 그 형식 인수 중 하나가 해당 형식 매개 변수에 대한 제약 조건을 충족하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2767">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="ef7f9-2768">
            <paramref name="typeName" />이 <see cref="T:System.TypedReference" /> 배열을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2768">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="ef7f9-2769">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나를 찾았지만 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2769">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
          <span data-ttu-id="ef7f9-2770">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2770">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2771">
            <paramref name="typeName" />에 잘못된 어셈블리 이름이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2771">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="ef7f9-2772">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2772">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2773">
            <paramref name="typeName" />은 형식 이름이 없는 유효한 어셈블리 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2773">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="ef7f9-2774">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나가 올바르지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2774">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="ef7f9-2775">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2775">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2776">어셈블리가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2776">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="ef7f9-2777">가져올 형식의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2777">The name of the type to get.</span>
          </span>
          <span data-ttu-id="ef7f9-2778">
            <c>typeResolver</c> 매개 변수가 제공되는 경우 형식 이름은 <c>typeResolver</c>에서 확인 가능한 임의의 문자열일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2778">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="ef7f9-2779">
            <c>assemblyResolver</c> 매개 변수가 제공되거나 표준 형식 확인이 사용되는 경우 형식이 현재 실행 중인 어셈블리나 Mscorlib.dll에 있지 않으면 <c>typeName</c>은 어셈블리로 한정된 이름이어야 합니다(<see cref="P:System.Type.AssemblyQualifiedName" /> 참조). 형식이 현재 실행 중인 어셈블리나 Mscorlib.dll에 있는 경우에는 네임스페이스로 한정된 형식 이름을 제공해도 충분합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2779">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="ef7f9-2780">
            <c>typeName</c>에 지정된 어셈블리를 찾고 반환하는 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2780">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="ef7f9-2781">어셈블리 이름이 <c>assemblyResolver</c>에 <see cref="T:System.Reflection.AssemblyName" /> 개체로 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2781">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="ef7f9-2782">
            <c>typeName</c>에 어셈블리의 이름이 포함되어 있지 않으면 <c>assemblyResolver</c>가 호출되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2782">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="ef7f9-2783">
            <c>assemblyResolver</c>가 제공되지 않으면 표준 어셈블리 확인이 수행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2783">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="ef7f9-2784">주의   알 수 없거나 신뢰할 수 없는 호출자의 메서드는 전달하지 마십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2784">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="ef7f9-2785">그렇게 하면 권한이 상승되어 악성 코드가 실행될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2785">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="ef7f9-2786">제공하는 메서드 또는 친숙한 메서드만 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2786">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="ef7f9-2787">
            <c>assemblyResolver</c> 또는 표준 어셈블리 확인에서 반환된 어셈블리에서 <c>typeName</c>에 지정된 형식을 찾고 반환하는 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2787">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="ef7f9-2788">어셈블리가 제공되지 않는 경우 이 메서드에서 어셈블리를 제공할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2788">If no assembly is provided, the method can provide one.</span>
          </span>
          <span data-ttu-id="ef7f9-2789">이 메서드는 또한 대/소문자를 구분하지 않는 검색을 수행할지를 지정하는 매개 변수를 사용하며, 해당 매개 변수에 <see langword="false" />가 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2789">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="ef7f9-2790">주의   알 수 없거나 신뢰할 수 없는 호출자의 메서드는 전달하지 마십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2790">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="ef7f9-2791">형식을 찾을 수 없는 경우 예외를 throw하려면 <see langword="true" />이고, <see langword="false" />을 반환하려면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2791">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2792">또한 <see langword="false" />를 지정하면 다른 예외 조건 중 일부(모두 아님)가 표시되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2792">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="ef7f9-2793">예외 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2793">See the Exceptions section.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-2794">형식을 찾을 수 없는 경우 예외를 throw할지를 지정하고 어셈블리 및 형식을 확인할 수 있는 사용자 지정 메서드를 선택적으로 제공하여, 지정된 이름의 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2794">Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-2795">지정된 이름의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2795">The type with the specified name.</span>
          </span>
          <span data-ttu-id="ef7f9-2796">형식을 찾을 수 없는 경우에는 <paramref name="throwOnError" /> 매개 변수가 <see langword="null" />을 반환할지 아니면 예외를 throw할지 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2796">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="ef7f9-2797">경우에 따라서는 <paramref name="throwOnError" /> 값과 상관없이 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2797">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2798">예외 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2798">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-2799">이 방법에 대 한 정보에 대 한 사용 시나리오는 `assemblyResolver` 및 `typeResolver` 에서 매개 변수를 찾을 수 있습니다는 <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2799">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="ef7f9-2800">이이 메서드 오버 로드는 <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> 메서드 오버 로드 하 고 지정 하 `false` 에 대 한는 `ignoreCase` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2800">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `ignoreCase` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-2801">
            <paramref name="typeName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2801">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ef7f9-2802">클래스 이니셜라이저가 호출되고 예외가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2802">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="ef7f9-2803">
            <paramref name="throwOnError" />가 <see langword="true" />이고 형식을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2803">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="ef7f9-2804">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2804">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2805">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 포함된 탭 등의 잘못된 문자를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2805">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="ef7f9-2806">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2806">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2807">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 빈 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2807">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="ef7f9-2808">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2808">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2809">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 잘못된 크기를 가진 배열 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2809">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="ef7f9-2810">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2810">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2811">
            <paramref name="typeName" />이 <see cref="T:System.TypedReference" /> 배열을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2811">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-2812">
            <paramref name="typeName" />이 형식 이름과 어셈블리 이름(예: 단순 형식 이름에 이스케이프되지 않은 특수 문자를 포함하는 경우)에 구문 분석할 때 오류가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2812">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="ef7f9-2813">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2813">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2814">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />에 잘못된 구문이 포함된 경우(예: "MyType[,\*,]").</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2814">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          </span>
          <span data-ttu-id="ef7f9-2815">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2815">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2816">
            <paramref name="typeName" />이 형식 인수 중 하나로 포인터 형식, <see langword="ByRef" /> 형식 또는 <see cref="T:System.Void" />를 가진 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2816">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-2817">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2817">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2818">
            <paramref name="typeName" />은 형식 인수의 개수가 잘못된 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2818">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-2819">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2819">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2820">
            <paramref name="typeName" />은 제네릭 형식을 나타내며 그 형식 인수 중 하나가 해당 형식 매개 변수에 대한 제약 조건을 충족하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2820">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="ef7f9-2821">
            <paramref name="throwOnError" />가 <see langword="true" />이고 어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2821">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
          <span data-ttu-id="ef7f9-2822">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2822">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2823">
            <paramref name="typeName" />에 잘못된 어셈블리 이름이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2823">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="ef7f9-2824">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2824">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2825">
            <paramref name="typeName" />은 형식 이름이 없는 유효한 어셈블리 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2825">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="ef7f9-2826">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나를 찾았지만 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2826">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="ef7f9-2827">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나가 올바르지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2827">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="ef7f9-2828">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2828">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2829">어셈블리가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2829">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="ef7f9-2830">가져올 형식의 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2830">The name of the type to get.</span>
          </span>
          <span data-ttu-id="ef7f9-2831">
            <c>typeResolver</c> 매개 변수가 제공되는 경우 형식 이름은 <c>typeResolver</c>에서 확인 가능한 임의의 문자열일 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2831">If the <c>typeResolver</c> parameter is provided, the type name can be any string that <c>typeResolver</c> is capable of resolving.</span>
          </span>
          <span data-ttu-id="ef7f9-2832">
            <c>assemblyResolver</c> 매개 변수가 제공되거나 표준 형식 확인이 사용되는 경우 형식이 현재 실행 중인 어셈블리나 Mscorlib.dll에 있지 않으면 <c>typeName</c>은 어셈블리로 한정된 이름이어야 합니다(<see cref="P:System.Type.AssemblyQualifiedName" /> 참조). 형식이 현재 실행 중인 어셈블리나 Mscorlib.dll에 있는 경우에는 네임스페이스로 한정된 형식 이름을 제공해도 충분합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2832">If the <c>assemblyResolver</c> parameter is provided or if standard type resolution is used, <c>typeName</c> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span>
          </span>
        </param>
        <param name="assemblyResolver">
          <span data-ttu-id="ef7f9-2833">
            <c>typeName</c>에 지정된 어셈블리를 찾고 반환하는 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2833">A method that locates and returns the assembly that is specified in <c>typeName</c>.</span>
          </span>
          <span data-ttu-id="ef7f9-2834">어셈블리 이름이 <c>assemblyResolver</c>에 <see cref="T:System.Reflection.AssemblyName" /> 개체로 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2834">The assembly name is passed to <c>assemblyResolver</c> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span>
          </span>
          <span data-ttu-id="ef7f9-2835">
            <c>typeName</c>에 어셈블리의 이름이 포함되어 있지 않으면 <c>assemblyResolver</c>가 호출되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2835">If <c>typeName</c> does not contain the name of an assembly, <c>assemblyResolver</c> is not called.</span>
          </span>
          <span data-ttu-id="ef7f9-2836">
            <c>assemblyResolver</c>가 제공되지 않으면 표준 어셈블리 확인이 수행됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2836">If <c>assemblyResolver</c> is not supplied, standard assembly resolution is performed.</span>
          </span>
          <span data-ttu-id="ef7f9-2837">주의   알 수 없거나 신뢰할 수 없는 호출자의 메서드는 전달하지 마십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2837">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
          <span data-ttu-id="ef7f9-2838">그렇게 하면 권한이 상승되어 악성 코드가 실행될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2838">Doing so could result in elevation of privilege for malicious code.</span>
          </span>
          <span data-ttu-id="ef7f9-2839">제공하는 메서드 또는 친숙한 메서드만 사용합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2839">Use only methods that you provide or that you are familiar with.</span>
          </span>
        </param>
        <param name="typeResolver">
          <span data-ttu-id="ef7f9-2840">
            <c>assemblyResolver</c> 또는 표준 어셈블리 확인에서 반환된 어셈블리에서 <c>typeName</c>에 지정된 형식을 찾고 반환하는 메서드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2840">A method that locates and returns the type that is specified by <c>typeName</c> from the assembly that is returned by <c>assemblyResolver</c> or by standard assembly resolution.</span>
          </span>
          <span data-ttu-id="ef7f9-2841">어셈블리가 제공되지 않는 경우 이 메서드에서 어셈블리를 제공할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2841">If no assembly is provided, the method can provide one.</span>
          </span>
          <span data-ttu-id="ef7f9-2842">이 메서드는 또한 대/소문자를 구분하지 않는 검색을 수행할지를 지정하는 매개 변수를 사용하며, 해당 매개 변수에 <c>ignoreCase</c>의 값이 전달됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2842">The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of <c>ignoreCase</c> is passed to that parameter.</span>
          </span>
          <span data-ttu-id="ef7f9-2843">주의   알 수 없거나 신뢰할 수 없는 호출자의 메서드는 전달하지 마십시오.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2843">Caution   Do not pass methods from unknown or untrusted callers.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="ef7f9-2844">형식을 찾을 수 없는 경우 예외를 throw하려면 <see langword="true" />이고, <see langword="false" />을 반환하려면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2844">
              <see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2845">또한 <see langword="false" />를 지정하면 다른 예외 조건 중 일부(모두 아님)가 표시되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2845">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="ef7f9-2846">예외 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2846">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="ef7f9-2847">
            <c>typeName</c>에 대해 대/소문자를 구분하지 않는 검색을 수행하려면 <see langword="true" />이고, <c>typeName</c>에 대해 대/소문자를 구분하는 검색을 수행하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2847">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>, <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-2848">형식을 찾을 수 없는 경우 대/소문자를 구분하는 검색을 수행할지 여부 및 예외를 throw할지를 지정하고 어셈블리 및 형식을 확인할 수 있는 사용자 지정 메서드를 선택적으로 제공하여, 지정된 이름의 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2848">Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-2849">지정된 이름의 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2849">The type with the specified name.</span>
          </span>
          <span data-ttu-id="ef7f9-2850">형식을 찾을 수 없는 경우에는 <paramref name="throwOnError" /> 매개 변수가 <see langword="null" />을 반환할지 아니면 예외를 throw할지 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2850">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="ef7f9-2851">경우에 따라서는 <paramref name="throwOnError" /> 값과 상관없이 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2851">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span>
          </span>
          <span data-ttu-id="ef7f9-2852">예외 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2852">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-2853">이 메서드 오버 로드 및 연결 된 오버 로드를 사용 하 여 (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> 및 <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>)의 기본 구현을 바꿀는 <xref:System.Type.GetType%2A> 보다 유연한 구현으로 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2853">Use this method overload and its associated overloads (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> and <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) to replace the default implementation of the <xref:System.Type.GetType%2A> method with more flexible implementations.</span></span> <span data-ttu-id="ef7f9-2854">형식 이름 및 포함 된 어셈블리의 이름을 확인 하는 사용자 고유의 메서드를 제공 하 여 다음을 수행할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2854">By providing your own methods that resolve type names and the names of the assemblies that contain them, you can do the following:</span></span>  
  
-   <span data-ttu-id="ef7f9-2855">형식에서 로드 되는 어셈블리의 버전을 제어 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2855">Control which version of an assembly a type is loaded from.</span></span>  
  
-   <span data-ttu-id="ef7f9-2856">찾을 어셈블리 이름을 포함 하지 않는 형식 이름에 대해 다른 위치를 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2856">Provide another place to look for a type name that does not include an assembly name.</span></span>  
  
-   <span data-ttu-id="ef7f9-2857">부분 어셈블리 이름을 사용 하 여 어셈블리를 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2857">Load assemblies using partial assembly names.</span></span>  
  
-   <span data-ttu-id="ef7f9-2858">서브 클래스를 반환 <xref:System.Type?displayProperty=nameWithType> 공용 언어 런타임 (CLR)에서 만들어지지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2858">Return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the common language runtime (CLR).</span></span>  
  
 <span data-ttu-id="ef7f9-2859">예를 들어 버전 독립적 serialization에이 메서드를 사용 하면 "가장 적합 한" 어셈블리에 대 한 이름의 일부를 사용 하 여 검색할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2859">For example, in version-tolerant serialization this method enables you to search for a "best fit" assembly by using a partial name.</span></span> <span data-ttu-id="ef7f9-2860">다른 오버 로드는 <xref:System.Type.GetType%2A> 방법은 버전 번호를 포함 하는 정규화 된 어셈블리 형식 이름을 필요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2860">Other overloads of the <xref:System.Type.GetType%2A> method require an assembly-qualified type name, which includes the version number.</span></span>  
  
 <span data-ttu-id="ef7f9-2861">형식 시스템의 다른 구현과의 서브 클래스를 반환 해야 할 수 <xref:System.Type?displayProperty=nameWithType> CLR에서 만들어지지 않은; 유형의 모든의 다른 오버 로드에서 반환 되는 <xref:System.Type.GetType%2A> 메서드는 런타임 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2861">Alternate implementations of the type system may need to return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the CLR; all types that are returned by other overloads of the <xref:System.Type.GetType%2A> method are runtime types.</span></span>  
  
<a name="usage_notes"></a>   
## <a name="usage-notes"></a><span data-ttu-id="ef7f9-2862">사용 정보</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2862">Usage Notes</span></span>  
 <span data-ttu-id="ef7f9-2863">이 메서드 오버 로드 및 연결 된 오버 로드의 구문 분석 `typeName` 는 어셈블리의 이름 및 형식 이름으로 한 다음 이름을 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2863">This method overload and its associated overloads parse `typeName` into the name of a type and the name of an assembly, and then resolve the names.</span></span> <span data-ttu-id="ef7f9-2864">어셈블리 이름 확인 어셈블리의 컨텍스트에서 형식 이름을 확인 해야 하기 때문에 형식 이름 확인 하기 전에 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2864">Resolution of the assembly name occurs before resolution of the type name, because a type name must be resolved in the context of an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-2865">정규화 된 어셈블리 형식 이름에 대 한 개념을 잘 모르는 경우 참조는 <xref:System.Type.AssemblyQualifiedName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2865">If you are unfamiliar with the concept of assembly-qualified type names, see the <xref:System.Type.AssemblyQualifiedName%2A> property.</span></span>  
  
 <span data-ttu-id="ef7f9-2866">경우 `typeName` 이름이 아닙니다. 정규화 된 어셈블리, 어셈블리 확인을 건너뜁니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2866">If `typeName` is not an assembly-qualified name, assembly resolution is skipped.</span></span> <span data-ttu-id="ef7f9-2867">Mscorlib.dll 또는 현재 실행 중인 어셈블리의 컨텍스트에서 정규화 되지 않은 형식 이름을 확인할 수 있습니다 또는에서 어셈블리를 선택적으로 제공할 수는 `typeResolver` 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2867">Unqualified type names can be resolved in the context of Mscorlib.dll or the currently executing assembly, or you can optionally provide an assembly in the `typeResolver` parameter.</span></span> <span data-ttu-id="ef7f9-2868">포함 하거나 다른 종류의 이름 확인에 테이블로 표시 된 어셈블리 이름을 생략 효과 [혼합 된 이름 확인](#mixed_name_resolution) 섹션.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2868">The effects of including or omitting the assembly name for different kinds of name resolution are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section.</span></span>  
  
 <span data-ttu-id="ef7f9-2869">일반적인 사용법 정보:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2869">General usage notes:</span></span>  
  
-   <span data-ttu-id="ef7f9-2870">메서드를 통과 하지 못한 `assemblyResolver` 또는 `typeResolver` 알 수 없거나 신뢰할 수 없는 호출자에서 온 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2870">Do not pass methods to `assemblyResolver` or `typeResolver` if they come from unknown or untrusted callers.</span></span> <span data-ttu-id="ef7f9-2871">제공하는 메서드 또는 친숙한 메서드만 사용합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2871">Use only methods that you provide or that you are familiar with.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="ef7f9-2872">알 수 없거나 신뢰할 수 없는 호출자의 메서드를 사용 하 여 악성 코드에 대 한 권한 상승 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2872">Using methods from unknown or untrusted callers could result in elevation of privilege for malicious code.</span></span>  
  
-   <span data-ttu-id="ef7f9-2873">생략 하면는 `assemblyResolver` 및/또는 `typeResolver` 값, 매개 변수는 `throwOnError` 매개 변수는 기본 확인을 수행 하는 메서드에 전달 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2873">If you omit the `assemblyResolver` and/or `typeResolver` parameters, the value of the `throwOnError` parameter is passed to the methods that perform the default resolution.</span></span>  
  
-   <span data-ttu-id="ef7f9-2874">경우 `throwOnError` 은 `true`,이 메서드에서 throw 한 <xref:System.TypeLoadException> 때 `typeResolver` 반환 `null`, 및 <xref:System.IO.FileNotFoundException> 때 `assemblyResolver` 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2874">If `throwOnError` is `true`, this method throws a <xref:System.TypeLoadException> when `typeResolver` returns `null`, and a <xref:System.IO.FileNotFoundException> when `assemblyResolver` returns `null`.</span></span>  
  
-   <span data-ttu-id="ef7f9-2875">이 메서드에 의해 throw 된 예외를 catch 하지 않습니다 `assemblyResolver` 및 `typeResolver`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2875">This method does not catch exceptions thrown by `assemblyResolver` and `typeResolver`.</span></span> <span data-ttu-id="ef7f9-2876">확인자 메서드에 의해 throw 되는 모든 예외에 책임이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2876">You are responsible for any exceptions that are thrown by the resolver methods.</span></span>  
  
<a name="resolving_assemblies"></a>   
### <a name="resolving-assemblies"></a><span data-ttu-id="ef7f9-2877">어셈블리 확인</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2877">Resolving Assemblies</span></span>  
 <span data-ttu-id="ef7f9-2878">`assemblyResolver` 메서드 수신는 <xref:System.Reflection.AssemblyName> 개체에 포함 된 어셈블리 이름 문자열을 구문 분석 하 여 생성 되는 `typeName`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2878">The `assemblyResolver` method receives an <xref:System.Reflection.AssemblyName> object, which is produced by parsing the string assembly name that is included in `typeName`.</span></span> <span data-ttu-id="ef7f9-2879">경우 `typeName` 는 어셈블리 이름을 포함 하지 않는 `assemblyResolver` 호출 되지 않습니다 및 `null` 에 전달 `typeResolver`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2879">If `typeName` does not contain an assembly name, `assemblyResolver` is not called and `null` is passed to `typeResolver`.</span></span>  
  
 <span data-ttu-id="ef7f9-2880">경우 `assemblyResolver` 가 되지 않으면 표준 어셈블리를 제공 된 조사는 어셈블리를 찾는 데 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2880">If `assemblyResolver` is not supplied, standard assembly probing is used to locate the assembly.</span></span> <span data-ttu-id="ef7f9-2881">경우 `assemblyResolver` 제공 됩니다는 <xref:System.Type.GetType%2A> 메서드는 표준 조사를 수행 하지 않습니다;이 경우 확인 해야 하면 `assemblyResolver` 를 전달 하는 모든 어셈블리를 처리할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2881">If `assemblyResolver` is provided, the <xref:System.Type.GetType%2A> method does not do standard probing; in that case you must ensure that your `assemblyResolver` can handle all the assemblies you pass to it.</span></span>  
  
 <span data-ttu-id="ef7f9-2882">`assemblyResolver` 메서드를 반환 하도록 `null` 어셈블리를 확인할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2882">The `assemblyResolver` method should return `null` if the assembly cannot be resolved.</span></span> <span data-ttu-id="ef7f9-2883">경우 `assemblyResolver` 반환 `null`, `typeResolver` 호출 되지 않습니다 추가 처리 없이 발생 합니다 또한; 경우 `throwOnError` 은 `true`, <xref:System.IO.FileNotFoundException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2883">If `assemblyResolver` returns `null`, `typeResolver` is not called and no further processing occurs; additionally, if `throwOnError` is `true`, a <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="ef7f9-2884">경우는 <xref:System.Reflection.AssemblyName> 에 전달 되는 `assemblyResolver` 이 부분 이름, 하나 이상의 해당 부분의 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2884">If the <xref:System.Reflection.AssemblyName> that is passed to `assemblyResolver` is a partial name, one or more of its parts are `null`.</span></span> <span data-ttu-id="ef7f9-2885">예를 들어, 버전이 없는 경우는 <xref:System.Reflection.AssemblyName.Version%2A> 속성은 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2885">For example, if it has no version, the <xref:System.Reflection.AssemblyName.Version%2A> property is `null`.</span></span> <span data-ttu-id="ef7f9-2886">경우는 <xref:System.Reflection.AssemblyName.Version%2A> 속성을는 <xref:System.Reflection.AssemblyName.CultureInfo%2A> 속성을 및 <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> 메서드가 모두 반환 `null`, 어셈블리의 단순한 이름을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2886">If the <xref:System.Reflection.AssemblyName.Version%2A> property, the <xref:System.Reflection.AssemblyName.CultureInfo%2A> property, and the <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> method all return `null`, then only the simple name of the assembly was supplied.</span></span> <span data-ttu-id="ef7f9-2887">`assemblyResolver` 메서드 사용 하거나 어셈블리 이름의 모든 부분을 무시할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2887">The `assemblyResolver` method can use or ignore all parts of the assembly name.</span></span>  
  
 <span data-ttu-id="ef7f9-2888">다른 어셈블리 확인 옵션의 효과에 테이블로 표시 됩니다는 [혼합 된 이름 확인](#mixed_name_resolution) 섹션 간단 하 고 정규화 된 어셈블리 형식 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2888">The effects of different assembly resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
<a name="resolving_types"></a>   
### <a name="resolving-types"></a><span data-ttu-id="ef7f9-2889">형식 확인</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2889">Resolving Types</span></span>  
 <span data-ttu-id="ef7f9-2890">경우 `typeName` 어셈블리 이름을 지정 하지 않는 `typeResolver` 가 항상 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2890">If `typeName` does not specify an assembly name, `typeResolver` is always called.</span></span> <span data-ttu-id="ef7f9-2891">경우 `typeName` 어셈블리 이름 지정 `typeResolver` 어셈블리 이름이 성공적으로 확인 되는 경우에 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2891">If `typeName` specifies an assembly name, `typeResolver` is called only when the assembly name is successfully resolved.</span></span> <span data-ttu-id="ef7f9-2892">경우 `assemblyResolver` 또는 표준 어셈블리 반환 검색 `null`, `typeResolver` 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2892">If `assemblyResolver` or standard assembly probing returns `null`, `typeResolver` is not called.</span></span>  
  
 <span data-ttu-id="ef7f9-2893">`typeResolver` 메서드 3 개 인수를 받습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2893">The `typeResolver` method receives three arguments:</span></span>  
  
-   <span data-ttu-id="ef7f9-2894">검색 어셈블리 또는 `null` 경우 `typeName` 어셈블리 이름을 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2894">The assembly to search or `null` if `typeName` does not contain an assembly name.</span></span>  
  
-   <span data-ttu-id="ef7f9-2895">단순한 이름 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2895">The simple name of the type.</span></span> <span data-ttu-id="ef7f9-2896">중첩된 된 형식의 경우이 포함 하는 가장 바깥쪽 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2896">In the case of a nested type, this is the outermost containing type.</span></span> <span data-ttu-id="ef7f9-2897">제네릭 형식의 경우 제네릭 형식의 단순한 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2897">In the case of a generic type, this is the simple name of the generic type.</span></span>  
  
-   <span data-ttu-id="ef7f9-2898">부울 값이 `true` 형식 이름의 대/소문자가 구분 되지 않을 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2898">A Boolean value that is `true` if the case of type names is to be ignored.</span></span>  
  
 <span data-ttu-id="ef7f9-2899">구현에는 이러한 인수를 사용 하는 방법을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2899">The implementation determines the way these arguments are used.</span></span> <span data-ttu-id="ef7f9-2900">`typeResolver` 메서드를 반환 하도록 `null` 유형을 확인할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2900">The `typeResolver` method should return `null` if it cannot resolve the type.</span></span> <span data-ttu-id="ef7f9-2901">경우 `typeResolver` 반환 `null` 및 `throwOnError` 은 `true`,이 오버 로드의 <xref:System.Type.GetType%2A> throw 한 <xref:System.TypeLoadException>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2901">If `typeResolver` returns `null` and `throwOnError` is `true`, this overload of <xref:System.Type.GetType%2A> throws a <xref:System.TypeLoadException>.</span></span>  
  
 <span data-ttu-id="ef7f9-2902">다른 형식 확인 옵션의 효과에 테이블로 표시 됩니다는 [혼합 된 이름 확인](#mixed_name_resolution) 섹션 간단 하 고 정규화 된 어셈블리 형식 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2902">The effects of different type resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
#### <a name="resolving-nested-types"></a><span data-ttu-id="ef7f9-2903">중첩된 형식 확인</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2903">Resolving Nested Types</span></span>  
 <span data-ttu-id="ef7f9-2904">경우 `typeName` 는 중첩 형식이 가장 바깥쪽의 이름만 포함 하는 형식에 전달 되 `typeResolver`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2904">If `typeName` is a nested type, only the name of the outermost containing type is passed to `typeResolver`.</span></span> <span data-ttu-id="ef7f9-2905">때 `typeResolver` 이 형식을 반환 된 <xref:System.Type.GetNestedType%2A> 메서드는 가장 안쪽 중첩된 형식을 해결 될 때까지 재귀적으로 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2905">When `typeResolver` returns this type, the <xref:System.Type.GetNestedType%2A> method is called recursively until the innermost nested type has been resolved.</span></span>  
  
#### <a name="resolving-generic-types"></a><span data-ttu-id="ef7f9-2906">제네릭 형식 확인</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2906">Resolving Generic Types</span></span>  
 <span data-ttu-id="ef7f9-2907"><xref:System.Type.GetType%2A> 재귀적으로 제네릭 형식을 확인 하기 위해 호출 됩니다: 제네릭 형식 자체를 해결 하려면 먼저 해당 형식 인수를 해결 하려면 다음 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2907">The <xref:System.Type.GetType%2A> is called recursively to resolve generic types: First to resolve the generic type itself, and then to resolve its type arguments.</span></span> <span data-ttu-id="ef7f9-2908">형식 인수가 일반, <xref:System.Type.GetType%2A> 그 형식 인수를 해결 하는 재귀적으로 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2908">If a type argument is generic, <xref:System.Type.GetType%2A> is called recursively to resolve its type arguments, and so on.</span></span>  
  
 <span data-ttu-id="ef7f9-2909">조합의 `assemblyResolver` 및 `typeResolver` 모든 수준의이 재귀를 확인할 수 반드시 제공 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2909">The combination of `assemblyResolver` and `typeResolver` that you provide must be capable of resolving all levels of this recursion.</span></span> <span data-ttu-id="ef7f9-2910">예를 들어, 제공 하는 `assemblyResolver` 의 로드를 제어 하는 `MyAssembly`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2910">For example, suppose you supply an `assemblyResolver` that controls the loading of `MyAssembly`.</span></span> <span data-ttu-id="ef7f9-2911">제네릭 형식을 확인 하려는 경우 다음과 같이 `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2911">Suppose you want to resolve the generic type `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` in Visual Basic).</span></span> <span data-ttu-id="ef7f9-2912">다음과 같은 제네릭 형식 이름을 전달할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2912">You might pass the following generic type name:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[System.String,[MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="ef7f9-2913">다음에 유의 `MyType` 어셈블리를 한정 된 형식 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2913">Notice that `MyType` is the only assembly-qualified type argument.</span></span> <span data-ttu-id="ef7f9-2914">이름을 <xref:System.Collections.Generic.Dictionary%602> 및 <xref:System.String> 클래스 정규화 된 어셈블리는 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2914">The names of the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String> classes are not assembly-qualified.</span></span> <span data-ttu-id="ef7f9-2915">프로그램 `typeResolver` 어셈블리 처리할 수 있어야 하거나 `null`받으므로, `null` 에 대 한 <xref:System.Collections.Generic.Dictionary%602> 및 <xref:System.String>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2915">Your `typeResolver` must be able handle either an assembly or `null`, because it will receive `null` for <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String>.</span></span> <span data-ttu-id="ef7f9-2916">오버 로드를 호출 하 여 해당 사례를 처리할 수는 <xref:System.Type.GetType%2A> 정규화 되지 않은 형식 이름의 둘 다 Mscorlib.dll에 때문에 문자열을 사용 하는 메서드:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2916">It can handle that case by calling an overload of the <xref:System.Type.GetType%2A> method that takes a string, because both of the unqualified type names are in Mscorlib.dll:</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#1](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#1)]  
  
 <span data-ttu-id="ef7f9-2917">`assemblyResolver` 없기 때문에 이러한 형식 이름은 정규화 된 어셈블리 사전 형식 및 문자열 형식에 대 한 메서드가 호출 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2917">The `assemblyResolver` method is not called for the dictionary type and the string type, because those type names are not assembly-qualified.</span></span>  
  
 <span data-ttu-id="ef7f9-2918">이제 대신 가정 `System.String`, 첫 번째 제네릭 인수 형식이 `YourType`에서 `YourAssembly`:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2918">Now suppose that instead of `System.String`, the first generic argument type is `YourType`, from `YourAssembly`:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[[YourNamespace.YourType, YourAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null], [MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="ef7f9-2919">이 어셈블리가 Mscorlib.dll 또는 현재 실행 중인 있으므로 해결할 수 없는 `YourType` 정규화 된 어셈블리 이름이 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2919">Because this assembly is neither Mscorlib.dll nor the currently executing assembly, you cannot resolve `YourType` without an assembly-qualified name.</span></span> <span data-ttu-id="ef7f9-2920">때문에 프로그램 `assemblyResolve` 됩니다 재귀적으로 호출, 있어야이 경우를 처리 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2920">Because your `assemblyResolve` will be called recursively, it must be able to handle this case.</span></span> <span data-ttu-id="ef7f9-2921">반환 하는 대신 `null` 이외의 어셈블리에 대해 `MyAssembly`, 제공 된를 사용 하 여 어셈블리 로드를 지금 수행 <xref:System.Reflection.AssemblyName> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2921">Instead of returning `null` for assemblies other than `MyAssembly`, it now performs an assembly load using the supplied <xref:System.Reflection.AssemblyName> object.</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#2](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#2)]  
  
 <span data-ttu-id="ef7f9-2922">다시 [사용 정보](#usage_notes)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2922">Back to [Usage Notes](#usage_notes).</span></span>  
  
#### <a name="resolving-type-names-with-special-characters"></a><span data-ttu-id="ef7f9-2923">특수 문자를 사용한 형식 이름 확인</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2923">Resolving Type Names with Special Characters</span></span>  
 <span data-ttu-id="ef7f9-2924">특정 문자 어셈블리의 정규화 된 이름에서 특별 한 의미를 갖습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2924">Certain characters have special meanings in assembly-qualified names.</span></span> <span data-ttu-id="ef7f9-2925">이러한 문자를 포함 하는 단순 형식 이름, 단순한 이름 정규화 된 어셈블리 이름의 일부인 경우 문자 구문 분석 오류가 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2925">If a simple type name contains these characters, the characters cause parsing errors when the simple name is part of an assembly-qualified name.</span></span> <span data-ttu-id="ef7f9-2926">구문 분석 오류를 방지 하려면 이스케이프 해야 정규화 된 어셈블리 이름을 전달할 수 전에 백슬래시로 특수 문자는 <xref:System.Type.GetType%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2926">To avoid the parsing errors, you must escape the special characters with a backslash before you can pass the assembly-qualified name to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="ef7f9-2927">예를 들어, 한 유형의 이름은 `Strange]Type`, 대괄호 보다 먼저 다음과 같은 이스케이프 문자를 추가 해야 합니다: `Strange\]Type`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2927">For example, if a type is named `Strange]Type`, the escape character must be added ahead of the square bracket as follows: `Strange\]Type`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-2928">이러한 특수 문자를 사용 하 여 이름을 Visual Basic 또는 C#에서 만들 수 없지만 동적 어셈블리 내보내기 하거나 Microsoft MSIL (intermediate language)을 사용 하 여 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2928">Names with such special characters cannot be created in Visual Basic or C#, but can be created by using Microsoft intermediate language (MSIL) or by emitting dynamic assemblies.</span></span>  
  
 <span data-ttu-id="ef7f9-2929">다음 표에서 형식 이름에 특수 문자를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2929">The following table shows the special characters for type names.</span></span>  
  
|<span data-ttu-id="ef7f9-2930">문자</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2930">Character</span></span>|<span data-ttu-id="ef7f9-2931">의미</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2931">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="ef7f9-2932">`,` (쉼표)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2932">`,` (comma)</span></span>|<span data-ttu-id="ef7f9-2933">어셈블리의 정규화 된 이름에 대 한 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2933">Delimiter for assembly-qualified names.</span></span>|  
|<span data-ttu-id="ef7f9-2934">`[]` (대괄호)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2934">`[]` (square brackets)</span></span>|<span data-ttu-id="ef7f9-2935">접미사 쌍으로 배열 형식을 나타내고; 구분 기호 쌍으로 제네릭 인수 목록 및 정규화 된 어셈블리 이름을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2935">As a suffix pair, indicates an array type; as a delimiter pair, encloses generic argument lists and assembly-qualified names.</span></span>|  
|<span data-ttu-id="ef7f9-2936">`&` (앰퍼샌드)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2936">`&` (ampersand)</span></span>|<span data-ttu-id="ef7f9-2937">접미사로 형식이 참조 형식이 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2937">As a suffix, indicates that a type is a reference type.</span></span>|  
|<span data-ttu-id="ef7f9-2938">`*` (별표)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2938">`*` (asterisk)</span></span>|<span data-ttu-id="ef7f9-2939">접미사로 형식이 포인터 형식임을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2939">As a suffix, indicates that a type is a pointer type.</span></span>|  
|<span data-ttu-id="ef7f9-2940">`+` (더하기)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2940">`+` (plus)</span></span>|<span data-ttu-id="ef7f9-2941">중첩 된 형식에 대 한 구분 기호입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2941">Delimiter for nested types.</span></span>|  
|<span data-ttu-id="ef7f9-2942">`\` (백슬래시)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2942">`\` (backslash)</span></span>|<span data-ttu-id="ef7f9-2943">이스케이프 문자입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2943">Escape character.</span></span>|  
  
 <span data-ttu-id="ef7f9-2944">와 같은 <xref:System.Type.AssemblyQualifiedName%2A> 올바르게 이스케이프 된 문자열 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2944">Properties such as <xref:System.Type.AssemblyQualifiedName%2A> return correctly escaped strings.</span></span> <span data-ttu-id="ef7f9-2945">올바르게 이스케이프 된 문자열을 전달 해야 합니다는 <xref:System.Type.GetType%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2945">You must pass correctly escaped strings to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="ef7f9-2946">차례로 <xref:System.Type.GetType%2A> 메서드에서 올바르게 이스케이프 된 이름을 전달 `typeResolver` 및 기본 형식 확인 방법에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2946">In turn, the <xref:System.Type.GetType%2A> method passes correctly escaped names to `typeResolver` and to the default type resolution methods.</span></span> <span data-ttu-id="ef7f9-2947">이스케이프 되지 않은 이름에 이름을 비교 해야 하는 경우 `typeResolver`, 이스케이프 문자를 제거 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2947">If you need to compare a name to an unescaped name in `typeResolver`, you must remove the escape characters.</span></span>  
  
 <span data-ttu-id="ef7f9-2948">다시 [사용 정보](#usage_notes)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2948">Back to [Usage Notes](#usage_notes).</span></span>  
  
<a name="mixed_name_resolution"></a>   
## <a name="mixed-name-resolution"></a><span data-ttu-id="ef7f9-2949">혼합 된 이름 확인</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2949">Mixed Name Resolution</span></span>  
 <span data-ttu-id="ef7f9-2950">다음 표에서 간의 상호 작용 요약 `assemblyResolver`, `typeResolver`, 및 형식 이름 및 어셈블리 이름을의 모든 조합에 대 한 기본 이름 확인 `typeName`:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2950">The following table summarizes the interactions between `assemblyResolver`, `typeResolver`, and default name resolution, for all combinations of type name and assembly name in `typeName`:</span></span>  
  
|<span data-ttu-id="ef7f9-2951">형식 이름의 내용</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2951">Contents of type name</span></span>|<span data-ttu-id="ef7f9-2952">어셈블리 확인자 메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2952">Assembly resolver method</span></span>|<span data-ttu-id="ef7f9-2953">형식 확인자 메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2953">Type resolver method</span></span>|<span data-ttu-id="ef7f9-2954">결과</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2954">Result</span></span>|  
|---------------------------|------------------------------|--------------------------|------------|  
|<span data-ttu-id="ef7f9-2955">형식, 어셈블리</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2955">type, assembly</span></span>|<span data-ttu-id="ef7f9-2956">null</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2956">null</span></span>|<span data-ttu-id="ef7f9-2957">null</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2957">null</span></span>|<span data-ttu-id="ef7f9-2958">호출에 해당 하는 <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2958">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span>|  
|<span data-ttu-id="ef7f9-2959">형식, 어셈블리</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2959">type, assembly</span></span>|<span data-ttu-id="ef7f9-2960">제공</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2960">provided</span></span>|<span data-ttu-id="ef7f9-2961">null</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2961">null</span></span>|<span data-ttu-id="ef7f9-2962">`assemblyResolver` 어셈블리를 반환 하거나 반환 `null` 어셈블리를 확인할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2962">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="ef7f9-2963">어셈블리가 확인 되는 경우는 <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> 그렇지는 형식을 확인 하려고 하지 않은 경우; 메서드 오버 로드는 어셈블리에서 형식을 로드 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2963">If the assembly is resolved, the <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload is used to load the type from the assembly; otherwise, there is no attempt to resolve the type.</span></span>|  
|<span data-ttu-id="ef7f9-2964">형식, 어셈블리</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2964">type, assembly</span></span>|<span data-ttu-id="ef7f9-2965">null</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2965">null</span></span>|<span data-ttu-id="ef7f9-2966">제공</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2966">provided</span></span>|<span data-ttu-id="ef7f9-2967">어셈블리 이름을 변환에 해당 하는 <xref:System.Reflection.AssemblyName> 개체와 호출은 <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> 어셈블리를 가져오려면 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2967">Equivalent to converting the assembly name to an <xref:System.Reflection.AssemblyName> object and calling the <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> method overload to get the assembly.</span></span> <span data-ttu-id="ef7f9-2968">에 전달 되기 어셈블리 해결 되 면 `typeResolver`, 그렇지 않으면 `typeResolver` 호출 되지 않습니다 추가 시도가 형식을 확인 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2968">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="ef7f9-2969">형식, 어셈블리</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2969">type, assembly</span></span>|<span data-ttu-id="ef7f9-2970">제공</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2970">provided</span></span>|<span data-ttu-id="ef7f9-2971">제공</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2971">provided</span></span>|<span data-ttu-id="ef7f9-2972">`assemblyResolver` 어셈블리를 반환 하거나 반환 `null` 어셈블리를 확인할 수 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2972">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="ef7f9-2973">에 전달 되기 어셈블리 해결 되 면 `typeResolver`, 그렇지 않으면 `typeResolver` 호출 되지 않습니다 추가 시도가 형식을 확인 하 고 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2973">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="ef7f9-2974">형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2974">type</span></span>|<span data-ttu-id="ef7f9-2975">null이 고, 제공</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2975">null, provided</span></span>|<span data-ttu-id="ef7f9-2976">null</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2976">null</span></span>|<span data-ttu-id="ef7f9-2977">호출에 해당 하는 <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2977">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="ef7f9-2978">어셈블리 이름이 제공 되지 않았으므로 Mscorlib.dll 및 현재 실행 중인 어셈블리가 검색 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2978">Because the assembly name is not provided, only Mscorlib.dll and the currently executing assembly are searched.</span></span> <span data-ttu-id="ef7f9-2979">경우 `assemblyResolver` 제공는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2979">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="ef7f9-2980">type</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2980">type</span></span>|<span data-ttu-id="ef7f9-2981">null이 고, 제공</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2981">null, provided</span></span>|<span data-ttu-id="ef7f9-2982">제공</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2982">provided</span></span>|<span data-ttu-id="ef7f9-2983">`typeResolver` 를 호출 하 고 `null` 어셈블리에 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2983">`typeResolver` is called, and `null` is passed for the assembly.</span></span> <span data-ttu-id="ef7f9-2984">`typeResolver` 목적을 위해 로드 하는 어셈블리를 포함 하 여 모든 어셈블리에서 형식을 제공할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2984">`typeResolver` can provide a type from any assembly, including assemblies it loads for the purpose.</span></span> <span data-ttu-id="ef7f9-2985">경우 `assemblyResolver` 제공는 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2985">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="ef7f9-2986">어셈블리</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2986">assembly</span></span>|<span data-ttu-id="ef7f9-2987">null이 고, 제공</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2987">null, provided</span></span>|<span data-ttu-id="ef7f9-2988">null이 고, 제공</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2988">null, provided</span></span>|<span data-ttu-id="ef7f9-2989">A <xref:System.IO.FileLoadException> 어셈블리 이름 처럼 구문 분석 유형 어셈블리의 정규화 된 이름 이므로 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2989">A <xref:System.IO.FileLoadException> is thrown, because the assembly name is parsed as if it were an assembly-qualified type name.</span></span> <span data-ttu-id="ef7f9-2990">따라서 잘못 된 어셈블리 이름이 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2990">This results in an invalid assembly name.</span></span>|  
  
 <span data-ttu-id="ef7f9-2991">다시: [사용 정보](#usage_notes), [어셈블리 확인](#resolving_assemblies), [형식 확인](#resolving_types)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-2991">Back to: [Usage Notes](#usage_notes), [Resolving Assemblies](#resolving_assemblies), [Resolving Types](#resolving_types).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-2992">
            <paramref name="typeName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2992">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ef7f9-2993">클래스 이니셜라이저가 호출되고 예외가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2993">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="ef7f9-2994">
            <paramref name="throwOnError" />가 <see langword="true" />이고 형식을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2994">
              <paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="ef7f9-2995">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2995">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2996">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 포함된 탭 등의 잘못된 문자를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2996">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="ef7f9-2997">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2997">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-2998">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 빈 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2998">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="ef7f9-2999">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-2999">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3000">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />이 잘못된 크기를 가진 배열 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3000">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="ef7f9-3001">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3001">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3002">
            <paramref name="typeName" />이 <see cref="T:System.TypedReference" /> 배열을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3002">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-3003">
            <paramref name="typeName" />이 형식 이름과 어셈블리 이름(예: 단순 형식 이름에 이스케이프되지 않은 특수 문자를 포함하는 경우)에 구문 분석할 때 오류가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3003">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span>
          </span>
          <span data-ttu-id="ef7f9-3004">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3004">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3005">
            <paramref name="throwOnError" />가 <see langword="true" />이고 <paramref name="typeName" />에 잘못된 구문이 포함된 경우(예: "MyType[,\*,]").</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3005">
              <paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span>
          </span>
          <span data-ttu-id="ef7f9-3006">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3006">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3007">
            <paramref name="typeName" />이 형식 인수 중 하나로 포인터 형식, <see langword="ByRef" /> 형식 또는 <see cref="T:System.Void" />를 가진 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3007">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-3008">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3008">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3009">
            <paramref name="typeName" />은 형식 인수의 개수가 잘못된 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3009">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-3010">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3010">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3011">
            <paramref name="typeName" />은 제네릭 형식을 나타내며 그 형식 인수 중 하나가 해당 형식 매개 변수에 대한 제약 조건을 충족하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3011">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="ef7f9-3012">
            <paramref name="throwOnError" />가 <see langword="true" />이고 어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3012">
              <paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="ef7f9-3013">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나를 찾았지만 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3013">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
          <span data-ttu-id="ef7f9-3014">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3014">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3015">
            <paramref name="typeName" />에 잘못된 어셈블리 이름이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3015">
              <paramref name="typeName" /> contains an invalid assembly name.</span>
          </span>
          <span data-ttu-id="ef7f9-3016">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3016">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3017">
            <paramref name="typeName" />은 형식 이름이 없는 유효한 어셈블리 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3017">
              <paramref name="typeName" /> is a valid assembly name without a type name.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="ef7f9-3018">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나가 올바르지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3018">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="ef7f9-3019">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3019">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3020">어셈블리가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3020">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeArray">
      <MemberSignature Language="C#" Value="public static Type[] GetTypeArray (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type[] GetTypeArray(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeArray(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeArray (args As Object()) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;Type ^&gt; ^ GetTypeArray(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">
          <span data-ttu-id="ef7f9-3021">형식을 확인할 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3021">An array of objects whose types to determine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3022">지정된 배열의 개체 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3022">Gets the types of the objects in the specified array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3023">
            <see cref="T:System.Type" />의 해당 요소에 대한 형식을 나타내는 <paramref name="args" /> 개체의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3023">An array of <see cref="T:System.Type" /> objects representing the types of the corresponding elements in <paramref name="args" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ef7f9-3024">다음 코드 예제에서는 사용 하는 방법을 보여 줍니다.는 <xref:System.Type.GetTypeArray%2A> 메서드를 배열 요소 유형을 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3024">The following code example demonstrates how to use the <xref:System.Type.GetTypeArray%2A> method to list the types of the elements of an array.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#3)]
 [!code-csharp[Type_GetTypeCode#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#3)]
 [!code-vb[Type_GetTypeCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-3025">
            <paramref name="args" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3025">
              <paramref name="args" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3026">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3026">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3027">
            <paramref name="args" />의 요소 중 하나가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3027">One or more of the elements in <paramref name="args" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ef7f9-3028">클래스 이니셜라이저가 호출되고 하나 이상이 예외를 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3028">The class initializers are invoked and at least one throws an exception.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCode(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TypeCode GetTypeCode(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="ef7f9-3029">내부 형식 코드를 가져올 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3029">The type whose underlying type code to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3030">지정된 <see cref="T:System.Type" />의 내부 형식 코드를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3030">Gets the underlying type code of the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3031">지정된 형식의 코드이거나, <see cref="F:System.TypeCode.Empty" />이 <paramref name="type" />인 경우는 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3031">The code of the underlying type, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3032">상속 하는 경우 <xref:System.Type>를 재정의 하 여이 메서드의 동작을 변경할 수는 <xref:System.Type.GetTypeCodeImpl%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3032">When you inherit from <xref:System.Type>, you can change the behavior of this method by overriding the <xref:System.Type.GetTypeCodeImpl%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3033">다음 코드 예제에서는 방법을 <xref:System.TypeCode> 열거형을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3033">The following code example demonstrates how the <xref:System.TypeCode> enumeration can be used.</span></span> <span data-ttu-id="ef7f9-3034">결정 블록 내에서 `WriteObjectInfo` 메서드는 <xref:System.TypeCode> 의 <xref:System.Object> 매개 변수를 검사 하 고 적절 한 메시지는 콘솔에 기록 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3034">In a decision block inside the `WriteObjectInfo` method, the <xref:System.TypeCode> of an <xref:System.Object> parameter is examined, and an appropriate message is written to the console.</span></span>  
  
 [!code-cpp[System.TypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TypeCode/CPP/iconvertible.cpp#2)]
 [!code-csharp[System.TypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TypeCode/CS/iconvertible.cs#2)]
 [!code-vb[System.TypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TypeCode/VB/iconvertible.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCodeImpl" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeCodeImpl">
      <MemberSignature Language="C#" Value="protected virtual TypeCode GetTypeCodeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.TypeCode GetTypeCodeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCodeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTypeCodeImpl () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TypeCode GetTypeCodeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3035">이 <see cref="T:System.Type" /> 인스턴스에 대한 내부 형식 코드를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3035">Returns the underlying type code of this <see cref="T:System.Type" /> instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3036">내부 형식의 형식 코드입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3036">The type code of the underlying type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3037">이 메서드는에 대 한 구현을 제공는 `static` (C#에서) 또는 `Shared` (Visual Basic)에서는 <xref:System.Type.GetTypeCode%28System.Type%29> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3037">This method provides the implementation for the `static` (in C#) or `Shared` (in Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> method.</span></span> <span data-ttu-id="ef7f9-3038">상속 하는 경우 <xref:System.Type>의 사용자 지정 구현을 제공 하려면이 메서드를 재정의할 수 있습니다 <xref:System.Type.GetTypeCode%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3038">When you inherit from <xref:System.Type>, you can override this method to provide your own implementation of <xref:System.Type.GetTypeCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCode(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromCLSID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3039">지정된 CLSID(클래스 식별자)와 연관된 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3039">Gets the type associated with the specified class identifier (CLSID).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="ef7f9-3040">가져올 형식의 CLSID입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3040">The CLSID of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3041">지정된 CLSID(클래스 식별자)와 연관된 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3041">Gets the type associated with the specified class identifier (CLSID).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3042">CLSID가 유효한지 여부에 관계 없이 <see langword="System.__ComObject" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3042">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3043"><xref:System.Type.GetTypeFromCLSID%2A> 메서드 지원 런타임에 바인딩된 액세스 관리 되지 않는 COM 개체에.NET Framework 응용 프로그램에서 COM 개체의 CLSID (클래스 식별자)를 알고 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3043">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="ef7f9-3044">COM 클래스에 대 한 클래스 식별자는 레지스트리의 HKEY_CLASSES_ROOT\CLSID 키에 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3044">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="ef7f9-3045">값을 검색할 수 있습니다는 <xref:System.Type.IsCOMObject%2A> 속성을이 메서드에서 반환 된 형식이 COM 개체 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3045">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="ef7f9-3046">호출할 수 있습니다는 <xref:System.Type.GetTypeFromProgID%2A> 메서드를 COM에 대 한 런타임에 바인딩된 액세스에 대 한 해당 ProgID (프로그래밍 식별자) 알고 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3046">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="ef7f9-3047">CLSID에서 관리 되지 않는 COM 개체를 인스턴스화하는 두 단계로 이루어집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3047">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="ef7f9-3048">가져오기는 <xref:System.Type> 을 나타내는 개체는`__ComObject` 호출 하 여 CLSID에 해당 하는 <xref:System.Type.GetTypeFromCLSID%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3048">Get a <xref:System.Type> object that represents the`__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="ef7f9-3049">호출 된 <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> 메서드를 COM 개체를 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3049">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="ef7f9-3050">그림에 대 한 예제를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3050">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="ef7f9-3051"><xref:System.Type.GetTypeFromCLSID%28System.Guid%29> 인스턴스화할 때 발생할 수 있는 모든 예외를 무시 하는 오버 로드는 <xref:System.Type> 기반 개체는 `clsid` 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3051">The <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> overload ignores any exception that may occur when instantiating a <xref:System.Type> object based on the `clsid` argument.</span></span> <span data-ttu-id="ef7f9-3052">경우 예외가 throw 되는 참고 `clsid` 레지스트리에서 찾을 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3052">Note that no exception is thrown if `clsid` is not found in the registry.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3053">다음 예제에서는 Microsoft Word의 CLSID를 사용 하 여 [Application 개체](http://msdn.microsoft.com/library/office/ff838565.aspx) 를 Microsoft Word 응용 프로그램을 나타내는 COM 형식을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3053">The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="ef7f9-3054">호출 하 여 다음 형식을 인스턴스화하는 <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> 메서드를 호출 하 여 닫습니다는 [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3054">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid1.cs#1)]
 [!code-vb[System.Type.GetTypeFromCLSID#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="ef7f9-3055">.NET Framework 개체와 COM 개체로 작업할 때 사용 하기 위해이 메서드를 사용 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="ef7f9-3055">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="ef7f9-3056">관리 되는 모든 개체를 COM에 표시를 포함 하 여 (즉, 해당 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 특성은 <see langword="true" />)에서 반환 되는 guid는 <see cref="P:System.Type.GUID" /> 속성입니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="ef7f9-3056">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="ef7f9-3057">메서드가 <see cref="T:System.Type" /> 개체에 대 한.NET Framework GUID에 해당 하는 개체를 사용할 수 없습니다 <see cref="T:System.Type" /> 를 호출 하 여 형식 인스턴스를 만들 개체는 <see cref="M:System.Activator.CreateInstance(System.Type)" /> 다음 예제와 같이 메서드.</span>
            <span class="sxs-lookup">
              <span data-stu-id="ef7f9-3057">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)]
 [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  
  
 <span data-ttu-id="ef7f9-3058">대신,는 <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> 결과 및는 관리 되지 않는 COM 개체의 GUID를 검색 하에 사용 해야 <see cref="T:System.Type" /> 에 전달 되는 개체는 <see cref="M:System.Activator.CreateInstance(System.Type)" /> 메서드가 관리 되지 않는 COM 개체를 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3058">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="ef7f9-3059">가져올 형식의 CLSID입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3059">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="ef7f9-3060">발생하는 예외를 모두 throw하려면 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3060">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="ef7f9-3061">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3061">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3062">
            <see langword="false" />는 발생하는 예외를 모두 무시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3062">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3063">지정된 CLSID(클래스 식별자)와 연관된 형식을 가져오고 형식을 로드하는 동안 오류가 발생하면 예외를 throw할지를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3063">Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3064">CLSID가 유효한지 여부에 관계 없이 <see langword="System.__ComObject" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3064">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3065"><xref:System.Type.GetTypeFromCLSID%2A> 메서드 지원 런타임에 바인딩된 액세스 관리 되지 않는 COM 개체에.NET Framework 응용 프로그램에서 COM 개체의 CLSID (클래스 식별자)를 알고 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3065">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="ef7f9-3066">COM 클래스에 대 한 클래스 식별자는 레지스트리의 HKEY_CLASSES_ROOT\CLSID 키에 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3066">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="ef7f9-3067">값을 검색할 수 있습니다는 <xref:System.Type.IsCOMObject%2A> 속성을이 메서드에서 반환 된 형식이 COM 개체 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3067">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="ef7f9-3068">호출할 수 있습니다는 <xref:System.Type.GetTypeFromProgID%2A> 메서드를 COM에 대 한 런타임에 바인딩된 액세스에 대 한 해당 ProgID (프로그래밍 식별자) 알고 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3068">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="ef7f9-3069">CLSID에서 관리 되지 않는 COM 개체를 인스턴스화하는 두 단계로 이루어집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3069">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="ef7f9-3070">가져오기는 <xref:System.Type> 을 나타내는 개체는 `__ComObject` 호출 하 여 CLSID에 해당 하는 <xref:System.Type.GetTypeFromCLSID%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3070">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="ef7f9-3071">호출 된 <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> 메서드를 COM 개체를 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3071">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="ef7f9-3072">그림에 대 한 예제를 참조 하십시오.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3072">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="ef7f9-3073">등의 예외도 <xref:System.OutOfMemoryException> 지정 하는 경우 throw 됩니다 `true` 에 대 한 `throwOnError`, 하지만 등록 되지 않은 clsid 하지 못합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3073">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3074">다음 예제에서는 Microsoft Word의 CLSID를 사용 하 여 [Application 개체](http://msdn.microsoft.com/library/office/ff838565.aspx) 를 Microsoft Word 응용 프로그램을 나타내는 COM 형식을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3074">The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="ef7f9-3075">호출 하 여 다음 형식을 인스턴스화하는 <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> 메서드를 호출 하 여 닫습니다는 [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3075">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.</span></span> <span data-ttu-id="ef7f9-3076">형식을 로드 하는 동안 오류가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3076">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex2.cs#2)]
 [!code-vb[System.Type.GetTypeFromCLSID#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="ef7f9-3077">.NET Framework 개체와 COM 개체로 작업할 때 사용 하기 위해이 메서드를 사용 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="ef7f9-3077">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="ef7f9-3078">관리 되는 모든 개체를 COM에 표시를 포함 하 여 (즉, 해당 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 특성은 <see langword="true" />)에서 반환 되는 guid는 <see cref="P:System.Type.GUID" /> 속성입니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="ef7f9-3078">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="ef7f9-3079">메서드가 <see cref="T:System.Type" /> 개체에 대 한.NET Framework GUID에 해당 하는 개체를 사용할 수 없습니다 <see cref="T:System.Type" /> 를 호출 하 여 형식 인스턴스를 만들 개체는 <see cref="M:System.Activator.CreateInstance(System.Type)" /> 다음 예제와 같이 메서드.</span>
            <span class="sxs-lookup">
              <span data-stu-id="ef7f9-3079">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)]
 [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  
  
 <span data-ttu-id="ef7f9-3080">대신,는 <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> 결과 및는 관리 되지 않는 COM 개체의 GUID를 검색 하에 사용 해야 <see cref="T:System.Type" /> 에 전달 되는 개체는 <see cref="M:System.Activator.CreateInstance(System.Type)" /> 메서드가 관리 되지 않는 COM 개체를 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3080">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="ef7f9-3081">가져올 형식의 CLSID입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3081">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="ef7f9-3082">형식을 로드할 서버입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3082">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="ef7f9-3083">서버 이름이 <see langword="null" />이면 이 메서드는 자동으로 로컬 컴퓨터로 전환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3083">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3084">지정된 CLSID(클래스 식별자)와 연관된 형식을 지정된 서버에서 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3084">Gets the type associated with the specified class identifier (CLSID) from the specified server.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3085">CLSID가 유효한지 여부에 관계 없이 <see langword="System.__ComObject" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3085">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3086"><xref:System.Type.GetTypeFromCLSID%2A> 메서드 지원 런타임에 바인딩된 액세스 관리 되지 않는 COM 개체에.NET Framework 응용 프로그램에서 COM 개체의 CLSID (클래스 식별자)를 알고 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3086">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="ef7f9-3087">COM 클래스에 대 한 클래스 식별자는 레지스트리의 HKEY_CLASSES_ROOT\CLSID 키에 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3087">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="ef7f9-3088">값을 검색할 수 있습니다는 <xref:System.Type.IsCOMObject%2A> 속성을이 메서드에서 반환 된 형식이 COM 개체 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3088">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="ef7f9-3089">호출할 수 있습니다는 <xref:System.Type.GetTypeFromProgID%2A> 메서드를 COM에 대 한 런타임에 바인딩된 액세스에 대 한 해당 ProgID (프로그래밍 식별자) 알고 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3089">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="ef7f9-3090">CLSID에서 관리 되지 않는 COM 개체를 인스턴스화하는 두 단계로 이루어집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3090">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="ef7f9-3091">가져오기는 <xref:System.Type> 을 나타내는 개체는 `__ComObject` 호출 하 여 CLSID에 해당 하는 <xref:System.Type.GetTypeFromCLSID%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3091">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="ef7f9-3092">호출 된 <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> 메서드를 COM 개체를 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3092">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3093">다음 예제에서는 Microsoft Word의 CLSID를 사용 하 여 [Application 개체](http://msdn.microsoft.com/library/office/ff838565.aspx) computer17.central.contoso.com 라는 서버에서 Microsoft Word 응용 프로그램을 나타내는 COM 형식을 검색할 수 있습니다. 호출 하 여 다음 형식을 인스턴스화하는 <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> 메서드를 호출 하 여 닫습니다는 [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3093">The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com. It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex3.cs#3)]
 [!code-vb[System.Type.GetTypeFromCLSID#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="ef7f9-3094">.NET Framework 개체와 COM 개체로 작업할 때 사용 하기 위해이 메서드를 사용 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="ef7f9-3094">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="ef7f9-3095">관리 되는 모든 개체를 COM에 표시를 포함 하 여 (즉, 해당 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 특성은 <see langword="true" />)에서 반환 되는 guid는 <see cref="P:System.Type.GUID" /> 속성입니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="ef7f9-3095">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="ef7f9-3096">메서드가 <see cref="T:System.Type" /> 개체에 대 한.NET Framework GUID에 해당 하는 개체를 사용할 수 없습니다 <see cref="T:System.Type" /> 를 호출 하 여 형식 인스턴스를 만들 개체는 <see cref="M:System.Activator.CreateInstance(System.Type)" /> 다음 예제와 같이 메서드.</span>
            <span class="sxs-lookup">
              <span data-stu-id="ef7f9-3096">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)]
 [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  
  
 <span data-ttu-id="ef7f9-3097">대신,는 <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> 결과 및는 관리 되지 않는 COM 개체의 GUID를 검색 하에 사용 해야 <see cref="T:System.Type" /> 에 전달 되는 개체는 <see cref="M:System.Activator.CreateInstance(System.Type)" /> 메서드가 관리 되지 않는 COM 개체를 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3097">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid">
          <span data-ttu-id="ef7f9-3098">가져올 형식의 CLSID입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3098">The CLSID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="ef7f9-3099">형식을 로드할 서버입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3099">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="ef7f9-3100">서버 이름이 <see langword="null" />이면 이 메서드는 자동으로 로컬 컴퓨터로 전환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3100">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="ef7f9-3101">발생하는 예외를 모두 throw하려면 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3101">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="ef7f9-3102">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3102">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3103">
            <see langword="false" />는 발생하는 예외를 모두 무시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3103">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3104">지정된 CLSID(클래스 식별자)와 연관된 형식을 지정된 서버에서 가져오고 형식을 로드하는 동안 오류가 발생하면 예외를 throw할지를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3104">Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3105">CLSID가 유효한지 여부에 관계 없이 <see langword="System.__ComObject" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3105">
              <see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3106"><xref:System.Type.GetTypeFromCLSID%2A> 메서드 지원 런타임에 바인딩된 액세스 관리 되지 않는 COM 개체에.NET Framework 응용 프로그램에서 COM 개체의 CLSID (클래스 식별자)를 알고 있는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3106">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="ef7f9-3107">COM 클래스에 대 한 클래스 식별자는 레지스트리의 HKEY_CLASSES_ROOT\CLSID 키에 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3107">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="ef7f9-3108">값을 검색할 수 있습니다는 <xref:System.Type.IsCOMObject%2A> 속성을이 메서드에서 반환 된 형식이 COM 개체 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3108">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="ef7f9-3109">호출할 수 있습니다는 <xref:System.Type.GetTypeFromProgID%2A> 메서드를 COM에 대 한 런타임에 바인딩된 액세스에 대 한 해당 ProgID (프로그래밍 식별자) 알고 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3109">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="ef7f9-3110">CLSID에서 관리 되지 않는 COM 개체를 인스턴스화하는 두 단계로 이루어집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3110">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="ef7f9-3111">가져오기는 <xref:System.Type> 을 나타내는 개체는 `__ComObject` 호출 하 여 CLSID에 해당 하는 <xref:System.Type.GetTypeFromCLSID%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3111">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="ef7f9-3112">호출 된 <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> 메서드를 COM 개체를 인스턴스화합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3112">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="ef7f9-3113">등의 예외도 <xref:System.OutOfMemoryException> 지정 하는 경우 throw 됩니다 `true` 에 대 한 `throwOnError`, 하지만 등록 되지 않은 clsid 하지 못합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3113">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3114">다음 예제에서는 Microsoft Word의 CLSID를 사용 하 여 [Application 개체](http://msdn.microsoft.com/library/office/ff838565.aspx) computer17.central.contoso.com 라는 서버에서 Microsoft Word 응용 프로그램을 나타내는 COM 형식을 검색할 수 있습니다. 호출 하 여 다음 형식을 인스턴스화하는 <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> 메서드를 호출 하 여 닫습니다는 [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3114">The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com. It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.</span></span> <span data-ttu-id="ef7f9-3115">형식을 로드 하는 동안 오류가 발생 하면 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3115">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex4.cs#4)]
 [!code-vb[System.Type.GetTypeFromCLSID#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>
            <span data-ttu-id="ef7f9-3116">.NET Framework 개체와 COM 개체로 작업할 때 사용 하기 위해이 메서드를 사용 합니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="ef7f9-3116">This method is intended for use when working with COM objects, not with .NET Framework objects.</span>
            </span>
            <span data-ttu-id="ef7f9-3117">관리 되는 모든 개체를 COM에 표시를 포함 하 여 (즉, 해당 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 특성은 <see langword="true" />)에서 반환 되는 guid는 <see cref="P:System.Type.GUID" /> 속성입니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="ef7f9-3117">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span>
            </span>
            <span data-ttu-id="ef7f9-3118">하지만 <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> 메서드가 반환 되는 <see cref="T:System.Type" /> 관리 되는 특정 개체에 대 한 GUID에 해당 하는 개체를 사용할 수 없습니다 <see cref="T:System.Type" /> 를 호출 하 여 형식 인스턴스를 만들 개체는 <see cref="M:System.Activator.CreateInstance(System.Type)" /> 다음 예제와 같이 메서드 보여 줍니다.</span>
            <span class="sxs-lookup">
              <span data-stu-id="ef7f9-3118">Although the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for a particular managed object, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span>
            </span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)]
 [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]  
  
 <span data-ttu-id="ef7f9-3119">대신,는 <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> 결과 및는 관리 되지 않는 COM 개체의 GUID를 검색 하에 사용 해야 <see cref="T:System.Type" /> 에 전달 되는 개체는 <see cref="M:System.Activator.CreateInstance(System.Type)" /> 메서드가 관리 되지 않는 COM 개체를 나타내야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3119">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromHandle">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromHandle (RuntimeTypeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromHandle(valuetype System.RuntimeTypeHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromHandle (handle As RuntimeTypeHandle) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromHandle(RuntimeTypeHandle handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="ef7f9-3120">형식을 참조하는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3120">The object that refers to the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3121">지정된 형식 핸들이 참조하는 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3121">Gets the type referenced by the specified type handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3122">지정된 <see cref="T:System.RuntimeTypeHandle" />에서 참조하는 형식이거나 <see langword="null" />의 <see cref="P:System.RuntimeTypeHandle.Value" /> 속성이 <paramref name="handle" />인 경우 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3122">The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or <see langword="null" /> if the <see cref="P:System.RuntimeTypeHandle.Value" /> property of <paramref name="handle" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3123">핸들은 얻은 것 응용 프로그램 도메인 에서만 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3123">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3124">다음 예제에서는 <xref:System.Type.GetTypeFromHandle%2A> 가져올 메서드를 한 <xref:System.Type> 에서 개체는 <xref:System.RuntimeTypeHandle> 에서 제공 되는 <xref:System.Type.GetTypeHandle%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3124">The following example uses the <xref:System.Type.GetTypeFromHandle%2A> method to get a <xref:System.Type> object from a <xref:System.RuntimeTypeHandle> provided by the <xref:System.Type.GetTypeHandle%2A> method.</span></span>  
  
 [!code-cpp[Type_GetTypeFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromHandle/CPP/type_gettypefromhandle.cpp#1)]
 [!code-csharp[Type_GetTypeFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromHandle/CS/type_gettypefromhandle.cs#1)]
 [!code-vb[Type_GetTypeFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromHandle/VB/type_gettypefromhandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ef7f9-3125">클래스 이니셜라이저가 호출되고 예외가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3125">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromProgID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3126">지정된 ProgID(프로그램 식별자)와 연관된 형식을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3126">Gets the type associated with the specified program identifier (ProgID).</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="ef7f9-3127">가져올 형식의 ProgID입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3127">The ProgID of the type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3128">지정된 ProgID(프로그램 식별자)와 연관된 형식을 가져오고 <see cref="T:System.Type" />을 로드하는 동안 오류가 발생하면 null을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3128">Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3129">
            <paramref name="progID" />가 유효한 레지스트리 항목이고 형식과 관련되어 있으면 지정된 ProgID와 관련된 형식을 반환하고, 그렇지 않으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3129">The type associated with the specified ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3130">이 메서드는 제공 하는 COM 지원에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3130">This method is provided for COM support.</span></span> <span data-ttu-id="ef7f9-3131">Progid 네임 스페이스의 개념에 의해 대체 때문에 Microsoft.NET Framework에서 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3131">ProgIDs are not used in the Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-3132">
            <paramref name="progID" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3132">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ef7f9-3133">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3133">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ef7f9-3134">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3134">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="ef7f9-3135">가져올 형식의 ProgID입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3135">The ProgID of the type to get.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="ef7f9-3136">발생하는 예외를 모두 throw하려면 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3136">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="ef7f9-3137">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3137">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3138">
            <see langword="false" />는 발생하는 예외를 모두 무시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3138">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3139">지정된 ProgID(프로그램 식별자)와 연관된 형식을 가져오고 형식을 로드하는 동안 오류가 발생하면 예외를 throw할지를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3139">Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3140">
            <paramref name="progID" />가 유효한 레지스트리 항목이고 형식과 관련되어 있으면 지정된 ProgID(프로그램 식별자)와 관련된 형식을 반환하고, 그렇지 않으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3140">The type associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3141">이 메서드는 제공 하는 COM 지원에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3141">This method is provided for COM support.</span></span> <span data-ttu-id="ef7f9-3142">프로그램 Id 네임 스페이스의 개념에 의해 대체 때문에 Microsoft.NET Framework에서 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3142">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3143">다음 예에서는를 ProgID 유효 하지 않을 경우 예외를 throw 할지를 지정 ProgID를 전달 하 여 형식을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3143">The following example retrieves a type by passing a ProgID, specifying whether to throw an exception if the ProgID is invalid.</span></span> <span data-ttu-id="ef7f9-3144">다음 예에서는 모든 적절 한 예외 메시지와 함께 ProgID와 관련 된 클래스 Id를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3144">The example then displays the ClassID related to the ProgID, along with any applicable exception message.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CPP/type_gettypefromprogid2.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CS/type_gettypefromprogid2.cs#1)]
 [!code-vb[Type_GetTypeFromProgID2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID2/VB/type_gettypefromprogid2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-3145">
            <paramref name="progID" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3145">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="ef7f9-3146">지정된 ProgID가 등록되어 있지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3146">The specified ProgID is not registered.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ef7f9-3147">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3147">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ef7f9-3148">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3148">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="ef7f9-3149">가져올 형식의 ProgID입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3149">The progID of the type to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="ef7f9-3150">형식을 로드할 서버입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3150">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="ef7f9-3151">서버 이름이 <see langword="null" />이면 이 메서드는 자동으로 로컬 컴퓨터로 전환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3151">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3152">지정된 ProgID(프로그램 식별자)와 연관된 형식을 지정된 서버에서 가져오고, 형식을 로드하는 동안 오류가 발생하면 null을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3152">Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3153">
            <paramref name="progID" />가 유효한 레지스트리 항목이고 형식과 관련되어 있으면 지정된 ProgID(프로그램 식별자)와 관련된 형식을 반환하고, 그렇지 않으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3153">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3154">이 메서드는 제공 하는 COM 지원에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3154">This method is provided for COM support.</span></span> <span data-ttu-id="ef7f9-3155">프로그램 Id 네임 스페이스의 개념에 의해 대체 때문에 Microsoft.NET Framework에서 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3155">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3156">다음 예에서는 ProgID 및 서버 이름을 전달 하 여 형식을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3156">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="ef7f9-3157">이 예제에서는 다음의 ProgID와 관련 된 클래스 Id를 표시 하거나 ProgID 또는 서버 이름이 유효 하지 않을 경우 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3157">The example then displays the ClassID related to the ProgID, or throws an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CPP/Type_GetTypeFromProgID3.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CS/type_gettypefromprogid3.cs#1)]
 [!code-vb[Type_GetTypeFromProgID3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID3/VB/type_gettypefromprogid3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-3158">
            <paramref name="prodID" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3158">
              <paramref name="prodID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ef7f9-3159">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3159">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ef7f9-3160">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3160">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID">
          <span data-ttu-id="ef7f9-3161">가져올 <see cref="T:System.Type" />의 ProgID입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3161">The progID of the <see cref="T:System.Type" /> to get.</span>
          </span>
        </param>
        <param name="server">
          <span data-ttu-id="ef7f9-3162">형식을 로드할 서버입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3162">The server from which to load the type.</span>
          </span>
          <span data-ttu-id="ef7f9-3163">서버 이름이 <see langword="null" />이면 이 메서드는 자동으로 로컬 컴퓨터로 전환됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3163">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span>
          </span>
        </param>
        <param name="throwOnError">
          <span data-ttu-id="ef7f9-3164">발생하는 예외를 모두 throw하려면 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3164">
              <see langword="true" /> to throw any exception that occurs.</span>
          </span>
          <span data-ttu-id="ef7f9-3165">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3165">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3166">
            <see langword="false" />는 발생하는 예외를 모두 무시합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3166">
              <see langword="false" /> to ignore any exception that occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3167">지정된 ProgID(프로그램 식별자)와 연관된 형식을 지정된 서버에서 가져오고, 형식을 로드하는 동안 오류가 발생하면 예외를 throw할지를 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3167">Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3168">
            <paramref name="progID" />가 유효한 레지스트리 항목이고 형식과 관련되어 있으면 지정된 ProgID(프로그램 식별자)와 관련된 형식을 반환하고, 그렇지 않으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3168">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3169">이 메서드는 제공 하는 COM 지원에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3169">This method is provided for COM support.</span></span> <span data-ttu-id="ef7f9-3170">프로그램 Id 네임 스페이스의 개념에 의해 대체 때문에 Microsoft.NET Framework에서 사용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3170">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3171">다음 예에서는 ProgID 및 서버 이름을 전달 하 여 형식을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3171">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="ef7f9-3172">다음 예에서는를 ProgID 또는 서버 이름이 유효 하지 않을 경우 예외를 throw 할지를 지정 된 ProgID와 관련 된 클래스 Id를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3172">The example then displays the ClassID related to the ProgID, specifying whether to throw an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CPP/Type_GetTypeFromProgID4.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CS/type_gettypefromprogid4.cs#1)]
 [!code-vb[Type_GetTypeFromProgID4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID4/VB/type_gettypefromprogid4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-3173">
            <paramref name="progID" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3173">
              <paramref name="progID" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">
          <span data-ttu-id="ef7f9-3174">지정된 ProgID가 등록되어 있지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3174">The specified progID is not registered.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="ef7f9-3175">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3175">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="ef7f9-3176">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3176">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
        <altmember cref="T:System.TypeLoadException" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeHandle">
      <MemberSignature Language="C#" Value="public static RuntimeTypeHandle GetTypeHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.RuntimeTypeHandle GetTypeHandle(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeHandle(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeHandle (o As Object) As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static RuntimeTypeHandle GetTypeHandle(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="ef7f9-3177">Type 핸들을 가져올 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3177">The object for which to get the type handle.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3178">지정된 개체의 <see cref="T:System.Type" />에 대한 핸들을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3178">Gets the handle for the <see cref="T:System.Type" /> of a specified object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3179">지정된 <see cref="T:System.Type" />의 <see cref="T:System.Object" />에 대한 핸들입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3179">The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3180">핸들은 얻은 것 응용 프로그램 도메인 에서만 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3180">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3181">다음 예제에서는 클래스를 정의 `MyClass1`인스턴스를 가져오고 개체의 런타임 핸들을 검색 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3181">The following example defines the class `MyClass1`, gets an instance of it, and retrieves the runtime handle of the object.</span></span>  
  
 [!code-cpp[Type_GetTypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeHandle/CPP/Type_GetTypeHandle.cpp#1)]
 [!code-csharp[Type_GetTypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeHandle/CS/type_gettypehandle.cs#1)]
 [!code-vb[Type_GetTypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeHandle/VB/type_gettypehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-3182">
            <paramref name="o" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3182">
              <paramref name="o" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public abstract Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Guid GUID { Guid get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.GUID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3183">
            <see cref="T:System.Type" />과 관련된 GUID를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3183">Gets the GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3184">
            <see cref="T:System.Type" />과 관련된 GUID입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3184">The GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3185">사용 하 여 형식과 연결 된 GUID는 <xref:System.Runtime.InteropServices.GuidAttribute> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3185">A GUID is associated with a type using the <xref:System.Runtime.InteropServices.GuidAttribute> attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3186">다음 예제에서는 클래스를 만드는 `MyClass1` 는 공용 메서드를 사용 하 여 만듭니다는 `Type` 개체에 해당 하 `MyClass1`, 가져옵니다는 <xref:System.Guid> 를 사용 하 여 구조체는 `GUID` 속성의는 `Type` 클래스.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3186">The following example creates the class `MyClass1` with a public method, creates a `Type` object corresponding to `MyClass1`, and gets the <xref:System.Guid> structure using the `GUID` property of the `Type` class.</span></span>  
  
 [!code-cpp[Type_Guid#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Guid/CPP/type_guid.cpp#1)]
 [!code-csharp[Type_Guid#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Guid/CS/type_guid.cs#1)]
 [!code-vb[Type_Guid#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Guid/VB/type_guid.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.HasElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3187">현재 <see cref="T:System.Type" />이 다른 형식을 포함하거나 참조하는지 여부, 즉 현재 <see cref="T:System.Type" />이 배열 또는 포인터이거나 참조로 전달되는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3187">Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3188">
            <see langword="true" />이 배열 또는 포인터이거나 참조로 전달되면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3188">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3189">예를 들어 Type.GetType("Int32[]") 합니다. HasElementType 반환 `true`, 하지만 Type.GetType("Int32") 합니다. HasElementType 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3189">For example, Type.GetType("Int32[]").HasElementType returns `true`, but Type.GetType("Int32").HasElementType returns `false`.</span></span> <span data-ttu-id="ef7f9-3190">HasElementType도 반환 `true` "Int32 \*"에 대 한 및 "Int32 &".</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3190">HasElementType also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
 <span data-ttu-id="ef7f9-3191">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수 나타냅니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3191">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3192">다음 예에서는 반환 `true` 또는 `false` 개체가 배열, 참조 형식 또는 포인터 인지 여부에 따라 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3192">The following example returns `true` or `false` depending on whether or not the object is an array, a reference type, or a pointer.</span></span>  
  
 [!code-cpp[Type_HasElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementType/CPP/type_haselementtype.cpp#1)]
 [!code-csharp[Type_HasElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementType/CS/type_haselementtype.cs#1)]
 [!code-vb[Type_HasElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementType/VB/type_haselementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.HasElementTypeImpl" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected abstract bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool HasElementTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3193">파생 클래스에서 재정의되면, <see cref="P:System.Type.HasElementType" /> 속성을 구현하고 현재 <see cref="T:System.Type" />이 다른 형식을 포함하거나 참조하는지 여부, 즉 현재 <see cref="T:System.Type" />이 배열 또는 포인터이거나 참조로 전달되는지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3193">When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3194">
            <see langword="true" />이 배열 또는 포인터이거나 참조로 전달되면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3194">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3195">예를 들어 Type.GetType("Int32[]") 합니다. 에서는 반환 `true`, 하지만 Type.GetType("Int32") 합니다. 에서는 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3195">For example, Type.GetType("Int32[]").HasElementTypeImpl returns `true`, but Type.GetType("Int32").HasElementTypeImpl returns `false`.</span></span> <span data-ttu-id="ef7f9-3196">에서는 또한 반환 `true` "Int32 \*"에 대 한 및 "Int32 &".</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3196">HasElementTypeImpl also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3197">다음 예제에서는 클래스를 정의 `MyTypeDelegator`, 재정의 하는 `HasElementTypeImpl` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3197">The following example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="ef7f9-3198">기본 클래스에 대 한 검사는 `HasElementType` 요소의 입력 속성을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3198">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3199">현재 <see cref="T:System.Type" />의 특정 멤버를 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3199">Invokes a specific member of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-3200">호출할 생성자, 메서드, 속성 또는 필드 멤버의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3200">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="ef7f9-3201">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3201">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3202">기본 멤버를 호출하는 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3202">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="ef7f9-3203">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3203">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3204">
            <see langword="IDispatch" /> 멤버의 경우 DispID를 나타내는 문자열(예: "[DispID=3]")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3204">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="ef7f9-3205">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3205">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-3206">액세스 권한은 <see langword="BindingFlags" />, <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" /> 등과 같은 <see langword="GetField" /> 중 하나가 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3206">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="ef7f9-3207">조회 형식을 지정할 필요가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3207">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="ef7f9-3208">조회 형식을 생략하면 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />이 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3208">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="ef7f9-3209">속성 집합을 정의하고 바인딩을 활성화하는 개체입니다. 이 개체는 또한 리플렉션을 통해 오버로드된 메서드를 선택할 수 있고 인수 형식을 강제 변환할 수 있으며 멤버를 호출할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3209">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="ef7f9-3210">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3210">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3211">
            <see langword="Nothing" />를 사용하려면 null 참조(Visual Basic의 경우 <see cref="P:System.Type.DefaultBinder" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3211">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3212">변수 인수를 사용하여 메서드 오버로드를 호출하려면 <see cref="T:System.Reflection.Binder" /> 개체를 명시적으로 정의해야 할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3212">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="ef7f9-3213">지정한 멤버를 호출할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3213">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="ef7f9-3214">호출할 멤버에 전달하는 인수를 포함하는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3214">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3215">지정된 바인딩 제약 조건과 인수 목록을 사용하여 지정된 멤버를 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3215">Invokes the specified member, using the specified binding constraints and matching the specified argument list.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3216">호출된 멤버의 반환 값을 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3216">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3217">사용할 수 없습니다 <xref:System.Type.InvokeMember%2A> 제네릭 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3217">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="ef7f9-3218">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 멤버를 정의 하는 검색에 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3218">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-3219">지정 `BindingFlags.Public` 검색에 공용 멤버를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3219">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-3220">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 멤버 (즉,: 전용 및 보호 된 멤버)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3220">Specify `BindingFlags.NonPublic` to include non-public members (that is, private and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-3221">지정 `BindingFlags.FlattenHierarchy` 정적 멤버는 계층 구조를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3221">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="ef7f9-3222">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3222">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-3223">`BindingFlags.IgnoreCase` 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3223">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3224">`BindingFlags.DeclaredOnly` 에 선언 된 멤버만 검색 하는 <xref:System.Type>, 상속 된 멤버가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3224">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-3225">다음 <xref:System.Reflection.BindingFlags> 호출 플래그 멤버와 수행할 작업을 나타내는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3225">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="ef7f9-3226">`CreateInstance` 생성자를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3226">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="ef7f9-3227">`name` 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3227">`name` is ignored.</span></span> <span data-ttu-id="ef7f9-3228">다른 호출 플래그와 함께 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3228">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="ef7f9-3229">`InvokeMethod` 메서드를 있지만 하지 생성자 또는 형식 이니셜라이저가 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3229">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="ef7f9-3230">함께 사용할 수 없습니다 `SetField` 또는 `SetProperty`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3230">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="ef7f9-3231">경우 `InvokeMethod` 단독으로 지정 된 `BindingFlags.Public`, `BindingFlags.Instance`, 및 `BindingFlags.Static` 자동으로 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3231">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="ef7f9-3232">`GetField` 필드의 값을 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3232">`GetField` to get the value of a field.</span></span> <span data-ttu-id="ef7f9-3233">함께 사용할 수 없습니다 `SetField`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3233">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3234">`SetField` 필드의 값을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3234">`SetField` to set the value of a field.</span></span> <span data-ttu-id="ef7f9-3235">함께 사용할 수 없습니다 `GetField`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3235">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3236">`GetProperty` 속성을 가져오기.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3236">`GetProperty` to get a property.</span></span> <span data-ttu-id="ef7f9-3237">함께 사용할 수 없습니다 `SetProperty`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3237">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3238">`SetProperty` 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3238">`SetProperty` to set a property.</span></span> <span data-ttu-id="ef7f9-3239">함께 사용할 수 없습니다 `GetProperty`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3239">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="ef7f9-3240">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3240">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-3241">메서드는 다음 조건이 모두 해당 하는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3241">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="ef7f9-3242">메서드 선언의 매개 변수 수가의 인수 개수는 `args` 배열 (기본 인수는 멤버에 대해 정의 되지 않은 경우 및 `BindingFlags.OptionalParamBinding` 지정).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3242">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="ef7f9-3243">각 인수 형식이 매개 변수 형식의 바인더에서 변환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3243">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="ef7f9-3244">바인더는 모두 일치 하는 메서드 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3244">The binder will find all of the matching methods.</span></span> <span data-ttu-id="ef7f9-3245">요청 된 바인딩 형식에 따라 이들이 메서드를 찾습니다 (<xref:System.Reflection.BindingFlags> 값 `InvokeMethod`, `GetProperty`등).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3245">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="ef7f9-3246">메서드의 집합 이름, 인수 개수를 및 바인더에서 정의 된 검색 한정자 집합으로 필터링 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3246">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="ef7f9-3247">메서드가 선택 된 후 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3247">After the method is selected, it is invoked.</span></span> <span data-ttu-id="ef7f9-3248">내게 필요한 옵션은 해당 시점에 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3248">Accessibility is checked at that point.</span></span> <span data-ttu-id="ef7f9-3249">검색은 메서드와 연결 된 내게 필요한 옵션 특성에 따라 검색할 어떤 메서드 집합을 제어할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3249">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="ef7f9-3250"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> 의 메서드는 <xref:System.Reflection.Binder> 클래스는 메서드를 호출할 수를 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3250">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="ef7f9-3251">기본 바인더 가장 구체적으로 일치를 선택합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3251">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="ef7f9-3252">완전히 신뢰할 수 있는 코드;에 대 한 액세스 제한은 무시 됩니다. 즉, private 생성자, 메서드, 필드 및 속성 액세스 하 고 수를 통해 호출 <xref:System.Reflection> 때마다 코드는 완전히 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3252">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="ef7f9-3253">사용할 수 있습니다 `Type.InvokeMember` 필드를 지정 하 여 특정 값으로 설정 <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3253">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ef7f9-3254">예를 들어 F C 및 F 클래스에 라는 공용 인스턴스 필드를 설정 하려면이 `String`와 같은 코드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3254">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"});`  
  
 <span data-ttu-id="ef7f9-3255">F가는 `String[]`와 같은 코드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3255">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}});`  
  
 <span data-ttu-id="ef7f9-3256">이 새 배열 F 필드가 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3256">which will initialize the field F to this new array.</span></span> <span data-ttu-id="ef7f9-3257">사용할 수도 있습니다 `Type.InvokeMember` 다음과 같은 코드를 사용 하 여 값 및 다음 값의 인덱스를 제공 하 여 배열에서 위치를 설정 하려면:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3257">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"});`  
  
 <span data-ttu-id="ef7f9-3258">문자열 "b"에 F를 보유 하는 배열에서 문자열 "z" 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3258">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="ef7f9-3259">호출 하는 경우는 `IDispatch` 멤버, 멤버 이름 대신 DispID 문자열 형식을 사용 하 여 지정할 수 있습니다 "[DispID = # #]"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3259">When you invoke an `IDispatch` member, you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="ef7f9-3260">예를 들어 MyComMethod DispID이 3 이면 문자열 지정할 수 "[DispID = 3]" 대신 "MyComMethod"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3260">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="ef7f9-3261">DispID로 멤버를 호출 하는 보다 이름별으로 멤버를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3261">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="ef7f9-3262">복잡 한 집계 시나리오에서에서는 DispID가 경우에 따라 원하는 멤버를 호출 하는 유일한 방법은 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3262">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3263">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)],이 메서드를 사용 하 여 호출자에 게 부여 된 경우 public이 아닌 멤버에 액세스할 수 수 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그 지정 및 public이 아닌 멤버의 권한 부여 집합은 호출자에 게 제한 하는 경우 집합 또는 하위 집합을 부여 해당 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3263">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="ef7f9-3264">(참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3264">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="ef7f9-3265">이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3265">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3266">다음 예제에서는 `InvokeMember` 형식의 멤버에 액세스 하 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3266">The following example uses `InvokeMember` to access members of a type.</span></span>  
  
 [!code-cpp[InvokeMem#1](~/samples/snippets/cpp/VS_Snippets_CLR/InvokeMem/CPP/invokemem.cpp#1)]
 [!code-csharp[InvokeMem#1](~/samples/snippets/csharp/VS_Snippets_CLR/InvokeMem/CS/invokemem.cs#1)]
 [!code-vb[InvokeMem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InvokeMem/VB/invokemem.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-3267">
            <paramref name="invokeAttr" />에 <see langword="CreateInstance" />가 포함되어 있지 않으며 <paramref name="name" />이 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3267">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-3268">
            <paramref name="invokeAttr" />이 올바른 <see cref="T:System.Reflection.BindingFlags" /> 특성이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3268">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="ef7f9-3269">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3269">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3270">
            <paramref name="invokeAttr" />에 <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> 또는 <see langword="SetProperty" /> 바인딩 플래그 중 하나가 포함되어 있지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3270">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3271">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3271">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3272">
            <paramref name="invokeAttr" />에 <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> 또는 <see langword="SetProperty" />와 결합된 <see langword="CreateInstance" />가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3272">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3273">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3273">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3274">
            <paramref name="invokeAttr" />에 <see langword="GetField" />와 <see langword="SetField" />가 둘 다 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3274">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3275">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3275">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3276">
            <paramref name="invokeAttr" />에 <see langword="GetProperty" />와 <see langword="SetProperty" />가 둘 다 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3276">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3277">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3277">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3278">
            <paramref name="invokeAttr" />에 <see langword="SetField" /> 또는 <see langword="SetProperty" />와 결합된 <see langword="InvokeMethod" />가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3278">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3279">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3279">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3280">
            <paramref name="invokeAttr" />에 <see langword="SetField" />가 포함되어 있으며 <paramref name="args" />에 둘 이상의 요소가 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3280">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="ef7f9-3281">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3281">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3282">이 메서드가 COM 개체에 대해 호출되고 다음 바인딩 플래그 중 하나가 <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> 또는 <see langword="BindingFlags.PutRefDispProperty" />로 전달되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3282">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3283">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3283">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3284">명명된 매개 변수 배열 중 하나에 <see langword="null" />인 문자열이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3284">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="ef7f9-3285">지정된 멤버가 클래스 이니셜라이저입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3285">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="ef7f9-3286">필드 또는 속성을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3286">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="ef7f9-3287">
            <paramref name="args" />의 인수와 일치하는 메서드를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3287">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3288">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3288">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3289">현재 <see cref="T:System.Type" /> 개체가 개방형 매개 변수를 포함하는 형식, 즉, <see cref="P:System.Type.ContainsGenericParameters" />가 <see langword="true" />를 반환하는 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3289">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="ef7f9-3290">지정된 멤버를 <paramref name="target" />에 대해 호출할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3290">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-3291">두 개 이상의 메서드가 바인딩 기준과 일치합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3291">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-3292">.NET Compact Framework에서는 현재 이 메서드를 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3292">The .NET Compact Framework does not currently support this method.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ef7f9-3293">
            <paramref name="name" />이 나타내는 메서드에 두 개 이상의 제네릭 형식 매개 변수가 지정되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3293">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="ef7f9-3294">즉, 메서드의 <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> 속성이 <see langword="true" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3294">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ef7f9-3295">해당 권한 부여에 관계 없이 public이 아닌 멤버에 액세스 하기 위해 다음을 설정 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3295">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="ef7f9-3296">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3296">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="ef7f9-3297">비관리 코드를 호출 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3297">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="ef7f9-3298">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3298">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-3299">호출할 생성자, 메서드, 속성 또는 필드 멤버의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3299">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="ef7f9-3300">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3300">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3301">기본 멤버를 호출하는 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3301">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="ef7f9-3302">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3302">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3303">
            <see langword="IDispatch" /> 멤버의 경우 DispID를 나타내는 문자열(예: "[DispID=3]")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3303">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="ef7f9-3304">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3304">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-3305">액세스 권한은 <see langword="BindingFlags" />, <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" /> 등과 같은 <see langword="GetField" /> 중 하나가 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3305">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="ef7f9-3306">조회 형식을 지정할 필요가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3306">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="ef7f9-3307">조회 형식을 생략하면 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />이 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3307">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="ef7f9-3308">속성 집합을 정의하고 바인딩을 활성화하는 개체입니다. 이 개체는 또한 리플렉션을 통해 오버로드된 메서드를 선택할 수 있고 인수 형식을 강제 변환할 수 있으며 멤버를 호출할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3308">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="ef7f9-3309">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3309">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3310">
            <see langword="Nothing" />를 사용하려면 null 참조(Visual Basic의 경우 <see cref="P:System.Type.DefaultBinder" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3310">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3311">변수 인수를 사용하여 메서드 오버로드를 호출하려면 <see cref="T:System.Reflection.Binder" /> 개체를 명시적으로 정의해야 할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3311">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="ef7f9-3312">지정한 멤버를 호출할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3312">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="ef7f9-3313">호출할 멤버에 전달하는 인수를 포함하는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3313">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="ef7f9-3314">사용할 전역화 로캘을 나타내는 개체입니다. 이 개체는 숫자 <see cref="T:System.String" />을 <see cref="T:System.Double" />로 변환하는 등의 로캘별 변환에 사용할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3314">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3315">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3315">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3316">현재 스레드의 <see langword="Nothing" />를 사용하려면 null 참조(Visual Basic의 경우 <see cref="T:System.Globalization.CultureInfo" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3316">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3317">지정된 바인딩 제약 조건과 지정된 인수 목록 및 문화권을 사용하여 지정된 멤버를 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3317">Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3318">호출된 멤버의 반환 값을 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3318">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3319">기본 바인더는 처리 하지 않더라도 <xref:System.Globalization.CultureInfo> (의 `culture` 매개 변수), 추상을 사용할 수 있습니다 <xref:System.Reflection.Binder?displayProperty=nameWithType> 클래스는 사용자 지정 처리 하는 바인더를 작성 하 `culture`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3319">Although the default binder does not process <xref:System.Globalization.CultureInfo> (the `culture` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `culture`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3320">사용할 수 없습니다 <xref:System.Type.InvokeMember%2A> 제네릭 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3320">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="ef7f9-3321">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 멤버를 정의 하는 검색에 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3321">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-3322">지정 `BindingFlags.Public` 검색에 공용 멤버를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3322">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-3323">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 멤버 (즉, 전용, 내부 및 보호 된 멤버)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3323">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-3324">지정 `BindingFlags.FlattenHierarchy` 정적 멤버는 계층 구조를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3324">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="ef7f9-3325">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3325">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-3326">`BindingFlags.IgnoreCase` 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3326">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3327">`BindingFlags.DeclaredOnly` 에 선언 된 멤버만 검색 하는 <xref:System.Type>, 상속 된 멤버가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3327">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-3328">다음 <xref:System.Reflection.BindingFlags> 호출 플래그 멤버와 수행할 작업을 나타내는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3328">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="ef7f9-3329">`CreateInstance` 생성자를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3329">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="ef7f9-3330">`name` 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3330">`name` is ignored.</span></span> <span data-ttu-id="ef7f9-3331">다른 호출 플래그와 함께 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3331">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="ef7f9-3332">`InvokeMethod` 메서드를 있지만 하지 생성자 또는 형식 이니셜라이저가 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3332">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="ef7f9-3333">함께 사용할 수 없습니다 `SetField` 또는 `SetProperty`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3333">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="ef7f9-3334">경우 `InvokeMethod` 단독으로 지정 된 `BindingFlags.Public`, `BindingFlags.Instance`, 및 `BindingFlags.Static` 자동으로 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3334">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="ef7f9-3335">`GetField` 필드의 값을 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3335">`GetField` to get the value of a field.</span></span> <span data-ttu-id="ef7f9-3336">함께 사용할 수 없습니다 `SetField`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3336">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3337">`SetField` 필드의 값을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3337">`SetField` to set the value of a field.</span></span> <span data-ttu-id="ef7f9-3338">함께 사용할 수 없습니다 `GetField`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3338">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3339">`GetProperty` 속성을 가져오기.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3339">`GetProperty` to get a property.</span></span> <span data-ttu-id="ef7f9-3340">함께 사용할 수 없습니다 `SetProperty`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3340">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3341">`SetProperty` 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3341">`SetProperty` to set a property.</span></span> <span data-ttu-id="ef7f9-3342">함께 사용할 수 없습니다 `GetProperty`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3342">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="ef7f9-3343">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3343">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-3344">메서드는 다음 조건이 모두 해당 하는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3344">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="ef7f9-3345">메서드 선언의 매개 변수 수가의 인수 개수는 `args` 배열 (기본 인수는 멤버에 대해 정의 되지 않은 경우 및 `BindingFlags.OptionalParamBinding` 지정).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3345">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="ef7f9-3346">각 인수 형식이 매개 변수 형식의 바인더에서 변환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3346">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="ef7f9-3347">바인더는 모두 일치 하는 메서드 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3347">The binder will find all of the matching methods.</span></span> <span data-ttu-id="ef7f9-3348">요청 된 바인딩 형식에 따라 이들이 메서드를 찾습니다 (<xref:System.Reflection.BindingFlags> 값 `InvokeMethod`, `GetProperty`등).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3348">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="ef7f9-3349">메서드의 집합 이름, 인수 개수를 및 바인더에서 정의 된 검색 한정자 집합으로 필터링 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3349">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="ef7f9-3350">메서드가 선택 된 후 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3350">After the method is selected, it is invoked.</span></span> <span data-ttu-id="ef7f9-3351">내게 필요한 옵션은 해당 시점에 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3351">Accessibility is checked at that point.</span></span> <span data-ttu-id="ef7f9-3352">검색은 메서드와 연결 된 내게 필요한 옵션 특성에 따라 검색할 어떤 메서드 집합을 제어할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3352">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="ef7f9-3353"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> 의 메서드는 <xref:System.Reflection.Binder> 클래스는 메서드를 호출할 수를 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3353">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="ef7f9-3354">기본 바인더 가장 구체적으로 일치를 선택합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3354">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="ef7f9-3355">완전히 신뢰할 수 있는 코드;에 대 한 액세스 제한은 무시 됩니다. 즉, private 생성자, 메서드, 필드 및 속성 액세스 하 고 수 코드를 완전히 신뢰할 수 있는 경우 리플렉션을 통해 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3355">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="ef7f9-3356">사용할 수 있습니다 `Type.InvokeMember` 필드를 지정 하 여 특정 값으로 설정 <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3356">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ef7f9-3357">예를 들어 F C 및 F 클래스에 라는 공용 인스턴스 필드를 설정 하려면이 `String` 와 같은 코드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3357">For example, if you want to set a public instance field named F on class C, and F is a `String` you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null);`  
  
 <span data-ttu-id="ef7f9-3358">F가는 `String[]`와 같은 코드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3358">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null);`  
  
 <span data-ttu-id="ef7f9-3359">이 새 배열 F 필드가 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3359">which will initialize the field F to this new array.</span></span> <span data-ttu-id="ef7f9-3360">사용할 수도 있습니다 `Type.InvokeMember` 다음과 같은 코드를 사용 하 여 값 및 다음 값의 인덱스를 제공 하 여 배열에서 위치를 설정 하려면:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3360">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null);`  
  
 <span data-ttu-id="ef7f9-3361">문자열 "b"에 F를 보유 하는 배열에서 문자열 "z" 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3361">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="ef7f9-3362">호출 하는 경우는 `IDispatch` 멤버는 멤버 이름 대신 문자열 형식을 사용 하 여 dispid 값을 지정할 수 있습니다 "[DispID = # #]"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3362">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="ef7f9-3363">예를 들어 MyComMethod DispID이 3 이면 문자열 지정할 수 "[DispID = 3]" 대신 "MyComMethod"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3363">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="ef7f9-3364">DispID로 멤버를 호출 하는 보다 이름별으로 멤버를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3364">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="ef7f9-3365">복잡 한 집계 시나리오에서에서는 DispID가 경우에 따라 원하는 멤버를 호출 하는 유일한 방법은 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3365">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3366">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)],이 메서드를 사용 하 여 호출자에 게 부여 된 경우 public이 아닌 멤버에 액세스할 수 수 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그 지정 및 public이 아닌 멤버의 권한 부여 집합은 호출자에 게 제한 하는 경우 집합 또는 하위 집합을 부여 해당 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3366">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="ef7f9-3367">(참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3367">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="ef7f9-3368">이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3368">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-3369">
            <paramref name="invokeAttr" />에 <see langword="CreateInstance" />가 포함되어 있지 않으며 <paramref name="name" />이 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3369">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-3370">
            <paramref name="invokeAttr" />이 올바른 <see cref="T:System.Reflection.BindingFlags" /> 특성이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3370">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="ef7f9-3371">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3371">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3372">
            <paramref name="invokeAttr" />에 <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> 또는 <see langword="SetProperty" /> 바인딩 플래그 중 하나가 포함되어 있지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3372">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3373">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3373">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3374">
            <paramref name="invokeAttr" />에 <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> 또는 <see langword="SetProperty" />와 결합된 <see langword="CreateInstance" />가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3374">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3375">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3375">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3376">
            <paramref name="invokeAttr" />에 <see langword="GetField" />와 <see langword="SetField" />가 둘 다 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3376">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3377">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3377">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3378">
            <paramref name="invokeAttr" />에 <see langword="GetProperty" />와 <see langword="SetProperty" />가 둘 다 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3378">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3379">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3379">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3380">
            <paramref name="invokeAttr" />에 <see langword="SetField" /> 또는 <see langword="SetProperty" />와 결합된 <see langword="InvokeMethod" />가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3380">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3381">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3381">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3382">
            <paramref name="invokeAttr" />에 <see langword="SetField" />가 포함되어 있으며 <paramref name="args" />에 둘 이상의 요소가 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3382">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="ef7f9-3383">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3383">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3384">이 메서드가 COM 개체에 대해 호출되고 다음 바인딩 플래그 중 하나가 <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> 또는 <see langword="BindingFlags.PutRefDispProperty" />로 전달되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3384">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3385">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3385">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3386">명명된 매개 변수 배열 중 하나에 <see langword="null" />인 문자열이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3386">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="ef7f9-3387">지정된 멤버가 클래스 이니셜라이저입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3387">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="ef7f9-3388">필드 또는 속성을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3388">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="ef7f9-3389">
            <paramref name="args" />의 인수와 일치하는 메서드를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3389">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3390">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3390">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3391">현재 <see cref="T:System.Type" /> 개체가 개방형 매개 변수를 포함하는 형식, 즉, <see cref="P:System.Type.ContainsGenericParameters" />가 <see langword="true" />를 반환하는 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3391">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="ef7f9-3392">지정된 멤버를 <paramref name="target" />에 대해 호출할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3392">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-3393">두 개 이상의 메서드가 바인딩 기준과 일치합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3393">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ef7f9-3394">
            <paramref name="name" />이 나타내는 메서드에 두 개 이상의 제네릭 형식 매개 변수가 지정되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3394">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="ef7f9-3395">즉, 메서드의 <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> 속성이 <see langword="true" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3395">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ef7f9-3396">해당 권한 부여에 관계 없이 public이 아닌 멤버에 액세스 하기 위해 다음을 설정 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3396">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="ef7f9-3397">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3397">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="ef7f9-3398">비관리 코드를 호출 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3398">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="ef7f9-3399">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3399">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public abstract object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="ef7f9-3400">호출할 생성자, 메서드, 속성 또는 필드 멤버의 이름이 포함된 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3400">The string containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="ef7f9-3401">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3401">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3402">기본 멤버를 호출하는 빈 문자열("")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3402">An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="ef7f9-3403">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3403">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3404">
            <see langword="IDispatch" /> 멤버의 경우 DispID를 나타내는 문자열(예: "[DispID=3]")입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3404">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="ef7f9-3405">검색 방법을 지정하는 하나 이상의 <see cref="T:System.Reflection.BindingFlags" />로 구성된 비트 마스크입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3405">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="ef7f9-3406">액세스 권한은 <see langword="BindingFlags" />, <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" /> 등과 같은 <see langword="GetField" /> 중 하나가 될 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3406">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="ef7f9-3407">조회 형식을 지정할 필요가 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3407">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="ef7f9-3408">조회 형식을 생략하면 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />이 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3408">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="ef7f9-3409">속성 집합을 정의하고 바인딩을 활성화하는 개체입니다. 이 개체는 또한 리플렉션을 통해 오버로드된 메서드를 선택할 수 있고 인수 형식을 강제 변환할 수 있으며 멤버를 호출할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3409">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="ef7f9-3410">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3410">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3411">
            <see cref="P:System.Type.DefaultBinder" />를 사용할 null 참조(Visual Basic에는 없음)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3411">A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3412">변수 인수를 사용하여 메서드 오버로드를 호출하려면 <see cref="T:System.Reflection.Binder" /> 개체를 명시적으로 정의해야 할 수도 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3412">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="ef7f9-3413">지정한 멤버를 호출할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3413">The object on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="ef7f9-3414">호출할 멤버에 전달하는 인수를 포함하는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3414">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="ef7f9-3415">
            <c>args</c> 배열에서 해당하는 요소와 연관된 특성을 나타내는 <see cref="T:System.Reflection.ParameterModifier" /> 개체 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3415">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>args</c> array.</span>
          </span>
          <span data-ttu-id="ef7f9-3416">매개 변수의 관련 특성은 해당 멤버의 시그니처에 저장됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3416">A parameter's associated attributes are stored in the member's signature.</span>
          </span>
          <span data-ttu-id="ef7f9-3417">기본 바인더는 COM 구성 요소를 호출하는 경우에만 이 매개 변수를 처리합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3417">The default binder processes this parameter only when calling a COM component.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="ef7f9-3418">사용할 전역화 로캘을 나타내는 <see cref="T:System.Globalization.CultureInfo" /> 개체입니다. 이 개체는 숫자 String을 Double로 변환하는 등의 로캘 관련 변환에 사용할 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3418">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span>
          </span>
          <span data-ttu-id="ef7f9-3419">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3419">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3420">현재 스레드의 <see langword="Nothing" />를 사용하려면 null 참조(Visual Basic의 경우 <see cref="T:System.Globalization.CultureInfo" />)입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3420">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="ef7f9-3421">
            <c>args</c> 배열의 값이 전달될 매개 변수의 이름이 있는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3421">An array containing the names of the parameters to which the values in the <c>args</c> array are passed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3422">파생 클래스에서 재정의되면, 지정된 바인딩 제약 조건과 지정된 인수 목록, 한정자 및 문화권을 사용하여 지정된 멤버를 호출합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3422">When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3423">호출된 멤버의 반환 값을 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3423">An object representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3424">`InvokeMember` 생성자 멤버 또는 멤버 메서드를 호출, 가져옵니다 또는 속성 멤버를 설정, 가져옵니다 또는 데이터 필드 멤버를 설정 또는 가져옵니다 또는 배열 멤버의 요소를 가져오거나 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3424">`InvokeMember` calls a constructor member or a method member, gets or sets a property member, gets or sets a data field member, or gets or sets an element of an array member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3425">사용할 수 없습니다 <xref:System.Type.InvokeMember%2A> 제네릭 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3425">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="ef7f9-3426">호출 하는 경우는 `IDispatch` 멤버는 멤버 이름 대신 문자열 형식을 사용 하 여 dispid 값을 지정할 수 있습니다 "[DispID = # #]"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3426">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="ef7f9-3427">예를 들어 MyComMethod DispID이 3 이면 문자열 지정할 수 "[DispID = 3]" 대신 "MyComMethod"입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3427">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="ef7f9-3428">DispID로 멤버를 호출 하는 보다 이름별으로 멤버를 조회 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3428">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="ef7f9-3429">복잡 한 집계 시나리오에서에서는 DispID가 경우에 따라 원하는 멤버를 호출 하는 유일한 방법은 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3429">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
 <span data-ttu-id="ef7f9-3430">기본 바인더는 처리 하지 않더라도 <xref:System.Reflection.ParameterModifier> 또는 <xref:System.Globalization.CultureInfo> (의 `modifiers` 및 `culture` 매개 변수), 추상을 사용할 수 있습니다 <xref:System.Reflection.Binder?displayProperty=nameWithType> 클래스는 사용자 지정 처리 하는 바인더를 작성 하 `modifiers` 및 `culture`.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3430">Although the default binder does not process <xref:System.Reflection.ParameterModifier> or <xref:System.Globalization.CultureInfo> (the `modifiers` and `culture` parameters), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers` and `culture`.</span></span> <span data-ttu-id="ef7f9-3431">`ParameterModifier` COM interop를 통해 호출할 때만 사용 되 고 참조로 전달 되는 매개 변수만 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3431">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="ef7f9-3432">`namedParameters` 배열의 각 매개 변수는 `args` 배열에 있는 해당 요소의 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3432">Each parameter in the `namedParameters` array gets the value in the corresponding element in the `args` array.</span></span> <span data-ttu-id="ef7f9-3433">`args`의 길이가 `namedParameters`의 길이보다 크면 나머지 인수 값은 순서대로 전달됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3433">If the length of `args` is greater than the length of `namedParameters`, the remaining argument values are passed in order.</span></span>  
  
 <span data-ttu-id="ef7f9-3434">`namedParameters` 입력된 배열에 있는 인수의 순서를 변경 하려면 배열은 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3434">The `namedParameters` array can be used to change the order of arguments in an input array.</span></span> <span data-ttu-id="ef7f9-3435">예를 들어 메서드가 있다고 가정 하면 `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` Visual basic에서) 및 입력된 배열 `{ 42, "x" }`, 입력된 배열에 변경 되지 않은 전달 될 수 있습니다 `args` 경우 배열 `{ "b", "a" }` 을 위해 제공 된 `namedParameters`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3435">For example, given the method `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` in Visual Basic) and the input array `{ 42, "x" }`, the input array can be passed unchanged to `args` if the array `{ "b", "a" }` is supplied for `namedParameters`.</span></span>  
  
 <span data-ttu-id="ef7f9-3436">다음 <xref:System.Reflection.BindingFlags> 필터 플래그를 사용 하 여 멤버를 정의 하는 검색에 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3436">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="ef7f9-3437">지정 `BindingFlags.Public` 검색에 공용 멤버를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3437">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-3438">지정 `BindingFlags.NonPublic` 검색에 public이 아닌 멤버 (즉, 전용, 내부 및 보호 된 멤버)를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3438">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="ef7f9-3439">지정 `BindingFlags.FlattenHierarchy` 정적 멤버는 계층 구조를 포함 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3439">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="ef7f9-3440">다음 <xref:System.Reflection.BindingFlags> 한정자 플래그를 사용 하 여 검색의 작동 방식을 변경할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3440">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="ef7f9-3441">`BindingFlags.IgnoreCase` 대/소문자를 무시 하려면 `name`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3441">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3442">`BindingFlags.DeclaredOnly` 에 선언 된 멤버만 검색 하는 <xref:System.Type>, 상속 된 멤버가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3442">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="ef7f9-3443">다음 <xref:System.Reflection.BindingFlags> 호출 플래그 멤버와 수행할 작업을 나타내는 데 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3443">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="ef7f9-3444">`CreateInstance` 생성자를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3444">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="ef7f9-3445">`name` 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3445">`name` is ignored.</span></span> <span data-ttu-id="ef7f9-3446">다른 호출 플래그와 함께 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3446">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="ef7f9-3447">`InvokeMethod` 메서드를 있지만 하지 생성자 또는 형식 이니셜라이저가 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3447">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="ef7f9-3448">함께 사용할 수 없습니다 `SetField` 또는 `SetProperty`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3448">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="ef7f9-3449">경우 `InvokeMethod` 단독으로 지정 된 `BindingFlags.Public`, `BindingFlags.Instance`, 및 `BindingFlags.Static` 자동으로 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3449">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="ef7f9-3450">`GetField` 필드의 값을 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3450">`GetField` to get the value of a field.</span></span> <span data-ttu-id="ef7f9-3451">함께 사용할 수 없습니다 `SetField`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3451">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3452">`SetField` 필드의 값을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3452">`SetField` to set the value of a field.</span></span> <span data-ttu-id="ef7f9-3453">함께 사용할 수 없습니다 `GetField`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3453">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3454">`GetProperty` 속성을 가져오기.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3454">`GetProperty` to get a property.</span></span> <span data-ttu-id="ef7f9-3455">함께 사용할 수 없습니다 `SetProperty`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3455">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3456">`SetProperty` 속성을 설정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3456">`SetProperty` to set a property.</span></span> <span data-ttu-id="ef7f9-3457">함께 사용할 수 없습니다 `GetProperty`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3457">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="ef7f9-3458">자세한 내용은 <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3458">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="ef7f9-3459">메서드는 다음 조건이 모두 해당 하는 경우 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3459">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="ef7f9-3460">메서드 선언의 매개 변수 수가의 인수 개수는 `args` 배열 (기본 인수는 멤버에 대해 정의 되지 않은 경우 및 `BindingFlags.OptionalParamBinding` 지정).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3460">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="ef7f9-3461">각 인수 형식이 매개 변수 형식의 바인더에서 변환할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3461">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="ef7f9-3462">바인더는 모두 일치 하는 메서드 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3462">The binder will find all of the matching methods.</span></span> <span data-ttu-id="ef7f9-3463">요청 된 바인딩 형식에 따라 이들이 메서드를 찾습니다 (<xref:System.Reflection.BindingFlags> 값 `InvokeMethod`, `GetProperty`등).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3463">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="ef7f9-3464">메서드의 집합 이름, 인수 개수를 및 바인더에서 정의 된 검색 한정자 집합으로 필터링 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3464">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="ef7f9-3465">메서드가 선택 된 후 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3465">After the method is selected, it is invoked.</span></span> <span data-ttu-id="ef7f9-3466">내게 필요한 옵션은 해당 시점에 확인 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3466">Accessibility is checked at that point.</span></span> <span data-ttu-id="ef7f9-3467">검색은 메서드와 연결 된 내게 필요한 옵션 특성에 따라 검색할 어떤 메서드 집합을 제어할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3467">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="ef7f9-3468"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> 의 메서드는 <xref:System.Reflection.Binder> 클래스는 메서드를 호출할 수를 선택 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3468">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="ef7f9-3469">기본 바인더 가장 구체적으로 일치를 선택합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3469">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="ef7f9-3470">`InvokeMember` 용도 기본값이 지정 된 매개 변수가 있는 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3470">`InvokeMember` can be used to invoke methods with parameters that have default values.</span></span> <span data-ttu-id="ef7f9-3471">이러한 메서드에 바인딩할 리플렉션 해야 <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> 를 지정 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3471">To bind to these methods, Reflection requires <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> to be specified.</span></span> <span data-ttu-id="ef7f9-3472">기본값이 있는 매개 변수에 대해 서로 다른 값을 제공 하거나 제공 <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> 기본값을 사용 하도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3472">For a parameter that has a default value, you can either supply a different value, or supply <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> to use the default value.</span></span>  
  
 <span data-ttu-id="ef7f9-3473">예를 들어 MyMethod 같은 메서드 (x, y float int 2.0 =) 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3473">For example, consider a method such as MyMethod(int x, float y = 2.0).</span></span> <span data-ttu-id="ef7f9-3474">이 메서드를 호출 하는 첫 번째 인수 MyMethod(4)로, 위 바인딩 플래그 중 하나를 전달 하 고 첫 번째 인수에 대 한 4 즉, 두 개의 인수를 전달 하 고 `Missing.Value` 두 번째 인수에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3474">To invoke this method with only the first argument as MyMethod(4), pass one of the above binding flags and pass two arguments, namely, 4 for the first argument and `Missing.Value` for the second argument.</span></span> <span data-ttu-id="ef7f9-3475">사용 하지 않는 한 `Missing.Value`와 선택적 매개 변수를 생략할 수 없습니다는 `Invoke` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3475">Unless you use `Missing.Value`, you may not omit optional parameters with the `Invoke` method.</span></span> <span data-ttu-id="ef7f9-3476">이렇게 해야 하는 경우 사용 하 여 `InvokeMember` 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3476">If you must do so, use `InvokeMember` instead.</span></span>  
  
 <span data-ttu-id="ef7f9-3477">완전히 신뢰할 수 있는 코드;에 대 한 액세스 제한은 무시 됩니다. 즉, private 생성자, 메서드, 필드 및 속성 액세스 하 고 수를 통해 호출 <xref:System.Reflection> 때마다 코드는 완전히 신뢰 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3477">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="ef7f9-3478">사용할 수 있습니다 `Type.InvokeMember` 필드를 지정 하 여 특정 값으로 설정 <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3478">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ef7f9-3479">예를 들어 F C 및 F 클래스에 라는 공용 인스턴스 필드를 설정 하려면이 `String`와 같은 코드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3479">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null, null, null);`  
  
 <span data-ttu-id="ef7f9-3480">F가는 `String[]`와 같은 코드를 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3480">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null, null, null);`  
  
 <span data-ttu-id="ef7f9-3481">이 새 배열 F 필드가 초기화 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3481">which will initialize the field F to this new array.</span></span> <span data-ttu-id="ef7f9-3482">사용할 수도 있습니다 `Type.InvokeMember` 다음과 같은 코드를 사용 하 여 값 및 다음 값의 인덱스를 제공 하 여 배열에서 위치를 설정 하려면:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3482">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null, null, null);`  
  
 <span data-ttu-id="ef7f9-3483">문자열 "b"에 F를 보유 하는 배열에서 문자열 "z" 변경 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3483">This will change string "z" in the array that F holds to string "b".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3484">부터는 [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)],이 메서드를 사용 하 여 호출자에 게 부여 된 경우 public이 아닌 멤버에 액세스할 수 수 <xref:System.Security.Permissions.ReflectionPermission> 와 <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> 플래그 지정 및 public이 아닌 멤버의 권한 부여 집합은 호출자에 게 제한 하는 경우 집합 또는 하위 집합을 부여 해당 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3484">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof.</span></span> <span data-ttu-id="ef7f9-3485">(참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3485">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="ef7f9-3486">이 기능을 사용하려면 응용 프로그램이 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 이상을 대상으로 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3486">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-3487">
            <paramref name="invokeAttr" />에 <see langword="CreateInstance" />가 포함되어 있지 않으며 <paramref name="name" />이 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3487">
              <paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-3488">
            <paramref name="args" />와 <paramref name="modifiers" />의 길이가 동일하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3488">
              <paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.</span>
          </span>
          <span data-ttu-id="ef7f9-3489">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3489">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3490">
            <paramref name="invokeAttr" />이 올바른 <see cref="T:System.Reflection.BindingFlags" /> 특성이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3490">
              <paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span>
          </span>
          <span data-ttu-id="ef7f9-3491">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3491">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3492">
            <paramref name="invokeAttr" />에 <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> 또는 <see langword="SetProperty" /> 바인딩 플래그 중 하나가 포함되어 있지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3492">
              <paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3493">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3493">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3494">
            <paramref name="invokeAttr" />에 <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> 또는 <see langword="SetProperty" />와 결합된 <see langword="CreateInstance" />가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3494">
              <paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3495">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3495">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3496">
            <paramref name="invokeAttr" />에 <see langword="GetField" />와 <see langword="SetField" />가 둘 다 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3496">
              <paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3497">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3497">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3498">
            <paramref name="invokeAttr" />에 <see langword="GetProperty" />와 <see langword="SetProperty" />가 둘 다 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3498">
              <paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3499">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3499">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3500">
            <paramref name="invokeAttr" />에 <see langword="SetField" /> 또는 <see langword="SetProperty" />와 결합된 <see langword="InvokeMethod" />가 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3500">
              <paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3501">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3501">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3502">
            <paramref name="invokeAttr" />에 <see langword="SetField" />가 포함되어 있으며 <paramref name="args" />에 둘 이상의 요소가 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3502">
              <paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span>
          </span>
          <span data-ttu-id="ef7f9-3503">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3503">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3504">명명된 매개 변수 배열이 인수 배열보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3504">The named parameter array is larger than the argument array.</span>
          </span>
          <span data-ttu-id="ef7f9-3505">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3505">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3506">이 메서드가 COM 개체에 대해 호출되고 다음 바인딩 플래그 중 하나가 <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" /> 또는 <see langword="BindingFlags.PutRefDispProperty" />로 전달되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3506">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3507">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3507">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3508">명명된 매개 변수 배열 중 하나에 <see langword="null" />인 문자열이 포함되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3508">One of the named parameter arrays contains a string that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.MethodAccessException">
          <span data-ttu-id="ef7f9-3509">지정된 멤버가 클래스 이니셜라이저입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3509">The specified member is a class initializer.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingFieldException">
          <span data-ttu-id="ef7f9-3510">필드 또는 속성을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3510">The field or property cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMethodException">
          <span data-ttu-id="ef7f9-3511">
            <paramref name="args" />의 인수와 일치하는 메서드를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3511">No method can be found that matches the arguments in <paramref name="args" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3512">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3512">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3513">인수 이름이 제공된 멤버를 <paramref name="namedParameters" />에서 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3513">No member can be found that has the argument names supplied in <paramref name="namedParameters" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3514">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3514">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-3515">현재 <see cref="T:System.Type" /> 개체가 개방형 매개 변수를 포함하는 형식, 즉, <see cref="P:System.Type.ContainsGenericParameters" />가 <see langword="true" />를 반환하는 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3515">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetException">
          <span data-ttu-id="ef7f9-3516">지정된 멤버를 <paramref name="target" />에 대해 호출할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3516">The specified member cannot be invoked on <paramref name="target" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="ef7f9-3517">두 개 이상의 메서드가 바인딩 기준과 일치합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3517">More than one method matches the binding criteria.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ef7f9-3518">
            <paramref name="name" />이 나타내는 메서드에 두 개 이상의 제네릭 형식 매개 변수가 지정되지 않았습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3518">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span>
          </span>
          <span data-ttu-id="ef7f9-3519">즉, 메서드의 <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> 속성이 <see langword="true" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3519">That is, the method's <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> property returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="ef7f9-3520">해당 권한 부여에 관계 없이 public이 아닌 멤버에 액세스 하기 위해 다음을 설정 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3520">for accessing non-public members regardless of their grant set.</span>
          </span>
          <span data-ttu-id="ef7f9-3521">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3521">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="ef7f9-3522">비관리 코드를 호출 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3522">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="ef7f9-3523">연결 된 열거형의 경우: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3523">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAbstract</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3524">
            <see cref="T:System.Type" />이 추상이며 재정의되어야 하는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3524">Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3525">
            <see cref="T:System.Type" />이 추상이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3525">
              <see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3526"><xref:System.Type.IsAbstract%2A> 속성에서 반환 `true` 다음과 같은 경우:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3526">The <xref:System.Type.IsAbstract%2A> property returns `true` in the following cases:</span></span>  
  
-   <span data-ttu-id="ef7f9-3527">현재 형식이 추상; 즉, 인스턴스화할 수 없습니다 되지만 파생 된 클래스에 대 한 기본 클래스로 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3527">The current type is abstract; that is, it cannot be instantiated, but can only serve as the base class for derived classes.</span></span> <span data-ttu-id="ef7f9-3528">C#에서 클래스를 추상으로 표시 됩니다는 [추상](~/docs/csharp/language-reference/keywords/abstract.md) 키워드입니다; Visual Basic의 경우에서으로 표시 됩니다는 [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) 키워드입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3528">In C#, abstract classes are marked with the [abstract](~/docs/csharp/language-reference/keywords/abstract.md) keyword; in Visual Basic, they are marked with the [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) keyword.</span></span>  
  
-   <span data-ttu-id="ef7f9-3529">현재 형식이 인터페이스를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3529">The current type is an interface.</span></span>  
  
 <span data-ttu-id="ef7f9-3530">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3530">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3531">다음 예제에서는 배열을 <xref:System.Type> 다음과 같은 형식을 나타내는 개체: 형식 반환 포함 `true` 지정 된 개체가 있으면 `abstract`, 그렇지 않으면 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3531">The following example creates an array of <xref:System.Type> objects that represent the following types:contains type returns `true` if the specified object is `abstract`; otherwise, it returns `false`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3532">`AbstractClass`추상 클래스 (클래스로 표시 `abstract` C# 및 `MustInherit` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3532">`AbstractClass`, an abstract class (a class marked as `abstract` in C# and `MustInherit` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="ef7f9-3533">`DerivedClass`에서 상속 되는 클래스 `AbstractClass`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3533">`DerivedClass`, a class that inherits from `AbstractClass`.</span></span>  
  
-   <span data-ttu-id="ef7f9-3534">`SingleClass`를 상속할 수 없는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3534">`SingleClass`, a non-inheritable class.</span></span> <span data-ttu-id="ef7f9-3535">으로 정의 되어 `sealed` C# 및 `NotInheritable` Visual Basic의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3535">It is defined as `sealed` in C# and `NotInheritable` in Visual Basic.</span></span>  
  
-   <span data-ttu-id="ef7f9-3536">`ITypeInfo`를 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3536">`ITypeInfo`, an interface.</span></span>  
  
-   <span data-ttu-id="ef7f9-3537">`ImplementingClass`를 구현 하는 클래스는 `ITypeInfo` 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3537">`ImplementingClass`, a class that implements the `ITypeInfo` interface.</span></span>  
  
 <span data-ttu-id="ef7f9-3538">메서드가 반환 `true` 에 대해서만 `AbstractClass`, 추상 클래스 및 `ITypeInfo`, 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3538">The method returns `true` only for `AbstractClass`, the abstract class, and `ITypeInfo`, the interface.</span></span>  
  
 [!code-csharp[System.Type.IsAbstract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isabstract/cs/isabstract1.cs#1)]
 [!code-vb[System.Type.IsAbstract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isabstract/vb/isabstract1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAnsiClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3539">
            <see langword="AnsiClass" />에 대해 문자열 형식 특성 <see cref="T:System.Type" />가 선택되었는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3539">Gets a value indicating whether the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3540">
            <see langword="true" />에 대해 문자열 형식 특성 <see langword="AnsiClass" />가 선택되면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3540">
              <see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3541"><xref:System.Reflection.TypeAttributes.StringFormatMask> 문자열 형식 특성을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3541">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="ef7f9-3542">문자열 형식 특성은 문자열의 해석 방법을 정의 하 여 상호 운용성을 향상 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3542">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="ef7f9-3543">하는 경우 현재 <xref:System.Type> 나타내는 제네릭 형식,이 속성은 형식이 생성 된 제네릭 형식 정의에 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3543">If the current <xref:System.Type> represents a generic type, this property pertains to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="ef7f9-3544">예를 들어 경우 현재 <xref:System.Type> 나타냅니다 `MyGenericType<int>` (`MyGenericType(Of Integer)` Visual basic에서)를 따라이 속성의 값이 결정 `MyGenericType<T>`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3544">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="ef7f9-3545">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3545">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3546">다음 예제에서는 필드 정보를 가져와서 검사는 `AnsiClass` 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3546">The following example gets the field information and checks for the `AnsiClass` attribute.</span></span>  
  
 [!code-cpp[Type_IsAnsiClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAnsiClass/CPP/Type_IsAnsiClass.cpp#1)]
 [!code-csharp[Type_IsAnsiClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAnsiClass/CS/type_isansiclass.cs#1)]
 [!code-vb[Type_IsAnsiClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAnsiClass/VB/type_isansiclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsArray</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3547">유형이 배열인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3547">Gets a value that indicates whether the type is an array.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3548">현재 유형이 배열이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3548">
              <see langword="true" /> if the current type is an array; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3549"><xref:System.Type.IsArray%2A> 속성에서 반환 `false` 에 대 한는 <xref:System.Array> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3549">The <xref:System.Type.IsArray%2A> property returns `false` for the <xref:System.Array> class.</span></span> <span data-ttu-id="ef7f9-3550">또한 반환 `false` 현재 인스턴스가 <xref:System.Type> 컬렉션 형식 이거나 같은 컬렉션을 사용 하도록 디자인 된 인터페이스를 나타내는 개체 <xref:System.Collections.IEnumerable> 또는 <xref:System.Collections.Generic.IEnumerable%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3550">It also returns `false` if the current instance is a <xref:System.Type> object that represents a collection type or an interface designed to work with collections, such as <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="ef7f9-3551">배열에 대 한 확인을 코드와 같은 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3551">To check for an array, use code such as:</span></span>  
  
```csharp  
typeof(Array).IsAssignableFrom(type)  
```  
  
```vb  
GetType(Array).IsAssignableFrom(type)  
```  
  
 <span data-ttu-id="ef7f9-3552">이 속성은 항상 현재 형식이 제네릭 형식 또는 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 경우 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3552">If the current type represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-3553">이 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3553">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3554">다음 예제는 <xref:System.Type.IsArray%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3554">The following example demonstrates using the <xref:System.Type.IsArray%2A> property.</span></span>  
  
 [!code-csharp[System.Type.IsArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isarray/cs/isarray2.cs#1)]
 [!code-vb[System.Type.IsArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isarray/vb/isarray2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsArrayImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsArrayImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3555">파생 클래스에서 재정의되면, <see cref="P:System.Type.IsArray" /> 속성을 구현하고 <see cref="T:System.Type" />이 배열인지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3555">When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3556">
            <see langword="true" />이 배열이면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3556">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3557">인스턴스는 <xref:System.Array> 클래스 반환 해야 `false` 개체 배열이 아닌 있기 때문에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3557">An instance of the <xref:System.Array> class must return `false` because it is an object, not an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3558">다음 예제에서는 재정의 `IsArrayImpl` 에서 메서드는 `MyTypeDelegator` 클래스 변수는 배열, 고 결과 표시 하는 경우 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3558">The following example overrides the `IsArrayImpl` method in the `MyTypeDelegator` class, checks if a variable is an array, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsArrayImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsArrayImpl/CPP/type_isarrayimpl.cpp#1)]
 [!code-csharp[Type_IsArrayImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsArrayImpl/CS/type_isarrayimpl.cs#1)]
 [!code-vb[Type_IsArrayImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsArrayImpl/VB/type_isarrayimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsArray" />
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public virtual bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAssignableFrom(Type ^ c);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="ef7f9-3559">현재 형식과 비교할 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3559">The type to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3560">지정한 형식의 인스턴스를 현재 형식의 인스턴스에 할당할 수 있는지 여부를 결정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3560">Determines whether an instance of a specified type can be assigned to an instance of the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3561">다음 조건 중 하나 이상이 true일 경우 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3561">
              <see langword="true" /> if any of the following conditions is true:</span>
          </span>  
  
-   <span data-ttu-id="ef7f9-3562"><paramref name="c" /> 및 현재 인스턴스가 동일한 형식으로 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3562"><paramref name="c" /> and the current instance represent the same type.</span></span>  
  
-   <span data-ttu-id="ef7f9-3563"><paramref name="c" />가 현재 인스턴스에서 직접 또는 간접으로 파생됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3563"><paramref name="c" /> is derived either directly or indirectly from the current instance.</span></span><span data-ttu-id="ef7f9-3564">현재 인스턴스에서 상속하는 경우 <paramref name="c" />는 현재 인스턴스에서 직접 파생되며 현재 인스턴스에서 상속하는 하나 이상의 클래스의 연속에서 상속하는 경우 <paramref name="c" />는 현재 인스턴스에서 직접 파생됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3564"><paramref name="c" /> is derived directly from the current instance if it inherits from the current instance; <paramref name="c" /> is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.</span></span>  
  
-   <span data-ttu-id="ef7f9-3565">현재 인스턴스는 <paramref name="c" />를 구현하는 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3565">The current instance is an interface that <paramref name="c" /> implements.</span></span>  
  
-   <span data-ttu-id="ef7f9-3566"><paramref name="c" />는 제네릭 형식 매개 변수이며, 현재 인스턴스는 <paramref name="c" />의 제약 조건 중 하나를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3566"><paramref name="c" /> is a generic type parameter, and the current instance represents one of the constraints of <paramref name="c" />.</span></span><span data-ttu-id="ef7f9-3567">다음 예제에서 현재 인스턴스는 <see cref="T:System.IO.Stream" /> 클래스를 나타내는 <see cref="T:System.Type" /> 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3567">In the following example, the current instance is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.IO.Stream" /> class.</span></span><span data-ttu-id="ef7f9-3568"><c>GenericWithConstraint</c>는 제네릭 형식 매개 변수가 <see cref="T:System.IO.Stream" /> 형식이어야 하는 제네릭 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3568"><c>GenericWithConstraint</c> is a generic type whose generic type parameter must be of type    <see cref="T:System.IO.Stream" />.</span></span><span data-ttu-id="ef7f9-3569"><see cref="M:System.Type.IsAssignableFrom(System.Type)" />에 제네릭 형식 매개 변수를 전달하는 것은 제네릭 형식 매개 변수의 인스턴스를 <see cref="T:System.IO.Stream" /> 개체에 할당할 수 있음을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3569">Passing its generic type parameter to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> indicates that  an instance of the generic type parameter can be assigned to an <see cref="T:System.IO.Stream" /> object.</span></span>  
  
     [!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)]
     [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]  
  
-   <span data-ttu-id="ef7f9-3570"><paramref name="c" />는 값 형식을 나타내며 현재 인스턴스는 <c>Nullable&lt;c&gt;</c>(Visual Basic에서 <c>Nullable(Of c)</c>)를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3570"><paramref name="c" /> represents a value type, and the current instance represents <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).</span></span><span data-ttu-id="ef7f9-3571">이러한 조건에 해당하지 않거나 <paramref name="c" />가 <see langword="false" />이면 <see langword="null" />입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3571"><see langword="false" /> if none of these conditions are true, or if <paramref name="c" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3572"><xref:System.Type.IsAssignableFrom%2A> 인스턴스의 지 여부를 결정 메서드를 사용할 수 `c` 지정할 수 있는 현재 형식의 인스턴스로 메서드 그 형식은 디자인 타임에 알 수 없는 개체를 처리 하는 경우에 유용 하 고 조건부 허용 다음 예제와 같이 할당을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3572">The <xref:System.Type.IsAssignableFrom%2A> method can be used to determine whether an instance of `c` can be assigned to an instance of the current type, The method is most useful when you are handling objects whose types are not known at design time and allows for conditional assignment, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#3)]
 [!code-vb[System.Type.IsAssignableFrom#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#3)]  
  
 <span data-ttu-id="ef7f9-3573">이 메서드 따라서를 사용 하면 다음 throw 하지 않고 런타임에 실행될지와 같은 코드 줄을 한 <xref:System.InvalidCastException> 예외 나 비슷한 예외:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3573">This method thus ensures that a line of code like the following will execute at runtime without throwing an <xref:System.InvalidCastException> exception or a similar exception:</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#4)]
 [!code-vb[System.Type.IsAssignableFrom#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#4)]  
  
 <span data-ttu-id="ef7f9-3574">이 메서드는 파생된 클래스에서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3574">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3575">제네릭 형식 정의 생성된 된 닫힌된 형식에서 할당할 수 없으면입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3575">A generic type definition is not assignable from a closed constructed type.</span></span> <span data-ttu-id="ef7f9-3576">폐쇄형된 생성된 형식을 할당할 수 없습니다, 즉 `MyGenericList<int>` (`MyGenericList(Of Integer)` Visual basic에서) 형식의 변수에 `MyGenericList<T>`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3576">That is, you cannot assign the closed constructed type `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) to a variable of type `MyGenericList<T>`.</span></span>  
  
 <span data-ttu-id="ef7f9-3577">경우는 `c` 매개 변수는 형식 <xref:System.Reflection.Emit.TypeBuilder>, 결과를 구축할 수 있는 형식에 기반 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3577">If the `c` parameter is of type <xref:System.Reflection.Emit.TypeBuilder>, the result is based on the type that is to be built.</span></span> <span data-ttu-id="ef7f9-3578">다음 코드 예제에서는이 라는 기본 제공된 형식을 사용 하 여 `B`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3578">The following code example demonstrates this using a built type named `B`.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/isassignablefrom_ex1.cs#1)]
 [!code-vb[System.Type.IsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/isassignablefrom_ex1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3579">다음 예제는 `IsAssignableFrom` 정의 된 클래스, 정수 배열 및 제네릭 메서드를 사용 하 여 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3579">The following example demonstrates the `IsAssignableFrom` method using defined classes, integer arrays, and generics.</span></span>  
  
 [!code-cpp[TestIsAssignableFrom#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsAssignableFrom/cpp/testisassignablefrom.cpp#1)]
 [!code-csharp[TestIsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsAssignableFrom/CS/testisassignablefrom.cs#1)]
 [!code-vb[TestIsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsAssignableFrom/VB/testisassignablefrom.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3580">
            <see langword="AutoClass" />에 대해 문자열 형식 특성 <see cref="T:System.Type" />가 선택되었는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3580">Gets a value indicating whether the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3581">
            <see langword="true" />에 대해 문자열 형식 특성 <see langword="AutoClass" />가 선택되면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3581">
              <see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3582"><xref:System.Reflection.TypeAttributes.StringFormatMask> 문자열 형식 특성을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3582">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="ef7f9-3583">문자열 형식 특성은 문자열의 해석 방법을 정의 하 여 상호 운용성을 향상 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3583">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="ef7f9-3584">하는 경우 현재 <xref:System.Type> 나타내는 생성된 된 제네릭 형식,이 속성은 형식이 생성 된 제네릭 형식 정의에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3584">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="ef7f9-3585">예를 들어 경우 현재 <xref:System.Type> 나타냅니다 `MyGenericType<int>` (`MyGenericType(Of Integer)` Visual basic에서)를 따라이 속성의 값이 결정 `MyGenericType<T>`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3585">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="ef7f9-3586">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3586">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3587">현재 형식의 필드가 공용 언어 런타임에 의해 자동으로 배치되는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3587">Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3588">현재 형식의 <see langword="true" /> 속성에 <see cref="P:System.Type.Attributes" />이 포함되어 있으면 <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3588">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3589">이 속성은 편의 위해 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3589">This property is provided as a convenience.</span></span> <span data-ttu-id="ef7f9-3590">사용할 수 있습니다는 <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> 여부 형식 레이아웃 특성 및 다음 테스트를 선택 하는 열거형 값 <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3590">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="ef7f9-3591"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, 및 <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> 열거형 값 형식의 필드가 메모리에 배치 되는 방식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3591">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="ef7f9-3592">동적 형식에 대해 지정할 수 있습니다 <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> 유형을 만들 때.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3592">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="ef7f9-3593">코드에서 적용는 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 특성이 <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> 클래스의 레이아웃에 적절 한 방법을 결정 하면 런타임이 형식에 열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3593">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> enumeration value to the type, to let the runtime determine the appropriate way to lay out the class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3594">사용할 수 없습니다는 <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> 확인 하 여부는 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 형식에 적용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3594">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="ef7f9-3595">하는 경우 현재 <xref:System.Type> 나타내는 생성된 된 제네릭 형식,이 속성은 형식이 생성 된 제네릭 형식 정의에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3595">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="ef7f9-3596">예를 들어 경우 현재 <xref:System.Type> 나타냅니다 `MyGenericType<int>` (`MyGenericType(Of Integer)` Visual basic에서)를 따라이 속성의 값이 결정 `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3596">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="ef7f9-3597">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3597">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3598">다음 예제에서는 형식의 인스턴스를 만들고 표시는 <xref:System.Type.IsAutoLayout%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3598">The following example creates an instance of the type and displays the <xref:System.Type.IsAutoLayout%2A> property.</span></span>  
  
 [!code-cpp[Type_IsAutoLayout#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAutoLayout/CPP/type_isautolayout.cpp#1)]
 [!code-csharp[Type_IsAutoLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAutoLayout/CS/type_isautolayout.cs#1)]
 [!code-vb[Type_IsAutoLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAutoLayout/VB/type_isautolayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3599">
            <see cref="T:System.Type" />이 참조로 전달되는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3599">Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3600">
            <see langword="true" />이 참조로 전달되면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3600">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3601">실제 형식으로, 참조로 전달 된 형식을 역참조를 다음 호출 <xref:System.Type.GetElementType%2A> 해당 형식에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3601">To get to the actual type, dereference the type that was passed by reference, and then call <xref:System.Type.GetElementType%2A> on that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3602">다음 예제에서는 사용 하는 `IsByRef` 속성을 지정된 된 형식의 참조로 전달 되는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3602">The following example demonstrates a use of the `IsByRef` property to check whether a specified type is passed by reference.</span></span> <span data-ttu-id="ef7f9-3603">이 예제에서는 클래스 정의 `MyTypeDelegator`, 재정의 하는 `HasElementTypeImpl` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3603">The example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="ef7f9-3604">기본 클래스에 대 한 검사는 `HasElementType` 요소의 입력 속성을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3604">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsByRefImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3605">파생 클래스에서 재정의되면, <see cref="P:System.Type.IsByRef" /> 속성을 구현하고 <see cref="T:System.Type" />이 참조로 전달되는지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3605">When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3606">
            <see langword="true" />이 참조로 전달되면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3606">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public virtual bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3607">
            <see cref="T:System.Type" />이 클래스 혹은 대리자인지, 즉 값 형식 또는 인터페이스가 아닌지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3607">Gets a value indicating whether the <see cref="T:System.Type" /> is a class or a delegate; that is, not a value type or interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3608">
            <see langword="true" />이 클래스이면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3608">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3609">이 속성은 반환 `true` 대리자 뿐만 아니라 클래스에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3609">This property returns `true` for classes as well as delegates.</span></span> <span data-ttu-id="ef7f9-3610">반환 `false` 형식에 대 한 값 (구조 및 열거형)에 대해 boxed 됩니다 하는 경우에 마찬가지입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3610">It returns `false` for value types (for structures and enumerations) even if they are boxed.</span></span>  
  
 <span data-ttu-id="ef7f9-3611">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `true`합니다. 하는 경우 현재 <xref:System.Type> 이 속성은 반환 생성된 된 제네릭 형식을 나타내는 `true` 제네릭 형식 정의 클래스 정의; 경우 즉, 정의 하지 않는 인터페이스 또는 값 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3611">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `true`.If the current <xref:System.Type> represents a constructed generic type, this property returns `true` if the generic type definition is a class definition; that is, it does not define an interface or a value type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3612">이 속성은 반환 `true` 에 대 한 `Type` 방향을 나타내는 인스턴스는 <xref:System.Enum> 및 <xref:System.ValueType> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3612">This property returns `true` for `Type` instances that represent the <xref:System.Enum> and <xref:System.ValueType> classes.</span></span> <span data-ttu-id="ef7f9-3613">이 두 클래스는 값 형식 및 열거형에 대 한 기본 형식을 각각 있지만 열거형 또는 값 형식 자체 되지는 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3613">These two classes are the base types for enumerations and value types, respectively, but they are not enumerations or value types themselves.</span></span> <span data-ttu-id="ef7f9-3614">자세한 내용은 참조는 <xref:System.Type.IsValueType%2A> 및 <xref:System.Type.IsEnum%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3614">For more information, see the <xref:System.Type.IsValueType%2A> and <xref:System.Type.IsEnum%2A> properties.</span></span>  
  
 <span data-ttu-id="ef7f9-3615"><xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> 클래스 또는 인터페이스 형식 선언을 구별 하는 열거형 값입니다. 그러나 클래스와 값 형식으로 표시 됩니다는는 <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3615">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> enumeration value  distinguishes a type declaration as class or interface.However, both classes and value types are marked with the <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> attribute.</span></span> <span data-ttu-id="ef7f9-3616">형식의 특성 속성 및 사용 하 여 값을 검색 하는 경우는 <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> 호출 또한 해야 형식이 값 형식 대신 클래스 하는지 여부를 결정 하는 값은 <xref:System.Type.IsValueType%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3616">If you retrieve the value of a type's Attributes property and use the <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> value to determine whether a type is a class instead of a value type, you must also call the <xref:System.Type.IsValueType%2A> property.</span></span> <span data-ttu-id="ef7f9-3617">에 대 한 예제는 <xref:System.Reflection.TypeAttributes> 열거형 anexample 뿐만 아니라 추가 정보를 포함 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3617">The example for the <xref:System.Reflection.TypeAttributes> enumeration contains additional information as well as anexample.</span></span>  
  
 <span data-ttu-id="ef7f9-3618">이 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3618">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3619">다음 예제에서는 형식의 인스턴스를 만들고이 형식이 클래스 인지를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3619">The following example creates an instance of a type and indicates whether the type is a class.</span></span>  
  
 [!code-cpp[Type_IsClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsClass/CPP/type_isclass.cpp#1)]
 [!code-csharp[Type_IsClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsClass/CS/type_isclass.cs#1)]
 [!code-vb[Type_IsClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsClass/VB/type_isclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="P:System.Type.IsValueType" />
        <altmember cref="F:System.Reflection.TypeAttributes.ClassSemanticsMask" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsCOMObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3620">
            <see cref="T:System.Type" />이 COM 개체인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3620">Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3621">
            <see langword="true" />이 COM 개체이면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3621">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3622">이 메서드가 반환 `false` 개체 되지 않기 때문에 COM 인터페이스의 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3622">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="ef7f9-3623">Microsoft.NET Framework 개체에서 COM 인터페이스를 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3623">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 <span data-ttu-id="ef7f9-3624">또한 COM 클래스를 로드 하 고 얻을 수는 `Type` 를 사용 하 여 해당 COM 클래스에 대 한 개체는 [Tlbimp.exe (형식 라이브러리 가져오기)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) 도구입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3624">You can also load a COM class and get a `Type` object for that COM class by using the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool.</span></span>  
  
 <span data-ttu-id="ef7f9-3625">하는 경우 현재 <xref:System.Type> 나타내는 생성된 된 제네릭 형식,이 속성은 형식이 생성 된 제네릭 형식 정의에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3625">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="ef7f9-3626">예를 들어 경우 현재 <xref:System.Type> 나타냅니다 `MyGenericType<int`> (`MyGenericType(Of Integer)` Visual basic에서)를 따라이 속성의 값이 결정 `MyGenericType<T>`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3626">For example, if the current <xref:System.Type> represents `MyGenericType<int`> (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="ef7f9-3627">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3627">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsCOMObjectImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsCOMObjectImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3628">파생 클래스에서 재정의되면, <see cref="P:System.Type.IsCOMObject" /> 속성을 구현하고 <see cref="T:System.Type" />이 COM 개체인지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3628">When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3629">
            <see langword="true" />이 COM 개체이면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3629">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3630">이 메서드가 반환 `false` 개체 되지 않기 때문에 COM 인터페이스의 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3630">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="ef7f9-3631">Microsoft.NET Framework 개체에서 COM 인터페이스를 구현할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3631">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsCOMObject" />
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3632">이 개체가 생성된 제네릭 형식을 나타내는지를 지정하는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3632">Gets a value that indicates whether this object represents a constructed generic type.</span>
          </span>
          <span data-ttu-id="ef7f9-3633">생성된 제네릭 형식의 인스턴스를 만들 수 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3633">You can create instances of a constructed generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3634">이 개체가 생성된 제네릭 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3634">
              <see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3635">생성된 된 제네릭 형식에 명시적 형식을 모든 제네릭 형식 매개 변수와에 제공 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3635">A constructed generic type has had explicit types supplied for all of its generic type parameters.</span></span> <span data-ttu-id="ef7f9-3636">폐쇄형된 제네릭 형식으로도에 참조 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3636">It is also referred to as a closed generic type.</span></span>  
  
 <span data-ttu-id="ef7f9-3637">이 속성이 `true`, 현재 형식의 인스턴스를 만들 수 있습니다; 때 `false`를 할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3637">When this property is `true`, you can create instances of the current type; when it is `false`, you can't.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsContextful</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3638">
            <see cref="T:System.Type" />이 컨텍스트에서 호스팅될 수 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3638">Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3639">
            <see cref="T:System.Type" />이 컨텍스트에서 호스팅될 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3639">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3640">클래스 멤버에 대 한 호출을 차단 하 고 동기화와 같이 클래스에 적용 되는 정책을 적용 하는 컨텍스트.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3640">A context intercepts calls to the class members and enforces policies that are applied to the class, such as synchronization.</span></span> <span data-ttu-id="ef7f9-3641">원격 컨텍스트에 대 한 정보를 자세한 참조 <xref:System.Runtime.Remoting.Contexts.Context>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3641">For more detailed information on remoting contexts, see <xref:System.Runtime.Remoting.Contexts.Context>.</span></span>  
  
 <span data-ttu-id="ef7f9-3642">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3642">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3643">다음 예제는 `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, 및 <xref:System.Type.IsPrimitive%2A> 의 속성은 <xref:System.Type> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3643">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="ef7f9-3644">있는지 여부 지정된 된 형식의 호스팅될 수 컨텍스트에서 그리고 형식은 기본 데이터 형식을 참조로 마샬링할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3644">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsContextfulImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsContextfulImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsContextfulImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsContextfulImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsContextfulImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsContextfulImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsContextfulImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3645">
            <see cref="P:System.Type.IsContextful" /> 속성을 구현하고, <see cref="T:System.Type" />이 컨텍스트에서 호스팅될 수 있는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3645">Implements the <see cref="P:System.Type.IsContextful" /> property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3646">
            <see cref="T:System.Type" />이 컨텍스트에서 호스팅될 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3646">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3647">이 메서드는 파생된 클래스에서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3647">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="ef7f9-3648">클래스 멤버에 대 한 호출을 차단 하 고 동기화와 같이 클래스에 적용 되는 정책을 적용 하는 컨텍스트.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3648">A context intercepts calls to the class members and enforce policies that are applied to the class, such as synchronization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3649">다음 예제에서는 사용 하는 `IsContextfulImpl` 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3649">The following example demonstrates a use of the `IsContextfulImpl` method.</span></span>  
  
 [!code-cpp[Type_IsContextfulImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextfulImpl/CPP/type_iscontextfulimpl.cpp#1)]
 [!code-csharp[Type_IsContextfulImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextfulImpl/CS/type_iscontextfulimpl.cs#1)]
 [!code-vb[Type_IsContextfulImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextfulImpl/VB/type_iscontextfulimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsContextful" />
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public virtual bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsEnum</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3650">
            <see cref="T:System.Type" />이 열거형을 나타내는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3650">Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3651">현재 <see langword="true" />이 열거형을 나타내면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3651">
              <see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3652">이 속성은 반환 `true` 열거형에 대 한는 <xref:System.Enum> 자체를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3652">This property returns `true` for an enumeration, but not for the <xref:System.Enum> type itself.</span></span>  
  
 <span data-ttu-id="ef7f9-3653">하는 경우 현재 <xref:System.Type> 나타내는 생성된 된 제네릭 형식,이 속성은 형식이 생성 된 제네릭 형식 정의에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3653">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="ef7f9-3654">예를 들어 경우 현재 <xref:System.Type> 나타냅니다 `MyGenericType<int>` (`MyGenericType(Of Integer)` Visual basic에서)를 따라이 속성의 값이 결정 `MyGenericType<T>`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3654">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="ef7f9-3655">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3655">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-3656">이 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3656">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3657">다음 예제에서는 사용 하 여 `IsEnum` 속성.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3657">The following example demonstrates how to use the `IsEnum` property.</span></span>  
  
 [!code-cpp[TestIsEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsEnum/CPP/TestIsEnum.cpp#1)]
 [!code-csharp[TestIsEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsEnum/CS/testisenum.cs#1)]
 [!code-vb[TestIsEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsEnum/VB/testisenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsEnumDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsEnumDefined (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnumDefined(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEnumDefined(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnumDefined (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEnumDefined(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="ef7f9-3658">테스트할 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3658">The value to be tested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3659">현재 열거형 형식에 지정된 값이 있는지를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3659">Returns a value that indicates whether the specified value exists in the current enumeration type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3660">지정된 값이 현재 열거형 형식의 멤버이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3660">
              <see langword="true" /> if the specified value is a member of the current enumeration type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-3661">현재 형식은 열거형이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3661">The current type is not an enumeration.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-3662">
            <paramref name="value" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3662">
              <paramref name="value" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ef7f9-3663">
            <paramref name="value" />는 열거형의 내부 형식이 될 수 없는 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3663">
              <paramref name="value" /> is of a type that cannot be the underlying type of an enumeration.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentTo">
      <MemberSignature Language="C#" Value="public virtual bool IsEquivalentTo (Type other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEquivalentTo(class System.Type other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEquivalentTo(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEquivalentTo (other As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEquivalentTo(Type ^ other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="ef7f9-3664">현재 형식과 같은지 테스트되는 COM 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3664">The COM type that is tested for equivalence with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3665">두 COM 형식이 같은 ID를 갖고 동일 형식이 될 수 있는지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3665">Determines whether two COM types have the same identity and are eligible for type equivalence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3666">COM 형식이 현재 형식과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3666">
              <see langword="true" /> if the COM types are equivalent; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ef7f9-3667">한 형식은 실행하기 위해 로드된 어셈블리에 있고 나머지 형식은 리플렉션 전용 컨텍스트로 로드된 어셈블리에 있는 경우에도 이 메서드는 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3667">This method also returns <see langword="false" /> if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3668">부터는 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], interop에서 COM 형식에 대 한 형식 정보를 가져오는 관리 되는 어셈블리를 요구 하는 대신 관리 되는 어셈블리에 직접 COM 형식에 대 한 형식 정보를 포함 하는 공용 언어 런타임에서 지원 어셈블리입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3668">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the common language runtime supports the embedding of type information for COM types directly into managed assemblies, instead of requiring the managed assemblies to obtain type information for COM types from interop assemblies.</span></span> <span data-ttu-id="ef7f9-3669">포함된 형식 정보에는 관리되는 어셈블리에서 실제로 사용되는 형식 및 멤버만 포함되므로 두 개의 관리되는 어셈블리에서 동일한 COM 형식이 전혀 다르게 표시될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3669">Because the embedded type information includes only the types and members that are actually used by a managed assembly, two managed assemblies might have very different views of the same COM type.</span></span> <span data-ttu-id="ef7f9-3670">관리되는 어셈블리마다 COM 형식의 해당 보기를 나타내는 다른 <xref:System.Type> 개체가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3670">Each managed assembly has a different <xref:System.Type> object to represent its view of the COM type.</span></span> <span data-ttu-id="ef7f9-3671">공용 언어 런타임은 인터페이스, 구조체, 열거형 및 대리자에 대한 이러한 다양한 보기 간에 형식 동등을 지원합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3671">The common language runtime supports type equivalence between these different views for interfaces, structures, enumerations, and delegates.</span></span>  
  
 <span data-ttu-id="ef7f9-3672">형식 동등은 관리되는 어셈블리 간에 전달되는 COM 개체를 수신 어셈블리에서 적절한 관리되는 형식으로 캐스팅할 수 있음을 의미합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3672">Type equivalence means that a COM object that is passed from one managed assembly to another can be cast to the appropriate managed type in the receiving assembly.</span></span> <span data-ttu-id="ef7f9-3673"><xref:System.Type.IsEquivalentTo%2A> 메서드 어셈블리가 다른 어셈블리에서 가져온 COM 개체와 동일한 COM id로 처음 어셈블리의 자체 포함 된 interop 형식 중 하나에 있는지 확인할 수 있도록 하 고 있으므로 해당 형식으로 캐스팅 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3673">The <xref:System.Type.IsEquivalentTo%2A> method enables an assembly to determine that a COM object obtained from another assembly has the same COM identity as one of the first assembly's own embedded interop types, and thus can be cast to that type.</span></span>  
  
 <span data-ttu-id="ef7f9-3674">자세한 내용은 참조 [동일 형식 및 포함 된 Interop 형식](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3674">For more information, see [Type Equivalence and Embedded Interop Types](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsExplicitLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3675">현재 형식의 필드가 명시적으로 지정된 오프셋에 배치되는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3675">Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3676">현재 형식의 <see langword="true" /> 속성에 <see cref="P:System.Type.Attributes" />이 포함되어 있으면 <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3676">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3677">이 속성은 편의 위해 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3677">This property is provided as a convenience.</span></span> <span data-ttu-id="ef7f9-3678">사용할 수 있습니다는 <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> 여부 형식 레이아웃 특성 및 다음 테스트를 선택 하는 열거형 값 <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3678">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="ef7f9-3679"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, 및 <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> 열거형 값 형식의 필드가 메모리에 배치 되는 방식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3679">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="ef7f9-3680">동적 형식에 대해 지정할 수 있습니다 <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> 유형을 만들 때.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3680">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="ef7f9-3681">코드에서 적용는 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 특성이 <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> 필드 시작할 오프셋을 명시적으로 지정 되어 있는지를 지정 하는 형식에 열거형 값입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3681">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> enumeration value to the type, to specify that the offsets at which the fields start are specified explicitly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3682">사용할 수 없습니다는 <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> 확인 하 여부는 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 형식에 적용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3682">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="ef7f9-3683">하는 경우 현재 <xref:System.Type> 나타내는 생성된 된 제네릭 형식,이 속성은 형식이 생성 된 제네릭 형식 정의에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3683">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="ef7f9-3684">예를 들어 경우 현재 <xref:System.Type> 나타냅니다 `MyGenericType<int>` (`MyGenericType(Of Integer)` Visual basic에서)를 따라이 속성의 값이 결정 `MyGenericType<T>`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3684">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="ef7f9-3685">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3685">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3686">다음 예제에서는 형식의 인스턴스를 만들고 값을 표시 해당 <xref:System.Type.IsExplicitLayout%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3686">The following example creates an instance of a type and displays the value of its <xref:System.Type.IsExplicitLayout%2A> property.</span></span> <span data-ttu-id="ef7f9-3687">사용 하 여는 `MySystemTime` 클래스에 대 한 코드 예제에서는에 포함 되어 있는 <xref:System.Runtime.InteropServices.StructLayoutAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3687">It uses the `MySystemTime` class, which is also in the code example for <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span></span>  
  
 [!code-csharp[Type_IsExplicitLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsExplicitLayout/CS/type_isexplicitlayout.cs#1)]
 [!code-vb[Type_IsExplicitLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsExplicitLayout/VB/type_isexplicitlayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericMethodParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericMethodParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericMethodParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodParameter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3688">현재 <see cref="T:System.Type" />이 제네릭 형식 또는 메서드 정의의 형식 매개 변수를 나타내는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3688">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3689">
            <see cref="T:System.Type" /> 개체가 제네릭 형식 정의나 메서드 정의의 형식 매개 변수를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3689">
              <see langword="true" /> if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3690"><xref:System.Type> 제네릭 형식 매개 변수를 나타내는 개체를 호출 하 여 얻을 수 있습니다는 <xref:System.Type.GetGenericArguments%2A> 의 메서드는 <xref:System.Type> 제네릭 형식 정의 나타내는 개체 또는 <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> 의 메서드는 <xref:System.Reflection.MethodInfo> 제네릭 메서드를 나타내는 개체입니다 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3690"><xref:System.Type> objects that represent generic type parameters can be obtained by calling the <xref:System.Type.GetGenericArguments%2A> method of a <xref:System.Type> object that represents a generic type definition, or the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.</span></span>  
  
-   <span data-ttu-id="ef7f9-3691">제네릭 형식 또는 메서드 정의 대 한는 <xref:System.Type.IsGenericParameter%2A> 속성에서 반환 `true` 결과 배열의 모든 요소에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3691">For a generic type or method definition, the <xref:System.Type.IsGenericParameter%2A> property returns `true` for every element of the resulting array.</span></span>  
  
-   <span data-ttu-id="ef7f9-3692">형식이 나 메서드를 실행 하는 것에 대 한는 <xref:System.Type.IsGenericParameter%2A> 속성에서 반환 `false` 에서 반환 된 배열의 모든 요소에 대 한는 <xref:System.Type.GetGenericArguments%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3692">For a closed constructed type or method, the <xref:System.Type.IsGenericParameter%2A> property returns `false` for every element of the array returned by the <xref:System.Type.GetGenericArguments%2A> method.</span></span>  
  
-   <span data-ttu-id="ef7f9-3693">개방형 생성된 형식 또는 메서드를 실행 하는 것에 대 한 일부 배열 요소의 특정 형식일 수 있습니다 및 다른 형식 매개 변수가 될 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3693">For an open constructed type or method, some elements of the array might be specific types and others might be type parameters.</span></span> <span data-ttu-id="ef7f9-3694"><xref:System.Type.IsGenericParameter%2A> 반환 `false` 형식에 대해 및 `true` 형식 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3694"><xref:System.Type.IsGenericParameter%2A> returns `false` for the types and `true` for the type parameters.</span></span> <span data-ttu-id="ef7f9-3695">에 대 한 코드 예제는 <xref:System.Type.ContainsGenericParameters%2A> 속성 혼합 형식 및 형식 매개 변수가 있는 제네릭 클래스를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3695">The code example for the <xref:System.Type.ContainsGenericParameters%2A> property demonstrates a generic class with a mixture of types and type parameters.</span></span>  
  
 <span data-ttu-id="ef7f9-3696">제네릭 리플렉션에 사용되는 용어의 고정 조건 목록은 <xref:System.Type.IsGenericType%2A> 속성 설명을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3696">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3697">다음 예제에서는 <xref:System.Type.IsGenericParameter%2A> 제네릭 형식에 제네릭 형식 매개 변수를 테스트 하는 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3697">The following example uses the <xref:System.Type.IsGenericParameter%2A> property to test for generic type parameters in a generic type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericParameter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericParameter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericParameter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericParameter/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.GenericParameterPosition" />
        <altmember cref="M:System.Type.GetGenericArguments" />
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.GenericParameterAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3698">현재 형식이 제네릭 형식인지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3698">Gets a value indicating whether the current type is a generic type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3699">
            <see langword="true" /> 현재 형식이 제네릭 형식입니다. 그렇지 않으면 <see langword="false" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3699">
              <see langword="true" /> if the current type is a generic type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3700">사용 하 여는 <xref:System.Type.IsGenericType%2A> 속성을 확인 여부는 <xref:System.Type> 개체 제네릭 형식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3700">Use the <xref:System.Type.IsGenericType%2A> property to determine whether a <xref:System.Type> object represents a generic type.</span></span> <span data-ttu-id="ef7f9-3701">사용 하 여는 <xref:System.Type.ContainsGenericParameters%2A> 속성을 확인 여부는 <xref:System.Type> 개방형 생성된 형식이 나 폐쇄형된 생성된 형식 개체를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3701">Use the <xref:System.Type.ContainsGenericParameters%2A> property to determine whether a <xref:System.Type> object represents an open constructed type or a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3702"><xref:System.Type.IsGenericType%2A> 속성에서 반환 `false` 즉시 형식이 제네릭 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3702">The <xref:System.Type.IsGenericType%2A> property returns `false` if the immediate type is not generic.</span></span> <span data-ttu-id="ef7f9-3703">예를 들어 요소가 형식의 배열을 `A<int>` (`A(Of Integer)` Visual basic에서)은 제네릭 형식 자체.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3703">For example, an array whose elements are of type `A<int>` (`A(Of Integer)` in Visual Basic) is not itself a generic type.</span></span>  
  
 <span data-ttu-id="ef7f9-3704">다음 표에서 일반 리플렉션에 사용 되는 일반적인 용어에 대 한 고정 조건을 요약 되어 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3704">The following table summarizes the invariant conditions for common terms used in generic reflection.</span></span>  
  
|<span data-ttu-id="ef7f9-3705">용어</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3705">Term</span></span>|<span data-ttu-id="ef7f9-3706">고정</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3706">Invariant</span></span>|  
|----------|---------------|  
|<span data-ttu-id="ef7f9-3707">제네릭 형식 정의(generic type definition)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3707">generic type definition</span></span>|<span data-ttu-id="ef7f9-3708"><xref:System.Type.IsGenericTypeDefinition%2A> 속성은 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3708">The <xref:System.Type.IsGenericTypeDefinition%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3709">제네릭 형식을 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3709">Defines a generic type.</span></span> <span data-ttu-id="ef7f9-3710">생성된 된 형식을 호출 하 여 만든는 <xref:System.Type.MakeGenericType%2A> 메서드를는 <xref:System.Type> 형식 인수의 배열을 지정 하 고 제네릭 형식 정의 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3710">A constructed type is created by calling the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object that represents a generic type definition and specifying an array of type arguments.</span></span><br /><br /> <span data-ttu-id="ef7f9-3711"><xref:System.Type.MakeGenericType%2A> 제네릭 형식 정의에 대해서만 호출할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3711"><xref:System.Type.MakeGenericType%2A> can be called only on generic type definitions.</span></span><br /><br /> <span data-ttu-id="ef7f9-3712">모든 제네릭 형식 정의 제네릭 형식 (의 <xref:System.Type.IsGenericType%2A> 속성은 `true`), 이지만 반대는 그렇지 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3712">Any generic type definition is a generic type (the <xref:System.Type.IsGenericType%2A> property is `true`), but the converse is not true.</span></span>|  
|<span data-ttu-id="ef7f9-3713">제네릭 형식(generic type)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3713">generic type</span></span>|<span data-ttu-id="ef7f9-3714"><xref:System.Type.IsGenericType%2A> 속성은 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3714">The <xref:System.Type.IsGenericType%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3715">제네릭 형식 정의 개방형 생성된 형식이 나 폐쇄형된 생성된 형식 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3715">Can be a generic type definition, an open constructed type, or a closed constructed type.</span></span><br /><br /> <span data-ttu-id="ef7f9-3716">배열 형식 요소 형식이 제네릭 인지 자체 제네릭 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3716">Note that an array type whose element type is generic is not itself a generic type.</span></span> <span data-ttu-id="ef7f9-3717">경우도 마찬가지는 <xref:System.Type> 제네릭 형식에 대 한 포인터를 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3717">The same is true of a <xref:System.Type> object representing a pointer to a generic type.</span></span>|  
|<span data-ttu-id="ef7f9-3718">개방형 생성된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3718">open constructed type</span></span>|<span data-ttu-id="ef7f9-3719"><xref:System.Type.ContainsGenericParameters%2A> 속성은 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3719">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3720">예로 할당 되지 않은 형식 매개 변수를 제네릭 형식을, 개방형 생성된 형식 또는 제네릭 형식 정의에 중첩 된 형식 또는 형식 인수를 가진 제네릭 형식을 <xref:System.Type.ContainsGenericParameters%2A> 속성은 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3720">Examples are a generic type that has unassigned type parameters, a type that is nested in a generic type definition or in an open constructed type, or a generic type that has a type argument for which the <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3721">개방형 생성된 형식 인스턴스의 생성 하는 것이 불가능 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3721">It is not possible to create an instance of an open constructed type.</span></span><br /><br /> <span data-ttu-id="ef7f9-3722">Note 하지 개방형 생성된 형식이 모두 일반적으로 진행 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3722">Note that not all open constructed types are generic.</span></span> <span data-ttu-id="ef7f9-3723">예를 들어 배열 요소 형식이 제네릭 형식 정의는 제네릭 및 제네릭이 아니거나 개방형 생성된 형식에 대 한 포인터.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3723">For example, an array whose element type is a generic type definition is not generic, and a pointer to an open constructed type is not generic.</span></span>|  
|<span data-ttu-id="ef7f9-3724">폐쇄형된 생성된 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3724">closed constructed type</span></span>|<span data-ttu-id="ef7f9-3725"><xref:System.Type.ContainsGenericParameters%2A> 속성은 `false`입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3725">The <xref:System.Type.ContainsGenericParameters%2A> property is `false`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3726">재귀적으로 검사 형식에 할당 되지 않은 제네릭 매개 변수가 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3726">When examined recursively, the type has no unassigned generic parameters.</span></span>|  
|<span data-ttu-id="ef7f9-3727">제네릭 형식 매개 변수(generic type parameter)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3727">generic type parameter</span></span>|<span data-ttu-id="ef7f9-3728"><xref:System.Type.IsGenericParameter%2A> 속성은 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3728">The <xref:System.Type.IsGenericParameter%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3729"><xref:System.Type.ContainsGenericParameters%2A> 속성은 `true`입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3729">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3730">제네릭 형식 정의 나중에 할당할 수 있는 형식에 대 한 자리 표시자입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3730">In a generic type definition, a placeholder for a type that will be assigned later.</span></span>|  
|<span data-ttu-id="ef7f9-3731">제네릭 형식 인수(generic type argument)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3731">generic type argument</span></span>|<span data-ttu-id="ef7f9-3732">제네릭 형식 매개 변수를 포함 하 여 모든 형식일 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3732">Can be any type, including a generic type parameter.</span></span><br /><br /> <span data-ttu-id="ef7f9-3733">형식 인수를 배열로 지정 <xref:System.Type> 에 전달 된 개체는 <xref:System.Type.MakeGenericType%2A> 메서드 생성된 된 제네릭 형식을 만들 때.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3733">Type arguments are specified as an array of <xref:System.Type> objects passed to the <xref:System.Type.MakeGenericType%2A> method when creating a constructed generic type.</span></span> <span data-ttu-id="ef7f9-3734">결과 형식의 인스턴스를 만들 수는 경우는 <xref:System.Type.ContainsGenericParameters%2A> 속성 이어야 `false` 모든 형식 인수에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3734">If instances of the resulting type are to be created, the <xref:System.Type.ContainsGenericParameters%2A> property must be `false` for all the type arguments.</span></span>|  
  
 <span data-ttu-id="ef7f9-3735">다음 코드 예제와 테이블 이러한 용어 및 고정 중 일부를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3735">The following code example and table illustrate some of these terms and invariants.</span></span> <span data-ttu-id="ef7f9-3736">`Derived` 기본 형식이 해당 형식 인수 목록에 형식 및 형식 매개 변수가 혼합 되어 생성 된 형식 이므로 클래스는 특히 중요 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3736">The `Derived` class is of particular interest because its base type is a constructed type that has a mixture of types and type parameters in its type argument list.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.IsGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/remarks.cs#2)]
 [!code-vb[System.Type.IsGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/remarks.vb#2)]  
  
 <span data-ttu-id="ef7f9-3737">다음 표에서 클래스에 빌드 및 사용 하는 예를 보여 줍니다 `Base`, `Derived`, 및 `G`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3737">The following table shows examples that use and build on the classes `Base`, `Derived`, and `G`.</span></span> <span data-ttu-id="ef7f9-3738">C + + 및 C# 코드가 동일 하면 항목이 하나만 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3738">When the C++ and C# code is the same, only one entry is shown.</span></span>  
  
|<span data-ttu-id="ef7f9-3739">예</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3739">Example</span></span>|<span data-ttu-id="ef7f9-3740">고정</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3740">Invariants</span></span>|  
|-------------|----------------|  
|`Derived(Of V)`<br /><br /> `Derived<V>`|<span data-ttu-id="ef7f9-3741">이 유형에:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3741">For this type:</span></span><br /><br /> <span data-ttu-id="ef7f9-3742"><xref:System.Type.IsGenericType%2A>가 `true`인 경우</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3742"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3743"><xref:System.Type.IsGenericTypeDefinition%2A>가 `true`인 경우</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3743"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3744"><xref:System.Type.ContainsGenericParameters%2A>가 `true`인 경우</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3744"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Base(Of String, V)`<br /><br /> `Base<String,V>`<br /><br /> `Base<String^,V>`|<span data-ttu-id="ef7f9-3745">이 유형에:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3745">For this type:</span></span><br /><br /> <span data-ttu-id="ef7f9-3746"><xref:System.Type.IsGenericType%2A>가 `true`인 경우</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3746"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3747"><xref:System.Type.IsGenericTypeDefinition%2A>가 `false`인 경우</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3747"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3748"><xref:System.Type.ContainsGenericParameters%2A>가 `true`인 경우</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3748"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Dim d() As Derived(Of Integer)`<br /><br /> `Derived<int>[] d;`<br /><br /> `array<Derived<int>^>^ d;`|<span data-ttu-id="ef7f9-3749">변수의 형식에 대 한 `d`:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3749">For the type of variable `d`:</span></span><br /><br /> <span data-ttu-id="ef7f9-3750"><xref:System.Type.IsGenericType%2A> `false` 때문에 `d` 은 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3750"><xref:System.Type.IsGenericType%2A> is `false` because `d` is an array.</span></span><br /><br /> <span data-ttu-id="ef7f9-3751"><xref:System.Type.IsGenericTypeDefinition%2A>가 `false`인 경우</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3751"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3752"><xref:System.Type.ContainsGenericParameters%2A>가 `false`인 경우</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3752"><xref:System.Type.ContainsGenericParameters%2A> is `false`.</span></span>|  
|<span data-ttu-id="ef7f9-3753">`T``U`, 및 `V` (나타나는 모든 위치)</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3753">`T`, `U`, and `V` (everywhere they appear)</span></span>|<span data-ttu-id="ef7f9-3754"><xref:System.Type.IsGenericParameter%2A>가 `true`인 경우</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3754"><xref:System.Type.IsGenericParameter%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3755"><xref:System.Type.IsGenericType%2A> `false` 제네릭 형식에 형식 매개 변수를 제한할 수 있기 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3755"><xref:System.Type.IsGenericType%2A> is `false` because there is no way to constrain a type parameter to generic types.</span></span><br /><br /> <span data-ttu-id="ef7f9-3756"><xref:System.Type.IsGenericTypeDefinition%2A>가 `false`인 경우</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3756"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3757"><xref:System.Type.ContainsGenericParameters%2A> `true` 때문에 `T`, `U`, 및 `V` 제네릭 형식 매개 변수에 사용 하는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3757"><xref:System.Type.ContainsGenericParameters%2A> is `true` because `T`, `U`, and `V` are themselves generic type parameters.</span></span> <span data-ttu-id="ef7f9-3758">나중에 할당 된 형식 인수에 대해 아무 것입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3758">This does not imply anything about type arguments that are assigned to them later.</span></span>|  
|<span data-ttu-id="ef7f9-3759">필드의 유형 `F`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3759">The type of field `F`</span></span>|<span data-ttu-id="ef7f9-3760"><xref:System.Type.IsGenericType%2A>가 `true`인 경우</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3760"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3761"><xref:System.Type.IsGenericTypeDefinition%2A> `false` 의 형식 매개 변수에 형식이 할당 된 때문에 `G`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3761"><xref:System.Type.IsGenericTypeDefinition%2A> is `false` because a type has been assigned to the type parameter of `G`.</span></span> <span data-ttu-id="ef7f9-3762">이 호출한 것과 동일는 <xref:System.Type.MakeGenericType%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3762">Note that this is equivalent to having called the <xref:System.Type.MakeGenericType%2A> method.</span></span><br /><br /> <span data-ttu-id="ef7f9-3763"><xref:System.Type.ContainsGenericParameters%2A> `true` 때문에 필드의 형식을 `F` 개방형 생성 된 형식인 형식 인수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3763"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the type of field `F` has a type argument that is an open constructed type.</span></span> <span data-ttu-id="ef7f9-3764">생성 된 형식이 열려 때문에 해당 형식 인수 (즉, `Base`)는 제네릭 형식 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3764">The constructed type is open because its type argument (that is, `Base`) is a generic type definition.</span></span> <span data-ttu-id="ef7f9-3765">재귀적 특성 들 여 <xref:System.Type.IsGenericType%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3765">This illustrates the recursive nature of the <xref:System.Type.IsGenericType%2A> property.</span></span>|  
|<span data-ttu-id="ef7f9-3766">중첩된 클래스 `Nested`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3766">The nested class `Nested`</span></span>|<span data-ttu-id="ef7f9-3767"><xref:System.Type.IsGenericType%2A> `true`경우라도는 `Nested` 제네릭 형식에 중첩 되는 클래스에 자체의 제네릭 형식 매개 변수가 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3767"><xref:System.Type.IsGenericType%2A> is `true`, even though the `Nested` class has no generic type parameters of its own, because it is nested in a generic type.</span></span><br /><br /> <span data-ttu-id="ef7f9-3768"><xref:System.Type.IsGenericTypeDefinition%2A>가 `true`인 경우</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3768"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span> <span data-ttu-id="ef7f9-3769">즉, 호출 수는 <xref:System.Type.MakeGenericType%2A> 메서드와 공급 바깥쪽 형식의 형식 매개 변수 `Derived`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3769">That is, you can call the <xref:System.Type.MakeGenericType%2A> method and supply the type parameter of the enclosing type, `Derived`.</span></span><br /><br /> <span data-ttu-id="ef7f9-3770"><xref:System.Type.ContainsGenericParameters%2A> `true` 바깥쪽 형식 때문에 `Derived`, 제네릭 형식 매개 변수가 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3770"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the enclosing type, `Derived`, has generic type parameters.</span></span> <span data-ttu-id="ef7f9-3771">재귀적 특성 들 여 <xref:System.Type.ContainsGenericParameters%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3771">This illustrates the recursive nature of the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3772">값을 표시 하는 다음 코드 예제는 <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, 및 <xref:System.Type.ContainsGenericParameters%2A> 주의 섹션에 설명 하는 형식에 대 한 속성.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3772">The following code example displays the value of the <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, and <xref:System.Type.ContainsGenericParameters%2A> properties for the types described in the Remarks section.</span></span> <span data-ttu-id="ef7f9-3773">속성 값의 설명에 대 한 설명에 함께 제공 된 표를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3773">For explanations of the property values, see the accompanying table in Remarks.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/source.cs#1)]
 [!code-vb[System.Type.IsGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3774">현재 <see cref="T:System.Type" />이 다른 제네릭 형식을 생성하는 데 사용될 수 있는 제네릭 형식 정의를 나타내는지를 가리키는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3774">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3775">
            <see langword="true" /> 개체가 제네릭 형식 정의를 나타내면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3775">
              <see langword="true" /> if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3776">제네릭 형식 정의 다른 형식을 생성 하는 데 사용 될 수 있는 템플릿입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3776">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="ef7f9-3777">예를 들어 제네릭 형식 정의에서 `G<T>` (C# 구문; 표시 합니다. `G(Of T)` Visual Basic의 또는 `generic <typename T> ref class G` c + +에서) 생성 하 고 형식을 인스턴스화할 수 `G<int>` (`G(Of Integer)` Visual Basic의)를 호출 하 여는 <xref:System.Type.MakeGenericType%2A> 포함 하는 제네릭 인수 목록을 사용 하 여 메서드는 <xref:System.Int32> 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3777">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic), by calling the <xref:System.Type.MakeGenericType%2A> method with a generic argument list containing the <xref:System.Int32> type.</span></span> <span data-ttu-id="ef7f9-3778">지정 된는 <xref:System.Type> 생성 된 형식을 나타내는이 개체는 <xref:System.Type.GetGenericTypeDefinition%2A> 메서드는 제네릭 형식 정의 가져옵니다 다시 다시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3778">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method gets the generic type definition back again.</span></span>  
  
 <span data-ttu-id="ef7f9-3779">사용 하 여는 <xref:System.Type.IsGenericTypeDefinition%2A> 속성을 현재 형식에서 새 형식을 만들 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3779">Use the <xref:System.Type.IsGenericTypeDefinition%2A> property to determine whether you can create new types from the current type.</span></span> <span data-ttu-id="ef7f9-3780">경우는 <xref:System.Type.IsGenericTypeDefinition%2A> 속성에서 반환 `true`, 호출할 수 있습니다는 <xref:System.Type.MakeGenericType%2A> 방법을 새 제네릭 형식을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3780">If the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `true`, you can call the <xref:System.Type.MakeGenericType%2A> method to create new generic types.</span></span>  
  
 <span data-ttu-id="ef7f9-3781">제네릭 리플렉션에 사용되는 용어의 고정 조건 목록은 <xref:System.Type.IsGenericType%2A> 속성 설명을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3781">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3782">다음 예제에서는 여부는 제네릭 형식 정의가 포함 된 형식에 대 한 정보를 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3782">The following example displays information about a type, including whether or not it is a generic type definition.</span></span> <span data-ttu-id="ef7f9-3783">생성된 된 형식, 제네릭 형식 정의 및 일반 형식에 대 한 정보가 표시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3783">Information is displayed for a constructed type, for its generic type definition, and for an ordinary type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeParameter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsImport</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3784">
            <see cref="T:System.Type" />에 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 특성이 적용되어 있는지 여부를 나타내는 값을 가져옵니다. 이 특성은 해당 형식이 COM 형식 라이브러리에서 가져온 것임을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3784">Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3785">
            <see langword="true" />에 <see cref="T:System.Type" />가 있으면 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3785">
              <see langword="true" /> if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3786">하는 경우 현재 <xref:System.Type> 나타내는 생성된 된 제네릭 형식,이 속성은 형식이 생성 된 제네릭 형식 정의에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3786">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="ef7f9-3787">예를 들어 경우 현재 <xref:System.Type> 나타냅니다 `MyGenericType<int>` (`MyGenericType(Of Integer)` Visual basic에서)를 따라이 속성의 값이 결정 `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3787">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="ef7f9-3788">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3788">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public virtual bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsInstanceOfType(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="ef7f9-3789">현재 형식과 비교할 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3789">The object to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-3790">지정된 개체가 현재 <see cref="T:System.Type" />의 인스턴스인지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3790">Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3791">현재 <see langword="Type" />이 <paramref name="o" />가 나타내는 개체의 상속 계층 구조에 속하거나 현재 <see langword="Type" />이 <paramref name="o" />가 구현하는 인터페이스이면 <see langword="true" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3791">
              <see langword="true" /> if the current <see langword="Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see langword="Type" /> is an interface that <paramref name="o" /> implements.</span>
          </span>
          <span data-ttu-id="ef7f9-3792">이러한 조건에 해당하지 않거나 <paramref name="o" />가 <see langword="null" />이거나 현재 <see langword="Type" />이 개방형 제네릭 형식(즉, <see cref="P:System.Type.ContainsGenericParameters" />가 <see langword="true" /> 반환)이면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3792">
              <see langword="false" /> if neither of these conditions is the case, if <paramref name="o" /> is <see langword="null" />, or if the current <see langword="Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3793">이 메서드는 파생된 클래스에서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3793">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3794">생성된 된 형식을 제네릭 형식 정의의 인스턴스가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3794">A constructed type is not an instance of its generic type definition.</span></span> <span data-ttu-id="ef7f9-3795">즉, `MyGenericList<int>` (`MyGenericList(Of Integer)` Visual basic에서)의 인스턴스가 아닌 `MyGenericList<T>` (`MyGenericList(Of T)` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3795">That is, `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) is not an instance of `MyGenericList<T>` (`MyGenericList(Of T)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3796">다음 예제에서는 `IsInstanceOfType` 메서드를 사용하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3796">The following example demonstrates the use of the `IsInstanceOfType` method.</span></span>  
  
 [!code-cpp[TestIsInstanceOfType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsInstanceOfType/CPP/testisinstanceoftype.cpp#1)]
 [!code-csharp[TestIsInstanceOfType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsInstanceOfType/CS/testisinstanceoftype.cs#1)]
 [!code-vb[TestIsInstanceOfType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsInstanceOfType/VB/testisinstanceoftype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsInterface</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3797">
            <see cref="T:System.Type" />이 인터페이스인지, 즉 클래스 또는 값 형식이 아닌지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3797">Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3798">
            <see langword="true" />이 인터페이스이면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3798">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3799"><xref:System.Reflection.TypeAttributes.ClassSemanticsMask> 클래스, 인터페이스 또는 값 형식으로 형식 선언이 구별 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3799">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> distinguishes a type declaration as class, interface or value type.</span></span>  
  
 <span data-ttu-id="ef7f9-3800">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3800">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-3801">이 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3801">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3802">다음 예제에서는 인터페이스를 만듭니다 인터페이스 형식을 확인 하 고 클래스에 있는지 여부를 나타내는 `IsInterface` 속성 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3802">The following example creates an interface, checks for the interface type, and indicates whether a class has the `IsInterface` property set.</span></span>  
  
 [!code-cpp[Type_IsInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsInterface/CPP/type_isinterface.cpp#1)]
 [!code-csharp[Type_IsInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsInterface/CS/type_isinterface.cs#1)]
 [!code-vb[Type_IsInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsInterface/VB/type_isinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsLayoutSequential</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3803">메타데이터에 정의되고 내보낸 순서로 현재 형식의 필드가 순차적으로 배치되는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3803">Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3804">현재 형식의 <see langword="true" /> 속성에 <see cref="P:System.Type.Attributes" />이 포함되어 있으면 <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3804">
              <see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3805">이 속성은 편의 위해 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3805">This property is provided as a convenience.</span></span> <span data-ttu-id="ef7f9-3806">사용할 수 있습니다는 <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> 여부 형식 레이아웃 특성 및 다음 테스트를 선택 하는 열거형 값 <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3806">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="ef7f9-3807"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, 및 <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> 열거형 값 형식의 필드가 메모리에 배치 되는 방식을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3807">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="ef7f9-3808">동적 형식에 대해 지정할 수 있습니다 <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> 유형을 만들 때.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3808">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="ef7f9-3809">코드에서 적용는 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 특성이 <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> 열거형 값을 해당 레이아웃은 순차적 지정 하는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3809">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value to the type, to specify that layout is sequential.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3810">사용할 수 없습니다는 <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> 확인 하 여부는 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 형식에 적용 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3810">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="ef7f9-3811">자세한 내용은 "II: 메타 데이터 정의 및 의미" 인프라 CLI (공용 언어) 설명서에 대 한 사양의 9.1.2 섹션을 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3811">For more information, see section 9.1.2 of the specification for the Common Language Infrastructure (CLI) documentation, "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="ef7f9-3812">이 설명서는 온라인으로 제공됩니다. MSDN의 [ECMA C# 및 공용 언어 인프라 표준](http://go.microsoft.com/fwlink/?LinkID=99212) 및 Ecma International 웹 사이트의 [표준 ECMA-335 - CLI(공용 언어 인프라)](http://go.microsoft.com/fwlink/?LinkID=65552)를 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3812">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="ef7f9-3813">하는 경우 현재 <xref:System.Type> 나타내는 생성된 된 제네릭 형식,이 속성은 형식이 생성 된 제네릭 형식 정의에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3813">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="ef7f9-3814">예를 들어 경우 현재 <xref:System.Type> 나타냅니다 `MyGenericType<int>` (`MyGenericType(Of Integer)` Visual basic에서)를 따라이 속성의 값이 결정 `MyGenericType<T>`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3814">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="ef7f9-3815">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3815">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3816">다음 예제는 클래스의 인스턴스를 만드는 <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> 열거형 값에는 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 클래스 설정 된 경우에 대 한 검사는 <xref:System.Type.IsLayoutSequential%2A> 속성을 결과 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3816">The following example creates an instance of a class for which the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value in the <xref:System.Runtime.InteropServices.StructLayoutAttribute> class has been set, checks for the <xref:System.Type.IsLayoutSequential%2A> property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsLayoutSequential#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsLayoutSequential/CPP/type_islayoutsequential.cpp#1)]
 [!code-csharp[Type_IsLayoutSequential#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsLayoutSequential/CS/type_islayoutsequential.cs#1)]
 [!code-vb[Type_IsLayoutSequential#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsLayoutSequential/VB/type_islayoutsequential.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsMarshalByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3817">
            <see cref="T:System.Type" />이 참조로 마샬링되는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3817">Gets a value indicating whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3818">
            <see langword="true" />이 참조에 의해 마샬링되면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3818">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="ef7f9-3819">다음 예제는 `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, 및 <xref:System.Type.IsPrimitive%2A> 의 속성은 <xref:System.Type> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3819">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="ef7f9-3820">있는지 여부 지정된 된 형식의 호스팅될 수 컨텍스트에서 그리고 형식은 기본 데이터 형식을 참조로 마샬링할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3820">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsMarshalByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRefImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsMarshalByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsMarshalByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsMarshalByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsMarshalByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsMarshalByRefImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3821">
            <see cref="P:System.Type.IsMarshalByRef" /> 속성을 구현하고, <see cref="T:System.Type" />이 참조에 의해 마샬링되는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3821">Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether the <see cref="T:System.Type" /> is marshaled by reference.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3822">
            <see langword="true" />이 참조에 의해 마샬링되면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3822">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3823">이 메서드는 파생된 클래스에서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3823">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3824">다음 예제에서는 지정된 된 형식을 참조로 마샬링되 하 고 결과 표시 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3824">The following example determines whether the given type is marshaled by reference and displays the result.</span></span>  
  
 [!code-cpp[Type_IsMarshalByRefImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CPP/type_ismarshalbyrefimpl.cpp#1)]
 [!code-csharp[Type_IsMarshalByRefImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CS/type_ismarshalbyrefimpl.cs#1)]
 [!code-vb[Type_IsMarshalByRefImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsMarshalByRefImpl/VB/type_ismarshalbyrefimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsMarshalByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsNested">
      <MemberSignature Language="C#" Value="public bool IsNested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNested" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNested { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3825">현재 <see cref="T:System.Type" /> 개체가 다른 형식의 정의 안에 중첩된 정의를 가진 형식을 나타내는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3825">Gets a value indicating whether the current <see cref="T:System.Type" /> object represents a type whose definition is nested inside the definition of another type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3826">
            <see langword="true" />이 다른 형식 안에 중첩되어 있으면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3826">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested inside another type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3827"><xref:System.Type.IsNested%2A> 속성에서 반환 `true` 모든 표시 여부에 관계 없이 형식에 중첩 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3827">The <xref:System.Type.IsNested%2A> property returns `true` for all nested types, regardless of visibility.</span></span> <span data-ttu-id="ef7f9-3828">를 테스트 하려면 중첩 및 표시 유형에 대해 동시에 관련된 속성을 사용 하 여 <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, 또는 <xref:System.Type.IsNestedPublic%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3828">To test for nesting and visibility at the same time, use the related properties <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, or <xref:System.Type.IsNestedPublic%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3829"><xref:System.Reflection.TypeAttributes.VisibilityMask> 열거형 멤버 유형에 대 한 표시 유형 특성을 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3829">The <xref:System.Reflection.TypeAttributes.VisibilityMask> enumeration member selects the visibility attributes for a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3830">다음 예제에서는 다양 한 표시 유형에 대 한 다양 한 형식을 포함 하는 중첩 된 클래스와 외부 클래스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3830">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="ef7f9-3831">그런 다음의 표시 여부와 관련 된 숫자 값을 검색 <xref:System.Type> 부모 유형 및 각 변수와 중첩된 형식에 대 한 속성.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3831">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsNestedAssembly" />
        <altmember cref="P:System.Type.IsNestedFamily" />
        <altmember cref="P:System.Type.IsNestedFamANDAssem" />
        <altmember cref="P:System.Type.IsNestedFamORAssem" />
        <altmember cref="P:System.Type.IsNestedPrivate" />
        <altmember cref="P:System.Type.IsNestedPublic" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3832">
            <see cref="T:System.Type" />이 중첩되었으며 자체 어셈블리 내에서만 표시되는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3832">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3833">
            <see langword="true" />이 중첩되어 있고 자체 어셈블리 내에서만 표시되면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3833">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3834">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3834">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-3835"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 표시 유형 특성을 선택합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3835"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3836">다음 예제에서는 다양 한 표시 유형에 대 한 다양 한 형식을 포함 하는 중첩 된 클래스와 외부 클래스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3836">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="ef7f9-3837">그런 다음의 표시 여부와 관련 된 숫자 값을 검색 <xref:System.Type> 부모 유형 및 각 변수와 중첩된 형식에 대 한 속성.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3837">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3838">
            <see cref="T:System.Type" />이 중첩되었으며 자체 패밀리와 자체 어셈블리 모두에 속하는 클래스에만 표시되는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3838">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3839">
            <see langword="true" />이 중첩되어 있고 자체 패밀리와 자체 어셈블리 모두에 속하는 클래스에만 표시되면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3839">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3840">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3840">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-3841"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 표시 유형 특성을 선택합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3841"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-3842">C# 및 Visual Basic 언어 어셈블리의 보호 된 형식에만 표시 되는 중첩된 형식을 정의할 수 있도록 하는 의미 체계를 포함 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3842">The C# and Visual Basic languages do not include semantics that allow you to define a nested type that is visible only to protected types in its own assembly.</span></span> <span data-ttu-id="ef7f9-3843">`protected internal` C#의 표시 유형 및 `Protected Friend` Visual Basic의 표시 유형을 보호 된 형식 및 동일한 어셈블리의 형식에 표시 되는 중첩된 형식을 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3843">`protected internal` visibility in C# and `Protected Friend` visibility in Visual Basic define a nested type that is visible both to protected types and to types in the same assembly.</span></span>  
  
 <span data-ttu-id="ef7f9-3844">A <xref:System.Type> 같은 모든 개체를 개체의 제품군 이루어집니다 <xref:System.Type> 및 그 하위 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3844">A <xref:System.Type> object's family is defined as all objects of the same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3845">다음 예제에서는 다양 한 표시 유형에 대 한 다양 한 형식을 포함 하는 중첩 된 클래스와 외부 클래스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3845">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="ef7f9-3846">그런 다음의 표시 여부와 관련 된 숫자 값을 검색 <xref:System.Type> 부모 유형 및 각 변수와 중첩된 형식에 대 한 속성.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3846">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3847">
            <see cref="T:System.Type" />이 중첩되었으며 자체 패밀리 내에서만 표시되는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3847">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3848">
            <see langword="true" />이 중첩되어 있고 자체 패밀리 내에서만 표시되면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3848">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3849">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3849">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-3850"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 표시 유형 특성을 선택합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3850"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="ef7f9-3851">A <xref:System.Type> 정확히의 모든 개체를 개체의 제품군 이루어집니다 동일한 <xref:System.Type> 및 그 하위 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3851">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3852">다음 예제에서는 다양 한 표시 유형에 대 한 다양 한 형식을 포함 하는 중첩 된 클래스와 외부 클래스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3852">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="ef7f9-3853">그런 다음의 표시 여부와 관련 된 숫자 값을 검색 <xref:System.Type> 부모 유형 및 각 변수와 중첩된 형식에 대 한 속성.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3853">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamORAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3854">
            <see cref="T:System.Type" />이 중첩되었으며 자체 패밀리와 자체 어셈블리 중 하나에 속하는 클래스에만 표시되는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3854">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3855">
            <see langword="true" />이 중첩되어 있고 자체 패밀리 또는 자체 어셈블리에 속하는 클래스에만 표시되면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3855">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3856">형식의 표시 되 `protected internal` C# 또는 `Protected Friend` Visual Basic의 경우에 <xref:System.Type.IsNestedFamORAssem%2A> 속성에서 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3856">If the visibility of a type is `protected internal` in C# or `Protected Friend` in Visual Basic, the <xref:System.Type.IsNestedFamORAssem%2A> property returns `true`.</span></span>  
  
 <span data-ttu-id="ef7f9-3857">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3857">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-3858"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 표시 유형 특성을 선택합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3858"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="ef7f9-3859">A <xref:System.Type> 정확히의 모든 개체를 개체의 제품군 이루어집니다 동일한 <xref:System.Type> 및 그 하위 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3859">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3860">다음 예제에서는 다양 한 표시 유형에 대 한 다양 한 형식을 포함 하는 중첩 된 클래스와 외부 클래스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3860">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="ef7f9-3861">그런 다음의 표시 여부와 관련 된 숫자 값을 검색 <xref:System.Type> 부모 유형 및 각 변수와 중첩된 형식에 대 한 속성.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3861">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3862">
            <see cref="T:System.Type" />이 중첩되어 있고 private 형식으로 선언되어 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3862">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3863">
            <see langword="true" />이 중첩되어 있고 private 형식으로 선언되어 있으면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3863">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3864">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3864">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-3865"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 표시 유형 특성을 선택합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3865"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3866">다음 예제에서는 다양 한 표시 유형에 대 한 다양 한 형식을 포함 하는 중첩 된 클래스와 외부 클래스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3866">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="ef7f9-3867">그런 다음의 표시 여부와 관련 된 숫자 값을 검색 <xref:System.Type> 부모 유형 및 각 변수와 중첩된 형식에 대 한 속성.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3867">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3868">클래스가 중첩되어 있고 public 형식으로 선언되어 있는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3868">Gets a value indicating whether a class is nested and declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3869">클래스가 중첩되어 있고 public 형식으로 선언되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3869">
              <see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3870">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3870">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-3871"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 표시 유형 특성을 선택합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3871"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3872">다음 예제에서는 다양 한 표시 유형에 대 한 다양 한 형식을 포함 하는 중첩 된 클래스와 외부 클래스를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3872">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="ef7f9-3873">그런 다음의 표시 여부와 관련 된 숫자 값을 검색 <xref:System.Type> 부모 유형 및 각 변수와 중첩된 형식에 대 한 속성.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3873">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNotPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3874">
            <see cref="T:System.Type" />이 public으로 선언되어 있지 않은지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3874">Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3875">
            <see langword="true" />이 public으로 선언되어 있지 않고 중첩 형식이 아니면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3875">
              <see langword="true" /> if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3876">중첩된 형식; 함께이 속성을 사용 하지 마십시오 사용 하 여 <xref:System.Type.IsNestedPublic%2A> 속성 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3876">Do not use this property with nested types; use the <xref:System.Type.IsNestedPublic%2A> property instead.</span></span>  
  
 <span data-ttu-id="ef7f9-3877">하는 경우 현재 <xref:System.Type> 이 속성은 반환 제네릭 형식의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3877">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3878">이 예제에서는 용도 `IsNotPublic` 표시 유형 가져올 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3878">This example usesthe `IsNotPublic` property to get the visibility of the type.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.IsNotPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#1)]
 [!code-vb[Classic Type.IsNotPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#1)]  
  
 <span data-ttu-id="ef7f9-3879">다음 코드 예제에서는 사용할 수 없는 이유 `IsPublic` 및 `IsNotPublic` 중첩 된 클래스에 대 한 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3879">The following code example demonstrates why you cannot use `IsPublic` and `IsNotPublic` for nested classes.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Type.IsNotPublic Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#2)]
 [!code-vb[Classic Type.IsNotPublic Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#2)]  
  
 <span data-ttu-id="ef7f9-3880">중첩 된 클래스에 대 한 결과를 무시 `IsPublic` 및 `IsNotPublic` 의 결과에 주의 `IsNestedPublic` 및 `IsNestedPrivate`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3880">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of `IsNestedPublic` and `IsNestedPrivate`.</span></span> <span data-ttu-id="ef7f9-3881">이 코드 조각에 대 한 리플렉션을 출력은 다음과 같이 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3881">The reflection output for this code fragment would be as follows:</span></span>  
  
|<span data-ttu-id="ef7f9-3882">클래스</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3882">Class</span></span>|<span data-ttu-id="ef7f9-3883">IsNotPublic</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3883">IsNotPublic</span></span>|<span data-ttu-id="ef7f9-3884">IsPublic</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3884">IsPublic</span></span>|<span data-ttu-id="ef7f9-3885">IsNestedPublic</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3885">IsNestedPublic</span></span>|<span data-ttu-id="ef7f9-3886">IsNestedPrivate</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3886">IsNestedPrivate</span></span>|  
|-----------|-----------------|--------------|--------------------|---------------------|  
|<span data-ttu-id="ef7f9-3887">A</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3887">A</span></span>|<span data-ttu-id="ef7f9-3888">false</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3888">FALSE</span></span>|<span data-ttu-id="ef7f9-3889">true</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3889">TRUE</span></span>|<span data-ttu-id="ef7f9-3890">FALSE</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3890">FALSE</span></span>|<span data-ttu-id="ef7f9-3891">false</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3891">FALSE</span></span>|  
|<span data-ttu-id="ef7f9-3892">B</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3892">B</span></span>|<span data-ttu-id="ef7f9-3893">false</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3893">FALSE</span></span>|<span data-ttu-id="ef7f9-3894">false</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3894">FALSE</span></span>|<span data-ttu-id="ef7f9-3895">true</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3895">TRUE</span></span>|<span data-ttu-id="ef7f9-3896">FALSE</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3896">FALSE</span></span>|  
|<span data-ttu-id="ef7f9-3897">C</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3897">C</span></span>|<span data-ttu-id="ef7f9-3898">false</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3898">FALSE</span></span>|<span data-ttu-id="ef7f9-3899">false</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3899">FALSE</span></span>|<span data-ttu-id="ef7f9-3900">false</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3900">FALSE</span></span>|<span data-ttu-id="ef7f9-3901">true</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3901">TRUE</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPointer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3902">
            <see cref="T:System.Type" />이 포인터인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3902">Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3903">
            <see langword="true" />이 포인터이면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3903">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3904">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수 나타냅니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3904">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-3905">이 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3905">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3906">다음 예에서는 사용 하 여 `IsPointer` 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3906">The following example shows a use of the `IsPointer` property.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsPointerImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPointerImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3907">파생 클래스에서 재정의되면, <see cref="P:System.Type.IsPointer" /> 속성을 구현하고 <see cref="T:System.Type" />이 포인터인지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3907">When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3908">
            <see langword="true" />이 포인터이면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3908">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsPointer" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPrimitive</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3909">
            <see cref="T:System.Type" />이 기본 형식 중 하나인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3909">Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3910">
            <see langword="true" />이 기본 형식 중 하나이면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3910">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3911">기본 형식은 <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, 및 <xref:System.Single>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3911">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="ef7f9-3912">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수 나타냅니다 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3912">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3913">다음 예제는 `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, 및 <xref:System.Type.IsPrimitive%2A> 의 속성은 <xref:System.Type> 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3913">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="ef7f9-3914">있는지 여부 지정된 된 형식의 호스팅될 수 컨텍스트에서 그리고 형식은 기본 데이터 형식을 참조로 마샬링할 수 있는지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3914">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="M:System.Type.IsPrimitiveImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPrimitiveImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3915">파생 클래스에서 재정의되면, <see cref="P:System.Type.IsPrimitive" /> 속성을 구현하고 <see cref="T:System.Type" />이 기본 형식 중 하나인지를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3915">When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-3916">
            <see langword="true" />이 기본 형식 중 하나이면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3916">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3917">기본 형식은 <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, 및 <xref:System.Single>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3917">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3918">다음 예제에서는 지정 된 형식이 기본 형식이 고 결과 표시 하는지 여부를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3918">The following example determines whether the given type is a primitive type and displays the result.</span></span>  
  
 [!code-cpp[Type_IsPrimitiveImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CPP/type_isprimitiveimpl.cpp#1)]
 [!code-csharp[Type_IsPrimitiveImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CS/type_isprimitiveimpl.cs#1)]
 [!code-vb[Type_IsPrimitiveImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsPrimitiveImpl/VB/type_isprimitiveimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="P:System.Type.IsPrimitive" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3919">
            <see cref="T:System.Type" />이 public으로 선언되어 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3919">Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3920">
            <see langword="true" />이 public으로 선언되어 있고 중첩 형식이 아니면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3920">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3921">중첩된 형식; 사용 안 함 사용 하 여 <xref:System.Type.IsNestedPublic%2A> 대신 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3921">Do not use with nested types; use <xref:System.Type.IsNestedPublic%2A> instead.</span></span>  
  
 <span data-ttu-id="ef7f9-3922">하는 경우 현재 <xref:System.Type> 이 속성은 반환 제네릭 형식의 형식 매개 변수를 나타내는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3922">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `true`.</span></span>  
  
 <span data-ttu-id="ef7f9-3923"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 표시 유형 특성을 선택합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3923"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3924">다음 예제에서는 인스턴스를 만듭니다. `MyTestClass`에 대 한 검사는 `IsPublic` 속성을 결과 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3924">The following example creates an instance of `MyTestClass`, checks for the `IsPublic` property, and displays the result.</span></span>  
  
 [!code-cpp[Type.IsPublic#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.IsPublic/CPP/type_ispublic.cpp#1)]
 [!code-csharp[Type.IsPublic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.IsPublic/CS/type_ispublic.cs#1)]
 [!code-vb[Type.IsPublic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.IsPublic/VB/type_ispublic.vb#1)]  
  
 <span data-ttu-id="ef7f9-3925">중첩 된 클래스에 대 한 결과를 무시 `IsPublic` 및 `IsNotPublic` 의 결과에 주의 <xref:System.Type.IsNestedPublic%2A> 및 <xref:System.Type.IsNestedPrivate%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3925">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of <xref:System.Type.IsNestedPublic%2A> and <xref:System.Type.IsNestedPrivate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSealed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3926">
            <see cref="T:System.Type" />이 봉인된 형식으로 선언되어 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3926">Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3927">
            <see langword="true" />이 봉인된 형식으로 선언되어 있으면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3927">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3928">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식의 형식 매개 변수를 나타내는 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3928">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3929">다음 예제에서는 인스턴스를 만듭니다.는 `sealed` 클래스에 대 한 검사는 `IsSealed` 속성을 결과 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3929">The following example creates an instance of a `sealed` class, checks for the `IsSealed` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsSealed#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSealed/CPP/type_issealed.cpp#1)]
 [!code-csharp[Type_IsSealed#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSealed/CS/type_issealed.cs#1)]
 [!code-vb[Type_IsSealed#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSealed/VB/type_issealed.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3930">현재 형식이 현재 신뢰 수준에서 보안에 중요한 형식이거나 보안 안전에 중요한 형식이어서 중요한 작업을 수행할 수 있는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3930">Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3931">현재 형식이 보안에 중요한 형식이거나 보안 안전에 중요한 형식인 경우 <see langword="true" />이고 투명 형식인 경우 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3931">
              <see langword="true" /> if the current type is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3932"><xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, 및 <xref:System.Type.IsSecurityTransparent%2A> 속성의 공용 언어 런타임 (CLR)에 의해 결정 된 현재 신뢰 수준에 있는 형식의 투명도 수준을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3932">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="ef7f9-3933">다음 표에서 이러한 속성의 조합은 같습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3933">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="ef7f9-3934">보안 수준</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3934">Security level</span></span>|<span data-ttu-id="ef7f9-3935">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3935">IsSecurityCritical</span></span>|<span data-ttu-id="ef7f9-3936">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3936">IsSecuritySafeCritical</span></span>|<span data-ttu-id="ef7f9-3937">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3937">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="ef7f9-3938">위험</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3938">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="ef7f9-3939">안전 중요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3939">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="ef7f9-3940">투명</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3940">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="ef7f9-3941">이러한 속성을 사용하는 것이 어셈블리 및 해당 형식의 보안 주석을 검사하고 현재 신뢰 수준을 확인한 다음 런타임 규칙을 복제하는 것보다 훨씬 더 간단합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3941">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ef7f9-3942">부분 신뢰 어셈블리에 대 한이 속성의 값은 어셈블리의 현재 신뢰 수준에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3942">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="ef7f9-3943">(예를 들어 샌드 박싱된 응용 프로그램 도메인) 부분적으로 신뢰할 수 있는 응용 프로그램 도메인에 로드 된 어셈블리가 있으면 런타임에서 어셈블리의 보안 주석을 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3943">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="ef7f9-3944">어셈블리 및 모든 해당 형식은 투명 하 게 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3944">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="ef7f9-3945">런타임에서는 어셈블리가 위치 (예를 들어 데스크톱 응용 프로그램의 기본 응용 프로그램 도메인)에 완전히 신뢰할 수 있는 응용 프로그램 도메인에 로드 되어 있는 경우에 부분 신뢰 어셈블리의 보안 주석에 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3945">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="ef7f9-3946">반면, 신뢰할 수 있는 어셈블리 (즉, 강력한 이름의 어셈블리를 전역 어셈블리 캐시에 설치 된)은 응용 프로그램 도메인의 신뢰 수준에 관계 없이 완전히 신뢰 되어 로드 항상 현재 신뢰 수준은 완전히 신뢰할 수 있는 항상 이므로.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3946">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="ef7f9-3947">사용 하 여 어셈블리 및 응용 프로그램 도메인의 현재 신뢰 수준을 확인할 수 있습니다는 <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> 및 <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3947">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="ef7f9-3948">리플렉션 및 투명도 대 한 자세한 내용은 참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3948">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="ef7f9-3949">투명도 대 한 정보를 참조 하십시오. [보안 변경 내용](~/docs/framework/security/security-changes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3949">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3950">현재 형식이 현재 신뢰 수준에서 보안 안전에 중요한 형식인지 즉, 중요한 작업을 수행할 수 있고 투명 코드로 액세스할 수 있는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3950">Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3951">현재 형식이 현재 신뢰 수준에서 보안에 중요한 형식인 경우 <see langword="true" />이고 보안에 중요한 형식이거나 투명 형식인 경우 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3951">
              <see langword="true" /> if the current type is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3952"><xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, 및 <xref:System.Type.IsSecurityTransparent%2A> 속성의 공용 언어 런타임 (CLR)에 의해 결정 된 현재 신뢰 수준에 있는 형식의 투명도 수준을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3952">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="ef7f9-3953">다음 표에서 이러한 속성의 조합은 같습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3953">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="ef7f9-3954">보안 수준</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3954">Security level</span></span>|<span data-ttu-id="ef7f9-3955">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3955">IsSecurityCritical</span></span>|<span data-ttu-id="ef7f9-3956">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3956">IsSecuritySafeCritical</span></span>|<span data-ttu-id="ef7f9-3957">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3957">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="ef7f9-3958">위험</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3958">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="ef7f9-3959">안전 중요</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3959">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="ef7f9-3960">투명</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3960">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="ef7f9-3961">이러한 속성을 사용하는 것이 어셈블리 및 해당 형식의 보안 주석을 검사하고 현재 신뢰 수준을 확인한 다음 런타임 규칙을 복제하는 것보다 훨씬 더 간단합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3961">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ef7f9-3962">부분 신뢰 어셈블리에 대 한이 속성의 값은 어셈블리의 현재 신뢰 수준에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3962">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="ef7f9-3963">(예를 들어 샌드 박싱된 응용 프로그램 도메인) 부분적으로 신뢰할 수 있는 응용 프로그램 도메인에 로드 된 어셈블리가 있으면 런타임에서 어셈블리의 보안 주석을 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3963">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="ef7f9-3964">어셈블리 및 모든 해당 형식은 투명 하 게 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3964">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="ef7f9-3965">런타임에서는 어셈블리가 위치 (예를 들어 데스크톱 응용 프로그램의 기본 응용 프로그램 도메인)에 완전히 신뢰할 수 있는 응용 프로그램 도메인에 로드 되어 있는 경우에 부분 신뢰 어셈블리의 보안 주석에 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3965">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="ef7f9-3966">반면, 신뢰할 수 있는 어셈블리 (즉, 강력한 이름의 어셈블리를 전역 어셈블리 캐시에 설치 된)은 응용 프로그램 도메인의 신뢰 수준에 관계 없이 완전히 신뢰 되어 로드 항상 현재 신뢰 수준은 완전히 신뢰할 수 있는 항상 이므로.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3966">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="ef7f9-3967">사용 하 여 어셈블리 및 응용 프로그램 도메인의 현재 신뢰 수준을 확인할 수 있습니다는 <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> 및 <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3967">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="ef7f9-3968">리플렉션 및 투명도 대 한 자세한 내용은 참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3968">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="ef7f9-3969">투명도 대 한 정보를 참조 하십시오. [보안 변경 내용](~/docs/framework/security/security-changes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3969">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3970">현재 형식이 현재 신뢰 수준에서 투명하여 중요한 작업을 수행할 수 없는지를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3970">Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3971">형식이 현재 신뢰 수준에서 보안에 투명하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3971">
              <see langword="true" /> if the type is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3972">이 속성을 반환 하는 경우 `true`, <xref:System.Type.IsSecurityCritical%2A> 및 <xref:System.Type.IsSecuritySafeCritical%2A> 속성 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3972">If this property returns `true`, the <xref:System.Type.IsSecurityCritical%2A> and <xref:System.Type.IsSecuritySafeCritical%2A> properties return `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-3973"><xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, 및 <xref:System.Type.IsSecurityTransparent%2A> 속성의 공용 언어 런타임 (CLR)에 의해 결정 된 현재 신뢰 수준에 있는 형식의 투명도 수준을 보고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3973">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="ef7f9-3974">이러한 속성을 사용하는 것이 어셈블리 및 해당 형식의 보안 주석을 검사하고 현재 신뢰 수준을 확인한 다음 런타임 규칙을 복제하는 것보다 훨씬 더 간단합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3974">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ef7f9-3975">부분 신뢰 어셈블리에 대 한이 속성의 값은 어셈블리의 현재 신뢰 수준에 따라 달라 집니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3975">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="ef7f9-3976">(예를 들어 샌드 박싱된 응용 프로그램 도메인) 부분적으로 신뢰할 수 있는 응용 프로그램 도메인에 로드 된 어셈블리가 있으면 런타임에서 어셈블리의 보안 주석을 무시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3976">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="ef7f9-3977">어셈블리 및 모든 해당 형식은 투명 하 게 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3977">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="ef7f9-3978">런타임에서는 어셈블리가 위치 (예를 들어 데스크톱 응용 프로그램의 기본 응용 프로그램 도메인)에 완전히 신뢰할 수 있는 응용 프로그램 도메인에 로드 되어 있는 경우에 부분 신뢰 어셈블리의 보안 주석에 유용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3978">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="ef7f9-3979">반면, 신뢰할 수 있는 어셈블리 (즉, 강력한 이름의 어셈블리를 전역 어셈블리 캐시에 설치 된)은 응용 프로그램 도메인의 신뢰 수준에 관계 없이 완전히 신뢰 되어 로드 항상 현재 신뢰 수준은 완전히 신뢰할 수 있는 항상 이므로.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3979">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="ef7f9-3980">사용 하 여 어셈블리 및 응용 프로그램 도메인의 현재 신뢰 수준을 확인할 수 있습니다는 <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> 및 <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3980">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="ef7f9-3981">리플렉션 및 투명도 대 한 자세한 내용은 참조 [리플렉션의 보안 고려 사항](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3981">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="ef7f9-3982">투명도 대 한 정보를 참조 하십시오. [보안 변경 내용](~/docs/framework/security/security-changes.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3982">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public virtual bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSerializable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3983">
            <see cref="T:System.Type" />의 serialization 가능 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3983">Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3984">
            <see cref="T:System.Type" />을 serialize할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3984">
              <see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="ef7f9-3985">.NET 표준에 정의 된 형식으로 표시 되지 않은 <xref:System.SerializableAttribute>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3985">Types that are defined in the .NET Standard are not marked with <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="ef7f9-3986">대신, 각.NET 구현 형식을 직렬화 가능 인지 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3986">Instead, each .NET implementation determines whether a type is serializable.</span></span> <span data-ttu-id="ef7f9-3987">실행 시 사용할 수 있습니다는 <xref:System.Type.IsSerializable%2A> 속성을 구현 하는 형식의 인스턴스로의 serialization을 지원 하는지 여부를 확인 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3987">At run time, you can use the <xref:System.Type.IsSerializable%2A> property to determine whether that implementation supports serialization of an instance of the type.</span></span> <span data-ttu-id="ef7f9-3988">자세한 내용 및 예제에 대 한 참조 [표준.NET 개체를 직렬화 가능 인지 확인 하는 방법을](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3988">For more information and an example, see [How to determine if a .NET Standard object is serializable](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span></span>
  
 <span data-ttu-id="ef7f9-3989">하는 경우 현재 <xref:System.Type> 나타내는 생성된 된 제네릭 형식,이 속성은 형식이 생성 된 제네릭 형식 정의에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3989">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="ef7f9-3990">예를 들어 경우 현재 <xref:System.Type> 나타냅니다 `MyGenericType<int>` (`MyGenericType(Of Integer)` Visual basic에서)를 따라이 속성의 값이 결정 `MyGenericType<T>`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3990">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="ef7f9-3991">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3991">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-3992">다음 예제에서는의 인스턴스를 만들고 `MyTestClass` [Serializable] 특성을 설정 하 고 확인 하는 클래스는 `IsSerializable` 속성에 대 한 `true` 또는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3992">The following example creates an instance of `MyTestClass` class, sets the [Serializable] attribute, and checks the `IsSerializable` property for `true` or `false`.</span></span>  
  
 [!code-cpp[Type_IsSerializable#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSerializable/CPP/type_isserializable.cpp#1)]
 [!code-csharp[Type_IsSerializable#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSerializable/CS/type_isserializable.cs#1)]
 [!code-vb[Type_IsSerializable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSerializable/VB/type_isserializable.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
      </Docs>
    </Member>
    <Member MemberName="IsSignatureType">
      <MemberSignature Language="C#" Value="public virtual bool IsSignatureType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSignatureType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSignatureType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSignatureType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSignatureType { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-3993">별도의 처리가 필요한 이름이 형식에 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3993">Gets a value indicating whether the type has a name that requires special handling.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-3994">별도의 처리가 필요한 이름이 형식에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3994">
              <see langword="true" /> if the type has a name that requires special handling; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-3995">이름으로 시작 하거나 밑줄 문자 (_)을 속성 접근자 메서드 오버 로드 된 연산자를 포함 하는 예 일부 컴파일러에서 특별 한 취급이 필요할 수 있는 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3995">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of types that might require special treatment by some compilers.</span></span>  
  
 <span data-ttu-id="ef7f9-3996">하는 경우 현재 <xref:System.Type> 나타내는 생성된 된 제네릭 형식,이 속성은 형식이 생성 된 제네릭 형식 정의에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3996">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="ef7f9-3997">예를 들어 경우 현재 <xref:System.Type> 나타냅니다 `MyGenericType<int>` (`MyGenericType(Of Integer)` Visual basic에서)를 따라이 속성의 값이 결정 `MyGenericType<T>`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3997">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="ef7f9-3998">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-3998">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public virtual bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubclassOf(Type ^ c);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="ef7f9-3999">현재 형식과 비교할 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-3999">The type to compare with the current type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-4000">현재 <see cref="T:System.Type" />이 지정된 <see cref="T:System.Type" />에서 파생되는지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4000">Determines whether the current <see cref="T:System.Type" /> derives from the specified <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-4001">현재 <see langword="true" />이 <see langword="Type" />에서 파생되면 <paramref name="c" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4001">
              <see langword="true" /> if the current <see langword="Type" /> derives from <paramref name="c" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ef7f9-4002">이 메서드는 <see langword="false" /> 및 현재 <paramref name="c" />이 동일한 경우에도 <see langword="Type" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4002">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> are equal.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4003">호출할 수 있습니다는 <xref:System.Type.IsSubclassOf%2A> 메서드를 다음 중 하나를 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4003">You can call the <xref:System.Type.IsSubclassOf%2A> method to determine any of the following:</span></span>  
  
-   <span data-ttu-id="ef7f9-4004">여부 하나의 클래스에서 다른 파생 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4004">Whether one class derives from another.</span></span>  
  
-   <span data-ttu-id="ef7f9-4005">형식에서 파생 되는 여부 <xref:System.ValueType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4005">Whether a type derives from <xref:System.ValueType>.</span></span> <span data-ttu-id="ef7f9-4006">그러나는 <xref:System.Type.IsValueType%2A> 되는 형식이 값 형식 인지 확인 하는 보다 효율적인 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4006">However, the <xref:System.Type.IsValueType%2A> is a more efficient way to determine whether a type is a value type.</span></span>  
  
-   <span data-ttu-id="ef7f9-4007">형식에서 파생 되는 여부 <xref:System.Enum>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4007">Whether a type derives from <xref:System.Enum>.</span></span> <span data-ttu-id="ef7f9-4008">그러나는 <xref:System.Type.IsEnum%2A> 메서드는 형식이 열거형 인지 확인 하는 보다 효율적인 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4008">However, the <xref:System.Type.IsEnum%2A> method is a more efficient way to determine whether a type is an enumeration.</span></span>  
  
-   <span data-ttu-id="ef7f9-4009">형식이 인지는, 대리자, 즉 중 하나에서 파생 되는 여부 <xref:System.Delegate> 또는 <xref:System.MulticastDelegate>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4009">Whether a type is a delegate, that is, whether it derives from either <xref:System.Delegate> or <xref:System.MulticastDelegate>.</span></span>  
  
 <span data-ttu-id="ef7f9-4010"><xref:System.Type.IsSubclassOf%2A> 인터페이스 다른 인터페이스에서 파생 되는 여부 또는 클래스 인터페이스를 구현 하는지 여부를 결정 하는 메서드를 사용할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4010">The <xref:System.Type.IsSubclassOf%2A> method cannot be used to determine whether an interface derives from another interface, or whether a class implements an interface.</span></span> <span data-ttu-id="ef7f9-4011">사용 하 여는 <xref:System.Type.IsAssignableFrom%2A> 다음 예제와 같이를 위해서는 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4011">Use the <xref:System.Type.IsAssignableFrom%2A> method for that purpose, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.issubclassof/cs/issubclassof_interface1.cs#1)]
 [!code-vb[System.Type.IsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.issubclassof/vb/issubclassof_interface1.vb#1)]  
  
 <span data-ttu-id="ef7f9-4012">하는 경우 현재 <xref:System.Type> 형식 매개 변수 또는 해당 클래스 제약 조건에서 파생 된 제네릭 형식 또는 제네릭 메서드 정의에 <xref:System.Object?displayProperty=nameWithType> 클래스 제약 조건이 없는 경우.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4012">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, it derives from its class constraint or from <xref:System.Object?displayProperty=nameWithType> if it has no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-4013">인터페이스와 함께 사용할 경우를 제외 하 고 <xref:System.Type.IsSubclassOf%2A> 의 반대입니다 <xref:System.Type.IsAssignableFrom%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4013">Except when used with interfaces, <xref:System.Type.IsSubclassOf%2A> is the converse of <xref:System.Type.IsAssignableFrom%2A>.</span></span> <span data-ttu-id="ef7f9-4014">즉, 경우 `t1.IsSubclassOf(t2)` 은 `true`, 다음 `t2.IsAssignableFrom(t1)` 이기도 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4014">That is, if `t1.IsSubclassOf(t2)` is `true`, then `t2.IsAssignableFrom(t1)` is also `true`.</span></span>  
  
 <span data-ttu-id="ef7f9-4015">이 메서드는 파생된 클래스에서 재정의할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4015">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4016">다음 예에서는 라는 클래스를 만들고 `Class1` 및 라는 파생된 클래스가 `DerivedC1`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4016">The following example creates a class named `Class1` and a derived class named `DerivedC1`.</span></span> <span data-ttu-id="ef7f9-4017">호출 된 <xref:System.Type.IsSubclassOf%2A> 메서드는 `DerivedC1` 의 서브 클래스가 `Class1`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4017">It calls the <xref:System.Type.IsSubclassOf%2A> method to show that `DerivedC1` is a subclass of `Class1`.</span></span>  
  
 [!code-csharp[TestIsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsSubclassOf/CS/testissubclassof.cs#1)]
 [!code-vb[TestIsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsSubclassOf/VB/testissubclassof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-4018">
            <paramref name="c" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4018">
              <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public virtual bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsUnicodeClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4019">
            <see langword="UnicodeClass" />에 대해 문자열 형식 특성 <see cref="T:System.Type" />가 선택되었는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4019">Gets a value indicating whether the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-4020">
            <see langword="true" />에 대해 문자열 형식 특성 <see langword="UnicodeClass" />가 선택되면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4020">
              <see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4021"><xref:System.Reflection.TypeAttributes.StringFormatMask> 문자열 형식 특성을 선택 하는 데 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4021">The <xref:System.Reflection.TypeAttributes.StringFormatMask> is used to select the string format attributes.</span></span> <span data-ttu-id="ef7f9-4022">문자열 형식 특성은 문자열의 해석 방법을 정의 하 여 상호 운용성을 향상 시킵니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4022">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="ef7f9-4023">하는 경우 현재 <xref:System.Type> 나타내는 생성된 된 제네릭 형식,이 속성은 형식이 생성 된 제네릭 형식 정의에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4023">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="ef7f9-4024">예를 들어 경우 현재 <xref:System.Type> 나타냅니다 `MyGenericType<int>` (`MyGenericType(Of Integer)` Visual basic에서)를 따라이 속성의 값이 결정 `MyGenericType<T>`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4024">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="ef7f9-4025">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4025">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsValueType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4026">
            <see cref="T:System.Type" />이 값 형식인지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4026">Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-4027">
            <see langword="true" />이 값 형식이면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4027">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4028">값 형식은 비트; 시퀀스로 표현 되는 형식 값 형식은 클래스 또는 인터페이스 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4028">Value types are types that are represented as sequences of bits; value types are not classes or interfaces.</span></span> <span data-ttu-id="ef7f9-4029">값 형식 이라고 "구조체" 일부 프로그래밍 언어에서입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4029">Value types are referred to as "structs" in some programming languages.</span></span> <span data-ttu-id="ef7f9-4030">열거형은 값 형식의 특별 한 경우입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4030">Enums are a special case of value types.</span></span>  
  
 <span data-ttu-id="ef7f9-4031">이 속성은 반환 `false` 에 대 한는 <xref:System.ValueType> 클래스 <xref:System.ValueType> 자체 값 유형이 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4031">This property returns `false` for the <xref:System.ValueType> class, because <xref:System.ValueType> is not a value type itself.</span></span> <span data-ttu-id="ef7f9-4032">모든 값 형식에 대 한 기본 클래스 이며 따라서 모든 값 형식에 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4032">It is the base class for all value types, and therefore any value type can be assigned to it.</span></span> <span data-ttu-id="ef7f9-4033">하지 않는 것이 가능한 경우 <xref:System.ValueType> 자체이 값 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4033">This would not be possible if <xref:System.ValueType> itself was a value type.</span></span> <span data-ttu-id="ef7f9-4034">형식의 필드에 할당 된 경우 값 형식은 boxed <xref:System.ValueType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4034">Value types are boxed when they are assigned to a field of type <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="ef7f9-4035">이 속성은 반환 `true` 열거형에 대 한는 <xref:System.Enum> 자체를 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4035">This property returns `true` for enumerations, but not for the <xref:System.Enum> type itself.</span></span> <span data-ttu-id="ef7f9-4036">이 동작을 보여 주는 예제를 참조 하십시오. <xref:System.Type.IsEnum%2A>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4036">For an example that demonstrates this behavior, see <xref:System.Type.IsEnum%2A>.</span></span>  
  
 <span data-ttu-id="ef7f9-4037">이 속성은 읽기 전용입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4037">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4038">다음 예제에서는 형식 변수를 만들고 `MyEnum`에 대 한 검사는 `IsValueType` 속성을 결과 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4038">The following example creates a variable of type `MyEnum`, checks for the `IsValueType` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsValueType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsValueType/CPP/type_isvaluetype.cpp#1)]
 [!code-csharp[Type_IsValueType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsValueType/CS/type_isvaluetype.cs#1)]
 [!code-vb[Type_IsValueType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsValueType/VB/type_isvaluetype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="M:System.Type.IsValueTypeImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsValueTypeImpl();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4039">
            <see cref="P:System.Type.IsValueType" /> 속성을 구현하고 <see cref="T:System.Type" />이 값 형식인지 여부, 즉 클래스 또는 인터페이스가 아닌지 여부를 확인합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4039">Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-4040">
            <see langword="true" />이 값 형식이면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4040">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4041">이 메서드는 대체 형식 시스템의 구현을 사용할 수 있도록 제공 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4041">This method is provided to enable the implementation of alternate type systems.</span></span> <span data-ttu-id="ef7f9-4042">일반적으로 응용 프로그램 코드에서 사용 되지 않습니다 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4042">It is not generally used in application code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public virtual bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4043">
            <see cref="T:System.Type" />을 어셈블리 외부의 코드에서 액세스할 수 있는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4043">Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-4044">현재 <see langword="true" />이 public 형식이거나 바깥쪽 형식이 모두 public인 public 중첩 형식이면 <see cref="T:System.Type" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4044">
              <see langword="true" /> if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4045">이 속성을 사용 하 여 형식 구성 요소 어셈블리의 공용 인터페이스의 일부 인지 확인할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4045">Use this property to determine whether a type is part of the public interface of a component assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4046">다음 코드 예제에서는 두 개의 클래스를 어셈블리 외부에 표시 되는 중 하나에 테스트 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4046">The following code example tests two classes, only one of which is visible outside the assembly.</span></span>  
  
 [!code-cpp[System.Type.IsVisible#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsVisible/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsVisible#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsVisible/CS/source.cs#1)]
 [!code-vb[System.Type.IsVisible#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsVisible/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4047">현재 형식의 배열을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4047">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4048">하한이 0인 현재 형식의 1차원 배열을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4048">Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-4049">하한이 0인 현재 형식의 1차원 배열을 나타내는 <see cref="T:System.Type" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4049">A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4050"><xref:System.Type.MakeArrayType%2A> 메서드 요소 형식이 런타임 시 계산 되는 배열 형식을 생성 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4050">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
 <span data-ttu-id="ef7f9-4051">**참고** 공용 언어 런타임 (즉, 1 차원 배열에 항상 0부터 시작) 벡터 사이의 구분 작업을 수행 하 고 다차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4051">**Note** The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="ef7f9-4052">1 차원만 항상 벡터만 차원 수가 발생 하는 다차원 배열로 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4052">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="ef7f9-4053">벡터 형식을 만드는이 메서드 오버 로드만 사용할 수 있으며 벡터 형식을 만드는 유일한 방법입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4053">This method overload can only be used to create vector types, and it is the only way to create a vector type.</span></span> <span data-ttu-id="ef7f9-4054">사용 하 여는 <xref:System.Type.MakeArrayType%28System.Int32%29> 메서드 오버 로드 다차원 배열 형식을 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4054">Use the <xref:System.Type.MakeArrayType%28System.Int32%29> method overload to create multidimensional array types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4055">다음 코드 예제에서는 배열에 `ref` (`ByRef` Visual basic에서), 및 포인터 형식에는 `Test` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4055">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-4056">호출된 메서드가 기본 클래스에서 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4056">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="ef7f9-4057">파생 클래스에서 구현을 제공해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4057">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="ef7f9-4058">현재 형식이 <see cref="T:System.TypedReference" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4058">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="ef7f9-4059">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4059">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4060">현재 형식이 <see langword="ByRef" /> 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4060">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="ef7f9-4061">즉, <see cref="P:System.Type.IsByRef" />이 <see langword="true" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4061">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType(int rank);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank">
          <span data-ttu-id="ef7f9-4062">배열의 차수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4062">The number of dimensions for the array.</span>
          </span>
          <span data-ttu-id="ef7f9-4063">이 수는 32보다 작거나 같아야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4063">This number must be less than or equal to 32.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-4064">지정된 차수의 현재 형식 배열을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4064">Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-4065">지정된 차수의 현재 형식 배열을 나타내는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4065">An object representing an array of the current type, with the specified number of dimensions.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4066"><xref:System.Type.MakeArrayType%2A> 메서드 요소 형식이 런타임 시 계산 되는 배열 형식을 생성 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4066">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-4067">공용 언어 런타임 (즉, 1 차원 배열에 항상 0부터 시작) 벡터 사이의 구분 작업을 수행 하 고 다차원 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4067">The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="ef7f9-4068">1 차원만 항상 벡터만 차원 수가 발생 하는 다차원 배열로 같지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4068">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="ef7f9-4069">벡터 형식; 만들려면이 메서드 오버 로드를 사용할 수 없습니다. 경우 `rank` 이 1 이면이 메서드 오버 로드에는 차원 수가 발생 하는 다차원 배열 형식을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4069">You cannot use this method overload to create a vector type; if `rank` is 1, this method overload returns a multidimensional array type that happens to have one dimension.</span></span> <span data-ttu-id="ef7f9-4070">사용 된 <xref:System.Type.MakeArrayType> 형식을 만들려면 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4070">Use the <xref:System.Type.MakeArrayType> method overload to create vector types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4071">다음 코드 예제에서는 배열에 `ref` (`ByRef` Visual basic에서), 및 포인터 형식에는 `Test` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4071">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="ef7f9-4072">
            <paramref name="rank" />이 잘못되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4072">
              <paramref name="rank" /> is invalid.</span>
          </span>
          <span data-ttu-id="ef7f9-4073">예를 들면, 0 또는 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4073">For example, 0 or negative.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-4074">호출된 메서드가 기본 클래스에서 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4074">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="ef7f9-4075">현재 형식이 <see cref="T:System.TypedReference" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4075">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="ef7f9-4076">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4076">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4077">현재 형식이 <see langword="ByRef" /> 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4077">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="ef7f9-4078">즉, <see cref="P:System.Type.IsByRef" />이 <see langword="true" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4078">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
          <span data-ttu-id="ef7f9-4079">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4079">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4080">
            <paramref name="rank" />이(가) 32보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4080">
              <paramref name="rank" /> is greater than 32.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public virtual Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeByRefType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4081">
            <see cref="T:System.Type" />(Visual Basic의 경우 <see langword="ref" />) 매개 변수로 전달될 때 현재 형식을 나타내는 <see langword="ByRef" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4081">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-4082">
            <see cref="T:System.Type" />(Visual Basic의 경우 <see langword="ref" />) 매개 변수로 전달될 때 현재 형식을 나타내는 <see langword="ByRef" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4082">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4083"><xref:System.Type.MakeByRefType%2A> 메서드를 생성 하는 방법을 제공 `ref` 형식 (`ByRef` Visual basic에서) 매개 변수를 나열 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4083">The <xref:System.Type.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
 <span data-ttu-id="ef7f9-4084">경우 Microsoft 중간 언어 (MSIL) 구문을 사용 하 여 현재 <xref:System.Type> 개체가 나타내는 <xref:System.Int32>,이 메서드는 반환 된 <xref:System.Type> 나타내는 개체 `Int32&`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4084">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32&`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4085">다음 코드 예제에서는 배열에 `ref` (`ByRef` Visual basic에서), 및 포인터 형식에는 `Test` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4085">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-4086">호출된 메서드가 기본 클래스에서 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4086">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="ef7f9-4087">현재 형식이 <see cref="T:System.TypedReference" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4087">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="ef7f9-4088">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4088">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4089">현재 형식이 <see langword="ByRef" /> 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4089">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="ef7f9-4090">즉, <see cref="P:System.Type.IsByRef" />이 <see langword="true" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4090">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeArrayType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericMethodParameter">
      <MemberSignature Language="C#" Value="public static Type MakeGenericMethodParameter (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type MakeGenericMethodParameter(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericMethodParameter(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeGenericMethodParameter (position As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ MakeGenericMethodParameter(int position);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public virtual Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments">
          <span data-ttu-id="ef7f9-4091">현재 제네릭 형식의 형식 매개 변수로 대체할 형식 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4091">An array of types to be substituted for the type parameters of the current generic type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-4092">형식 배열의 요소를 현재 제네릭 형식 정의의 형식 매개 변수로 대체하며 생성된 형식을 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4092">Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-4093">
            <see cref="T:System.Type" />의 요소를 현재 제네릭 형식의 형식 매개 변수로 대체하여 생성된 형식을 나타내는 <paramref name="typeArguments" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4093">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4094"><xref:System.Type.MakeGenericType%2A> 메서드를 사용 하면 특정 형식을 만드는 제네릭 형식 정의의 형식 매개 변수에 할당 하는 코드를 작성할 수는 <xref:System.Type> 생성된 된 특정 형식을 나타내는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4094">The <xref:System.Type.MakeGenericType%2A> method allows you to write code that assigns specific types to the type parameters of a generic type definition, thus creating a <xref:System.Type> object that represents a particular constructed type.</span></span> <span data-ttu-id="ef7f9-4095">이 사용 하 여 <xref:System.Type> 생성 된 형식의 런타임 인스턴스를 만드는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4095">You can use this <xref:System.Type> object to create run-time instances of the constructed type.</span></span>  
  
 <span data-ttu-id="ef7f9-4096">형식을 사용 하 여 생성 <xref:System.Type.MakeGenericType%2A> 열릴 수 있으며, 즉, 형식 인수의 중 일부 제네릭 메서드 또는 형식의 바깥쪽 형식 매개 변수를 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4096">Types constructed with <xref:System.Type.MakeGenericType%2A> can be open, that is, some of their type arguments can be type parameters of enclosing generic methods or types.</span></span> <span data-ttu-id="ef7f9-4097">동적 어셈블리를 생성할 때 이러한 개방형 생성된 형식이 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4097">You might use such open constructed types when you emit dynamic assemblies.</span></span> <span data-ttu-id="ef7f9-4098">예를 들어 클래스 `Base` 및 `Derived` 다음 코드에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4098">For example, consider the classes `Base` and `Derived` in the following code.</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#1)]
 [!code-vb[System.Type.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="ef7f9-4099">생성 하려면 `Derived` 동적 어셈블리에 해야 하는 기본 형식을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4099">To generate `Derived` in a dynamic assembly, it is necessary to construct its base type.</span></span> <span data-ttu-id="ef7f9-4100">이 작업을 수행 하려면 호출는 <xref:System.Type.MakeGenericType%2A> 에서 메서드는 <xref:System.Type> 클래스를 나타내는 개체 `Base`, 제네릭 형식 인수를 사용 하 여 <xref:System.Int32> 형식 매개 변수 `V` 에서 `Derived`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4100">To do this, call the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object representing the class `Base`, using the generic type arguments <xref:System.Int32> and the type parameter `V` from `Derived`.</span></span> <span data-ttu-id="ef7f9-4101">형식 및 제네릭 형식 매개 변수는 모두로 표시 되므로 <xref:System.Type> 개체를 모두 포함 하는 배열에 전달 될 수는 <xref:System.Type.MakeGenericType%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4101">Because types and generic type parameters are both represented by <xref:System.Type> objects, an array containing both can be passed to the <xref:System.Type.MakeGenericType%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-4102">와 같은 생성된 된 형식을 `Base<int, V>` 코드를 내보낼 때 유용 하지만 호출할 수 없습니다는 <xref:System.Type.MakeGenericType%2A> 이 형식의 메서드는 제네릭 형식 정의 없기 때문에 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4102">A constructed type such as `Base<int, V>` is useful when emitting code, but you cannot call the <xref:System.Type.MakeGenericType%2A> method on this type because it is not a generic type definition.</span></span> <span data-ttu-id="ef7f9-4103">인스턴스화할 수 있는 폐쇄형된 생성된 형식을 만들려면 먼저 호출는 <xref:System.Type.GetGenericTypeDefinition%2A> 가져올 메서드를 한 <xref:System.Type> 제네릭 형식 정의 나타내는 개체와 호출 다음 <xref:System.Type.MakeGenericType%2A> 원하는 형식 인수를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4103">To create a closed constructed type that can be instantiated, first call the <xref:System.Type.GetGenericTypeDefinition%2A> method to get a <xref:System.Type> object representing the generic type definition and then call <xref:System.Type.MakeGenericType%2A> with the desired type arguments.</span></span>  
  
 <span data-ttu-id="ef7f9-4104"><xref:System.Type> 에서 반환 된 개체 <xref:System.Type.MakeGenericType%2A> 동일는 <xref:System.Type> 호출 하 여 가져온는 <xref:System.Object.GetType%2A> 메서드 결과 생성 된 형식을 또는 <xref:System.Object.GetType%2A> 모든 생성에서 작성 된 동일한 제네릭 형식 동일한 형식 인수를 사용 하 여 정의 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4104">The <xref:System.Type> object returned by <xref:System.Type.MakeGenericType%2A> is the same as the <xref:System.Type> obtained by calling the <xref:System.Object.GetType%2A> method of the resulting constructed type, or the <xref:System.Object.GetType%2A> method of any constructed type that was created from the same generic type definition using the same type arguments.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ef7f9-4105">제네릭 형식의 배열 자체 제네릭 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4105">An array of generic types is not itself a generic type.</span></span> <span data-ttu-id="ef7f9-4106">호출할 수 없습니다 <xref:System.Type.MakeGenericType%2A> 같은 배열을 입력 `C<T>[]` (`Dim ac() As C(Of T)` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4106">You cannot call <xref:System.Type.MakeGenericType%2A> on an array type such as `C<T>[]` (`Dim ac() As C(Of T)` in Visual Basic).</span></span> <span data-ttu-id="ef7f9-4107">폐쇄형된 제네릭 형식을 생성 하려면 `C<T>[]`, 호출 <xref:System.Type.GetElementType%2A> 제네릭 형식 정의를 가져오려면 `C<T>`; 호출 <xref:System.Type.MakeGenericType%2A> ; 생성된 된 형식을 만들고 마지막으로 호출 하려면 제네릭 형식 정의에 <xref:System.Type.MakeArrayType%2A> 메서드 배열 형식을 만들려면 생성 된 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4107">To construct a closed generic type from `C<T>[]`, call <xref:System.Type.GetElementType%2A> to obtain the generic type definition `C<T>`; call <xref:System.Type.MakeGenericType%2A> on the generic type definition to create the constructed type; and finally call the <xref:System.Type.MakeArrayType%2A> method on the constructed type to create the array type.</span></span> <span data-ttu-id="ef7f9-4108">포인터 형식의 마찬가지 및 `ref` 형식 (`ByRef` Visual basic에서).</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4108">The same is true of pointer types and `ref` types (`ByRef` in Visual Basic).</span></span>  
  
 <span data-ttu-id="ef7f9-4109">제네릭 리플렉션에 사용되는 용어의 고정 조건 목록은 <xref:System.Type.IsGenericType%2A> 속성 설명을 참조하세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4109">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
## <a name="nested-types"></a><span data-ttu-id="ef7f9-4110">중첩 형식</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4110">Nested Types</span></span>  
 <span data-ttu-id="ef7f9-4111">C#, c + + 또는 Visual Basic을 사용 하 여 제네릭 형식이 정의 하는 경우 중첩된 형식은 모두 제네릭 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4111">If a generic type is defined using C#, C++, or Visual Basic, then its nested types are all generic.</span></span> <span data-ttu-id="ef7f9-4112">이 세 언어 모두 중첩 형식의 형식 매개 변수 목록이 바깥쪽 형식의 형식 매개 변수를 포함 하기 때문에 중첩된 된 형식이 있는 각각의 형식 매개 변수가 없는 경우에 마찬가지입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4112">This is true even if the nested types have no type parameters of their own, because all three languages include the type parameters of enclosing types in the type parameter lists of nested types.</span></span> <span data-ttu-id="ef7f9-4113">다음 클래스를 고려 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4113">Consider the following classes:</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.MakeGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#2)]
 [!code-vb[System.Type.MakeGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#2)]  
  
 <span data-ttu-id="ef7f9-4114">중첩 된 클래스의 형식 매개 변수 목록 `Inner` 두 형식 매개 변수가 `T` 및 `U`는 첫 번째는 바깥쪽 클래스의 형식 매개 변수입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4114">The type parameter list of the nested class `Inner` has two type parameters, `T` and `U`, the first of which is the type parameter of its enclosing class.</span></span> <span data-ttu-id="ef7f9-4115">마찬가지로, 중첩 된 클래스의 형식 매개 변수 목록 `Innermost1` 세 개의 형식 매개 변수가 `T`, `U`, 및 `V`와 `T` 및 `U` 는 바깥쪽 클래스에서 발생 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4115">Similarly, the type parameter list of the nested class `Innermost1` has three type parameters, `T`, `U`, and `V`, with `T` and `U` coming from its enclosing classes.</span></span> <span data-ttu-id="ef7f9-4116">중첩 된 클래스 `Innermost2` 두 형식 매개 변수가 `T` 및 `U`는 바깥쪽 클래스에서 나오는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4116">The nested class `Innermost2` has two type parameters, `T` and `U`, which come from its enclosing classes.</span></span>  
  
 <span data-ttu-id="ef7f9-4117">바깥쪽 형식의 매개 변수 목록에 둘 이상의 형식 매개 변수를 중첩 형식의 형식 매개 변수 목록의 순서 대로 모든 형식 매개 변수에 포함 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4117">If the parameter list of the enclosing type has more than one type parameter, all the type parameters in order are included in the type parameter list of the nested type.</span></span>  
  
 <span data-ttu-id="ef7f9-4118">중첩 된 형식에 대 한 제네릭 형식 정의에서 제네릭 형식을 생성, 호출 된 <xref:System.Type.MakeGenericType%2A> 메서드는 배열 사용 하 여 모든 바깥쪽 형식의 가장 바깥쪽 제네릭 형식으로 시작 및 종료와 형식 인수 배열을 연결 하 여 형성는 자체의 형식 매개 변수가 있는 경우에 중첩된 형식 자체의 인수 배열을 입력 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4118">To construct a generic type from the generic type definition for a nested type, call the <xref:System.Type.MakeGenericType%2A> method with the array formed by concatenating the type argument arrays of all the enclosing types, beginning with the outermost generic type, and ending with the type argument array of the nested type itself, if it has type parameters of its own.</span></span> <span data-ttu-id="ef7f9-4119">인스턴스를 만드는 `Innermost1`, 호출 된 <xref:System.Type.MakeGenericType%2A> T, U 및 V에 할당할 세 개의 형식을 포함 하는 배열 사용 하 여 메서드. 인스턴스를 만드는 `Innermost2`, 호출 된 <xref:System.Type.MakeGenericType%2A> T, U 및에 할당할 수는 두 가지 형식이 포함 된 배열 사용 하 여 메서드</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4119">To create an instance of `Innermost1`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing three types, to be assigned to T, U, and V. To create an instance of `Innermost2`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing two types, to be assigned to T and U.</span></span>  
  
 <span data-ttu-id="ef7f9-4120">언어는 중첩 형식의 필드를 정의 하려면 바깥쪽 형식의 형식 매개 변수를 사용할 수 있도록이 방식 바깥쪽 형식의 형식 매개 변수를 전파 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4120">The languages propagate the type parameters of enclosing types in this fashion so you can use the type parameters of an enclosing type to define fields of nested types.</span></span> <span data-ttu-id="ef7f9-4121">그렇지 않은 경우 형식 매개 변수는 범위는 중첩 형식의 본문 내에 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4121">Otherwise, the type parameters would not be in scope within the bodies of the nested types.</span></span> <span data-ttu-id="ef7f9-4122">동적 어셈블리에서 코드를 생성 하거나 사용 하 여 바깥쪽 형식의 형식 매개 변수를 전파 하지 않고 중첩된 형식을 정의할 수는 [Ilasm.exe (IL 어셈블러)](~/docs/framework/tools/ilasm-exe-il-assembler.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4122">It is possible to define nested types without propagating the type parameters of enclosing types, by emitting code in dynamic assemblies or by using the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span> <span data-ttu-id="ef7f9-4123">MSIL 어셈블러에 대해 다음 코드를 살펴보세요.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4123">Consider the following code for the MSIL assembler:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<U> {  
        .class nested public Innermost {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="ef7f9-4124">이 예제에서는 수 없는 형식의 필드를 정의 하려면 `T` 또는 `U` 클래스에서 `Innermost`이러한 형식 매개 변수 범위에 없기 때문에, 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4124">In this example, it is not possible to define a field of type `T` or `U` in class `Innermost`, because those type parameters are not in scope.</span></span> <span data-ttu-id="ef7f9-4125">다음 어셈블러 코드는 c + +, Visual Basic 및 C#에 정의 된 경우 마찬가지 방식으로 동작 하는 중첩된 클래스를 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4125">The following assembler code defines nested classes that behave the way they would if defined in C++, Visual Basic, and C#:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<T, U> {  
        .class nested public Innermost<T, U, V> {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="ef7f9-4126">사용할 수는 [Ildasm.exe (IL 디스어셈블러)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) 고급 언어에 정의 된 중첩 된 클래스를 검사 하 고이 명명 스키마를 확인할 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4126">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine nested classes defined in the high-level languages and observe this naming scheme.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4127">다음 예제에서는 <xref:System.Type.MakeGenericType%2A> 에 대 한 제네릭 형식 정의에서 생성된 된 형식을 만드는 메서드를는 <xref:System.Collections.Generic.Dictionary%602> 유형입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4127">The following example uses the <xref:System.Type.MakeGenericType%2A> method to create a constructed type from the generic type definition for the <xref:System.Collections.Generic.Dictionary%602> type.</span></span> <span data-ttu-id="ef7f9-4128">생성 된 형식은 <xref:System.Collections.Generic.Dictionary%602> 의 `Test` 문자열 키가 있는 개체입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4128">The constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.BindGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.BindGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.BindGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.BindGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="ef7f9-4129">현재 형식이 제네릭 형식의 정의를 나타내지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4129">The current type does not represent a generic type definition.</span>
          </span>
          <span data-ttu-id="ef7f9-4130">즉, <see cref="P:System.Type.IsGenericTypeDefinition" />이 <see langword="false" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4130">That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns <see langword="false" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-4131">
            <paramref name="typeArguments" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4131">
              <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-4132">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4132">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4133">
            <paramref name="typeArguments" />의 요소가 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4133">Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-4134">
            <paramref name="typeArguments" />의 요소 수가 현재 제네릭 형식 정의의 형식 매개 변수 수와 같지 않은 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4134">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.</span>
          </span>
          <span data-ttu-id="ef7f9-4135">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4135">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4136">
            <paramref name="typeArguments" />의 요소가 현재 제네릭 형식의 해당 형식 매개 변수에 지정된 제약 조건을 충족하지 않는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4136">Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type.</span>
          </span>
          <span data-ttu-id="ef7f9-4137">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4137">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4138">
            <paramref name="typeArguments" />는 포인터 형식(<see cref="P:System.Type.IsPointer" />는 <see langword="true" />를 반환), 참조로 전달되는 형식(<see cref="P:System.Type.IsByRef" />는 <see langword="true" />를 반환) 또는 <see cref="T:System.Void" />인  요소를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4138">
              <paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns <see langword="true" />), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns <see langword="true" />), or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-4139">호출된 메서드가 기본 클래스에서 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4139">The invoked method is not supported in the base class.</span>
          </span>
          <span data-ttu-id="ef7f9-4140">파생 클래스에서 구현을 제공해야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4140">Derived classes must provide an implementation.</span>
          </span>
        </exception>
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public virtual Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakePointerType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4141">현재 형식에 대한 포인터를 나타내는 <see cref="T:System.Type" /> 개체를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4141">Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-4142">현재 형식에 대한 포인터를 나타내는 <see cref="T:System.Type" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4142">A <see cref="T:System.Type" /> object that represents a pointer to the current type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4143"><xref:System.Type.MakePointerType%2A> 메서드 매개 변수 목록에 대 한 포인터 형식을 생성 하는 방법을 제공 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4143">The <xref:System.Type.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
 <span data-ttu-id="ef7f9-4144">경우 Microsoft 중간 언어 (MSIL) 구문을 사용 하 여 현재 <xref:System.Type> 개체가 나타내는 <xref:System.Int32>,이 메서드는 반환 된 <xref:System.Type> 나타내는 개체 `Int32*`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4144">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32*`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4145">다음 코드 예제에서는 배열에 `ref` (`ByRef` Visual basic에서), 및 포인터 형식에는 `Test` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4145">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-4146">호출된 메서드가 기본 클래스에서 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4146">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="ef7f9-4147">현재 형식이 <see cref="T:System.TypedReference" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4147">The current type is <see cref="T:System.TypedReference" />.</span>
          </span>
          <span data-ttu-id="ef7f9-4148">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4148">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4149">현재 형식이 <see langword="ByRef" /> 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4149">The current type is a <see langword="ByRef" /> type.</span>
          </span>
          <span data-ttu-id="ef7f9-4150">즉, <see cref="P:System.Type.IsByRef" />이 <see langword="true" />를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4150">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4151">이 멤버가 형식 또는 중첩 형식임을 나타내는 <see cref="T:System.Reflection.MemberTypes" /> 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4151">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-4152">이 멤버가 형식 또는 중첩 형식임을 나타내는 <see cref="T:System.Reflection.MemberTypes" /> 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4152">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4153">이 속성을 재정의 <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4153">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ef7f9-4154">따라서 집합을 조사할 때 <xref:System.Reflection.MemberInfo> 개체-반환 하는 배열 예를 들어 <xref:System.Type.GetMembers%2A>-는 <xref:System.Reflection.MemberInfo.MemberType%2A> 속성에서 반환 <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> 때 지정된 된 멤버는 중첩 형식이 있습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4154">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects—for example, the array returned by <xref:System.Type.GetMembers%2A>—the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> when a given member is a nested type.</span></span>  
  
 <span data-ttu-id="ef7f9-4155">하는 경우 현재 <xref:System.Type> 나타내는 생성된 된 제네릭 형식,이 속성은 형식이 생성 된 제네릭 형식 정의에 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4155">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="ef7f9-4156">예를 들어 경우 현재 <xref:System.Type> 나타냅니다 `MyGenericType<int>` (`MyGenericType(Of Integer)` Visual basic에서)를 따라이 속성의 값이 결정 `MyGenericType<T>`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4156">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="ef7f9-4157">하는 경우 현재 <xref:System.Type> 이 속성은 항상 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4157">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4158">다음 코드 예제는 `MemberType` 필드에 대 한 매개 변수로 `GetMember` 메서드:</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4158">The following code example shows the `MemberType` field as a parameter to the `GetMember` method:</span></span>  
  
 [!code-cpp[Classic Type.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberTypes" />
      </Docs>
    </Member>
    <Member MemberName="Missing">
      <MemberSignature Language="C#" Value="public static readonly object Missing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object Missing" />
      <MemberSignature Language="DocId" Value="F:System.Type.Missing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Missing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ Missing;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4159">
            <see cref="T:System.Type" /> 정보의 손실된 값을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4159">Represents a missing value in the <see cref="T:System.Type" /> information.</span>
          </span>
          <span data-ttu-id="ef7f9-4160">이 필드는 읽기 전용입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4160">This field is read-only.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4161">사용 된 `Missing` 매개 변수의 기본 값을 얻기 위해 리플렉션을 통해 호출에 대 한 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4161">Use the `Missing` field for invocation through reflection to obtain the default value of a parameter.</span></span> <span data-ttu-id="ef7f9-4162">경우는 `Missing` 매개 변수 값에 대 한 필드에 전달 하 고 해당 매개 변수에 대해 기본 가치가 없습니다는 <xref:System.ArgumentException> throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4162">If the `Missing` field is passed in for a parameter value and there is no default value for that parameter, an <xref:System.ArgumentException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4163">다음 코드 예제에서는 사용을 보여 줍니다.는 `Missing` 필드를 기본 인수로 사용 하 여 메서드를 호출 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4163">The following code example shows the use of the `Missing` field to invoke a method with its default arguments.</span></span>  
  
 [!code-cpp[Classic Type.Missing Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cpp/source.cpp#1)]
 [!code-csharp[Classic Type.Missing Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cs/source.cs#1)]
 [!code-vb[Classic Type.Missing Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Missing Example/VB/source.vb#1)]  
  
 <span data-ttu-id="ef7f9-4164">이 코드의 결과는 다음과 같습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4164">This code produces the following output:</span></span>  
  
 <span data-ttu-id="ef7f9-4165">a = 10 b = 55.3 c = 12</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4165">a = 10 b = 55.3 c = 12</span></span>  
  
 <span data-ttu-id="ef7f9-4166">a = 10 b = 1.3 c = 1</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4166">a = 10 b = 1.3 c = 1</span></span>  
  
 <span data-ttu-id="ef7f9-4167">a = 10 b = 1.2 c = 1</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4167">a = 10 b = 1.2 c = 1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Missing" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Module</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4168">현재 <see cref="T:System.Type" />이 정의된 모듈(DLL)을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4168">Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-4169">현재 <see cref="T:System.Type" />이 정의된 모듈입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4169">The module in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4170">하는 경우 현재 <xref:System.Type> 나타내는 생성된 된 제네릭 형식,이 속성은 제네릭 형식 정의가 정의 된 모듈을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4170">If the current <xref:System.Type> represents a constructed generic type, this property returns the module in which the generic type definition was defined.</span></span> <span data-ttu-id="ef7f9-4171">예를 들어의 인스턴스를 만들 경우 `MyGenericStack<int>`, <xref:System.Type.Module%2A> 는 모듈을 반환 하는 생성된 된 형식에 대 한 속성 `MyGenericStack<T>` 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4171">For example, if you create an instance of `MyGenericStack<int>`, the <xref:System.Type.Module%2A> property for the constructed type returns the module in which `MyGenericStack<T>` is defined.</span></span>  
  
 <span data-ttu-id="ef7f9-4172">마찬가지로, 하는 경우 현재 <xref:System.Type> 제네릭 매개 변수를 나타내는 `T`,이 속성을 정의 하는 제네릭 형식을 포함 하는 어셈블리 반환 `T`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4172">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4173">사용법을 설명 하는 다음 예제는 <xref:System.Type.Namespace%2A> 및 `Module` 속성 및 <xref:System.Type.ToString%2A> 방식의 <xref:System.Type>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4173">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and `Module` properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Module" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Namespace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4174">
            <see cref="T:System.Type" />의 네임스페이스를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4174">Gets the namespace of the <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-4175">
            <see cref="T:System.Type" />의 네임스페이스입니다. 현재 인스턴스가 제네릭 매개 변수를 나타내거나 네임스페이스가 없으면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4175">The namespace of the <see cref="T:System.Type" />; <see langword="null" /> if the current instance has no namespace or represents a generic parameter.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4176">네임 스페이스는는 논리적 디자인 타임 명명 규칙 인 주로 응용 프로그램에서 범위를 정의 하 고 클래스와 단일 계층 구조에서 다른 형식을 구성 하는 데 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4176">A namespace is a logical design-time naming convenience, used mainly to define scope in an application and organize classes and other types in a single hierarchical structure.</span></span> <span data-ttu-id="ef7f9-4177">런타임에서의 측면에서 보면 네임 스페이스가 없는 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4177">From the viewpoint of the runtime, there are no namespaces.</span></span>  
  
 <span data-ttu-id="ef7f9-4178">하는 경우 현재 <xref:System.Type> 생성 된 제네릭 형식을 나타내며,이 속성 제네릭 형식 정의 포함 하는 네임 스페이스를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4178">If the current <xref:System.Type> represents a constructed generic type, this property returns the namespace that contains the generic type definition.</span></span> <span data-ttu-id="ef7f9-4179">마찬가지로, 하는 경우 현재 <xref:System.Type> 제네릭 매개 변수를 나타내는 `T`,이 속성을 정의 하는 제네릭 형식 정의 포함 하는 네임 스페이스 반환 `T`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4179">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the namespace that contains the generic type definition that defines `T`.</span></span>  
  
 <span data-ttu-id="ef7f9-4180">하는 경우 현재 <xref:System.Type> 제네릭 매개 변수를 나타내는 개체를이 속성은 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4180">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4181">사용법을 설명 하는 다음 예제는 `Namespace` 및 <xref:System.Type.Module%2A> 속성 및 <xref:System.Type.ToString%2A> 방식의 <xref:System.Type>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4181">This following example demonstrates a use of the `Namespace` and <xref:System.Type.Module%2A> properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Equality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Type ^ left, Type ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="ef7f9-4182">비교할 첫 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4182">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="ef7f9-4183">비교할 두 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4183">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-4184">두 <see cref="T:System.Type" /> 개체가 같은지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4184">Indicates whether two <see cref="T:System.Type" /> objects are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-4185">
            <see langword="true" />가 <paramref name="left" />와 같으면 <paramref name="right" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4185">
              <see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Inequality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Type ^ left, Type ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="ef7f9-4186">비교할 첫 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4186">The first object to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="ef7f9-4187">비교할 두 번째 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4187">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-4188">두 <see cref="T:System.Type" /> 개체가 같지 않은지를 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4188">Indicates whether two <see cref="T:System.Type" /> objects are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-4189">
            <see langword="true" />가 <paramref name="left" />와 다르면 <paramref name="right" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4189">
              <see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.ReflectedType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4190">이 멤버를 얻는 데 사용된 클래스 개체를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4190">Gets the class object that was used to obtain this member.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-4191">이 <see langword="Type" /> 개체를 얻는 데 사용된 <see cref="T:System.Type" /> 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4191">The <see langword="Type" /> object through which this <see cref="T:System.Type" /> object was obtained.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4192">에 대 한 <xref:System.Type> 개체의 경우이 속성의 값은 항상의 값과 같으면는 <xref:System.Type.DeclaringType%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4192">For <xref:System.Type> objects, the value of this property is always the same as the value of the <xref:System.Type.DeclaringType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4193">이 예제에는 중첩 된 클래스의 반사 된 유형을 표시합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4193">This example displays the reflected type of a nested class.</span></span>  
  
 [!code-cpp[Classic Type.ReflectedType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.ReflectedType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.ReflectedType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.DeclaringType" />
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyGetType">
      <MemberSignature Language="C#" Value="public static Type ReflectionOnlyGetType (string typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyGetType (typeName As String, throwIfNotFound As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ ReflectionOnlyGetType(System::String ^ typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwIfNotFound" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName">
          <span data-ttu-id="ef7f9-4194">가져올 <see cref="T:System.Type" />의 어셈블리로 한정된 이름입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4194">The assembly-qualified name of the <see cref="T:System.Type" /> to get.</span>
          </span>
        </param>
        <param name="throwIfNotFound">
          <span data-ttu-id="ef7f9-4195">형식을 찾을 없는 경우 <see langword="true" />을 throw하려면 <see cref="T:System.TypeLoadException" />이고, 형식을 찾을 수 없는 경우 <see langword="false" />을 반환하려면 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4195">
              <see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if the type cannot be found; <see langword="false" /> to return <see langword="null" /> if the type cannot be found.</span>
          </span>
          <span data-ttu-id="ef7f9-4196">또한 <see langword="false" />를 지정하면 다른 예외 조건 중 일부(모두 아님)가 표시되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4196">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span>
          </span>
          <span data-ttu-id="ef7f9-4197">예외 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4197">See the Exceptions section.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="ef7f9-4198">
            <c>typeName</c>에 대해 대/소문자를 구분하지 않는 검색을 수행하려면 <see langword="true" />이고, <c>typeName</c>에 대해 대/소문자를 구분하는 검색을 수행하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4198">
              <see langword="true" /> to perform a case-insensitive search for <c>typeName</c>; <see langword="false" /> to perform a case-sensitive search for <c>typeName</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-4199">대/소문자를 구분하여 검색할지 여부와 형식이 없으면 예외를 throw할지를 지정하여, 지정된 이름의 <see cref="T:System.Type" />을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4199">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found.</span>
          </span>
          <span data-ttu-id="ef7f9-4200">형식은 실행을 위해서가 아니라 리플렉션을 위해서만 로드됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4200">The type is loaded for reflection only, not for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-4201">지정된 이름의 형식이 있으면 이를 반환하고 그렇지 않으면 <see langword="null" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4201">The type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
          <span data-ttu-id="ef7f9-4202">형식을 찾을 수 없는 경우에는 <paramref name="throwIfNotFound" /> 매개 변수가 <see langword="null" />을 반환할지 아니면 예외를 throw할지 지정합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4202">If the type is not found, the <paramref name="throwIfNotFound" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span>
          </span>
          <span data-ttu-id="ef7f9-4203">경우에 따라서는 <paramref name="throwIfNotFound" /> 값과 상관없이 예외가 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4203">In some cases, an exception is thrown regardless of the value of <paramref name="throwIfNotFound" />.</span>
          </span>
          <span data-ttu-id="ef7f9-4204">예외 섹션을 참조하세요.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4204">See the Exceptions section.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4205">형식을 포함 하는 어셈블리 되어 있지 않은 경우 리플렉션 전용 컨텍스트에 로드를 사용 하는 <xref:System.Type.ReflectionOnlyGetType%2A> 메서드는 첫 번째에 해당 어셈블리를 로드 하는 리플렉션 위해서만 사용 하 여는 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> 메서드를 호출 하 여 형식을 로드 하는 다음의 어셈블리의 <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4205">If the assembly containing the type is not already loaded into the reflection-only context, using the <xref:System.Type.ReflectionOnlyGetType%2A> method is equivalent to first loading the assembly for reflection only, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, and then loading the type by calling the assembly's <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="ef7f9-4206">어셈블리의 정규화 된 이름에 대 한 정보를 참조 하십시오.는 <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4206">For information about assembly-qualified names, see the <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="ef7f9-4207">형식 이름 지정에 대 한 자세한 내용은 참조는 <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> 메서드 오버 로드 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4207">For additional details on specifying type names, see the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="ef7f9-4208">실행을 위해 로드 된 어셈블리가 이미 있으면 다른 복사본 리플렉션 전용 컨텍스트에 로드 됩니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4208">If the assembly is already loaded for execution, another copy is loaded into the reflection-only context.</span></span>  
  
 <span data-ttu-id="ef7f9-4209">`throwIfNotFound` 때 일어나는 발견 되지 않으면 형식과 특정 한 다른 예외 조건을 표시 예외 섹션에 설명 된 대로 매개 변수를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4209">The `throwIfNotFound` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="ef7f9-4210">값에 관계 없이 몇 가지 예외가 throw 된 `throwIfNotFound`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4210">Some exceptions are thrown regardless of the value of `throwIfNotFound`.</span></span> <span data-ttu-id="ef7f9-4211">예를 들어, 어셈블리 유효 하지 않을 경우는 <xref:System.BadImageFormatException> 예외가 경우에 `throwIfNotFound` 은 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4211">For example, if the assembly is not valid, a <xref:System.BadImageFormatException> is thrown even if `throwIfNotFound` is `false`.</span></span>  
  
 <span data-ttu-id="ef7f9-4212">리플렉션 전용 컨텍스트를 사용 하는 방법에 대 한 자세한 내용은 참조 [하는 방법: 리플렉션 컨텍스트에 로드 어셈블리](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4212">For more information about using the reflection-only context, see [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="ef7f9-4213">
            <paramref name="typeName" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4213">
              <paramref name="typeName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="ef7f9-4214">클래스 이니셜라이저가 호출되고 예외가 발생합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4214">A class initializer is invoked and throws an exception.</span>
          </span>
        </exception>
        <exception cref="T:System.TypeLoadException">
          <span data-ttu-id="ef7f9-4215">
            <paramref name="throwIfNotFound" />가 <see langword="true" />이고 형식을 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4215">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and the type is not found.</span>
          </span>
          <span data-ttu-id="ef7f9-4216">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4216">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4217">
            <paramref name="throwIfNotFound" />가 <see langword="true" />이고 <paramref name="typeName" />이 포함된 탭 등의 잘못된 문자를 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4217">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span>
          </span>
          <span data-ttu-id="ef7f9-4218">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4218">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4219">
            <paramref name="throwIfNotFound" />가 <see langword="true" />이고 <paramref name="typeName" />이 빈 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4219">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span>
          </span>
          <span data-ttu-id="ef7f9-4220">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4220">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4221">
            <paramref name="throwIfNotFound" />가 <see langword="true" />이고 <paramref name="typeName" />이 잘못된 크기를 가진 배열 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4221">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span>
          </span>
          <span data-ttu-id="ef7f9-4222">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4222">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4223">
            <paramref name="typeName" />이 <see cref="T:System.TypedReference" /> 개체의 배열을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4223">
              <paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" /> objects.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ef7f9-4224">
            <paramref name="typeName" />에 어셈블리 이름이 포함되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4224">
              <paramref name="typeName" /> does not include the assembly name.</span>
          </span>
          <span data-ttu-id="ef7f9-4225">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4225">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4226">
            <paramref name="throwIfNotFound" />가 <see langword="true" />이고 <paramref name="typeName" />이 잘못된 구문(예: "MyType[,\*,]")을 포함합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4226">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax; for example, "MyType[,\*,]".</span>
          </span>
          <span data-ttu-id="ef7f9-4227">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4227">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4228">
            <paramref name="typeName" />이 형식 인수 중 하나로 포인터 형식, <see langword="ByRef" /> 형식 또는 <see cref="T:System.Void" />를 가진 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4228">
              <paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-4229">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4229">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4230">
            <paramref name="typeName" />은 형식 인수의 개수가 잘못된 제네릭 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4230">
              <paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span>
          </span>
          <span data-ttu-id="ef7f9-4231">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4231">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4232">
            <paramref name="typeName" />은 제네릭 형식을 나타내며 그 형식 인수 중 하나가 해당 형식 매개 변수에 대한 제약 조건을 충족하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4232">
              <paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="ef7f9-4233">
            <paramref name="throwIfNotFound" />가 <see langword="true" />이고 어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나를 찾을 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4233">
              <paramref name="throwIfNotFound" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileLoadException">
          <span data-ttu-id="ef7f9-4234">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나를 찾았지만 로드할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4234">The assembly or one of its dependencies was found, but could not be loaded.</span>
          </span>
        </exception>
        <exception cref="T:System.BadImageFormatException">
          <span data-ttu-id="ef7f9-4235">어셈블리 또는 여기에 종속되어 있는 어셈블리 중 하나가 올바르지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4235">The assembly or one of its dependencies is not valid.</span>
          </span>
          <span data-ttu-id="ef7f9-4236">또는</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4236">-or-</span>
          </span>
          <span data-ttu-id="ef7f9-4237">어셈블리가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4237">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span>
          </span>
        </exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
      </Docs>
    </Member>
    <Member MemberName="StructLayoutAttribute">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Type.StructLayoutAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StructLayoutAttribute As StructLayoutAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Runtime::InteropServices::StructLayoutAttribute ^ StructLayoutAttribute { System::Runtime::InteropServices::StructLayoutAttribute ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.StructLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4238">현재 형식의 레이아웃을 설명하는 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4238">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the layout of the current type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-4239">현재 형식의 전체 레이아웃 기능을 설명하는 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4239">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the gross layout features of the current type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4240"><xref:System.Runtime.InteropServices.StructLayoutAttribute> 반환 되지 않습니다는 <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> 메서드.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4240"><xref:System.Runtime.InteropServices.StructLayoutAttribute> is not returned by the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span> <span data-ttu-id="ef7f9-4241">대신,이 속성을 사용 하 여를 가져오려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4241">Instead, use this property to get it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4242">다음 코드 예제에서는 클래스, 구조체 및 특별 한 레이아웃 특성 (구조 내에 중첩 된 클래스)를 사용 하는 구조체를 먼저 정의 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4242">The following code example first defines a class, a structure, and a structure with special layout attributes (the structures are nested within the class).</span></span> <span data-ttu-id="ef7f9-4243">이 예제에서는 다음 사용 하 여는 <xref:System.Type.StructLayoutAttribute%2A> 속성을 한 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 각 형식과 특성의 속성을 표시 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4243">The example then uses the <xref:System.Type.StructLayoutAttribute%2A> property to obtain a <xref:System.Runtime.InteropServices.StructLayoutAttribute> for each type, and displays the properties of the attributes.</span></span>  
  
 [!code-cpp[Type.StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.StructLayoutAttribute/CPP/Type.StructLayoutAttribute.cpp#1)]
 [!code-csharp[Type.StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.StructLayoutAttribute/CS/source.cs#1)]
 [!code-vb[Type.StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.StructLayoutAttribute/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-4244">호출된 메서드가 기본 클래스에서 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4244">The invoked method is not supported in the base class.</span>
          </span>
        </exception>
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Type.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Type.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Type::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="ef7f9-4245">나중에 사용하기 위해 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4245">Reserved for future use.</span>
          </span>
          <span data-ttu-id="ef7f9-4246">IID_NULL이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4246">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="ef7f9-4247">매핑할 전달된 이름의 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4247">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="ef7f9-4248">매핑할 이름의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4248">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="ef7f9-4249">이름을 해석할 로캘 컨텍스트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4249">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="ef7f9-4250">이름에 해당하는 ID를 받는 호출자가 할당한 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4250">Caller-allocated array which receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-4251">이름 집합을 해당하는 디스패치 식별자 집합에 매핑합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4251">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4252">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4252">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="ef7f9-4253">에 대 한 자세한 내용은 `IDispatch::GetIDsOfNames`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4253">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="ef7f9-4254">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4254">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Type.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="ef7f9-4255">반환할 형식 정보입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4255">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="ef7f9-4256">형식 정보의 로캘 식별자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4256">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="ef7f9-4257">요청된 형식 정보 개체에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4257">A pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-4258">인터페이스의 형식 정보를 가져오는 데 사용할 수 있는 개체의 형식 정보를 검색합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4258">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4259">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4259">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="ef7f9-4260">에 대 한 자세한 내용은 `IDispatch::GetTypeInfo`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4260">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="ef7f9-4261">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4261">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Type.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="ef7f9-4262">개체에서 제공하는 형식 정보 인터페이스의 수를 받는 위치를 가리킵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4262">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-4263">개체에서 제공하는 형식 정보 인터페이스의 수를 검색합니다(0 또는 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4263">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4264">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4264">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="ef7f9-4265">에 대 한 자세한 내용은 `IDispatch::GetTypeInfoCount`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4265">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="ef7f9-4266">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4266">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.Invoke">
      <MemberSignature Language="C#" Value="void _Type.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Type.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Type::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="ef7f9-4267">멤버를 식별합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4267">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="ef7f9-4268">나중에 사용하기 위해 예약되어 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4268">Reserved for future use.</span>
          </span>
          <span data-ttu-id="ef7f9-4269">IID_NULL이어야 합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4269">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="ef7f9-4270">인수를 해석할 로캘 컨텍스트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4270">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="ef7f9-4271">호출의 컨텍스트를 설명하는 플래그입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4271">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="ef7f9-4272">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 포함된 구조체에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4272">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="ef7f9-4273">결과를 저장할 위치에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4273">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="ef7f9-4274">예외 정보가 포함된 구조체에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4274">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="ef7f9-4275">오류가 있는 첫 번째 인수의 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4275">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ef7f9-4276">개체에서 노출하는 메서드와 속성에 대한 액세스를 제공합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4276">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4277">이 메서드는 비관리 코드에서 액세스를 위한 관리 되는 클래스는 하며 관리 코드에서 호출할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4277">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="ef7f9-4278">에 대 한 자세한 내용은 `IDispatch::Invoke`, MSDN Library를 참조 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4278">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="ef7f9-4279">COM <c>IDispatch</c> 인터페이스를 사용하는 런타임에 바인딩된 액세스는 지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4279">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4280">현재 <see langword="String" />의 이름을 나타내는 <see langword="Type" />을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4280">Returns a <see langword="String" /> representing the name of the current <see langword="Type" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ef7f9-4281">현재 <see cref="T:System.String" />의 이름을 나타내는 <see cref="T:System.Type" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4281">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4282">이 메서드는 정규화 된 공용 언어 런타임 네임 스페이스 및 모든 기본 형식에 대 한 이름을 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4282">This method returns the fully qualified common language runtime namespace and name for all primitive types.</span></span> <span data-ttu-id="ef7f9-4283">예를 들어 C# 명령 `(long)0.Type().ToString()` 단순히 "Int64" 대신 "System.Int64"를 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4283">For example, the C# instruction, `(long)0.Type().ToString()` returns "System.Int64" instead of merely "Int64".</span></span>  
  
 <span data-ttu-id="ef7f9-4284">하는 경우 현재 <xref:System.Type> 네임 스페이스 및 중첩 된 형식이 아니라는 어셈블리가 정규화 된 제네릭 형식, 형식 및 해당 형식 인수를 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4284">If the current <xref:System.Type> represents a generic type, the type and its type arguments are qualified by namespace and by nested type, but not by assembly.</span></span> <span data-ttu-id="ef7f9-4285">하는 경우 현재 <xref:System.Type> 나타냅니다 정의 제네릭 형식 또는 제네릭 메서드,이 메서드 형식 매개 변수 형식 매개 변수가 비 정규화 된 이름을 반환 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4285">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method returns the unqualified name of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4286">사용법을 설명 하는 다음 예제는 <xref:System.Type.Namespace%2A> 및 <xref:System.Type.Module%2A> 속성 및 `ToString` 방식의 <xref:System.Type>합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4286">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and <xref:System.Type.Module%2A> properties and the `ToString` method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 <span data-ttu-id="ef7f9-4287">반환 된 문자열을 비교 하는 다음 예제는 <xref:System.Type.ToString%2A> 메서드 및 `Name`, <xref:System.Type.FullName%2A>, 및 <xref:System.Type.AssemblyQualifiedName%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4287">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public virtual RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4288">현재 <see cref="T:System.Type" />에 대한 핸들을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4288">Gets the handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-4289">현재 <see cref="T:System.Type" />에 대한 핸들입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4289">The handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4290">`TypeHandle` 형식을 나타내는 내부 데이터 구조에 대 한 포인터를 캡슐화 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4290">`TypeHandle` encapsulates a pointer to an internal data structure that represents the type.</span></span> <span data-ttu-id="ef7f9-4291">이 핸들은 프로세스 수명 동안 고유 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4291">This handle is unique during the process lifetime.</span></span> <span data-ttu-id="ef7f9-4292">핸들을 얻은 응용 프로그램 도메인에만 유효 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4292">The handle is valid only in the application domain in which it was obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ef7f9-4293">다음 예제에서는 해당 유형의 핸들을 반환 하 고 핸들에서 형식을 가져오고 표시 하는 메서드에 핸들을 전달 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4293">The following example returns the handle of the corresponding type and passes the handle to a method that gets the type from the handle and displays it.</span></span>  
  
 [!code-cpp[Type_TypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_TypeHandle/CPP/type_typehandle.cpp#1)]
 [!code-csharp[Type_TypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_TypeHandle/CS/type_typehandle.cs#1)]
 [!code-vb[Type_TypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_TypeHandle/VB/type_typehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="ef7f9-4294">.NET Compact Framework에서는 현재 이 속성을 지원하지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4294">The .NET Compact Framework does not currently support this property.</span>
          </span>
        </exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeInitializer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4295">형식에 대한 이니셜라이저를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4295">Gets the initializer for the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-4296">
            <see cref="T:System.Type" />에 대한 클래스 생성자의 이름이 들어 있는 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4296">An object that contains the name of the class constructor for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef7f9-4297">클래스 이니셜라이저는를 통해 사용할 수는 <xref:System.Type.FindMembers%2A> 메서드, 또는 오버 로드를 통해는 <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, 및 <xref:System.Type.GetConstructors%2A> 사용 하는 메서드와 <xref:System.Reflection.BindingFlags> 매개 변수로 합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4297">Class initializers are also available through the <xref:System.Type.FindMembers%2A> method, or through overloads of the <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, and <xref:System.Type.GetConstructors%2A> methods that take <xref:System.Reflection.BindingFlags> as a parameter.</span></span>  
  
 <span data-ttu-id="ef7f9-4298">하는 경우 현재 <xref:System.Type> 이 속성은 반환 제네릭 형식 또는 제네릭 메서드 정의의 형식 매개 변수를 나타내는 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="ef7f9-4298">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public abstract Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.UnderlyingSystemType</InterfaceMember>
        <InterfaceMember>P:System.Reflection.IReflect.UnderlyingSystemType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="ef7f9-4299">이 형식을 나타내는 공용 언어 런타임에서 제공되는 형식을 나타냅니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4299">Indicates the type provided by the common language runtime that represents this type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="ef7f9-4300">
            <see cref="T:System.Type" />의 내부 시스템 형식입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ef7f9-4300">The underlying system type for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
  </Members>
</Type>