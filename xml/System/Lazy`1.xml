<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ad53c03faf661b5a698d5ef0c4fcd9d0451bbc14" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="facc2-101">느리게 초기화되는 개체의 형식입니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="facc2-101">The type of object that is being lazily initialized.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="facc2-102">초기화 지연에 대한 지원을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="facc2-102">Provides support for lazy initialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="facc2-103">이러한 생성 또는 실행 프로그램의 수명 기간 동안 발생 하지 않을 수 있는 경우에 특히 큰 수 또는 리소스를 많이 사용 개체의 생성 또는 리소스를 많이 사용 작업의 실행을 지연 시키려면 초기화 지연 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="facc2-104">인스턴스를 만들 초기화 지연를 준비 하려면 <xref:System.Lazy%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="facc2-105">형식 인수는 <xref:System.Lazy%601> 만든 개체에 초기화 지연 하려고 하는 개체의 유형을 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="facc2-106">만드는 데 사용 하는 생성자는 <xref:System.Lazy%601> 개체 초기화의 특징을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="facc2-107">처음으로 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 속성에 액세스할 때 초기화 지연이 발생합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="facc2-108">대부분의 경우에서 두 가지 질문에 답변에 따라 생성자를 선택 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="facc2-109">지연 초기화 된 개체는 둘 이상의 스레드에서 액세스할 수 있습니까?</span><span class="sxs-lookup"><span data-stu-id="facc2-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="facc2-110">이 경우는 <xref:System.Lazy%601> 개체는 모든 스레드에서 만들 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="facc2-111">기본 동작은 스레드로부터 안전한 만들려는 인 간단한 생성자 중 하나를 사용 하면 <xref:System.Lazy%601> 개체 때문에 액세스를 시도 스레드 개수에 관계 없이 느리게 인스턴스화된 개체의 인스턴스를 하나만 생성 됩니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="facc2-112">만들려면는 <xref:System.Lazy%601> 스레드로부터 안전 하지 않은 개체를 없는 스레드 보안을 지정할 수 있는 생성자를 사용 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="facc2-113">만들기는 <xref:System.Lazy%601> 개체 스레드로부터 안전한 지연 초기화 된 개체를 보호 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="facc2-114">여러 스레드에서 지연 초기화 된 개체를 액세스할 수를 확인 해야 속성 및 메서드에 다중 스레드 액세스에 대해 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="facc2-115">초기화 지연 많은 코드, 않아도 또는 지연 된 초기화 개체 필요 하 고 예외를 throw 하지 않는 모든 작업을 수행 하는 기본 생성자가?</span><span class="sxs-lookup"><span data-stu-id="facc2-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="facc2-116">초기화 코드를 작성 하거나 예외를 처리 해야 하는 경우 팩터리 메서드를 사용 하는 생성자 중 하나를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="facc2-117">팩터리 메서드에 초기화 코드를 작성 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="facc2-118">다음 표에서 이러한 두 가지 요소에 따라, 선택 하는 생성자를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="facc2-119">개체에서 액세스할 수</span><span class="sxs-lookup"><span data-stu-id="facc2-119">Object will be accessed by</span></span>|<span data-ttu-id="facc2-120">초기화 코드가 없는 해야 하는 경우 (기본 생성자)를 사용 하 여</span><span class="sxs-lookup"><span data-stu-id="facc2-120">If no initialization code is required (default constructor), use</span></span>|<span data-ttu-id="facc2-121">초기화 코드가 필요한 경우 사용</span><span class="sxs-lookup"><span data-stu-id="facc2-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="facc2-122">여러 스레드</span><span class="sxs-lookup"><span data-stu-id="facc2-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="facc2-123">스레드 하나</span><span class="sxs-lookup"><span data-stu-id="facc2-123">One thread</span></span>|<span data-ttu-id="facc2-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> 와 `isThreadSafe` 로 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="facc2-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 와 `isThreadSafe` 로 설정 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="facc2-126">팩터리 메서드를 지정 하는 람다 식을 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="facc2-127">그러면 모든 초기화 코드가 한 곳에 유지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="facc2-128">람다 식 지연 초기화 된 개체의 생성자에 전달할 인수를 포함 하 여 컨텍스트를 캡처합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="facc2-129">**예외 캐싱** 예외가 캐시 되는 팩터리 메서드를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="facc2-130">즉, 팩터리 메서드 예외 첫 번째 시간을 throw 하는 경우 스레드 액세스를 시도 <xref:System.Lazy%601.Value%2A> 의 속성은 <xref:System.Lazy%601> 개체에서 모든 후속 시도 동일한 예외가 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="facc2-131">이렇게 하면를 호출할 때마다는 <xref:System.Lazy%601.Value%2A> 속성 동일한 결과 서로 다른 여러 스레드에서 다른 결과 얻을 경우 발생할 수 있는 미묘한 오류를 방지할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="facc2-132"><xref:System.Lazy%601> 대신 실제 `T` 는 그렇지 않은 경우는 초기화 된 이전 시점의 시작 하는 동안 일반적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="facc2-133">이전 시점에서 작업이 실패는 일반적으로 치명적입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="facc2-134">복구 가능한 오류에 대 한 존재할 경우 초기화 지연을 사용 하지 않는 경우와 마찬가지로 재시도 논리에 (이 경우, 팩터리 메서드), 초기화 루틴을 작성 하는 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren’t using lazy initialization.</span></span>  
  
 <span data-ttu-id="facc2-135">**잠금에 대 한 대안** 특정 상황에서의 오버 헤드를 방지 하려는 <xref:System.Lazy%601> 개체의 기본 잠금 동작 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="facc2-136">드문 경우에서 교착 상태가 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="facc2-137">이러한 경우에 사용할 수 있습니다는 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 또는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자를 지정 하 고 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="facc2-138">이 통해는 <xref:System.Lazy%601> 개체는 스레드를 호출 하는 경우 여러 스레드를 각 지연 초기화 된 개체의 복사본을 만들 수는 <xref:System.Lazy%601.Value%2A> 속성 동시에 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="facc2-139"><xref:System.Lazy%601> 개체 하면 모든 스레드가 지연 초기화 된 개체의 같은 인스턴스를 사용 하 고 사용 되지 않은 인스턴스를 삭제 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="facc2-140">따라서 잠금 오버 헤드를 줄이는 비용 프로그램 만들고 하는 부담이 큰 개체가의 추가 복사본을 삭제할 경우에 따라 수입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="facc2-141">대부분의 경우에서이 어렵습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="facc2-142">에 대 한 예제는 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 및 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자가이 동작을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="facc2-143">지정 하는 경우 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, 예외는 캐시 안, 팩터리 메서드를 지정 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="facc2-144">**해당 하는 생성자** 사용을 설정 하는 것 외에도 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 및 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자는 다른 생성자의 기능을 복제할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="facc2-145">다음 표에서 이와 같은 동작을 생성 하는 매개 변수 값을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="facc2-146">만들려면는 <xref:System.Lazy%601> 되는 개체</span><span class="sxs-lookup"><span data-stu-id="facc2-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="facc2-147">생성자가 포함 된에 대 한는 `LazyThreadSafetyMode` `mode` 매개 변수를 설정 `mode` 를</span><span class="sxs-lookup"><span data-stu-id="facc2-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="facc2-148">부울 생성자에 대 한 `isThreadSafe` 매개 변수를 설정 `isThreadSafe` 를</span><span class="sxs-lookup"><span data-stu-id="facc2-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="facc2-149">스레드 안전성 매개 변수가 없는 생성자에 대 한</span><span class="sxs-lookup"><span data-stu-id="facc2-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="facc2-150">완전히 한 스레드로부터 안전 합니다. 에서는 하나의 스레드만 값을 초기화 되도록 잠금을 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="facc2-151">이러한 모든 생성자는 완전히 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="facc2-152">스레드로부터 안전 하지 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="facc2-153">해당 사항 없음.</span><span class="sxs-lookup"><span data-stu-id="facc2-153">Not applicable.</span></span>|  
|<span data-ttu-id="facc2-154">완전히 한 스레드로부터 안전 합니다. 스레드 경합 값을 초기화 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="facc2-155">해당 사항 없음.</span><span class="sxs-lookup"><span data-stu-id="facc2-155">Not applicable.</span></span>|<span data-ttu-id="facc2-156">해당 사항 없음.</span><span class="sxs-lookup"><span data-stu-id="facc2-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="facc2-157">**다른 기능** 의 사용에 대 한 내용은 <xref:System.Lazy%601> thread 정적 필드 또는 속성에 대 한 백업 저장소로 참조 [초기화 지연](~/docs/framework/performance/lazy-initialization.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="facc2-158">다음 예제에서는 <xref:System.Lazy%601> 여러 스레드에서 액세스를 사용 하 여 지연 초기화를 제공 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="facc2-159">이 예제에서는 사용 된 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="facc2-160">사용 방법을 설명는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 생성자 (지정 `true` 에 대 한 `isThreadSafe`) 및 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`).</span><span class="sxs-lookup"><span data-stu-id="facc2-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="facc2-161">다른 생성자를 전환 하려면 생성자 주석으로 처리 되어 변경 하기만 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="facc2-162">예외를 보여 주는 예제에 대 한 참조는 동일한 생성자를 사용 하 여 캐싱는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="facc2-163">이 예제에서는 여러 스레드 중 하나를 사용하여 지연 초기화될 `LargeObject` 클래스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="facc2-164">코드의 네 가지 주요 섹션 이니셜라이저, 팩터리 메서드, 실제 초기화 및 생성자의 생성을 보여 주기는 `LargeObject` 개체가 만들어질 때 메시지를 표시 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="facc2-165">예제에서는 `Main` 메서드의 시작 부분에서 `LargeObject`에 대해 스레드로부터 안전한 지연 이니셜라이저를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="facc2-166">팩터리 메서드 추가 초기화에 대 한 자리 표시자를 사용 하는 개체를 만들기를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="facc2-167">Note 처음 두 개의 코드 섹션 아래 그림과 같이 람다 함수를 사용 하 여 결합할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="facc2-168">이 예제에서는 초기화 지연이 발생 하기 전에 정해 지지 않은 기간 경과할 수 있습니다를 나타내기 위해 일시 중지 됩니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="facc2-169">누를 때는 **Enter** 키, 예제를 만들고 세 개의 스레드를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="facc2-170">`ThreadProc` 모든 세 개의 스레드 호출에 의해 사용 되는 메서드는 <xref:System.Lazy%601.Value%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="facc2-171">이런 경우 처음으로 `LargeObject` 인스턴스가 만들어집니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="facc2-172">생성자는 `LargeObject` 클래스 코드의 마지막 키 섹션을 포함 하는 메시지를 표시 하며 초기화 하는 스레드의 id를 기록 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="facc2-173">프로그램 출력의 전체 코드 목록 끝에 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="facc2-174">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="facc2-175">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="facc2-176">기본적으로의 모든 공용 및 보호 된 멤버는 <see cref="T:System.Lazy`1" /> 클래스는 스레드로부터 안전 하 고 여러 스레드에서 동시에 사용할 수 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="facc2-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span>
      </span>
      <span data-ttu-id="facc2-177">필요에 따라 및 인스턴스당 형식의 생성자에 매개 변수를 사용 하 여 이러한 스레드 보안 보장을 제거할 수 있습니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="facc2-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="facc2-178">
            <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-178">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="facc2-179">
            <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="facc2-180">초기화 지연이 발생하는 경우 대상 형식의 기본 생성자가 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-180">When lazy initialization occurs, the default constructor of the target type is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="facc2-181">이 생성자를 사용 하 여 만든 인스턴스는 여러 스레드에서 동시에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-181">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="facc2-182">스레드 보안 모드는 <xref:System.Lazy%601> 이 생성자를 사용 하 여 초기화 되는 인스턴스는 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-182">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="facc2-183">스레드 안전 모드는 여러 스레드를 초기화 하려고 하는 경우 동작에 설명 된 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-183">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="facc2-184">A <xref:System.Lazy%601> 이 생성자를 사용 하 여 만든 인스턴스 예외를 캐시 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-184">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="facc2-185">자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="facc2-185">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="facc2-186">다음 예제에서는이 생성자를 사용 하는 방법을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-186">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="facc2-187">에서는 또한 사용은 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 생성자 (지정 하 `true` 에 대 한 `isThreadSafe`) 및 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`).</span><span class="sxs-lookup"><span data-stu-id="facc2-187">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="facc2-188">다른 생성자를 전환 하려면 생성자 주석으로 처리 되어 변경 하기만 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-188">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="facc2-189">이 예제에서는 여러 스레드 중 하나를 사용하여 지연 초기화될 `LargeObject` 클래스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-189">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="facc2-190">이 예제 코드에서는 두 키 줄은 실제 초기화 및 이니셜라이저 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-190">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="facc2-191">예제에서는 `Main` 메서드의 시작 부분에서 `LargeObject`에 대해 스레드로부터 안전한 지연 이니셜라이저를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-191">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="facc2-192">이 예제에서는 만들고을 차단 하는 세 개의 스레드를 시작 합니다.는 <xref:System.Threading.ManualResetEvent> 개체 예제는 한 번에 스레드를 해제할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-192">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="facc2-193">`ThreadProc` 모든 세 개의 스레드 호출에 의해 사용 되는 메서드는 <xref:System.Lazy%601.Value%2A> 가져올 속성의 `LargeObject` 인스턴스:</span><span class="sxs-lookup"><span data-stu-id="facc2-193">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="facc2-194"><xref:System.Lazy%601> 클래스 잠금, 하나의 스레드를 만들 수 있도록 제공 된 `LargeObject` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-194">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="facc2-195">모든 다른 스레드가 동일한 인스턴스를 가져오고 있는지 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-195">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="facc2-196">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-196">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="facc2-197">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-197">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe">
          <span data-ttu-id="facc2-198">이 인스턴스가 여러 스레드에서 동시에 사용될 수 있게 하려면 <see langword="true" />이고, 한 번에 한 스레드에서만 사용될 수 있게 하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-198">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="facc2-199">
            <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-199">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="facc2-200">초기화 지연이 발생하는 경우 대상 형식의 기본 생성자 및 지정된 초기화 모드가 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-200">When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="facc2-201">스레드 보안 모드는 <xref:System.Lazy%601> 이 생성자를 사용 하 여 초기화 되는 인스턴스는 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 경우 `isThreadSafe` 은 `true`, 그렇지 않으면 모드는 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-201">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="facc2-202">스레드 안전 모드는 여러 스레드를 초기화 하려고 하는 경우 동작에 설명 된 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-202">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="facc2-203">지정 하는 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 모드를 사용 하 여는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 또는 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-203">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="facc2-204">A <xref:System.Lazy%601> 이 생성자를 사용 하 여 만든 인스턴스 예외를 캐시 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-204">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="facc2-205">자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="facc2-205">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="facc2-206">다음 예제에서는 스레드로부터 지연 초기화 된 개체에 대 한 모든 액세스는 동일한 스레드에서 발생 하는 시나리오에 대 한 안전 하지 않은 지연 이니셜라이저를 만들려면이 생성자의 사용을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-206">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="facc2-207">사용 방법을 설명는 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 에 대 한 `mode`합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-207">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="facc2-208">다른 생성자를 전환 하려면 변경 생성자를 주석으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-208">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="facc2-209">다중 스레드 시나리오에서이 생성자를 사용 하는 방법을 보여 주는 코드에 대 한 (지정 `true` 에 대 한 `isThreadSafe`), 예를 참조는 <xref:System.Lazy%601.%23ctor> 생성자 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-209">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="facc2-210">이 예제에서는 정의 `LargeObject` 지연 초기화 될 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-210">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="facc2-211">에 `Main` 메서드 예제에서는 생성 한 <xref:System.Lazy%601> 인스턴스 한 다음 일시 중지 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-211">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="facc2-212">누를 때는 **Enter** 액세스 하는 키에 예제는 <xref:System.Lazy%601.Value%2A> 의 속성은 <xref:System.Lazy%601> 초기화를 발생 시키는 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-212">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="facc2-213">생성자는 `LargeObject` 콘솔 메시지를 표시 하는 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-213">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="facc2-214">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-214">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="facc2-215">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-215">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="facc2-216">필요할 때 지연된 초기화 값을 생성하기 위해 호출된 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-216">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="facc2-217">
            <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-217">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="facc2-218">초기화 지연이 발생하는 경우 지정된 초기화 함수가 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-218">When lazy initialization occurs, the specified initialization function is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="facc2-219">이 생성자를 사용 하 여 만든 인스턴스는 여러 스레드에서 동시에 사용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-219">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="facc2-220">스레드 보안 모드는 <xref:System.Lazy%601> 이 생성자를 사용 하 여 초기화 되는 인스턴스는 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-220">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="facc2-221">스레드 안전 모드는 여러 스레드를 초기화 하려고 하는 경우 동작에 설명 된 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-221">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="facc2-222">에 의해 throw 되는 예외를 `valueFactory` 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-222">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="facc2-223">자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="facc2-223">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="facc2-224">다음 예제에서는 예외 캐싱을 사용 하 여 지연 초기화를 제공 하려면이 생성자의 사용법을 보여줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-224">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="facc2-225">사용 방법을 설명는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 생성자 (지정 `true` 에 대 한 `isThreadSafe`) 및 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`).</span><span class="sxs-lookup"><span data-stu-id="facc2-225">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="facc2-226">다른 생성자를 전환 하려면 생성자 주석으로 처리 되어 변경 하기만 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-226">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="facc2-227">이 예제에서는 여러 스레드 중 하나를 사용하여 지연 초기화될 `LargeObject` 클래스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-227">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="facc2-228">코드의 세 가지 주요 섹션 이니셜라이저, 실제 초기화 및 생성자의 생성을 보여 주기는 `LargeObject` 캐싱 예외를 보여 주는 클래스.</span><span class="sxs-lookup"><span data-stu-id="facc2-228">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="facc2-229">예제에서는 `Main` 메서드의 시작 부분에서 `LargeObject`에 대해 스레드로부터 안전한 지연 이니셜라이저를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-229">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="facc2-230">이 예제에서는 만들고 세 개의 스레드를 시작 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-230">The example creates and starts three threads.</span></span> <span data-ttu-id="facc2-231">`ThreadProc` 모든 세 개의 스레드 호출에 의해 사용 되는 메서드는 <xref:System.Lazy%601.Value%2A> 가져올 속성의 `LargeObject` 인스턴스:</span><span class="sxs-lookup"><span data-stu-id="facc2-231">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="facc2-232">생성자에는 `LargeObject` 클래스, 세 번째 키 코드 부분을 처음으로 예외를 throw 한 `LargeObject` 인스턴스를 만들었지만 이후에 적용 되려면 인스턴스 만들기를 허용:</span><span class="sxs-lookup"><span data-stu-id="facc2-232">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="facc2-233">이 예제를 실행할 때의 인스턴스를 만들려고 시도 하는 경우 첫 번째 스레드가 `LargeObject` 실패 하 고 예외가 발견 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-233">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="facc2-234">다음 스레드 인스턴스를 만들 성공적으로 예상할 수 있지만 <xref:System.Lazy%601> 개체에서 예외를 캐시 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-234">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="facc2-235">이 때문에 세 개의 스레드 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-235">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="facc2-236">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-236">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="facc2-237">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-237">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="facc2-238">
            <paramref name="valueFactory" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-238">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="facc2-239">스레드 보안 모드를 지정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-239">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="facc2-240">
            <paramref name="T" />의 기본 생성자 및 스레드로부터 안전한 지정된 모드를 사용하는 <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-240">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the default constructor of <paramref name="T" /> and the specified thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="facc2-241">스레드 보안 모드는 <xref:System.Lazy%601> 인스턴스가 여러 스레드를 초기화 하려고 하는 경우 동작에 설명 된 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-241">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="facc2-242">A <xref:System.Lazy%601> 이 생성자를 사용 하 여 만든 인스턴스 예외를 캐시 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-242">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="facc2-243">자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="facc2-243">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="facc2-244">다음 예제에서는 여러 스레드를 경합 지연 개체를 만들 수 있도록 지연 이니셜라이저를 만들려면이 생성자의 사용을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-244">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="facc2-245">여러 스레드에서 인스턴스를 만드는 성공 하더라도 모든 스레드는 먼저 생성 된 인스턴스를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-245">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="facc2-246">단일 스레드 시나리오에서이 생성자를 사용 하는 방법을 보여 주는 예제를 보려면 (지정 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 에 대 한 `mode`), 참조는 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-246">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="facc2-247">잠금 대신 다중 스레드 시나리오에서 경합 상태를 제공 하려면이 생성자를 사용 하는 방법을 보여 주는 예제에 대 한 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`), 참조는 <xref:System.Lazy%601.%23ctor> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-247">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="facc2-248">이 예제에서는 정의 `LargeObject` 여러 스레드 중 하나로 인해 지연 초기화 될 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-248">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="facc2-249">코드의 세 가지 주요 섹션 설명 이니셜라이저, 실제 초기화 및 생성자의 생성 및의 종료자는 `LargeObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-249">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="facc2-250">맨 앞에 `Main` 메서드 예제에서는 생성 된 <xref:System.Lazy%601> 개체의 초기화 지연 수행 하는 `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="facc2-250">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="facc2-251">이 예제에서는 만들고을 차단 하는 세 개의 스레드를 시작 합니다.는 <xref:System.Threading.ManualResetEvent> 개체 예제는 한 번에 스레드를 해제할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-251">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="facc2-252">에 `ThreadProc` 모든 세 개의 스레드를 호출 하 여 사용 되는 메서드는 <xref:System.Lazy%601.Value%2A> 속성 만듭니다는 `LargeObject` 인스턴스:</span><span class="sxs-lookup"><span data-stu-id="facc2-252">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="facc2-253">때문에 대 한 생성자는 <xref:System.Lazy%601> 지정 된 인스턴스 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, 세 개의 스레드를 만들 수 `LargeObject` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-253">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="facc2-254">예제에서는이 생성자의 종료자 콘솔 메시지 표시 하 여는 `LargeObject` 클래스:</span><span class="sxs-lookup"><span data-stu-id="facc2-254">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="facc2-255">그러나는 <xref:System.Lazy%601> 개체를 사용 하면 모든 스레드에서 인스턴스를 하나만 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-255">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="facc2-256">이 예제에서 출력을 세 개의 스레드를 사용 하 여의 동일한 인스턴스에 표시 된 가비지 수집으로 다른 두 인스턴스를 다시 사용할 수를 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-256">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="facc2-257">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-257">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="facc2-258">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-258">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="facc2-259">
            <paramref name="mode" />에 잘못된 값이 포함된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-259">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="facc2-260">필요할 때 지연된 초기화 값을 생성하기 위해 호출된 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-260">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="isThreadSafe">
          <span data-ttu-id="facc2-261">이 인스턴스가 여러 스레드에서 동시에 사용될 수 있게 하려면 <see langword="true" />이고, 한 번에 한 스레드에서만 사용될 수 있게 하려면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-261">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="facc2-262">
            <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-262">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="facc2-263">초기화 지연이 발생하는 경우 지정된 초기화 함수 및 초기화 모드가 사용됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-263">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="facc2-264">스레드 보안 모드는 <xref:System.Lazy%601> 이 생성자를 사용 하 여 초기화 되는 인스턴스는 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 경우 `isThreadSafe` 은 `true`, 그렇지 않으면 모드는 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-264">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="facc2-265">스레드 안전 모드는 여러 스레드를 초기화 하려고 하는 경우 동작에 설명 된 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-265">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="facc2-266">지정 하는 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 모드를 사용 하 여는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 또는 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-266">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="facc2-267">에 의해 throw 되는 예외를 `valueFactory` 캐시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-267">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="facc2-268">자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="facc2-268">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="facc2-269">다음 예제에서는 단일 스레드 시나리오에서 캐싱 예외와 함께 초기화 지연 제공 하려면이 생성자의 사용법을 보여줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-269">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="facc2-270">사용 방법을 설명는 <xref:System.Lazy%601.%23ctor%2A> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 에 대 한 `mode`).</span><span class="sxs-lookup"><span data-stu-id="facc2-270">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="facc2-271">해당 생성자를 전환 하려면 변경 생성자를 주석으로 처리 됩니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-271">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="facc2-272">다중 스레드 시나리오에서이 생성자를 사용 하는 방법을 보여 주는 코드에 대 한 (지정 `true` 에 대 한 `isThreadSafe`), 예를 참조는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 생성자 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-272">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="facc2-273">이 예제에서는 여러 스레드 중 하나를 사용하여 지연 초기화될 `LargeObject` 클래스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-273">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="facc2-274">코드의 세 가지 주요 섹션 이니셜라이저, 실제 초기화 및 생성자의 생성을 보여 주기는 `LargeObject` 캐싱 예외를 보여 주는 클래스.</span><span class="sxs-lookup"><span data-stu-id="facc2-274">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="facc2-275">예제에서는 `Main` 메서드의 시작 부분에서 `LargeObject`에 대해 스레드로부터 안전한 지연 이니셜라이저를 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-275">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="facc2-276">생성자에 대 한 호출에는 `isThreadSafe` 매개 변수는 `false`이므로 <xref:System.Lazy%601> 는 스레드로부터 안전 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-276">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="facc2-277">이 예에서는 호출 하는 스레드로부터 안전 하지 않으므로 <xref:System.Lazy%601.Value%2A> 세 번 동일한 스레드에서 속성:</span><span class="sxs-lookup"><span data-stu-id="facc2-277">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="facc2-278">생성자에는 `LargeObject` 클래스, 세 번째 키 코드 부분을 처음으로 예외를 throw 한 `LargeObject` 인스턴스를 만들었지만 이후에 적용 되려면 인스턴스 만들기를 허용:</span><span class="sxs-lookup"><span data-stu-id="facc2-278">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="facc2-279">이 예제를 실행할 때의 인스턴스를 만드는 첫 번째 시도 `LargeObject` 실패 하 고 예외가 발견 되었습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-279">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="facc2-280">다음 시도 계속 실행 하면 되지만 <xref:System.Lazy%601> 개체에서 예외를 캐시 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-280">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="facc2-281">이 때문에 3 번 모든 예외를 throw 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-281">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="facc2-282">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-282">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="facc2-283">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-283">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="facc2-284">
            <paramref name="valueFactory" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-284">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="facc2-285">필요할 때 지연된 초기화 값을 생성하기 위해 호출된 대리자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-285">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="facc2-286">스레드 보안 모드를 지정하는 열거형 값 중 하나입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-286">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="facc2-287">지정된 초기화 함수 및 스레드로부터 안전한 모드를 사용하는 <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-287">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="facc2-288">스레드 보안 모드는 <xref:System.Lazy%601> 인스턴스가 여러 스레드를 초기화 하려고 하는 경우 동작에 설명 된 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-288">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="facc2-289">에 의해 throw 되는 예외를 `valueFactory` 않는 경우 캐시는 `mode` 은 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-289">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="facc2-290">자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.</span><span class="sxs-lookup"><span data-stu-id="facc2-290">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="facc2-291">다음 예제에서는 여러 스레드를 경합 지연 개체를 만들 수 있도록 지연 이니셜라이저를 만들려면이 생성자의 사용을 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-291">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="facc2-292">여러 스레드에서 인스턴스를 만드는 성공 하더라도 모든 스레드는 먼저 생성 된 인스턴스를 사용 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-292">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="facc2-293">또한 예제에 지정 하는 경우 예외가 캐시 되지 않습니다는 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>지연 만든 형식의 기본 생성자가 초기화를 대신 함수에서 수행 하는 경우에 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-293">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="facc2-294">단일 스레드 시나리오에서이 생성자를 사용 하는 방법을 보여 주는 예제를 보려면 (지정 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 에 대 한 `mode`), 참조는 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-294">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="facc2-295">잠금 대신 다중 스레드 시나리오에서 경합 상태를 제공 하려면이 생성자를 사용 하는 방법을 보여 주는 예제에 대 한 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`), 참조는 <xref:System.Lazy%601.%23ctor> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-295">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="facc2-296">이 예제에서는 정의 `LargeObject` 여러 스레드 중 하나로 인해 지연 초기화 될 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-296">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="facc2-297">코드의 네 가지 주요 섹션 설명 이니셜라이저, 실제 초기화, 초기화 함수 및는 생성자의 생성 및의 종료자는 `LargeObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-297">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="facc2-298">맨 앞에 `Main` 메서드 예제에서는 생성 된 <xref:System.Lazy%601> 개체의 초기화 지연 수행 하는 `LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="facc2-298">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="facc2-299">지연 이니셜라이저는 함수를 사용 하 여 초기화를 수행 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-299">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="facc2-300">이 경우 함수는에 대 한 기본 생성자가 없습니다 있기 때문에 필요한는 `LargeObject` 클래스입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-300">In this case, a function is required because there is no default constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="facc2-301">이 예제에서는 만들고을 차단 하는 세 개의 스레드를 시작 합니다.는 <xref:System.Threading.ManualResetEvent> 개체 예제는 한 번에 스레드를 해제할 수 있도록 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-301">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="facc2-302">에 `ThreadProc` 모든 세 개의 스레드를 호출 하 여 사용 되는 메서드는 <xref:System.Lazy%601.Value%2A> 속성 만듭니다는 `LargeObject` 인스턴스:</span><span class="sxs-lookup"><span data-stu-id="facc2-302">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="facc2-303">코드의 세 번째 키 섹션을 만들려는 초기화 지연 함수 호출의 `LargeObject` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-303">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="facc2-304">함수는 첫 번째 예외 받은 때를 throw 됩니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-304">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="facc2-305">다른 <xref:System.Threading.LazyThreadSafetyMode> 설정, 초기화 함수에서 처리 되지 않은 예외가 캐시 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-305">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="facc2-306">그러나 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 캐싱 예외를 표시 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-306">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="facc2-307">이 예제에서 출력 개체를 초기화 하는 후속 시도 성공 했는지 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-307">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="facc2-308">예외 메시지는 일반적으로 다른 스레드에서 개체를 초기화 했습니다. 한을 나타내는 메시지가 있는지 후 나타납니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-308">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="facc2-309">이것은 대기 시간을 throw 하 고 예외를 catch 하 여 추가 때문입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-309">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="facc2-310">때문에 대 한 생성자는 <xref:System.Lazy%601> 지정 된 인스턴스 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, 세 개의 스레드를 만들 수 `LargeObject` 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-310">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="facc2-311">예제에서는이 생성자의 종료자 콘솔 메시지 표시 하 여는 `LargeObject` 클래스:</span><span class="sxs-lookup"><span data-stu-id="facc2-311">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="facc2-312"><xref:System.Lazy%601> 개체 하면 모든 (스레드를 제외한 스레드가 초기화 함수가 예외를 throw 하는 위치) 인스턴스를 하나만 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-312">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="facc2-313">예제의 출력은이 보여 줍니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-313">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="facc2-314">편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-314">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="facc2-315">이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-315">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="facc2-316">
            <paramref name="mode" />에 잘못된 값이 포함된 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-316">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="facc2-317">
            <paramref name="valueFactory" />가 <see langword="null" />인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-317">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="facc2-318">값이 이 <see cref="T:System.Lazy`1" /> 인스턴스에 대해 만들어졌는지 여부를 나타내는 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-318">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="facc2-319">값이 이 <see cref="T:System.Lazy`1" /> 인스턴스에 대해 만들어졌으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-319">
              <see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="facc2-320">초기화 지연에 대해 발생 하는 경우는 <xref:System.Lazy%601> 인스턴스를 생성 되는 값 또는 예외가 throw에서 발생할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-320">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="facc2-321">예외는 throw 된 이후 동작은 경우는 <xref:System.Lazy%601> 인스턴스 인지에 따라 예외 캐싱이 적용 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-321">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="facc2-322">경우는 <xref:System.Lazy%601> 초기화 함수를 지정 하지 않는 생성자를 사용 하 여 인스턴스를 만든 다음 예외 caching은 적용 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-322">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="facc2-323">초기화 하는 후속 시도 <xref:System.Lazy%601> 성공할 수도 및 성공적으로 초기화 된 후의 <xref:System.Lazy%601.IsValueCreated%2A> 속성에서 반환 `true`합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-323">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="facc2-324">경우는 <xref:System.Lazy%601> 초기화 함수를 인스턴스를 만들었습니다. (에 지정 된는 `valueFactory` 의 매개 변수는 <xref:System.Lazy%601> 생성자), 다음 예외 캐싱이 스레드 보안 모드에 의해 제어 됩니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-324">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="facc2-325">모드가 이면 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 또는 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, 초기화를 두 번째 확률이 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-325">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="facc2-326">해당 예외가 캐시 되 고 다음에 액세스할의 다시 throw 예외가 발생 하 고 초기화 함수에서 처리 되지 않은 경우는 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-326">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="facc2-327">예외가 throw 되 면 않으므로 이런 경우 값이 만들어지지 <xref:System.Lazy%601.IsValueCreated%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-327">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="facc2-328">모드가 이면 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, 성공적으로 초기화 함수 (또는 기본 생성자)를 실행 하는 경우 첫 번째 스레드가 대 한 값을 만듭니다.는 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-328">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="facc2-329">하나의 스레드에서 예외를 throw 하는 초기화 함수를 다른 스레드에서 계속 시도할 수 초기화는 <xref:System.Lazy%601> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="facc2-329">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="facc2-330">값을 만들 때까지 <xref:System.Lazy%601.IsValueCreated%2A> 속성에서 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-330">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="facc2-331">이 인스턴스의 <see cref="P:System.Lazy`1.Value" /> 속성에 대한 문자열 표현을 만들고 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-331">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="facc2-332">값이 만들어졌으면(즉, <see cref="M:System.Object.ToString" /> 속성이 <see langword="true" />를 반환하면) 이 인스턴스의 <see cref="P:System.Lazy`1.Value" /> 속성에 대해 <see cref="P:System.Lazy`1.IsValueCreated" /> 메서드를 호출한 결과이고,</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-332">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span>
          </span>
          <span data-ttu-id="facc2-333">그러지 않으면 값이 생성되지 않았음을 나타내는 문자열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-333">Otherwise, a string indicating that the value has not been created.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="facc2-334">이 메서드를 호출 초기화가 발생 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-334">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="facc2-335"><xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 속성 수 `null` 초기화 된 팩터리 메서드가 경우 지연 후에 대해 지정 된는 `valueFactory` 의 매개 변수는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, 또는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 생성자가 반환 `null`합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-335">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="facc2-336">
            <see cref="P:System.Lazy`1.Value" /> 속성은 <see langword="null" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-336">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="facc2-337">현재 <see cref="T:System.Lazy`1" /> 인스턴스의 초기화 지연된 값을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-337">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="facc2-338">현재 <see cref="T:System.Lazy`1" /> 인스턴스의 초기화 지연된 값입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-338">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="facc2-339">경우는 <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> 속성은 `false`, 액세스 하는 <xref:System.Lazy%601.Value%2A> 속성 초기화를 강제 합니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-339">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="facc2-340">나열 되는 예외 외에 <xref:System.Lazy%601.Value%2A> 속성에 전달 된 팩터리 메서드에 의해 throw 되는 모든 처리 되지 않은 예외를 throw 할 수는 `valueFactory` 의 매개 변수는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, 또는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 생성자입니다.</span><span class="sxs-lookup"><span data-stu-id="facc2-340">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="facc2-341">
            <see cref="T:System.Lazy`1" /> 인스턴스가 초기화 지연되는 형식의 기본 생성자를 사용하도록 초기화되고 생성자에 액세스할 수 있는 권한이 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-341">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="facc2-342">
            <see cref="T:System.Lazy`1" /> 인스턴스가 초기화 지연되는 형식의 기본 생성자를 사용하도록 초기화되고 해당 형식에 매개 변수가 없는 공용 생성자가 없는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-342">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="facc2-343">초기화 함수에서 이 인스턴스의 <see cref="P:System.Lazy`1.Value" />에 액세스하려는 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="facc2-343">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>