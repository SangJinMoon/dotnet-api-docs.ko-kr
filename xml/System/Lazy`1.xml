<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ad53c03faf661b5a698d5ef0c4fcd9d0451bbc14" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30729867" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">느리게 초기화되는 개체의 형식입니다.</typeparam>
    <summary>초기화 지연에 대한 지원을 제공합니다.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이러한 생성 또는 실행 프로그램의 수명 기간 동안 발생 하지 않을 수 있는 경우에 특히 큰 수 또는 리소스를 많이 사용 개체의 생성 또는 리소스를 많이 사용 작업의 실행을 지연 시키려면 초기화 지연 사용 합니다.  
  
 인스턴스를 만들 초기화 지연를 준비 하려면 <xref:System.Lazy%601>합니다. 형식 인수는 <xref:System.Lazy%601> 만든 개체에 초기화 지연 하려고 하는 개체의 유형을 지정 합니다. 만드는 데 사용 하는 생성자는 <xref:System.Lazy%601> 개체 초기화의 특징을 결정 합니다. 처음으로 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 속성에 액세스할 때 초기화 지연이 발생합니다.  
  
 대부분의 경우에서 두 가지 질문에 답변에 따라 생성자를 선택 합니다.  
  
-   지연 초기화 된 개체는 둘 이상의 스레드에서 액세스할 수 있습니까? 이 경우는 <xref:System.Lazy%601> 개체는 모든 스레드에서 만들 수 있습니다. 기본 동작은 스레드로부터 안전한 만들려는 인 간단한 생성자 중 하나를 사용 하면 <xref:System.Lazy%601> 개체 때문에 액세스를 시도 스레드 개수에 관계 없이 느리게 인스턴스화된 개체의 인스턴스를 하나만 생성 됩니다. 만들려면는 <xref:System.Lazy%601> 스레드로부터 안전 하지 않은 개체를 없는 스레드 보안을 지정할 수 있는 생성자를 사용 해야 합니다.  
  
    > [!CAUTION]
    >  만들기는 <xref:System.Lazy%601> 개체 스레드로부터 안전한 지연 초기화 된 개체를 보호 하지 않습니다. 여러 스레드에서 지연 초기화 된 개체를 액세스할 수를 확인 해야 속성 및 메서드에 다중 스레드 액세스에 대해 안전 합니다.  
  
-   초기화 지연 많은 코드, 않아도 또는 지연 된 초기화 개체 필요 하 고 예외를 throw 하지 않는 모든 작업을 수행 하는 기본 생성자가? 초기화 코드를 작성 하거나 예외를 처리 해야 하는 경우 팩터리 메서드를 사용 하는 생성자 중 하나를 사용 합니다. 팩터리 메서드에 초기화 코드를 작성 합니다.  
  
 다음 표에서 이러한 두 가지 요소에 따라, 선택 하는 생성자를 보여 줍니다.  
  
|개체에서 액세스할 수|초기화 코드가 없는 해야 하는 경우 (기본 생성자)를 사용 하 여|초기화 코드가 필요한 경우 사용|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|여러 스레드|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|스레드 하나|<xref:System.Lazy%601.%23ctor%28System.Boolean%29> 와 `isThreadSafe` 로 설정 `false`합니다.|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 와 `isThreadSafe` 로 설정 `false`합니다.|  
  
 팩터리 메서드를 지정 하는 람다 식을 사용할 수 있습니다. 그러면 모든 초기화 코드가 한 곳에 유지 됩니다. 람다 식 지연 초기화 된 개체의 생성자에 전달할 인수를 포함 하 여 컨텍스트를 캡처합니다.  
  
 **예외 캐싱** 예외가 캐시 되는 팩터리 메서드를 사용 합니다. 즉, 팩터리 메서드 예외 첫 번째 시간을 throw 하는 경우 스레드 액세스를 시도 <xref:System.Lazy%601.Value%2A> 의 속성은 <xref:System.Lazy%601> 개체에서 모든 후속 시도 동일한 예외가 throw 됩니다. 이렇게 하면를 호출할 때마다는 <xref:System.Lazy%601.Value%2A> 속성 동일한 결과 서로 다른 여러 스레드에서 다른 결과 얻을 경우 발생할 수 있는 미묘한 오류를 방지할 수 있습니다. <xref:System.Lazy%601> 대신 실제 `T` 는 그렇지 않은 경우는 초기화 된 이전 시점의 시작 하는 동안 일반적으로 합니다. 이전 시점에서 작업이 실패는 일반적으로 치명적입니다. 복구 가능한 오류에 대 한 존재할 경우 초기화 지연을 사용 하지 않는 경우와 마찬가지로 재시도 논리에 (이 경우, 팩터리 메서드), 초기화 루틴을 작성 하는 것이 좋습니다.  
  
 **잠금에 대 한 대안** 특정 상황에서의 오버 헤드를 방지 하려는 <xref:System.Lazy%601> 개체의 기본 잠금 동작 합니다. 드문 경우에서 교착 상태가 발생할 수 있습니다. 이러한 경우에 사용할 수 있습니다는 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 또는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자를 지정 하 고 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>합니다. 이 통해는 <xref:System.Lazy%601> 개체는 스레드를 호출 하는 경우 여러 스레드를 각 지연 초기화 된 개체의 복사본을 만들 수는 <xref:System.Lazy%601.Value%2A> 속성 동시에 합니다. <xref:System.Lazy%601> 개체 하면 모든 스레드가 지연 초기화 된 개체의 같은 인스턴스를 사용 하 고 사용 되지 않은 인스턴스를 삭제 합니다. 따라서 잠금 오버 헤드를 줄이는 비용 프로그램 만들고 하는 부담이 큰 개체가의 추가 복사본을 삭제할 경우에 따라 수입니다. 대부분의 경우에서이 어렵습니다. 에 대 한 예제는 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 및 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자가이 동작을 보여 줍니다.  
  
> [!IMPORTANT]
>  지정 하는 경우 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, 예외는 캐시 안, 팩터리 메서드를 지정 하는 경우에 합니다.  
  
 **해당 하는 생성자** 사용을 설정 하는 것 외에도 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 및 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자는 다른 생성자의 기능을 복제할 수 있습니다. 다음 표에서 이와 같은 동작을 생성 하는 매개 변수 값을 보여 줍니다.  
  
|만들려면는 <xref:System.Lazy%601> 되는 개체|생성자가 포함 된에 대 한는 `LazyThreadSafetyMode` `mode` 매개 변수를 설정 `mode` 를|부울 생성자에 대 한 `isThreadSafe` 매개 변수를 설정 `isThreadSafe` 를|스레드 안전성 매개 변수가 없는 생성자에 대 한|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|완전히 한 스레드로부터 안전 합니다. 에서는 하나의 스레드만 값을 초기화 되도록 잠금을 사용 합니다.|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|이러한 모든 생성자는 완전히 스레드로부터 안전 합니다.|  
|스레드로부터 안전 하지 합니다.|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|해당 사항 없음.|  
|완전히 한 스레드로부터 안전 합니다. 스레드 경합 값을 초기화 합니다.|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|해당 사항 없음.|해당 사항 없음.|  
  
 **다른 기능** 의 사용에 대 한 내용은 <xref:System.Lazy%601> thread 정적 필드 또는 속성에 대 한 백업 저장소로 참조 [초기화 지연](~/docs/framework/performance/lazy-initialization.md)합니다.  
  
   
  
## Examples  
 다음 예제에서는 <xref:System.Lazy%601> 여러 스레드에서 액세스를 사용 하 여 지연 초기화를 제공 하는 클래스입니다.  
  
> [!NOTE]
>  이 예제에서는 사용 된 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 생성자입니다. 사용 방법을 설명는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 생성자 (지정 `true` 에 대 한 `isThreadSafe`) 및 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`). 다른 생성자를 전환 하려면 생성자 주석으로 처리 되어 변경 하기만 합니다.  
>   
>  예외를 보여 주는 예제에 대 한 참조는 동일한 생성자를 사용 하 여 캐싱는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 생성자입니다.  
  
 이 예제에서는 여러 스레드 중 하나를 사용하여 지연 초기화될 `LargeObject` 클래스를 정의합니다. 코드의 네 가지 주요 섹션 이니셜라이저, 팩터리 메서드, 실제 초기화 및 생성자의 생성을 보여 주기는 `LargeObject` 개체가 만들어질 때 메시지를 표시 하는 클래스입니다. 예제에서는 `Main` 메서드의 시작 부분에서 `LargeObject`에 대해 스레드로부터 안전한 지연 이니셜라이저를 만듭니다.  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 팩터리 메서드 추가 초기화에 대 한 자리 표시자를 사용 하는 개체를 만들기를 보여 줍니다.  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 Note 처음 두 개의 코드 섹션 아래 그림과 같이 람다 함수를 사용 하 여 결합할 수 없습니다.  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 이 예제에서는 초기화 지연이 발생 하기 전에 정해 지지 않은 기간 경과할 수 있습니다를 나타내기 위해 일시 중지 됩니다. 누를 때는 **Enter** 키, 예제를 만들고 세 개의 스레드를 시작 합니다. `ThreadProc` 모든 세 개의 스레드 호출에 의해 사용 되는 메서드는 <xref:System.Lazy%601.Value%2A> 속성입니다. 이런 경우 처음으로 `LargeObject` 인스턴스가 만들어집니다.  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 생성자는 `LargeObject` 클래스 코드의 마지막 키 섹션을 포함 하는 메시지를 표시 하며 초기화 하는 스레드의 id를 기록 합니다. 프로그램 출력의 전체 코드 목록 끝에 나타납니다.  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다. 이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe>기본적으로의 모든 공용 및 보호 된 멤버는 <see cref="T:System.Lazy`1" /> 클래스는 스레드로부터 안전 하 고 여러 스레드에서 동시에 사용할 수 있습니다. 필요에 따라 및 인스턴스당 형식의 생성자에 매개 변수를 사용 하 여 이러한 스레드 보안 보장을 제거할 수 있습니다.</threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다. 초기화 지연이 발생하는 경우 대상 형식의 기본 생성자가 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자를 사용 하 여 만든 인스턴스는 여러 스레드에서 동시에 사용할 수 있습니다.  
  
 스레드 보안 모드는 <xref:System.Lazy%601> 이 생성자를 사용 하 여 초기화 되는 인스턴스는 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>합니다. 스레드 안전 모드는 여러 스레드를 초기화 하려고 하는 경우 동작에 설명 된 <xref:System.Lazy%601> 인스턴스.  
  
 A <xref:System.Lazy%601> 이 생성자를 사용 하 여 만든 인스턴스 예외를 캐시 하지 않습니다. 자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.  
  
   
  
## Examples  
 다음 예제에서는이 생성자를 사용 하는 방법을 보여 줍니다. 에서는 또한 사용은 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 생성자 (지정 하 `true` 에 대 한 `isThreadSafe`) 및 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`). 다른 생성자를 전환 하려면 생성자 주석으로 처리 되어 변경 하기만 합니다.  
  
 이 예제에서는 여러 스레드 중 하나를 사용하여 지연 초기화될 `LargeObject` 클래스를 정의합니다. 이 예제 코드에서는 두 키 줄은 실제 초기화 및 이니셜라이저 생성 합니다. 예제에서는 `Main` 메서드의 시작 부분에서 `LargeObject`에 대해 스레드로부터 안전한 지연 이니셜라이저를 만듭니다.  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 이 예제에서는 만들고을 차단 하는 세 개의 스레드를 시작 합니다.는 <xref:System.Threading.ManualResetEvent> 개체 예제는 한 번에 스레드를 해제할 수 있도록 합니다. `ThreadProc` 모든 세 개의 스레드 호출에 의해 사용 되는 메서드는 <xref:System.Lazy%601.Value%2A> 가져올 속성의 `LargeObject` 인스턴스:  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <xref:System.Lazy%601> 클래스 잠금, 하나의 스레드를 만들 수 있도록 제공 된 `LargeObject` 인스턴스. 모든 다른 스레드가 동일한 인스턴스를 가져오고 있는지 보여 줍니다.  
  
> [!NOTE]
>  편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다. 이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe">
          이 인스턴스가 여러 스레드에서 동시에 사용될 수 있게 하려면 <see langword="true" />이고, 한 번에 한 스레드에서만 사용될 수 있게 하려면 <see langword="false" />입니다.</param>
        <summary>
          <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다. 초기화 지연이 발생하는 경우 대상 형식의 기본 생성자 및 지정된 초기화 모드가 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스레드 보안 모드는 <xref:System.Lazy%601> 이 생성자를 사용 하 여 초기화 되는 인스턴스는 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 경우 `isThreadSafe` 은 `true`, 그렇지 않으면 모드는 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>합니다. 스레드 안전 모드는 여러 스레드를 초기화 하려고 하는 경우 동작에 설명 된 <xref:System.Lazy%601> 인스턴스. 지정 하는 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 모드를 사용 하 여는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 또는 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 생성자입니다.  
  
 A <xref:System.Lazy%601> 이 생성자를 사용 하 여 만든 인스턴스 예외를 캐시 하지 않습니다. 자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.  
  
   
  
## Examples  
 다음 예제에서는 스레드로부터 지연 초기화 된 개체에 대 한 모든 액세스는 동일한 스레드에서 발생 하는 시나리오에 대 한 안전 하지 않은 지연 이니셜라이저를 만들려면이 생성자의 사용을 보여 줍니다. 사용 방법을 설명는 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 에 대 한 `mode`합니다. 다른 생성자를 전환 하려면 변경 생성자를 주석으로 처리 됩니다.  
  
> [!NOTE]
>  다중 스레드 시나리오에서이 생성자를 사용 하는 방법을 보여 주는 코드에 대 한 (지정 `true` 에 대 한 `isThreadSafe`), 예를 참조는 <xref:System.Lazy%601.%23ctor> 생성자 합니다.  
  
 이 예제에서는 정의 `LargeObject` 지연 초기화 될 클래스입니다. 에 `Main` 메서드 예제에서는 생성 한 <xref:System.Lazy%601> 인스턴스 한 다음 일시 중지 합니다. 누를 때는 **Enter** 액세스 하는 키에 예제는 <xref:System.Lazy%601.Value%2A> 의 속성은 <xref:System.Lazy%601> 초기화를 발생 시키는 인스턴스. 생성자는 `LargeObject` 콘솔 메시지를 표시 하는 클래스입니다.  
  
> [!NOTE]
>  편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다. 이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory">필요할 때 지연된 초기화 값을 생성하기 위해 호출된 대리자입니다.</param>
        <summary>
          <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다. 초기화 지연이 발생하는 경우 지정된 초기화 함수가 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 생성자를 사용 하 여 만든 인스턴스는 여러 스레드에서 동시에 사용할 수 있습니다.  
  
 스레드 보안 모드는 <xref:System.Lazy%601> 이 생성자를 사용 하 여 초기화 되는 인스턴스는 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>합니다. 스레드 안전 모드는 여러 스레드를 초기화 하려고 하는 경우 동작에 설명 된 <xref:System.Lazy%601> 인스턴스.  
  
 에 의해 throw 되는 예외를 `valueFactory` 캐시 됩니다. 자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.  
  
   
  
## Examples  
 다음 예제에서는 예외 캐싱을 사용 하 여 지연 초기화를 제공 하려면이 생성자의 사용법을 보여줍니다. 사용 방법을 설명는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 생성자 (지정 `true` 에 대 한 `isThreadSafe`) 및 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`). 다른 생성자를 전환 하려면 생성자 주석으로 처리 되어 변경 하기만 합니다.  
  
 이 예제에서는 여러 스레드 중 하나를 사용하여 지연 초기화될 `LargeObject` 클래스를 정의합니다. 코드의 세 가지 주요 섹션 이니셜라이저, 실제 초기화 및 생성자의 생성을 보여 주기는 `LargeObject` 캐싱 예외를 보여 주는 클래스. 예제에서는 `Main` 메서드의 시작 부분에서 `LargeObject`에 대해 스레드로부터 안전한 지연 이니셜라이저를 만듭니다.  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 이 예제에서는 만들고 세 개의 스레드를 시작 합니다. `ThreadProc` 모든 세 개의 스레드 호출에 의해 사용 되는 메서드는 <xref:System.Lazy%601.Value%2A> 가져올 속성의 `LargeObject` 인스턴스:  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 생성자에는 `LargeObject` 클래스, 세 번째 키 코드 부분을 처음으로 예외를 throw 한 `LargeObject` 인스턴스를 만들었지만 이후에 적용 되려면 인스턴스 만들기를 허용:  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 이 예제를 실행할 때의 인스턴스를 만들려고 시도 하는 경우 첫 번째 스레드가 `LargeObject` 실패 하 고 예외가 발견 되었습니다. 다음 스레드 인스턴스를 만들 성공적으로 예상할 수 있지만 <xref:System.Lazy%601> 개체에서 예외를 캐시 합니다. 이 때문에 세 개의 스레드 예외를 throw 합니다.  
  
> [!NOTE]
>  편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다. 이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="valueFactory" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode">스레드 보안 모드를 지정하는 열거형 값 중 하나입니다.</param>
        <summary>
          <paramref name="T" />의 기본 생성자 및 스레드로부터 안전한 지정된 모드를 사용하는 <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스레드 보안 모드는 <xref:System.Lazy%601> 인스턴스가 여러 스레드를 초기화 하려고 하는 경우 동작에 설명 된 <xref:System.Lazy%601> 인스턴스.  
  
 A <xref:System.Lazy%601> 이 생성자를 사용 하 여 만든 인스턴스 예외를 캐시 하지 않습니다. 자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.  
  
   
  
## Examples  
 다음 예제에서는 여러 스레드를 경합 지연 개체를 만들 수 있도록 지연 이니셜라이저를 만들려면이 생성자의 사용을 보여 줍니다. 여러 스레드에서 인스턴스를 만드는 성공 하더라도 모든 스레드는 먼저 생성 된 인스턴스를 사용 합니다.  
  
> [!NOTE]
>  단일 스레드 시나리오에서이 생성자를 사용 하는 방법을 보여 주는 예제를 보려면 (지정 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 에 대 한 `mode`), 참조는 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 생성자입니다. 잠금 대신 다중 스레드 시나리오에서 경합 상태를 제공 하려면이 생성자를 사용 하는 방법을 보여 주는 예제에 대 한 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`), 참조는 <xref:System.Lazy%601.%23ctor> 생성자입니다.  
  
 이 예제에서는 정의 `LargeObject` 여러 스레드 중 하나로 인해 지연 초기화 될 클래스입니다. 코드의 세 가지 주요 섹션 설명 이니셜라이저, 실제 초기화 및 생성자의 생성 및의 종료자는 `LargeObject` 클래스입니다. 맨 앞에 `Main` 메서드 예제에서는 생성 된 <xref:System.Lazy%601> 개체의 초기화 지연 수행 하는 `LargeObject`:  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 이 예제에서는 만들고을 차단 하는 세 개의 스레드를 시작 합니다.는 <xref:System.Threading.ManualResetEvent> 개체 예제는 한 번에 스레드를 해제할 수 있도록 합니다. 에 `ThreadProc` 모든 세 개의 스레드를 호출 하 여 사용 되는 메서드는 <xref:System.Lazy%601.Value%2A> 속성 만듭니다는 `LargeObject` 인스턴스:  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 때문에 대 한 생성자는 <xref:System.Lazy%601> 지정 된 인스턴스 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, 세 개의 스레드를 만들 수 `LargeObject` 인스턴스. 예제에서는이 생성자의 종료자 콘솔 메시지 표시 하 여는 `LargeObject` 클래스:  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 그러나는 <xref:System.Lazy%601> 개체를 사용 하면 모든 스레드에서 인스턴스를 하나만 사용 됩니다. 이 예제에서 출력을 세 개의 스레드를 사용 하 여의 동일한 인스턴스에 표시 된 가비지 수집으로 다른 두 인스턴스를 다시 사용할 수를 보여 줍니다.  
  
> [!NOTE]
>  편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다. 이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" />에 잘못된 값이 포함된 경우</exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory">필요할 때 지연된 초기화 값을 생성하기 위해 호출된 대리자입니다.</param>
        <param name="isThreadSafe">
          이 인스턴스가 여러 스레드에서 동시에 사용될 수 있게 하려면 <see langword="true" />이고, 한 번에 한 스레드에서만 사용될 수 있게 하려면 <see langword="false" />입니다.</param>
        <summary>
          <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다. 초기화 지연이 발생하는 경우 지정된 초기화 함수 및 초기화 모드가 사용됩니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스레드 보안 모드는 <xref:System.Lazy%601> 이 생성자를 사용 하 여 초기화 되는 인스턴스는 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 경우 `isThreadSafe` 은 `true`, 그렇지 않으면 모드는 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>합니다. 스레드 안전 모드는 여러 스레드를 초기화 하려고 하는 경우 동작에 설명 된 <xref:System.Lazy%601> 인스턴스.  
  
 지정 하는 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 모드를 사용 하 여는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> 또는 <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> 생성자입니다.  
  
 에 의해 throw 되는 예외를 `valueFactory` 캐시 됩니다. 자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.  
  
   
  
## Examples  
 다음 예제에서는 단일 스레드 시나리오에서 캐싱 예외와 함께 초기화 지연 제공 하려면이 생성자의 사용법을 보여줍니다. 사용 방법을 설명는 <xref:System.Lazy%601.%23ctor%2A> 생성자 (지정 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 에 대 한 `mode`). 해당 생성자를 전환 하려면 변경 생성자를 주석으로 처리 됩니다.  
  
> [!NOTE]
>  다중 스레드 시나리오에서이 생성자를 사용 하는 방법을 보여 주는 코드에 대 한 (지정 `true` 에 대 한 `isThreadSafe`), 예를 참조는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> 생성자 합니다.  
  
 이 예제에서는 여러 스레드 중 하나를 사용하여 지연 초기화될 `LargeObject` 클래스를 정의합니다. 코드의 세 가지 주요 섹션 이니셜라이저, 실제 초기화 및 생성자의 생성을 보여 주기는 `LargeObject` 캐싱 예외를 보여 주는 클래스. 예제에서는 `Main` 메서드의 시작 부분에서 `LargeObject`에 대해 스레드로부터 안전한 지연 이니셜라이저를 만듭니다.  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 생성자에 대 한 호출에는 `isThreadSafe` 매개 변수는 `false`이므로 <xref:System.Lazy%601> 는 스레드로부터 안전 합니다. 이 예에서는 호출 하는 스레드로부터 안전 하지 않으므로 <xref:System.Lazy%601.Value%2A> 세 번 동일한 스레드에서 속성:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 생성자에는 `LargeObject` 클래스, 세 번째 키 코드 부분을 처음으로 예외를 throw 한 `LargeObject` 인스턴스를 만들었지만 이후에 적용 되려면 인스턴스 만들기를 허용:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 이 예제를 실행할 때의 인스턴스를 만드는 첫 번째 시도 `LargeObject` 실패 하 고 예외가 발견 되었습니다. 다음 시도 계속 실행 하면 되지만 <xref:System.Lazy%601> 개체에서 예외를 캐시 합니다. 이 때문에 3 번 모든 예외를 throw 합니다.  
  
> [!NOTE]
>  편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다. 이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="valueFactory" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory">필요할 때 지연된 초기화 값을 생성하기 위해 호출된 대리자입니다.</param>
        <param name="mode">스레드 보안 모드를 지정하는 열거형 값 중 하나입니다.</param>
        <summary>지정된 초기화 함수 및 스레드로부터 안전한 모드를 사용하는 <see cref="T:System.Lazy`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 스레드 보안 모드는 <xref:System.Lazy%601> 인스턴스가 여러 스레드를 초기화 하려고 하는 경우 동작에 설명 된 <xref:System.Lazy%601> 인스턴스.  
  
 에 의해 throw 되는 예외를 `valueFactory` 않는 경우 캐시는 `mode` 은 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>합니다. 자세한 내용은 <xref:System.Lazy%601> 클래스 또는 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 열거형을 참조하십시오.  
  
   
  
## Examples  
 다음 예제에서는 여러 스레드를 경합 지연 개체를 만들 수 있도록 지연 이니셜라이저를 만들려면이 생성자의 사용을 보여 줍니다. 여러 스레드에서 인스턴스를 만드는 성공 하더라도 모든 스레드는 먼저 생성 된 인스턴스를 사용 합니다. 또한 예제에 지정 하는 경우 예외가 캐시 되지 않습니다는 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>지연 만든 형식의 기본 생성자가 초기화를 대신 함수에서 수행 하는 경우에 합니다.  
  
> [!NOTE]
>  단일 스레드 시나리오에서이 생성자를 사용 하는 방법을 보여 주는 예제를 보려면 (지정 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> 에 대 한 `mode`), 참조는 <xref:System.Lazy%601.%23ctor%28System.Boolean%29> 생성자입니다. 잠금 대신 다중 스레드 시나리오에서 경합 상태를 제공 하려면이 생성자를 사용 하는 방법을 보여 주는 예제에 대 한 (지정 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 에 대 한 `mode`), 참조는 <xref:System.Lazy%601.%23ctor> 생성자입니다.  
  
 이 예제에서는 정의 `LargeObject` 여러 스레드 중 하나로 인해 지연 초기화 될 클래스입니다. 코드의 네 가지 주요 섹션 설명 이니셜라이저, 실제 초기화, 초기화 함수 및는 생성자의 생성 및의 종료자는 `LargeObject` 클래스입니다. 맨 앞에 `Main` 메서드 예제에서는 생성 된 <xref:System.Lazy%601> 개체의 초기화 지연 수행 하는 `LargeObject`:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 지연 이니셜라이저는 함수를 사용 하 여 초기화를 수행 합니다. 이 경우 함수는에 대 한 기본 생성자가 없습니다 있기 때문에 필요한는 `LargeObject` 클래스입니다.  
  
 이 예제에서는 만들고을 차단 하는 세 개의 스레드를 시작 합니다.는 <xref:System.Threading.ManualResetEvent> 개체 예제는 한 번에 스레드를 해제할 수 있도록 합니다. 에 `ThreadProc` 모든 세 개의 스레드를 호출 하 여 사용 되는 메서드는 <xref:System.Lazy%601.Value%2A> 속성 만듭니다는 `LargeObject` 인스턴스:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 코드의 세 번째 키 섹션을 만들려는 초기화 지연 함수 호출의 `LargeObject` 인스턴스. 함수는 첫 번째 예외 받은 때를 throw 됩니다.  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 다른 <xref:System.Threading.LazyThreadSafetyMode> 설정, 초기화 함수에서 처리 되지 않은 예외가 캐시 합니다. 그러나 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> 캐싱 예외를 표시 하지 않습니다. 이 예제에서 출력 개체를 초기화 하는 후속 시도 성공 했는지 보여 줍니다.  
  
> [!NOTE]
>  예외 메시지는 일반적으로 다른 스레드에서 개체를 초기화 했습니다. 한을 나타내는 메시지가 있는지 후 나타납니다. 이것은 대기 시간을 throw 하 고 예외를 catch 하 여 추가 때문입니다.  
  
 때문에 대 한 생성자는 <xref:System.Lazy%601> 지정 된 인스턴스 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, 세 개의 스레드를 만들 수 `LargeObject` 인스턴스. 예제에서는이 생성자의 종료자 콘솔 메시지 표시 하 여는 `LargeObject` 클래스:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <xref:System.Lazy%601> 개체 하면 모든 (스레드를 제외한 스레드가 초기화 함수가 예외를 throw 하는 위치) 인스턴스를 하나만 사용 됩니다. 예제의 출력은이 보여 줍니다.  
  
> [!NOTE]
>  편의상 이 예제에서는 <xref:System.Lazy%601>의 전역 인스턴스를 사용하며, 모든 메서드는 `static`(Visual Basic의 경우 `Shared`)입니다. 이는 초기화 지연의 사용에 필요한 요구 사항은 아닙니다.  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="mode" />에 잘못된 값이 포함된 경우</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="valueFactory" />가 <see langword="null" />인 경우</exception>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>값이 이 <see cref="T:System.Lazy`1" /> 인스턴스에 대해 만들어졌는지 여부를 나타내는 값을 가져옵니다.</summary>
        <value>
          값이 이 <see cref="T:System.Lazy`1" /> 인스턴스에 대해 만들어졌으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 초기화 지연에 대해 발생 하는 경우는 <xref:System.Lazy%601> 인스턴스를 생성 되는 값 또는 예외가 throw에서 발생할 수 있습니다. 예외는 throw 된 이후 동작은 경우는 <xref:System.Lazy%601> 인스턴스 인지에 따라 예외 캐싱이 적용 합니다. 경우는 <xref:System.Lazy%601> 초기화 함수를 지정 하지 않는 생성자를 사용 하 여 인스턴스를 만든 다음 예외 caching은 적용 되지 않습니다. 초기화 하는 후속 시도 <xref:System.Lazy%601> 성공할 수도 및 성공적으로 초기화 된 후의 <xref:System.Lazy%601.IsValueCreated%2A> 속성에서 반환 `true`합니다. 경우는 <xref:System.Lazy%601> 초기화 함수를 인스턴스를 만들었습니다. (에 지정 된는 `valueFactory` 의 매개 변수는 <xref:System.Lazy%601> 생성자), 다음 예외 캐싱이 스레드 보안 모드에 의해 제어 됩니다.  
  
-   모드가 이면 <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> 또는 <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, 초기화를 두 번째 확률이 <xref:System.Lazy%601> 인스턴스. 해당 예외가 캐시 되 고 다음에 액세스할의 다시 throw 예외가 발생 하 고 초기화 함수에서 처리 되지 않은 경우는 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 속성입니다. 예외가 throw 되 면 않으므로 이런 경우 값이 만들어지지 <xref:System.Lazy%601.IsValueCreated%2A> 반환 `false`합니다.  
  
-   모드가 이면 <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, 성공적으로 초기화 함수 (또는 기본 생성자)를 실행 하는 경우 첫 번째 스레드가 대 한 값을 만듭니다.는 <xref:System.Lazy%601> 인스턴스. 하나의 스레드에서 예외를 throw 하는 초기화 함수를 다른 스레드에서 계속 시도할 수 초기화는 <xref:System.Lazy%601> 인스턴스. 값을 만들 때까지 <xref:System.Lazy%601.IsValueCreated%2A> 속성에서 반환 `false`합니다.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>이 인스턴스의 <see cref="P:System.Lazy`1.Value" /> 속성에 대한 문자열 표현을 만들고 반환합니다.</summary>
        <returns>값이 만들어졌으면(즉, <see cref="M:System.Object.ToString" /> 속성이 <see langword="true" />를 반환하면) 이 인스턴스의 <see cref="P:System.Lazy`1.Value" /> 속성에 대해 <see cref="P:System.Lazy`1.IsValueCreated" /> 메서드를 호출한 결과이고, 그러지 않으면 값이 생성되지 않았음을 나타내는 문자열입니다.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 이 메서드를 호출 초기화가 발생 하지 않습니다.  
  
 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 속성 수 `null` 초기화 된 팩터리 메서드가 경우 지연 후에 대해 지정 된는 `valueFactory` 의 매개 변수는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, 또는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 생성자가 반환 `null`합니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <see cref="P:System.Lazy`1.Value" /> 속성은 <see langword="null" />입니다.</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>현재 <see cref="T:System.Lazy`1" /> 인스턴스의 초기화 지연된 값을 가져옵니다.</summary>
        <value>현재 <see cref="T:System.Lazy`1" /> 인스턴스의 초기화 지연된 값입니다.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 경우는 <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> 속성은 `false`, 액세스 하는 <xref:System.Lazy%601.Value%2A> 속성 초기화를 강제 합니다.  
  
 나열 되는 예외 외에 <xref:System.Lazy%601.Value%2A> 속성에 전달 된 팩터리 메서드에 의해 throw 되는 모든 처리 되지 않은 예외를 throw 할 수는 `valueFactory` 의 매개 변수는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, 또는 <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 생성자입니다.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <see cref="T:System.Lazy`1" /> 인스턴스가 초기화 지연되는 형식의 기본 생성자를 사용하도록 초기화되고 생성자에 액세스할 수 있는 권한이 없는 경우</exception>
        <exception cref="T:System.MissingMemberException">
          <see cref="T:System.Lazy`1" /> 인스턴스가 초기화 지연되는 형식의 기본 생성자를 사용하도록 초기화되고 해당 형식에 매개 변수가 없는 공용 생성자가 없는 경우</exception>
        <exception cref="T:System.InvalidOperationException">초기화 함수에서 이 인스턴스의 <see cref="P:System.Lazy`1.Value" />에 액세스하려는 경우</exception>
      </Docs>
    </Member>
  </Members>
</Type>