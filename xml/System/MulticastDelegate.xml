<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MulticastDelegate.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac568fe57d35963ff07229ce4e905392ba33a08e1b2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68fe57d35963ff07229ce4e905392ba33a08e1b2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.MulticastDelegate">
          <source>Represents a multicast delegate; that is, a delegate that can have more than one element in its invocation list.</source>
          <target state="translated">멀티캐스트 대리자 즉, 해당 호출 목록에 둘 이상의 요소를 가질 수 있는 대리자를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source><ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> is a special class.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> 특수 클래스가입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>Compilers and other tools can derive from this class, but you cannot derive from it explicitly.</source>
          <target state="translated">컴파일러 및 도구가이 클래스에서 파생 될 수 있지만 명시적으로 여기에서 파생 될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The same is true of the <ph id="ph1">&lt;xref:System.Delegate&gt;</ph> class.</source>
          <target state="translated">경우도 마찬가지는 <ph id="ph1">&lt;xref:System.Delegate&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>In addition to the methods that delegate types inherit from <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph>, the common language runtime provides two special methods: <ph id="ph2">`BeginInvoke`</ph> and <ph id="ph3">`EndInvoke`</ph>.</source>
          <target state="translated">상속 종류를 위임 하는 방법 외에도 <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph>, 공용 언어 런타임에서 두 가지 특별 한 방법을 제공: <ph id="ph2">`BeginInvoke`</ph> 및 <ph id="ph3">`EndInvoke`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>For more information about these methods, see <bpt id="p1">[</bpt>Calling Synchronous Methods Asynchronously<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.</source>
          <target state="translated">이러한 메서드에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>대<ept id="p1">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>A <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> has a linked list of delegates, called an invocation list, consisting of one or more elements.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> 라고 하는 대리자를 호출 목록에서 하나 이상의 요소로 구성 된 인스턴스의 연결된 된 목록에 있습니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>When a multicast delegate is invoked, the delegates in the invocation list are called synchronously in the order in which they appear.</source>
          <target state="translated">멀티 캐스트 대리자를 호출 하는 경우 대리자 호출 목록에 표시 되는 순서에 동기적으로 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>If an error occurs during execution of the list then an exception is thrown.</source>
          <target state="translated">목록의 실행 하는 동안 오류가 발생 하면 예외가 throw 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The following example defines a class, <ph id="ph1">`StringContainer`</ph>, which includes a collection of strings.</source>
          <target state="translated">다음 예제에서는 클래스를 정의 <ph id="ph1">`StringContainer`</ph>, 문자열 컬렉션을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>One of its members is the <ph id="ph1">`CheckAndDisplayDelegate`</ph> delegate, which is used to display strings stored in a <ph id="ph2">`StringContainer`</ph> object that satisfy particular criteria.</source>
          <target state="translated">해당 멤버 중 하나는 <ph id="ph1">`CheckAndDisplayDelegate`</ph> 에 저장 된 문자열을 표시 하는 데 사용 되는 대리자는 <ph id="ph2">`StringContainer`</ph> 특정 조건을 충족 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The delegate takes a single string as a parameter and returns <ph id="ph1">`void`</ph> (or, in Visual Basic, it's a <ph id="ph2">`Sub`</ph> procedure).</source>
          <target state="translated">대리자를 매개 변수로 단일 문자열을 사용 하 고 반환 <ph id="ph1">`void`</ph> (또는 Visual Basic의 경우 이기는 <ph id="ph2">`Sub`</ph> 프로시저).</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>It also includes a method, <ph id="ph1">`DisplayAllQualified`</ph>, that has a single parameter, a <ph id="ph2">`CheckAndDisplayDelegate`</ph> delegate.</source>
          <target state="translated">메서드를 포함 <ph id="ph1">`DisplayAllQualified`</ph>, 단일 매개 변수가 있는 <ph id="ph2">`CheckAndDisplayDelegate`</ph> 위임 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>This allows the method to be called and to display a set of strings that are filtered based on the methods that the delegate contains.</source>
          <target state="translated">이 메서드를 호출할 수 있으며이 대리자를 포함 하는 방법에 따라 필터링 된 문자열의 집합을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The example also defines a utility class, <ph id="ph1">`StringExtensions`</ph>, that has two methods:</source>
          <target state="translated">이 예제에서는 유틸리티 클래스 정의 <ph id="ph1">`StringExtensions`</ph>, 두 개의 메서드가 있는:</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source><ph id="ph1">`ConStart`</ph>, which displays strings that begin with a consonant.</source>
          <target state="translated"><ph id="ph1">`ConStart`</ph>자음으로 시작 하는 문자열을 표시 하는 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source><ph id="ph1">`VowelStart`</ph>, which displays strings that begin with a vowel.</source>
          <target state="translated"><ph id="ph1">`VowelStart`</ph>를 함께 시작 하는 문자열을 표시 하는 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>Note that both methods include a single string parameter and return <ph id="ph1">`void`</ph>.</source>
          <target state="translated">두 방법 모두 단일 문자열 매개 변수를 포함 하 고 반환 <ph id="ph1">`void`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>In other words, both methods can be assigned to the  <ph id="ph1">`CheckAndDisplayDelegate`</ph> delegate.</source>
          <target state="translated">즉, 두 방법 모두 지정할 수 있는 <ph id="ph1">`CheckAndDisplayDelegate`</ph> 위임 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>The <ph id="ph1">`Test.Main`</ph> method is the application entry point.</source>
          <target state="translated"><ph id="ph1">`Test.Main`</ph> 메서드는 응용 프로그램 진입점입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>It instantiates a <ph id="ph1">`StringContainer`</ph> object, populates it with strings, and creates two <ph id="ph2">`CheckAndDisplayDelegate`</ph> delegates, <ph id="ph3">`conStart`</ph> and <ph id="ph4">`vowelStart`</ph>, that invoke a single method.</source>
          <target state="translated">인스턴스화하여는 <ph id="ph1">`StringContainer`</ph> 개체를 문자열에 정보를 표시 하 고에서는 두 개의 <ph id="ph2">`CheckAndDisplayDelegate`</ph> 대리자 <ph id="ph3">`conStart`</ph> 및 <ph id="ph4">`vowelStart`</ph>, 단일 메서드를 호출 하는 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Delegate.Combine%2A?displayProperty=nameWithType&gt;</ph> method to create the <ph id="ph2">`multipleDelegates`</ph> delegate, which initially contains the <ph id="ph3">`ConStart`</ph> and  <ph id="ph4">`VowelStart`</ph> delegates.</source>
          <target state="translated">그런 다음 호출 하는 <ph id="ph1">&lt;xref:System.Delegate.Combine%2A?displayProperty=nameWithType&gt;</ph> 방법을 만들 수는 <ph id="ph2">`multipleDelegates`</ph> 대리자를 처음으로 포함 하는 <ph id="ph3">`ConStart`</ph> 및 <ph id="ph4">`VowelStart`</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>Note that when the <ph id="ph1">`multipleDelegates`</ph> delegate is invoked, it displays all the strings in the collection in their original order.</source>
          <target state="translated">경우는 <ph id="ph1">`multipleDelegates`</ph> 대리자가 호출 되 면 모든 문자열 원래 순서 대로 컬렉션에 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>This is because each letter is passed separately to each delegate, and each letter meets the filtering criteria of only one of the two delegates.</source>
          <target state="translated">각 문자는 각 대리자에 개별적으로 전달 하 고 각 문자에는 두 명의 대리자 중 하나만의 필터링 기준을 충족 때문입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>Finally, after calls to <ph id="ph1">&lt;xref:System.Delegate.Remove%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Delegate.Combine%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">`multipleDelegates`</ph> contains two <ph id="ph4">`conStart`</ph> delegates.</source>
          <target state="translated">마지막으로 호출한 후 <ph id="ph1">&lt;xref:System.Delegate.Remove%2A?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Delegate.Combine%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph3">`multipleDelegates`</ph> 에 두 개의 <ph id="ph4">`conStart`</ph> 대리자입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.MulticastDelegate">
          <source>When it is invoked, each string in the <ph id="ph1">`StringContainer`</ph> object is displayed twice.</source>
          <target state="translated">가 호출 될 때, 각 문자열에는 <ph id="ph1">`StringContainer`</ph> 개체가 두 번 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="T:System.MulticastDelegate">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>The object on which <bpt id="p1">&lt;c&gt;</bpt>method<ept id="p1">&lt;/c&gt;</ept> is defined.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>method<ept id="p1">&lt;/c&gt;</ept>가 정의된 개체입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>The name of the method for which a delegate is created.</source>
          <target state="translated">대리자가 만들어진 메서드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>This constructor cannot be used in application code.</source>
          <target state="translated">이 생성자는 응용 프로그램 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>To create a delegate by specifying the name of an instance method, use an overload of the <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> method that specifies a method name and a target object.</source>
          <target state="translated">오버 로드를 사용 하 여 인스턴스 메서드 이름을 지정 하 여 대리자를 만들려는 <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> 메서드 이름 및 대상 개체를 지정 하는 메서드.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>For example, the <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method overload creates a delegate for an instance method with a specified name.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Object%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드는 지정 된 이름의 인스턴스 메서드의 대리자를 만듭니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">추상 클래스의 인스턴스를 만들 수 없거나 이 멤버가 런타임에 바인딩 메커니즘을 사용하여 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph>.</source>
          <target state="translated">연관된 열거형: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>The type of object on which <bpt id="p1">&lt;c&gt;</bpt>method<ept id="p1">&lt;/c&gt;</ept> is defined.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>method<ept id="p1">&lt;/c&gt;</ept>가 정의된 개체의 형식입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>The name of the static method for which a delegate is created.</source>
          <target state="translated">대리자가 만들어진 정적 메서드의 이름입니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>This constructor cannot be used in application code.</source>
          <target state="translated">이 생성자는 응용 프로그램 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>To create a delegate by specifying the name of a static method, use an overload of the <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> method that specifies a method name but does not specify a target object.</source>
          <target state="translated">오버 로드를 사용 하 여 정적 메서드 이름을 지정 하 여 대리자를 만들려는 <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> 메서드 메서드 이름을 지정 하는 대상 개체를 지정 하지 않습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>For example, the <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> method overload creates a static delegate for a method with a specified name.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Delegate.CreateDelegate%28System.Type%2CSystem.Type%2CSystem.String%29?displayProperty=nameWithType&gt;</ph> 메서드 오버 로드는 지정된 된 이름을 가진 메서드에 대 한 정적 대리자를 만듭니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">추상 클래스의 인스턴스를 만들 수 없거나 이 멤버가 런타임에 바인딩 메커니즘을 사용하여 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>The delegate to combine with this delegate.</source>
          <target state="translated">이 대리자와 결합시킬 대리자입니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>Combines this <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph> with the specified <ph id="ph2">&lt;see cref="T:System.Delegate" /&gt;</ph> to form a new delegate.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Delegate" /&gt;</ph>를 지정된 <ph id="ph2">&lt;see cref="T:System.Delegate" /&gt;</ph>와 결합하여 새 대리자를 만듭니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>A delegate that is the new root of the <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> invocation list.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 호출 목록의 새 루트인 대리자입니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source><ph id="ph1">&lt;paramref name="follow" /&gt;</ph> does not have the same type as this instance.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="follow" /&gt;</ph>에는 이 인스턴스와 같은 형식이 없습니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">추상 클래스의 인스턴스를 만들 수 없거나 이 멤버가 런타임에 바인딩 메커니즘을 사용하여 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">이 인스턴스와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Determines whether this multicast delegate and the specified object are equal.</source>
          <target state="translated">이 멀티캐스트 대리자와 지정된 개체가 같은지를 확인합니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> and this instance have the same invocation lists; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="obj" /&gt;</ph> 및 이 인스턴스가 같은 호출 목록을 가지면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph3">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Two delegates are equal if they are not <ph id="ph1">`null`</ph> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</source>
          <target state="translated">두 명의 대리자가 없는 경우 <ph id="ph1">`null`</ph> 되며 해당 호출 목록에 요소를 동일한 수 있으며 정확히 같은 형식 및 모든 요소는 첫 번째 대리자의 호출 목록에는 호출의 해당 요소와 같습니다 두 번째 대리자의 목록입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</source>
          <target state="translated">동일한 대상 인스턴스에서 같은 인스턴스 메서드를 호출 하거나 같은 정적 메서드를 호출 하는 경우 두 호출 목록 요소 같습니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">추상 클래스의 인스턴스를 만들 수 없거나 이 멤버가 런타임에 바인딩 메커니즘을 사용하여 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.Equals(System.Object)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">이 인스턴스의 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">부호 있는 32비트 정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetHashCode">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">추상 클래스의 인스턴스를 만들 수 없거나 이 멤버가 런타임에 바인딩 메커니즘을 사용하여 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetHashCode">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetHashCode">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>Returns the invocation list of this multicast delegate, in invocation order.</source>
          <target state="translated">호출 순서대로 이 멀티캐스트 대리자의 호출 목록을 반환합니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>An array of delegates whose invocation lists collectively match the invocation list of this instance.</source>
          <target state="translated">호출 목록 전체가 이 인스턴스의 호출 목록과 일치하는 대리자의 배열입니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>The array contains a set of delegates, each with an invocation list of one entry.</source>
          <target state="translated">배열에 하나의 항목의 호출 목록을 가진 각 대리자 집합이 포함 되어 있습니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>Invoking these delegates sequentially, in the order they appear in the array, produces the same results as invoking the current instance.</source>
          <target state="translated">배열에 순서 대로 순차적으로 호출 하는 이러한 대리자 현재 인스턴스가 호출와 동일한 결과 생성 합니다.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">추상 클래스의 인스턴스를 만들 수 없거나 이 멤버가 런타임에 바인딩 메커니즘을 사용하여 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetInvocationList">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetMethodImpl">
          <source>Returns a static method represented by the current <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>에서 나타내는 정적 메서드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetMethodImpl">
          <source>A static method represented by the current <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>에서 나타내는 정적 메서드입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetMethodImpl">
          <source>If the <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> represents multiple methods, only one method is returned.</source>
          <target state="translated">경우는 <ph id="ph1">&lt;xref:System.MulticastDelegate&gt;</ph> 여러 메서드를 나타내는 메서드를 하나만 반환 됩니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>An object that holds all the data needed to serialize or deserialize this instance.</source>
          <target state="translated">이 인스턴스를 serialize 또는 deserialize하는 데 필요한 모든 데이터를 보유한 개체입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>(Reserved) The location where serialized data is stored and retrieved.</source>
          <target state="translated">(예약됨) Serialize된 데이터가 저장 및 검색되는 위치입니다.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with all the data needed to serialize this instance.</source>
          <target state="translated">이 인스턴스를 serialize하는 데 필요한 모든 데이터로 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 개체를 채웁니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method stores all the information in <ph id="ph1">`info`</ph> necessary to serialize this instance.</source>
          <target state="translated">이 메서드는에 있는 모든 정보를 저장 <ph id="ph1">`info`</ph> 이 인스턴스를 serialize 하는 데 필요한 합니다.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved and is not currently used in the execution of this method.</source>
          <target state="translated"><ph id="ph1">`context`</ph> 매개 변수는 예약 되어 있으며이 메서드의 실행에서 현재 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph>가 <ph id="ph2">&lt;see langword="null" /&gt;</ph>인 경우</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">추상 클래스의 인스턴스를 만들 수 없거나 이 멤버가 런타임에 바인딩 메커니즘을 사용하여 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A serialization error occurred.</source>
          <target state="translated">serialization 오류가 발생한 경우</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">직접 실행 호출자에 대 한 완전 신뢰가 필요 합니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">이 멤버는 부분적으로 신뢰할 수 있는 또는 투명 코드에서 사용할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The left operand.</source>
          <target state="translated">왼쪽 피연산자입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The right operand.</source>
          <target state="translated">오른쪽 피연산자입니다.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Determines whether two <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> objects are equal.</source>
          <target state="translated">두 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 개체가 서로 같은지 확인합니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="d1" /&gt;</ph> and <ph id="ph3">&lt;paramref name="d2" /&gt;</ph> have the same invocation lists; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="d1" /&gt;</ph> 및 <ph id="ph3">&lt;paramref name="d2" /&gt;</ph>가 같은 호출 목록을 가지면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Two delegates are equal if they are not <ph id="ph1">`null`</ph> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</source>
          <target state="translated">두 명의 대리자가 없는 경우 <ph id="ph1">`null`</ph> 되며 해당 호출 목록에 요소를 동일한 수 있으며 정확히 같은 형식 및 모든 요소는 첫 번째 대리자의 호출 목록에는 호출의 해당 요소와 같습니다 두 번째 대리자의 목록입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</source>
          <target state="translated">동일한 대상 인스턴스에서 같은 인스턴스 메서드를 호출 하거나 같은 정적 메서드를 호출 하는 경우 두 호출 목록 요소 같습니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">이 연산자는 해당 하는 방법은 <ph id="ph1">&lt;xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">추상 클래스의 인스턴스를 만들 수 없거나 이 멤버가 런타임에 바인딩 메커니즘을 사용하여 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The left operand.</source>
          <target state="translated">왼쪽 피연산자입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The right operand.</source>
          <target state="translated">오른쪽 피연산자입니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Determines whether two <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> objects are not equal.</source>
          <target state="translated">두 개의 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> 개체가 같은지 여부를 확인합니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="d1" /&gt;</ph> and <ph id="ph3">&lt;paramref name="d2" /&gt;</ph> do not have the same invocation lists; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="d1" /&gt;</ph> 및 <ph id="ph3">&lt;paramref name="d2" /&gt;</ph>가 같은 호출 목록을 가지지 않으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph4">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Two delegates are equal if they are not <ph id="ph1">`null`</ph> and are of exactly the same type, their invocation lists contain the same number of elements, and every element in the invocation list of the first delegate is equal to the corresponding element in the invocation list of the second delegate.</source>
          <target state="translated">두 명의 대리자가 없는 경우 <ph id="ph1">`null`</ph> 되며 해당 호출 목록에 요소를 동일한 수 있으며 정확히 같은 형식 및 모든 요소는 첫 번째 대리자의 호출 목록에는 호출의 해당 요소와 같습니다 두 번째 대리자의 목록입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Two invocation list elements are equal if they invoke the same instance method on the same target instance, or they invoke the same static method.</source>
          <target state="translated">동일한 대상 인스턴스에서 같은 인스턴스 메서드를 호출 하거나 같은 정적 메서드를 호출 하는 경우 두 호출 목록 요소 같습니다.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">이 연산자는 해당 하는 방법은 <ph id="ph1">&lt;xref:System.MulticastDelegate.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">추상 클래스의 인스턴스를 만들 수 없거나 이 멤버가 런타임에 바인딩 메커니즘을 사용하여 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>The delegate to search for in the invocation list.</source>
          <target state="translated">호출 목록에서 검색할 대리자입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>Removes an element from the invocation list of this <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph> that is equal to the specified delegate.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.MulticastDelegate" /&gt;</ph>의 호출 목록에서 지정된 대리자와 같은 요소를 제거합니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>If <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is found in the invocation list for this instance, then a new <ph id="ph2">&lt;see cref="T:System.Delegate" /&gt;</ph> without <ph id="ph3">&lt;paramref name="value" /&gt;</ph> in its invocation list; otherwise, this instance with its original invocation list.</source>
          <target state="translated">이 인스턴스의 호출 목록에 <ph id="ph1">&lt;paramref name="value" /&gt;</ph>가 있으면 호출 목록에 <ph id="ph3">&lt;paramref name="value" /&gt;</ph>가 없는 새 <ph id="ph2">&lt;see cref="T:System.Delegate" /&gt;</ph>이고, 그렇지 않으면 원본 호출 목록이 있는 이 인스턴스입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</source>
          <target state="translated">추상 클래스의 인스턴스를 만들 수 없거나 이 멤버가 런타임에 바인딩 메커니즘을 사용하여 호출되었습니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>when invoked late-bound through mechanisms such as <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>.</source>
          <target state="translated">호출 될 때 런타임에 바인딩된 메커니즘을 통해 같은 <ph id="ph1">&lt;see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></source>
          <target state="translated">연결 된 열거형의 경우: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /&gt;</ph></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>