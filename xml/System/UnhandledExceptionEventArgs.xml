<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnhandledExceptionEventArgs.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52bc5b27ab8c70f87bc485bcd049f405e98420956.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2bc5b27ab8c70f87bc485bcd049f405e98420956</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.UnhandledExceptionEventArgs">
          <source>Provides data for the event that is raised when there is an exception that is not handled in any application domain.</source>
          <target state="translated">응용 프로그램 도메인에서 처리되지 않은 예외가 있을 때 발생하는 이벤트에 대한 데이터를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.UnhandledExceptionEventArgs">
          <source><ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> provides access to the exception object and a flag indicating whether the common language runtime is terminating.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> 예외 개체 및 공용 언어 런타임의 종료 여부를 나타내는 플래그에 대 한 액세스를 제공 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.UnhandledExceptionEventArgs">
          <source>The <ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> is one of the parameters passed into <ph id="ph2">&lt;xref:System.UnhandledExceptionEventHandler&gt;</ph> for the <ph id="ph3">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.UnhandledExceptionEventArgs&gt;</ph> 로 전달 된 매개 변수 중 하나는 <ph id="ph2">&lt;xref:System.UnhandledExceptionEventHandler&gt;</ph> 에 대 한는 <ph id="ph3">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.UnhandledExceptionEventArgs">
          <source>For more information about event handler delegates, see <bpt id="p1">[</bpt>Handling and Raising Events<ept id="p1">](~/docs/standard/events/index.md)</ept>.</source>
          <target state="translated">이벤트 처리기 대리자에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>이벤트 처리 및 발생<ept id="p1">](~/docs/standard/events/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
          <source>The exception that is not handled.</source>
          <target state="translated">처리되지 않는 예외입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the runtime is terminating; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">런타임이 종료 중이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.UnhandledExceptionEventArgs" /&gt;</ph> class with the exception object and a common language runtime termination flag.</source>
          <target state="translated">예외 개체 및 공용 언어 런타임 종료 플래그를 사용하여 <ph id="ph1">&lt;see cref="T:System.UnhandledExceptionEventArgs" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Gets the unhandled exception object.</source>
          <target state="translated">처리되지 않은 예외 개체를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The unhandled exception object.</source>
          <target state="translated">처리되지 않은 예외 개체입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>This property returns an object of type <ph id="ph1">&lt;xref:System.Object&gt;</ph> rather than one derived from <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">이 속성은 반환 형식의 개체 <ph id="ph1">&lt;xref:System.Object&gt;</ph> 하나에서 파생 하는 대신 <ph id="ph2">&lt;xref:System.Exception&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Although the Common Language Specification requires that all exception types derive from <ph id="ph1">&lt;xref:System.Exception&gt;</ph>, it is possible for methods to throw exceptions with objects not derived from <ph id="ph2">&lt;xref:System.Exception&gt;</ph>.</source>
          <target state="translated">공용 언어 사양에서 모든 예외 형식을 파생 필요로 하지만 <ph id="ph1">&lt;xref:System.Exception&gt;</ph>, 개체에서 파생 되지 않은 예외를 throw 하는 방법에 대 한 수 <ph id="ph2">&lt;xref:System.Exception&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>You can do the following to work with this exception:</source>
          <target state="translated">이 예외와 함께 작동 하도록 다음을 수행할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Apply the  <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute&gt;</ph> attribute with a <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType&gt;</ph> value of <ph id="ph3">`true`</ph> to the assembly that contains the event handler.</source>
          <target state="translated">적용는 <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute&gt;</ph> 특성이 <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType&gt;</ph> 값 <ph id="ph3">`true`</ph> 이벤트 처리기가 포함 된 어셈블리에 있습니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>This wraps all exceptions not derived from the <ph id="ph1">&lt;xref:System.Exception&gt;</ph> class in a <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;</ph> object.</source>
          <target state="translated">파생 되지 않은 모든 예외를 래핑합니다이 <ph id="ph1">&lt;xref:System.Exception&gt;</ph> 클래스에 <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>You can then safely cast (in C#) or convert (in Visual Basic) the object returned by this property to an <ph id="ph1">&lt;xref:System.Exception&gt;</ph> object, and retrieve the original exception object from the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">있습니다 수 다음 안전 하 게 캐스팅 (C#) 또는 변환 (Visual Basic의 경우)이이 속성을 반환 하는 개체는 <ph id="ph1">&lt;xref:System.Exception&gt;</ph> 개체를 원래 예외 개체를 검색는 <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Note that some compilers, such as the C# and Visual Basic compilers, automatically apply this attribute.</source>
          <target state="translated">Note C# 및 Visual Basic 컴파일러 같은 일부 컴파일러에서는이 특성을 자동으로 적용 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>Cast the object returned by this property to an <ph id="ph1">&lt;xref:System.Exception&gt;</ph> object.</source>
          <target state="translated">이 속성을 반환 하는 개체를 캐스팅는 <ph id="ph1">&lt;xref:System.Exception&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> event.</source>
          <target state="translated">다음 예제는 <ph id="ph1">&lt;xref:System.AppDomain.UnhandledException&gt;</ph> 이벤트입니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>It defines an event handler, <ph id="ph1">`MyHandler`</ph>, that is invoked whenever an unhandled exception is thrown in the default application domain.</source>
          <target state="translated">이벤트 처리기를 정의 <ph id="ph1">`MyHandler`</ph>, 기본 응용 프로그램 도메인에서 처리 되지 않은 예외가 throw 됩니다 때마다 호출 되는 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>It then throws two exceptions.</source>
          <target state="translated">다음 두 가지 예외를 throw합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The first is handled by a <bpt id="p1">**</bpt>try/catch<ept id="p1">**</ept> block.</source>
          <target state="translated">첫 번째는에서 처리 한 <bpt id="p1">**</bpt>try/catch<ept id="p1">**</ept> 블록입니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.ExceptionObject">
          <source>The second is unhandled and invokes the <ph id="ph1">`MyHandle`</ph> routine before the application terminates.</source>
          <target state="translated">두 번째는 처리 되지 않으며 호출의 <ph id="ph1">`MyHandle`</ph> 응용 프로그램을 종료 하기 전에 루틴입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Indicates whether the common language runtime is terminating.</source>
          <target state="translated">공용 언어 런타임의 종료 여부를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the runtime is terminating; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">런타임이 종료 중이면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Beginning with the .NET Framework version 2.0, this property returns <ph id="ph1">`true`</ph> for most unhandled exceptions, unless an application compatibility flag is used to revert to the behavior of versions 1.0 and 1.1.</source>
          <target state="translated">.NET Framework 버전 2.0부터,이 속성은 반환 <ph id="ph1">`true`</ph> 대부분에 대 한 버전 1.0 및 1.1의 동작으로 되돌리려면 응용 프로그램 호환성 플래그를 사용 하지 않으면 예외를 처리 합니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>The reason is that most unhandled exceptions in threads, including thread pool threads, are allowed to proceed naturally, which normally results in termination of the application.</source>
          <target state="translated">일반적으로 인해 종료 응용 프로그램의 스레드 풀 스레드를 비롯 한 스레드의 가장 처리 되지 않은 예외 없이 진행 수 있도록 이유에서입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>For more information, including a list of cases in which the runtime does not terminate, see <bpt id="p1">[</bpt>Exceptions in Managed Threads<ept id="p1">](~/docs/standard/threading/exceptions-in-managed-threads.md)</ept>.</source>
          <target state="translated">런타임 종료 되지 않는 사례 목록을 비롯 한 자세한 내용은 참조 하십시오. <bpt id="p1">[</bpt>관리 되는 스레드의 예외<ept id="p1">](~/docs/standard/threading/exceptions-in-managed-threads.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Version Information</source>
          <target state="translated">버전 정보</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>The following applies to the .NET Framework versions 1.0 and 1.1: This property returns <ph id="ph1">`true`</ph> when an exception is received in, but not handled by, an application's main thread.</source>
          <target state="translated">다음.NET Framework 버전 1.0 및 1.1에 적용:이 속성은 반환 <ph id="ph1">`true`</ph> 예외가 이지만 수신 응용 프로그램의 주 스레드에 의해 처리 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>This property also returns <ph id="ph1">`true`</ph> if an unmanaged thread is executing managed code and receives an unhandled exception.</source>
          <target state="translated">또한이 속성 반환 <ph id="ph1">`true`</ph> 처리 되지 않은 예외를 수신 하는 관리 되지 않는 스레드가 관리 코드를 실행 합니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.UnhandledExceptionEventArgs.IsTerminating">
          <source>Finally, this property returns <ph id="ph1">`false`</ph> for thread pool threads and managed threads created by an application, because versions 1.0 and 1.1 catch unhandled exceptions in such threads and ignore them.</source>
          <target state="translated">마지막으로,이 속성은 반환 <ph id="ph1">`false`</ph> 스레드 풀 스레드 및 버전 1.0 및 1.1 이러한 스레드의에서 처리 되지 않은 예외를 catch 하 고 무시 하기 때문에 응용 프로그램에서 생성 하는 관리 되는 스레드에 대 한 합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>