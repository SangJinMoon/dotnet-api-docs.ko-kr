<Type Name="ReadOnlySpan&lt;T&gt;" FullName="System.ReadOnlySpan&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="53c5acd9e5f3272ee9d312017693641b176a4aed" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46649482" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct ReadOnlySpan&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ReadOnlySpan`1&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.ReadOnlySpan`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure ReadOnlySpan(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public value class ReadOnlySpan" />
  <TypeSignature Language="F#" Value="type ReadOnlySpan&lt;'T&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="c8e50-101">항목의 형식은 <see cref="System.ReadOnlySpan`1" />합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c8e50-101">The type of items in the <see cref="System.ReadOnlySpan`1" />.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="c8e50-102">인접한 임의의 메모리 영역에 대해 형식이 안전하고 메모리가 안전한 읽기 전용 표현을 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="c8e50-102">Provides a type-safe and memory-safe read-only representation of a contiguous region of arbitrary memory.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[<span data-ttu-id="c8e50-103">`ReadOnlySpan<T>` [ref 구조체](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type) 스택에 할당을 관리 되는 힙에 이스케이프 되지 않습니다 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-103">`ReadOnlySpan<T>` is a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type) that is allocated on the stack and can never escape to the managed heap.</span></span> <span data-ttu-id="c8e50-104">Ref 구조체 형식을 제한 하는 수준을 올릴 수 없습니다는 이러한 없습니다 넣을, 형식의 변수에 할당 된 람다 식의 캡처를 포함 하 여 관리 되는 힙에 하도록 많은 <xref:System.Object>에 할당 된, `dynamic` 변수 및 임의의 인터페이스 형식을 구현할 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-104">Ref struct types have a number of restrictions to ensure that they cannot be promoted to the managed heap, including that they can't be boxed, captured in lambda expressions, assigned to variables of type <xref:System.Object>, assigned to `dynamic` variables, and they cannot implement any interface type.</span></span>

<span data-ttu-id="c8e50-105">`ReadOnlySpan<T>` 인스턴스는 배열의 요소 또는 그 일부의 배열 참조 하는 데 자주 사용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-105">A `ReadOnlySpan<T>` instance is often used to reference the elements of an array or a portion of an array.</span></span> <span data-ttu-id="c8e50-106">그러나 배열 달리를 `ReadOnlySpan<T>` 인스턴스는 기본 메모리 관리 되는 메모리를 가리킬 수 또는 메모리에서 관리 되는 스택.</span><span class="sxs-lookup"><span data-stu-id="c8e50-106">Unlike an array, however, a `ReadOnlySpan<T>` instance can point to managed memory, native memory, or memory managed on the stack.</span></span>]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; array" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="c8e50-107">
            <see cref="T:System.ReadOnlySpan`1" />을 만들 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-107">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-108">지정된 배열 전체에 새로운 <see cref="T:System.ReadOnlySpan`1" />을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-108">Creates a new <see cref="T:System.ReadOnlySpan`1" /> over the entirety of a specified array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="c8e50-109">이 생성자에 null을 반환 합니다 배열의 null 이면 `ReadOnlySpan<T>`합니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-109">If the array is null, this constructor returns a null `ReadOnlySpan<T>`.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (void* pointer, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(void* pointer, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(System.Void*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(void* pointer, int length);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : nativeptr&lt;unit&gt; * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (pointer, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="pointer" Type="System.Void*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pointer">
          <span data-ttu-id="c8e50-110">메모리에서 지정된 <paramref name="T" /> 개체 수의 시작 주소에 대한 포인터입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-110">A pointer to the starting address of a specified number of <paramref name="T" /> objects in memory.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="c8e50-111">포함할 <paramref name="T" /> 개체 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-111">The number of <paramref name="T" /> objects to be included.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-112">지정된 메모리 주소에서 시작하는 지정된 바이트 수로부터 새 <see cref="T:System.ReadOnlySpan`1" />을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-112">Creates a new <see cref="T:System.ReadOnlySpan`1" /> from a specified number of bytes starting at a specified memory address.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="c8e50-113">이 생성자 사용할지 신중 하 게 임의로 형식화 된 만들어지므로 `T`메모리 블록의 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-113">This constructor should be used with care, since it creates arbitrarily typed `T`s from a block of memory.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c8e50-114">
            <paramref name="T" />는 참조 형식이거나 참조를 포함하므로 관리되지 않는 메모리에 저장할 수 없습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-114">
              <paramref name="T" /> is a reference type or contains references and therefore cannot be stored in unmanaged memory.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c8e50-115">
            <paramref name="length" />가 음수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-115">
              <paramref name="length" /> is negative.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array, int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array, int start);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (array, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="c8e50-116">
            <see cref="T:System.ReadOnlySpan`1" />을 만들 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-116">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="c8e50-117">읽기 전용 범위를 시작할 시작 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-117">The starting index from which to begin the read-only span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-118">지정한 인덱스에서 시작하고 배열 끝까지 계속되는 배열에서 새 <see cref="T:System.ReadOnlySpan`1" />을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-118">Creates a new <see cref="T:System.ReadOnlySpan`1" /> from an array starting at the specified index and continuing until the end of the array.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c8e50-119">
            <paramref name="start" />이 0보다 작거나 배열의 길이보다 큽니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-119">
              <paramref name="start" /> is less-than 0 or greater-than the length of the array.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c8e50-120">
            <paramref name="array" />가 null인 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-120">
              <paramref name="array" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadOnlySpan (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (array As T(), start As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="new ReadOnlySpan&lt;'T&gt; : 'T[] * int * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="new System.ReadOnlySpan&lt;'T&gt; (array, start, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="c8e50-121">
            <see cref="T:System.ReadOnlySpan`1" />을 만들 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-121">The array from which to create the <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="c8e50-122">포함할 첫 번째 요소의 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-122">The index of the first element to include.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="c8e50-123">포함할 요소 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-123">The number of elements to include.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-124">지정된 인덱스에서 시작하는 배열의 지정된 요소 수를 포함하는 새 <see cref="T:System.ReadOnlySpan`1" />을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-124">Creates a new <see cref="T:System.ReadOnlySpan`1" /> that includes a specified number of elements of an array starting at a specified index.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c8e50-125">
            <paramref name="array" />가 <see langword="null" />이지만, <paramref name="start" /> 또는 <paramref name="length" />는 0이 아닙니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-125">
              <paramref name="array" /> is <see langword="null" />, but <paramref name="start" /> or <paramref name="length" /> is non-zero.</span>
          </span>
          <p />
          <span data-ttu-id="c8e50-126">-- 또는 --</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-126">--or--</span>
          </span>
          <p />
          <span data-ttu-id="c8e50-127">
            <paramref name="start" />가 배열의 범위 밖에 있습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-127">
              <paramref name="start" /> is outside the bounds of the array.</span>
          </span>
          <p />
          <span data-ttu-id="c8e50-128">-- 또는 --</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-128">--or--</span>
          </span>
          <p />
          <span data-ttu-id="c8e50-129">
            <paramref name="start" /> 및 <paramref name="length" />가 배열의 요소 수를 초과합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-129">
              <paramref name="start" /> and <paramref name="length" /> exceeds the number of elements in the array.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.CopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Span(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : Span&lt;'T&gt; -&gt; unit" Usage="readOnlySpan.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="c8e50-130">항목을 복사할 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-130">The span to copy items into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-131">이 <see cref="System.ReadOnlySpan`1" />의 콘텐츠를 대상 <see cref="System.Span`1" />로 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-131">Copies the contents of this <see cref="System.ReadOnlySpan`1" /> into a destination <see cref="System.Span`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="c8e50-132">경우는 `source` 하 고 `destination` 겹치는 전체 `source` 를 복사 하기 전에 임시 위치로 복사 된 것 처럼 처리 됩니다 `destination`합니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-132">If the `source` and `destination` overlap, the entirety of `source` is handled as if it was copied to a temporary location before it is copied to `destination`.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c8e50-133">
            <paramref name="destination" />이 원본 <see cref="System.ReadOnlySpan`1" />보다 짧습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-133">
              <paramref name="destination" /> is shorter than the source <see cref="System.ReadOnlySpan`1" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DangerousCreate">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; DangerousCreate (object obj, ref T objectData, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!T&gt; DangerousCreate(object obj, !T&amp; objectData, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.DangerousCreate(System.Object,`0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DangerousCreate (obj As Object, ByRef objectData As T, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ReadOnlySpan&lt;T&gt; DangerousCreate(System::Object ^ obj, T % objectData, int length);" />
      <MemberSignature Language="F#" Value="static member DangerousCreate : obj *  * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.DangerousCreate (obj, objectData, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="objectData" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="c8e50-134">범위의 데이터가 포함된 관리 개체입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-134">The managed object that contains the data the span will cover.</span>
          </span>
        </param>
        <param name="objectData">
          <span data-ttu-id="c8e50-135">개체 내 데이터에 대한 참조입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-135">A reference to data within the object.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="c8e50-136">표시할 <paramref name="T" /> 요소의 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-136">The number of <paramref name="T" /> elements to span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-137">일반 관리 개체의 일부에서 새 <see cref="T:System.ReadOnlySpan`1" />을 만듭니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-137">Creates a new <see cref="T:System.ReadOnlySpan`1" /> over a portion of a regular managed object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-138">
            <see cref="T:System.ReadOnlySpan`1" />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-138">A <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="c8e50-139">이 메서드는 위험 때문에 그 **확인 하지 않습니다** 다음 오류 조건에 대해:</span><span class="sxs-lookup"><span data-stu-id="c8e50-139">This method is dangerous because it **does not check** for the following error conditions:</span></span>

- <span data-ttu-id="c8e50-140">`length` 매개 변수가 잘못되었습니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-140">The `length` parameter is incorrect.</span></span>
- <span data-ttu-id="c8e50-141">`obj` 매개 변수가 null인 경우</span><span class="sxs-lookup"><span data-stu-id="c8e50-141">The `obj` parameter is null.</span></span>
- <span data-ttu-id="c8e50-142">개체 `obj` 가리키는 원시 포인터를 포함할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-142">The objects `obj` points to may contain a raw pointer.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DangerousGetPinnableReference">
      <MemberSignature Language="C#" Value="public T DangerousGetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T DangerousGetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.DangerousGetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function DangerousGetPinnableReference () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T % DangerousGetPinnableReference();" />
      <MemberSignature Language="F#" Value="member this.DangerousGetPinnableReference : unit -&gt; " Usage="readOnlySpan.DangerousGetPinnableReference " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c8e50-143">인덱스 0에서 <see cref="T:System.ReadOnlySpan`1" />의 마지막 요소에 대한 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-143">Returns a reference to the element of the <see cref="T:System.ReadOnlySpan`1" /> at index zero.</span>
          </span>
          <span data-ttu-id="c8e50-144">읽기 전용 범위가 비어 있으면 첫 번째 요소가 저장된 메모리 위치에 대한 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-144">If the read-only span is empty, returns the reference to the memory location where the first element would have been stored.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-145">인덱스 0에서 <see cref="T:System.ReadOnlySpan`1" />의 첫 번째 요소에 대한 참조를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-145">A reference to the first element of the <see cref="T:System.ReadOnlySpan`1" /> at index zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="c8e50-146">이 메서드는 반환 된 [ref 구조체](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type)합니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-146">This method returns a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).</span></span> <span data-ttu-id="c8e50-147">고정할 수는 <xref:System.ReadOnlySpan`1> 메모리에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-147">It can be used for pinning a <xref:System.ReadOnlySpan`1> in memory.</span></span> <span data-ttu-id="c8e50-148">사용을 지원 해야는 <xref:System.ReadOnlySpan`1> 내에서 [고정](~/docs/csharp/language-reference/keywords/fixed-statement.md) 문입니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-148">It is required to support the use of a <xref:System.ReadOnlySpan`1> within a [fixed](~/docs/csharp/language-reference/keywords/fixed-statement.md) statement.</span></span>

<span data-ttu-id="c8e50-149">이 참조 고정 되 고 역참조 되지 않아야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-149">This reference is used for pinning and must never be dereferenced.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ReadOnlySpan`1&lt;!T&gt; Empty" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ReadOnlySpan&lt;T&gt; Empty { ReadOnlySpan&lt;T&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c8e50-150">빈 <see cref="T:System.ReadOnlySpan`1" /> 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-150">Returns an empty <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c8e50-151">빈 <see cref="T:System.ReadOnlySpan`1" /> 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-151">Returns an empty <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="readOnlySpan.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.Obsolete("Equals() on ReadOnlySpan will always throw an exception. Use == instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="c8e50-152">지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-152">Not supported.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-153">지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-153">Not supported.</span>
          </span>
          <span data-ttu-id="c8e50-154">
            <see cref="T:System.NotSupportedException" />를 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-154">Throws a <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-155">지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-155">Not supported.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="c8e50-156">지원되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-156">Not supported.</span></span>]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c8e50-157">이 메서드에서 항상 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-157">Always thrown by this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As ReadOnlySpan(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; ReadOnlySpan&lt;'T&gt;.Enumerator" Usage="readOnlySpan.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c8e50-158">이 <see cref="T:System.ReadOnlySpan`1" />에 대한 열거자를 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-158">Returns an enumerator for this <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-159">이 읽기 전용 범위에 대한 열거자입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-159">An enumerator for this read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="c8e50-160">호출 하는 대신 합니다 <xref:System.ReadOnlySpan%601.GetEnumerator%2A> 메서드를 직접 사용할 수는 C# `foreach` 문 및 Visual Basic `For Each`... `Next` 구문을 사용 열거 하는 <xref:System.ReadOnlySpan%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-160">Instead of calling the <xref:System.ReadOnlySpan%601.GetEnumerator%2A> method directly, you can use the C# `foreach` statement and the Visual Basic `For Each`...`Next` construct to enumerate a <xref:System.ReadOnlySpan%601>.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="readOnlySpan.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1">
          <AttributeName>System.Obsolete("GetHashCode() on ReadOnlySpan will always throw an exception.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c8e50-161">지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-161">Not supported.</span>
          </span>
          <span data-ttu-id="c8e50-162">
            <see cref="T:System.NotSupportedException" />를 throw합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-162">Throws a <see cref="T:System.NotSupportedException" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-163">지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-163">Not supported.</span>
          </span>
        </returns>
        <remarks>
          <span data-ttu-id="c8e50-164">지원되지 않습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-164">Not supported.</span>
          </span>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="c8e50-165">이 메서드에서 항상 throw됩니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-165">Always thrown by this method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.ReadOnlySpan&lt;'T&gt;.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c8e50-166">현재 읽기 전용 범위가 비어 있음을 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-166">Returns a value that indicates the current read-only span is empty.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c8e50-167">
            <see langword="true" /> 현재 범위가 비어 있습니다. 그렇지 않으면 <see langword="false" />합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-167">
              <see langword="true" /> when the current span is empty; otherwise <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T&amp; this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance T&amp; modreq(System.Runtime.InteropServices.InAttribute) Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T&amp; ^ default[int] { T&amp; ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : T&amp;" Usage="System.ReadOnlySpan&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.1">
          <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T&amp;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="c8e50-168">가져올 요소의 0부터 시작하는 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-168">The zero-based index of the element to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-169">지정한 0 기반 인덱스의 읽기 전용 범위에서 항목을 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-169">Gets an item from the read-only span at the specified zero-based index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c8e50-170">읽기 전용으로 범위를 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-170">The element from the read-only span.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <span data-ttu-id="c8e50-171">
            <paramref name="index" />가 0보다 작거나 <see cref="P:System.ReadOnlySpan`1.Length" />보다 크거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-171">
              <paramref name="index" /> is less then zero or greater than or equal to <see cref="P:System.ReadOnlySpan`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.ReadOnlySpan`1.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.ReadOnlySpan&lt;'T&gt;.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c8e50-172">읽기 전용 범위에서 항목 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-172">The number of items in the read-only span.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c8e50-173">항목 수입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-173">The number of items.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.ReadOnlySpan`1&lt;!T&gt; left, valuetype System.ReadOnlySpan`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Equality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As ReadOnlySpan(Of T), right As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="right" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="c8e50-174">비교할 첫 번째 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-174">The first span to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="c8e50-175">비교할 두 번째 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-175">The second span to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-176">두 <see cref="T:System.ReadOnlySpan`1" /> 인스턴스가 같은지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-176">Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-177">두 <see cref="T:System.ReadOnlySpan`1" /> 인스턴스가 같으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-177">
              <see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are equal; otherwise, <see langword="false" /></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="c8e50-178">이 테스트 두 <xref:System.ReadOnlySpan`1> 동일한 시작 메모리 위치를 가리키도록 인스턴스와 같으면 <xref:System.ReadOnlySpan`1.Length> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-178">This tests if two <xref:System.ReadOnlySpan`1> instances point to the same starting memory location, and have the same <xref:System.ReadOnlySpan`1.Length> values.</span></span> <span data-ttu-id="c8e50-179">이 두의 내용을 비교 하지 않습니다 <xref:System.ReadOnlySpan`1> 인스턴스.</span><span class="sxs-lookup"><span data-stu-id="c8e50-179">This does not compare the contents of two <xref:System.ReadOnlySpan`1> instances.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Implicit(`0[])~System.ReadOnlySpan{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (array As T()) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T[] -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Implicit array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="c8e50-180">
            <see cref="T:System.ReadOnlySpan`1" />로 변환할 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-180">The array to convert to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-181">배열을 <see cref="T:System.ReadOnlySpan`1" />로 변환하는 암시적 변환을 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-181">Defines an implicit conversion of an array to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-182">
            <paramref name="array" />에 해당하는 읽기 전용 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-182">The read-only span that corresponds to <paramref name="array" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (ArraySegment&lt;T&gt; arraySegment);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; arraySegment) cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (arraySegment As ArraySegment(Of T)) As ReadOnlySpan(Of T)" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(ArraySegment&lt;T&gt; arraySegment);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;T&gt; (ArraySegment&lt;T&gt; segment);" FrameworkAlternate="netcore-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;!T&gt; op_Implicit(valuetype System.ArraySegment`1&lt;!T&gt; segment) cil managed" FrameworkAlternate="netcore-2.1" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Implicit(System.ArraySegment{`0})~System.ReadOnlySpan{`0}" FrameworkAlternate="netcore-2.1;netcore-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (segment As ArraySegment(Of T)) As ReadOnlySpan(Of T)" FrameworkAlternate="netcore-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;T&gt;(ArraySegment&lt;T&gt; segment);" FrameworkAlternate="netcore-2.1" />
      <MemberSignature Language="F#" Value="static member op_Implicit : ArraySegment&lt;'T&gt; -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Implicit segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arraySegment" Type="System.ArraySegment&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.0" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.1" />
      </Parameters>
      <Docs>
        <param name="arraySegment">
          <span data-ttu-id="c8e50-183">
            <see cref="T:System.ReadOnlySpan`1" />로 변환될 배열 세그먼트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-183">The array segment to be converted to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <param name="segment">
          <span data-ttu-id="c8e50-184">
            <see cref="T:System.ReadOnlySpan`1" />로 변환될 배열 세그먼트입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-184">The array segment to be converted to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-185">
            <see cref="T:System.ArraySegment`1" />을 <see cref="T:System.ReadOnlySpan`1" />로 변환하는 암시적 변환을 정의합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-185">Defines an implicit conversion of an <see cref="T:System.ArraySegment`1" /> to a <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-186">배열 세그먼트에 해당하는 읽기 전용 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-186">A read-only span that corresponds to the array segment.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.ReadOnlySpan`1&lt;!T&gt; left, valuetype System.ReadOnlySpan`1&lt;!T&gt; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.op_Inequality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As ReadOnlySpan(Of T), right As ReadOnlySpan(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(ReadOnlySpan&lt;T&gt; left, ReadOnlySpan&lt;T&gt; right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : ReadOnlySpan&lt;'T&gt; * ReadOnlySpan&lt;'T&gt; -&gt; bool" Usage="System.ReadOnlySpan&lt;'T&gt;.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.ReadOnlySpan&lt;T&gt;" />
        <Parameter Name="right" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="c8e50-187">비교할 첫 번째 읽기 전용 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-187">The first read-only span to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="c8e50-188">비교할 두 번째 읽기 전용 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-188">The second read-only span to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-189">두 <see cref="T:System.ReadOnlySpan`1" /> 인스턴스가 다른지 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-189">Returns a value that indicates whether two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-190">두 <see cref="T:System.ReadOnlySpan`1" />이 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-190">
              <see langword="true" /> if the two <see cref="T:System.ReadOnlySpan`1" /> instances are not equal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="c8e50-191">두 개의 <xref:System.ReadOnlySpan%601> 인스턴스가 같지 없거나 길이가 다른 경우의 해당 요소 `left` 및 `right` 다른 메모리 위치를 가리킵니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-191">Two <xref:System.ReadOnlySpan%601> instances are not equal if they have different lengths or if the corresponding elements of `left` and `right` point to different memory locations.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; Slice (int start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; Slice(int32 start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Slice(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; Slice(int start);" />
      <MemberSignature Language="F#" Value="member this.Slice : int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlySpan.Slice start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="c8e50-192">조각을 시작할 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-192">The index at which to begin the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-193">지정된 인덱스로 시작되는 현재 읽기 전용 범위에서 하나의 조각을 형성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-193">Forms a slice out of the current read-only span that begins at a specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-194">
            <paramref name="index" />에서 스팬의 끝까지 현재 범위의 모든 요소로 구성된 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-194">A span that consists of all elements of the current span from <paramref name="index" /> to the end of the span.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c8e50-195">
            <paramref name="start" />가 읽기 전용 범위의 항목 수보다 큰 경우</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-195">
              <paramref name="start" /> is greater than the number of items in the read-only span.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Slice">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;T&gt; Slice (int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.ReadOnlySpan`1&lt;!T&gt; Slice(int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.Slice(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Slice (start As Integer, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ReadOnlySpan&lt;T&gt; Slice(int start, int length);" />
      <MemberSignature Language="F#" Value="member this.Slice : int * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="readOnlySpan.Slice (start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="c8e50-196">이 조각을 시작할 인덱스입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-196">The index at which to begin this slice.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="c8e50-197">조각에 대한 원하는 길이입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-197">The desired length for the slice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-198">지정된 길이에 대해 지정된 인덱스에서 시작하는 현재 읽기 전용 범위에서 벗어난 조각을 형성합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-198">Forms a slice out of the current read-only span starting at a specified index for a specified length.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-199">
            <paramref name="index" />에서 시작하는 현재 범위로부터 <paramref name="length" /> 요소를 구성하는 읽기 전용 범위입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-199">A read-only span that consists of <paramref name="length" /> elements from the current span starting at <paramref name="index" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="c8e50-200">
            <paramref name="start" />가 0보다 작거나 <see cref="T:System.Span`1.Length" />보다 크거나 같습니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-200">
              <paramref name="start" /> is less than zero or greater than or equal to <see cref="T:System.Span`1.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="readOnlySpan.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c8e50-201">이 읽기 전용 범위의 콘텐츠를 새 배열로 복사합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-201">Copies the contents of this read-only span into a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-202">현재 범위에서 데이터를 포함하는 배열입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-202">An array containing the data in the current span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="c8e50-203">이 메서드는 힙 할당 및 데이터를 복사를 수행 하 고 따라서 가능한 경우 피해 야 합니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-203">This method performs a heap allocation and data copy, and therefore, should be avoided if possible.</span></span> <span data-ttu-id="c8e50-204">이 Api는 지원 되는 경우 작업이 필요한 경우도 해당 <xref:System.ReadOnlySpan%601> 를 사용할 수 없습니다, 있지만 배열 작업할 수 있는 Api입니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-204">It it sometimes necessary when APIs that support <xref:System.ReadOnlySpan%601> are not available, but APIs that work with arrays are.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="readOnlySpan.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c8e50-205">이 <see cref="T:System.ReadOnlySpan`1" />의 문자열 표현을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-205">Returns the string representation of this <see cref="T:System.ReadOnlySpan`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-206">이 인스턴스의 문자열 표현입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-206">The string representation of this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="c8e50-207">에 대 한는 `ReadOnlySpan<Char>`, `ToString` 메서드가 반환 되는 <xref:System.String> 범위를 가리키는 문자를 포함 하는.</span><span class="sxs-lookup"><span data-stu-id="c8e50-207">For a `ReadOnlySpan<Char>`, the `ToString` method returns a <xref:System.String> that contains the characters pointed to by the span.</span></span> <span data-ttu-id="c8e50-208">반환이 고, 그렇지는 <xref:System.String> 형식 및 범위를 포함 하는 요소 수의 이름입니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-208">Otherwise, it returns a <xref:System.String> with the name of the type and the number of elements that the span contains.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCopyTo">
      <MemberSignature Language="C#" Value="public bool TryCopyTo (Span&lt;T&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryCopyTo(valuetype System.Span`1&lt;!T&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ReadOnlySpan`1.TryCopyTo(System.Span{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TryCopyTo (destination As Span(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryCopyTo(Span&lt;T&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.TryCopyTo : Span&lt;'T&gt; -&gt; bool" Usage="readOnlySpan.TryCopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="c8e50-209">복사 작업의 대상입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-209">The target of the copy operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c8e50-210">이 <see cref="System.ReadOnlySpan`1" />의 내용을 <see cref="System.Span`1" />으로 복사하고자 시도하고 작업 성공 여부를 나타내는 값을 반환합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-210">Attempts to copy the contents of this <see cref="System.ReadOnlySpan`1" /> into a <see cref="System.Span`1" /> and returns a value to indicate whether or not the operation succeeded.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c8e50-211">복사 작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="c8e50-211">
              <see langword="true" /> if the copy operation succeeded; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[<span data-ttu-id="c8e50-212">경우는 `source` 하 고 `destination` 겹치는 전체 `source` 를 복사 하기 전에 임시 위치로 복사 된 것 처럼 처리 됩니다 `destination`합니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-212">If the `source` and `destination` overlap, the entirety of `source` is handled as if it was copied to a temporary location before it is copied to `destination`.</span></span>

<span data-ttu-id="c8e50-213">경우는 `destination` 길이 보다 짧으면 `source`항목이 복사 되 고 메서드는 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="c8e50-213">If the `destination` length is shorter than `source`, no items are copied and the method returns `false`.</span></span>]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>