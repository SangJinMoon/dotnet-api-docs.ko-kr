<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple`7.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ff8c3596f37b00620da99feabf785f0647be74b2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff8c3596f37b00620da99feabf785f0647be74b2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's first component.</source>
          <target state="translated">튜플의 첫 번째 구성 요소 형식입니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's second component.</source>
          <target state="translated">튜플의 두 번째 구성 요소 형식입니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's third component.</source>
          <target state="translated">튜플의 세 번째 구성 요소 형식입니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's fourth component.</source>
          <target state="translated">튜플의 네 번째 구성 요소 형식입니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's fifth component.</source>
          <target state="translated">튜플의 다섯 번째 구성 요소 형식입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's sixth component.</source>
          <target state="translated">튜플의 여섯 번째 구성 요소 형식입니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's seventh component.</source>
          <target state="translated">튜플의 일곱 번째 구성 요소 형식입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Tuple`7">
          <source>Represents a 7-tuple, or septuple.</source>
          <target state="translated">7-튜플 또는 일곱을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>A tuple is a data structure that has a specific number and sequence of values.</source>
          <target state="translated">튜플은 특정 수 및 값의 시퀀스를 포함 하는 데이터 구조입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> class represents a 7-tuple, or septuple, which is a tuple that has seven components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 클래스 나타냅니다 7-튜플 또는 일곱을 튜플이 있는 7 개 구성 요소가 있는 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object by calling either the <ph id="ph2">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> or the static <ph id="ph3">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">인스턴스화할 수 있습니다는 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 호출 하 여 개체는 <ph id="ph2">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> 또는 정적 <ph id="ph3">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>You can retrieve the value of the tuple's components by using the read-only <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> instance properties.</source>
          <target state="translated">읽기 전용을 사용 하 여 튜플의 구성의 값을 검색할 수 있습니다 <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, 및 <ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> 인스턴스 속성입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>Tuples are commonly used in four different ways:</source>
          <target state="translated">튜플의 네 가지 방법으로 일반적으로 사용 됩니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>To represent a single set of data.</source>
          <target state="translated">단일 데이터 집합이 나타내려는 경우.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>For example, a tuple can represent a database record, and its components can represent individual fields of the record.</source>
          <target state="translated">예를 들어 튜플을 데이터베이스 레코드를 나타내고 해당 구성 요소 레코드의 개별 필드를 나타낼 수 있습니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>To provide easy access to, and manipulation of, a data set.</source>
          <target state="translated">및 제공 하기 위해 쉽게 액세스 하는 데이터 집합의 조작 합니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The following example defines a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object that contains population data for New York City for each census from 1950 through 2000.</source>
          <target state="translated">다음 예제에서는 정의 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 뉴욕시에 대 한 각 1950 2000 년 인구 조사에 대 한 인구 데이터를 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The septuple is passed to the <ph id="ph1">`ComputePopulationChange`</ph> method, which calculates the annual rate of change between censuses, as well as the annual rate of change for the entire 60 year period.</source>
          <target state="translated">에 전달 되는 일곱는 <ph id="ph1">`ComputePopulationChange`</ph> 전체 60 년 동안의 연간 변동률 뿐 아니라, 인구 조사 사이 연간 변동률을 계산 하는 메서드.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>To return multiple values from a method without the use of <ph id="ph1">`out`</ph> parameters (in C#) or <ph id="ph2">`ByRef`</ph> parameters (in Visual Basic).</source>
          <target state="translated">메서드에서 사용 하지 않고 여러 값을 반환 하려면 <ph id="ph1">`out`</ph> 매개 변수 (C#) 또는 <ph id="ph2">`ByRef`</ph> 매개 변수 (Visual Basic의 경우).</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>For example, the previous example returns its computed statistics, along with the city name, in a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">이전 예제에서 도시 이름 함께 계산된 된 통계를 반환 하는 예를 들어 한 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>To pass multiple values to a method through a single parameter.</source>
          <target state="translated">값이 여러 개인 단일 매개 변수를 통해 메서드에 전달 하 합니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>For example, the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</source>
          <target state="translated">예를 들어는 <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> 메서드는 스레드가 시작 시 실행 되는 메서드를 하나의 값을 제공할 수 있는 단일 매개 변수입니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>If you supply a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object as the method argument, you can supply the thread’s startup routine with seven items of data.</source>
          <target state="translated">제공 하는 경우는 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 메서드 인수로 개체에 7 항목 데이터의 스레드 시작 루틴을 제공할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's first component.</source>
          <target state="translated">튜플의 첫 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's second component.</source>
          <target state="translated">튜플의 두 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's third component.</source>
          <target state="translated">튜플의 세 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's fourth component</source>
          <target state="translated">튜플의 네 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's fifth component.</source>
          <target state="translated">튜플의 다섯 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's sixth component.</source>
          <target state="translated">튜플의 여섯 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's seventh component.</source>
          <target state="translated">튜플의 일곱 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>You can use the static <ph id="ph1">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 7-tuple object without having to explicitly specify the types of its components.</source>
          <target state="translated">정적을 사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph> 메서드를 명시적으로 구성 요소의 유형을 지정할 필요 없이 7-튜플 개체를 인스턴스화할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 7-tuple whose first component is of type <ph id="ph2">&lt;xref:System.String&gt;</ph> and whose remaining components are of type <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">다음 예제에서는 <ph id="ph1">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph> 메서드를 가진 첫 번째 구성 요소가 형식 7-튜플 인스턴스화하 <ph id="ph2">&lt;xref:System.String&gt;</ph> 형식의 나머지 구성 요소가 및 <ph id="ph3">&lt;xref:System.Int32&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>This is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">이 다음 호출에 해당 하는 <ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> 클래스 생성자입니다.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">이 인스턴스와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체가 지정된 개체와 같은지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 인스턴스가 지정된 개체와 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The <ph id="ph1">`obj`</ph> parameter is considered to be equal to the current instance under the following conditions:</source>
          <target state="translated"><ph id="ph1">`obj`</ph> 매개 변수는 다음과 같은 경우 현재 인스턴스를 동일한 것으로 간주 됩니다.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>It is a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">한 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>Its seven components are of the same types as the current instance.</source>
          <target state="translated">7 개의 구성 요소에 현재 인스턴스와 동일한 형식의 됩니다.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>Its seven components are equal to those of the current instance.</source>
          <target state="translated">7 개의 구성 요소는 현재 인스턴스와 같습니다.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>Equality is determined by the default object equality comparer for each component.</source>
          <target state="translated">일치 여부는 각 구성 요소에 대한 기본 개체 같음 비교 연산자에 따라 결정됩니다.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The following example defines an array of sextuples that contain population data for Los Angeles and New York from 1950 to 2000.</source>
          <target state="translated">다음 예제에서는 데이터가 포함 된 모집단 로스앤젤레스, 뉴욕에 대 한 1950에서 2000 로스엔젤레스와 6의 배열을 정의 합니다.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The first component of each septuple identifies the city.</source>
          <target state="translated">각 7 중의 첫 번째 구성 요소는 도시를 식별 합니다.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The first, third, and fourth septuples contain data for New York.</source>
          <target state="translated">첫 번째, 세 번째 및 네 번째 뉴욕 뉴욕에 대 한 데이터를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The first septuple is a duplicate of the fourth septuple.</source>
          <target state="translated">첫 번째 일곱 넷째 7 중 중복 됩니다.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The third septuple identifies the city as "New York City" instead of "New York".</source>
          <target state="translated">세 번째 7 중 도시를 "New York" 대신 "New York City"으로 식별합니다.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>As the example shows, only the fourth septuple is equal to the first septuple.</source>
          <target state="translated">네 번째 일곱은 첫 번째와 동일한 예에서 볼 수 있듯이 일곱 합니다.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.GetHashCode">
          <source>Returns the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체에 대한 해시 코드를 반환합니다.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">부호 있는 32비트 정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item1">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's first component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 첫 번째 구성 요소 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's first component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 첫 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">종류를 동적으로 결정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> 두 가지 방법 중 하나에서 구성 요소:</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> property.</source>
          <target state="translated">호출 하 여는 <ph id="ph1">`GetType`</ph> 에서 반환 되는 값에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">검색 하 여는 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 을 나타내는 개체는 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체를 통해 반환 되는 배열에서 첫 번째 요소를 검색 합니다. 해당 <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">다음 예제에서는 배열을 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 부터 2000 1950 (New York, 시카고, 및 로스앤젤레스) 세 미국 도시에 대 한 인구 데이터를 포함 하는 구성 요소 개체입니다.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">다음 데이터를 나열 하는 테이블을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>To display the city name, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">값을 검색 된 도시 이름의 표시 하려면는 <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> 각 속성이 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item2">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's second component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 두 번째 구성 요소 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's second component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 두 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">종류를 동적으로 결정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> 두 가지 방법 중 하나에서 구성 요소:</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> property.</source>
          <target state="translated">호출 하 여는 <ph id="ph1">`GetType`</ph> 에서 반환 되는 값에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the second element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">검색 하 여는 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 을 나타내는 개체는 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체를 통해 반환 되는 배열에서 두 번째 요소를 검색 합니다. 해당 <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">다음 예제에서는 배열을 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 부터 2000 1950 (New York, 시카고, 및 로스앤젤레스) 세 미국 도시에 대 한 인구 데이터를 포함 하는 구성 요소 개체입니다.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">다음 데이터를 나열 하는 테이블을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>To display the population in 1950, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">값을 검색 1950의 인구를 표시 하려면는 <ph id="ph1">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> 각 속성이 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item3">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's third component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 세 번째 구성 요소 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's third component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 세 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">종류를 동적으로 결정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph> 두 가지 방법 중 하나에서 구성 요소:</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph> property.</source>
          <target state="translated">호출 하 여는 <ph id="ph1">`GetType`</ph> 에서 반환 되는 값에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the third element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">검색 하 여는 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 을 나타내는 개체는 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체를 세 번째 요소에서 반환 되는 배열에서 검색 해당 <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">다음 예제에서는 배열을 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 부터 2000 1950 (New York, 시카고, 및 로스앤젤레스) 세 미국 도시에 대 한 인구 데이터를 포함 하는 구성 요소 개체입니다.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">다음 데이터를 나열 하는 테이블을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>To display the population in 1960, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">값을 검색 1960의 인구를 표시 하려면는 <ph id="ph1">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph> 각 속성이 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item4">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's fourth component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 네 번째 구성 요소 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's fourth component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 네 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">종류를 동적으로 결정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph> 두 가지 방법 중 하나에서 구성 요소:</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph> property.</source>
          <target state="translated">호출 하 여는 <ph id="ph1">`GetType`</ph> 에서 반환 되는 값에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the fourth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">검색 하 여는 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 을 나타내는 개체는 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체를 통해 반환 되는 배열에서 네 번째 요소를 검색 합니다. 해당 <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">다음 예제에서는 배열을 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 부터 2000 1950 (New York, 시카고, 및 로스앤젤레스) 세 미국 도시에 대 한 인구 데이터를 포함 하는 구성 요소 개체입니다.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">다음 데이터를 나열 하는 테이블을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>To display the population in 1970, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">값을 검색 1970의 인구를 표시 하려면는 <ph id="ph1">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph> 각 속성이 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item5">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's fifth component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 다섯 번째 구성 요소 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's fifth component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 다섯 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">종류를 동적으로 결정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph> 두 가지 방법 중 하나에서 구성 요소:</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph> property.</source>
          <target state="translated">호출 하 여는 <ph id="ph1">`GetType`</ph> 에서 반환 되는 값에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the fifth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">검색 하 여는 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 을 나타내는 개체는 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체를 통해 반환 되는 배열에서 다섯 번째 요소를 검색 합니다. 해당 <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">다음 예제에서는 배열을 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 부터 2000 1950 (New York, 시카고, 및 로스앤젤레스) 세 미국 도시에 대 한 인구 데이터를 포함 하는 구성 요소 개체입니다.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">다음 데이터를 나열 하는 테이블을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>To display the population in 1980, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">값을 검색 1980 년의 인구를 표시 하려면는 <ph id="ph1">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph> 각 속성이 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item6">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's sixth component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 여섯 번째 구성 요소 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's sixth component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 여섯 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">종류를 동적으로 결정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph> 두 가지 방법 중 하나에서 구성 요소:</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph> property.</source>
          <target state="translated">호출 하 여는 <ph id="ph1">`GetType`</ph> 에서 반환 되는 값에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the sixth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">검색 하 여는 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 을 나타내는 개체는 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체를 통해 반환 되는 배열에서 6 번째 요소를 검색 합니다. 해당 <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">다음 예제에서는 배열을 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 부터 2000 1950 (New York, 시카고, 및 로스앤젤레스) 세 미국 도시에 대 한 인구 데이터를 포함 하는 구성 요소 개체입니다.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">다음 데이터를 나열 하는 테이블을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>To display the population in 1990, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">값을 검색 1990의 인구를 표시 하려면는 <ph id="ph1">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph> 각 속성이 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item7">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's seventh component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 일곱 번째 구성 요소 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's seventh component.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 일곱 번째 구성 요소 값입니다.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">종류를 동적으로 결정할 수 있습니다는 <ph id="ph1">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> 두 가지 방법 중 하나에서 구성 요소:</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> property.</source>
          <target state="translated">호출 하 여는 <ph id="ph1">`GetType`</ph> 에서 반환 되는 값에 대 한 메서드는 <ph id="ph2">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> 속성입니다.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the seventh element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">검색 하 여는 <ph id="ph1">&lt;xref:System.Type&gt;</ph> 을 나타내는 개체는 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체를 통해 반환 되는 배열에서 일곱 번째 요소를 검색 합니다. 해당 <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">다음 예제에서는 배열을 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 부터 2000 1950 (New York, 시카고, 및 로스앤젤레스) 세 미국 도시에 대 한 인구 데이터를 포함 하는 구성 요소 개체입니다.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">다음 데이터를 나열 하는 테이블을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>To display the population in 2000, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">값을 검색 2000에서 인구를 표시 하려면는 <ph id="ph1">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> 각 속성이 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">현재 인스턴스와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object that provides custom rules for comparison.</source>
          <target state="translated">비교를 위한 사용자 지정 규칙을 제공하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">지정된 비교자를 사용하여 현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체와 지정된 개체를 비교하고 정렬 순서에서 현재 개체의 위치가 지정된 개체보다 앞인지, 뒤인지 또는 동일한지를 나타내는 정수를 반환합니다.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="other" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">다음 표와 같이 정렬 순서에서 이 인스턴스와 <ph id="ph1">&lt;paramref name="other" /&gt;</ph>의 상대적 위치를 나타내는 부호 있는 정수입니다.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 값</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 설명</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 음의 정수</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 이 인스턴스가 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 앞에 오는 경우</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="other" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 이 인스턴스와 <ph id="ph3">&lt;paramref name="other" /&gt;</ph>의 위치가 정렬 순서에서 같은 경우</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 양의 정수</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 이 인스턴스가 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 다음에 오는 경우</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This member is an explicit interface implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 구현이며,</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This method lets you define customized comparisons of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects.</source>
          <target state="translated">이 메서드를 사용 하면 정의의 사용자 지정 된 비교 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, you can use this method to order <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects based on the value of a specific component.</source>
          <target state="translated">예를 들어이 메서드는 순서를 사용할 수 있습니다 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 특정 구성 요소 값을 기반으로 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection.</source>
          <target state="translated">이 메서드를 직접 호출할 수 있지만 가장 일반적으로 호출한 컬렉션 정렬 포함 하는 메서드 <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> 매개 변수를 컬렉션의 멤버를 정렬 합니다.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, it is called by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">예를 들어에 의해 호출 됩니다는 <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> 메서드 및 <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> 의 메서드는 <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> 를 사용 하 여 인스턴스화된 개체는 <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> 생성자입니다.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> 정렬 작업에서 사용 하기 위해 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">비교의 기본 목적은 두 개체가 같은지 여부를 결정 하는 경우 하지 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> method.</source>
          <target state="translated">두 개체가 같은지 여부를 확인 하려면 호출 된 <ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects that contains population data for three U.S. cities from 1950 to 2000.</source>
          <target state="translated">다음 예제에서는 배열을 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 인구 데이터부터 2000 1950에서 미국 도시 3 개를 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The septuple's first component is the city name.</source>
          <target state="translated">7 중의 첫 번째 구성 요소는 도시 이름입니다.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The remaining five components represent the population at 10-year intervals from 1950 to 2000.</source>
          <target state="translated">나머지 5 개의 구성 요소를 2000 1950에서 10 년 간격 인구를 나타냅니다.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">`PopulationComparer`</ph> class provides an <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementation that allows the array of septuples to be sorted by any one of its components.</source>
          <target state="translated"><ph id="ph1">`PopulationComparer`</ph> 클래스를 제공는 <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> 배열이 있도록 구현 된 뉴욕 구성 요소 중 하나를 정렬할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Two values are provided to the <ph id="ph1">`PopulationComparer`</ph> class in its constructor: The position of the component that defines the sort order, and a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the tuple objects should be sorted in ascending or descending order.</source>
          <target state="translated">두 값에 제공 되는 <ph id="ph1">`PopulationComparer`</ph> 클래스의 생성자에: 정렬 순서를 정의 하는 구성의 위치 및 <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> 튜플 개체를 오름차순 또는 내림차순으로 정렬할지 여부를 나타내는 값입니다.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1960) and displays them, and then sorts them by the sixth component (the population in 1990) and displays them.</source>
          <target state="translated">이 예제에서는 다음 순서로 정렬 되지 않은 배열 요소를 표시, 세 번째 구성 요소 (1960의 인구)를 기준으로 정렬 하 고, 및 다음 여섯 번째 구성 요소 (1990의 인구)를 기준으로 정렬을 표시 하 합니다.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="other" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체가 아닙니다.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The object to compare with this instance.</source>
          <target state="translated">이 인스턴스와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
          <target state="translated">두 개체가 같은지 여부를 평가하는 데 사용할 방법을 정의하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object is equal to a specified object based on a specified comparison method.</source>
          <target state="translated">지정된 비교 메서드를 기반으로 현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체가 지정된 개체와 같은지 여부를 나타내는 값을 반환합니다.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">현재 인스턴스가 지정된 개체와 같으면 <ph id="ph1">&lt;see langword="true" /&gt;</ph>이고, 그렇지 않으면 <ph id="ph2">&lt;see langword="false" /&gt;</ph>입니다.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation is called only if other is not <ph id="ph2">`null`</ph>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph> object whose components are of the same types as the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> 하나도 하는 경우에 구현이 호출 될 <ph id="ph2">`null`</ph>, 캐스팅 (C#) 또는 변환 (Visual Basic)에서는 성공적으로 하나일 수 있습니다는 <ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph> 구성 요소가 현재 인스턴스와 동일한 형식의 개체입니다.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method first passes the <ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> values of the <ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph> objects to be compared to the <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> 메서드가 첫 번째 전달에서 <ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> 값은 <ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph> 비교할 개체는 <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If this method call returns <ph id="ph1">`true`</ph>, the method is called again and passed the <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> values of the two <ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph> objects.</source>
          <target state="translated">이 메서드 호출에서 반환 하는 경우 <ph id="ph1">`true`</ph>, 메서드가 다시 호출 되 고 전달 된 <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> 두 값 <ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph> 개체입니다.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This continues until the method call returns <ph id="ph1">`false`</ph> when it compares a specific pair of <ph id="ph2">`Item`</ph> values, or the two <ph id="ph3">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> values are passed to the method.</source>
          <target state="translated">메서드 호출이 반환 될 때까지이 과정이 계속 <ph id="ph1">`false`</ph> 의 특정 쌍을 비교할 때 <ph id="ph2">`Item`</ph> 값 또는 두 <ph id="ph3">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> 값이 메서드에 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The following example defines a <ph id="ph1">`RateComparer`</ph> class that performs a custom test for equality.</source>
          <target state="translated">다음 예제에서는 정의 <ph id="ph1">`RateComparer`</ph> 같음에 대 한 사용자 지정 테스트를 수행 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If the values that are passed to its <ph id="ph1">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType&gt;</ph> method are of type <ph id="ph2">&lt;xref:System.Single&gt;</ph> or <ph id="ph3">&lt;xref:System.Double&gt;</ph>, the method tests for equality by using only up to three fractional digits.</source>
          <target state="translated">경우에 전달 되는 값의 <ph id="ph1">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType&gt;</ph> 형식의 메서드는 <ph id="ph2">&lt;xref:System.Single&gt;</ph> 또는 <ph id="ph3">&lt;xref:System.Double&gt;</ph>, 최대 3 개의 소수 자릿수를 사용 하 여 같음 테스트 메서드가 있습니다.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Otherwise, it simply calls the <ph id="ph1">`x`</ph> parameter's <ph id="ph2">`Equals`</ph> method.</source>
          <target state="translated">단순히 호출는 <ph id="ph1">`x`</ph> 매개 변수의 <ph id="ph2">`Equals`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The example uses this <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> implementation to determine whether four <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> objects that contain data on the rate of population change between 1950 and 2000 are equal.</source>
          <target state="translated">이 예제에서는 <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> 4 개의 여부를 확인 하려면 구현 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 1950에서 2000 사이의 population 변경의 속도에 대 한 데이터가 포함 된 개체가 같은지 합니다.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>An object whose <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> 메서드를 사용하여 현재 <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 해시 코드를 계산하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object by using a specified computation method.</source>
          <target state="translated">지정된 계산 메서드를 사용하여 현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체에 대한 해시 코드를 계산합니다.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">부호 있는 32비트 정수 해시 코드입니다.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>the method simply wraps a call to the comparer object's <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">메서드는 비교자 개체에 대 한 호출을 단순히 래핑합니다 <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> 구현 합니다.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects that are considered to be equal.</source>
          <target state="translated">두에 대 한 해시 코드를 계산 하는 데 사용 되는 알고리즘 같은 해시 코드를 반환 해야 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 를 동일한 것으로 간주 되는 개체입니다.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">현재 인스턴스와 비교할 개체입니다.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">현재 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체를 지정된 개체와 비교하고 현재 개체가 정렬 순서에 지정된 개체보다 이전인지, 이후인지 또는 같은 위치인지를 나타내는 정수를 반환합니다.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">다음 표와 같이 정렬 순서에서 이 인스턴스와 <ph id="ph1">&lt;paramref name="obj" /&gt;</ph>의 상대적 위치를 나타내는 부호 있는 정수입니다.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 값</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 설명</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 음의 정수</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 이 인스턴스가 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> 앞에 오는 경우</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 0</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 이 인스턴스와 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>의 위치가 정렬 순서에서 같은 경우</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 양의 정수</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 이 인스턴스가 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> 다음에 오는 경우</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">이 멤버는 명시적 인터페이스 멤버 구현이며,</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 인스턴스가 <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> 인터페이스로 캐스팅된 경우에만 사용할 수 있습니다.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> class.</source>
          <target state="translated">이 메서드는 제공 된 <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> 에 대 한 구현을 <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, to order the members of a collection.</source>
          <target state="translated">메서드를 직접 호출할 수 있지만 가장 일반적으로 컬렉션 정렬의 경우 기본 오버 로드에 의해 호출 됩니다 메서드 같은 <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> 및 <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, 컬렉션의 멤버 정렬 합니다.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23IComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23IComparable%23CompareTo%2A&gt;</ph> 정렬 작업에서 사용 하기 위해 메서드를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">비교의 기본 목적은 두 개체가 같은지 여부를 결정 하는 경우 하지 사용 해야 합니다.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%607.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">두 개체가 같은지 여부를 확인 하려면 호출 된 <ph id="ph1">&lt;xref:System.Tuple%607.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>This method uses the default object comparer to compare each component.</source>
          <target state="translated">이 메서드는 각 구성 요소를 비교할 기본 개체 비교 연산자를 사용 합니다.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects that contain population data for three cities in the United States from 1950 to 2000.</source>
          <target state="translated">다음 예제에서는 배열을 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 3 개의 도시를 2000 1950에서 미국에 대 한 인구 데이터를 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The seven components consist of the city name followed by the city's population at 10-year intervals from 1950 to 2000.</source>
          <target state="translated">7 개의 구성 요소는 도시 이름과 해당 도시의 인구 10 년 간격에 따라 1950에서 2000으로 구성 됩니다.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The example displays the components of each tuple in the array in unsorted order, sorts the array, and then calls the <ph id="ph1">&lt;xref:System.Tuple%607.ToString%2A&gt;</ph> method to display each tuple in sorted order.</source>
          <target state="translated">이 예제에서는 정렬 되지 않은 순서로 배열에 있는 각 튜플의 구성 요소를 표시 하 여 배열에 정렬 하 고 다음 호출에서 <ph id="ph1">&lt;xref:System.Tuple%607.ToString%2A&gt;</ph> 정렬 된 순서 대로의 각 튜플에 표시 하는 메서드.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The output shows that the array has been sorted by name, which is the first component.</source>
          <target state="translated">출력 배열에는 첫 번째 구성 요소 이름으로 정렬 된 것을 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%607.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">이 예제에서는 직접 호출 하지 않는 참고는 <ph id="ph1">&lt;xref:System.Tuple%607.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> method for each element in the array.</source>
          <target state="translated">이 메서드를 암시적으로 호출 된 <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> 메서드는 배열의 각 요소에 대 한 합니다.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph>이 <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체가 아닙니다.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The index of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">지정한 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 요소의 인덱스입니다.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> can range from 0 to 6.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept>의 범위는 0~6일 수 있습니다.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>Gets the value of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">지정한 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 요소의 값을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element at the specified position.</source>
          <target state="translated">지정한 위치에 있는 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 요소의 값입니다.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> 속성은 명시적 인터페이스 구현.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">를 호출 하려면 캐스팅 하거나 변환 해야 합니다는 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 개체는 <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> 인터페이스 개체입니다.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0 or greater than 6.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph>가 0보다 작거나 6보다 큽니다.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
          <source>Gets the number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>의 요소 수를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
          <source>7, the number of elements in a <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 요소 수는 7입니다.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> 속성은 명시적 인터페이스 구현.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">를 호출 하려면 캐스팅 하거나 변환 해야 합니다는 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 개체는 <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> 인터페이스 개체입니다.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.ToString">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> instance.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 인스턴스의 값을 나타내는 문자열을 반환합니다.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.ToString">
          <source>The string representation of this <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated">이 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 개체의 문자열 표현입니다.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.ToString">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6, Item7`</ph>), where <bpt id="p5">*</bpt>Item1<ept id="p5">*</ept>, <bpt id="p6">*</bpt>Item2<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item3<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item4<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item5<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item6<ept id="p10">*</ept>, and <bpt id="p11">*</bpt>Item7<ept id="p11">*</ept> represent the values of the <ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, and <ph id="ph8">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> properties, respectively.</source>
          <target state="translated">이 메서드에서 반환 된 문자열은 형식 (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6, Item7`</ph>) 여기서 <bpt id="p5">*</bpt>Item1<ept id="p5">*</ept>, <bpt id="p6">*</bpt>Item2<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item3<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item4<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item5<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item6<ept id="p10">*</ept>, 및 <bpt id="p11">*</bpt>Item7<ept id="p11">*</ept> 의 값을 나타냅니다는 <ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, 및 <ph id="ph8">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> 속성을 각각.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.ToString">
          <source>If any of the property values is <ph id="ph1">`null`</ph>, it is represented as <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">속성 값 중 하나라도 <ph id="ph1">`null`</ph>로 표시 됩니다 <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.ToString">
          <source>The following example defines a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object that contains population data for New York City for each census from 1950 through 2000.</source>
          <target state="translated">다음 예제에서는 정의 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 뉴욕시에 대 한 각 1950 2000 년 인구 조사에 대 한 인구 데이터를 포함 하는 개체입니다.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.ToString">
          <source>The components of the sextuple are then displayed by a call to the <ph id="ph1">&lt;xref:System.Tuple%607.ToString%2A&gt;</ph> method.</source>
          <target state="translated">6 중의 구성 요소에 대 한 호출으로 표시 됩니다는 <ph id="ph1">&lt;xref:System.Tuple%607.ToString%2A&gt;</ph> 메서드.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>