<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParamArrayAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5bbdd51cde6603fd337db607533c7be2ebff268a2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbdd51cde6603fd337db607533c7be2ebff268a2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ParamArrayAttribute">
          <source>Indicates that a method will allow a variable number of arguments in its invocation.</source>
          <target state="translated">메서드가 해당 호출에 가변 개수의 인수를 사용할 수 있음을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.ParamArrayAttribute">
          <source>This class cannot be inherited.</source>
          <target state="translated">이 클래스는 상속될 수 없습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The <ph id="ph1">&lt;xref:System.ParamArrayAttribute&gt;</ph> indicates that a method parameter is a parameter array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ParamArrayAttribute&gt;</ph> 메서드 매개 변수는 매개 변수가 배열 임을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>A parameter array allows the specification of an unknown number of arguments.</source>
          <target state="translated">매개 변수 배열 인수 수 알된 수의 지정을 허용 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>A parameter array must be the last parameter in a formal parameter list, and it must be a single-dimension array.</source>
          <target state="translated">매개 변수 배열은 정식 매개 변수 목록에서 마지막 매개 변수 여야 합니다. 및 1 차원 배열 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>When the method is called, a parameter array permits arguments to a method to be specified in either of two ways:</source>
          <target state="translated">메서드를 호출할 때 매개 변수 배열을 사용 하 여 두 가지 방법 중 하나로 지정 하는 메서드에 인수:</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>As a single expression of a type that is implicitly convertible to the parameter array type.</source>
          <target state="translated">매개 변수 배열 형식으로 암시적으로 변환할 수 있는 형식의 단일 식입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The parameter array functions as a value parameter.</source>
          <target state="translated">값 매개 변수로 매개 변수 배열 함수입니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>As zero or more arguments, where each argument is an expression of a type that is implictly convertible to the type of the parameter array element.</source>
          <target state="translated">0 개 이상의 인수를 각 인수는 매개 변수 배열 요소의 형식으로 암시적 변환이 가능한 형식의 식입니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The example in the next section illustrates both calling conventions.</source>
          <target state="translated">다음 섹션의 예제에는 호출 규칙을 모두 보여 줍니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>Typically, the <ph id="ph1">&lt;xref:System.ParamArrayAttribute&gt;</ph> is not used directly in code.</source>
          <target state="translated">일반적으로 <ph id="ph1">&lt;xref:System.ParamArrayAttribute&gt;</ph> 코드에서 직접 사용 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>Instead, individual language keywords, such as <ph id="ph1">`ParamArray`</ph> in Visual Basic and <ph id="ph2">`params`</ph> in C#, are used as wrappers for the <ph id="ph3">&lt;xref:System.ParamArrayAttribute&gt;</ph> class.</source>
          <target state="translated">대신, 개별 언어 키워드와 같은 <ph id="ph1">`ParamArray`</ph> Visual basic에서 및 <ph id="ph2">`params`</ph> C#에 대 한 래퍼도 사용 되는 <ph id="ph3">&lt;xref:System.ParamArrayAttribute&gt;</ph> 클래스입니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>Some languages, such as C#, may even require the use of the language keyword and prohibit the use of <ph id="ph1">&lt;xref:System.ParamArrayAttribute&gt;</ph>.</source>
          <target state="translated">C#과 같은 일부 언어에서는 수도 언어 키워드를 사용 해야 하 고의 사용을 금지 <ph id="ph1">&lt;xref:System.ParamArrayAttribute&gt;</ph>합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>During overload resolution, when compilers that support parameter arrays encounter a method overload that does not exist but has one fewer parameter than an overload that includes a parameter array, they will replace the method with the overload that includes the parameter array.</source>
          <target state="translated">오버 로드 확인 하는 동안 컴파일러 매개 변수 배열에 매개 변수 배열을 포함 하는 오버 로드 보다 더 적은 1 개의 매개 변수가 있지만 존재 하지 않는 메서드 오버 로드를 발생은 대체 하 게 메서드를 포함 하는 오버 로드를 가진는 매개 변수 배열입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>For example, a call to the <ph id="ph1">`String.Split()`</ph> instance method (which does not exist in the <ph id="ph2">&lt;xref:System.String&gt;</ph> class) is resolved as a call to the <ph id="ph3">&lt;xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">에 대 한 호출 예를 들어는 <ph id="ph1">`String.Split()`</ph> 인스턴스 메서드 (에 존재 하지 않는 <ph id="ph2">&lt;xref:System.String&gt;</ph> 클래스)에 대 한 호출으로 확인 됩니다는 <ph id="ph3">&lt;xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType&gt;</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The compiler will also pass an empty array of the required type to the method.</source>
          <target state="translated">컴파일러는 필요한 형식의 빈 배열을 메서드에 전달할 수도 됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>This means that the method must always be prepared to handle an array whose length is zero when it processes the elements in the parameter array.</source>
          <target state="translated">즉, 길이가 0 인 매개 변수 배열에서 요소를 처리할 때 배열을 처리 하는 메서드를 준비 항상 이어야 합니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The example provides an illustration.</source>
          <target state="translated">예제에서는 그림을 제공합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>For more information about using attributes, see <bpt id="p1">[</bpt>Attributes<ept id="p1">](~/docs/standard/attributes/index.md)</ept>.</source>
          <target state="translated">특성을 사용 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>특성<ept id="p1">](~/docs/standard/attributes/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The following example defines a <ph id="ph1">`Temperature`</ph> class that includes a <ph id="ph2">`Display`</ph> method, which is intended to display one or more formatted temperature values.</source>
          <target state="translated">다음 예제에서는 정의 <ph id="ph1">`Temperature`</ph> 클래스를 포함 하는 <ph id="ph2">`Display`</ph> 메서드를 하나 이상의 형식이 지정 된 온도 값을 표시 합니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The method has a single parameter, <ph id="ph1">`formats`</ph>, which is defined as a parameter array.</source>
          <target state="translated">메서드에 단일 매개 변수가 <ph id="ph1">`formats`</ph>, 매개 변수 배열 정의 됩니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>The following example illustrates three different calls to the <ph id="ph1">`Temperature.Display`</ph> method.</source>
          <target state="translated">다음 예제에서는 세 가지 서로 다른 호출에는 <ph id="ph1">`Temperature.Display`</ph> 메서드.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>In the first, the method is passed an array of format strings.</source>
          <target state="translated">첫 번째 메서드는 형식 문자열의 배열을 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>In the second, the method is passed four individual format strings as arguments.</source>
          <target state="translated">두 번째 페이지인 메서드 4 개의 개별 형식 문자열 인수로 전달 됩니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>In the third, the method is called with no arguments.</source>
          <target state="translated">세 번째 메서드는 인수 없이 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ParamArrayAttribute">
          <source>As the output from the example illustrates, the Visual Basic and C# compilers translate this into a call to the <ph id="ph1">`Display`</ph> method with an empty string array.</source>
          <target state="translated">예제의 출력에서 알 수 있듯이, Visual Basic 및 C# 컴파일러로 변환에 대 한 호출에서 <ph id="ph1">`Display`</ph> 빈 문자열 배열 사용 하 여 메서드.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ParamArrayAttribute.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ParamArrayAttribute" /&gt;</ph> class with default properties.</source>
          <target state="translated">기본 속성을 사용하여 <ph id="ph1">&lt;see cref="T:System.ParamArrayAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>