<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ResolveEventArgs.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53cb36bd1dd61eda00843f278887046151ea3c44b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cb36bd1dd61eda00843f278887046151ea3c44b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ResolveEventArgs">
          <source>Provides data for loader resolution events, such as the <ph id="ph1">&lt;see cref="E:System.AppDomain.TypeResolve" /&gt;</ph>, <ph id="ph2">&lt;see cref="E:System.AppDomain.ResourceResolve" /&gt;</ph>, <ph id="ph3">&lt;see cref="E:System.AppDomain.ReflectionOnlyAssemblyResolve" /&gt;</ph>, and <ph id="ph4">&lt;see cref="E:System.AppDomain.AssemblyResolve" /&gt;</ph> events.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="E:System.AppDomain.TypeResolve" /&gt;</ph>, <ph id="ph2">&lt;see cref="E:System.AppDomain.ResourceResolve" /&gt;</ph>, <ph id="ph3">&lt;see cref="E:System.AppDomain.ReflectionOnlyAssemblyResolve" /&gt;</ph>, <ph id="ph4">&lt;see cref="E:System.AppDomain.AssemblyResolve" /&gt;</ph> 이벤트 등의 로더 확인 이벤트에 대한 데이터를 제공합니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ResolveEventArgs">
          <source>When the loader cannot resolve an assembly reference and a handler has been provided for the appropriate loader resolution event, the event is raised and the <ph id="ph1">&lt;xref:System.ResolveEventArgs&gt;</ph> contains information about the item to be resolved.</source>
          <target state="translated">로더는 어셈블리 참조를 확인할 수 없는 한 처리기가 이벤트는 해당 로더 해상도 이벤트에 대 한 제공 되는 시점과 및 <ph id="ph1">&lt;xref:System.ResolveEventArgs&gt;</ph> 확인할 항목에 대 한 정보를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ResolveEventArgs">
          <source>The <ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph> property contains the name of the item to be resolved.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph> 속성 확인할 항목의 이름을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ResolveEventArgs">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property contains the assembly that requested an assembly that can provide the named item.</source>
          <target state="translated">부터는 <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> 속성 명명된 된 항목을 제공할 수 있는 어셈블리를 요청 하는 어셈블리를 포함 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ResolveEventArgs">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property.</source>
          <target state="translated">자세한 내용은 <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> 속성을 참조하세요.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="T:System.ResolveEventArgs">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ResolveEventArgs" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ResolveEventArgs" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ResolveEventArgs.#ctor(System.String)">
          <source>The name of an item to resolve.</source>
          <target state="translated">확인할 항목의 이름입니다.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.ResolveEventArgs.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ResolveEventArgs" /&gt;</ph> class, specifying the name of the item to resolve.</source>
          <target state="translated">확인할 항목의 이름을 지정하여 <ph id="ph1">&lt;see cref="T:System.ResolveEventArgs" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ResolveEventArgs.#ctor(System.String)">
          <source>This constructor is typically called only by the common language runtime.</source>
          <target state="translated">일반적으로이 생성자는 공용 언어 런타임에 의해만 호출 됩니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)">
          <source>The name of an item to resolve.</source>
          <target state="translated">확인할 항목의 이름입니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)">
          <source>The assembly whose dependency is being resolved.</source>
          <target state="translated">종속성을 확인할 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ResolveEventArgs" /&gt;</ph> class, specifying the name of the item to resolve and the assembly whose dependency is being resolved.</source>
          <target state="translated">확인할 항목과 종속성을 확인할 어셈블리의 이름을 지정하여 <ph id="ph1">&lt;see cref="T:System.ResolveEventArgs" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="P:System.ResolveEventArgs.Name">
          <source>Gets the name of the item to resolve.</source>
          <target state="translated">확인할 항목의 이름을 가져옵니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.Name">
          <source>The name of the item to resolve.</source>
          <target state="translated">확인할 항목의 이름입니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.Name">
          <source>For the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> event, <ph id="ph2">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph> is the assembly name before policy is applied.</source>
          <target state="translated">에 대 한는 <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve&gt;</ph> 이벤트 <ph id="ph2">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph> 전에 정책이 적용 되는 어셈블리 이름입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>Gets the assembly whose dependency is being resolved.</source>
          <target state="translated">종속성을 확인할 어셈블리를 가져옵니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>The assembly that requested the item specified by the <ph id="ph1">&lt;see cref="P:System.ResolveEventArgs.Name" /&gt;</ph> property.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.ResolveEventArgs.Name" /&gt;</ph> 속성에 의해 지정되는 항목을 요청하는 어셈블리입니다.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>The assembly that is returned by this property is an assembly that was unable to resolve the item specified by the <ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph> property, because the item did not exist in that assembly, in any of its loaded dependencies, or in any dependencies the loader could find through probing.</source>
          <target state="translated">이 속성에서 반환 되는 어셈블리는에 지정 된 항목을 확인할 수 없었던 있는 어셈블리는 <ph id="ph1">&lt;xref:System.ResolveEventArgs.Name%2A&gt;</ph> 속성 항목 해당 어셈블리에 존재 하지 않기 때문에 로드 된 중 하나 또는 모든 종속성에서 로더를 찾을 수 통해 검색 합니다.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>For example, suppose the current assembly uses the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=nameWithType&gt;</ph> method to load assembly A from a directory outside the probing path, in order to use class CA.</source>
          <target state="translated">예를 들어 현재 어셈블리 사용 하 여는 <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=nameWithType&gt;</ph> 메서드를 클래스 CA를 사용 하려면 검색 경로 외부의 디렉터리에서 어셈블리 A를 로드 합니다.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>Suppose further that class CA uses class CB, in assembly B, and that assembly A has a compile-time reference to assembly B, also located outside the probing path.</source>
          <target state="translated">추가 클래스 CA 클래스 CB에서는 가정 어셈블리에서 B, 그리고 어셈블리 A에 대 한 컴파일 시간 참조 어셈블리 B에도 외부에 있는 검색 경로입니다.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>When the current assembly attempts to instantiate CA, the loader attempts to resolve the reference to assembly B. However, because assembly A was loaded by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=nameWithType&gt;</ph> method, the loader cannot resolve the dependency.</source>
          <target state="translated">로더 2. 어셈블리에 대 한 참조를 확인 하려고 시도 현재 어셈블리 CA를 인스턴스화할 때 그러나 어셈블리 A가 사용 하 여 로드 때문에 <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=nameWithType&gt;</ph> 메서드를 로더는 종속성을 확인할 수 없습니다.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>If there is a handler for the <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType&gt;</ph> event, the event is raised, and the <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property of the resulting <ph id="ph3">&lt;xref:System.ResolveEventArgs&gt;</ph> object contains assembly A, because assembly A is the assembly that is missing a dependency.</source>
          <target state="translated">에 대 한 처리기가 있으면는 <ph id="ph1">&lt;xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType&gt;</ph> 이벤트를 이벤트 발생 및 <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> 결과 속성 <ph id="ph3">&lt;xref:System.ResolveEventArgs&gt;</ph> 어셈블리 A를 포함 하는 개체, 어셈블리 A 어셈블리 이므로 하는 종속성이 없는 합니다.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>The semantics of the <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property vary, depending on how the requesting assembly was loaded:</source>
          <target state="translated">의미 체계는 <ph id="ph1">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> 속성 요청 하는 어셈블리가 로드 된 방식에 따라 달라 집니다.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>Load context: The value of the property might be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">로드 컨텍스트: 속성의 값 <ph id="ph1">`null`</ph>합니다.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>The load context is load-order independent, and the identity of the requesting assembly is not necessarily meaningful.</source>
          <target state="translated">로드 컨텍스트에 로드 순서 독립적 이며 요청 id 어셈블리는 반드시 의미가 없습니다.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>A non-null example occurs when the <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> method is called and the specified type is not known to the requesting assembly or any of its dependencies.</source>
          <target state="translated">Null이 아닌 예 발생 때는 <ph id="ph1">&lt;xref:System.Type.GetType%2A?displayProperty=nameWithType&gt;</ph> 메서드가 호출 되 고 지정된 된 형식을 요청 어셈블리 또는 해당 종속성을 알 수 없습니다.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>Load-from context: The property can be used as a probing hint, but the event handler should not get more than one request for a given assembly name.</source>
          <target state="translated">로드 컨텍스트: 속성은 검색 힌트로 사용할 수 있지만 이벤트 처리기는 지정 된 어셈블리 이름에 대 한 개 이상의 요청 받을 수 없습니다.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ResolveEventArgs.RequestingAssembly">
          <source>No context (that is, the requesting assembly was loaded by using the <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=nameWithType&gt;</ph> method, or as a byte stream, or in mixed mode): The handler can use the <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> property to load different implementations of the same assembly based on the identity of the requesting assembly.</source>
          <target state="translated">컨텍스트가 없습니다. (사용 하 여 요청 하는 어셈블리가 로드 즉,는 <ph id="ph1">&lt;xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=nameWithType&gt;</ph> 메서드를 바이트 스트림으로 또는 혼합된 모드에서): 처리기 צ ְ ײ는 <ph id="ph2">&lt;xref:System.ResolveEventArgs.RequestingAssembly%2A&gt;</ph> 동일한 어셈블리의 다른 구현을 로드할 속성의 id에 따라는 어셈블리를 요청합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>