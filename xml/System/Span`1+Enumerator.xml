<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="469ed8e0801c9371e32db2c9dbf6d628854d8825" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ko-KR" />
    <Meta Name="ms.lasthandoff" Value="06/13/2018" />
    <Meta Name="ms.locfileid" Value="35417123" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="177fa-101">
        <see cref="T:System.Span`1" />의 요소에 대한 열거자를 제공합니다.</span>
      <span class="sxs-lookup">
        <span data-stu-id="177fa-101">Provides an enumerator for the elements of a <see cref="T:System.Span`1" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

<span data-ttu-id="177fa-102">C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) C# 언어의 및 [각각에 대해... 다음](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) Visual basic에서 구문의 열거자의 복잡성을 숨깁니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-102">The C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) of the C# language and the [For Each...Next](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) construct in Visual Basic hides the complexity of enumerators.</span></span> <span data-ttu-id="177fa-103">사용 하 여 열거자를 직접 조작 하는 대신 `foreach` 또는 `For Each...Next` 것이 좋습니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-103">Instead of directly manipulating the enumerator, using `foreach` or `For Each...Next` is recommended.</span></span> 

<span data-ttu-id="177fa-104">열거자의 첫 번째 요소 앞에 배치 됩니다 처음에 <xref:System.Span%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-104">Initially, the enumerator is positioned before the first element in the <xref:System.Span%601>.</span></span> <span data-ttu-id="177fa-105">이 위치에서 <xref:System.Span%601.Enumerator.Current>는 정의되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-105">At this position, <xref:System.Span%601.Enumerator.Current> is undefined.</span></span> <span data-ttu-id="177fa-106">호출 해야 <xref:System.Span%601.Enumerator.MoveNext%2A> 하 여 열거자에서 첫 번째 항목으로는 <xref:System.Span%601> 의 값을 읽기 전에 <xref:System.Span%601.Enumerator.Current>합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-106">You must call <xref:System.Span%601.Enumerator.MoveNext%2A> to advance the enumerator to the first item in the <xref:System.Span%601> before reading the value of <xref:System.Span%601.Enumerator.Current>.</span></span>

<span data-ttu-id="177fa-107"><xref:System.Span%601.Enumerator.Current> 될 때까지 같은 값을 반환 <xref:System.Span%601.Enumerator.MoveNext%2A> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-107"><xref:System.Span%601.Enumerator.Current> returns the same value until <xref:System.Span%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="177fa-108"><xref:System.Span%601.Enumerator.MoveNext%2A> 설정 <xref:System.Span%601.Enumerator.Current> 에서 다음 항목으로는 <xref:System.Span%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-108"><xref:System.Span%601.Enumerator.MoveNext%2A> sets <xref:System.Span%601.Enumerator.Current> to the next item in the <xref:System.Span%601>.</span></span>

<span data-ttu-id="177fa-109">경우 <xref:System.Span%601.Enumerator.MoveNext%2A> 의 끝을 통과 <xref:System.Span%601>, <xref:System.Span%601.Enumerator.MoveNext%2A> 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-109">If <xref:System.Span%601.Enumerator.MoveNext%2A> passes the end of the <xref:System.Span%601>, <xref:System.Span%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="177fa-110">열거자가이 상태를 다시 호출 하면에 경우 <xref:System.Span%601.Enumerator.MoveNext%2A> 반환할 수도 `false` 및 <xref:System.Span%601.Enumerator.Current> 정의 되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-110">When the enumerator is at this state, subsequent calls to <xref:System.Span%601.Enumerator.MoveNext%2A> also return `false` and <xref:System.Span%601.Enumerator.Current> is undefined.</span></span> <span data-ttu-id="177fa-111">설정할 수 없습니다. <xref:System.Span%601.Enumerator.Current> 첫 번째 항목에 <xref:System.Span%601> 다시 새 열거자 인스턴스를 대신 만들어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-111">You cannot set <xref:System.Span%601.Enumerator.Current> to the first item in the <xref:System.Span%601> again; you must create a new enumerator instance instead.</span></span> 

<span data-ttu-id="177fa-112">열거자에 대 한 배타적 액세스 권한이지 않습니다는 <xref:System.Span%601>합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-112">The enumerator does not have exclusive access to the <xref:System.Span%601>.</span></span> <span data-ttu-id="177fa-113">또한 범위 기반으로 하는 기본 데이터를 수정할 수도 있습니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-113">In addition, the underlying data on which the span is based can also be modified.</span></span> <span data-ttu-id="177fa-114">따라서 범위 전체를 열거 하은 기본적으로 스레드로부터 안전한 프로시저가 아닙니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-114">Therefore, enumerating through a span is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="177fa-115">을 열거 하는 동안 스레드로부터 안전을 보장 하려면 사용자 지정 동기화를 구현 해야 합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-115">To guarantee thread safety during enumeration, you must implement your own synchronization.</span></span> <span data-ttu-id="177fa-116">예를 들어 다음 코드는 경합 상태를 있습니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-116">For example, the following code has a race condition.</span></span> <span data-ttu-id="177fa-117">전에 범위를 열거할 수는 보장 하지 않습니다는 `ClearContents` 메서드가 실행 합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-117">It does not ensure that the span will be enumerated before the `ClearContents` method executes.</span></span> <span data-ttu-id="177fa-118">결과적으로, 기본 배열 범위의 열거 하는 동안 지워집니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-118">As a result, the underlying array is cleared during enumeration of the span:</span></span>

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

<span data-ttu-id="177fa-119">수정 된 버전으로 범위를 열거 하기 전에 배열에 대 한 액세스를 동기화 하는 경우는 `EnumerateSpan` 메서드는 다음 예에서 수행 된 `ClearContents` 메서드 열거 하는 동안 내부 범위 데이터를 수정 하지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-119">If you synchronize access to the array before enumerating the span, as the revised version of the `EnumerateSpan` method does in the following example, the `ClearContents` method doesn't modify underlying span data during enumeration.</span></span> <span data-ttu-id="177fa-120">참고가 예제에서는 범위의 기반이 되는 내부 배열을 잠급니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-120">Note that the example locks the underlying array on which the span is based.</span></span>  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

<span data-ttu-id="177fa-121">.NET, 일부 다른 열거자 구조와는 달리는 <xref:System.Span%601.Enumerator>:</span><span class="sxs-lookup"><span data-stu-id="177fa-121">Unlike some other enumerator structures in .NET, the <xref:System.Span%601.Enumerator>:</span></span>

- <span data-ttu-id="177fa-122">구현 하지 않습니다는 <xref:System.Collections.IEnumerator> 또는 <xref:System.Collections.Generic.IEnumerator%601> 인터페이스입니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-122">Does not implement the <xref:System.Collections.IEnumerator> or <xref:System.Collections.Generic.IEnumerator%601> interface.</span></span> <span data-ttu-id="177fa-123">때문에 이것이 <xref:System.Span%601.Enumerator> 는 [ref 구조체](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type)합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-123">This is because <xref:System.Span%601.Enumerator> is a [ref struct](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).</span></span>

- <span data-ttu-id="177fa-124">포함 되지 않습니다는 `Reset` 메서드 범위에서 첫 번째 요소 앞의 초기 위치에 열거자를 설정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-124">Does not include a `Reset` method, which can set the enumerator to its initial position before the first element in the span.</span></span> <span data-ttu-id="177fa-125">(의 <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> 대부분 구현자 예외를 throw 하거나 구현이 없는 제공 하지만 인터페이스의 일부로 구현 해야 합니다.)</span><span class="sxs-lookup"><span data-stu-id="177fa-125">(The <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> method must be implemented as part of the interface, but most implementors either throw an exception or provide no implementation.)</span></span> 
 
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="177fa-126">열거자의 현재 위치에 있는 항목에 대한 참조를 가져옵니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="177fa-126">Gets a reference to the item at the current position of the enumerator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="177fa-127">
            <see cref="T:System.Span`1" />에서 열거자의 현재 위치에 있는 요소입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="177fa-127">The element in the <see cref="T:System.Span`1" /> at the current position of the enumerator.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="177fa-128">`Current` 다음 조건 중 하나에서 정의 되지 않았습니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-128">`Current` is undefined under either of the following conditions:</span></span> 

- <span data-ttu-id="177fa-129">열거자를 만든 후에 즉시 열거자 범위에서 첫 번째 요소 앞에 배치 됩니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-129">Immediately after the enumerator is created, the enumerator is positioned before the first element in the span.</span></span> <span data-ttu-id="177fa-130"><xref:System.Span%601.Enumerator.MoveNext%2A> 호출 하 여 열거자를 범위의 첫 번째 요소 값을 읽기 전에 `Current`합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-130"><xref:System.Span%601.Enumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the span before reading the value of `Current`.</span></span>

- <span data-ttu-id="177fa-131">마지막으로 호출한 <xref:System.Span%601.Enumerator.MoveNext%2A> 반환 `false`, 범위 끝 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-131">The last call to <xref:System.Span%601.Enumerator.MoveNext%2A> returned `false`, which indicates the end of the span.</span></span> 

<span data-ttu-id="177fa-132">`Current` 될 때까지 같은 값을 반환 <xref:System.Span%601.Enumerator.MoveNext%2A> 호출 됩니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-132">`Current` returns the same value until <xref:System.Span%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="177fa-133"><xref:System.Span%601.Enumerator.MoveNext%2A> 설정 `Current` 범위에서 다음 항목으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-133"><xref:System.Span%601.Enumerator.MoveNext%2A> sets `Current` to the next item in the span.</span></span> 

      ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="177fa-134">열거자를 <see cref="System.Span`1" />의 다음 항목으로 이동합니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="177fa-134">Advances the enumerator to the next item of the <see cref="System.Span`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="177fa-135">열거자가 성공적으로 다음 항목으로 이동한 경우 `true`이며, 범위의 끝을 지난 경우`false`입니다.</span>
          <span class="sxs-lookup">
            <span data-stu-id="177fa-135">`true` if the enumerator successfully advanced to the next item; `false` if the end of the span has been passed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="177fa-136">열거자를 만든 후에 범위에 대 한 첫 번째 호출은 첫 번째 요소 앞 배치 `MoveNext` 열거자 범위에서 첫 번째 항목으로 이동 합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-136">After an enumerator is created, it is positioned before the first element in the span, and the first call to `MoveNext` advances the enumerator to the first item in the span.</span></span> 

<span data-ttu-id="177fa-137">경우 `MoveNext` 는 범위의 끝을 통과 `MoveNext` 반환 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-137">If `MoveNext` passes the end of the span, `MoveNext` returns `false`.</span></span> <span data-ttu-id="177fa-138">열거자가이 상태를 다시 호출 하면에 경우 `MoveNext` 반환할 수도 `false`합니다.</span><span class="sxs-lookup"><span data-stu-id="177fa-138">When the enumerator is at this state, subsequent calls to `MoveNext` also return `false`.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>