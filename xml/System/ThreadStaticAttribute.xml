<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadStaticAttribute.xml" source-language="en-US" target-language="ko-KR">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac507d61cca1964f76b932d1ee8a032f6d54ae50db7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">07d61cca1964f76b932d1ee8a032f6d54ae50db7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ThreadStaticAttribute">
          <source>Indicates that the value of a static field is unique for each thread.</source>
          <target state="translated">정적 필드의 값이 각 스레드에 대해 고유함을 나타냅니다.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>A <ph id="ph1">`static`</ph> field marked with <ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph> is not shared between threads.</source>
          <target state="translated">A <ph id="ph1">`static`</ph> 로 표시 된 필드 <ph id="ph2">&lt;xref:System.ThreadStaticAttribute&gt;</ph> 스레드 간에 공유 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Each executing thread has a separate instance of the field, and independently sets and gets values for that field.</source>
          <target state="translated">각 실행 되는 스레드는 필드의 개별 인스턴스가 독립적으로 설정 하 고이 해당 필드에 대 한 값을 가져옵니다 만듭니다.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>If the field is accessed on a different thread, it will contain a different value.</source>
          <target state="translated">필드는 다른 스레드에서 액세스 하는 경우 다른 값을 포함 합니다.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Note that in addition to applying the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute to a field, you must also define it as a <ph id="ph2">`static`</ph> field (in C#) or a <ph id="ph3">`Shared`</ph> field (in Visual Basic).</source>
          <target state="translated">적용 하는 것 외에도 사항에 유의 <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> 특성 필드에도 정의 해야로 <ph id="ph2">`static`</ph> 필드 (C#) 또는 <ph id="ph3">`Shared`</ph> (Visual Basic)의 필드입니다.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Do not specify initial values for fields marked with <ph id="ph1">`ThreadStaticAttribute`</ph>, because such initialization occurs only once, when the class constructor executes, and therefore affects only one thread.</source>
          <target state="translated">로 표시 된 필드에 대 한 초기 값을 지정 하지 않으면 <ph id="ph1">`ThreadStaticAttribute`</ph>이므로 이러한 초기화 한 번만 클래스 생성자는 실행 되 고 하나의 스레드만 영향을 때 발생 합니다.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>If you do not specify an initial value, you can rely on the field being initialized to its default value if it is a value type, or to <ph id="ph1">`null`</ph> if it is a reference type.</source>
          <target state="translated">초기 값을 지정 하지 않으면 값 형식인 또는를 기본값으로 초기화 되는 필드에 사용할 수 있습니다 <ph id="ph1">`null`</ph> 참조 형식인 경우.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Use this attribute as it is, and do not derive from it.</source>
          <target state="translated">이 특성을 사용 하 고 여기에서 파생 되지 않습니다.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>For more information about using attributes, see <bpt id="p1">[</bpt>Attributes<ept id="p1">](~/docs/standard/attributes/index.md)</ept>.</source>
          <target state="translated">특성을 사용 하는 방법에 대 한 자세한 내용은 참조 <bpt id="p1">[</bpt>특성<ept id="p1">](~/docs/standard/attributes/index.md)</ept>합니다.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>The following example instantiates a random number generator, creates ten threads in addition to the main thread, and then generates two million random numbers in each thread.</source>
          <target state="translated">다음 예제에서는 난수 생성기를 인스턴스화합니다 주 스레드 뿐 아니라 스레드와 만들고 각 스레드에에서 2 백만 난수를 생성 합니다.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>It uses the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute to calculate the sum and the count of random numbers per thread.</source>
          <target state="translated">사용 하 여는 <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> 스레드당 임의 숫자의 개수 및 합계를 계산 하는 특성입니다.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>It also defines two additional per-thread fields, <ph id="ph1">`previous`</ph> and <ph id="ph2">`abnormal`</ph>, that allows it to detect corruption of the random number generator.</source>
          <target state="translated">또한 두 개의 추가 스레드가 필드 정의 <ph id="ph1">`previous`</ph> 및 <ph id="ph2">`abnormal`</ph>, 난수 생성기의 손상을 검색할 수 있도록 합니다.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>The example uses the <ph id="ph1">`lock`</ph> statement in C# and the <ph id="ph2">`SyncLock`</ph> construct in Visual Basic to synchronize access to the random number generator.</source>
          <target state="translated">이 예제에서는 사용는 <ph id="ph1">`lock`</ph> C# 문 및 <ph id="ph2">`SyncLock`</ph> 난수 생성기에 대 한 액세스를 동기화 하는 Visual Basic에서 구성 합니다.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>This prevents corruption of the random number generator, which typically results in its returning a value of zero for all subsequent calls.</source>
          <target state="translated">따라서 일반적으로 해당 반환 값이 모든 후속 호출에 대 한 0의 간격은 임의의 수 생성기의 손상 수 없습니다.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>The example also uses the <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> class to ensure that each thread has finished generating random numbers before it displays the total number of calls.</source>
          <target state="translated">또한이 예제에서는 <ph id="ph1">&lt;xref:System.Threading.CountdownEvent&gt;</ph> 각 스레드에 대 한 호출의 총 수를 표시 하기 전에 난수를 생성 되었음을 확인 하는 클래스입니다.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ThreadStaticAttribute">
          <source>Otherwise, if the main thread completes execution before the additional threads that it spawns, it displays an inaccurate value for the total number of method calls.</source>
          <target state="translated">그렇지 않은 경우 추가 스레드를 생성 하기 전에 실행을 완료 하는 주 스레드를 메서드 호출의 총 수를 정확 하지 않은 값 표시 됩니다.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ThreadStaticAttribute.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ThreadStaticAttribute" /&gt;</ph> 클래스의 새 인스턴스를 초기화합니다.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>